// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package v0

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

// AWSAccountDetail includes the GraphQL fields of AWSAccount requested by the fragment AWSAccountDetail.
type AWSAccountDetail struct {
	Id                uuid.UUID       `json:"id"`
	Name              string          `json:"name"`
	State             AWSAccountState `json:"state"`
	AccountID         *string         `json:"accountID"`
	RoleARN           *string         `json:"roleARN"`
	CloudFormationURL string          `json:"cloudFormationURL"`
	Connected         *bool           `json:"connected"`
}

// GetId returns AWSAccountDetail.Id, and is useful for accessing the field via an interface.
func (v *AWSAccountDetail) GetId() uuid.UUID { return v.Id }

// GetName returns AWSAccountDetail.Name, and is useful for accessing the field via an interface.
func (v *AWSAccountDetail) GetName() string { return v.Name }

// GetState returns AWSAccountDetail.State, and is useful for accessing the field via an interface.
func (v *AWSAccountDetail) GetState() AWSAccountState { return v.State }

// GetAccountID returns AWSAccountDetail.AccountID, and is useful for accessing the field via an interface.
func (v *AWSAccountDetail) GetAccountID() *string { return v.AccountID }

// GetRoleARN returns AWSAccountDetail.RoleARN, and is useful for accessing the field via an interface.
func (v *AWSAccountDetail) GetRoleARN() *string { return v.RoleARN }

// GetCloudFormationURL returns AWSAccountDetail.CloudFormationURL, and is useful for accessing the field via an interface.
func (v *AWSAccountDetail) GetCloudFormationURL() string { return v.CloudFormationURL }

// GetConnected returns AWSAccountDetail.Connected, and is useful for accessing the field via an interface.
func (v *AWSAccountDetail) GetConnected() *bool { return v.Connected }

type AWSAccountState string

const (
	AWSAccountStateWaiting AWSAccountState = "WAITING"
	AWSAccountStateSuccess AWSAccountState = "SUCCESS"
	AWSAccountStateError   AWSAccountState = "ERROR"
)

type AcceleratorSpecInput struct {
	Type         string  `json:"type"`
	Count        int     `json:"count"`
	TpuTfVersion *string `json:"tpuTfVersion"`
}

// GetType returns AcceleratorSpecInput.Type, and is useful for accessing the field via an interface.
func (v *AcceleratorSpecInput) GetType() string { return v.Type }

// GetCount returns AcceleratorSpecInput.Count, and is useful for accessing the field via an interface.
func (v *AcceleratorSpecInput) GetCount() int { return v.Count }

// GetTpuTfVersion returns AcceleratorSpecInput.TpuTfVersion, and is useful for accessing the field via an interface.
func (v *AcceleratorSpecInput) GetTpuTfVersion() *string { return v.TpuTfVersion }

type AdapterStatusCriterion struct {
	Value []*string `json:"value"`
}

// GetValue returns AdapterStatusCriterion.Value, and is useful for accessing the field via an interface.
func (v *AdapterStatusCriterion) GetValue() []*string { return v.Value }

type AddAWSAccountInput struct {
	UserID    uuid.UUID `json:"userID"`
	AccountID string    `json:"accountID"`
}

// GetUserID returns AddAWSAccountInput.UserID, and is useful for accessing the field via an interface.
func (v *AddAWSAccountInput) GetUserID() uuid.UUID { return v.UserID }

// GetAccountID returns AddAWSAccountInput.AccountID, and is useful for accessing the field via an interface.
func (v *AddAWSAccountInput) GetAccountID() string { return v.AccountID }

type AddAzureAccountInput struct {
	UserID         uuid.UUID `json:"userID"`
	Name           *string   `json:"name"`
	SubscriptionID string    `json:"subscriptionID"`
	TenantID       string    `json:"tenantID"`
	ClientID       string    `json:"clientID"`
	ClientSecret   string    `json:"clientSecret"`
}

// GetUserID returns AddAzureAccountInput.UserID, and is useful for accessing the field via an interface.
func (v *AddAzureAccountInput) GetUserID() uuid.UUID { return v.UserID }

// GetName returns AddAzureAccountInput.Name, and is useful for accessing the field via an interface.
func (v *AddAzureAccountInput) GetName() *string { return v.Name }

// GetSubscriptionID returns AddAzureAccountInput.SubscriptionID, and is useful for accessing the field via an interface.
func (v *AddAzureAccountInput) GetSubscriptionID() string { return v.SubscriptionID }

// GetTenantID returns AddAzureAccountInput.TenantID, and is useful for accessing the field via an interface.
func (v *AddAzureAccountInput) GetTenantID() string { return v.TenantID }

// GetClientID returns AddAzureAccountInput.ClientID, and is useful for accessing the field via an interface.
func (v *AddAzureAccountInput) GetClientID() string { return v.ClientID }

// GetClientSecret returns AddAzureAccountInput.ClientSecret, and is useful for accessing the field via an interface.
func (v *AddAzureAccountInput) GetClientSecret() string { return v.ClientSecret }

type AddCDNInput struct {
	Id       uuid.UUID   `json:"id"`
	Provider CDNProvider `json:"provider"`
	Domains  []string    `json:"domains"`
}

// GetId returns AddCDNInput.Id, and is useful for accessing the field via an interface.
func (v *AddCDNInput) GetId() uuid.UUID { return v.Id }

// GetProvider returns AddCDNInput.Provider, and is useful for accessing the field via an interface.
func (v *AddCDNInput) GetProvider() CDNProvider { return v.Provider }

// GetDomains returns AddCDNInput.Domains, and is useful for accessing the field via an interface.
func (v *AddCDNInput) GetDomains() []string { return v.Domains }

type AddClusterInput struct {
	UserID        uuid.UUID  `json:"userID"`
	Kubeconfig    *string    `json:"kubeconfig"`
	AwsAccountID  *uuid.UUID `json:"awsAccountID"`
	GcpAccountID  *uuid.UUID `json:"gcpAccountID"`
	Name          *string    `json:"name"`
	Region        *string    `json:"region"`
	IsPlaceholder *bool      `json:"isPlaceholder"`
}

// GetUserID returns AddClusterInput.UserID, and is useful for accessing the field via an interface.
func (v *AddClusterInput) GetUserID() uuid.UUID { return v.UserID }

// GetKubeconfig returns AddClusterInput.Kubeconfig, and is useful for accessing the field via an interface.
func (v *AddClusterInput) GetKubeconfig() *string { return v.Kubeconfig }

// GetAwsAccountID returns AddClusterInput.AwsAccountID, and is useful for accessing the field via an interface.
func (v *AddClusterInput) GetAwsAccountID() *uuid.UUID { return v.AwsAccountID }

// GetGcpAccountID returns AddClusterInput.GcpAccountID, and is useful for accessing the field via an interface.
func (v *AddClusterInput) GetGcpAccountID() *uuid.UUID { return v.GcpAccountID }

// GetName returns AddClusterInput.Name, and is useful for accessing the field via an interface.
func (v *AddClusterInput) GetName() *string { return v.Name }

// GetRegion returns AddClusterInput.Region, and is useful for accessing the field via an interface.
func (v *AddClusterInput) GetRegion() *string { return v.Region }

// GetIsPlaceholder returns AddClusterInput.IsPlaceholder, and is useful for accessing the field via an interface.
func (v *AddClusterInput) GetIsPlaceholder() *bool { return v.IsPlaceholder }

type AddContainerRegistryInput struct {
	UserID   uuid.UUID `json:"userID"`
	Name     string    `json:"name"`
	Registry string    `json:"registry"`
	Username string    `json:"username"`
	Password string    `json:"password"`
}

// GetUserID returns AddContainerRegistryInput.UserID, and is useful for accessing the field via an interface.
func (v *AddContainerRegistryInput) GetUserID() uuid.UUID { return v.UserID }

// GetName returns AddContainerRegistryInput.Name, and is useful for accessing the field via an interface.
func (v *AddContainerRegistryInput) GetName() string { return v.Name }

// GetRegistry returns AddContainerRegistryInput.Registry, and is useful for accessing the field via an interface.
func (v *AddContainerRegistryInput) GetRegistry() string { return v.Registry }

// GetUsername returns AddContainerRegistryInput.Username, and is useful for accessing the field via an interface.
func (v *AddContainerRegistryInput) GetUsername() string { return v.Username }

// GetPassword returns AddContainerRegistryInput.Password, and is useful for accessing the field via an interface.
func (v *AddContainerRegistryInput) GetPassword() string { return v.Password }

type AddCoreWeaveAccountInput struct {
	UserID     uuid.UUID `json:"userID"`
	Kubeconfig *string   `json:"kubeconfig"`
}

// GetUserID returns AddCoreWeaveAccountInput.UserID, and is useful for accessing the field via an interface.
func (v *AddCoreWeaveAccountInput) GetUserID() uuid.UUID { return v.UserID }

// GetKubeconfig returns AddCoreWeaveAccountInput.Kubeconfig, and is useful for accessing the field via an interface.
func (v *AddCoreWeaveAccountInput) GetKubeconfig() *string { return v.Kubeconfig }

type AddDOAccountInput struct {
	UserID      uuid.UUID `json:"userID"`
	Name        *string   `json:"name"`
	AccessToken string    `json:"accessToken"`
}

// GetUserID returns AddDOAccountInput.UserID, and is useful for accessing the field via an interface.
func (v *AddDOAccountInput) GetUserID() uuid.UUID { return v.UserID }

// GetName returns AddDOAccountInput.Name, and is useful for accessing the field via an interface.
func (v *AddDOAccountInput) GetName() *string { return v.Name }

// GetAccessToken returns AddDOAccountInput.AccessToken, and is useful for accessing the field via an interface.
func (v *AddDOAccountInput) GetAccessToken() string { return v.AccessToken }

type AddGCPAccountInput struct {
	UserID      uuid.UUID `json:"userID"`
	ProjectID   string    `json:"projectID"`
	Credentials string    `json:"credentials"`
}

// GetUserID returns AddGCPAccountInput.UserID, and is useful for accessing the field via an interface.
func (v *AddGCPAccountInput) GetUserID() uuid.UUID { return v.UserID }

// GetProjectID returns AddGCPAccountInput.ProjectID, and is useful for accessing the field via an interface.
func (v *AddGCPAccountInput) GetProjectID() string { return v.ProjectID }

// GetCredentials returns AddGCPAccountInput.Credentials, and is useful for accessing the field via an interface.
func (v *AddGCPAccountInput) GetCredentials() string { return v.Credentials }

type AddLinodeAccountInput struct {
	UserID      uuid.UUID `json:"userID"`
	Name        *string   `json:"name"`
	AccessToken string    `json:"accessToken"`
}

// GetUserID returns AddLinodeAccountInput.UserID, and is useful for accessing the field via an interface.
func (v *AddLinodeAccountInput) GetUserID() uuid.UUID { return v.UserID }

// GetName returns AddLinodeAccountInput.Name, and is useful for accessing the field via an interface.
func (v *AddLinodeAccountInput) GetName() *string { return v.Name }

// GetAccessToken returns AddLinodeAccountInput.AccessToken, and is useful for accessing the field via an interface.
func (v *AddLinodeAccountInput) GetAccessToken() string { return v.AccessToken }

type AddProjectCollaboratorInput struct {
	Id   uuid.UUID               `json:"id"`
	User string                  `json:"user"`
	Role ProjectCollaboratorRole `json:"role"`
}

// GetId returns AddProjectCollaboratorInput.Id, and is useful for accessing the field via an interface.
func (v *AddProjectCollaboratorInput) GetId() uuid.UUID { return v.Id }

// GetUser returns AddProjectCollaboratorInput.User, and is useful for accessing the field via an interface.
func (v *AddProjectCollaboratorInput) GetUser() string { return v.User }

// GetRole returns AddProjectCollaboratorInput.Role, and is useful for accessing the field via an interface.
func (v *AddProjectCollaboratorInput) GetRole() ProjectCollaboratorRole { return v.Role }

type AddRepoCustomDomainInput struct {
	Id                        uuid.UUID                 `json:"id"`
	Domain                    string                    `json:"domain"`
	CertManagerChallengerType *CertManagerChallengeType `json:"certManagerChallengerType"`
	SyncDomainID              *uuid.UUID                `json:"syncDomainID"`
}

// GetId returns AddRepoCustomDomainInput.Id, and is useful for accessing the field via an interface.
func (v *AddRepoCustomDomainInput) GetId() uuid.UUID { return v.Id }

// GetDomain returns AddRepoCustomDomainInput.Domain, and is useful for accessing the field via an interface.
func (v *AddRepoCustomDomainInput) GetDomain() string { return v.Domain }

// GetCertManagerChallengerType returns AddRepoCustomDomainInput.CertManagerChallengerType, and is useful for accessing the field via an interface.
func (v *AddRepoCustomDomainInput) GetCertManagerChallengerType() *CertManagerChallengeType {
	return v.CertManagerChallengerType
}

// GetSyncDomainID returns AddRepoCustomDomainInput.SyncDomainID, and is useful for accessing the field via an interface.
func (v *AddRepoCustomDomainInput) GetSyncDomainID() *uuid.UUID { return v.SyncDomainID }

type AddTeamMemberInput struct {
	Id       uuid.UUID      `json:"id"`
	Username *string        `json:"username"`
	UserID   *uuid.UUID     `json:"userID"`
	Role     TeamMemberRole `json:"role"`
}

// GetId returns AddTeamMemberInput.Id, and is useful for accessing the field via an interface.
func (v *AddTeamMemberInput) GetId() uuid.UUID { return v.Id }

// GetUsername returns AddTeamMemberInput.Username, and is useful for accessing the field via an interface.
func (v *AddTeamMemberInput) GetUsername() *string { return v.Username }

// GetUserID returns AddTeamMemberInput.UserID, and is useful for accessing the field via an interface.
func (v *AddTeamMemberInput) GetUserID() *uuid.UUID { return v.UserID }

// GetRole returns AddTeamMemberInput.Role, and is useful for accessing the field via an interface.
func (v *AddTeamMemberInput) GetRole() TeamMemberRole { return v.Role }

type AddVultrAccountInput struct {
	UserID      uuid.UUID `json:"userID"`
	Name        string    `json:"name"`
	AccessToken string    `json:"accessToken"`
}

// GetUserID returns AddVultrAccountInput.UserID, and is useful for accessing the field via an interface.
func (v *AddVultrAccountInput) GetUserID() uuid.UUID { return v.UserID }

// GetName returns AddVultrAccountInput.Name, and is useful for accessing the field via an interface.
func (v *AddVultrAccountInput) GetName() string { return v.Name }

// GetAccessToken returns AddVultrAccountInput.AccessToken, and is useful for accessing the field via an interface.
func (v *AddVultrAccountInput) GetAccessToken() string { return v.AccessToken }

type AttachAwsPolicyToUser struct {
	UserID                  uuid.UUID `json:"userID"`
	PolicyArn               string    `json:"policyArn"`
	AwsUsername             string    `json:"awsUsername"`
	AwsAccountCredentialsId uuid.UUID `json:"awsAccountCredentialsId"`
}

// GetUserID returns AttachAwsPolicyToUser.UserID, and is useful for accessing the field via an interface.
func (v *AttachAwsPolicyToUser) GetUserID() uuid.UUID { return v.UserID }

// GetPolicyArn returns AttachAwsPolicyToUser.PolicyArn, and is useful for accessing the field via an interface.
func (v *AttachAwsPolicyToUser) GetPolicyArn() string { return v.PolicyArn }

// GetAwsUsername returns AttachAwsPolicyToUser.AwsUsername, and is useful for accessing the field via an interface.
func (v *AttachAwsPolicyToUser) GetAwsUsername() string { return v.AwsUsername }

// GetAwsAccountCredentialsId returns AttachAwsPolicyToUser.AwsAccountCredentialsId, and is useful for accessing the field via an interface.
func (v *AttachAwsPolicyToUser) GetAwsAccountCredentialsId() uuid.UUID {
	return v.AwsAccountCredentialsId
}

// AttachAwsPolicyToUserResponse is returned by AttachAwsPolicyToUser on success.
type AttachAwsPolicyToUserResponse struct {
	AttachAwsPolicyToUser bool `json:"attachAwsPolicyToUser"`
}

// GetAttachAwsPolicyToUser returns AttachAwsPolicyToUserResponse.AttachAwsPolicyToUser, and is useful for accessing the field via an interface.
func (v *AttachAwsPolicyToUserResponse) GetAttachAwsPolicyToUser() bool {
	return v.AttachAwsPolicyToUser
}

type AutoscalingInput struct {
	MinReplicas          int                       `json:"minReplicas"`
	MaxReplicas          int                       `json:"maxReplicas"`
	CoolDownPeriod       *int                      `json:"coolDownPeriod"`
	Triggers             []AutoscalingTriggerInput `json:"triggers"`
	KedaScaledObjectSpec *string                   `json:"kedaScaledObjectSpec"`
}

// GetMinReplicas returns AutoscalingInput.MinReplicas, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetMinReplicas() int { return v.MinReplicas }

// GetMaxReplicas returns AutoscalingInput.MaxReplicas, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetMaxReplicas() int { return v.MaxReplicas }

// GetCoolDownPeriod returns AutoscalingInput.CoolDownPeriod, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetCoolDownPeriod() *int { return v.CoolDownPeriod }

// GetTriggers returns AutoscalingInput.Triggers, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetTriggers() []AutoscalingTriggerInput { return v.Triggers }

// GetKedaScaledObjectSpec returns AutoscalingInput.KedaScaledObjectSpec, and is useful for accessing the field via an interface.
func (v *AutoscalingInput) GetKedaScaledObjectSpec() *string { return v.KedaScaledObjectSpec }

type AutoscalingTriggerInput struct {
	Type AutoscalingType `json:"type"`
	Spec string          `json:"spec"`
}

// GetType returns AutoscalingTriggerInput.Type, and is useful for accessing the field via an interface.
func (v *AutoscalingTriggerInput) GetType() AutoscalingType { return v.Type }

// GetSpec returns AutoscalingTriggerInput.Spec, and is useful for accessing the field via an interface.
func (v *AutoscalingTriggerInput) GetSpec() string { return v.Spec }

type AutoscalingType string

const (
	AutoscalingTypeCpu        AutoscalingType = "CPU"
	AutoscalingTypeMemory     AutoscalingType = "MEMORY"
	AutoscalingTypePrometheus AutoscalingType = "PROMETHEUS"
	AutoscalingTypeCustom     AutoscalingType = "CUSTOM"
)

type AwsPolicyJsonInput struct {
	Arn        *string `json:"arn"`
	Username   *string `json:"username"`
	PolicyName *string `json:"policyName"`
}

// GetArn returns AwsPolicyJsonInput.Arn, and is useful for accessing the field via an interface.
func (v *AwsPolicyJsonInput) GetArn() *string { return v.Arn }

// GetUsername returns AwsPolicyJsonInput.Username, and is useful for accessing the field via an interface.
func (v *AwsPolicyJsonInput) GetUsername() *string { return v.Username }

// GetPolicyName returns AwsPolicyJsonInput.PolicyName, and is useful for accessing the field via an interface.
func (v *AwsPolicyJsonInput) GetPolicyName() *string { return v.PolicyName }

type AwsResourceSearchInput struct {
	Region    *string `json:"region"`
	Tag       *string `json:"tag"`
	NextToken *string `json:"nextToken"`
}

// GetRegion returns AwsResourceSearchInput.Region, and is useful for accessing the field via an interface.
func (v *AwsResourceSearchInput) GetRegion() *string { return v.Region }

// GetTag returns AwsResourceSearchInput.Tag, and is useful for accessing the field via an interface.
func (v *AwsResourceSearchInput) GetTag() *string { return v.Tag }

// GetNextToken returns AwsResourceSearchInput.NextToken, and is useful for accessing the field via an interface.
func (v *AwsResourceSearchInput) GetNextToken() *string { return v.NextToken }

type AwsSamGeneratorConfigurationInput struct {
	EnvVars                    []*EnvVarInput `json:"envVars"`
	RunCommand                 *string        `json:"runCommand"`
	ServerlessMemory           *int           `json:"serverlessMemory"`
	ServerlessArch             *string        `json:"serverlessArch"`
	CustomDomainHost           *string        `json:"customDomainHost"`
	CustomDomainCertificateArn *string        `json:"customDomainCertificateArn"`
	HttpPort                   *string        `json:"httpPort"`
	BuildImage                 *string        `json:"buildImage"`
}

// GetEnvVars returns AwsSamGeneratorConfigurationInput.EnvVars, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetEnvVars() []*EnvVarInput { return v.EnvVars }

// GetRunCommand returns AwsSamGeneratorConfigurationInput.RunCommand, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetRunCommand() *string { return v.RunCommand }

// GetServerlessMemory returns AwsSamGeneratorConfigurationInput.ServerlessMemory, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetServerlessMemory() *int { return v.ServerlessMemory }

// GetServerlessArch returns AwsSamGeneratorConfigurationInput.ServerlessArch, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetServerlessArch() *string { return v.ServerlessArch }

// GetCustomDomainHost returns AwsSamGeneratorConfigurationInput.CustomDomainHost, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetCustomDomainHost() *string { return v.CustomDomainHost }

// GetCustomDomainCertificateArn returns AwsSamGeneratorConfigurationInput.CustomDomainCertificateArn, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetCustomDomainCertificateArn() *string {
	return v.CustomDomainCertificateArn
}

// GetHttpPort returns AwsSamGeneratorConfigurationInput.HttpPort, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetHttpPort() *string { return v.HttpPort }

// GetBuildImage returns AwsSamGeneratorConfigurationInput.BuildImage, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetBuildImage() *string { return v.BuildImage }

type AwsSamProjectV3ConfigurationInput struct {
	AwsAccountId uuid.UUID                          `json:"awsAccountId"`
	AwsRegion    *string                            `json:"awsRegion"`
	StackName    string                             `json:"stackName"`
	Generator    *AwsSamGeneratorConfigurationInput `json:"generator"`
}

// GetAwsAccountId returns AwsSamProjectV3ConfigurationInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *AwsSamProjectV3ConfigurationInput) GetAwsAccountId() uuid.UUID { return v.AwsAccountId }

// GetAwsRegion returns AwsSamProjectV3ConfigurationInput.AwsRegion, and is useful for accessing the field via an interface.
func (v *AwsSamProjectV3ConfigurationInput) GetAwsRegion() *string { return v.AwsRegion }

// GetStackName returns AwsSamProjectV3ConfigurationInput.StackName, and is useful for accessing the field via an interface.
func (v *AwsSamProjectV3ConfigurationInput) GetStackName() string { return v.StackName }

// GetGenerator returns AwsSamProjectV3ConfigurationInput.Generator, and is useful for accessing the field via an interface.
func (v *AwsSamProjectV3ConfigurationInput) GetGenerator() *AwsSamGeneratorConfigurationInput {
	return v.Generator
}

// AzureAccountDetail includes the GraphQL fields of AzureAccount requested by the fragment AzureAccountDetail.
type AzureAccountDetail struct {
	Id             uuid.UUID         `json:"id"`
	Name           string            `json:"name"`
	State          CloudAccountState `json:"state"`
	Connected      *bool             `json:"connected"`
	SubscriptionID *string           `json:"subscriptionID"`
	TenantID       *string           `json:"tenantID"`
	ClientID       *string           `json:"clientID"`
}

// GetId returns AzureAccountDetail.Id, and is useful for accessing the field via an interface.
func (v *AzureAccountDetail) GetId() uuid.UUID { return v.Id }

// GetName returns AzureAccountDetail.Name, and is useful for accessing the field via an interface.
func (v *AzureAccountDetail) GetName() string { return v.Name }

// GetState returns AzureAccountDetail.State, and is useful for accessing the field via an interface.
func (v *AzureAccountDetail) GetState() CloudAccountState { return v.State }

// GetConnected returns AzureAccountDetail.Connected, and is useful for accessing the field via an interface.
func (v *AzureAccountDetail) GetConnected() *bool { return v.Connected }

// GetSubscriptionID returns AzureAccountDetail.SubscriptionID, and is useful for accessing the field via an interface.
func (v *AzureAccountDetail) GetSubscriptionID() *string { return v.SubscriptionID }

// GetTenantID returns AzureAccountDetail.TenantID, and is useful for accessing the field via an interface.
func (v *AzureAccountDetail) GetTenantID() *string { return v.TenantID }

// GetClientID returns AzureAccountDetail.ClientID, and is useful for accessing the field via an interface.
func (v *AzureAccountDetail) GetClientID() *string { return v.ClientID }

type BetterStackIntegrationInput struct {
	Token string `json:"token"`
}

// GetToken returns BetterStackIntegrationInput.Token, and is useful for accessing the field via an interface.
func (v *BetterStackIntegrationInput) GetToken() string { return v.Token }

// BillingOverviewDetail includes the GraphQL fields of BillingOverview requested by the fragment BillingOverviewDetail.
type BillingOverviewDetail struct {
	CurrentProducts          []BillingOverviewDetailCurrentProductsProduct                   `json:"-"`
	ExternalLinks            *BillingOverviewDetailExternalLinksExternalBillingProviderLinks `json:"externalLinks"`
	SubscriptionUsageAllowed BillingOverviewDetailSubscriptionUsageAllowed                   `json:"subscriptionUsageAllowed"`
}

// GetCurrentProducts returns BillingOverviewDetail.CurrentProducts, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetail) GetCurrentProducts() []BillingOverviewDetailCurrentProductsProduct {
	return v.CurrentProducts
}

// GetExternalLinks returns BillingOverviewDetail.ExternalLinks, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetail) GetExternalLinks() *BillingOverviewDetailExternalLinksExternalBillingProviderLinks {
	return v.ExternalLinks
}

// GetSubscriptionUsageAllowed returns BillingOverviewDetail.SubscriptionUsageAllowed, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetail) GetSubscriptionUsageAllowed() BillingOverviewDetailSubscriptionUsageAllowed {
	return v.SubscriptionUsageAllowed
}

func (v *BillingOverviewDetail) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BillingOverviewDetail
		CurrentProducts []json.RawMessage `json:"currentProducts"`
		graphql.NoUnmarshalJSON
	}
	firstPass.BillingOverviewDetail = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CurrentProducts
		src := firstPass.CurrentProducts
		*dst = make(
			[]BillingOverviewDetailCurrentProductsProduct,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalBillingOverviewDetailCurrentProductsProduct(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal BillingOverviewDetail.CurrentProducts: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalBillingOverviewDetail struct {
	CurrentProducts []json.RawMessage `json:"currentProducts"`

	ExternalLinks *BillingOverviewDetailExternalLinksExternalBillingProviderLinks `json:"externalLinks"`

	SubscriptionUsageAllowed BillingOverviewDetailSubscriptionUsageAllowed `json:"subscriptionUsageAllowed"`
}

func (v *BillingOverviewDetail) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BillingOverviewDetail) __premarshalJSON() (*__premarshalBillingOverviewDetail, error) {
	var retval __premarshalBillingOverviewDetail

	{

		dst := &retval.CurrentProducts
		src := v.CurrentProducts
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalBillingOverviewDetailCurrentProductsProduct(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal BillingOverviewDetail.CurrentProducts: %w", err)
			}
		}
	}
	retval.ExternalLinks = v.ExternalLinks
	retval.SubscriptionUsageAllowed = v.SubscriptionUsageAllowed
	return &retval, nil
}

// BillingOverviewDetailCurrentProductsApiAccess includes the requested fields of the GraphQL type ApiAccess.
type BillingOverviewDetailCurrentProductsApiAccess struct {
	Typename               *string `json:"__typename"`
	ProductDetailApiAccess `json:"-"`
}

// GetTypename returns BillingOverviewDetailCurrentProductsApiAccess.Typename, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsApiAccess) GetTypename() *string { return v.Typename }

// GetProductTypeMetadata returns BillingOverviewDetailCurrentProductsApiAccess.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsApiAccess) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailApiAccess.ProductTypeMetadata
}

// GetName returns BillingOverviewDetailCurrentProductsApiAccess.Name, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsApiAccess) GetName() *string {
	return v.ProductDetailApiAccess.Name
}

// GetDescription returns BillingOverviewDetailCurrentProductsApiAccess.Description, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsApiAccess) GetDescription() *string {
	return v.ProductDetailApiAccess.Description
}

// GetSku returns BillingOverviewDetailCurrentProductsApiAccess.Sku, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsApiAccess) GetSku() uuid.UUID {
	return v.ProductDetailApiAccess.Sku
}

// GetDisplayPrice returns BillingOverviewDetailCurrentProductsApiAccess.DisplayPrice, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsApiAccess) GetDisplayPrice() *string {
	return v.ProductDetailApiAccess.DisplayPrice
}

// GetUsage returns BillingOverviewDetailCurrentProductsApiAccess.Usage, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsApiAccess) GetUsage() []ProductDetailUsage {
	return v.ProductDetailApiAccess.Usage
}

// GetBenefits returns BillingOverviewDetailCurrentProductsApiAccess.Benefits, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsApiAccess) GetBenefits() []string {
	return v.ProductDetailApiAccess.Benefits
}

func (v *BillingOverviewDetailCurrentProductsApiAccess) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BillingOverviewDetailCurrentProductsApiAccess
		graphql.NoUnmarshalJSON
	}
	firstPass.BillingOverviewDetailCurrentProductsApiAccess = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailApiAccess)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBillingOverviewDetailCurrentProductsApiAccess struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *BillingOverviewDetailCurrentProductsApiAccess) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BillingOverviewDetailCurrentProductsApiAccess) __premarshalJSON() (*__premarshalBillingOverviewDetailCurrentProductsApiAccess, error) {
	var retval __premarshalBillingOverviewDetailCurrentProductsApiAccess

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailApiAccess.ProductTypeMetadata
	retval.Name = v.ProductDetailApiAccess.Name
	retval.Description = v.ProductDetailApiAccess.Description
	retval.Sku = v.ProductDetailApiAccess.Sku
	retval.DisplayPrice = v.ProductDetailApiAccess.DisplayPrice
	retval.Usage = v.ProductDetailApiAccess.Usage
	retval.Benefits = v.ProductDetailApiAccess.Benefits
	return &retval, nil
}

// BillingOverviewDetailCurrentProductsPlanTierV2 includes the requested fields of the GraphQL type PlanTierV2.
type BillingOverviewDetailCurrentProductsPlanTierV2 struct {
	Typename                *string `json:"__typename"`
	ProductDetailPlanTierV2 `json:"-"`
}

// GetTypename returns BillingOverviewDetailCurrentProductsPlanTierV2.Typename, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsPlanTierV2) GetTypename() *string { return v.Typename }

// GetProductTypeMetadata returns BillingOverviewDetailCurrentProductsPlanTierV2.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsPlanTierV2) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailPlanTierV2.ProductTypeMetadata
}

// GetName returns BillingOverviewDetailCurrentProductsPlanTierV2.Name, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsPlanTierV2) GetName() *string {
	return v.ProductDetailPlanTierV2.Name
}

// GetDescription returns BillingOverviewDetailCurrentProductsPlanTierV2.Description, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsPlanTierV2) GetDescription() *string {
	return v.ProductDetailPlanTierV2.Description
}

// GetSku returns BillingOverviewDetailCurrentProductsPlanTierV2.Sku, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsPlanTierV2) GetSku() uuid.UUID {
	return v.ProductDetailPlanTierV2.Sku
}

// GetDisplayPrice returns BillingOverviewDetailCurrentProductsPlanTierV2.DisplayPrice, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsPlanTierV2) GetDisplayPrice() *string {
	return v.ProductDetailPlanTierV2.DisplayPrice
}

// GetUsage returns BillingOverviewDetailCurrentProductsPlanTierV2.Usage, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsPlanTierV2) GetUsage() []ProductDetailUsage {
	return v.ProductDetailPlanTierV2.Usage
}

// GetBenefits returns BillingOverviewDetailCurrentProductsPlanTierV2.Benefits, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsPlanTierV2) GetBenefits() []string {
	return v.ProductDetailPlanTierV2.Benefits
}

func (v *BillingOverviewDetailCurrentProductsPlanTierV2) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BillingOverviewDetailCurrentProductsPlanTierV2
		graphql.NoUnmarshalJSON
	}
	firstPass.BillingOverviewDetailCurrentProductsPlanTierV2 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailPlanTierV2)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBillingOverviewDetailCurrentProductsPlanTierV2 struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *BillingOverviewDetailCurrentProductsPlanTierV2) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BillingOverviewDetailCurrentProductsPlanTierV2) __premarshalJSON() (*__premarshalBillingOverviewDetailCurrentProductsPlanTierV2, error) {
	var retval __premarshalBillingOverviewDetailCurrentProductsPlanTierV2

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailPlanTierV2.ProductTypeMetadata
	retval.Name = v.ProductDetailPlanTierV2.Name
	retval.Description = v.ProductDetailPlanTierV2.Description
	retval.Sku = v.ProductDetailPlanTierV2.Sku
	retval.DisplayPrice = v.ProductDetailPlanTierV2.DisplayPrice
	retval.Usage = v.ProductDetailPlanTierV2.Usage
	retval.Benefits = v.ProductDetailPlanTierV2.Benefits
	return &retval, nil
}

// BillingOverviewDetailCurrentProductsProduct includes the requested fields of the GraphQL interface Product.
//
// BillingOverviewDetailCurrentProductsProduct is implemented by the following types:
// BillingOverviewDetailCurrentProductsApiAccess
// BillingOverviewDetailCurrentProductsPlanTierV2
// BillingOverviewDetailCurrentProductsProjectPack
// BillingOverviewDetailCurrentProductsSupportTier
type BillingOverviewDetailCurrentProductsProduct interface {
	implementsGraphQLInterfaceBillingOverviewDetailCurrentProductsProduct()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	ProductDetail
}

func (v *BillingOverviewDetailCurrentProductsApiAccess) implementsGraphQLInterfaceBillingOverviewDetailCurrentProductsProduct() {
}
func (v *BillingOverviewDetailCurrentProductsApiAccess) implementsGraphQLInterfaceProductDetail() {}
func (v *BillingOverviewDetailCurrentProductsPlanTierV2) implementsGraphQLInterfaceBillingOverviewDetailCurrentProductsProduct() {
}
func (v *BillingOverviewDetailCurrentProductsPlanTierV2) implementsGraphQLInterfaceProductDetail() {}
func (v *BillingOverviewDetailCurrentProductsProjectPack) implementsGraphQLInterfaceBillingOverviewDetailCurrentProductsProduct() {
}
func (v *BillingOverviewDetailCurrentProductsProjectPack) implementsGraphQLInterfaceProductDetail() {}
func (v *BillingOverviewDetailCurrentProductsSupportTier) implementsGraphQLInterfaceBillingOverviewDetailCurrentProductsProduct() {
}
func (v *BillingOverviewDetailCurrentProductsSupportTier) implementsGraphQLInterfaceProductDetail() {}

func __unmarshalBillingOverviewDetailCurrentProductsProduct(b []byte, v *BillingOverviewDetailCurrentProductsProduct) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ApiAccess":
		*v = new(BillingOverviewDetailCurrentProductsApiAccess)
		return json.Unmarshal(b, *v)
	case "PlanTierV2":
		*v = new(BillingOverviewDetailCurrentProductsPlanTierV2)
		return json.Unmarshal(b, *v)
	case "ProjectPack":
		*v = new(BillingOverviewDetailCurrentProductsProjectPack)
		return json.Unmarshal(b, *v)
	case "SupportTier":
		*v = new(BillingOverviewDetailCurrentProductsSupportTier)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Product.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for BillingOverviewDetailCurrentProductsProduct: "%v"`, tn.TypeName)
	}
}

func __marshalBillingOverviewDetailCurrentProductsProduct(v *BillingOverviewDetailCurrentProductsProduct) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *BillingOverviewDetailCurrentProductsApiAccess:
		typename = "ApiAccess"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalBillingOverviewDetailCurrentProductsApiAccess
		}{typename, premarshaled}
		return json.Marshal(result)
	case *BillingOverviewDetailCurrentProductsPlanTierV2:
		typename = "PlanTierV2"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalBillingOverviewDetailCurrentProductsPlanTierV2
		}{typename, premarshaled}
		return json.Marshal(result)
	case *BillingOverviewDetailCurrentProductsProjectPack:
		typename = "ProjectPack"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalBillingOverviewDetailCurrentProductsProjectPack
		}{typename, premarshaled}
		return json.Marshal(result)
	case *BillingOverviewDetailCurrentProductsSupportTier:
		typename = "SupportTier"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalBillingOverviewDetailCurrentProductsSupportTier
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for BillingOverviewDetailCurrentProductsProduct: "%T"`, v)
	}
}

// BillingOverviewDetailCurrentProductsProjectPack includes the requested fields of the GraphQL type ProjectPack.
type BillingOverviewDetailCurrentProductsProjectPack struct {
	Typename                 *string `json:"__typename"`
	ProductDetailProjectPack `json:"-"`
}

// GetTypename returns BillingOverviewDetailCurrentProductsProjectPack.Typename, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsProjectPack) GetTypename() *string { return v.Typename }

// GetProductTypeMetadata returns BillingOverviewDetailCurrentProductsProjectPack.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsProjectPack) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailProjectPack.ProductTypeMetadata
}

// GetName returns BillingOverviewDetailCurrentProductsProjectPack.Name, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsProjectPack) GetName() *string {
	return v.ProductDetailProjectPack.Name
}

// GetDescription returns BillingOverviewDetailCurrentProductsProjectPack.Description, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsProjectPack) GetDescription() *string {
	return v.ProductDetailProjectPack.Description
}

// GetSku returns BillingOverviewDetailCurrentProductsProjectPack.Sku, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsProjectPack) GetSku() uuid.UUID {
	return v.ProductDetailProjectPack.Sku
}

// GetDisplayPrice returns BillingOverviewDetailCurrentProductsProjectPack.DisplayPrice, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsProjectPack) GetDisplayPrice() *string {
	return v.ProductDetailProjectPack.DisplayPrice
}

// GetUsage returns BillingOverviewDetailCurrentProductsProjectPack.Usage, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsProjectPack) GetUsage() []ProductDetailUsage {
	return v.ProductDetailProjectPack.Usage
}

// GetBenefits returns BillingOverviewDetailCurrentProductsProjectPack.Benefits, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsProjectPack) GetBenefits() []string {
	return v.ProductDetailProjectPack.Benefits
}

func (v *BillingOverviewDetailCurrentProductsProjectPack) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BillingOverviewDetailCurrentProductsProjectPack
		graphql.NoUnmarshalJSON
	}
	firstPass.BillingOverviewDetailCurrentProductsProjectPack = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailProjectPack)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBillingOverviewDetailCurrentProductsProjectPack struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *BillingOverviewDetailCurrentProductsProjectPack) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BillingOverviewDetailCurrentProductsProjectPack) __premarshalJSON() (*__premarshalBillingOverviewDetailCurrentProductsProjectPack, error) {
	var retval __premarshalBillingOverviewDetailCurrentProductsProjectPack

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailProjectPack.ProductTypeMetadata
	retval.Name = v.ProductDetailProjectPack.Name
	retval.Description = v.ProductDetailProjectPack.Description
	retval.Sku = v.ProductDetailProjectPack.Sku
	retval.DisplayPrice = v.ProductDetailProjectPack.DisplayPrice
	retval.Usage = v.ProductDetailProjectPack.Usage
	retval.Benefits = v.ProductDetailProjectPack.Benefits
	return &retval, nil
}

// BillingOverviewDetailCurrentProductsSupportTier includes the requested fields of the GraphQL type SupportTier.
type BillingOverviewDetailCurrentProductsSupportTier struct {
	Typename                 *string `json:"__typename"`
	ProductDetailSupportTier `json:"-"`
}

// GetTypename returns BillingOverviewDetailCurrentProductsSupportTier.Typename, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsSupportTier) GetTypename() *string { return v.Typename }

// GetProductTypeMetadata returns BillingOverviewDetailCurrentProductsSupportTier.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsSupportTier) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailSupportTier.ProductTypeMetadata
}

// GetName returns BillingOverviewDetailCurrentProductsSupportTier.Name, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsSupportTier) GetName() *string {
	return v.ProductDetailSupportTier.Name
}

// GetDescription returns BillingOverviewDetailCurrentProductsSupportTier.Description, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsSupportTier) GetDescription() *string {
	return v.ProductDetailSupportTier.Description
}

// GetSku returns BillingOverviewDetailCurrentProductsSupportTier.Sku, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsSupportTier) GetSku() uuid.UUID {
	return v.ProductDetailSupportTier.Sku
}

// GetDisplayPrice returns BillingOverviewDetailCurrentProductsSupportTier.DisplayPrice, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsSupportTier) GetDisplayPrice() *string {
	return v.ProductDetailSupportTier.DisplayPrice
}

// GetUsage returns BillingOverviewDetailCurrentProductsSupportTier.Usage, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsSupportTier) GetUsage() []ProductDetailUsage {
	return v.ProductDetailSupportTier.Usage
}

// GetBenefits returns BillingOverviewDetailCurrentProductsSupportTier.Benefits, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailCurrentProductsSupportTier) GetBenefits() []string {
	return v.ProductDetailSupportTier.Benefits
}

func (v *BillingOverviewDetailCurrentProductsSupportTier) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BillingOverviewDetailCurrentProductsSupportTier
		graphql.NoUnmarshalJSON
	}
	firstPass.BillingOverviewDetailCurrentProductsSupportTier = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailSupportTier)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBillingOverviewDetailCurrentProductsSupportTier struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *BillingOverviewDetailCurrentProductsSupportTier) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BillingOverviewDetailCurrentProductsSupportTier) __premarshalJSON() (*__premarshalBillingOverviewDetailCurrentProductsSupportTier, error) {
	var retval __premarshalBillingOverviewDetailCurrentProductsSupportTier

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailSupportTier.ProductTypeMetadata
	retval.Name = v.ProductDetailSupportTier.Name
	retval.Description = v.ProductDetailSupportTier.Description
	retval.Sku = v.ProductDetailSupportTier.Sku
	retval.DisplayPrice = v.ProductDetailSupportTier.DisplayPrice
	retval.Usage = v.ProductDetailSupportTier.Usage
	retval.Benefits = v.ProductDetailSupportTier.Benefits
	return &retval, nil
}

// BillingOverviewDetailExternalLinksExternalBillingProviderLinks includes the requested fields of the GraphQL type ExternalBillingProviderLinks.
type BillingOverviewDetailExternalLinksExternalBillingProviderLinks struct {
	InvoiceHistory      BillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs      `json:"invoiceHistory"`
	ManagePaymentMethod BillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs `json:"managePaymentMethod"`
	Downgrade           BillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs           `json:"downgrade"`
	Help                BillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs                `json:"help"`
}

// GetInvoiceHistory returns BillingOverviewDetailExternalLinksExternalBillingProviderLinks.InvoiceHistory, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinks) GetInvoiceHistory() BillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs {
	return v.InvoiceHistory
}

// GetManagePaymentMethod returns BillingOverviewDetailExternalLinksExternalBillingProviderLinks.ManagePaymentMethod, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinks) GetManagePaymentMethod() BillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs {
	return v.ManagePaymentMethod
}

// GetDowngrade returns BillingOverviewDetailExternalLinksExternalBillingProviderLinks.Downgrade, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinks) GetDowngrade() BillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs {
	return v.Downgrade
}

// GetHelp returns BillingOverviewDetailExternalLinksExternalBillingProviderLinks.Help, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinks) GetHelp() BillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs {
	return v.Help
}

// BillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs includes the requested fields of the GraphQL type UrlOrContactUs.
// The GraphQL type's documentation follows.
//
// If a self-service link is available, url will be non-null. If url is null, notAllowed should be non-null.
type BillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs struct {
	UrlOrContactUsDetail `json:"-"`
}

// GetUrl returns BillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs.Url, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs) GetUrl() *string {
	return v.UrlOrContactUsDetail.Url
}

// GetContactUs returns BillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs.ContactUs, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs) GetContactUs() *ContactUs {
	return v.UrlOrContactUsDetail.ContactUs
}

func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs
		graphql.NoUnmarshalJSON
	}
	firstPass.BillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UrlOrContactUsDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs struct {
	Url *string `json:"url"`

	ContactUs *ContactUs `json:"contactUs"`
}

func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs) __premarshalJSON() (*__premarshalBillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs, error) {
	var retval __premarshalBillingOverviewDetailExternalLinksExternalBillingProviderLinksDowngradeUrlOrContactUs

	retval.Url = v.UrlOrContactUsDetail.Url
	retval.ContactUs = v.UrlOrContactUsDetail.ContactUs
	return &retval, nil
}

// BillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs includes the requested fields of the GraphQL type UrlOrContactUs.
// The GraphQL type's documentation follows.
//
// If a self-service link is available, url will be non-null. If url is null, notAllowed should be non-null.
type BillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs struct {
	UrlOrContactUsDetail `json:"-"`
}

// GetUrl returns BillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs.Url, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs) GetUrl() *string {
	return v.UrlOrContactUsDetail.Url
}

// GetContactUs returns BillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs.ContactUs, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs) GetContactUs() *ContactUs {
	return v.UrlOrContactUsDetail.ContactUs
}

func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs
		graphql.NoUnmarshalJSON
	}
	firstPass.BillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UrlOrContactUsDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs struct {
	Url *string `json:"url"`

	ContactUs *ContactUs `json:"contactUs"`
}

func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs) __premarshalJSON() (*__premarshalBillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs, error) {
	var retval __premarshalBillingOverviewDetailExternalLinksExternalBillingProviderLinksHelpUrlOrContactUs

	retval.Url = v.UrlOrContactUsDetail.Url
	retval.ContactUs = v.UrlOrContactUsDetail.ContactUs
	return &retval, nil
}

// BillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs includes the requested fields of the GraphQL type UrlOrContactUs.
// The GraphQL type's documentation follows.
//
// If a self-service link is available, url will be non-null. If url is null, notAllowed should be non-null.
type BillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs struct {
	UrlOrContactUsDetail `json:"-"`
}

// GetUrl returns BillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs.Url, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs) GetUrl() *string {
	return v.UrlOrContactUsDetail.Url
}

// GetContactUs returns BillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs.ContactUs, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs) GetContactUs() *ContactUs {
	return v.UrlOrContactUsDetail.ContactUs
}

func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs
		graphql.NoUnmarshalJSON
	}
	firstPass.BillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UrlOrContactUsDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs struct {
	Url *string `json:"url"`

	ContactUs *ContactUs `json:"contactUs"`
}

func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs) __premarshalJSON() (*__premarshalBillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs, error) {
	var retval __premarshalBillingOverviewDetailExternalLinksExternalBillingProviderLinksInvoiceHistoryUrlOrContactUs

	retval.Url = v.UrlOrContactUsDetail.Url
	retval.ContactUs = v.UrlOrContactUsDetail.ContactUs
	return &retval, nil
}

// BillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs includes the requested fields of the GraphQL type UrlOrContactUs.
// The GraphQL type's documentation follows.
//
// If a self-service link is available, url will be non-null. If url is null, notAllowed should be non-null.
type BillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs struct {
	UrlOrContactUsDetail `json:"-"`
}

// GetUrl returns BillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs.Url, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs) GetUrl() *string {
	return v.UrlOrContactUsDetail.Url
}

// GetContactUs returns BillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs.ContactUs, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs) GetContactUs() *ContactUs {
	return v.UrlOrContactUsDetail.ContactUs
}

func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs
		graphql.NoUnmarshalJSON
	}
	firstPass.BillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UrlOrContactUsDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs struct {
	Url *string `json:"url"`

	ContactUs *ContactUs `json:"contactUs"`
}

func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs) __premarshalJSON() (*__premarshalBillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs, error) {
	var retval __premarshalBillingOverviewDetailExternalLinksExternalBillingProviderLinksManagePaymentMethodUrlOrContactUs

	retval.Url = v.UrlOrContactUsDetail.Url
	retval.ContactUs = v.UrlOrContactUsDetail.ContactUs
	return &retval, nil
}

// BillingOverviewDetailSubscriptionUsageAllowed includes the requested fields of the GraphQL type SubscriptionUsageAllowed.
// The GraphQL type's documentation follows.
//
// Indicates if the team is able to create new entities within their subscription limits.
type BillingOverviewDetailSubscriptionUsageAllowed struct {
	Seats            bool `json:"seats"`
	Clusters         bool `json:"clusters"`
	CloudAccounts    bool `json:"cloudAccounts"`
	Projects         bool `json:"projects"`
	CustomBlueprints bool `json:"customBlueprints"`
}

// GetSeats returns BillingOverviewDetailSubscriptionUsageAllowed.Seats, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailSubscriptionUsageAllowed) GetSeats() bool { return v.Seats }

// GetClusters returns BillingOverviewDetailSubscriptionUsageAllowed.Clusters, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailSubscriptionUsageAllowed) GetClusters() bool { return v.Clusters }

// GetCloudAccounts returns BillingOverviewDetailSubscriptionUsageAllowed.CloudAccounts, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailSubscriptionUsageAllowed) GetCloudAccounts() bool {
	return v.CloudAccounts
}

// GetProjects returns BillingOverviewDetailSubscriptionUsageAllowed.Projects, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailSubscriptionUsageAllowed) GetProjects() bool { return v.Projects }

// GetCustomBlueprints returns BillingOverviewDetailSubscriptionUsageAllowed.CustomBlueprints, and is useful for accessing the field via an interface.
func (v *BillingOverviewDetailSubscriptionUsageAllowed) GetCustomBlueprints() bool {
	return v.CustomBlueprints
}

type BitbucketIntegrationAuthType string

const (
	BitbucketIntegrationAuthTypeAccessToken BitbucketIntegrationAuthType = "ACCESS_TOKEN"
	BitbucketIntegrationAuthTypeOauth2      BitbucketIntegrationAuthType = "OAUTH2"
)

type BlueprintConfigurationInput struct {
	Terraform *BlueprintTerraformConfigurationInput `json:"terraform"`
	Manifest  *BlueprintManifestConfigurationInput  `json:"manifest"`
	Helm      *BlueprintHelmConfigurationInput      `json:"helm"`
}

// GetTerraform returns BlueprintConfigurationInput.Terraform, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationInput) GetTerraform() *BlueprintTerraformConfigurationInput {
	return v.Terraform
}

// GetManifest returns BlueprintConfigurationInput.Manifest, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationInput) GetManifest() *BlueprintManifestConfigurationInput {
	return v.Manifest
}

// GetHelm returns BlueprintConfigurationInput.Helm, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationInput) GetHelm() *BlueprintHelmConfigurationInput { return v.Helm }

type BlueprintConfigurationUpdate struct {
	Terraform          *BlueprintTerraformConfigurationUpdate `json:"terraform"`
	Helm               *BlueprintHelmConfigurationUpdate      `json:"helm"`
	KubernetesManifest *BlueprintManifestConfigurationUpdate  `json:"kubernetesManifest"`
}

// GetTerraform returns BlueprintConfigurationUpdate.Terraform, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationUpdate) GetTerraform() *BlueprintTerraformConfigurationUpdate {
	return v.Terraform
}

// GetHelm returns BlueprintConfigurationUpdate.Helm, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationUpdate) GetHelm() *BlueprintHelmConfigurationUpdate { return v.Helm }

// GetKubernetesManifest returns BlueprintConfigurationUpdate.KubernetesManifest, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationUpdate) GetKubernetesManifest() *BlueprintManifestConfigurationUpdate {
	return v.KubernetesManifest
}

type BlueprintDriver string

const (
	BlueprintDriverTerraform          BlueprintDriver = "TERRAFORM"
	BlueprintDriverKubernetesManifest BlueprintDriver = "KUBERNETES_MANIFEST"
	BlueprintDriverHelm               BlueprintDriver = "HELM"
)

type BlueprintDriverAction string

const (
	BlueprintDriverActionPlanDestroy BlueprintDriverAction = "PLAN_DESTROY"
	BlueprintDriverActionPlan        BlueprintDriverAction = "PLAN"
	BlueprintDriverActionApprove     BlueprintDriverAction = "APPROVE"
	BlueprintDriverActionApply       BlueprintDriverAction = "APPLY"
)

// BlueprintDriverWorkflowDetail includes the GraphQL fields of BlueprintDriverWorkflow requested by the fragment BlueprintDriverWorkflowDetail.
// The GraphQL type's documentation follows.
//
// CAUTION: Experimental!
//
// Provides a similar interface to the ProjectV3Workflow type.
type BlueprintDriverWorkflowDetail struct {
	Id        uuid.UUID                                                       `json:"id"`
	Status    ProjectV3WorkflowStatus                                         `json:"status"`
	Steps     []BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep `json:"steps"`
	CreatedAt time.Time                                                       `json:"createdAt"`
	UpdatedAt time.Time                                                       `json:"updatedAt"`
}

// GetId returns BlueprintDriverWorkflowDetail.Id, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowDetail) GetId() uuid.UUID { return v.Id }

// GetStatus returns BlueprintDriverWorkflowDetail.Status, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowDetail) GetStatus() ProjectV3WorkflowStatus { return v.Status }

// GetSteps returns BlueprintDriverWorkflowDetail.Steps, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowDetail) GetSteps() []BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep {
	return v.Steps
}

// GetCreatedAt returns BlueprintDriverWorkflowDetail.CreatedAt, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowDetail) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns BlueprintDriverWorkflowDetail.UpdatedAt, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowDetail) GetUpdatedAt() time.Time { return v.UpdatedAt }

// BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep includes the requested fields of the GraphQL type BlueprintDriverWorkflowStep.
type BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep struct {
	WorkflowStepWithLogs `json:"-"`
}

// GetAction returns BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep.Action, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep) GetAction() BlueprintDriverWorkflowStepAction {
	return v.WorkflowStepWithLogs.Action
}

// GetStatus returns BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep.Status, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep) GetStatus() BlueprintDriverWorkflowStepStatus {
	return v.WorkflowStepWithLogs.Status
}

// GetExecution returns BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep.Execution, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep) GetExecution() *WorkflowStepWithLogsExecutionBlueprintDriverActionExecution {
	return v.WorkflowStepWithLogs.Execution
}

func (v *BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep
		graphql.NoUnmarshalJSON
	}
	firstPass.BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowStepWithLogs)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep struct {
	Action BlueprintDriverWorkflowStepAction `json:"action"`

	Status BlueprintDriverWorkflowStepStatus `json:"status"`

	Execution *WorkflowStepWithLogsExecutionBlueprintDriverActionExecution `json:"execution"`
}

func (v *BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep) __premarshalJSON() (*__premarshalBlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep, error) {
	var retval __premarshalBlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep

	retval.Action = v.WorkflowStepWithLogs.Action
	retval.Status = v.WorkflowStepWithLogs.Status
	retval.Execution = v.WorkflowStepWithLogs.Execution
	return &retval, nil
}

// BlueprintDriverWorkflowList includes the GraphQL fields of BlueprintDriverWorkflow requested by the fragment BlueprintDriverWorkflowList.
// The GraphQL type's documentation follows.
//
// CAUTION: Experimental!
//
// Provides a similar interface to the ProjectV3Workflow type.
type BlueprintDriverWorkflowList struct {
	Id        uuid.UUID                                                     `json:"id"`
	Status    ProjectV3WorkflowStatus                                       `json:"status"`
	Steps     []BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep `json:"steps"`
	CreatedAt time.Time                                                     `json:"createdAt"`
	UpdatedAt time.Time                                                     `json:"updatedAt"`
}

// GetId returns BlueprintDriverWorkflowList.Id, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowList) GetId() uuid.UUID { return v.Id }

// GetStatus returns BlueprintDriverWorkflowList.Status, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowList) GetStatus() ProjectV3WorkflowStatus { return v.Status }

// GetSteps returns BlueprintDriverWorkflowList.Steps, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowList) GetSteps() []BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep {
	return v.Steps
}

// GetCreatedAt returns BlueprintDriverWorkflowList.CreatedAt, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowList) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns BlueprintDriverWorkflowList.UpdatedAt, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowList) GetUpdatedAt() time.Time { return v.UpdatedAt }

// BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep includes the requested fields of the GraphQL type BlueprintDriverWorkflowStep.
type BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep struct {
	WorkflowStep `json:"-"`
}

// GetAction returns BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep.Action, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep) GetAction() BlueprintDriverWorkflowStepAction {
	return v.WorkflowStep.Action
}

// GetStatus returns BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep.Status, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep) GetStatus() BlueprintDriverWorkflowStepStatus {
	return v.WorkflowStep.Status
}

// GetExecution returns BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep.Execution, and is useful for accessing the field via an interface.
func (v *BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep) GetExecution() *WorkflowStepExecutionBlueprintDriverActionExecution {
	return v.WorkflowStep.Execution
}

func (v *BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep
		graphql.NoUnmarshalJSON
	}
	firstPass.BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowStep)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep struct {
	Action BlueprintDriverWorkflowStepAction `json:"action"`

	Status BlueprintDriverWorkflowStepStatus `json:"status"`

	Execution *WorkflowStepExecutionBlueprintDriverActionExecution `json:"execution"`
}

func (v *BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep) __premarshalJSON() (*__premarshalBlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep, error) {
	var retval __premarshalBlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep

	retval.Action = v.WorkflowStep.Action
	retval.Status = v.WorkflowStep.Status
	retval.Execution = v.WorkflowStep.Execution
	return &retval, nil
}

type BlueprintDriverWorkflowStepAction string

const (
	BlueprintDriverWorkflowStepActionDriverPlanDestroy BlueprintDriverWorkflowStepAction = "DRIVER_PLAN_DESTROY"
	BlueprintDriverWorkflowStepActionDriverPlan        BlueprintDriverWorkflowStepAction = "DRIVER_PLAN"
	BlueprintDriverWorkflowStepActionDriverApprove     BlueprintDriverWorkflowStepAction = "DRIVER_APPROVE"
	BlueprintDriverWorkflowStepActionDriverApply       BlueprintDriverWorkflowStepAction = "DRIVER_APPLY"
	BlueprintDriverWorkflowStepActionProjectDelete     BlueprintDriverWorkflowStepAction = "PROJECT_DELETE"
)

type BlueprintDriverWorkflowStepStatus string

const (
	BlueprintDriverWorkflowStepStatusPending   BlueprintDriverWorkflowStepStatus = "PENDING"
	BlueprintDriverWorkflowStepStatusRunning   BlueprintDriverWorkflowStepStatus = "RUNNING"
	BlueprintDriverWorkflowStepStatusCompleted BlueprintDriverWorkflowStepStatus = "COMPLETED"
	BlueprintDriverWorkflowStepStatusFailed    BlueprintDriverWorkflowStepStatus = "FAILED"
	BlueprintDriverWorkflowStepStatusError     BlueprintDriverWorkflowStepStatus = "ERROR"
	BlueprintDriverWorkflowStepStatusAborted   BlueprintDriverWorkflowStepStatus = "ABORTED"
)

type BlueprintHelmConfigurationInput struct {
	Source *SourceInput `json:"source"`
}

// GetSource returns BlueprintHelmConfigurationInput.Source, and is useful for accessing the field via an interface.
func (v *BlueprintHelmConfigurationInput) GetSource() *SourceInput { return v.Source }

type BlueprintHelmConfigurationUpdate struct {
	Source *SourceInput `json:"source"`
}

// GetSource returns BlueprintHelmConfigurationUpdate.Source, and is useful for accessing the field via an interface.
func (v *BlueprintHelmConfigurationUpdate) GetSource() *SourceInput { return v.Source }

// BlueprintList includes the GraphQL fields of Blueprint requested by the fragment BlueprintList.
type BlueprintList struct {
	Id                    uuid.UUID                                         `json:"id"`
	Description           *string                                           `json:"description"`
	DisplayName           string                                            `json:"displayName"`
	IsOfficial            *bool                                             `json:"isOfficial"`
	LogoUrl               *string                                           `json:"logoUrl"`
	Enabled               *bool                                             `json:"enabled"`
	Published             bool                                              `json:"published"`
	ProjectCount          int                                               `json:"projectCount"`
	RichInputSchema       *string                                           `json:"richInputSchema"`
	AllowedCloudProviders []CloudProvider                                   `json:"allowedCloudProviders"`
	Slug                  string                                            `json:"slug"`
	Tags                  []string                                          `json:"tags"`
	Type                  BlueprintType                                     `json:"type"`
	Configuration         *BlueprintListConfigurationBlueprintConfiguration `json:"-"`
	Owner                 *BlueprintListOwnerBlueprintOwner                 `json:"owner"`
	Variables             []BlueprintListVariablesBlueprintVariableSpec     `json:"variables"`
}

// GetId returns BlueprintList.Id, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetId() uuid.UUID { return v.Id }

// GetDescription returns BlueprintList.Description, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetDescription() *string { return v.Description }

// GetDisplayName returns BlueprintList.DisplayName, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetDisplayName() string { return v.DisplayName }

// GetIsOfficial returns BlueprintList.IsOfficial, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetIsOfficial() *bool { return v.IsOfficial }

// GetLogoUrl returns BlueprintList.LogoUrl, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetLogoUrl() *string { return v.LogoUrl }

// GetEnabled returns BlueprintList.Enabled, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetEnabled() *bool { return v.Enabled }

// GetPublished returns BlueprintList.Published, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetPublished() bool { return v.Published }

// GetProjectCount returns BlueprintList.ProjectCount, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetProjectCount() int { return v.ProjectCount }

// GetRichInputSchema returns BlueprintList.RichInputSchema, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetRichInputSchema() *string { return v.RichInputSchema }

// GetAllowedCloudProviders returns BlueprintList.AllowedCloudProviders, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetAllowedCloudProviders() []CloudProvider { return v.AllowedCloudProviders }

// GetSlug returns BlueprintList.Slug, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetSlug() string { return v.Slug }

// GetTags returns BlueprintList.Tags, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetTags() []string { return v.Tags }

// GetType returns BlueprintList.Type, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetType() BlueprintType { return v.Type }

// GetConfiguration returns BlueprintList.Configuration, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetConfiguration() *BlueprintListConfigurationBlueprintConfiguration {
	return v.Configuration
}

// GetOwner returns BlueprintList.Owner, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetOwner() *BlueprintListOwnerBlueprintOwner { return v.Owner }

// GetVariables returns BlueprintList.Variables, and is useful for accessing the field via an interface.
func (v *BlueprintList) GetVariables() []BlueprintListVariablesBlueprintVariableSpec {
	return v.Variables
}

func (v *BlueprintList) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BlueprintList
		Configuration json.RawMessage `json:"configuration"`
		graphql.NoUnmarshalJSON
	}
	firstPass.BlueprintList = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Configuration
		src := firstPass.Configuration
		if len(src) != 0 && string(src) != "null" {
			*dst = new(BlueprintListConfigurationBlueprintConfiguration)
			err = __unmarshalBlueprintListConfigurationBlueprintConfiguration(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal BlueprintList.Configuration: %w", err)
			}
		}
	}
	return nil
}

type __premarshalBlueprintList struct {
	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	DisplayName string `json:"displayName"`

	IsOfficial *bool `json:"isOfficial"`

	LogoUrl *string `json:"logoUrl"`

	Enabled *bool `json:"enabled"`

	Published bool `json:"published"`

	ProjectCount int `json:"projectCount"`

	RichInputSchema *string `json:"richInputSchema"`

	AllowedCloudProviders []CloudProvider `json:"allowedCloudProviders"`

	Slug string `json:"slug"`

	Tags []string `json:"tags"`

	Type BlueprintType `json:"type"`

	Configuration json.RawMessage `json:"configuration"`

	Owner *BlueprintListOwnerBlueprintOwner `json:"owner"`

	Variables []BlueprintListVariablesBlueprintVariableSpec `json:"variables"`
}

func (v *BlueprintList) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BlueprintList) __premarshalJSON() (*__premarshalBlueprintList, error) {
	var retval __premarshalBlueprintList

	retval.Id = v.Id
	retval.Description = v.Description
	retval.DisplayName = v.DisplayName
	retval.IsOfficial = v.IsOfficial
	retval.LogoUrl = v.LogoUrl
	retval.Enabled = v.Enabled
	retval.Published = v.Published
	retval.ProjectCount = v.ProjectCount
	retval.RichInputSchema = v.RichInputSchema
	retval.AllowedCloudProviders = v.AllowedCloudProviders
	retval.Slug = v.Slug
	retval.Tags = v.Tags
	retval.Type = v.Type
	{

		dst := &retval.Configuration
		src := v.Configuration
		if src != nil {
			var err error
			*dst, err = __marshalBlueprintListConfigurationBlueprintConfiguration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal BlueprintList.Configuration: %w", err)
			}
		}
	}
	retval.Owner = v.Owner
	retval.Variables = v.Variables
	return &retval, nil
}

// BlueprintListConfigurationBlueprintConfiguration includes the requested fields of the GraphQL interface BlueprintConfiguration.
//
// BlueprintListConfigurationBlueprintConfiguration is implemented by the following types:
// BlueprintListConfigurationBlueprintHelmConfiguration
// BlueprintListConfigurationBlueprintManifestConfiguration
// BlueprintListConfigurationBlueprintTerraformConfiguration
type BlueprintListConfigurationBlueprintConfiguration interface {
	implementsGraphQLInterfaceBlueprintListConfigurationBlueprintConfiguration()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	ProjectBlueprintConfigurationDetail
}

func (v *BlueprintListConfigurationBlueprintHelmConfiguration) implementsGraphQLInterfaceBlueprintListConfigurationBlueprintConfiguration() {
}
func (v *BlueprintListConfigurationBlueprintHelmConfiguration) implementsGraphQLInterfaceProjectBlueprintConfigurationDetail() {
}
func (v *BlueprintListConfigurationBlueprintManifestConfiguration) implementsGraphQLInterfaceBlueprintListConfigurationBlueprintConfiguration() {
}
func (v *BlueprintListConfigurationBlueprintManifestConfiguration) implementsGraphQLInterfaceProjectBlueprintConfigurationDetail() {
}
func (v *BlueprintListConfigurationBlueprintTerraformConfiguration) implementsGraphQLInterfaceBlueprintListConfigurationBlueprintConfiguration() {
}
func (v *BlueprintListConfigurationBlueprintTerraformConfiguration) implementsGraphQLInterfaceProjectBlueprintConfigurationDetail() {
}

func __unmarshalBlueprintListConfigurationBlueprintConfiguration(b []byte, v *BlueprintListConfigurationBlueprintConfiguration) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BlueprintHelmConfiguration":
		*v = new(BlueprintListConfigurationBlueprintHelmConfiguration)
		return json.Unmarshal(b, *v)
	case "BlueprintManifestConfiguration":
		*v = new(BlueprintListConfigurationBlueprintManifestConfiguration)
		return json.Unmarshal(b, *v)
	case "BlueprintTerraformConfiguration":
		*v = new(BlueprintListConfigurationBlueprintTerraformConfiguration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing BlueprintConfiguration.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for BlueprintListConfigurationBlueprintConfiguration: "%v"`, tn.TypeName)
	}
}

func __marshalBlueprintListConfigurationBlueprintConfiguration(v *BlueprintListConfigurationBlueprintConfiguration) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *BlueprintListConfigurationBlueprintHelmConfiguration:
		typename = "BlueprintHelmConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*BlueprintListConfigurationBlueprintHelmConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *BlueprintListConfigurationBlueprintManifestConfiguration:
		typename = "BlueprintManifestConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*BlueprintListConfigurationBlueprintManifestConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *BlueprintListConfigurationBlueprintTerraformConfiguration:
		typename = "BlueprintTerraformConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*BlueprintListConfigurationBlueprintTerraformConfiguration
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for BlueprintListConfigurationBlueprintConfiguration: "%T"`, v)
	}
}

// BlueprintListConfigurationBlueprintHelmConfiguration includes the requested fields of the GraphQL type BlueprintHelmConfiguration.
type BlueprintListConfigurationBlueprintHelmConfiguration struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns BlueprintListConfigurationBlueprintHelmConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *BlueprintListConfigurationBlueprintHelmConfiguration) GetTypename() *string {
	return v.Typename
}

// BlueprintListConfigurationBlueprintManifestConfiguration includes the requested fields of the GraphQL type BlueprintManifestConfiguration.
type BlueprintListConfigurationBlueprintManifestConfiguration struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns BlueprintListConfigurationBlueprintManifestConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *BlueprintListConfigurationBlueprintManifestConfiguration) GetTypename() *string {
	return v.Typename
}

// BlueprintListConfigurationBlueprintTerraformConfiguration includes the requested fields of the GraphQL type BlueprintTerraformConfiguration.
type BlueprintListConfigurationBlueprintTerraformConfiguration struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns BlueprintListConfigurationBlueprintTerraformConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *BlueprintListConfigurationBlueprintTerraformConfiguration) GetTypename() *string {
	return v.Typename
}

// BlueprintListOwnerBlueprintOwner includes the requested fields of the GraphQL type BlueprintOwner.
type BlueprintListOwnerBlueprintOwner struct {
	Name  string `json:"name"`
	Login string `json:"login"`
}

// GetName returns BlueprintListOwnerBlueprintOwner.Name, and is useful for accessing the field via an interface.
func (v *BlueprintListOwnerBlueprintOwner) GetName() string { return v.Name }

// GetLogin returns BlueprintListOwnerBlueprintOwner.Login, and is useful for accessing the field via an interface.
func (v *BlueprintListOwnerBlueprintOwner) GetLogin() string { return v.Login }

// BlueprintListVariablesBlueprintVariableSpec includes the requested fields of the GraphQL type BlueprintVariableSpec.
type BlueprintListVariablesBlueprintVariableSpec struct {
	Id       uuid.UUID             `json:"id"`
	Name     string                `json:"name"`
	Type     BlueprintVariableType `json:"type"`
	Required bool                  `json:"required"`
}

// GetId returns BlueprintListVariablesBlueprintVariableSpec.Id, and is useful for accessing the field via an interface.
func (v *BlueprintListVariablesBlueprintVariableSpec) GetId() uuid.UUID { return v.Id }

// GetName returns BlueprintListVariablesBlueprintVariableSpec.Name, and is useful for accessing the field via an interface.
func (v *BlueprintListVariablesBlueprintVariableSpec) GetName() string { return v.Name }

// GetType returns BlueprintListVariablesBlueprintVariableSpec.Type, and is useful for accessing the field via an interface.
func (v *BlueprintListVariablesBlueprintVariableSpec) GetType() BlueprintVariableType { return v.Type }

// GetRequired returns BlueprintListVariablesBlueprintVariableSpec.Required, and is useful for accessing the field via an interface.
func (v *BlueprintListVariablesBlueprintVariableSpec) GetRequired() bool { return v.Required }

type BlueprintManifestConfigurationInput struct {
	Source       *SourceInput `json:"source"`
	UseKustomize *bool        `json:"useKustomize"`
}

// GetSource returns BlueprintManifestConfigurationInput.Source, and is useful for accessing the field via an interface.
func (v *BlueprintManifestConfigurationInput) GetSource() *SourceInput { return v.Source }

// GetUseKustomize returns BlueprintManifestConfigurationInput.UseKustomize, and is useful for accessing the field via an interface.
func (v *BlueprintManifestConfigurationInput) GetUseKustomize() *bool { return v.UseKustomize }

type BlueprintManifestConfigurationUpdate struct {
	Source       *SourceInput `json:"source"`
	UseKustomize *bool        `json:"useKustomize"`
}

// GetSource returns BlueprintManifestConfigurationUpdate.Source, and is useful for accessing the field via an interface.
func (v *BlueprintManifestConfigurationUpdate) GetSource() *SourceInput { return v.Source }

// GetUseKustomize returns BlueprintManifestConfigurationUpdate.UseKustomize, and is useful for accessing the field via an interface.
func (v *BlueprintManifestConfigurationUpdate) GetUseKustomize() *bool { return v.UseKustomize }

type BlueprintMetadataFilter struct {
	Name *StringCriterion `json:"name"`
}

// GetName returns BlueprintMetadataFilter.Name, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataFilter) GetName() *StringCriterion { return v.Name }

// BlueprintMetadataList includes the GraphQL fields of BlueprintMetadata requested by the fragment BlueprintMetadataList.
type BlueprintMetadataList struct {
	Id                      uuid.UUID                                                `json:"id"`
	Slug                    string                                                   `json:"slug"`
	Name                    string                                                   `json:"name"`
	DisplayName             string                                                   `json:"displayName"`
	Type                    BlueprintType                                            `json:"type"`
	Description             *string                                                  `json:"description"`
	Tags                    []string                                                 `json:"tags"`
	LogoUrl                 *string                                                  `json:"logoUrl"`
	Metatags                []*BlueprintMetadataListMetatagsBlueprintMetadataMetaTag `json:"metatags"`
	Version                 *string                                                  `json:"version"`
	Versions                []BlueprintMetadataListVersionsBlueprintMetadataVersion  `json:"versions"`
	LatestVersion           *string                                                  `json:"latestVersion"`
	AvailableVersions       []string                                                 `json:"availableVersions"`
	ApplicationVersion      *string                                                  `json:"applicationVersion"`
	OrganizationName        *string                                                  `json:"organizationName"`
	OrganizationDisplayName *string                                                  `json:"organizationDisplayName"`
	CreatedAt               *time.Time                                               `json:"createdAt"`
	UpdatedAt               *time.Time                                               `json:"updatedAt"`
}

// GetId returns BlueprintMetadataList.Id, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetId() uuid.UUID { return v.Id }

// GetSlug returns BlueprintMetadataList.Slug, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetSlug() string { return v.Slug }

// GetName returns BlueprintMetadataList.Name, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetName() string { return v.Name }

// GetDisplayName returns BlueprintMetadataList.DisplayName, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetDisplayName() string { return v.DisplayName }

// GetType returns BlueprintMetadataList.Type, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetType() BlueprintType { return v.Type }

// GetDescription returns BlueprintMetadataList.Description, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetDescription() *string { return v.Description }

// GetTags returns BlueprintMetadataList.Tags, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetTags() []string { return v.Tags }

// GetLogoUrl returns BlueprintMetadataList.LogoUrl, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetLogoUrl() *string { return v.LogoUrl }

// GetMetatags returns BlueprintMetadataList.Metatags, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetMetatags() []*BlueprintMetadataListMetatagsBlueprintMetadataMetaTag {
	return v.Metatags
}

// GetVersion returns BlueprintMetadataList.Version, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetVersion() *string { return v.Version }

// GetVersions returns BlueprintMetadataList.Versions, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetVersions() []BlueprintMetadataListVersionsBlueprintMetadataVersion {
	return v.Versions
}

// GetLatestVersion returns BlueprintMetadataList.LatestVersion, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetLatestVersion() *string { return v.LatestVersion }

// GetAvailableVersions returns BlueprintMetadataList.AvailableVersions, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetAvailableVersions() []string { return v.AvailableVersions }

// GetApplicationVersion returns BlueprintMetadataList.ApplicationVersion, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetApplicationVersion() *string { return v.ApplicationVersion }

// GetOrganizationName returns BlueprintMetadataList.OrganizationName, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetOrganizationName() *string { return v.OrganizationName }

// GetOrganizationDisplayName returns BlueprintMetadataList.OrganizationDisplayName, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetOrganizationDisplayName() *string {
	return v.OrganizationDisplayName
}

// GetCreatedAt returns BlueprintMetadataList.CreatedAt, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns BlueprintMetadataList.UpdatedAt, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataList) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// BlueprintMetadataListMetatagsBlueprintMetadataMetaTag includes the requested fields of the GraphQL type BlueprintMetadataMetaTag.
type BlueprintMetadataListMetatagsBlueprintMetadataMetaTag struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns BlueprintMetadataListMetatagsBlueprintMetadataMetaTag.Name, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataListMetatagsBlueprintMetadataMetaTag) GetName() string { return v.Name }

// GetValue returns BlueprintMetadataListMetatagsBlueprintMetadataMetaTag.Value, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataListMetatagsBlueprintMetadataMetaTag) GetValue() string { return v.Value }

// BlueprintMetadataListVersionsBlueprintMetadataVersion includes the requested fields of the GraphQL type BlueprintMetadataVersion.
type BlueprintMetadataListVersionsBlueprintMetadataVersion struct {
	Version    string     `json:"version"`
	Prerelease *bool      `json:"prerelease"`
	Timestamp  *time.Time `json:"timestamp"`
}

// GetVersion returns BlueprintMetadataListVersionsBlueprintMetadataVersion.Version, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataListVersionsBlueprintMetadataVersion) GetVersion() string { return v.Version }

// GetPrerelease returns BlueprintMetadataListVersionsBlueprintMetadataVersion.Prerelease, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataListVersionsBlueprintMetadataVersion) GetPrerelease() *bool {
	return v.Prerelease
}

// GetTimestamp returns BlueprintMetadataListVersionsBlueprintMetadataVersion.Timestamp, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataListVersionsBlueprintMetadataVersion) GetTimestamp() *time.Time {
	return v.Timestamp
}

type BlueprintOutputDataSource string

const (
	BlueprintOutputDataSourceInput    BlueprintOutputDataSource = "INPUT"
	BlueprintOutputDataSourceOutput   BlueprintOutputDataSource = "OUTPUT"
	BlueprintOutputDataSourceResource BlueprintOutputDataSource = "RESOURCE"
)

type BlueprintOutputSchema struct {
	Entries []BlueprintOutputSchemaEntry `json:"entries"`
}

// GetEntries returns BlueprintOutputSchema.Entries, and is useful for accessing the field via an interface.
func (v *BlueprintOutputSchema) GetEntries() []BlueprintOutputSchemaEntry { return v.Entries }

type BlueprintOutputSchemaEntry struct {
	Id                    *uuid.UUID                            `json:"id"`
	Name                  *string                               `json:"name"`
	DisplayName           *string                               `json:"displayName"`
	Type                  *VariableType                         `json:"type"`
	DataSource            *BlueprintOutputDataSource            `json:"dataSource"`
	DataPath              *string                               `json:"dataPath"`
	Transformations       []BlueprintOutputTransformationType   `json:"transformations"`
	TransformationContext *BlueprintOutputTransformationContext `json:"transformationContext"`
}

// GetId returns BlueprintOutputSchemaEntry.Id, and is useful for accessing the field via an interface.
func (v *BlueprintOutputSchemaEntry) GetId() *uuid.UUID { return v.Id }

// GetName returns BlueprintOutputSchemaEntry.Name, and is useful for accessing the field via an interface.
func (v *BlueprintOutputSchemaEntry) GetName() *string { return v.Name }

// GetDisplayName returns BlueprintOutputSchemaEntry.DisplayName, and is useful for accessing the field via an interface.
func (v *BlueprintOutputSchemaEntry) GetDisplayName() *string { return v.DisplayName }

// GetType returns BlueprintOutputSchemaEntry.Type, and is useful for accessing the field via an interface.
func (v *BlueprintOutputSchemaEntry) GetType() *VariableType { return v.Type }

// GetDataSource returns BlueprintOutputSchemaEntry.DataSource, and is useful for accessing the field via an interface.
func (v *BlueprintOutputSchemaEntry) GetDataSource() *BlueprintOutputDataSource { return v.DataSource }

// GetDataPath returns BlueprintOutputSchemaEntry.DataPath, and is useful for accessing the field via an interface.
func (v *BlueprintOutputSchemaEntry) GetDataPath() *string { return v.DataPath }

// GetTransformations returns BlueprintOutputSchemaEntry.Transformations, and is useful for accessing the field via an interface.
func (v *BlueprintOutputSchemaEntry) GetTransformations() []BlueprintOutputTransformationType {
	return v.Transformations
}

// GetTransformationContext returns BlueprintOutputSchemaEntry.TransformationContext, and is useful for accessing the field via an interface.
func (v *BlueprintOutputSchemaEntry) GetTransformationContext() *BlueprintOutputTransformationContext {
	return v.TransformationContext
}

type BlueprintOutputTransformationContext struct {
	Yaml *BlueprintOutputTransformationYamlContext `json:"yaml"`
}

// GetYaml returns BlueprintOutputTransformationContext.Yaml, and is useful for accessing the field via an interface.
func (v *BlueprintOutputTransformationContext) GetYaml() *BlueprintOutputTransformationYamlContext {
	return v.Yaml
}

type BlueprintOutputTransformationType string

const (
	BlueprintOutputTransformationTypeClusterIp    BlueprintOutputTransformationType = "CLUSTER_IP"
	BlueprintOutputTransformationTypeYaml         BlueprintOutputTransformationType = "YAML"
	BlueprintOutputTransformationTypeDecodeBase64 BlueprintOutputTransformationType = "DECODE_BASE64"
)

type BlueprintOutputTransformationYamlContext struct {
	Path string `json:"path"`
}

// GetPath returns BlueprintOutputTransformationYamlContext.Path, and is useful for accessing the field via an interface.
func (v *BlueprintOutputTransformationYamlContext) GetPath() string { return v.Path }

type BlueprintTerraformConfigurationInput struct {
	RegistrySource          *string                            `json:"registrySource"`
	ModuleVersionConstraint *string                            `json:"moduleVersionConstraint"`
	GithubSource            *string                            `json:"githubSource"`
	GitIntegration          *GitSourceIntegrationInput         `json:"gitIntegration"`
	ModuleSource            *TerraformModuleSourceInput        `json:"moduleSource"`
	OutputConfiguration     *TerraformOutputConfigurationInput `json:"outputConfiguration"`
	TerraformVersion        *string                            `json:"terraformVersion"`
}

// GetRegistrySource returns BlueprintTerraformConfigurationInput.RegistrySource, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationInput) GetRegistrySource() *string { return v.RegistrySource }

// GetModuleVersionConstraint returns BlueprintTerraformConfigurationInput.ModuleVersionConstraint, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationInput) GetModuleVersionConstraint() *string {
	return v.ModuleVersionConstraint
}

// GetGithubSource returns BlueprintTerraformConfigurationInput.GithubSource, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationInput) GetGithubSource() *string { return v.GithubSource }

// GetGitIntegration returns BlueprintTerraformConfigurationInput.GitIntegration, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationInput) GetGitIntegration() *GitSourceIntegrationInput {
	return v.GitIntegration
}

// GetModuleSource returns BlueprintTerraformConfigurationInput.ModuleSource, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationInput) GetModuleSource() *TerraformModuleSourceInput {
	return v.ModuleSource
}

// GetOutputConfiguration returns BlueprintTerraformConfigurationInput.OutputConfiguration, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationInput) GetOutputConfiguration() *TerraformOutputConfigurationInput {
	return v.OutputConfiguration
}

// GetTerraformVersion returns BlueprintTerraformConfigurationInput.TerraformVersion, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationInput) GetTerraformVersion() *string {
	return v.TerraformVersion
}

type BlueprintTerraformConfigurationUpdate struct {
	GitIntegration          *GitSourceIntegrationInput  `json:"gitIntegration"`
	RegistrySource          *string                     `json:"registrySource"`
	ModuleVersionConstraint *string                     `json:"moduleVersionConstraint"`
	GithubSource            *string                     `json:"githubSource"`
	ModuleSource            *TerraformModuleSourceInput `json:"moduleSource"`
}

// GetGitIntegration returns BlueprintTerraformConfigurationUpdate.GitIntegration, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationUpdate) GetGitIntegration() *GitSourceIntegrationInput {
	return v.GitIntegration
}

// GetRegistrySource returns BlueprintTerraformConfigurationUpdate.RegistrySource, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationUpdate) GetRegistrySource() *string { return v.RegistrySource }

// GetModuleVersionConstraint returns BlueprintTerraformConfigurationUpdate.ModuleVersionConstraint, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationUpdate) GetModuleVersionConstraint() *string {
	return v.ModuleVersionConstraint
}

// GetGithubSource returns BlueprintTerraformConfigurationUpdate.GithubSource, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationUpdate) GetGithubSource() *string { return v.GithubSource }

// GetModuleSource returns BlueprintTerraformConfigurationUpdate.ModuleSource, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationUpdate) GetModuleSource() *TerraformModuleSourceInput {
	return v.ModuleSource
}

type BlueprintType string

const (
	BlueprintTypeTerraform          BlueprintType = "TERRAFORM"
	BlueprintTypeKubernetesManifest BlueprintType = "KUBERNETES_MANIFEST"
	BlueprintTypeHelm               BlueprintType = "HELM"
	BlueprintTypeZeetKubernetes     BlueprintType = "ZEET_KUBERNETES"
	BlueprintTypeZeetAwsLambda      BlueprintType = "ZEET_AWS_LAMBDA"
	BlueprintTypeZeetGcpCloudRun    BlueprintType = "ZEET_GCP_CLOUD_RUN"
)

// A ProjectV3's BlueprintVariable represent key-value pairs: each a variable name and its value.
// These variables can either reference a variable spec, as defined by the Blueprint, or they can be declared
// as "custom variables" for the ProjectV3.
//
// To reference a variable spec, specify either variableSpecID or the variableName that corresponds to a variable spec.
//
// To declare a custom variable, specify the variableName and the variableType.
// If there is a variableSpec with the same name, the variableType will be ignored, and the variableSpec will take precedence.
//
// All BlueprintVariables must specify their value. The VariableValueInput is serialized as a string, and is parsed
// server-side according to the variableType.
type BlueprintVariableInput struct {
	// ID of the corresponding variable spec. Must be present if variableName is not specified.
	VariableSpecID *uuid.UUID `json:"variableSpecID"`
	// Name of the corresponding variable spec, or name to use when declaring a variable without referencing a variable spec.
	// Must be present if variableSpecID is not specified.
	VariableName *string `json:"variableName"`
	// The variable value. Always a string value, which will be parsed according to the variableType, determined either
	// by the referenced variableSpec, or the provided variableType
	Value string `json:"value"`
	// Type specification is required when variable is being declared without referencing a variable spec.
	VariableType *BlueprintVariableType `json:"variableType"`
}

// GetVariableSpecID returns BlueprintVariableInput.VariableSpecID, and is useful for accessing the field via an interface.
func (v *BlueprintVariableInput) GetVariableSpecID() *uuid.UUID { return v.VariableSpecID }

// GetVariableName returns BlueprintVariableInput.VariableName, and is useful for accessing the field via an interface.
func (v *BlueprintVariableInput) GetVariableName() *string { return v.VariableName }

// GetValue returns BlueprintVariableInput.Value, and is useful for accessing the field via an interface.
func (v *BlueprintVariableInput) GetValue() string { return v.Value }

// GetVariableType returns BlueprintVariableInput.VariableType, and is useful for accessing the field via an interface.
func (v *BlueprintVariableInput) GetVariableType() *BlueprintVariableType { return v.VariableType }

type BlueprintVariableSpecInput struct {
	Name     string                `json:"name"`
	Type     BlueprintVariableType `json:"type"`
	Required bool                  `json:"required"`
}

// GetName returns BlueprintVariableSpecInput.Name, and is useful for accessing the field via an interface.
func (v *BlueprintVariableSpecInput) GetName() string { return v.Name }

// GetType returns BlueprintVariableSpecInput.Type, and is useful for accessing the field via an interface.
func (v *BlueprintVariableSpecInput) GetType() BlueprintVariableType { return v.Type }

// GetRequired returns BlueprintVariableSpecInput.Required, and is useful for accessing the field via an interface.
func (v *BlueprintVariableSpecInput) GetRequired() bool { return v.Required }

type BlueprintVariableSpecUpdate struct {
	Id       *uuid.UUID            `json:"id"`
	Name     string                `json:"name"`
	Type     BlueprintVariableType `json:"type"`
	Required bool                  `json:"required"`
	Remove   *bool                 `json:"remove"`
}

// GetId returns BlueprintVariableSpecUpdate.Id, and is useful for accessing the field via an interface.
func (v *BlueprintVariableSpecUpdate) GetId() *uuid.UUID { return v.Id }

// GetName returns BlueprintVariableSpecUpdate.Name, and is useful for accessing the field via an interface.
func (v *BlueprintVariableSpecUpdate) GetName() string { return v.Name }

// GetType returns BlueprintVariableSpecUpdate.Type, and is useful for accessing the field via an interface.
func (v *BlueprintVariableSpecUpdate) GetType() BlueprintVariableType { return v.Type }

// GetRequired returns BlueprintVariableSpecUpdate.Required, and is useful for accessing the field via an interface.
func (v *BlueprintVariableSpecUpdate) GetRequired() bool { return v.Required }

// GetRemove returns BlueprintVariableSpecUpdate.Remove, and is useful for accessing the field via an interface.
func (v *BlueprintVariableSpecUpdate) GetRemove() *bool { return v.Remove }

type BlueprintVariableType string

const (
	BlueprintVariableTypeString  BlueprintVariableType = "STRING"
	BlueprintVariableTypeBoolean BlueprintVariableType = "BOOLEAN"
	BlueprintVariableTypeInteger BlueprintVariableType = "INTEGER"
	BlueprintVariableTypeFloat   BlueprintVariableType = "FLOAT"
	BlueprintVariableTypeJson    BlueprintVariableType = "JSON"
)

type BooleanCriterion struct {
	Value bool `json:"value"`
}

// GetValue returns BooleanCriterion.Value, and is useful for accessing the field via an interface.
func (v *BooleanCriterion) GetValue() bool { return v.Value }

// BranchCommon includes the GraphQL fields of RepoBranchV2 requested by the fragment BranchCommon.
type BranchCommon struct {
	Id               uuid.UUID                     `json:"id"`
	Name             string                        `json:"name"`
	CreatedAt        time.Time                     `json:"createdAt"`
	UpdatedAt        time.Time                     `json:"updatedAt"`
	State            *string                       `json:"state"`
	Endpoints        []string                      `json:"endpoints"`
	LatestDeployment *BranchCommonLatestDeployment `json:"latestDeployment"`
}

// GetId returns BranchCommon.Id, and is useful for accessing the field via an interface.
func (v *BranchCommon) GetId() uuid.UUID { return v.Id }

// GetName returns BranchCommon.Name, and is useful for accessing the field via an interface.
func (v *BranchCommon) GetName() string { return v.Name }

// GetCreatedAt returns BranchCommon.CreatedAt, and is useful for accessing the field via an interface.
func (v *BranchCommon) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns BranchCommon.UpdatedAt, and is useful for accessing the field via an interface.
func (v *BranchCommon) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetState returns BranchCommon.State, and is useful for accessing the field via an interface.
func (v *BranchCommon) GetState() *string { return v.State }

// GetEndpoints returns BranchCommon.Endpoints, and is useful for accessing the field via an interface.
func (v *BranchCommon) GetEndpoints() []string { return v.Endpoints }

// GetLatestDeployment returns BranchCommon.LatestDeployment, and is useful for accessing the field via an interface.
func (v *BranchCommon) GetLatestDeployment() *BranchCommonLatestDeployment { return v.LatestDeployment }

// BranchCommonLatestDeployment includes the requested fields of the GraphQL type Deployment.
type BranchCommonLatestDeployment struct {
	Id               uuid.UUID `json:"id"`
	DeploymentCommon `json:"-"`
}

// GetId returns BranchCommonLatestDeployment.Id, and is useful for accessing the field via an interface.
func (v *BranchCommonLatestDeployment) GetId() uuid.UUID { return v.Id }

// GetDescription returns BranchCommonLatestDeployment.Description, and is useful for accessing the field via an interface.
func (v *BranchCommonLatestDeployment) GetDescription() *string {
	return v.DeploymentCommon.Description
}

// GetVersion returns BranchCommonLatestDeployment.Version, and is useful for accessing the field via an interface.
func (v *BranchCommonLatestDeployment) GetVersion() string { return v.DeploymentCommon.Version }

// GetStatus returns BranchCommonLatestDeployment.Status, and is useful for accessing the field via an interface.
func (v *BranchCommonLatestDeployment) GetStatus() DeploymentStatus { return v.DeploymentCommon.Status }

// GetBranch returns BranchCommonLatestDeployment.Branch, and is useful for accessing the field via an interface.
func (v *BranchCommonLatestDeployment) GetBranch() *string { return v.DeploymentCommon.Branch }

// GetEndpoints returns BranchCommonLatestDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *BranchCommonLatestDeployment) GetEndpoints() []string { return v.DeploymentCommon.Endpoints }

// GetPrivateEndpoint returns BranchCommonLatestDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *BranchCommonLatestDeployment) GetPrivateEndpoint() *string {
	return v.DeploymentCommon.PrivateEndpoint
}

// GetErrorMessage returns BranchCommonLatestDeployment.ErrorMessage, and is useful for accessing the field via an interface.
func (v *BranchCommonLatestDeployment) GetErrorMessage() *string {
	return v.DeploymentCommon.ErrorMessage
}

// GetDeployStatus returns BranchCommonLatestDeployment.DeployStatus, and is useful for accessing the field via an interface.
func (v *BranchCommonLatestDeployment) GetDeployStatus() *DeploymentCommonDeployStatus {
	return v.DeploymentCommon.DeployStatus
}

// GetBuild returns BranchCommonLatestDeployment.Build, and is useful for accessing the field via an interface.
func (v *BranchCommonLatestDeployment) GetBuild() *DeploymentCommonBuild {
	return v.DeploymentCommon.Build
}

// GetAlternativeImages returns BranchCommonLatestDeployment.AlternativeImages, and is useful for accessing the field via an interface.
func (v *BranchCommonLatestDeployment) GetAlternativeImages() []DeploymentCommonAlternativeImagesAlternativeImage {
	return v.DeploymentCommon.AlternativeImages
}

// GetUpdatedAt returns BranchCommonLatestDeployment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *BranchCommonLatestDeployment) GetUpdatedAt() time.Time { return v.DeploymentCommon.UpdatedAt }

// GetCreatedAt returns BranchCommonLatestDeployment.CreatedAt, and is useful for accessing the field via an interface.
func (v *BranchCommonLatestDeployment) GetCreatedAt() time.Time { return v.DeploymentCommon.CreatedAt }

func (v *BranchCommonLatestDeployment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BranchCommonLatestDeployment
		graphql.NoUnmarshalJSON
	}
	firstPass.BranchCommonLatestDeployment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBranchCommonLatestDeployment struct {
	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	Version string `json:"version"`

	Status DeploymentStatus `json:"status"`

	Branch *string `json:"branch"`

	Endpoints []string `json:"endpoints"`

	PrivateEndpoint *string `json:"privateEndpoint"`

	ErrorMessage *string `json:"errorMessage"`

	DeployStatus *DeploymentCommonDeployStatus `json:"deployStatus"`

	Build *DeploymentCommonBuild `json:"build"`

	AlternativeImages []DeploymentCommonAlternativeImagesAlternativeImage `json:"alternativeImages"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *BranchCommonLatestDeployment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BranchCommonLatestDeployment) __premarshalJSON() (*__premarshalBranchCommonLatestDeployment, error) {
	var retval __premarshalBranchCommonLatestDeployment

	retval.Id = v.Id
	retval.Description = v.DeploymentCommon.Description
	retval.Version = v.DeploymentCommon.Version
	retval.Status = v.DeploymentCommon.Status
	retval.Branch = v.DeploymentCommon.Branch
	retval.Endpoints = v.DeploymentCommon.Endpoints
	retval.PrivateEndpoint = v.DeploymentCommon.PrivateEndpoint
	retval.ErrorMessage = v.DeploymentCommon.ErrorMessage
	retval.DeployStatus = v.DeploymentCommon.DeployStatus
	retval.Build = v.DeploymentCommon.Build
	retval.AlternativeImages = v.DeploymentCommon.AlternativeImages
	retval.UpdatedAt = v.DeploymentCommon.UpdatedAt
	retval.CreatedAt = v.DeploymentCommon.CreatedAt
	return &retval, nil
}

// BridgeProjectV3List includes the GraphQL fields of ProjectV3Adapter requested by the fragment BridgeProjectV3List.
type BridgeProjectV3List struct {
	Name string `json:"name"`
	// - v0.ProjectAdapterID or v1.ProjectID
	Id                 uuid.UUID                              `json:"id"`
	Status             *ProjectV3AdapterStatus                `json:"status"`
	IsDeployV2         bool                                   `json:"isDeployV2"`
	ProjectV3          *BridgeProjectV3ListProjectV3          `json:"projectV3"`
	Repo               *BridgeProjectV3ListRepo               `json:"repo"`
	Project            *BridgeProjectV3ListProject            `json:"project"`
	ProjectEnvironment *BridgeProjectV3ListProjectEnvironment `json:"projectEnvironment"`
	UpdatedAt          time.Time                              `json:"updatedAt"`
}

// GetName returns BridgeProjectV3List.Name, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3List) GetName() string { return v.Name }

// GetId returns BridgeProjectV3List.Id, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3List) GetId() uuid.UUID { return v.Id }

// GetStatus returns BridgeProjectV3List.Status, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3List) GetStatus() *ProjectV3AdapterStatus { return v.Status }

// GetIsDeployV2 returns BridgeProjectV3List.IsDeployV2, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3List) GetIsDeployV2() bool { return v.IsDeployV2 }

// GetProjectV3 returns BridgeProjectV3List.ProjectV3, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3List) GetProjectV3() *BridgeProjectV3ListProjectV3 { return v.ProjectV3 }

// GetRepo returns BridgeProjectV3List.Repo, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3List) GetRepo() *BridgeProjectV3ListRepo { return v.Repo }

// GetProject returns BridgeProjectV3List.Project, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3List) GetProject() *BridgeProjectV3ListProject { return v.Project }

// GetProjectEnvironment returns BridgeProjectV3List.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3List) GetProjectEnvironment() *BridgeProjectV3ListProjectEnvironment {
	return v.ProjectEnvironment
}

// GetUpdatedAt returns BridgeProjectV3List.UpdatedAt, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3List) GetUpdatedAt() time.Time { return v.UpdatedAt }

// BridgeProjectV3ListProject includes the requested fields of the GraphQL type Project.
type BridgeProjectV3ListProject struct {
	// - v0.ProjectID or v1.GroupID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns BridgeProjectV3ListProject.Id, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListProject) GetId() uuid.UUID { return v.Id }

// GetName returns BridgeProjectV3ListProject.Name, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListProject) GetName() string { return v.Name }

// BridgeProjectV3ListProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type BridgeProjectV3ListProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns BridgeProjectV3ListProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns BridgeProjectV3ListProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListProjectEnvironment) GetName() string { return v.Name }

// BridgeProjectV3ListProjectV3 includes the requested fields of the GraphQL type ProjectV3.
type BridgeProjectV3ListProjectV3 struct {
	ProjectV3ListItem `json:"-"`
}

// GetId returns BridgeProjectV3ListProjectV3.Id, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListProjectV3) GetId() uuid.UUID { return v.ProjectV3ListItem.Id }

// GetName returns BridgeProjectV3ListProjectV3.Name, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListProjectV3) GetName() string { return v.ProjectV3ListItem.Name }

// GetBlueprintID returns BridgeProjectV3ListProjectV3.BlueprintID, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListProjectV3) GetBlueprintID() uuid.UUID {
	return v.ProjectV3ListItem.BlueprintID
}

func (v *BridgeProjectV3ListProjectV3) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BridgeProjectV3ListProjectV3
		graphql.NoUnmarshalJSON
	}
	firstPass.BridgeProjectV3ListProjectV3 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3ListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBridgeProjectV3ListProjectV3 struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	BlueprintID uuid.UUID `json:"blueprintID"`
}

func (v *BridgeProjectV3ListProjectV3) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BridgeProjectV3ListProjectV3) __premarshalJSON() (*__premarshalBridgeProjectV3ListProjectV3, error) {
	var retval __premarshalBridgeProjectV3ListProjectV3

	retval.Id = v.ProjectV3ListItem.Id
	retval.Name = v.ProjectV3ListItem.Name
	retval.BlueprintID = v.ProjectV3ListItem.BlueprintID
	return &retval, nil
}

// BridgeProjectV3ListRepo includes the requested fields of the GraphQL type Repo.
type BridgeProjectV3ListRepo struct {
	RepoListItem `json:"-"`
}

// GetProductionDeployment returns BridgeProjectV3ListRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetProductionDeployment() *RepoListItemProductionDeployment {
	return v.RepoListItem.ProductionDeployment
}

// GetId returns BridgeProjectV3ListRepo.Id, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetId() uuid.UUID { return v.RepoListItem.RepoCommon.Id }

// GetPath returns BridgeProjectV3ListRepo.Path, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetPath() string { return v.RepoListItem.RepoCommon.Path }

// GetName returns BridgeProjectV3ListRepo.Name, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetName() string { return v.RepoListItem.RepoCommon.Name }

// GetEnabled returns BridgeProjectV3ListRepo.Enabled, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetEnabled() bool { return v.RepoListItem.RepoCommon.Enabled }

// GetSource returns BridgeProjectV3ListRepo.Source, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoListItem.RepoCommon.Source
}

// GetDeployTarget returns BridgeProjectV3ListRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetDeployTarget() *DeployTarget {
	return v.RepoListItem.RepoCommon.DeployTarget
}

// GetDeployType returns BridgeProjectV3ListRepo.DeployType, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetDeployType() *DeployType {
	return v.RepoListItem.RepoCommon.DeployType
}

// GetDeployService returns BridgeProjectV3ListRepo.DeployService, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetDeployService() *bool {
	return v.RepoListItem.RepoCommon.DeployService
}

// GetDeployJob returns BridgeProjectV3ListRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetDeployJob() *bool { return v.RepoListItem.RepoCommon.DeployJob }

// GetAwsAccount returns BridgeProjectV3ListRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoListItem.RepoCommon.AwsAccount
}

// GetGcpAccount returns BridgeProjectV3ListRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoListItem.RepoCommon.GcpAccount
}

// GetImage returns BridgeProjectV3ListRepo.Image, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetImage() *string { return v.RepoListItem.RepoCommon.Image }

// GetCpu returns BridgeProjectV3ListRepo.Cpu, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetCpu() *string { return v.RepoListItem.RepoCommon.Cpu }

// GetMemory returns BridgeProjectV3ListRepo.Memory, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetMemory() *string { return v.RepoListItem.RepoCommon.Memory }

// GetGpu returns BridgeProjectV3ListRepo.Gpu, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoListItem.RepoCommon.Gpu
}

// GetTpu returns BridgeProjectV3ListRepo.Tpu, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoListItem.RepoCommon.Tpu
}

// GetUpdatedAt returns BridgeProjectV3ListRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetUpdatedAt() time.Time {
	return v.RepoListItem.RepoCommon.UpdatedAt
}

// GetDisableReason returns BridgeProjectV3ListRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetDisableReason() *DisableReason {
	return v.RepoListItem.RepoCommon.DisableReason
}

// GetCluster returns BridgeProjectV3ListRepo.Cluster, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetCluster() *RepoCommonCluster {
	return v.RepoListItem.RepoCommon.Cluster
}

// GetDatabaseProvider returns BridgeProjectV3ListRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoListItem.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns BridgeProjectV3ListRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoListItem.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns BridgeProjectV3ListRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoListItem.RepoCommon.Autoscaling
}

// GetOwner returns BridgeProjectV3ListRepo.Owner, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoListItem.RepoCommon.Owner
}

// GetProject returns BridgeProjectV3ListRepo.Project, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetProject() *RepoCommonProject {
	return v.RepoListItem.RepoCommon.Project
}

// GetProjectEnvironment returns BridgeProjectV3ListRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *BridgeProjectV3ListRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoListItem.RepoCommon.ProjectEnvironment
}

func (v *BridgeProjectV3ListRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BridgeProjectV3ListRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.BridgeProjectV3ListRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBridgeProjectV3ListRepo struct {
	ProductionDeployment *RepoListItemProductionDeployment `json:"productionDeployment"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *BridgeProjectV3ListRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BridgeProjectV3ListRepo) __premarshalJSON() (*__premarshalBridgeProjectV3ListRepo, error) {
	var retval __premarshalBridgeProjectV3ListRepo

	retval.ProductionDeployment = v.RepoListItem.ProductionDeployment
	retval.Id = v.RepoListItem.RepoCommon.Id
	retval.Path = v.RepoListItem.RepoCommon.Path
	retval.Name = v.RepoListItem.RepoCommon.Name
	retval.Enabled = v.RepoListItem.RepoCommon.Enabled
	retval.Source = v.RepoListItem.RepoCommon.Source
	retval.DeployTarget = v.RepoListItem.RepoCommon.DeployTarget
	retval.DeployType = v.RepoListItem.RepoCommon.DeployType
	retval.DeployService = v.RepoListItem.RepoCommon.DeployService
	retval.DeployJob = v.RepoListItem.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoListItem.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoListItem.RepoCommon.GcpAccount
	retval.Image = v.RepoListItem.RepoCommon.Image
	retval.Cpu = v.RepoListItem.RepoCommon.Cpu
	retval.Memory = v.RepoListItem.RepoCommon.Memory
	retval.Gpu = v.RepoListItem.RepoCommon.Gpu
	retval.Tpu = v.RepoListItem.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoListItem.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoListItem.RepoCommon.DisableReason
	retval.Cluster = v.RepoListItem.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoListItem.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoListItem.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoListItem.RepoCommon.Autoscaling
	retval.Owner = v.RepoListItem.RepoCommon.Owner
	retval.Project = v.RepoListItem.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoListItem.RepoCommon.ProjectEnvironment
	return &retval, nil
}

type BuildLogsInput struct {
	DeploymentID uuid.UUID `json:"deploymentID"`
	After        *string   `json:"after"`
}

// GetDeploymentID returns BuildLogsInput.DeploymentID, and is useful for accessing the field via an interface.
func (v *BuildLogsInput) GetDeploymentID() uuid.UUID { return v.DeploymentID }

// GetAfter returns BuildLogsInput.After, and is useful for accessing the field via an interface.
func (v *BuildLogsInput) GetAfter() *string { return v.After }

type BuildTarget string

const (
	BuildTargetNullRegistry      BuildTarget = "NULL_REGISTRY"
	BuildTargetClusterRegistry   BuildTarget = "CLUSTER_REGISTRY"
	BuildTargetContainerRegistry BuildTarget = "CONTAINER_REGISTRY"
)

type BuildTargetInput struct {
	BuildTarget BuildTarget `json:"buildTarget"`
	ClusterID   *uuid.UUID  `json:"clusterID"`
}

// GetBuildTarget returns BuildTargetInput.BuildTarget, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetBuildTarget() BuildTarget { return v.BuildTarget }

// GetClusterID returns BuildTargetInput.ClusterID, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetClusterID() *uuid.UUID { return v.ClusterID }

type BuildTemplateType string

const (
	BuildTemplateTypeDockerfile BuildTemplateType = "DOCKERFILE"
)

type BuildType string

const (
	BuildTypeDocker        BuildType = "DOCKER"
	BuildTypeBuildpacks    BuildType = "BUILDPACKS"
	BuildTypePython        BuildType = "PYTHON"
	BuildTypePythonDjango  BuildType = "PYTHON_DJANGO"
	BuildTypeNode          BuildType = "NODE"
	BuildTypeNodeStatic    BuildType = "NODE_STATIC"
	BuildTypeNodeNextjs    BuildType = "NODE_NEXTJS"
	BuildTypeUbuntu        BuildType = "UBUNTU"
	BuildTypeElixirPhoenix BuildType = "ELIXIR_PHOENIX"
	BuildTypeGolangModules BuildType = "GOLANG_MODULES"
	BuildTypeHerokuish     BuildType = "HEROKUISH"
)

// CDNDetail includes the GraphQL fields of CDN requested by the fragment CDNDetail.
type CDNDetail struct {
	Id          uuid.UUID                   `json:"id"`
	Domains     []CDNDetailDomainsCDNDomain `json:"domains"`
	Endpoint    *string                     `json:"endpoint"`
	State       string                      `json:"state"`
	Certificate *CDNDetailCertificate       `json:"certificate"`
}

// GetId returns CDNDetail.Id, and is useful for accessing the field via an interface.
func (v *CDNDetail) GetId() uuid.UUID { return v.Id }

// GetDomains returns CDNDetail.Domains, and is useful for accessing the field via an interface.
func (v *CDNDetail) GetDomains() []CDNDetailDomainsCDNDomain { return v.Domains }

// GetEndpoint returns CDNDetail.Endpoint, and is useful for accessing the field via an interface.
func (v *CDNDetail) GetEndpoint() *string { return v.Endpoint }

// GetState returns CDNDetail.State, and is useful for accessing the field via an interface.
func (v *CDNDetail) GetState() string { return v.State }

// GetCertificate returns CDNDetail.Certificate, and is useful for accessing the field via an interface.
func (v *CDNDetail) GetCertificate() *CDNDetailCertificate { return v.Certificate }

// CDNDetailCertificate includes the requested fields of the GraphQL type Certificate.
type CDNDetailCertificate struct {
	DnsNames     []string                                    `json:"dnsNames"`
	Ready        bool                                        `json:"ready"`
	Issuing      bool                                        `json:"issuing"`
	Instructions []CDNDetailCertificateInstructionsDNSRecord `json:"instructions"`
}

// GetDnsNames returns CDNDetailCertificate.DnsNames, and is useful for accessing the field via an interface.
func (v *CDNDetailCertificate) GetDnsNames() []string { return v.DnsNames }

// GetReady returns CDNDetailCertificate.Ready, and is useful for accessing the field via an interface.
func (v *CDNDetailCertificate) GetReady() bool { return v.Ready }

// GetIssuing returns CDNDetailCertificate.Issuing, and is useful for accessing the field via an interface.
func (v *CDNDetailCertificate) GetIssuing() bool { return v.Issuing }

// GetInstructions returns CDNDetailCertificate.Instructions, and is useful for accessing the field via an interface.
func (v *CDNDetailCertificate) GetInstructions() []CDNDetailCertificateInstructionsDNSRecord {
	return v.Instructions
}

// CDNDetailCertificateInstructionsDNSRecord includes the requested fields of the GraphQL type DNSRecord.
type CDNDetailCertificateInstructionsDNSRecord struct {
	Name   *string       `json:"name"`
	Domain string        `json:"domain"`
	Type   DNSRecordType `json:"type"`
	Value  *string       `json:"value"`
}

// GetName returns CDNDetailCertificateInstructionsDNSRecord.Name, and is useful for accessing the field via an interface.
func (v *CDNDetailCertificateInstructionsDNSRecord) GetName() *string { return v.Name }

// GetDomain returns CDNDetailCertificateInstructionsDNSRecord.Domain, and is useful for accessing the field via an interface.
func (v *CDNDetailCertificateInstructionsDNSRecord) GetDomain() string { return v.Domain }

// GetType returns CDNDetailCertificateInstructionsDNSRecord.Type, and is useful for accessing the field via an interface.
func (v *CDNDetailCertificateInstructionsDNSRecord) GetType() DNSRecordType { return v.Type }

// GetValue returns CDNDetailCertificateInstructionsDNSRecord.Value, and is useful for accessing the field via an interface.
func (v *CDNDetailCertificateInstructionsDNSRecord) GetValue() *string { return v.Value }

// CDNDetailDomainsCDNDomain includes the requested fields of the GraphQL type CDNDomain.
type CDNDetailDomainsCDNDomain struct {
	Domain      string                                         `json:"domain"`
	CertReady   *bool                                          `json:"certReady"`
	RouteReady  *bool                                          `json:"routeReady"`
	Instruction *CDNDetailDomainsCDNDomainInstructionDNSRecord `json:"instruction"`
}

// GetDomain returns CDNDetailDomainsCDNDomain.Domain, and is useful for accessing the field via an interface.
func (v *CDNDetailDomainsCDNDomain) GetDomain() string { return v.Domain }

// GetCertReady returns CDNDetailDomainsCDNDomain.CertReady, and is useful for accessing the field via an interface.
func (v *CDNDetailDomainsCDNDomain) GetCertReady() *bool { return v.CertReady }

// GetRouteReady returns CDNDetailDomainsCDNDomain.RouteReady, and is useful for accessing the field via an interface.
func (v *CDNDetailDomainsCDNDomain) GetRouteReady() *bool { return v.RouteReady }

// GetInstruction returns CDNDetailDomainsCDNDomain.Instruction, and is useful for accessing the field via an interface.
func (v *CDNDetailDomainsCDNDomain) GetInstruction() *CDNDetailDomainsCDNDomainInstructionDNSRecord {
	return v.Instruction
}

// CDNDetailDomainsCDNDomainInstructionDNSRecord includes the requested fields of the GraphQL type DNSRecord.
type CDNDetailDomainsCDNDomainInstructionDNSRecord struct {
	Domain string        `json:"domain"`
	Type   DNSRecordType `json:"type"`
	Value  *string       `json:"value"`
}

// GetDomain returns CDNDetailDomainsCDNDomainInstructionDNSRecord.Domain, and is useful for accessing the field via an interface.
func (v *CDNDetailDomainsCDNDomainInstructionDNSRecord) GetDomain() string { return v.Domain }

// GetType returns CDNDetailDomainsCDNDomainInstructionDNSRecord.Type, and is useful for accessing the field via an interface.
func (v *CDNDetailDomainsCDNDomainInstructionDNSRecord) GetType() DNSRecordType { return v.Type }

// GetValue returns CDNDetailDomainsCDNDomainInstructionDNSRecord.Value, and is useful for accessing the field via an interface.
func (v *CDNDetailDomainsCDNDomainInstructionDNSRecord) GetValue() *string { return v.Value }

type CDNProvider string

const (
	CDNProviderAwsCloudfront CDNProvider = "AWS_CLOUDFRONT"
)

// CWAccountDetail includes the GraphQL fields of CoreWeaveAccount requested by the fragment CWAccountDetail.
type CWAccountDetail struct {
	Id        uuid.UUID         `json:"id"`
	Name      string            `json:"name"`
	State     CloudAccountState `json:"state"`
	Namespace *string           `json:"namespace"`
	Connected *bool             `json:"connected"`
}

// GetId returns CWAccountDetail.Id, and is useful for accessing the field via an interface.
func (v *CWAccountDetail) GetId() uuid.UUID { return v.Id }

// GetName returns CWAccountDetail.Name, and is useful for accessing the field via an interface.
func (v *CWAccountDetail) GetName() string { return v.Name }

// GetState returns CWAccountDetail.State, and is useful for accessing the field via an interface.
func (v *CWAccountDetail) GetState() CloudAccountState { return v.State }

// GetNamespace returns CWAccountDetail.Namespace, and is useful for accessing the field via an interface.
func (v *CWAccountDetail) GetNamespace() *string { return v.Namespace }

// GetConnected returns CWAccountDetail.Connected, and is useful for accessing the field via an interface.
func (v *CWAccountDetail) GetConnected() *bool { return v.Connected }

type CatalogProductStatus string

const (
	CatalogProductStatusCurrent   CatalogProductStatus = "CURRENT"
	CatalogProductStatusUpgrade   CatalogProductStatus = "UPGRADE"
	CatalogProductStatusDowngrade CatalogProductStatus = "DOWNGRADE"
)

type CertManagerChallengeType string

const (
	CertManagerChallengeTypeDns01  CertManagerChallengeType = "dns01"
	CertManagerChallengeTypeHttp01 CertManagerChallengeType = "http01"
)

type CheckPriceInput struct {
	TeamId       *uuid.UUID         `json:"teamId"`
	Source       *RepoSourceType    `json:"source"`
	Installation *uuid.UUID         `json:"installation"`
	Owner        *string            `json:"owner"`
	Repo         *string            `json:"repo"`
	DockerImage  *string            `json:"dockerImage"`
	Volumes      *string            `json:"volumes"`
	Ports        *string            `json:"ports"`
	Replication  []ReplicationInput `json:"replication"`
	Cpu          *string            `json:"cpu"`
	Gpu          *string            `json:"gpu"`
	Memory       *string            `json:"memory"`
	Dedicated    *bool              `json:"dedicated"`
}

// GetTeamId returns CheckPriceInput.TeamId, and is useful for accessing the field via an interface.
func (v *CheckPriceInput) GetTeamId() *uuid.UUID { return v.TeamId }

// GetSource returns CheckPriceInput.Source, and is useful for accessing the field via an interface.
func (v *CheckPriceInput) GetSource() *RepoSourceType { return v.Source }

// GetInstallation returns CheckPriceInput.Installation, and is useful for accessing the field via an interface.
func (v *CheckPriceInput) GetInstallation() *uuid.UUID { return v.Installation }

// GetOwner returns CheckPriceInput.Owner, and is useful for accessing the field via an interface.
func (v *CheckPriceInput) GetOwner() *string { return v.Owner }

// GetRepo returns CheckPriceInput.Repo, and is useful for accessing the field via an interface.
func (v *CheckPriceInput) GetRepo() *string { return v.Repo }

// GetDockerImage returns CheckPriceInput.DockerImage, and is useful for accessing the field via an interface.
func (v *CheckPriceInput) GetDockerImage() *string { return v.DockerImage }

// GetVolumes returns CheckPriceInput.Volumes, and is useful for accessing the field via an interface.
func (v *CheckPriceInput) GetVolumes() *string { return v.Volumes }

// GetPorts returns CheckPriceInput.Ports, and is useful for accessing the field via an interface.
func (v *CheckPriceInput) GetPorts() *string { return v.Ports }

// GetReplication returns CheckPriceInput.Replication, and is useful for accessing the field via an interface.
func (v *CheckPriceInput) GetReplication() []ReplicationInput { return v.Replication }

// GetCpu returns CheckPriceInput.Cpu, and is useful for accessing the field via an interface.
func (v *CheckPriceInput) GetCpu() *string { return v.Cpu }

// GetGpu returns CheckPriceInput.Gpu, and is useful for accessing the field via an interface.
func (v *CheckPriceInput) GetGpu() *string { return v.Gpu }

// GetMemory returns CheckPriceInput.Memory, and is useful for accessing the field via an interface.
func (v *CheckPriceInput) GetMemory() *string { return v.Memory }

// GetDedicated returns CheckPriceInput.Dedicated, and is useful for accessing the field via an interface.
func (v *CheckPriceInput) GetDedicated() *bool { return v.Dedicated }

type CheckProjectNameInput struct {
	Name string `json:"name"`
}

// GetName returns CheckProjectNameInput.Name, and is useful for accessing the field via an interface.
func (v *CheckProjectNameInput) GetName() string { return v.Name }

type CloudAccountState string

const (
	CloudAccountStateWaiting CloudAccountState = "WAITING"
	CloudAccountStateSuccess CloudAccountState = "SUCCESS"
	CloudAccountStateError   CloudAccountState = "ERROR"
)

// CloudFunctionsLinks includes the GraphQL fields of GCPLinks requested by the fragment CloudFunctionsLinks.
type CloudFunctionsLinks struct {
	DeploymentManager     *string `json:"deploymentManager"`
	CloudRun              *string `json:"cloudRun"`
	CloudFunctions        *string `json:"cloudFunctions"`
	CloudFunctionsTrigger *string `json:"cloudFunctionsTrigger"`
	CloudLogging          *string `json:"cloudLogging"`
	CloudMonitoring       *string `json:"cloudMonitoring"`
}

// GetDeploymentManager returns CloudFunctionsLinks.DeploymentManager, and is useful for accessing the field via an interface.
func (v *CloudFunctionsLinks) GetDeploymentManager() *string { return v.DeploymentManager }

// GetCloudRun returns CloudFunctionsLinks.CloudRun, and is useful for accessing the field via an interface.
func (v *CloudFunctionsLinks) GetCloudRun() *string { return v.CloudRun }

// GetCloudFunctions returns CloudFunctionsLinks.CloudFunctions, and is useful for accessing the field via an interface.
func (v *CloudFunctionsLinks) GetCloudFunctions() *string { return v.CloudFunctions }

// GetCloudFunctionsTrigger returns CloudFunctionsLinks.CloudFunctionsTrigger, and is useful for accessing the field via an interface.
func (v *CloudFunctionsLinks) GetCloudFunctionsTrigger() *string { return v.CloudFunctionsTrigger }

// GetCloudLogging returns CloudFunctionsLinks.CloudLogging, and is useful for accessing the field via an interface.
func (v *CloudFunctionsLinks) GetCloudLogging() *string { return v.CloudLogging }

// GetCloudMonitoring returns CloudFunctionsLinks.CloudMonitoring, and is useful for accessing the field via an interface.
func (v *CloudFunctionsLinks) GetCloudMonitoring() *string { return v.CloudMonitoring }

type CloudProvider string

const (
	CloudProviderUnknown   CloudProvider = "UNKNOWN"
	CloudProviderZeet      CloudProvider = "ZEET"
	CloudProviderAws       CloudProvider = "AWS"
	CloudProviderAzure     CloudProvider = "AZURE"
	CloudProviderGcp       CloudProvider = "GCP"
	CloudProviderAlibaba   CloudProvider = "ALIBABA"
	CloudProviderOci       CloudProvider = "OCI"
	CloudProviderIbm       CloudProvider = "IBM"
	CloudProviderTencent   CloudProvider = "TENCENT"
	CloudProviderDo        CloudProvider = "DO"
	CloudProviderCoreweave CloudProvider = "COREWEAVE"
	CloudProviderOvh       CloudProvider = "OVH"
	CloudProviderLinode    CloudProvider = "LINODE"
	CloudProviderVultr     CloudProvider = "VULTR"
	CloudProviderScaleway  CloudProvider = "SCALEWAY"
)

type CloudQueryState string

const (
	CloudQueryStateReady    CloudQueryState = "READY"
	CloudQueryStateError    CloudQueryState = "ERROR"
	CloudQueryStateCreating CloudQueryState = "CREATING"
	CloudQueryStateDeleting CloudQueryState = "DELETING"
)

type CloudResourceType string

const (
	CloudResourceTypeMachine      CloudResourceType = "Machine"
	CloudResourceTypeDisk         CloudResourceType = "Disk"
	CloudResourceTypeLoadbalancer CloudResourceType = "LoadBalancer"
	CloudResourceTypeVpc          CloudResourceType = "VPC"
	CloudResourceTypeCluster      CloudResourceType = "Cluster"
)

type ClusterAddOnState string

const (
	ClusterAddOnStateEnabled  ClusterAddOnState = "ENABLED"
	ClusterAddOnStateDisabled ClusterAddOnState = "DISABLED"
)

// ClusterCommon includes the GraphQL fields of Cluster requested by the fragment ClusterCommon.
type ClusterCommon struct {
	Id              uuid.UUID        `json:"id"`
	Name            string           `json:"name"`
	Region          *string          `json:"region"`
	State           ClusterState     `json:"state"`
	Status          *ClusterStatus   `json:"status"`
	Connected       *bool            `json:"connected"`
	Domain          *string          `json:"domain"`
	IsExternal      *bool            `json:"isExternal"`
	ClusterProvider *ClusterProvider `json:"clusterProvider"`
	CloudProvider   *CloudProvider   `json:"cloudProvider"`
}

// GetId returns ClusterCommon.Id, and is useful for accessing the field via an interface.
func (v *ClusterCommon) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterCommon.Name, and is useful for accessing the field via an interface.
func (v *ClusterCommon) GetName() string { return v.Name }

// GetRegion returns ClusterCommon.Region, and is useful for accessing the field via an interface.
func (v *ClusterCommon) GetRegion() *string { return v.Region }

// GetState returns ClusterCommon.State, and is useful for accessing the field via an interface.
func (v *ClusterCommon) GetState() ClusterState { return v.State }

// GetStatus returns ClusterCommon.Status, and is useful for accessing the field via an interface.
func (v *ClusterCommon) GetStatus() *ClusterStatus { return v.Status }

// GetConnected returns ClusterCommon.Connected, and is useful for accessing the field via an interface.
func (v *ClusterCommon) GetConnected() *bool { return v.Connected }

// GetDomain returns ClusterCommon.Domain, and is useful for accessing the field via an interface.
func (v *ClusterCommon) GetDomain() *string { return v.Domain }

// GetIsExternal returns ClusterCommon.IsExternal, and is useful for accessing the field via an interface.
func (v *ClusterCommon) GetIsExternal() *bool { return v.IsExternal }

// GetClusterProvider returns ClusterCommon.ClusterProvider, and is useful for accessing the field via an interface.
func (v *ClusterCommon) GetClusterProvider() *ClusterProvider { return v.ClusterProvider }

// GetCloudProvider returns ClusterCommon.CloudProvider, and is useful for accessing the field via an interface.
func (v *ClusterCommon) GetCloudProvider() *CloudProvider { return v.CloudProvider }

type ClusterComponentEjectedStatus string

const (
	ClusterComponentEjectedStatusNotFound ClusterComponentEjectedStatus = "NOT_FOUND"
	ClusterComponentEjectedStatusDetected ClusterComponentEjectedStatus = "DETECTED"
)

type ClusterComponentType string

const (
	ClusterComponentTypeHelm ClusterComponentType = "HELM"
)

// ClusterDetail includes the GraphQL fields of Cluster requested by the fragment ClusterDetail.
type ClusterDetail struct {
	Id                       uuid.UUID                                                 `json:"id"`
	Name                     string                                                    `json:"name"`
	Region                   *string                                                   `json:"region"`
	State                    ClusterState                                              `json:"state"`
	Status                   *ClusterStatus                                            `json:"status"`
	Connected                *bool                                                     `json:"connected"`
	Domain                   *string                                                   `json:"domain"`
	IsExternal               *bool                                                     `json:"isExternal"`
	IsEjected                *bool                                                     `json:"isEjected"`
	Components               []*ClusterDetailComponentsClusterComponent                `json:"components"`
	TerraformProjectUrl      *string                                                   `json:"terraformProjectUrl"`
	AwsAccount               *ClusterDetailAwsAccountAWSAccount                        `json:"awsAccount"`
	GcpAccount               *ClusterDetailGcpAccountGCPAccount                        `json:"gcpAccount"`
	DoAccount                *ClusterDetailDoAccountDOAccount                          `json:"doAccount"`
	CwAccount                *ClusterDetailCwAccountCoreWeaveAccount                   `json:"cwAccount"`
	LinodeAccount            *ClusterDetailLinodeAccount                               `json:"linodeAccount"`
	AzureAccount             *ClusterDetailAzureAccount                                `json:"azureAccount"`
	VultrAccount             *ClusterDetailVultrAccount                                `json:"vultrAccount"`
	IngressIP                *string                                                   `json:"ingressIP"`
	IngressDNS               *string                                                   `json:"ingressDNS"`
	ClusterProvider          *ClusterProvider                                          `json:"clusterProvider"`
	CloudProvider            *CloudProvider                                            `json:"cloudProvider"`
	CloudAccount             *ClusterDetailCloudAccount                                `json:"-"`
	Prometheus               *ClusterDetailPrometheus                                  `json:"prometheus"`
	Grafana                  *ClusterDetailGrafana                                     `json:"grafana"`
	ContainerRegistry        *ClusterDetailContainerRegistry                           `json:"containerRegistry"`
	ContainerRepository      *string                                                   `json:"containerRepository"`
	ContainerCacheRepository *string                                                   `json:"containerCacheRepository"`
	UpdatedAt                time.Time                                                 `json:"updatedAt"`
	CreatedAt                time.Time                                                 `json:"createdAt"`
	Projects                 *ClusterDetailProjectsProjectConnection                   `json:"projects"`
	ProjectV3Adapters        *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
	DeployJob                *ClusterDetailDeployJobJobRun                             `json:"deployJob"`
}

// GetId returns ClusterDetail.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterDetail.Name, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetName() string { return v.Name }

// GetRegion returns ClusterDetail.Region, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetRegion() *string { return v.Region }

// GetState returns ClusterDetail.State, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetState() ClusterState { return v.State }

// GetStatus returns ClusterDetail.Status, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetStatus() *ClusterStatus { return v.Status }

// GetConnected returns ClusterDetail.Connected, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetConnected() *bool { return v.Connected }

// GetDomain returns ClusterDetail.Domain, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetDomain() *string { return v.Domain }

// GetIsExternal returns ClusterDetail.IsExternal, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetIsExternal() *bool { return v.IsExternal }

// GetIsEjected returns ClusterDetail.IsEjected, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetIsEjected() *bool { return v.IsEjected }

// GetComponents returns ClusterDetail.Components, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.Components
}

// GetTerraformProjectUrl returns ClusterDetail.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetTerraformProjectUrl() *string { return v.TerraformProjectUrl }

// GetAwsAccount returns ClusterDetail.AwsAccount, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount { return v.AwsAccount }

// GetGcpAccount returns ClusterDetail.GcpAccount, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount { return v.GcpAccount }

// GetDoAccount returns ClusterDetail.DoAccount, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetDoAccount() *ClusterDetailDoAccountDOAccount { return v.DoAccount }

// GetCwAccount returns ClusterDetail.CwAccount, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount { return v.CwAccount }

// GetLinodeAccount returns ClusterDetail.LinodeAccount, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetLinodeAccount() *ClusterDetailLinodeAccount { return v.LinodeAccount }

// GetAzureAccount returns ClusterDetail.AzureAccount, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetAzureAccount() *ClusterDetailAzureAccount { return v.AzureAccount }

// GetVultrAccount returns ClusterDetail.VultrAccount, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetVultrAccount() *ClusterDetailVultrAccount { return v.VultrAccount }

// GetIngressIP returns ClusterDetail.IngressIP, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetIngressIP() *string { return v.IngressIP }

// GetIngressDNS returns ClusterDetail.IngressDNS, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetIngressDNS() *string { return v.IngressDNS }

// GetClusterProvider returns ClusterDetail.ClusterProvider, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetClusterProvider() *ClusterProvider { return v.ClusterProvider }

// GetCloudProvider returns ClusterDetail.CloudProvider, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetCloudProvider() *CloudProvider { return v.CloudProvider }

// GetCloudAccount returns ClusterDetail.CloudAccount, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetCloudAccount() *ClusterDetailCloudAccount { return v.CloudAccount }

// GetPrometheus returns ClusterDetail.Prometheus, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetPrometheus() *ClusterDetailPrometheus { return v.Prometheus }

// GetGrafana returns ClusterDetail.Grafana, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetGrafana() *ClusterDetailGrafana { return v.Grafana }

// GetContainerRegistry returns ClusterDetail.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ContainerRegistry
}

// GetContainerRepository returns ClusterDetail.ContainerRepository, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetContainerRepository() *string { return v.ContainerRepository }

// GetContainerCacheRepository returns ClusterDetail.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetContainerCacheRepository() *string { return v.ContainerCacheRepository }

// GetUpdatedAt returns ClusterDetail.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetCreatedAt returns ClusterDetail.CreatedAt, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetCreatedAt() time.Time { return v.CreatedAt }

// GetProjects returns ClusterDetail.Projects, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetProjects() *ClusterDetailProjectsProjectConnection { return v.Projects }

// GetProjectV3Adapters returns ClusterDetail.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// GetDeployJob returns ClusterDetail.DeployJob, and is useful for accessing the field via an interface.
func (v *ClusterDetail) GetDeployJob() *ClusterDetailDeployJobJobRun { return v.DeployJob }

func (v *ClusterDetail) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ClusterDetail
		CloudAccount json.RawMessage `json:"cloudAccount"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ClusterDetail = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CloudAccount
		src := firstPass.CloudAccount
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ClusterDetailCloudAccount)
			err = __unmarshalClusterDetailCloudAccount(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	return nil
}

type __premarshalClusterDetail struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *ClusterDetail) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ClusterDetail) __premarshalJSON() (*__premarshalClusterDetail, error) {
	var retval __premarshalClusterDetail

	retval.Id = v.Id
	retval.Name = v.Name
	retval.Region = v.Region
	retval.State = v.State
	retval.Status = v.Status
	retval.Connected = v.Connected
	retval.Domain = v.Domain
	retval.IsExternal = v.IsExternal
	retval.IsEjected = v.IsEjected
	retval.Components = v.Components
	retval.TerraformProjectUrl = v.TerraformProjectUrl
	retval.AwsAccount = v.AwsAccount
	retval.GcpAccount = v.GcpAccount
	retval.DoAccount = v.DoAccount
	retval.CwAccount = v.CwAccount
	retval.LinodeAccount = v.LinodeAccount
	retval.AzureAccount = v.AzureAccount
	retval.VultrAccount = v.VultrAccount
	retval.IngressIP = v.IngressIP
	retval.IngressDNS = v.IngressDNS
	retval.ClusterProvider = v.ClusterProvider
	retval.CloudProvider = v.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.Prometheus
	retval.Grafana = v.Grafana
	retval.ContainerRegistry = v.ContainerRegistry
	retval.ContainerRepository = v.ContainerRepository
	retval.ContainerCacheRepository = v.ContainerCacheRepository
	retval.UpdatedAt = v.UpdatedAt
	retval.CreatedAt = v.CreatedAt
	retval.Projects = v.Projects
	retval.ProjectV3Adapters = v.ProjectV3Adapters
	retval.DeployJob = v.DeployJob
	return &retval, nil
}

// ClusterDetailAwsAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type ClusterDetailAwsAccountAWSAccount struct {
	Id        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	AccountID *string   `json:"accountID"`
}

// GetId returns ClusterDetailAwsAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailAwsAccountAWSAccount) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterDetailAwsAccountAWSAccount.Name, and is useful for accessing the field via an interface.
func (v *ClusterDetailAwsAccountAWSAccount) GetName() string { return v.Name }

// GetAccountID returns ClusterDetailAwsAccountAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *ClusterDetailAwsAccountAWSAccount) GetAccountID() *string { return v.AccountID }

// ClusterDetailAzureAccount includes the requested fields of the GraphQL type AzureAccount.
type ClusterDetailAzureAccount struct {
	Id             uuid.UUID `json:"id"`
	Name           string    `json:"name"`
	SubscriptionID *string   `json:"subscriptionID"`
}

// GetId returns ClusterDetailAzureAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailAzureAccount) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterDetailAzureAccount.Name, and is useful for accessing the field via an interface.
func (v *ClusterDetailAzureAccount) GetName() string { return v.Name }

// GetSubscriptionID returns ClusterDetailAzureAccount.SubscriptionID, and is useful for accessing the field via an interface.
func (v *ClusterDetailAzureAccount) GetSubscriptionID() *string { return v.SubscriptionID }

// ClusterDetailCloudAccount includes the requested fields of the GraphQL interface CloudAccount.
//
// ClusterDetailCloudAccount is implemented by the following types:
// ClusterDetailCloudAccountAWSAccount
// ClusterDetailCloudAccountAzureAccount
// ClusterDetailCloudAccountCoreWeaveAccount
// ClusterDetailCloudAccountDOAccount
// ClusterDetailCloudAccountGCPAccount
// ClusterDetailCloudAccountLinodeAccount
// ClusterDetailCloudAccountVultrAccount
type ClusterDetailCloudAccount interface {
	implementsGraphQLInterfaceClusterDetailCloudAccount()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ClusterDetailCloudAccountAWSAccount) implementsGraphQLInterfaceClusterDetailCloudAccount() {}
func (v *ClusterDetailCloudAccountAzureAccount) implementsGraphQLInterfaceClusterDetailCloudAccount() {
}
func (v *ClusterDetailCloudAccountCoreWeaveAccount) implementsGraphQLInterfaceClusterDetailCloudAccount() {
}
func (v *ClusterDetailCloudAccountDOAccount) implementsGraphQLInterfaceClusterDetailCloudAccount()  {}
func (v *ClusterDetailCloudAccountGCPAccount) implementsGraphQLInterfaceClusterDetailCloudAccount() {}
func (v *ClusterDetailCloudAccountLinodeAccount) implementsGraphQLInterfaceClusterDetailCloudAccount() {
}
func (v *ClusterDetailCloudAccountVultrAccount) implementsGraphQLInterfaceClusterDetailCloudAccount() {
}

func __unmarshalClusterDetailCloudAccount(b []byte, v *ClusterDetailCloudAccount) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AWSAccount":
		*v = new(ClusterDetailCloudAccountAWSAccount)
		return json.Unmarshal(b, *v)
	case "AzureAccount":
		*v = new(ClusterDetailCloudAccountAzureAccount)
		return json.Unmarshal(b, *v)
	case "CoreWeaveAccount":
		*v = new(ClusterDetailCloudAccountCoreWeaveAccount)
		return json.Unmarshal(b, *v)
	case "DOAccount":
		*v = new(ClusterDetailCloudAccountDOAccount)
		return json.Unmarshal(b, *v)
	case "GCPAccount":
		*v = new(ClusterDetailCloudAccountGCPAccount)
		return json.Unmarshal(b, *v)
	case "LinodeAccount":
		*v = new(ClusterDetailCloudAccountLinodeAccount)
		return json.Unmarshal(b, *v)
	case "VultrAccount":
		*v = new(ClusterDetailCloudAccountVultrAccount)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CloudAccount.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ClusterDetailCloudAccount: "%v"`, tn.TypeName)
	}
}

func __marshalClusterDetailCloudAccount(v *ClusterDetailCloudAccount) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ClusterDetailCloudAccountAWSAccount:
		typename = "AWSAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*ClusterDetailCloudAccountAWSAccount
		}{typename, v}
		return json.Marshal(result)
	case *ClusterDetailCloudAccountAzureAccount:
		typename = "AzureAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*ClusterDetailCloudAccountAzureAccount
		}{typename, v}
		return json.Marshal(result)
	case *ClusterDetailCloudAccountCoreWeaveAccount:
		typename = "CoreWeaveAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*ClusterDetailCloudAccountCoreWeaveAccount
		}{typename, v}
		return json.Marshal(result)
	case *ClusterDetailCloudAccountDOAccount:
		typename = "DOAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*ClusterDetailCloudAccountDOAccount
		}{typename, v}
		return json.Marshal(result)
	case *ClusterDetailCloudAccountGCPAccount:
		typename = "GCPAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*ClusterDetailCloudAccountGCPAccount
		}{typename, v}
		return json.Marshal(result)
	case *ClusterDetailCloudAccountLinodeAccount:
		typename = "LinodeAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*ClusterDetailCloudAccountLinodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *ClusterDetailCloudAccountVultrAccount:
		typename = "VultrAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*ClusterDetailCloudAccountVultrAccount
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ClusterDetailCloudAccount: "%T"`, v)
	}
}

// ClusterDetailCloudAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type ClusterDetailCloudAccountAWSAccount struct {
	Typename *string   `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns ClusterDetailCloudAccountAWSAccount.Typename, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountAWSAccount) GetTypename() *string { return v.Typename }

// GetId returns ClusterDetailCloudAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountAWSAccount) GetId() uuid.UUID { return v.Id }

// ClusterDetailCloudAccountAzureAccount includes the requested fields of the GraphQL type AzureAccount.
type ClusterDetailCloudAccountAzureAccount struct {
	Typename *string   `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns ClusterDetailCloudAccountAzureAccount.Typename, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountAzureAccount) GetTypename() *string { return v.Typename }

// GetId returns ClusterDetailCloudAccountAzureAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountAzureAccount) GetId() uuid.UUID { return v.Id }

// ClusterDetailCloudAccountCoreWeaveAccount includes the requested fields of the GraphQL type CoreWeaveAccount.
type ClusterDetailCloudAccountCoreWeaveAccount struct {
	Typename *string   `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns ClusterDetailCloudAccountCoreWeaveAccount.Typename, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountCoreWeaveAccount) GetTypename() *string { return v.Typename }

// GetId returns ClusterDetailCloudAccountCoreWeaveAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountCoreWeaveAccount) GetId() uuid.UUID { return v.Id }

// ClusterDetailCloudAccountDOAccount includes the requested fields of the GraphQL type DOAccount.
type ClusterDetailCloudAccountDOAccount struct {
	Typename *string   `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns ClusterDetailCloudAccountDOAccount.Typename, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountDOAccount) GetTypename() *string { return v.Typename }

// GetId returns ClusterDetailCloudAccountDOAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountDOAccount) GetId() uuid.UUID { return v.Id }

// ClusterDetailCloudAccountGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type ClusterDetailCloudAccountGCPAccount struct {
	Typename *string   `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns ClusterDetailCloudAccountGCPAccount.Typename, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountGCPAccount) GetTypename() *string { return v.Typename }

// GetId returns ClusterDetailCloudAccountGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountGCPAccount) GetId() uuid.UUID { return v.Id }

// ClusterDetailCloudAccountLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type ClusterDetailCloudAccountLinodeAccount struct {
	Typename *string   `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns ClusterDetailCloudAccountLinodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountLinodeAccount) GetTypename() *string { return v.Typename }

// GetId returns ClusterDetailCloudAccountLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountLinodeAccount) GetId() uuid.UUID { return v.Id }

// ClusterDetailCloudAccountVultrAccount includes the requested fields of the GraphQL type VultrAccount.
type ClusterDetailCloudAccountVultrAccount struct {
	Typename *string   `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns ClusterDetailCloudAccountVultrAccount.Typename, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountVultrAccount) GetTypename() *string { return v.Typename }

// GetId returns ClusterDetailCloudAccountVultrAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailCloudAccountVultrAccount) GetId() uuid.UUID { return v.Id }

// ClusterDetailComponentsClusterComponent includes the requested fields of the GraphQL type ClusterComponent.
type ClusterDetailComponentsClusterComponent struct {
	Name              string                                                                           `json:"name"`
	Type              ClusterComponentType                                                             `json:"type"`
	Status            ClusterComponentEjectedStatus                                                    `json:"status"`
	IsInstalledByZeet bool                                                                             `json:"isInstalledByZeet"`
	Exists            bool                                                                             `json:"exists"`
	Project           *ClusterDetailComponentsClusterComponentProjectProjectV3Adapter                  `json:"project"`
	HelmMetadata      *ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata `json:"helmMetadata"`
}

// GetName returns ClusterDetailComponentsClusterComponent.Name, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponent) GetName() string { return v.Name }

// GetType returns ClusterDetailComponentsClusterComponent.Type, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponent) GetType() ClusterComponentType { return v.Type }

// GetStatus returns ClusterDetailComponentsClusterComponent.Status, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponent) GetStatus() ClusterComponentEjectedStatus {
	return v.Status
}

// GetIsInstalledByZeet returns ClusterDetailComponentsClusterComponent.IsInstalledByZeet, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponent) GetIsInstalledByZeet() bool {
	return v.IsInstalledByZeet
}

// GetExists returns ClusterDetailComponentsClusterComponent.Exists, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponent) GetExists() bool { return v.Exists }

// GetProject returns ClusterDetailComponentsClusterComponent.Project, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponent) GetProject() *ClusterDetailComponentsClusterComponentProjectProjectV3Adapter {
	return v.Project
}

// GetHelmMetadata returns ClusterDetailComponentsClusterComponent.HelmMetadata, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponent) GetHelmMetadata() *ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata {
	return v.HelmMetadata
}

// ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata includes the requested fields of the GraphQL type HelmClusterComponentMetadata.
type ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata struct {
	Values         string  `json:"values"`
	Namespace      string  `json:"namespace"`
	ReleaseName    string  `json:"releaseName"`
	ChartRepoGuess *string `json:"chartRepoGuess"`
	ChartVersion   string  `json:"chartVersion"`
	ChartName      string  `json:"chartName"`
}

// GetValues returns ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata.Values, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata) GetValues() string {
	return v.Values
}

// GetNamespace returns ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata.Namespace, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata) GetNamespace() string {
	return v.Namespace
}

// GetReleaseName returns ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata.ReleaseName, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata) GetReleaseName() string {
	return v.ReleaseName
}

// GetChartRepoGuess returns ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata.ChartRepoGuess, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata) GetChartRepoGuess() *string {
	return v.ChartRepoGuess
}

// GetChartVersion returns ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata.ChartVersion, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata) GetChartVersion() string {
	return v.ChartVersion
}

// GetChartName returns ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata.ChartName, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponentHelmMetadataHelmClusterComponentMetadata) GetChartName() string {
	return v.ChartName
}

// ClusterDetailComponentsClusterComponentProjectProjectV3Adapter includes the requested fields of the GraphQL type ProjectV3Adapter.
type ClusterDetailComponentsClusterComponentProjectProjectV3Adapter struct {
	// - v0.ProjectAdapterID or v1.ProjectID
	Id                 uuid.UUID                                                                         `json:"id"`
	Project            *ClusterDetailComponentsClusterComponentProjectProjectV3AdapterProject            `json:"project"`
	ProjectEnvironment *ClusterDetailComponentsClusterComponentProjectProjectV3AdapterProjectEnvironment `json:"projectEnvironment"`
	Name               string                                                                            `json:"name"`
}

// GetId returns ClusterDetailComponentsClusterComponentProjectProjectV3Adapter.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponentProjectProjectV3Adapter) GetId() uuid.UUID {
	return v.Id
}

// GetProject returns ClusterDetailComponentsClusterComponentProjectProjectV3Adapter.Project, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponentProjectProjectV3Adapter) GetProject() *ClusterDetailComponentsClusterComponentProjectProjectV3AdapterProject {
	return v.Project
}

// GetProjectEnvironment returns ClusterDetailComponentsClusterComponentProjectProjectV3Adapter.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponentProjectProjectV3Adapter) GetProjectEnvironment() *ClusterDetailComponentsClusterComponentProjectProjectV3AdapterProjectEnvironment {
	return v.ProjectEnvironment
}

// GetName returns ClusterDetailComponentsClusterComponentProjectProjectV3Adapter.Name, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponentProjectProjectV3Adapter) GetName() string {
	return v.Name
}

// ClusterDetailComponentsClusterComponentProjectProjectV3AdapterProject includes the requested fields of the GraphQL type Project.
type ClusterDetailComponentsClusterComponentProjectProjectV3AdapterProject struct {
	Name string `json:"name"`
}

// GetName returns ClusterDetailComponentsClusterComponentProjectProjectV3AdapterProject.Name, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponentProjectProjectV3AdapterProject) GetName() string {
	return v.Name
}

// ClusterDetailComponentsClusterComponentProjectProjectV3AdapterProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type ClusterDetailComponentsClusterComponentProjectProjectV3AdapterProjectEnvironment struct {
	Name string `json:"name"`
}

// GetName returns ClusterDetailComponentsClusterComponentProjectProjectV3AdapterProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *ClusterDetailComponentsClusterComponentProjectProjectV3AdapterProjectEnvironment) GetName() string {
	return v.Name
}

// ClusterDetailContainerRegistry includes the requested fields of the GraphQL type ContainerRegistry.
type ClusterDetailContainerRegistry struct {
	Id                 uuid.UUID                            `json:"id"`
	Name               string                               `json:"name"`
	CredentialProvider *ContainerRegistryCredentialProvider `json:"credentialProvider"`
	Username           *string                              `json:"username"`
}

// GetId returns ClusterDetailContainerRegistry.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailContainerRegistry) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterDetailContainerRegistry.Name, and is useful for accessing the field via an interface.
func (v *ClusterDetailContainerRegistry) GetName() string { return v.Name }

// GetCredentialProvider returns ClusterDetailContainerRegistry.CredentialProvider, and is useful for accessing the field via an interface.
func (v *ClusterDetailContainerRegistry) GetCredentialProvider() *ContainerRegistryCredentialProvider {
	return v.CredentialProvider
}

// GetUsername returns ClusterDetailContainerRegistry.Username, and is useful for accessing the field via an interface.
func (v *ClusterDetailContainerRegistry) GetUsername() *string { return v.Username }

// ClusterDetailCwAccountCoreWeaveAccount includes the requested fields of the GraphQL type CoreWeaveAccount.
type ClusterDetailCwAccountCoreWeaveAccount struct {
	Id        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Namespace *string   `json:"namespace"`
}

// GetId returns ClusterDetailCwAccountCoreWeaveAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailCwAccountCoreWeaveAccount) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterDetailCwAccountCoreWeaveAccount.Name, and is useful for accessing the field via an interface.
func (v *ClusterDetailCwAccountCoreWeaveAccount) GetName() string { return v.Name }

// GetNamespace returns ClusterDetailCwAccountCoreWeaveAccount.Namespace, and is useful for accessing the field via an interface.
func (v *ClusterDetailCwAccountCoreWeaveAccount) GetNamespace() *string { return v.Namespace }

// ClusterDetailDeployJobJobRun includes the requested fields of the GraphQL type JobRun.
type ClusterDetailDeployJobJobRun struct {
	Id    uuid.UUID   `json:"id"`
	State JobRunState `json:"state"`
}

// GetId returns ClusterDetailDeployJobJobRun.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailDeployJobJobRun) GetId() uuid.UUID { return v.Id }

// GetState returns ClusterDetailDeployJobJobRun.State, and is useful for accessing the field via an interface.
func (v *ClusterDetailDeployJobJobRun) GetState() JobRunState { return v.State }

// ClusterDetailDoAccountDOAccount includes the requested fields of the GraphQL type DOAccount.
type ClusterDetailDoAccountDOAccount struct {
	Id             uuid.UUID `json:"id"`
	Name           string    `json:"name"`
	DefaultProject *string   `json:"defaultProject"`
}

// GetId returns ClusterDetailDoAccountDOAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailDoAccountDOAccount) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterDetailDoAccountDOAccount.Name, and is useful for accessing the field via an interface.
func (v *ClusterDetailDoAccountDOAccount) GetName() string { return v.Name }

// GetDefaultProject returns ClusterDetailDoAccountDOAccount.DefaultProject, and is useful for accessing the field via an interface.
func (v *ClusterDetailDoAccountDOAccount) GetDefaultProject() *string { return v.DefaultProject }

// ClusterDetailGcpAccountGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type ClusterDetailGcpAccountGCPAccount struct {
	Id        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	ProjectID *string   `json:"projectID"`
}

// GetId returns ClusterDetailGcpAccountGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailGcpAccountGCPAccount) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterDetailGcpAccountGCPAccount.Name, and is useful for accessing the field via an interface.
func (v *ClusterDetailGcpAccountGCPAccount) GetName() string { return v.Name }

// GetProjectID returns ClusterDetailGcpAccountGCPAccount.ProjectID, and is useful for accessing the field via an interface.
func (v *ClusterDetailGcpAccountGCPAccount) GetProjectID() *string { return v.ProjectID }

// ClusterDetailGrafana includes the requested fields of the GraphQL type Grafana.
type ClusterDetailGrafana struct {
	Url      string  `json:"url"`
	User     *string `json:"user"`
	Password *string `json:"password"`
}

// GetUrl returns ClusterDetailGrafana.Url, and is useful for accessing the field via an interface.
func (v *ClusterDetailGrafana) GetUrl() string { return v.Url }

// GetUser returns ClusterDetailGrafana.User, and is useful for accessing the field via an interface.
func (v *ClusterDetailGrafana) GetUser() *string { return v.User }

// GetPassword returns ClusterDetailGrafana.Password, and is useful for accessing the field via an interface.
func (v *ClusterDetailGrafana) GetPassword() *string { return v.Password }

// ClusterDetailLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type ClusterDetailLinodeAccount struct {
	Id                uuid.UUID `json:"id"`
	Name              string    `json:"name"`
	AccessTokenPrefix *string   `json:"accessTokenPrefix"`
}

// GetId returns ClusterDetailLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailLinodeAccount) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterDetailLinodeAccount.Name, and is useful for accessing the field via an interface.
func (v *ClusterDetailLinodeAccount) GetName() string { return v.Name }

// GetAccessTokenPrefix returns ClusterDetailLinodeAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *ClusterDetailLinodeAccount) GetAccessTokenPrefix() *string { return v.AccessTokenPrefix }

// ClusterDetailProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type ClusterDetailProjectV3AdaptersProjectV3AdapterConnection struct {
	ProjectV3AdapterConnectionCommon `json:"-"`
}

// GetPageInfo returns ClusterDetailProjectV3AdaptersProjectV3AdapterConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection) GetPageInfo() ProjectV3AdapterConnectionCommonPageInfo {
	return v.ProjectV3AdapterConnectionCommon.PageInfo
}

// GetNodes returns ClusterDetailProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter {
	return v.ProjectV3AdapterConnectionCommon.Nodes
}

// GetTotalCount returns ClusterDetailProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.ProjectV3AdapterConnectionCommon.TotalCount
}

func (v *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ClusterDetailProjectV3AdaptersProjectV3AdapterConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.ClusterDetailProjectV3AdaptersProjectV3AdapterConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3AdapterConnectionCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalClusterDetailProjectV3AdaptersProjectV3AdapterConnection struct {
	PageInfo ProjectV3AdapterConnectionCommonPageInfo `json:"pageInfo"`

	Nodes []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter `json:"nodes"`

	TotalCount int `json:"totalCount"`
}

func (v *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection) __premarshalJSON() (*__premarshalClusterDetailProjectV3AdaptersProjectV3AdapterConnection, error) {
	var retval __premarshalClusterDetailProjectV3AdaptersProjectV3AdapterConnection

	retval.PageInfo = v.ProjectV3AdapterConnectionCommon.PageInfo
	retval.Nodes = v.ProjectV3AdapterConnectionCommon.Nodes
	retval.TotalCount = v.ProjectV3AdapterConnectionCommon.TotalCount
	return &retval, nil
}

// ClusterDetailProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type ClusterDetailProjectsProjectConnection struct {
	ProjectConnectionComon `json:"-"`
}

// GetPageInfo returns ClusterDetailProjectsProjectConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *ClusterDetailProjectsProjectConnection) GetPageInfo() ProjectConnectionComonPageInfo {
	return v.ProjectConnectionComon.PageInfo
}

// GetNodes returns ClusterDetailProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ClusterDetailProjectsProjectConnection) GetNodes() []ProjectConnectionComonNodesProject {
	return v.ProjectConnectionComon.Nodes
}

func (v *ClusterDetailProjectsProjectConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ClusterDetailProjectsProjectConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.ClusterDetailProjectsProjectConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectConnectionComon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalClusterDetailProjectsProjectConnection struct {
	PageInfo ProjectConnectionComonPageInfo `json:"pageInfo"`

	Nodes []ProjectConnectionComonNodesProject `json:"nodes"`
}

func (v *ClusterDetailProjectsProjectConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ClusterDetailProjectsProjectConnection) __premarshalJSON() (*__premarshalClusterDetailProjectsProjectConnection, error) {
	var retval __premarshalClusterDetailProjectsProjectConnection

	retval.PageInfo = v.ProjectConnectionComon.PageInfo
	retval.Nodes = v.ProjectConnectionComon.Nodes
	return &retval, nil
}

// ClusterDetailPrometheus includes the requested fields of the GraphQL type Prometheus.
type ClusterDetailPrometheus struct {
	Url      string  `json:"url"`
	User     *string `json:"user"`
	Password *string `json:"password"`
	Token    *string `json:"token"`
}

// GetUrl returns ClusterDetailPrometheus.Url, and is useful for accessing the field via an interface.
func (v *ClusterDetailPrometheus) GetUrl() string { return v.Url }

// GetUser returns ClusterDetailPrometheus.User, and is useful for accessing the field via an interface.
func (v *ClusterDetailPrometheus) GetUser() *string { return v.User }

// GetPassword returns ClusterDetailPrometheus.Password, and is useful for accessing the field via an interface.
func (v *ClusterDetailPrometheus) GetPassword() *string { return v.Password }

// GetToken returns ClusterDetailPrometheus.Token, and is useful for accessing the field via an interface.
func (v *ClusterDetailPrometheus) GetToken() *string { return v.Token }

// ClusterDetailVultrAccount includes the requested fields of the GraphQL type VultrAccount.
type ClusterDetailVultrAccount struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ClusterDetailVultrAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailVultrAccount) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterDetailVultrAccount.Name, and is useful for accessing the field via an interface.
func (v *ClusterDetailVultrAccount) GetName() string { return v.Name }

// ClusterDomainsDetail includes the GraphQL fields of ClusterDomains requested by the fragment ClusterDomainsDetail.
type ClusterDomainsDetail struct {
	Id      uuid.UUID                                 `json:"id"`
	Cluster ClusterDomainsDetailCluster               `json:"cluster"`
	Domains []ClusterDomainsDetailDomainsCustomDomain `json:"domains"`
}

// GetId returns ClusterDomainsDetail.Id, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetail) GetId() uuid.UUID { return v.Id }

// GetCluster returns ClusterDomainsDetail.Cluster, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetail) GetCluster() ClusterDomainsDetailCluster { return v.Cluster }

// GetDomains returns ClusterDomainsDetail.Domains, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetail) GetDomains() []ClusterDomainsDetailDomainsCustomDomain {
	return v.Domains
}

// ClusterDomainsDetailCluster includes the requested fields of the GraphQL type Cluster.
type ClusterDomainsDetailCluster struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ClusterDomainsDetailCluster.Id, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetailCluster) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterDomainsDetailCluster.Name, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetailCluster) GetName() string { return v.Name }

// ClusterDomainsDetailDomainsCustomDomain includes the requested fields of the GraphQL type CustomDomain.
type ClusterDomainsDetailDomainsCustomDomain struct {
	Id           uuid.UUID `json:"id"`
	DomainDetail `json:"-"`
}

// GetId returns ClusterDomainsDetailDomainsCustomDomain.Id, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetailDomainsCustomDomain) GetId() uuid.UUID { return v.Id }

// GetDomain returns ClusterDomainsDetailDomainsCustomDomain.Domain, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetailDomainsCustomDomain) GetDomain() string { return v.DomainDetail.Domain }

// GetIsApex returns ClusterDomainsDetailDomainsCustomDomain.IsApex, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetailDomainsCustomDomain) GetIsApex() bool { return v.DomainDetail.IsApex }

// GetCnameTargets returns ClusterDomainsDetailDomainsCustomDomain.CnameTargets, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetailDomainsCustomDomain) GetCnameTargets() []string {
	return v.DomainDetail.CnameTargets
}

// GetIpTargets returns ClusterDomainsDetailDomainsCustomDomain.IpTargets, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetailDomainsCustomDomain) GetIpTargets() []string {
	return v.DomainDetail.IpTargets
}

// GetDisableCertManager returns ClusterDomainsDetailDomainsCustomDomain.DisableCertManager, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetailDomainsCustomDomain) GetDisableCertManager() *bool {
	return v.DomainDetail.DisableCertManager
}

// GetCertManagerChallengeType returns ClusterDomainsDetailDomainsCustomDomain.CertManagerChallengeType, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetailDomainsCustomDomain) GetCertManagerChallengeType() *CertManagerChallengeType {
	return v.DomainDetail.CertManagerChallengeType
}

// GetSyncDomain returns ClusterDomainsDetailDomainsCustomDomain.SyncDomain, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetailDomainsCustomDomain) GetSyncDomain() *DomainDetailSyncDomainCustomDomain {
	return v.DomainDetail.SyncDomain
}

// GetInstructions returns ClusterDomainsDetailDomainsCustomDomain.Instructions, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetailDomainsCustomDomain) GetInstructions() []DomainDetailInstructionsDNSRecord {
	return v.DomainDetail.Instructions
}

// GetCertificate returns ClusterDomainsDetailDomainsCustomDomain.Certificate, and is useful for accessing the field via an interface.
func (v *ClusterDomainsDetailDomainsCustomDomain) GetCertificate() *DomainDetailCertificate {
	return v.DomainDetail.Certificate
}

func (v *ClusterDomainsDetailDomainsCustomDomain) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ClusterDomainsDetailDomainsCustomDomain
		graphql.NoUnmarshalJSON
	}
	firstPass.ClusterDomainsDetailDomainsCustomDomain = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DomainDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalClusterDomainsDetailDomainsCustomDomain struct {
	Id uuid.UUID `json:"id"`

	Domain string `json:"domain"`

	IsApex bool `json:"isApex"`

	CnameTargets []string `json:"cnameTargets"`

	IpTargets []string `json:"ipTargets"`

	DisableCertManager *bool `json:"disableCertManager"`

	CertManagerChallengeType *CertManagerChallengeType `json:"certManagerChallengeType"`

	SyncDomain *DomainDetailSyncDomainCustomDomain `json:"syncDomain"`

	Instructions []DomainDetailInstructionsDNSRecord `json:"instructions"`

	Certificate *DomainDetailCertificate `json:"certificate"`
}

func (v *ClusterDomainsDetailDomainsCustomDomain) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ClusterDomainsDetailDomainsCustomDomain) __premarshalJSON() (*__premarshalClusterDomainsDetailDomainsCustomDomain, error) {
	var retval __premarshalClusterDomainsDetailDomainsCustomDomain

	retval.Id = v.Id
	retval.Domain = v.DomainDetail.Domain
	retval.IsApex = v.DomainDetail.IsApex
	retval.CnameTargets = v.DomainDetail.CnameTargets
	retval.IpTargets = v.DomainDetail.IpTargets
	retval.DisableCertManager = v.DomainDetail.DisableCertManager
	retval.CertManagerChallengeType = v.DomainDetail.CertManagerChallengeType
	retval.SyncDomain = v.DomainDetail.SyncDomain
	retval.Instructions = v.DomainDetail.Instructions
	retval.Certificate = v.DomainDetail.Certificate
	return &retval, nil
}

type ClusterProvider string

const (
	ClusterProviderGeneric   ClusterProvider = "GENERIC"
	ClusterProviderEks       ClusterProvider = "EKS"
	ClusterProviderGke       ClusterProvider = "GKE"
	ClusterProviderDoks      ClusterProvider = "DOKS"
	ClusterProviderCoreweave ClusterProvider = "COREWEAVE"
	ClusterProviderLke       ClusterProvider = "LKE"
	ClusterProviderVke       ClusterProvider = "VKE"
)

type ClusterState string

const (
	ClusterStatePending       ClusterState = "PENDING"
	ClusterStateCreating      ClusterState = "CREATING"
	ClusterStateHealthy       ClusterState = "HEALTHY"
	ClusterStateDeleting      ClusterState = "DELETING"
	ClusterStateError         ClusterState = "ERROR"
	ClusterStateErrorDeleting ClusterState = "ERROR_DELETING"
)

type ClusterStatus string

const (
	ClusterStatusPending       ClusterStatus = "PENDING"
	ClusterStatusCreating      ClusterStatus = "CREATING"
	ClusterStatusHealthy       ClusterStatus = "HEALTHY"
	ClusterStatusDeleting      ClusterStatus = "DELETING"
	ClusterStatusError         ClusterStatus = "ERROR"
	ClusterStatusErrorDeleting ClusterStatus = "ERROR_DELETING"
	ClusterStatusUnreachable   ClusterStatus = "UNREACHABLE"
)

// ClusterSummary includes the GraphQL fields of Cluster requested by the fragment ClusterSummary.
type ClusterSummary struct {
	Id            uuid.UUID                                `json:"id"`
	Name          string                                   `json:"name"`
	AwsAccount    *ClusterSummaryAwsAccountAWSAccount      `json:"awsAccount"`
	GcpAccount    *ClusterSummaryGcpAccountGCPAccount      `json:"gcpAccount"`
	DoAccount     *ClusterSummaryDoAccountDOAccount        `json:"doAccount"`
	CwAccount     *ClusterSummaryCwAccountCoreWeaveAccount `json:"cwAccount"`
	LinodeAccount *ClusterSummaryLinodeAccount             `json:"linodeAccount"`
	VultrAccount  *ClusterSummaryVultrAccount              `json:"vultrAccount"`
	AzureAccount  *ClusterSummaryAzureAccount              `json:"azureAccount"`
}

// GetId returns ClusterSummary.Id, and is useful for accessing the field via an interface.
func (v *ClusterSummary) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterSummary.Name, and is useful for accessing the field via an interface.
func (v *ClusterSummary) GetName() string { return v.Name }

// GetAwsAccount returns ClusterSummary.AwsAccount, and is useful for accessing the field via an interface.
func (v *ClusterSummary) GetAwsAccount() *ClusterSummaryAwsAccountAWSAccount { return v.AwsAccount }

// GetGcpAccount returns ClusterSummary.GcpAccount, and is useful for accessing the field via an interface.
func (v *ClusterSummary) GetGcpAccount() *ClusterSummaryGcpAccountGCPAccount { return v.GcpAccount }

// GetDoAccount returns ClusterSummary.DoAccount, and is useful for accessing the field via an interface.
func (v *ClusterSummary) GetDoAccount() *ClusterSummaryDoAccountDOAccount { return v.DoAccount }

// GetCwAccount returns ClusterSummary.CwAccount, and is useful for accessing the field via an interface.
func (v *ClusterSummary) GetCwAccount() *ClusterSummaryCwAccountCoreWeaveAccount { return v.CwAccount }

// GetLinodeAccount returns ClusterSummary.LinodeAccount, and is useful for accessing the field via an interface.
func (v *ClusterSummary) GetLinodeAccount() *ClusterSummaryLinodeAccount { return v.LinodeAccount }

// GetVultrAccount returns ClusterSummary.VultrAccount, and is useful for accessing the field via an interface.
func (v *ClusterSummary) GetVultrAccount() *ClusterSummaryVultrAccount { return v.VultrAccount }

// GetAzureAccount returns ClusterSummary.AzureAccount, and is useful for accessing the field via an interface.
func (v *ClusterSummary) GetAzureAccount() *ClusterSummaryAzureAccount { return v.AzureAccount }

// ClusterSummaryAwsAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type ClusterSummaryAwsAccountAWSAccount struct {
	Id        uuid.UUID `json:"id"`
	AccountID *string   `json:"accountID"`
}

// GetId returns ClusterSummaryAwsAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterSummaryAwsAccountAWSAccount) GetId() uuid.UUID { return v.Id }

// GetAccountID returns ClusterSummaryAwsAccountAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *ClusterSummaryAwsAccountAWSAccount) GetAccountID() *string { return v.AccountID }

// ClusterSummaryAzureAccount includes the requested fields of the GraphQL type AzureAccount.
type ClusterSummaryAzureAccount struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ClusterSummaryAzureAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterSummaryAzureAccount) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterSummaryAzureAccount.Name, and is useful for accessing the field via an interface.
func (v *ClusterSummaryAzureAccount) GetName() string { return v.Name }

// ClusterSummaryCwAccountCoreWeaveAccount includes the requested fields of the GraphQL type CoreWeaveAccount.
type ClusterSummaryCwAccountCoreWeaveAccount struct {
	Id        uuid.UUID `json:"id"`
	Namespace *string   `json:"namespace"`
}

// GetId returns ClusterSummaryCwAccountCoreWeaveAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterSummaryCwAccountCoreWeaveAccount) GetId() uuid.UUID { return v.Id }

// GetNamespace returns ClusterSummaryCwAccountCoreWeaveAccount.Namespace, and is useful for accessing the field via an interface.
func (v *ClusterSummaryCwAccountCoreWeaveAccount) GetNamespace() *string { return v.Namespace }

// ClusterSummaryDoAccountDOAccount includes the requested fields of the GraphQL type DOAccount.
type ClusterSummaryDoAccountDOAccount struct {
	Id             uuid.UUID `json:"id"`
	DefaultProject *string   `json:"defaultProject"`
}

// GetId returns ClusterSummaryDoAccountDOAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterSummaryDoAccountDOAccount) GetId() uuid.UUID { return v.Id }

// GetDefaultProject returns ClusterSummaryDoAccountDOAccount.DefaultProject, and is useful for accessing the field via an interface.
func (v *ClusterSummaryDoAccountDOAccount) GetDefaultProject() *string { return v.DefaultProject }

// ClusterSummaryGcpAccountGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type ClusterSummaryGcpAccountGCPAccount struct {
	Id        uuid.UUID `json:"id"`
	ProjectID *string   `json:"projectID"`
}

// GetId returns ClusterSummaryGcpAccountGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterSummaryGcpAccountGCPAccount) GetId() uuid.UUID { return v.Id }

// GetProjectID returns ClusterSummaryGcpAccountGCPAccount.ProjectID, and is useful for accessing the field via an interface.
func (v *ClusterSummaryGcpAccountGCPAccount) GetProjectID() *string { return v.ProjectID }

// ClusterSummaryLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type ClusterSummaryLinodeAccount struct {
	Id                uuid.UUID `json:"id"`
	AccessTokenPrefix *string   `json:"accessTokenPrefix"`
}

// GetId returns ClusterSummaryLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterSummaryLinodeAccount) GetId() uuid.UUID { return v.Id }

// GetAccessTokenPrefix returns ClusterSummaryLinodeAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *ClusterSummaryLinodeAccount) GetAccessTokenPrefix() *string { return v.AccessTokenPrefix }

// ClusterSummaryVultrAccount includes the requested fields of the GraphQL type VultrAccount.
type ClusterSummaryVultrAccount struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ClusterSummaryVultrAccount.Id, and is useful for accessing the field via an interface.
func (v *ClusterSummaryVultrAccount) GetId() uuid.UUID { return v.Id }

// GetName returns ClusterSummaryVultrAccount.Name, and is useful for accessing the field via an interface.
func (v *ClusterSummaryVultrAccount) GetName() string { return v.Name }

// CollaboratorCommon includes the GraphQL fields of ProjectCollaborator requested by the fragment CollaboratorCommon.
type CollaboratorCommon struct {
	Id   uuid.UUID               `json:"id"`
	User CollaboratorCommonUser  `json:"user"`
	Role ProjectCollaboratorRole `json:"role"`
}

// GetId returns CollaboratorCommon.Id, and is useful for accessing the field via an interface.
func (v *CollaboratorCommon) GetId() uuid.UUID { return v.Id }

// GetUser returns CollaboratorCommon.User, and is useful for accessing the field via an interface.
func (v *CollaboratorCommon) GetUser() CollaboratorCommonUser { return v.User }

// GetRole returns CollaboratorCommon.Role, and is useful for accessing the field via an interface.
func (v *CollaboratorCommon) GetRole() ProjectCollaboratorRole { return v.Role }

// CollaboratorCommonUser includes the requested fields of the GraphQL type User.
type CollaboratorCommonUser struct {
	UserPublicCommon `json:"-"`
}

// GetId returns CollaboratorCommonUser.Id, and is useful for accessing the field via an interface.
func (v *CollaboratorCommonUser) GetId() uuid.UUID { return v.UserPublicCommon.Id }

// GetName returns CollaboratorCommonUser.Name, and is useful for accessing the field via an interface.
func (v *CollaboratorCommonUser) GetName() string { return v.UserPublicCommon.Name }

// GetLogin returns CollaboratorCommonUser.Login, and is useful for accessing the field via an interface.
func (v *CollaboratorCommonUser) GetLogin() string { return v.UserPublicCommon.Login }

// GetAvatar returns CollaboratorCommonUser.Avatar, and is useful for accessing the field via an interface.
func (v *CollaboratorCommonUser) GetAvatar() *string { return v.UserPublicCommon.Avatar }

// GetIsTeam returns CollaboratorCommonUser.IsTeam, and is useful for accessing the field via an interface.
func (v *CollaboratorCommonUser) GetIsTeam() *bool { return v.UserPublicCommon.IsTeam }

func (v *CollaboratorCommonUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CollaboratorCommonUser
		graphql.NoUnmarshalJSON
	}
	firstPass.CollaboratorCommonUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserPublicCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCollaboratorCommonUser struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Login string `json:"login"`

	Avatar *string `json:"avatar"`

	IsTeam *bool `json:"isTeam"`
}

func (v *CollaboratorCommonUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CollaboratorCommonUser) __premarshalJSON() (*__premarshalCollaboratorCommonUser, error) {
	var retval __premarshalCollaboratorCommonUser

	retval.Id = v.UserPublicCommon.Id
	retval.Name = v.UserPublicCommon.Name
	retval.Login = v.UserPublicCommon.Login
	retval.Avatar = v.UserPublicCommon.Avatar
	retval.IsTeam = v.UserPublicCommon.IsTeam
	return &retval, nil
}

type ConnectUserToIamInput struct {
	UserID       uuid.UUID `json:"userID"`
	AwsIamArn    *string   `json:"awsIamArn"`
	AwsAccountId *string   `json:"awsAccountId"`
}

// GetUserID returns ConnectUserToIamInput.UserID, and is useful for accessing the field via an interface.
func (v *ConnectUserToIamInput) GetUserID() uuid.UUID { return v.UserID }

// GetAwsIamArn returns ConnectUserToIamInput.AwsIamArn, and is useful for accessing the field via an interface.
func (v *ConnectUserToIamInput) GetAwsIamArn() *string { return v.AwsIamArn }

// GetAwsAccountId returns ConnectUserToIamInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *ConnectUserToIamInput) GetAwsAccountId() *string { return v.AwsAccountId }

// ConnectUserToIamResponse is returned by ConnectUserToIam on success.
type ConnectUserToIamResponse struct {
	ConnectUserToIam bool `json:"connectUserToIam"`
}

// GetConnectUserToIam returns ConnectUserToIamResponse.ConnectUserToIam, and is useful for accessing the field via an interface.
func (v *ConnectUserToIamResponse) GetConnectUserToIam() bool { return v.ConnectUserToIam }

// A sentinel value returned when we are not able to facilitate self-service for a desired action
type ContactUs string

const (
	ContactUsContactUs ContactUs = "CONTACT_US"
)

type ContainerRegistryCredentialProvider string

const (
	ContainerRegistryCredentialProviderDocker ContainerRegistryCredentialProvider = "DOCKER"
	ContainerRegistryCredentialProviderEcr    ContainerRegistryCredentialProvider = "ECR"
	ContainerRegistryCredentialProviderGcr    ContainerRegistryCredentialProvider = "GCR"
	ContainerRegistryCredentialProviderDocr   ContainerRegistryCredentialProvider = "DOCR"
)

type ContainerRegistrySourceInput struct {
	RegistryID  *uuid.UUID `json:"registryID"`
	RegistryURL *string    `json:"registryURL"`
	Repository  string     `json:"repository"`
	Tag         *string    `json:"tag"`
}

// GetRegistryID returns ContainerRegistrySourceInput.RegistryID, and is useful for accessing the field via an interface.
func (v *ContainerRegistrySourceInput) GetRegistryID() *uuid.UUID { return v.RegistryID }

// GetRegistryURL returns ContainerRegistrySourceInput.RegistryURL, and is useful for accessing the field via an interface.
func (v *ContainerRegistrySourceInput) GetRegistryURL() *string { return v.RegistryURL }

// GetRepository returns ContainerRegistrySourceInput.Repository, and is useful for accessing the field via an interface.
func (v *ContainerRegistrySourceInput) GetRepository() string { return v.Repository }

// GetTag returns ContainerRegistrySourceInput.Tag, and is useful for accessing the field via an interface.
func (v *ContainerRegistrySourceInput) GetTag() *string { return v.Tag }

type ContainerResourcesSpecInput struct {
	Cpu              float64               `json:"cpu"`
	Memory           float64               `json:"memory"`
	EphemeralStorage *float64              `json:"ephemeralStorage"`
	Accelerator      *AcceleratorSpecInput `json:"accelerator"`
	Spot             *bool                 `json:"spot"`
}

// GetCpu returns ContainerResourcesSpecInput.Cpu, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetCpu() float64 { return v.Cpu }

// GetMemory returns ContainerResourcesSpecInput.Memory, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetMemory() float64 { return v.Memory }

// GetEphemeralStorage returns ContainerResourcesSpecInput.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetEphemeralStorage() *float64 { return v.EphemeralStorage }

// GetAccelerator returns ContainerResourcesSpecInput.Accelerator, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetAccelerator() *AcceleratorSpecInput { return v.Accelerator }

// GetSpot returns ContainerResourcesSpecInput.Spot, and is useful for accessing the field via an interface.
func (v *ContainerResourcesSpecInput) GetSpot() *bool { return v.Spot }

type CreateAPIKeyInput struct {
	UserID uuid.UUID `json:"userID"`
	Name   string    `json:"name"`
}

// GetUserID returns CreateAPIKeyInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateAPIKeyInput) GetUserID() uuid.UUID { return v.UserID }

// GetName returns CreateAPIKeyInput.Name, and is useful for accessing the field via an interface.
func (v *CreateAPIKeyInput) GetName() string { return v.Name }

type CreateBlueprintInput struct {
	UserID          uuid.UUID                    `json:"userID"`
	Slug            string                       `json:"slug"`
	DisplayName     string                       `json:"displayName"`
	Published       bool                         `json:"published"`
	Type            BlueprintType                `json:"type"`
	Configuration   *BlueprintConfigurationInput `json:"configuration"`
	Variables       []BlueprintVariableSpecInput `json:"variables"`
	RichInputSchema *string                      `json:"richInputSchema"`
	Description     *string                      `json:"description"`
	Tags            []string                     `json:"tags"`
	LogoUrl         *string                      `json:"logoUrl"`
}

// GetUserID returns CreateBlueprintInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateBlueprintInput) GetUserID() uuid.UUID { return v.UserID }

// GetSlug returns CreateBlueprintInput.Slug, and is useful for accessing the field via an interface.
func (v *CreateBlueprintInput) GetSlug() string { return v.Slug }

// GetDisplayName returns CreateBlueprintInput.DisplayName, and is useful for accessing the field via an interface.
func (v *CreateBlueprintInput) GetDisplayName() string { return v.DisplayName }

// GetPublished returns CreateBlueprintInput.Published, and is useful for accessing the field via an interface.
func (v *CreateBlueprintInput) GetPublished() bool { return v.Published }

// GetType returns CreateBlueprintInput.Type, and is useful for accessing the field via an interface.
func (v *CreateBlueprintInput) GetType() BlueprintType { return v.Type }

// GetConfiguration returns CreateBlueprintInput.Configuration, and is useful for accessing the field via an interface.
func (v *CreateBlueprintInput) GetConfiguration() *BlueprintConfigurationInput {
	return v.Configuration
}

// GetVariables returns CreateBlueprintInput.Variables, and is useful for accessing the field via an interface.
func (v *CreateBlueprintInput) GetVariables() []BlueprintVariableSpecInput { return v.Variables }

// GetRichInputSchema returns CreateBlueprintInput.RichInputSchema, and is useful for accessing the field via an interface.
func (v *CreateBlueprintInput) GetRichInputSchema() *string { return v.RichInputSchema }

// GetDescription returns CreateBlueprintInput.Description, and is useful for accessing the field via an interface.
func (v *CreateBlueprintInput) GetDescription() *string { return v.Description }

// GetTags returns CreateBlueprintInput.Tags, and is useful for accessing the field via an interface.
func (v *CreateBlueprintInput) GetTags() []string { return v.Tags }

// GetLogoUrl returns CreateBlueprintInput.LogoUrl, and is useful for accessing the field via an interface.
func (v *CreateBlueprintInput) GetLogoUrl() *string { return v.LogoUrl }

type CreateClusterInput struct {
	UserID                    uuid.UUID                  `json:"userID"`
	AwsAccountID              *uuid.UUID                 `json:"awsAccountID"`
	GcpAccountID              *uuid.UUID                 `json:"gcpAccountID"`
	DoAccountID               *uuid.UUID                 `json:"doAccountID"`
	LinodeAccountID           *uuid.UUID                 `json:"linodeAccountID"`
	VultrAccountID            *uuid.UUID                 `json:"vultrAccountID"`
	AzureAccountID            *uuid.UUID                 `json:"azureAccountID"`
	CoreweaveAccountID        *uuid.UUID                 `json:"coreweaveAccountID"`
	Name                      string                     `json:"name"`
	Region                    string                     `json:"region"`
	IsExternal                *bool                      `json:"isExternal"`
	GcpClusterCreationOptions *GcpClusterCreationOptions `json:"gcpClusterCreationOptions"`
}

// GetUserID returns CreateClusterInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateClusterInput) GetUserID() uuid.UUID { return v.UserID }

// GetAwsAccountID returns CreateClusterInput.AwsAccountID, and is useful for accessing the field via an interface.
func (v *CreateClusterInput) GetAwsAccountID() *uuid.UUID { return v.AwsAccountID }

// GetGcpAccountID returns CreateClusterInput.GcpAccountID, and is useful for accessing the field via an interface.
func (v *CreateClusterInput) GetGcpAccountID() *uuid.UUID { return v.GcpAccountID }

// GetDoAccountID returns CreateClusterInput.DoAccountID, and is useful for accessing the field via an interface.
func (v *CreateClusterInput) GetDoAccountID() *uuid.UUID { return v.DoAccountID }

// GetLinodeAccountID returns CreateClusterInput.LinodeAccountID, and is useful for accessing the field via an interface.
func (v *CreateClusterInput) GetLinodeAccountID() *uuid.UUID { return v.LinodeAccountID }

// GetVultrAccountID returns CreateClusterInput.VultrAccountID, and is useful for accessing the field via an interface.
func (v *CreateClusterInput) GetVultrAccountID() *uuid.UUID { return v.VultrAccountID }

// GetAzureAccountID returns CreateClusterInput.AzureAccountID, and is useful for accessing the field via an interface.
func (v *CreateClusterInput) GetAzureAccountID() *uuid.UUID { return v.AzureAccountID }

// GetCoreweaveAccountID returns CreateClusterInput.CoreweaveAccountID, and is useful for accessing the field via an interface.
func (v *CreateClusterInput) GetCoreweaveAccountID() *uuid.UUID { return v.CoreweaveAccountID }

// GetName returns CreateClusterInput.Name, and is useful for accessing the field via an interface.
func (v *CreateClusterInput) GetName() string { return v.Name }

// GetRegion returns CreateClusterInput.Region, and is useful for accessing the field via an interface.
func (v *CreateClusterInput) GetRegion() string { return v.Region }

// GetIsExternal returns CreateClusterInput.IsExternal, and is useful for accessing the field via an interface.
func (v *CreateClusterInput) GetIsExternal() *bool { return v.IsExternal }

// GetGcpClusterCreationOptions returns CreateClusterInput.GcpClusterCreationOptions, and is useful for accessing the field via an interface.
func (v *CreateClusterInput) GetGcpClusterCreationOptions() *GcpClusterCreationOptions {
	return v.GcpClusterCreationOptions
}

type CreateDatabaseInput struct {
	UserID uuid.UUID `json:"userID"`
	Name   string    `json:"name"`
	// - v0.ProjectID or v1.GroupID
	ProjectID *uuid.UUID `json:"projectID"`
	// - v0.EnvironmentID or v1.SubGroupID
	EnvironmentID   *uuid.UUID                `json:"environmentID"`
	ProjectName     *string                   `json:"projectName"`
	EnvironmentName *string                   `json:"environmentName"`
	DeployTarget    DatabaseDeployTargetInput `json:"deployTarget"`
	Engine          DatabaseEngineType        `json:"engine"`
	Version         string                    `json:"version"`
	Options         *DatabaseOptions          `json:"options"`
}

// GetUserID returns CreateDatabaseInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateDatabaseInput) GetUserID() uuid.UUID { return v.UserID }

// GetName returns CreateDatabaseInput.Name, and is useful for accessing the field via an interface.
func (v *CreateDatabaseInput) GetName() string { return v.Name }

// GetProjectID returns CreateDatabaseInput.ProjectID, and is useful for accessing the field via an interface.
func (v *CreateDatabaseInput) GetProjectID() *uuid.UUID { return v.ProjectID }

// GetEnvironmentID returns CreateDatabaseInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *CreateDatabaseInput) GetEnvironmentID() *uuid.UUID { return v.EnvironmentID }

// GetProjectName returns CreateDatabaseInput.ProjectName, and is useful for accessing the field via an interface.
func (v *CreateDatabaseInput) GetProjectName() *string { return v.ProjectName }

// GetEnvironmentName returns CreateDatabaseInput.EnvironmentName, and is useful for accessing the field via an interface.
func (v *CreateDatabaseInput) GetEnvironmentName() *string { return v.EnvironmentName }

// GetDeployTarget returns CreateDatabaseInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *CreateDatabaseInput) GetDeployTarget() DatabaseDeployTargetInput { return v.DeployTarget }

// GetEngine returns CreateDatabaseInput.Engine, and is useful for accessing the field via an interface.
func (v *CreateDatabaseInput) GetEngine() DatabaseEngineType { return v.Engine }

// GetVersion returns CreateDatabaseInput.Version, and is useful for accessing the field via an interface.
func (v *CreateDatabaseInput) GetVersion() string { return v.Version }

// GetOptions returns CreateDatabaseInput.Options, and is useful for accessing the field via an interface.
func (v *CreateDatabaseInput) GetOptions() *DatabaseOptions { return v.Options }

type CreateDatadogIntegrationInput struct {
	UserID uuid.UUID `json:"userID"`
	ApiKey string    `json:"apiKey"`
}

// GetUserID returns CreateDatadogIntegrationInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateDatadogIntegrationInput) GetUserID() uuid.UUID { return v.UserID }

// GetApiKey returns CreateDatadogIntegrationInput.ApiKey, and is useful for accessing the field via an interface.
func (v *CreateDatadogIntegrationInput) GetApiKey() string { return v.ApiKey }

type CreateEmailIntegrationInput struct {
	UserID       uuid.UUID `json:"userID"`
	EmailAddress string    `json:"emailAddress"`
}

// GetUserID returns CreateEmailIntegrationInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateEmailIntegrationInput) GetUserID() uuid.UUID { return v.UserID }

// GetEmailAddress returns CreateEmailIntegrationInput.EmailAddress, and is useful for accessing the field via an interface.
func (v *CreateEmailIntegrationInput) GetEmailAddress() string { return v.EmailAddress }

type CreateEphemeralContainerInput struct {
	Image string `json:"image"`
}

// GetImage returns CreateEphemeralContainerInput.Image, and is useful for accessing the field via an interface.
func (v *CreateEphemeralContainerInput) GetImage() string { return v.Image }

type CreateGitlabIntegrationInput struct {
	UserID      uuid.UUID `json:"userID"`
	Name        *string   `json:"name"`
	ApiUrl      *string   `json:"apiUrl"`
	AccessToken string    `json:"accessToken"`
}

// GetUserID returns CreateGitlabIntegrationInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateGitlabIntegrationInput) GetUserID() uuid.UUID { return v.UserID }

// GetName returns CreateGitlabIntegrationInput.Name, and is useful for accessing the field via an interface.
func (v *CreateGitlabIntegrationInput) GetName() *string { return v.Name }

// GetApiUrl returns CreateGitlabIntegrationInput.ApiUrl, and is useful for accessing the field via an interface.
func (v *CreateGitlabIntegrationInput) GetApiUrl() *string { return v.ApiUrl }

// GetAccessToken returns CreateGitlabIntegrationInput.AccessToken, and is useful for accessing the field via an interface.
func (v *CreateGitlabIntegrationInput) GetAccessToken() string { return v.AccessToken }

type CreateManifestAppInput struct {
	UserID uuid.UUID `json:"userID"`
	// - v0.ProjectID or v1.GroupID
	ProjectID       *uuid.UUID `json:"projectID"`
	EnvironmentName *string    `json:"environmentName"`
	// - v0.EnvironmentID or v1.SubGroupID
	EnvironmentID    *uuid.UUID             `json:"environmentID"`
	Name             string                 `json:"name"`
	DeployTarget     ProjectDeployInput     `json:"deployTarget"`
	Namespace        *string                `json:"namespace"`
	GithubConnection *GithubConnectionInput `json:"githubConnection"`
	GitRepository    *string                `json:"gitRepository"`
	Manifests        []string               `json:"manifests"`
	ManifestValue    *string                `json:"manifestValue"`
}

// GetUserID returns CreateManifestAppInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateManifestAppInput) GetUserID() uuid.UUID { return v.UserID }

// GetProjectID returns CreateManifestAppInput.ProjectID, and is useful for accessing the field via an interface.
func (v *CreateManifestAppInput) GetProjectID() *uuid.UUID { return v.ProjectID }

// GetEnvironmentName returns CreateManifestAppInput.EnvironmentName, and is useful for accessing the field via an interface.
func (v *CreateManifestAppInput) GetEnvironmentName() *string { return v.EnvironmentName }

// GetEnvironmentID returns CreateManifestAppInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *CreateManifestAppInput) GetEnvironmentID() *uuid.UUID { return v.EnvironmentID }

// GetName returns CreateManifestAppInput.Name, and is useful for accessing the field via an interface.
func (v *CreateManifestAppInput) GetName() string { return v.Name }

// GetDeployTarget returns CreateManifestAppInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *CreateManifestAppInput) GetDeployTarget() ProjectDeployInput { return v.DeployTarget }

// GetNamespace returns CreateManifestAppInput.Namespace, and is useful for accessing the field via an interface.
func (v *CreateManifestAppInput) GetNamespace() *string { return v.Namespace }

// GetGithubConnection returns CreateManifestAppInput.GithubConnection, and is useful for accessing the field via an interface.
func (v *CreateManifestAppInput) GetGithubConnection() *GithubConnectionInput {
	return v.GithubConnection
}

// GetGitRepository returns CreateManifestAppInput.GitRepository, and is useful for accessing the field via an interface.
func (v *CreateManifestAppInput) GetGitRepository() *string { return v.GitRepository }

// GetManifests returns CreateManifestAppInput.Manifests, and is useful for accessing the field via an interface.
func (v *CreateManifestAppInput) GetManifests() []string { return v.Manifests }

// GetManifestValue returns CreateManifestAppInput.ManifestValue, and is useful for accessing the field via an interface.
func (v *CreateManifestAppInput) GetManifestValue() *string { return v.ManifestValue }

type CreateProjectDockerInput struct {
	UserID *uuid.UUID `json:"userID"`
	Name   *string    `json:"name"`
	// - v0.ProjectID or v1.GroupID
	ProjectID *uuid.UUID `json:"projectID"`
	// - v0.EnvironmentID or v1.SubGroupID
	EnvironmentID    *uuid.UUID          `json:"environmentID"`
	ProjectName      *string             `json:"projectName"`
	EnvironmentName  *string             `json:"environmentName"`
	DeployTarget     *ProjectDeployInput `json:"deployTarget"`
	DockerImage      string              `json:"dockerImage"`
	Envs             []EnvVarInput       `json:"envs"`
	Ports            *string             `json:"ports"`
	Replication      []ReplicationInput  `json:"replication"`
	Volumes          *string             `json:"volumes"`
	Cpu              *string             `json:"cpu"`
	Memory           *string             `json:"memory"`
	EphemeralStorage *float64            `json:"ephemeralStorage"`
	Dedicated        *bool               `json:"dedicated"`
	Gpu              *string             `json:"gpu"`
	Enabled          *bool               `json:"enabled"`
	TeamID           *uuid.UUID          `json:"teamID"`
}

// GetUserID returns CreateProjectDockerInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetUserID() *uuid.UUID { return v.UserID }

// GetName returns CreateProjectDockerInput.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetName() *string { return v.Name }

// GetProjectID returns CreateProjectDockerInput.ProjectID, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetProjectID() *uuid.UUID { return v.ProjectID }

// GetEnvironmentID returns CreateProjectDockerInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetEnvironmentID() *uuid.UUID { return v.EnvironmentID }

// GetProjectName returns CreateProjectDockerInput.ProjectName, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetProjectName() *string { return v.ProjectName }

// GetEnvironmentName returns CreateProjectDockerInput.EnvironmentName, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetEnvironmentName() *string { return v.EnvironmentName }

// GetDeployTarget returns CreateProjectDockerInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetDeployTarget() *ProjectDeployInput { return v.DeployTarget }

// GetDockerImage returns CreateProjectDockerInput.DockerImage, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetDockerImage() string { return v.DockerImage }

// GetEnvs returns CreateProjectDockerInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetEnvs() []EnvVarInput { return v.Envs }

// GetPorts returns CreateProjectDockerInput.Ports, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetPorts() *string { return v.Ports }

// GetReplication returns CreateProjectDockerInput.Replication, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetReplication() []ReplicationInput { return v.Replication }

// GetVolumes returns CreateProjectDockerInput.Volumes, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetVolumes() *string { return v.Volumes }

// GetCpu returns CreateProjectDockerInput.Cpu, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetCpu() *string { return v.Cpu }

// GetMemory returns CreateProjectDockerInput.Memory, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetMemory() *string { return v.Memory }

// GetEphemeralStorage returns CreateProjectDockerInput.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetEphemeralStorage() *float64 { return v.EphemeralStorage }

// GetDedicated returns CreateProjectDockerInput.Dedicated, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetDedicated() *bool { return v.Dedicated }

// GetGpu returns CreateProjectDockerInput.Gpu, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetGpu() *string { return v.Gpu }

// GetEnabled returns CreateProjectDockerInput.Enabled, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetEnabled() *bool { return v.Enabled }

// GetTeamID returns CreateProjectDockerInput.TeamID, and is useful for accessing the field via an interface.
func (v *CreateProjectDockerInput) GetTeamID() *uuid.UUID { return v.TeamID }

type CreateProjectEnvironmentInput struct {
	// - v0.ProjectID or v1.GroupID
	ProjectID uuid.UUID   `json:"projectID"`
	Name      string      `json:"name"`
	Repos     []uuid.UUID `json:"repos"`
}

// GetProjectID returns CreateProjectEnvironmentInput.ProjectID, and is useful for accessing the field via an interface.
func (v *CreateProjectEnvironmentInput) GetProjectID() uuid.UUID { return v.ProjectID }

// GetName returns CreateProjectEnvironmentInput.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectEnvironmentInput) GetName() string { return v.Name }

// GetRepos returns CreateProjectEnvironmentInput.Repos, and is useful for accessing the field via an interface.
func (v *CreateProjectEnvironmentInput) GetRepos() []uuid.UUID { return v.Repos }

type CreateProjectFromProjectTemplateInput struct {
	Id           uuid.UUID           `json:"id"`
	DeployTarget *ProjectDeployInput `json:"deployTarget"`
	Envs         []EnvVarInput       `json:"envs"`
}

// GetId returns CreateProjectFromProjectTemplateInput.Id, and is useful for accessing the field via an interface.
func (v *CreateProjectFromProjectTemplateInput) GetId() uuid.UUID { return v.Id }

// GetDeployTarget returns CreateProjectFromProjectTemplateInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *CreateProjectFromProjectTemplateInput) GetDeployTarget() *ProjectDeployInput {
	return v.DeployTarget
}

// GetEnvs returns CreateProjectFromProjectTemplateInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateProjectFromProjectTemplateInput) GetEnvs() []EnvVarInput { return v.Envs }

type CreateProjectGitInput struct {
	UserID *uuid.UUID `json:"userID"`
	Name   *string    `json:"name"`
	// - v0.ProjectID or v1.GroupID
	ProjectID *uuid.UUID `json:"projectID"`
	// - v0.EnvironmentID or v1.SubGroupID
	EnvironmentID                 *uuid.UUID                   `json:"environmentID"`
	ProjectName                   *string                      `json:"projectName"`
	EnvironmentName               *string                      `json:"environmentName"`
	Url                           string                       `json:"url"`
	ProductionBranch              *string                      `json:"productionBranch"`
	BuildTarget                   *BuildTargetInput            `json:"buildTarget"`
	DeployTarget                  *ProjectDeployInput          `json:"deployTarget"`
	Build                         *ProjectBuildInput           `json:"build"`
	DeployService                 *bool                        `json:"deployService"`
	DeployJob                     *bool                        `json:"deployJob"`
	ManualDeploy                  *bool                        `json:"manualDeploy"`
	AutoRetry                     *bool                        `json:"autoRetry"`
	AutoRollback                  *bool                        `json:"autoRollback"`
	DeployBranch                  *bool                        `json:"deployBranch"`
	BranchIgnore                  *string                      `json:"branchIgnore"`
	ContainerRepository           *string                      `json:"containerRepository"`
	ContainerCacheRepository      *string                      `json:"containerCacheRepository"`
	ContainerRegistryID           *uuid.UUID                   `json:"containerRegistryID"`
	Resources                     *ContainerResourcesSpecInput `json:"resources"`
	BuildResources                *ContainerResourcesSpecInput `json:"buildResources"`
	BranchResources               *ContainerResourcesSpecInput `json:"branchResources"`
	Envs                          []EnvVarInput                `json:"envs"`
	Ports                         []PortInput                  `json:"ports"`
	Volumes                       []VolumeInput                `json:"volumes"`
	Replication                   []ReplicationInput           `json:"replication"`
	RunCommand                    *string                      `json:"runCommand"`
	LogShipper                    *LogShipperInput             `json:"logShipper"`
	DeployStrategy                *DeployStrategy              `json:"deployStrategy"`
	Autoscaling                   *AutoscalingInput            `json:"autoscaling"`
	PreStopSleep                  *int                         `json:"preStopSleep"`
	TerminationGracePeriodSeconds *int                         `json:"terminationGracePeriodSeconds"`
	PrometheusScrape              *PrometheusScrapeInput       `json:"prometheusScrape"`
	ReadinessProbe                *ProbeInput                  `json:"readinessProbe"`
	LivenessProbe                 *ProbeInput                  `json:"livenessProbe"`
	StartupProbe                  *ProbeInput                  `json:"startupProbe"`
	ClusterIssuerName             *string                      `json:"clusterIssuerName"`
	HostNetwork                   *bool                        `json:"hostNetwork"`
	StaticIP                      *bool                        `json:"staticIP"`
	NodeSelector                  *string                      `json:"nodeSelector"`
	NoBuildCache                  *bool                        `json:"noBuildCache"`
	KanikoFlags                   *KanikoFlagsInput            `json:"kanikoFlags"`
	DatadogApmEnabled             *bool                        `json:"datadogApmEnabled"`
	Enabled                       *bool                        `json:"enabled"`
	PipelineClusterID             *uuid.UUID                   `json:"pipelineClusterID"`
	Path                          *string                      `json:"path"`
}

// GetUserID returns CreateProjectGitInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetUserID() *uuid.UUID { return v.UserID }

// GetName returns CreateProjectGitInput.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetName() *string { return v.Name }

// GetProjectID returns CreateProjectGitInput.ProjectID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetProjectID() *uuid.UUID { return v.ProjectID }

// GetEnvironmentID returns CreateProjectGitInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetEnvironmentID() *uuid.UUID { return v.EnvironmentID }

// GetProjectName returns CreateProjectGitInput.ProjectName, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetProjectName() *string { return v.ProjectName }

// GetEnvironmentName returns CreateProjectGitInput.EnvironmentName, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetEnvironmentName() *string { return v.EnvironmentName }

// GetUrl returns CreateProjectGitInput.Url, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetUrl() string { return v.Url }

// GetProductionBranch returns CreateProjectGitInput.ProductionBranch, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetProductionBranch() *string { return v.ProductionBranch }

// GetBuildTarget returns CreateProjectGitInput.BuildTarget, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBuildTarget() *BuildTargetInput { return v.BuildTarget }

// GetDeployTarget returns CreateProjectGitInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployTarget() *ProjectDeployInput { return v.DeployTarget }

// GetBuild returns CreateProjectGitInput.Build, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBuild() *ProjectBuildInput { return v.Build }

// GetDeployService returns CreateProjectGitInput.DeployService, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployService() *bool { return v.DeployService }

// GetDeployJob returns CreateProjectGitInput.DeployJob, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployJob() *bool { return v.DeployJob }

// GetManualDeploy returns CreateProjectGitInput.ManualDeploy, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetManualDeploy() *bool { return v.ManualDeploy }

// GetAutoRetry returns CreateProjectGitInput.AutoRetry, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetAutoRetry() *bool { return v.AutoRetry }

// GetAutoRollback returns CreateProjectGitInput.AutoRollback, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetAutoRollback() *bool { return v.AutoRollback }

// GetDeployBranch returns CreateProjectGitInput.DeployBranch, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployBranch() *bool { return v.DeployBranch }

// GetBranchIgnore returns CreateProjectGitInput.BranchIgnore, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBranchIgnore() *string { return v.BranchIgnore }

// GetContainerRepository returns CreateProjectGitInput.ContainerRepository, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetContainerRepository() *string { return v.ContainerRepository }

// GetContainerCacheRepository returns CreateProjectGitInput.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetContainerCacheRepository() *string {
	return v.ContainerCacheRepository
}

// GetContainerRegistryID returns CreateProjectGitInput.ContainerRegistryID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetContainerRegistryID() *uuid.UUID { return v.ContainerRegistryID }

// GetResources returns CreateProjectGitInput.Resources, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetResources() *ContainerResourcesSpecInput { return v.Resources }

// GetBuildResources returns CreateProjectGitInput.BuildResources, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBuildResources() *ContainerResourcesSpecInput {
	return v.BuildResources
}

// GetBranchResources returns CreateProjectGitInput.BranchResources, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetBranchResources() *ContainerResourcesSpecInput {
	return v.BranchResources
}

// GetEnvs returns CreateProjectGitInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetEnvs() []EnvVarInput { return v.Envs }

// GetPorts returns CreateProjectGitInput.Ports, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPorts() []PortInput { return v.Ports }

// GetVolumes returns CreateProjectGitInput.Volumes, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetVolumes() []VolumeInput { return v.Volumes }

// GetReplication returns CreateProjectGitInput.Replication, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetReplication() []ReplicationInput { return v.Replication }

// GetRunCommand returns CreateProjectGitInput.RunCommand, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetRunCommand() *string { return v.RunCommand }

// GetLogShipper returns CreateProjectGitInput.LogShipper, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetLogShipper() *LogShipperInput { return v.LogShipper }

// GetDeployStrategy returns CreateProjectGitInput.DeployStrategy, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDeployStrategy() *DeployStrategy { return v.DeployStrategy }

// GetAutoscaling returns CreateProjectGitInput.Autoscaling, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetAutoscaling() *AutoscalingInput { return v.Autoscaling }

// GetPreStopSleep returns CreateProjectGitInput.PreStopSleep, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPreStopSleep() *int { return v.PreStopSleep }

// GetTerminationGracePeriodSeconds returns CreateProjectGitInput.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetTerminationGracePeriodSeconds() *int {
	return v.TerminationGracePeriodSeconds
}

// GetPrometheusScrape returns CreateProjectGitInput.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPrometheusScrape() *PrometheusScrapeInput {
	return v.PrometheusScrape
}

// GetReadinessProbe returns CreateProjectGitInput.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetReadinessProbe() *ProbeInput { return v.ReadinessProbe }

// GetLivenessProbe returns CreateProjectGitInput.LivenessProbe, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetLivenessProbe() *ProbeInput { return v.LivenessProbe }

// GetStartupProbe returns CreateProjectGitInput.StartupProbe, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetStartupProbe() *ProbeInput { return v.StartupProbe }

// GetClusterIssuerName returns CreateProjectGitInput.ClusterIssuerName, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetClusterIssuerName() *string { return v.ClusterIssuerName }

// GetHostNetwork returns CreateProjectGitInput.HostNetwork, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetHostNetwork() *bool { return v.HostNetwork }

// GetStaticIP returns CreateProjectGitInput.StaticIP, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetStaticIP() *bool { return v.StaticIP }

// GetNodeSelector returns CreateProjectGitInput.NodeSelector, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetNodeSelector() *string { return v.NodeSelector }

// GetNoBuildCache returns CreateProjectGitInput.NoBuildCache, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetNoBuildCache() *bool { return v.NoBuildCache }

// GetKanikoFlags returns CreateProjectGitInput.KanikoFlags, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetKanikoFlags() *KanikoFlagsInput { return v.KanikoFlags }

// GetDatadogApmEnabled returns CreateProjectGitInput.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetDatadogApmEnabled() *bool { return v.DatadogApmEnabled }

// GetEnabled returns CreateProjectGitInput.Enabled, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetEnabled() *bool { return v.Enabled }

// GetPipelineClusterID returns CreateProjectGitInput.PipelineClusterID, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPipelineClusterID() *uuid.UUID { return v.PipelineClusterID }

// GetPath returns CreateProjectGitInput.Path, and is useful for accessing the field via an interface.
func (v *CreateProjectGitInput) GetPath() *string { return v.Path }

type CreateProjectHelmInput struct {
	UserID uuid.UUID `json:"userID"`
	// - v0.ProjectID or v1.GroupID
	ProjectID       *uuid.UUID `json:"projectID"`
	EnvironmentName *string    `json:"environmentName"`
	// - v0.EnvironmentID or v1.SubGroupID
	EnvironmentID    *uuid.UUID             `json:"environmentID"`
	Name             string                 `json:"name"`
	DeployTarget     ProjectDeployInput     `json:"deployTarget"`
	Namespace        *string                `json:"namespace"`
	ReleaseName      string                 `json:"releaseName"`
	Repository       *string                `json:"repository"`
	Chart            *string                `json:"chart"`
	GithubConnection *GithubConnectionInput `json:"githubConnection"`
	GitRepository    *string                `json:"gitRepository"`
	GitReference     *string                `json:"gitReference"`
	WorkingDirectory *string                `json:"workingDirectory"`
	Values           *string                `json:"values"`
	ValuesRef        *string                `json:"valuesRef"`
	Enabled          *bool                  `json:"enabled"`
}

// GetUserID returns CreateProjectHelmInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetUserID() uuid.UUID { return v.UserID }

// GetProjectID returns CreateProjectHelmInput.ProjectID, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetProjectID() *uuid.UUID { return v.ProjectID }

// GetEnvironmentName returns CreateProjectHelmInput.EnvironmentName, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetEnvironmentName() *string { return v.EnvironmentName }

// GetEnvironmentID returns CreateProjectHelmInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetEnvironmentID() *uuid.UUID { return v.EnvironmentID }

// GetName returns CreateProjectHelmInput.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetName() string { return v.Name }

// GetDeployTarget returns CreateProjectHelmInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetDeployTarget() ProjectDeployInput { return v.DeployTarget }

// GetNamespace returns CreateProjectHelmInput.Namespace, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetNamespace() *string { return v.Namespace }

// GetReleaseName returns CreateProjectHelmInput.ReleaseName, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetReleaseName() string { return v.ReleaseName }

// GetRepository returns CreateProjectHelmInput.Repository, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetRepository() *string { return v.Repository }

// GetChart returns CreateProjectHelmInput.Chart, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetChart() *string { return v.Chart }

// GetGithubConnection returns CreateProjectHelmInput.GithubConnection, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetGithubConnection() *GithubConnectionInput {
	return v.GithubConnection
}

// GetGitRepository returns CreateProjectHelmInput.GitRepository, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetGitRepository() *string { return v.GitRepository }

// GetGitReference returns CreateProjectHelmInput.GitReference, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetGitReference() *string { return v.GitReference }

// GetWorkingDirectory returns CreateProjectHelmInput.WorkingDirectory, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetWorkingDirectory() *string { return v.WorkingDirectory }

// GetValues returns CreateProjectHelmInput.Values, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetValues() *string { return v.Values }

// GetValuesRef returns CreateProjectHelmInput.ValuesRef, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetValuesRef() *string { return v.ValuesRef }

// GetEnabled returns CreateProjectHelmInput.Enabled, and is useful for accessing the field via an interface.
func (v *CreateProjectHelmInput) GetEnabled() *bool { return v.Enabled }

type CreateProjectInput struct {
	UserID *uuid.UUID `json:"userID"`
	Name   *string    `json:"name"`
	// - v0.ProjectID or v1.GroupID
	ProjectID *uuid.UUID `json:"projectID"`
	// - v0.EnvironmentID or v1.SubGroupID
	EnvironmentID            *uuid.UUID                   `json:"environmentID"`
	ProjectName              *string                      `json:"projectName"`
	EnvironmentName          *string                      `json:"environmentName"`
	Installation             *uuid.UUID                   `json:"installation"`
	Owner                    *string                      `json:"owner"`
	Repo                     *string                      `json:"repo"`
	GitRepository            *string                      `json:"gitRepository"`
	GithubConnection         *GithubConnectionInput       `json:"githubConnection"`
	GitlabConnection         *GitlabConnectionInput       `json:"gitlabConnection"`
	BuildTarget              *BuildTargetInput            `json:"buildTarget"`
	DeployTarget             *ProjectDeployInput          `json:"deployTarget"`
	ProductionBranch         *string                      `json:"productionBranch"`
	DeployService            *bool                        `json:"deployService"`
	DeployJob                *bool                        `json:"deployJob"`
	ManualDeploy             *bool                        `json:"manualDeploy"`
	AutoRetry                *bool                        `json:"autoRetry"`
	AutoRollback             *bool                        `json:"autoRollback"`
	DeployBranch             *bool                        `json:"deployBranch"`
	BranchIgnore             *string                      `json:"branchIgnore"`
	ContainerRepository      *string                      `json:"containerRepository"`
	ContainerCacheRepository *string                      `json:"containerCacheRepository"`
	ContainerRegistryID      *uuid.UUID                   `json:"containerRegistryID"`
	Resources                *ContainerResourcesSpecInput `json:"resources"`
	BuildResources           *ContainerResourcesSpecInput `json:"buildResources"`
	BranchResources          *ContainerResourcesSpecInput `json:"branchResources"`
	Envs                     []EnvVarInput                `json:"envs"`
	Ports                    *string                      `json:"ports"`
	Replication              []ReplicationInput           `json:"replication"`
	Volumes                  *string                      `json:"volumes"`
	Cpu                      *string                      `json:"cpu"`
	Memory                   *string                      `json:"memory"`
	Dedicated                *bool                        `json:"dedicated"`
	Gpu                      *string                      `json:"gpu"`
	BuildCommand             *string                      `json:"buildCommand"`
	BuildType                *string                      `json:"buildType"`
	RunCommand               *string                      `json:"runCommand"`
	StaticPath               *string                      `json:"staticPath"`
	Enabled                  *bool                        `json:"enabled"`
	TeamID                   *uuid.UUID                   `json:"teamID"`
}

// GetUserID returns CreateProjectInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetUserID() *uuid.UUID { return v.UserID }

// GetName returns CreateProjectInput.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetName() *string { return v.Name }

// GetProjectID returns CreateProjectInput.ProjectID, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetProjectID() *uuid.UUID { return v.ProjectID }

// GetEnvironmentID returns CreateProjectInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetEnvironmentID() *uuid.UUID { return v.EnvironmentID }

// GetProjectName returns CreateProjectInput.ProjectName, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetProjectName() *string { return v.ProjectName }

// GetEnvironmentName returns CreateProjectInput.EnvironmentName, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetEnvironmentName() *string { return v.EnvironmentName }

// GetInstallation returns CreateProjectInput.Installation, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetInstallation() *uuid.UUID { return v.Installation }

// GetOwner returns CreateProjectInput.Owner, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetOwner() *string { return v.Owner }

// GetRepo returns CreateProjectInput.Repo, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetRepo() *string { return v.Repo }

// GetGitRepository returns CreateProjectInput.GitRepository, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetGitRepository() *string { return v.GitRepository }

// GetGithubConnection returns CreateProjectInput.GithubConnection, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetGithubConnection() *GithubConnectionInput { return v.GithubConnection }

// GetGitlabConnection returns CreateProjectInput.GitlabConnection, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetGitlabConnection() *GitlabConnectionInput { return v.GitlabConnection }

// GetBuildTarget returns CreateProjectInput.BuildTarget, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetBuildTarget() *BuildTargetInput { return v.BuildTarget }

// GetDeployTarget returns CreateProjectInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetDeployTarget() *ProjectDeployInput { return v.DeployTarget }

// GetProductionBranch returns CreateProjectInput.ProductionBranch, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetProductionBranch() *string { return v.ProductionBranch }

// GetDeployService returns CreateProjectInput.DeployService, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetDeployService() *bool { return v.DeployService }

// GetDeployJob returns CreateProjectInput.DeployJob, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetDeployJob() *bool { return v.DeployJob }

// GetManualDeploy returns CreateProjectInput.ManualDeploy, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetManualDeploy() *bool { return v.ManualDeploy }

// GetAutoRetry returns CreateProjectInput.AutoRetry, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetAutoRetry() *bool { return v.AutoRetry }

// GetAutoRollback returns CreateProjectInput.AutoRollback, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetAutoRollback() *bool { return v.AutoRollback }

// GetDeployBranch returns CreateProjectInput.DeployBranch, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetDeployBranch() *bool { return v.DeployBranch }

// GetBranchIgnore returns CreateProjectInput.BranchIgnore, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetBranchIgnore() *string { return v.BranchIgnore }

// GetContainerRepository returns CreateProjectInput.ContainerRepository, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetContainerRepository() *string { return v.ContainerRepository }

// GetContainerCacheRepository returns CreateProjectInput.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetContainerCacheRepository() *string { return v.ContainerCacheRepository }

// GetContainerRegistryID returns CreateProjectInput.ContainerRegistryID, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetContainerRegistryID() *uuid.UUID { return v.ContainerRegistryID }

// GetResources returns CreateProjectInput.Resources, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetResources() *ContainerResourcesSpecInput { return v.Resources }

// GetBuildResources returns CreateProjectInput.BuildResources, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetBuildResources() *ContainerResourcesSpecInput {
	return v.BuildResources
}

// GetBranchResources returns CreateProjectInput.BranchResources, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetBranchResources() *ContainerResourcesSpecInput {
	return v.BranchResources
}

// GetEnvs returns CreateProjectInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetEnvs() []EnvVarInput { return v.Envs }

// GetPorts returns CreateProjectInput.Ports, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetPorts() *string { return v.Ports }

// GetReplication returns CreateProjectInput.Replication, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetReplication() []ReplicationInput { return v.Replication }

// GetVolumes returns CreateProjectInput.Volumes, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetVolumes() *string { return v.Volumes }

// GetCpu returns CreateProjectInput.Cpu, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetCpu() *string { return v.Cpu }

// GetMemory returns CreateProjectInput.Memory, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetMemory() *string { return v.Memory }

// GetDedicated returns CreateProjectInput.Dedicated, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetDedicated() *bool { return v.Dedicated }

// GetGpu returns CreateProjectInput.Gpu, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetGpu() *string { return v.Gpu }

// GetBuildCommand returns CreateProjectInput.BuildCommand, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetBuildCommand() *string { return v.BuildCommand }

// GetBuildType returns CreateProjectInput.BuildType, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetBuildType() *string { return v.BuildType }

// GetRunCommand returns CreateProjectInput.RunCommand, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetRunCommand() *string { return v.RunCommand }

// GetStaticPath returns CreateProjectInput.StaticPath, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetStaticPath() *string { return v.StaticPath }

// GetEnabled returns CreateProjectInput.Enabled, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetEnabled() *bool { return v.Enabled }

// GetTeamID returns CreateProjectInput.TeamID, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetTeamID() *uuid.UUID { return v.TeamID }

type CreateProjectTerraformInput struct {
	UserID           uuid.UUID              `json:"userID"`
	Name             string                 `json:"name"`
	DeployTarget     ProjectDeployInput     `json:"deployTarget"`
	GithubConnection *GithubConnectionInput `json:"githubConnection"`
	GitRepository    *string                `json:"gitRepository"`
	GitReference     *string                `json:"gitReference"`
	WorkingDirectory *string                `json:"workingDirectory"`
	Variables        *string                `json:"variables"`
	Envs             []EnvVarInput          `json:"envs"`
	TerraformVersion *string                `json:"terraformVersion"`
	ManualApproval   *bool                  `json:"manualApproval"`
	Enabled          *bool                  `json:"enabled"`
}

// GetUserID returns CreateProjectTerraformInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateProjectTerraformInput) GetUserID() uuid.UUID { return v.UserID }

// GetName returns CreateProjectTerraformInput.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectTerraformInput) GetName() string { return v.Name }

// GetDeployTarget returns CreateProjectTerraformInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *CreateProjectTerraformInput) GetDeployTarget() ProjectDeployInput { return v.DeployTarget }

// GetGithubConnection returns CreateProjectTerraformInput.GithubConnection, and is useful for accessing the field via an interface.
func (v *CreateProjectTerraformInput) GetGithubConnection() *GithubConnectionInput {
	return v.GithubConnection
}

// GetGitRepository returns CreateProjectTerraformInput.GitRepository, and is useful for accessing the field via an interface.
func (v *CreateProjectTerraformInput) GetGitRepository() *string { return v.GitRepository }

// GetGitReference returns CreateProjectTerraformInput.GitReference, and is useful for accessing the field via an interface.
func (v *CreateProjectTerraformInput) GetGitReference() *string { return v.GitReference }

// GetWorkingDirectory returns CreateProjectTerraformInput.WorkingDirectory, and is useful for accessing the field via an interface.
func (v *CreateProjectTerraformInput) GetWorkingDirectory() *string { return v.WorkingDirectory }

// GetVariables returns CreateProjectTerraformInput.Variables, and is useful for accessing the field via an interface.
func (v *CreateProjectTerraformInput) GetVariables() *string { return v.Variables }

// GetEnvs returns CreateProjectTerraformInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateProjectTerraformInput) GetEnvs() []EnvVarInput { return v.Envs }

// GetTerraformVersion returns CreateProjectTerraformInput.TerraformVersion, and is useful for accessing the field via an interface.
func (v *CreateProjectTerraformInput) GetTerraformVersion() *string { return v.TerraformVersion }

// GetManualApproval returns CreateProjectTerraformInput.ManualApproval, and is useful for accessing the field via an interface.
func (v *CreateProjectTerraformInput) GetManualApproval() *bool { return v.ManualApproval }

// GetEnabled returns CreateProjectTerraformInput.Enabled, and is useful for accessing the field via an interface.
func (v *CreateProjectTerraformInput) GetEnabled() *bool { return v.Enabled }

type CreateProjectV3Input struct {
	BlueprintID              uuid.UUID                               `json:"blueprintID"`
	UserID                   uuid.UUID                               `json:"userID"`
	Name                     string                                  `json:"name"`
	RequirePlanApproval      *bool                                   `json:"requirePlanApproval"`
	BlueprintConfiguration   *BlueprintConfigurationInput            `json:"blueprintConfiguration"`
	Variables                []BlueprintVariableInput                `json:"variables"`
	TerraformConfiguration   *TerraformProjectV3ConfigurationInput   `json:"terraformConfiguration"`
	ManifestConfiguration    *ManifestProjectV3ConfigurationInput    `json:"manifestConfiguration"`
	HelmConfiguration        *HelmProjectV3ConfigurationInput        `json:"helmConfiguration"`
	AwsSamConfiguration      *AwsSamProjectV3ConfigurationInput      `json:"awsSamConfiguration"`
	GcpCloudRunConfiguration *GcpCloudRunProjectV3ConfigurationInput `json:"gcpCloudRunConfiguration"`
	// - v0.ProjectID or v1.GroupID
	ProjectID   *uuid.UUID `json:"projectID"`
	ProjectName *string    `json:"projectName"`
	// - v0.EnvironmentID or v1.SubGroupID
	EnvironmentID   *uuid.UUID `json:"environmentID"`
	EnvironmentName *string    `json:"environmentName"`
	IsDeployV2      *bool      `json:"isDeployV2"`
}

// GetBlueprintID returns CreateProjectV3Input.BlueprintID, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetBlueprintID() uuid.UUID { return v.BlueprintID }

// GetUserID returns CreateProjectV3Input.UserID, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetUserID() uuid.UUID { return v.UserID }

// GetName returns CreateProjectV3Input.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetName() string { return v.Name }

// GetRequirePlanApproval returns CreateProjectV3Input.RequirePlanApproval, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetRequirePlanApproval() *bool { return v.RequirePlanApproval }

// GetBlueprintConfiguration returns CreateProjectV3Input.BlueprintConfiguration, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetBlueprintConfiguration() *BlueprintConfigurationInput {
	return v.BlueprintConfiguration
}

// GetVariables returns CreateProjectV3Input.Variables, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetVariables() []BlueprintVariableInput { return v.Variables }

// GetTerraformConfiguration returns CreateProjectV3Input.TerraformConfiguration, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetTerraformConfiguration() *TerraformProjectV3ConfigurationInput {
	return v.TerraformConfiguration
}

// GetManifestConfiguration returns CreateProjectV3Input.ManifestConfiguration, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetManifestConfiguration() *ManifestProjectV3ConfigurationInput {
	return v.ManifestConfiguration
}

// GetHelmConfiguration returns CreateProjectV3Input.HelmConfiguration, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetHelmConfiguration() *HelmProjectV3ConfigurationInput {
	return v.HelmConfiguration
}

// GetAwsSamConfiguration returns CreateProjectV3Input.AwsSamConfiguration, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetAwsSamConfiguration() *AwsSamProjectV3ConfigurationInput {
	return v.AwsSamConfiguration
}

// GetGcpCloudRunConfiguration returns CreateProjectV3Input.GcpCloudRunConfiguration, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetGcpCloudRunConfiguration() *GcpCloudRunProjectV3ConfigurationInput {
	return v.GcpCloudRunConfiguration
}

// GetProjectID returns CreateProjectV3Input.ProjectID, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetProjectID() *uuid.UUID { return v.ProjectID }

// GetProjectName returns CreateProjectV3Input.ProjectName, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetProjectName() *string { return v.ProjectName }

// GetEnvironmentID returns CreateProjectV3Input.EnvironmentID, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetEnvironmentID() *uuid.UUID { return v.EnvironmentID }

// GetEnvironmentName returns CreateProjectV3Input.EnvironmentName, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetEnvironmentName() *string { return v.EnvironmentName }

// GetIsDeployV2 returns CreateProjectV3Input.IsDeployV2, and is useful for accessing the field via an interface.
func (v *CreateProjectV3Input) GetIsDeployV2() *bool { return v.IsDeployV2 }

type CreateProjectsFromTemplateInput struct {
	Id       uuid.UUID                               `json:"id"`
	UserID   *uuid.UUID                              `json:"userID"`
	Name     *string                                 `json:"name"`
	Projects []CreateProjectFromProjectTemplateInput `json:"projects"`
}

// GetId returns CreateProjectsFromTemplateInput.Id, and is useful for accessing the field via an interface.
func (v *CreateProjectsFromTemplateInput) GetId() uuid.UUID { return v.Id }

// GetUserID returns CreateProjectsFromTemplateInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateProjectsFromTemplateInput) GetUserID() *uuid.UUID { return v.UserID }

// GetName returns CreateProjectsFromTemplateInput.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectsFromTemplateInput) GetName() *string { return v.Name }

// GetProjects returns CreateProjectsFromTemplateInput.Projects, and is useful for accessing the field via an interface.
func (v *CreateProjectsFromTemplateInput) GetProjects() []CreateProjectFromProjectTemplateInput {
	return v.Projects
}

type CreateRepoPipelineLinkInput struct {
	SourceRepoID        uuid.UUID  `json:"sourceRepoID"`
	SourceEvent         RepoEvent  `json:"sourceEvent"`
	TargetRepoID        *uuid.UUID `json:"targetRepoID"`
	TargetEnvironmentID *uuid.UUID `json:"targetEnvironmentID"`
	TargetAction        RepoAction `json:"targetAction"`
}

// GetSourceRepoID returns CreateRepoPipelineLinkInput.SourceRepoID, and is useful for accessing the field via an interface.
func (v *CreateRepoPipelineLinkInput) GetSourceRepoID() uuid.UUID { return v.SourceRepoID }

// GetSourceEvent returns CreateRepoPipelineLinkInput.SourceEvent, and is useful for accessing the field via an interface.
func (v *CreateRepoPipelineLinkInput) GetSourceEvent() RepoEvent { return v.SourceEvent }

// GetTargetRepoID returns CreateRepoPipelineLinkInput.TargetRepoID, and is useful for accessing the field via an interface.
func (v *CreateRepoPipelineLinkInput) GetTargetRepoID() *uuid.UUID { return v.TargetRepoID }

// GetTargetEnvironmentID returns CreateRepoPipelineLinkInput.TargetEnvironmentID, and is useful for accessing the field via an interface.
func (v *CreateRepoPipelineLinkInput) GetTargetEnvironmentID() *uuid.UUID {
	return v.TargetEnvironmentID
}

// GetTargetAction returns CreateRepoPipelineLinkInput.TargetAction, and is useful for accessing the field via an interface.
func (v *CreateRepoPipelineLinkInput) GetTargetAction() RepoAction { return v.TargetAction }

type CreateResourceAlphaInput struct {
	UserID uuid.UUID `json:"userID"`
	// - v0.ProjectID or v1.GroupID
	ProjectID   *uuid.UUID `json:"projectID"`
	ProjectName *string    `json:"projectName"`
	// - v0.EnvironmentID or v1.SubGroupID
	EnvironmentID   *uuid.UUID               `json:"environmentID"`
	EnvironmentName *string                  `json:"environmentName"`
	Name            string                   `json:"name"`
	AppID           *string                  `json:"appID"`
	Enabled         *bool                    `json:"enabled"`
	Workflow        *ResourceWorkflowInput   `json:"workflow"`
	Branch          *ResourceBranchInput     `json:"branch"`
	Source          *SourceInput             `json:"source"`
	Build           *ResourceBuildInput      `json:"build"`
	Kubernetes      *ResourceKubernetesInput `json:"kubernetes"`
	Serverless      *ResourceServerlessInput `json:"serverless"`
	Terraform       *ResourceTerraformInput  `json:"terraform"`
	Database        *ResourceDatabaseInput   `json:"database"`
	BlueprintID     *uuid.UUID               `json:"blueprintID"`
}

// GetUserID returns CreateResourceAlphaInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetUserID() uuid.UUID { return v.UserID }

// GetProjectID returns CreateResourceAlphaInput.ProjectID, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetProjectID() *uuid.UUID { return v.ProjectID }

// GetProjectName returns CreateResourceAlphaInput.ProjectName, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetProjectName() *string { return v.ProjectName }

// GetEnvironmentID returns CreateResourceAlphaInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetEnvironmentID() *uuid.UUID { return v.EnvironmentID }

// GetEnvironmentName returns CreateResourceAlphaInput.EnvironmentName, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetEnvironmentName() *string { return v.EnvironmentName }

// GetName returns CreateResourceAlphaInput.Name, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetName() string { return v.Name }

// GetAppID returns CreateResourceAlphaInput.AppID, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetAppID() *string { return v.AppID }

// GetEnabled returns CreateResourceAlphaInput.Enabled, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetEnabled() *bool { return v.Enabled }

// GetWorkflow returns CreateResourceAlphaInput.Workflow, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetWorkflow() *ResourceWorkflowInput { return v.Workflow }

// GetBranch returns CreateResourceAlphaInput.Branch, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetBranch() *ResourceBranchInput { return v.Branch }

// GetSource returns CreateResourceAlphaInput.Source, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetSource() *SourceInput { return v.Source }

// GetBuild returns CreateResourceAlphaInput.Build, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetBuild() *ResourceBuildInput { return v.Build }

// GetKubernetes returns CreateResourceAlphaInput.Kubernetes, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetKubernetes() *ResourceKubernetesInput { return v.Kubernetes }

// GetServerless returns CreateResourceAlphaInput.Serverless, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetServerless() *ResourceServerlessInput { return v.Serverless }

// GetTerraform returns CreateResourceAlphaInput.Terraform, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetTerraform() *ResourceTerraformInput { return v.Terraform }

// GetDatabase returns CreateResourceAlphaInput.Database, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetDatabase() *ResourceDatabaseInput { return v.Database }

// GetBlueprintID returns CreateResourceAlphaInput.BlueprintID, and is useful for accessing the field via an interface.
func (v *CreateResourceAlphaInput) GetBlueprintID() *uuid.UUID { return v.BlueprintID }

type CreateTeamInput struct {
	Name          string             `json:"name"`
	Login         *string            `json:"login"`
	BillingEmail  string             `json:"billingEmail"`
	Avatar        *string            `json:"avatar"`
	PaymentMethod *string            `json:"paymentMethod"`
	Tier          *PlanTier          `json:"tier"`
	BillingPeriod *PlanBillingPeriod `json:"billingPeriod"`
}

// GetName returns CreateTeamInput.Name, and is useful for accessing the field via an interface.
func (v *CreateTeamInput) GetName() string { return v.Name }

// GetLogin returns CreateTeamInput.Login, and is useful for accessing the field via an interface.
func (v *CreateTeamInput) GetLogin() *string { return v.Login }

// GetBillingEmail returns CreateTeamInput.BillingEmail, and is useful for accessing the field via an interface.
func (v *CreateTeamInput) GetBillingEmail() string { return v.BillingEmail }

// GetAvatar returns CreateTeamInput.Avatar, and is useful for accessing the field via an interface.
func (v *CreateTeamInput) GetAvatar() *string { return v.Avatar }

// GetPaymentMethod returns CreateTeamInput.PaymentMethod, and is useful for accessing the field via an interface.
func (v *CreateTeamInput) GetPaymentMethod() *string { return v.PaymentMethod }

// GetTier returns CreateTeamInput.Tier, and is useful for accessing the field via an interface.
func (v *CreateTeamInput) GetTier() *PlanTier { return v.Tier }

// GetBillingPeriod returns CreateTeamInput.BillingPeriod, and is useful for accessing the field via an interface.
func (v *CreateTeamInput) GetBillingPeriod() *PlanBillingPeriod { return v.BillingPeriod }

type CreateWebhookIntegrationInput struct {
	UserID uuid.UUID `json:"userID"`
	Url    string    `json:"url"`
}

// GetUserID returns CreateWebhookIntegrationInput.UserID, and is useful for accessing the field via an interface.
func (v *CreateWebhookIntegrationInput) GetUserID() uuid.UUID { return v.UserID }

// GetUrl returns CreateWebhookIntegrationInput.Url, and is useful for accessing the field via an interface.
func (v *CreateWebhookIntegrationInput) GetUrl() string { return v.Url }

type DNSRecordType string

const (
	DNSRecordTypeA     DNSRecordType = "A"
	DNSRecordTypeCname DNSRecordType = "CNAME"
	DNSRecordTypeTxt   DNSRecordType = "TXT"
)

// DOAccountDetail includes the GraphQL fields of DOAccount requested by the fragment DOAccountDetail.
type DOAccountDetail struct {
	Id                uuid.UUID      `json:"id"`
	Name              string         `json:"name"`
	State             DOAccountState `json:"state"`
	AccessTokenPrefix *string        `json:"accessTokenPrefix"`
	DefaultProject    *string        `json:"defaultProject"`
	Connected         *bool          `json:"connected"`
}

// GetId returns DOAccountDetail.Id, and is useful for accessing the field via an interface.
func (v *DOAccountDetail) GetId() uuid.UUID { return v.Id }

// GetName returns DOAccountDetail.Name, and is useful for accessing the field via an interface.
func (v *DOAccountDetail) GetName() string { return v.Name }

// GetState returns DOAccountDetail.State, and is useful for accessing the field via an interface.
func (v *DOAccountDetail) GetState() DOAccountState { return v.State }

// GetAccessTokenPrefix returns DOAccountDetail.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *DOAccountDetail) GetAccessTokenPrefix() *string { return v.AccessTokenPrefix }

// GetDefaultProject returns DOAccountDetail.DefaultProject, and is useful for accessing the field via an interface.
func (v *DOAccountDetail) GetDefaultProject() *string { return v.DefaultProject }

// GetConnected returns DOAccountDetail.Connected, and is useful for accessing the field via an interface.
func (v *DOAccountDetail) GetConnected() *bool { return v.Connected }

type DOAccountState string

const (
	DOAccountStateWaiting DOAccountState = "WAITING"
	DOAccountStateSuccess DOAccountState = "SUCCESS"
	DOAccountStateError   DOAccountState = "ERROR"
)

type DatabaseDeployTargetInput struct {
	Provider        DatabaseProviderType `json:"provider"`
	AwsAccountID    *uuid.UUID           `json:"awsAccountID"`
	GcpAccountID    *uuid.UUID           `json:"gcpAccountID"`
	DoAccountID     *uuid.UUID           `json:"doAccountID"`
	LinodeAccountID *uuid.UUID           `json:"linodeAccountID"`
	VultrAccountID  *uuid.UUID           `json:"vultrAccountID"`
	ClusterID       *uuid.UUID           `json:"clusterID"`
	Region          *string              `json:"region"`
}

// GetProvider returns DatabaseDeployTargetInput.Provider, and is useful for accessing the field via an interface.
func (v *DatabaseDeployTargetInput) GetProvider() DatabaseProviderType { return v.Provider }

// GetAwsAccountID returns DatabaseDeployTargetInput.AwsAccountID, and is useful for accessing the field via an interface.
func (v *DatabaseDeployTargetInput) GetAwsAccountID() *uuid.UUID { return v.AwsAccountID }

// GetGcpAccountID returns DatabaseDeployTargetInput.GcpAccountID, and is useful for accessing the field via an interface.
func (v *DatabaseDeployTargetInput) GetGcpAccountID() *uuid.UUID { return v.GcpAccountID }

// GetDoAccountID returns DatabaseDeployTargetInput.DoAccountID, and is useful for accessing the field via an interface.
func (v *DatabaseDeployTargetInput) GetDoAccountID() *uuid.UUID { return v.DoAccountID }

// GetLinodeAccountID returns DatabaseDeployTargetInput.LinodeAccountID, and is useful for accessing the field via an interface.
func (v *DatabaseDeployTargetInput) GetLinodeAccountID() *uuid.UUID { return v.LinodeAccountID }

// GetVultrAccountID returns DatabaseDeployTargetInput.VultrAccountID, and is useful for accessing the field via an interface.
func (v *DatabaseDeployTargetInput) GetVultrAccountID() *uuid.UUID { return v.VultrAccountID }

// GetClusterID returns DatabaseDeployTargetInput.ClusterID, and is useful for accessing the field via an interface.
func (v *DatabaseDeployTargetInput) GetClusterID() *uuid.UUID { return v.ClusterID }

// GetRegion returns DatabaseDeployTargetInput.Region, and is useful for accessing the field via an interface.
func (v *DatabaseDeployTargetInput) GetRegion() *string { return v.Region }

type DatabaseEngineType string

const (
	DatabaseEngineTypePostgres DatabaseEngineType = "POSTGRES"
	DatabaseEngineTypeMysql    DatabaseEngineType = "MYSQL"
	DatabaseEngineTypeMongodb  DatabaseEngineType = "MONGODB"
	DatabaseEngineTypeRedis    DatabaseEngineType = "REDIS"
	DatabaseEngineTypeKafka    DatabaseEngineType = "KAFKA"
	DatabaseEngineTypeNats     DatabaseEngineType = "NATS"
)

type DatabaseOptions struct {
	Username *string `json:"username"`
	Password *string `json:"password"`
	Database *string `json:"database"`
}

// GetUsername returns DatabaseOptions.Username, and is useful for accessing the field via an interface.
func (v *DatabaseOptions) GetUsername() *string { return v.Username }

// GetPassword returns DatabaseOptions.Password, and is useful for accessing the field via an interface.
func (v *DatabaseOptions) GetPassword() *string { return v.Password }

// GetDatabase returns DatabaseOptions.Database, and is useful for accessing the field via an interface.
func (v *DatabaseOptions) GetDatabase() *string { return v.Database }

type DatabaseProviderType string

const (
	DatabaseProviderTypeAwsRds      DatabaseProviderType = "AWS_RDS"
	DatabaseProviderTypeGcpCloudSql DatabaseProviderType = "GCP_CLOUD_SQL"
	DatabaseProviderTypeDoDatabase  DatabaseProviderType = "DO_DATABASE"
	DatabaseProviderTypeDocker      DatabaseProviderType = "DOCKER"
)

type DatadogLogIntegrationInput struct {
	Key  string  `json:"key"`
	Host *string `json:"host"`
}

// GetKey returns DatadogLogIntegrationInput.Key, and is useful for accessing the field via an interface.
func (v *DatadogLogIntegrationInput) GetKey() string { return v.Key }

// GetHost returns DatadogLogIntegrationInput.Host, and is useful for accessing the field via an interface.
func (v *DatadogLogIntegrationInput) GetHost() *string { return v.Host }

type DeployRepoBranchInput struct {
	Id     uuid.UUID `json:"id"`
	Branch string    `json:"branch"`
}

// GetId returns DeployRepoBranchInput.Id, and is useful for accessing the field via an interface.
func (v *DeployRepoBranchInput) GetId() uuid.UUID { return v.Id }

// GetBranch returns DeployRepoBranchInput.Branch, and is useful for accessing the field via an interface.
func (v *DeployRepoBranchInput) GetBranch() string { return v.Branch }

type DeployRuntime string

const (
	DeployRuntimeAwsLambda   DeployRuntime = "AWS_LAMBDA"
	DeployRuntimeAwsEcs      DeployRuntime = "AWS_ECS"
	DeployRuntimeGcpCloudRun DeployRuntime = "GCP_CLOUD_RUN"
	DeployRuntimeKubernetes  DeployRuntime = "KUBERNETES"
	DeployRuntimeKnative     DeployRuntime = "KNATIVE"
)

type DeployStrategy string

const (
	DeployStrategyRestart   DeployStrategy = "RESTART"
	DeployStrategyRolling   DeployStrategy = "ROLLING"
	DeployStrategyCanary    DeployStrategy = "CANARY"
	DeployStrategyBlueGreen DeployStrategy = "BLUE_GREEN"
	DeployStrategyRedBlack  DeployStrategy = "RED_BLACK"
)

type DeployTarget string

const (
	DeployTargetKubernetes        DeployTarget = "KUBERNETES"
	DeployTargetServerless        DeployTarget = "SERVERLESS"
	DeployTargetTerraform         DeployTarget = "TERRAFORM"
	DeployTargetPulumi            DeployTarget = "PULUMI"
	DeployTargetAwsSam            DeployTarget = "AWS_SAM"
	DeployTargetAwsCdk            DeployTarget = "AWS_CDK"
	DeployTargetAwsCloudformation DeployTarget = "AWS_CLOUDFORMATION"
	DeployTargetGcpCloudRun       DeployTarget = "GCP_CLOUD_RUN"
)

type DeployTemplateType string

const (
	DeployTemplateTypeYaml DeployTemplateType = "YAML"
)

type DeployType string

const (
	DeployTypeKubernetes             DeployType = "KUBERNETES"
	DeployTypeKnative                DeployType = "KNATIVE"
	DeployTypeHelm                   DeployType = "HELM"
	DeployTypeKubectl                DeployType = "KUBECTL"
	DeployTypeKubernetesUnstructured DeployType = "KUBERNETES_UNSTRUCTURED"
)

type DeployableDriverActionExecutionFilter struct {
	Ids         *MultiEntityCriterion      `json:"ids"`
	ActionTypes *DriverActionTypeCriterion `json:"actionTypes"`
	ResourceIds *MultiEntityCriterion      `json:"resourceIds"`
}

// GetIds returns DeployableDriverActionExecutionFilter.Ids, and is useful for accessing the field via an interface.
func (v *DeployableDriverActionExecutionFilter) GetIds() *MultiEntityCriterion { return v.Ids }

// GetActionTypes returns DeployableDriverActionExecutionFilter.ActionTypes, and is useful for accessing the field via an interface.
func (v *DeployableDriverActionExecutionFilter) GetActionTypes() *DriverActionTypeCriterion {
	return v.ActionTypes
}

// GetResourceIds returns DeployableDriverActionExecutionFilter.ResourceIds, and is useful for accessing the field via an interface.
func (v *DeployableDriverActionExecutionFilter) GetResourceIds() *MultiEntityCriterion {
	return v.ResourceIds
}

// DeploymentAlertDetail includes the GraphQL fields of DeploymentAlert requested by the fragment DeploymentAlertDetail.
//
// DeploymentAlertDetail is implemented by the following types:
// DeploymentAlertDetailDeploymentPodCrashAlert
type DeploymentAlertDetail interface {
	implementsGraphQLInterfaceDeploymentAlertDetail()
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetResolvedAt returns the interface-field "resolvedAt" from its implementation.
	GetResolvedAt() *time.Time
}

func (v *DeploymentAlertDetailDeploymentPodCrashAlert) implementsGraphQLInterfaceDeploymentAlertDetail() {
}

func __unmarshalDeploymentAlertDetail(b []byte, v *DeploymentAlertDetail) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DeploymentPodCrashAlert":
		*v = new(DeploymentAlertDetailDeploymentPodCrashAlert)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DeploymentAlert.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeploymentAlertDetail: "%v"`, tn.TypeName)
	}
}

func __marshalDeploymentAlertDetail(v *DeploymentAlertDetail) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeploymentAlertDetailDeploymentPodCrashAlert:
		typename = "DeploymentPodCrashAlert"

		result := struct {
			TypeName string `json:"__typename"`
			*DeploymentAlertDetailDeploymentPodCrashAlert
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeploymentAlertDetail: "%T"`, v)
	}
}

// DeploymentAlertDetail includes the GraphQL fields of DeploymentPodCrashAlert requested by the fragment DeploymentAlertDetail.
type DeploymentAlertDetailDeploymentPodCrashAlert struct {
	CreatedAt       time.Time                             `json:"createdAt"`
	ResolvedAt      *time.Time                            `json:"resolvedAt"`
	Namespace       *string                               `json:"namespace"`
	PodName         *string                               `json:"podName"`
	PreviousPodLogs *DeploymentAlertDetailPreviousPodLogs `json:"previousPodLogs"`
}

// GetCreatedAt returns DeploymentAlertDetailDeploymentPodCrashAlert.CreatedAt, and is useful for accessing the field via an interface.
func (v *DeploymentAlertDetailDeploymentPodCrashAlert) GetCreatedAt() time.Time { return v.CreatedAt }

// GetResolvedAt returns DeploymentAlertDetailDeploymentPodCrashAlert.ResolvedAt, and is useful for accessing the field via an interface.
func (v *DeploymentAlertDetailDeploymentPodCrashAlert) GetResolvedAt() *time.Time {
	return v.ResolvedAt
}

// GetNamespace returns DeploymentAlertDetailDeploymentPodCrashAlert.Namespace, and is useful for accessing the field via an interface.
func (v *DeploymentAlertDetailDeploymentPodCrashAlert) GetNamespace() *string { return v.Namespace }

// GetPodName returns DeploymentAlertDetailDeploymentPodCrashAlert.PodName, and is useful for accessing the field via an interface.
func (v *DeploymentAlertDetailDeploymentPodCrashAlert) GetPodName() *string { return v.PodName }

// GetPreviousPodLogs returns DeploymentAlertDetailDeploymentPodCrashAlert.PreviousPodLogs, and is useful for accessing the field via an interface.
func (v *DeploymentAlertDetailDeploymentPodCrashAlert) GetPreviousPodLogs() *DeploymentAlertDetailPreviousPodLogs {
	return v.PreviousPodLogs
}

// DeploymentAlertDetailPreviousPodLogs includes the requested fields of the GraphQL type Logs.
type DeploymentAlertDetailPreviousPodLogs struct {
	Entries []DeploymentAlertDetailPreviousPodLogsEntriesLogEntry `json:"entries"`
}

// GetEntries returns DeploymentAlertDetailPreviousPodLogs.Entries, and is useful for accessing the field via an interface.
func (v *DeploymentAlertDetailPreviousPodLogs) GetEntries() []DeploymentAlertDetailPreviousPodLogsEntriesLogEntry {
	return v.Entries
}

// DeploymentAlertDetailPreviousPodLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type DeploymentAlertDetailPreviousPodLogsEntriesLogEntry struct {
	Text string `json:"text"`
}

// GetText returns DeploymentAlertDetailPreviousPodLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *DeploymentAlertDetailPreviousPodLogsEntriesLogEntry) GetText() string { return v.Text }

// DeploymentBuildLogs includes the GraphQL fields of Deployment requested by the fragment DeploymentBuildLogs.
type DeploymentBuildLogs struct {
	Build *DeploymentBuildLogsBuild `json:"build"`
}

// GetBuild returns DeploymentBuildLogs.Build, and is useful for accessing the field via an interface.
func (v *DeploymentBuildLogs) GetBuild() *DeploymentBuildLogsBuild { return v.Build }

// DeploymentBuildLogsBuild includes the requested fields of the GraphQL type Build.
type DeploymentBuildLogsBuild struct {
	Id           uuid.UUID                     `json:"id"`
	ErrorMessage *string                       `json:"errorMessage"`
	Logs         *DeploymentBuildLogsBuildLogs `json:"logs"`
}

// GetId returns DeploymentBuildLogsBuild.Id, and is useful for accessing the field via an interface.
func (v *DeploymentBuildLogsBuild) GetId() uuid.UUID { return v.Id }

// GetErrorMessage returns DeploymentBuildLogsBuild.ErrorMessage, and is useful for accessing the field via an interface.
func (v *DeploymentBuildLogsBuild) GetErrorMessage() *string { return v.ErrorMessage }

// GetLogs returns DeploymentBuildLogsBuild.Logs, and is useful for accessing the field via an interface.
func (v *DeploymentBuildLogsBuild) GetLogs() *DeploymentBuildLogsBuildLogs { return v.Logs }

// DeploymentBuildLogsBuildLogs includes the requested fields of the GraphQL type Logs.
type DeploymentBuildLogsBuildLogs struct {
	Id        uuid.UUID                                     `json:"id"`
	Completed bool                                          `json:"completed"`
	Expired   bool                                          `json:"expired"`
	Entries   []DeploymentBuildLogsBuildLogsEntriesLogEntry `json:"entries"`
}

// GetId returns DeploymentBuildLogsBuildLogs.Id, and is useful for accessing the field via an interface.
func (v *DeploymentBuildLogsBuildLogs) GetId() uuid.UUID { return v.Id }

// GetCompleted returns DeploymentBuildLogsBuildLogs.Completed, and is useful for accessing the field via an interface.
func (v *DeploymentBuildLogsBuildLogs) GetCompleted() bool { return v.Completed }

// GetExpired returns DeploymentBuildLogsBuildLogs.Expired, and is useful for accessing the field via an interface.
func (v *DeploymentBuildLogsBuildLogs) GetExpired() bool { return v.Expired }

// GetEntries returns DeploymentBuildLogsBuildLogs.Entries, and is useful for accessing the field via an interface.
func (v *DeploymentBuildLogsBuildLogs) GetEntries() []DeploymentBuildLogsBuildLogsEntriesLogEntry {
	return v.Entries
}

// DeploymentBuildLogsBuildLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type DeploymentBuildLogsBuildLogsEntriesLogEntry struct {
	Timestamp *time.Time `json:"timestamp"`
	Text      string     `json:"text"`
}

// GetTimestamp returns DeploymentBuildLogsBuildLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *DeploymentBuildLogsBuildLogsEntriesLogEntry) GetTimestamp() *time.Time { return v.Timestamp }

// GetText returns DeploymentBuildLogsBuildLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *DeploymentBuildLogsBuildLogsEntriesLogEntry) GetText() string { return v.Text }

// DeploymentCommon includes the GraphQL fields of Deployment requested by the fragment DeploymentCommon.
type DeploymentCommon struct {
	Id                uuid.UUID                                           `json:"id"`
	Description       *string                                             `json:"description"`
	Version           string                                              `json:"version"`
	Status            DeploymentStatus                                    `json:"status"`
	Branch            *string                                             `json:"branch"`
	Endpoints         []string                                            `json:"endpoints"`
	PrivateEndpoint   *string                                             `json:"privateEndpoint"`
	ErrorMessage      *string                                             `json:"errorMessage"`
	DeployStatus      *DeploymentCommonDeployStatus                       `json:"deployStatus"`
	Build             *DeploymentCommonBuild                              `json:"build"`
	AlternativeImages []DeploymentCommonAlternativeImagesAlternativeImage `json:"alternativeImages"`
	UpdatedAt         time.Time                                           `json:"updatedAt"`
	CreatedAt         time.Time                                           `json:"createdAt"`
}

// GetId returns DeploymentCommon.Id, and is useful for accessing the field via an interface.
func (v *DeploymentCommon) GetId() uuid.UUID { return v.Id }

// GetDescription returns DeploymentCommon.Description, and is useful for accessing the field via an interface.
func (v *DeploymentCommon) GetDescription() *string { return v.Description }

// GetVersion returns DeploymentCommon.Version, and is useful for accessing the field via an interface.
func (v *DeploymentCommon) GetVersion() string { return v.Version }

// GetStatus returns DeploymentCommon.Status, and is useful for accessing the field via an interface.
func (v *DeploymentCommon) GetStatus() DeploymentStatus { return v.Status }

// GetBranch returns DeploymentCommon.Branch, and is useful for accessing the field via an interface.
func (v *DeploymentCommon) GetBranch() *string { return v.Branch }

// GetEndpoints returns DeploymentCommon.Endpoints, and is useful for accessing the field via an interface.
func (v *DeploymentCommon) GetEndpoints() []string { return v.Endpoints }

// GetPrivateEndpoint returns DeploymentCommon.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *DeploymentCommon) GetPrivateEndpoint() *string { return v.PrivateEndpoint }

// GetErrorMessage returns DeploymentCommon.ErrorMessage, and is useful for accessing the field via an interface.
func (v *DeploymentCommon) GetErrorMessage() *string { return v.ErrorMessage }

// GetDeployStatus returns DeploymentCommon.DeployStatus, and is useful for accessing the field via an interface.
func (v *DeploymentCommon) GetDeployStatus() *DeploymentCommonDeployStatus { return v.DeployStatus }

// GetBuild returns DeploymentCommon.Build, and is useful for accessing the field via an interface.
func (v *DeploymentCommon) GetBuild() *DeploymentCommonBuild { return v.Build }

// GetAlternativeImages returns DeploymentCommon.AlternativeImages, and is useful for accessing the field via an interface.
func (v *DeploymentCommon) GetAlternativeImages() []DeploymentCommonAlternativeImagesAlternativeImage {
	return v.AlternativeImages
}

// GetUpdatedAt returns DeploymentCommon.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DeploymentCommon) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetCreatedAt returns DeploymentCommon.CreatedAt, and is useful for accessing the field via an interface.
func (v *DeploymentCommon) GetCreatedAt() time.Time { return v.CreatedAt }

// DeploymentCommonAlternativeImagesAlternativeImage includes the requested fields of the GraphQL type AlternativeImage.
type DeploymentCommonAlternativeImagesAlternativeImage struct {
	Reference *string `json:"reference"`
	Tag       *string `json:"tag"`
	Name      *string `json:"name"`
}

// GetReference returns DeploymentCommonAlternativeImagesAlternativeImage.Reference, and is useful for accessing the field via an interface.
func (v *DeploymentCommonAlternativeImagesAlternativeImage) GetReference() *string {
	return v.Reference
}

// GetTag returns DeploymentCommonAlternativeImagesAlternativeImage.Tag, and is useful for accessing the field via an interface.
func (v *DeploymentCommonAlternativeImagesAlternativeImage) GetTag() *string { return v.Tag }

// GetName returns DeploymentCommonAlternativeImagesAlternativeImage.Name, and is useful for accessing the field via an interface.
func (v *DeploymentCommonAlternativeImagesAlternativeImage) GetName() *string { return v.Name }

// DeploymentCommonBuild includes the requested fields of the GraphQL type Build.
type DeploymentCommonBuild struct {
	Image *string `json:"image"`
}

// GetImage returns DeploymentCommonBuild.Image, and is useful for accessing the field via an interface.
func (v *DeploymentCommonBuild) GetImage() *string { return v.Image }

// DeploymentCommonDeployStatus includes the requested fields of the GraphQL type DeployStatus.
type DeploymentCommonDeployStatus struct {
	Active          bool                                         `json:"active"`
	Replicas        int                                          `json:"replicas"`
	PublicIPs       []string                                     `json:"publicIPs"`
	State           string                                       `json:"state"`
	ErrorMessage    *string                                      `json:"errorMessage"`
	Troubleshooting *DeploymentCommonDeployStatusTroubleshooting `json:"troubleshooting"`
}

// GetActive returns DeploymentCommonDeployStatus.Active, and is useful for accessing the field via an interface.
func (v *DeploymentCommonDeployStatus) GetActive() bool { return v.Active }

// GetReplicas returns DeploymentCommonDeployStatus.Replicas, and is useful for accessing the field via an interface.
func (v *DeploymentCommonDeployStatus) GetReplicas() int { return v.Replicas }

// GetPublicIPs returns DeploymentCommonDeployStatus.PublicIPs, and is useful for accessing the field via an interface.
func (v *DeploymentCommonDeployStatus) GetPublicIPs() []string { return v.PublicIPs }

// GetState returns DeploymentCommonDeployStatus.State, and is useful for accessing the field via an interface.
func (v *DeploymentCommonDeployStatus) GetState() string { return v.State }

// GetErrorMessage returns DeploymentCommonDeployStatus.ErrorMessage, and is useful for accessing the field via an interface.
func (v *DeploymentCommonDeployStatus) GetErrorMessage() *string { return v.ErrorMessage }

// GetTroubleshooting returns DeploymentCommonDeployStatus.Troubleshooting, and is useful for accessing the field via an interface.
func (v *DeploymentCommonDeployStatus) GetTroubleshooting() *DeploymentCommonDeployStatusTroubleshooting {
	return v.Troubleshooting
}

// DeploymentCommonDeployStatusTroubleshooting includes the requested fields of the GraphQL type Troubleshooting.
// The GraphQL type's documentation follows.
//
// A minimal representation of some error state, and some possible triage, when available.
type DeploymentCommonDeployStatusTroubleshooting struct {
	// The headline issue currently outstanding for this troubleshooting's parent object.
	Issue *DeploymentCommonDeployStatusTroubleshootingIssue `json:"issue"`
}

// GetIssue returns DeploymentCommonDeployStatusTroubleshooting.Issue, and is useful for accessing the field via an interface.
func (v *DeploymentCommonDeployStatusTroubleshooting) GetIssue() *DeploymentCommonDeployStatusTroubleshootingIssue {
	return v.Issue
}

// DeploymentCommonDeployStatusTroubleshootingIssue includes the requested fields of the GraphQL type TroubleshootingIssue.
type DeploymentCommonDeployStatusTroubleshootingIssue struct {
	// Zero or more blocks representing either evidence of an issue or corresponding user instructions
	Blocks []DeploymentCommonDeployStatusTroubleshootingIssueBlocksTroubleshootingIssueBlock `json:"blocks"`
}

// GetBlocks returns DeploymentCommonDeployStatusTroubleshootingIssue.Blocks, and is useful for accessing the field via an interface.
func (v *DeploymentCommonDeployStatusTroubleshootingIssue) GetBlocks() []DeploymentCommonDeployStatusTroubleshootingIssueBlocksTroubleshootingIssueBlock {
	return v.Blocks
}

// DeploymentCommonDeployStatusTroubleshootingIssueBlocksTroubleshootingIssueBlock includes the requested fields of the GraphQL type TroubleshootingIssueBlock.
type DeploymentCommonDeployStatusTroubleshootingIssueBlocksTroubleshootingIssueBlock struct {
	BlockType *TroubleshootingIssueBlockType `json:"blockType"`
	Content   *string                        `json:"content"`
}

// GetBlockType returns DeploymentCommonDeployStatusTroubleshootingIssueBlocksTroubleshootingIssueBlock.BlockType, and is useful for accessing the field via an interface.
func (v *DeploymentCommonDeployStatusTroubleshootingIssueBlocksTroubleshootingIssueBlock) GetBlockType() *TroubleshootingIssueBlockType {
	return v.BlockType
}

// GetContent returns DeploymentCommonDeployStatusTroubleshootingIssueBlocksTroubleshootingIssueBlock.Content, and is useful for accessing the field via an interface.
func (v *DeploymentCommonDeployStatusTroubleshootingIssueBlocksTroubleshootingIssueBlock) GetContent() *string {
	return v.Content
}

// DeploymentDetail includes the GraphQL fields of Deployment requested by the fragment DeploymentDetail.
type DeploymentDetail struct {
	DeploymentCommon `json:"-"`
	Branch           *string                                    `json:"branch"`
	BuildStage       *DeploymentDetailBuildStage                `json:"buildStage"`
	ReleaseStage     *DeploymentDetailReleaseStagePipelineStage `json:"releaseStage"`
	DeployStage      *DeploymentDetailDeployStagePipelineStage  `json:"deployStage"`
	Repo             *DeploymentDetailRepo                      `json:"repo"`
	AwsLinks         *DeploymentDetailAwsLinksAWSLinks          `json:"awsLinks"`
	GcpLinks         *DeploymentDetailGcpLinksGCPLinks          `json:"gcpLinks"`
	// An optional structured error, containing more information than the simple 'errorMessage'
	DeploymentError *DeploymentDetailDeploymentError `json:"deploymentError"`
	CreatedAt       time.Time                        `json:"createdAt"`
	UpdatedAt       time.Time                        `json:"updatedAt"`
}

// GetBranch returns DeploymentDetail.Branch, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetBranch() *string { return v.Branch }

// GetBuildStage returns DeploymentDetail.BuildStage, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetBuildStage() *DeploymentDetailBuildStage { return v.BuildStage }

// GetReleaseStage returns DeploymentDetail.ReleaseStage, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetReleaseStage() *DeploymentDetailReleaseStagePipelineStage {
	return v.ReleaseStage
}

// GetDeployStage returns DeploymentDetail.DeployStage, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetDeployStage() *DeploymentDetailDeployStagePipelineStage {
	return v.DeployStage
}

// GetRepo returns DeploymentDetail.Repo, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetRepo() *DeploymentDetailRepo { return v.Repo }

// GetAwsLinks returns DeploymentDetail.AwsLinks, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetAwsLinks() *DeploymentDetailAwsLinksAWSLinks { return v.AwsLinks }

// GetGcpLinks returns DeploymentDetail.GcpLinks, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetGcpLinks() *DeploymentDetailGcpLinksGCPLinks { return v.GcpLinks }

// GetDeploymentError returns DeploymentDetail.DeploymentError, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetDeploymentError() *DeploymentDetailDeploymentError {
	return v.DeploymentError
}

// GetCreatedAt returns DeploymentDetail.CreatedAt, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns DeploymentDetail.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetId returns DeploymentDetail.Id, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetId() uuid.UUID { return v.DeploymentCommon.Id }

// GetDescription returns DeploymentDetail.Description, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetDescription() *string { return v.DeploymentCommon.Description }

// GetVersion returns DeploymentDetail.Version, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetVersion() string { return v.DeploymentCommon.Version }

// GetStatus returns DeploymentDetail.Status, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetStatus() DeploymentStatus { return v.DeploymentCommon.Status }

// GetEndpoints returns DeploymentDetail.Endpoints, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetEndpoints() []string { return v.DeploymentCommon.Endpoints }

// GetPrivateEndpoint returns DeploymentDetail.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetPrivateEndpoint() *string { return v.DeploymentCommon.PrivateEndpoint }

// GetErrorMessage returns DeploymentDetail.ErrorMessage, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetErrorMessage() *string { return v.DeploymentCommon.ErrorMessage }

// GetDeployStatus returns DeploymentDetail.DeployStatus, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetDeployStatus() *DeploymentCommonDeployStatus {
	return v.DeploymentCommon.DeployStatus
}

// GetBuild returns DeploymentDetail.Build, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetBuild() *DeploymentCommonBuild { return v.DeploymentCommon.Build }

// GetAlternativeImages returns DeploymentDetail.AlternativeImages, and is useful for accessing the field via an interface.
func (v *DeploymentDetail) GetAlternativeImages() []DeploymentCommonAlternativeImagesAlternativeImage {
	return v.DeploymentCommon.AlternativeImages
}

func (v *DeploymentDetail) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeploymentDetail
		graphql.NoUnmarshalJSON
	}
	firstPass.DeploymentDetail = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeploymentDetail struct {
	Branch *string `json:"branch"`

	BuildStage *DeploymentDetailBuildStage `json:"buildStage"`

	ReleaseStage *DeploymentDetailReleaseStagePipelineStage `json:"releaseStage"`

	DeployStage *DeploymentDetailDeployStagePipelineStage `json:"deployStage"`

	Repo *DeploymentDetailRepo `json:"repo"`

	AwsLinks *DeploymentDetailAwsLinksAWSLinks `json:"awsLinks"`

	GcpLinks *DeploymentDetailGcpLinksGCPLinks `json:"gcpLinks"`

	DeploymentError *DeploymentDetailDeploymentError `json:"deploymentError"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	Version string `json:"version"`

	Status DeploymentStatus `json:"status"`

	Endpoints []string `json:"endpoints"`

	PrivateEndpoint *string `json:"privateEndpoint"`

	ErrorMessage *string `json:"errorMessage"`

	DeployStatus *DeploymentCommonDeployStatus `json:"deployStatus"`

	Build *DeploymentCommonBuild `json:"build"`

	AlternativeImages []DeploymentCommonAlternativeImagesAlternativeImage `json:"alternativeImages"`
}

func (v *DeploymentDetail) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeploymentDetail) __premarshalJSON() (*__premarshalDeploymentDetail, error) {
	var retval __premarshalDeploymentDetail

	retval.Branch = v.Branch
	retval.BuildStage = v.BuildStage
	retval.ReleaseStage = v.ReleaseStage
	retval.DeployStage = v.DeployStage
	retval.Repo = v.Repo
	retval.AwsLinks = v.AwsLinks
	retval.GcpLinks = v.GcpLinks
	retval.DeploymentError = v.DeploymentError
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.Id = v.DeploymentCommon.Id
	retval.Description = v.DeploymentCommon.Description
	retval.Version = v.DeploymentCommon.Version
	retval.Status = v.DeploymentCommon.Status
	retval.Endpoints = v.DeploymentCommon.Endpoints
	retval.PrivateEndpoint = v.DeploymentCommon.PrivateEndpoint
	retval.ErrorMessage = v.DeploymentCommon.ErrorMessage
	retval.DeployStatus = v.DeploymentCommon.DeployStatus
	retval.Build = v.DeploymentCommon.Build
	retval.AlternativeImages = v.DeploymentCommon.AlternativeImages
	return &retval, nil
}

// DeploymentDetailAwsLinksAWSLinks includes the requested fields of the GraphQL type AWSLinks.
type DeploymentDetailAwsLinksAWSLinks struct {
	LambdaLinks `json:"-"`
	Rds         *string `json:"rds"`
}

// GetRds returns DeploymentDetailAwsLinksAWSLinks.Rds, and is useful for accessing the field via an interface.
func (v *DeploymentDetailAwsLinksAWSLinks) GetRds() *string { return v.Rds }

// GetCloudformation returns DeploymentDetailAwsLinksAWSLinks.Cloudformation, and is useful for accessing the field via an interface.
func (v *DeploymentDetailAwsLinksAWSLinks) GetCloudformation() *string {
	return v.LambdaLinks.Cloudformation
}

// GetLambda returns DeploymentDetailAwsLinksAWSLinks.Lambda, and is useful for accessing the field via an interface.
func (v *DeploymentDetailAwsLinksAWSLinks) GetLambda() *string { return v.LambdaLinks.Lambda }

// GetApiGateway returns DeploymentDetailAwsLinksAWSLinks.ApiGateway, and is useful for accessing the field via an interface.
func (v *DeploymentDetailAwsLinksAWSLinks) GetApiGateway() *string { return v.LambdaLinks.ApiGateway }

// GetCloudwatchLogs returns DeploymentDetailAwsLinksAWSLinks.CloudwatchLogs, and is useful for accessing the field via an interface.
func (v *DeploymentDetailAwsLinksAWSLinks) GetCloudwatchLogs() *string {
	return v.LambdaLinks.CloudwatchLogs
}

// GetCloudwatchMetrics returns DeploymentDetailAwsLinksAWSLinks.CloudwatchMetrics, and is useful for accessing the field via an interface.
func (v *DeploymentDetailAwsLinksAWSLinks) GetCloudwatchMetrics() *string {
	return v.LambdaLinks.CloudwatchMetrics
}

func (v *DeploymentDetailAwsLinksAWSLinks) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeploymentDetailAwsLinksAWSLinks
		graphql.NoUnmarshalJSON
	}
	firstPass.DeploymentDetailAwsLinksAWSLinks = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.LambdaLinks)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeploymentDetailAwsLinksAWSLinks struct {
	Rds *string `json:"rds"`

	Cloudformation *string `json:"cloudformation"`

	Lambda *string `json:"lambda"`

	ApiGateway *string `json:"apiGateway"`

	CloudwatchLogs *string `json:"cloudwatchLogs"`

	CloudwatchMetrics *string `json:"cloudwatchMetrics"`
}

func (v *DeploymentDetailAwsLinksAWSLinks) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeploymentDetailAwsLinksAWSLinks) __premarshalJSON() (*__premarshalDeploymentDetailAwsLinksAWSLinks, error) {
	var retval __premarshalDeploymentDetailAwsLinksAWSLinks

	retval.Rds = v.Rds
	retval.Cloudformation = v.LambdaLinks.Cloudformation
	retval.Lambda = v.LambdaLinks.Lambda
	retval.ApiGateway = v.LambdaLinks.ApiGateway
	retval.CloudwatchLogs = v.LambdaLinks.CloudwatchLogs
	retval.CloudwatchMetrics = v.LambdaLinks.CloudwatchMetrics
	return &retval, nil
}

// DeploymentDetailBuildStage includes the requested fields of the GraphQL type BuildStage.
type DeploymentDetailBuildStage struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns DeploymentDetailBuildStage.Id, and is useful for accessing the field via an interface.
func (v *DeploymentDetailBuildStage) GetId() uuid.UUID { return v.Id }

// DeploymentDetailDeployStagePipelineStage includes the requested fields of the GraphQL type PipelineStage.
type DeploymentDetailDeployStagePipelineStage struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns DeploymentDetailDeployStagePipelineStage.Id, and is useful for accessing the field via an interface.
func (v *DeploymentDetailDeployStagePipelineStage) GetId() uuid.UUID { return v.Id }

// DeploymentDetailDeploymentError includes the requested fields of the GraphQL type DeploymentError.
type DeploymentDetailDeploymentError struct {
	ErrorID   *string `json:"errorID"`
	ErrorCode *string `json:"errorCode"`
	Message   string  `json:"message"`
}

// GetErrorID returns DeploymentDetailDeploymentError.ErrorID, and is useful for accessing the field via an interface.
func (v *DeploymentDetailDeploymentError) GetErrorID() *string { return v.ErrorID }

// GetErrorCode returns DeploymentDetailDeploymentError.ErrorCode, and is useful for accessing the field via an interface.
func (v *DeploymentDetailDeploymentError) GetErrorCode() *string { return v.ErrorCode }

// GetMessage returns DeploymentDetailDeploymentError.Message, and is useful for accessing the field via an interface.
func (v *DeploymentDetailDeploymentError) GetMessage() string { return v.Message }

// DeploymentDetailGcpLinksGCPLinks includes the requested fields of the GraphQL type GCPLinks.
type DeploymentDetailGcpLinksGCPLinks struct {
	CloudFunctionsLinks `json:"-"`
}

// GetDeploymentManager returns DeploymentDetailGcpLinksGCPLinks.DeploymentManager, and is useful for accessing the field via an interface.
func (v *DeploymentDetailGcpLinksGCPLinks) GetDeploymentManager() *string {
	return v.CloudFunctionsLinks.DeploymentManager
}

// GetCloudRun returns DeploymentDetailGcpLinksGCPLinks.CloudRun, and is useful for accessing the field via an interface.
func (v *DeploymentDetailGcpLinksGCPLinks) GetCloudRun() *string {
	return v.CloudFunctionsLinks.CloudRun
}

// GetCloudFunctions returns DeploymentDetailGcpLinksGCPLinks.CloudFunctions, and is useful for accessing the field via an interface.
func (v *DeploymentDetailGcpLinksGCPLinks) GetCloudFunctions() *string {
	return v.CloudFunctionsLinks.CloudFunctions
}

// GetCloudFunctionsTrigger returns DeploymentDetailGcpLinksGCPLinks.CloudFunctionsTrigger, and is useful for accessing the field via an interface.
func (v *DeploymentDetailGcpLinksGCPLinks) GetCloudFunctionsTrigger() *string {
	return v.CloudFunctionsLinks.CloudFunctionsTrigger
}

// GetCloudLogging returns DeploymentDetailGcpLinksGCPLinks.CloudLogging, and is useful for accessing the field via an interface.
func (v *DeploymentDetailGcpLinksGCPLinks) GetCloudLogging() *string {
	return v.CloudFunctionsLinks.CloudLogging
}

// GetCloudMonitoring returns DeploymentDetailGcpLinksGCPLinks.CloudMonitoring, and is useful for accessing the field via an interface.
func (v *DeploymentDetailGcpLinksGCPLinks) GetCloudMonitoring() *string {
	return v.CloudFunctionsLinks.CloudMonitoring
}

func (v *DeploymentDetailGcpLinksGCPLinks) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeploymentDetailGcpLinksGCPLinks
		graphql.NoUnmarshalJSON
	}
	firstPass.DeploymentDetailGcpLinksGCPLinks = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudFunctionsLinks)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeploymentDetailGcpLinksGCPLinks struct {
	DeploymentManager *string `json:"deploymentManager"`

	CloudRun *string `json:"cloudRun"`

	CloudFunctions *string `json:"cloudFunctions"`

	CloudFunctionsTrigger *string `json:"cloudFunctionsTrigger"`

	CloudLogging *string `json:"cloudLogging"`

	CloudMonitoring *string `json:"cloudMonitoring"`
}

func (v *DeploymentDetailGcpLinksGCPLinks) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeploymentDetailGcpLinksGCPLinks) __premarshalJSON() (*__premarshalDeploymentDetailGcpLinksGCPLinks, error) {
	var retval __premarshalDeploymentDetailGcpLinksGCPLinks

	retval.DeploymentManager = v.CloudFunctionsLinks.DeploymentManager
	retval.CloudRun = v.CloudFunctionsLinks.CloudRun
	retval.CloudFunctions = v.CloudFunctionsLinks.CloudFunctions
	retval.CloudFunctionsTrigger = v.CloudFunctionsLinks.CloudFunctionsTrigger
	retval.CloudLogging = v.CloudFunctionsLinks.CloudLogging
	retval.CloudMonitoring = v.CloudFunctionsLinks.CloudMonitoring
	return &retval, nil
}

// DeploymentDetailReleaseStagePipelineStage includes the requested fields of the GraphQL type PipelineStage.
type DeploymentDetailReleaseStagePipelineStage struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns DeploymentDetailReleaseStagePipelineStage.Id, and is useful for accessing the field via an interface.
func (v *DeploymentDetailReleaseStagePipelineStage) GetId() uuid.UUID { return v.Id }

// DeploymentDetailRepo includes the requested fields of the GraphQL type Repo.
type DeploymentDetailRepo struct {
	// - v0.RepoID
	Id         uuid.UUID                       `json:"id"`
	Ports      []DeploymentDetailRepoPortsPort `json:"ports"`
	RepoCommon `json:"-"`
}

// GetId returns DeploymentDetailRepo.Id, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetId() uuid.UUID { return v.Id }

// GetPorts returns DeploymentDetailRepo.Ports, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetPorts() []DeploymentDetailRepoPortsPort { return v.Ports }

// GetPath returns DeploymentDetailRepo.Path, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetPath() string { return v.RepoCommon.Path }

// GetName returns DeploymentDetailRepo.Name, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetName() string { return v.RepoCommon.Name }

// GetEnabled returns DeploymentDetailRepo.Enabled, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetEnabled() bool { return v.RepoCommon.Enabled }

// GetSource returns DeploymentDetailRepo.Source, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetSource() RepoCommonSourceRepoSource { return v.RepoCommon.Source }

// GetDeployTarget returns DeploymentDetailRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetDeployTarget() *DeployTarget { return v.RepoCommon.DeployTarget }

// GetDeployType returns DeploymentDetailRepo.DeployType, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetDeployType() *DeployType { return v.RepoCommon.DeployType }

// GetDeployService returns DeploymentDetailRepo.DeployService, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetDeployService() *bool { return v.RepoCommon.DeployService }

// GetDeployJob returns DeploymentDetailRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetDeployJob() *bool { return v.RepoCommon.DeployJob }

// GetAwsAccount returns DeploymentDetailRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns DeploymentDetailRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns DeploymentDetailRepo.Image, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetImage() *string { return v.RepoCommon.Image }

// GetCpu returns DeploymentDetailRepo.Cpu, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetCpu() *string { return v.RepoCommon.Cpu }

// GetMemory returns DeploymentDetailRepo.Memory, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetMemory() *string { return v.RepoCommon.Memory }

// GetGpu returns DeploymentDetailRepo.Gpu, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetGpu() *RepoCommonGpuGPUSpec { return v.RepoCommon.Gpu }

// GetTpu returns DeploymentDetailRepo.Tpu, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetTpu() *RepoCommonTpuTPUSpec { return v.RepoCommon.Tpu }

// GetUpdatedAt returns DeploymentDetailRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetUpdatedAt() time.Time { return v.RepoCommon.UpdatedAt }

// GetDisableReason returns DeploymentDetailRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetDisableReason() *DisableReason { return v.RepoCommon.DisableReason }

// GetCluster returns DeploymentDetailRepo.Cluster, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetCluster() *RepoCommonCluster { return v.RepoCommon.Cluster }

// GetDatabaseProvider returns DeploymentDetailRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns DeploymentDetailRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns DeploymentDetailRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCommon.Autoscaling
}

// GetOwner returns DeploymentDetailRepo.Owner, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetOwner() RepoCommonOwnerUser { return v.RepoCommon.Owner }

// GetProject returns DeploymentDetailRepo.Project, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetProject() *RepoCommonProject { return v.RepoCommon.Project }

// GetProjectEnvironment returns DeploymentDetailRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *DeploymentDetailRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeploymentDetailRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.DeploymentDetailRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeploymentDetailRepo struct {
	Id uuid.UUID `json:"id"`

	Ports []DeploymentDetailRepoPortsPort `json:"ports"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *DeploymentDetailRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeploymentDetailRepo) __premarshalJSON() (*__premarshalDeploymentDetailRepo, error) {
	var retval __premarshalDeploymentDetailRepo

	retval.Id = v.Id
	retval.Ports = v.Ports
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// DeploymentDetailRepoPortsPort includes the requested fields of the GraphQL type Port.
type DeploymentDetailRepoPortsPort struct {
	Https  bool `json:"https"`
	Public bool `json:"public"`
}

// GetHttps returns DeploymentDetailRepoPortsPort.Https, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepoPortsPort) GetHttps() bool { return v.Https }

// GetPublic returns DeploymentDetailRepoPortsPort.Public, and is useful for accessing the field via an interface.
func (v *DeploymentDetailRepoPortsPort) GetPublic() bool { return v.Public }

type DeploymentStatus string

const (
	DeploymentStatusBuildPending      DeploymentStatus = "BUILD_PENDING"
	DeploymentStatusBuildInProgress   DeploymentStatus = "BUILD_IN_PROGRESS"
	DeploymentStatusBuildFailed       DeploymentStatus = "BUILD_FAILED"
	DeploymentStatusBuildSucceeded    DeploymentStatus = "BUILD_SUCCEEDED"
	DeploymentStatusDeployPending     DeploymentStatus = "DEPLOY_PENDING"
	DeploymentStatusDeployInProgress  DeploymentStatus = "DEPLOY_IN_PROGRESS"
	DeploymentStatusReleaseInProgress DeploymentStatus = "RELEASE_IN_PROGRESS"
	DeploymentStatusDeployFailed      DeploymentStatus = "DEPLOY_FAILED"
	DeploymentStatusDeploySucceeded   DeploymentStatus = "DEPLOY_SUCCEEDED"
	DeploymentStatusBuildAborted      DeploymentStatus = "BUILD_ABORTED"
	DeploymentStatusDeployStopped     DeploymentStatus = "DEPLOY_STOPPED"
	DeploymentStatusDeployHealhty     DeploymentStatus = "DEPLOY_HEALHTY"
	DeploymentStatusDeployCrashing    DeploymentStatus = "DEPLOY_CRASHING"
)

type DisableReason string

const (
	DisableReasonFreeTrialEnded DisableReason = "FREE_TRIAL_ENDED"
	DisableReasonUserAction     DisableReason = "USER_ACTION"
	DisableReasonPaymentError   DisableReason = "PAYMENT_ERROR"
	DisableReasonUserBanned     DisableReason = "USER_BANNED"
)

// DisconnectUserFromIamResponse is returned by DisconnectUserFromIam on success.
type DisconnectUserFromIamResponse struct {
	DisconnectUserFromIam bool `json:"disconnectUserFromIam"`
}

// GetDisconnectUserFromIam returns DisconnectUserFromIamResponse.DisconnectUserFromIam, and is useful for accessing the field via an interface.
func (v *DisconnectUserFromIamResponse) GetDisconnectUserFromIam() bool {
	return v.DisconnectUserFromIam
}

// DomainDetail includes the GraphQL fields of CustomDomain requested by the fragment DomainDetail.
type DomainDetail struct {
	Id                       uuid.UUID                           `json:"id"`
	Domain                   string                              `json:"domain"`
	IsApex                   bool                                `json:"isApex"`
	CnameTargets             []string                            `json:"cnameTargets"`
	IpTargets                []string                            `json:"ipTargets"`
	DisableCertManager       *bool                               `json:"disableCertManager"`
	CertManagerChallengeType *CertManagerChallengeType           `json:"certManagerChallengeType"`
	SyncDomain               *DomainDetailSyncDomainCustomDomain `json:"syncDomain"`
	Instructions             []DomainDetailInstructionsDNSRecord `json:"instructions"`
	Certificate              *DomainDetailCertificate            `json:"certificate"`
}

// GetId returns DomainDetail.Id, and is useful for accessing the field via an interface.
func (v *DomainDetail) GetId() uuid.UUID { return v.Id }

// GetDomain returns DomainDetail.Domain, and is useful for accessing the field via an interface.
func (v *DomainDetail) GetDomain() string { return v.Domain }

// GetIsApex returns DomainDetail.IsApex, and is useful for accessing the field via an interface.
func (v *DomainDetail) GetIsApex() bool { return v.IsApex }

// GetCnameTargets returns DomainDetail.CnameTargets, and is useful for accessing the field via an interface.
func (v *DomainDetail) GetCnameTargets() []string { return v.CnameTargets }

// GetIpTargets returns DomainDetail.IpTargets, and is useful for accessing the field via an interface.
func (v *DomainDetail) GetIpTargets() []string { return v.IpTargets }

// GetDisableCertManager returns DomainDetail.DisableCertManager, and is useful for accessing the field via an interface.
func (v *DomainDetail) GetDisableCertManager() *bool { return v.DisableCertManager }

// GetCertManagerChallengeType returns DomainDetail.CertManagerChallengeType, and is useful for accessing the field via an interface.
func (v *DomainDetail) GetCertManagerChallengeType() *CertManagerChallengeType {
	return v.CertManagerChallengeType
}

// GetSyncDomain returns DomainDetail.SyncDomain, and is useful for accessing the field via an interface.
func (v *DomainDetail) GetSyncDomain() *DomainDetailSyncDomainCustomDomain { return v.SyncDomain }

// GetInstructions returns DomainDetail.Instructions, and is useful for accessing the field via an interface.
func (v *DomainDetail) GetInstructions() []DomainDetailInstructionsDNSRecord { return v.Instructions }

// GetCertificate returns DomainDetail.Certificate, and is useful for accessing the field via an interface.
func (v *DomainDetail) GetCertificate() *DomainDetailCertificate { return v.Certificate }

// DomainDetailCertificate includes the requested fields of the GraphQL type Certificate.
type DomainDetailCertificate struct {
	DnsNames     []string                                                `json:"dnsNames"`
	Ready        bool                                                    `json:"ready"`
	Issuing      bool                                                    `json:"issuing"`
	Challenges   []DomainDetailCertificateChallengesCertificateChallenge `json:"challenges"`
	Instructions []DomainDetailCertificateInstructionsDNSRecord          `json:"instructions"`
}

// GetDnsNames returns DomainDetailCertificate.DnsNames, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificate) GetDnsNames() []string { return v.DnsNames }

// GetReady returns DomainDetailCertificate.Ready, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificate) GetReady() bool { return v.Ready }

// GetIssuing returns DomainDetailCertificate.Issuing, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificate) GetIssuing() bool { return v.Issuing }

// GetChallenges returns DomainDetailCertificate.Challenges, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificate) GetChallenges() []DomainDetailCertificateChallengesCertificateChallenge {
	return v.Challenges
}

// GetInstructions returns DomainDetailCertificate.Instructions, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificate) GetInstructions() []DomainDetailCertificateInstructionsDNSRecord {
	return v.Instructions
}

// DomainDetailCertificateChallengesCertificateChallenge includes the requested fields of the GraphQL type CertificateChallenge.
type DomainDetailCertificateChallengesCertificateChallenge struct {
	DnsName      string `json:"dnsName"`
	Solver       string `json:"solver"`
	StatusReason string `json:"statusReason"`
	StatusState  string `json:"statusState"`
	Type         string `json:"type"`
	Wildcard     bool   `json:"wildcard"`
}

// GetDnsName returns DomainDetailCertificateChallengesCertificateChallenge.DnsName, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificateChallengesCertificateChallenge) GetDnsName() string { return v.DnsName }

// GetSolver returns DomainDetailCertificateChallengesCertificateChallenge.Solver, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificateChallengesCertificateChallenge) GetSolver() string { return v.Solver }

// GetStatusReason returns DomainDetailCertificateChallengesCertificateChallenge.StatusReason, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificateChallengesCertificateChallenge) GetStatusReason() string {
	return v.StatusReason
}

// GetStatusState returns DomainDetailCertificateChallengesCertificateChallenge.StatusState, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificateChallengesCertificateChallenge) GetStatusState() string {
	return v.StatusState
}

// GetType returns DomainDetailCertificateChallengesCertificateChallenge.Type, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificateChallengesCertificateChallenge) GetType() string { return v.Type }

// GetWildcard returns DomainDetailCertificateChallengesCertificateChallenge.Wildcard, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificateChallengesCertificateChallenge) GetWildcard() bool { return v.Wildcard }

// DomainDetailCertificateInstructionsDNSRecord includes the requested fields of the GraphQL type DNSRecord.
type DomainDetailCertificateInstructionsDNSRecord struct {
	Domain string        `json:"domain"`
	Type   DNSRecordType `json:"type"`
	Value  *string       `json:"value"`
}

// GetDomain returns DomainDetailCertificateInstructionsDNSRecord.Domain, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificateInstructionsDNSRecord) GetDomain() string { return v.Domain }

// GetType returns DomainDetailCertificateInstructionsDNSRecord.Type, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificateInstructionsDNSRecord) GetType() DNSRecordType { return v.Type }

// GetValue returns DomainDetailCertificateInstructionsDNSRecord.Value, and is useful for accessing the field via an interface.
func (v *DomainDetailCertificateInstructionsDNSRecord) GetValue() *string { return v.Value }

// DomainDetailInstructionsDNSRecord includes the requested fields of the GraphQL type DNSRecord.
type DomainDetailInstructionsDNSRecord struct {
	Domain string        `json:"domain"`
	Type   DNSRecordType `json:"type"`
	Value  *string       `json:"value"`
}

// GetDomain returns DomainDetailInstructionsDNSRecord.Domain, and is useful for accessing the field via an interface.
func (v *DomainDetailInstructionsDNSRecord) GetDomain() string { return v.Domain }

// GetType returns DomainDetailInstructionsDNSRecord.Type, and is useful for accessing the field via an interface.
func (v *DomainDetailInstructionsDNSRecord) GetType() DNSRecordType { return v.Type }

// GetValue returns DomainDetailInstructionsDNSRecord.Value, and is useful for accessing the field via an interface.
func (v *DomainDetailInstructionsDNSRecord) GetValue() *string { return v.Value }

// DomainDetailSyncDomainCustomDomain includes the requested fields of the GraphQL type CustomDomain.
type DomainDetailSyncDomainCustomDomain struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns DomainDetailSyncDomainCustomDomain.Id, and is useful for accessing the field via an interface.
func (v *DomainDetailSyncDomainCustomDomain) GetId() uuid.UUID { return v.Id }

type DriverActionTypeCriterion struct {
	Value    []*BlueprintDriverAction     `json:"value"`
	Operator *FilterCriterionOperatorType `json:"operator"`
}

// GetValue returns DriverActionTypeCriterion.Value, and is useful for accessing the field via an interface.
func (v *DriverActionTypeCriterion) GetValue() []*BlueprintDriverAction { return v.Value }

// GetOperator returns DriverActionTypeCriterion.Operator, and is useful for accessing the field via an interface.
func (v *DriverActionTypeCriterion) GetOperator() *FilterCriterionOperatorType { return v.Operator }

type DuplicateBlueprintInput struct {
	Id        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"userID"`
	Name      string    `json:"name"`
	Slug      string    `json:"slug"`
	Published bool      `json:"published"`
}

// GetId returns DuplicateBlueprintInput.Id, and is useful for accessing the field via an interface.
func (v *DuplicateBlueprintInput) GetId() uuid.UUID { return v.Id }

// GetUserID returns DuplicateBlueprintInput.UserID, and is useful for accessing the field via an interface.
func (v *DuplicateBlueprintInput) GetUserID() uuid.UUID { return v.UserID }

// GetName returns DuplicateBlueprintInput.Name, and is useful for accessing the field via an interface.
func (v *DuplicateBlueprintInput) GetName() string { return v.Name }

// GetSlug returns DuplicateBlueprintInput.Slug, and is useful for accessing the field via an interface.
func (v *DuplicateBlueprintInput) GetSlug() string { return v.Slug }

// GetPublished returns DuplicateBlueprintInput.Published, and is useful for accessing the field via an interface.
func (v *DuplicateBlueprintInput) GetPublished() bool { return v.Published }

// DuplicateProjectDuplicateProjectRepo includes the requested fields of the GraphQL type Repo.
type DuplicateProjectDuplicateProjectRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns DuplicateProjectDuplicateProjectRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns DuplicateProjectDuplicateProjectRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns DuplicateProjectDuplicateProjectRepo.Manifest, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns DuplicateProjectDuplicateProjectRepo.AppID, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns DuplicateProjectDuplicateProjectRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns DuplicateProjectDuplicateProjectRepo.KappID, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns DuplicateProjectDuplicateProjectRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns DuplicateProjectDuplicateProjectRepo.Project, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns DuplicateProjectDuplicateProjectRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns DuplicateProjectDuplicateProjectRepo.Namespace, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns DuplicateProjectDuplicateProjectRepo.Envs, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetEnvs() []RepoDetailEnvsEnvVar {
	return v.RepoDetail.Envs
}

// GetCollaborators returns DuplicateProjectDuplicateProjectRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns DuplicateProjectDuplicateProjectRepo.Volumes, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns DuplicateProjectDuplicateProjectRepo.Replication, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns DuplicateProjectDuplicateProjectRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns DuplicateProjectDuplicateProjectRepo.Cluster, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns DuplicateProjectDuplicateProjectRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns DuplicateProjectDuplicateProjectRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns DuplicateProjectDuplicateProjectRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns DuplicateProjectDuplicateProjectRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns DuplicateProjectDuplicateProjectRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns DuplicateProjectDuplicateProjectRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns DuplicateProjectDuplicateProjectRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetManualDeploy() *bool {
	return v.RepoDetail.ManualDeploy
}

// GetDeployStrategy returns DuplicateProjectDuplicateProjectRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns DuplicateProjectDuplicateProjectRepo.Free, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns DuplicateProjectDuplicateProjectRepo.Cpu, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns DuplicateProjectDuplicateProjectRepo.Memory, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns DuplicateProjectDuplicateProjectRepo.Gpu, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetGpu() *RepoDetailGpuGPUSpec {
	return v.RepoDetail.Gpu
}

// GetTpu returns DuplicateProjectDuplicateProjectRepo.Tpu, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetTpu() *RepoDetailTpuTPUSpec {
	return v.RepoDetail.Tpu
}

// GetEphemeralStorage returns DuplicateProjectDuplicateProjectRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns DuplicateProjectDuplicateProjectRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns DuplicateProjectDuplicateProjectRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns DuplicateProjectDuplicateProjectRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns DuplicateProjectDuplicateProjectRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns DuplicateProjectDuplicateProjectRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns DuplicateProjectDuplicateProjectRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns DuplicateProjectDuplicateProjectRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns DuplicateProjectDuplicateProjectRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns DuplicateProjectDuplicateProjectRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetHelmValues() *string {
	return v.RepoDetail.HelmValues
}

// GetTerraformVersion returns DuplicateProjectDuplicateProjectRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns DuplicateProjectDuplicateProjectRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns DuplicateProjectDuplicateProjectRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns DuplicateProjectDuplicateProjectRepo.DeployService, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns DuplicateProjectDuplicateProjectRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns DuplicateProjectDuplicateProjectRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetPreStopSleep() *int {
	return v.RepoDetail.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns DuplicateProjectDuplicateProjectRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns DuplicateProjectDuplicateProjectRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns DuplicateProjectDuplicateProjectRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns DuplicateProjectDuplicateProjectRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns DuplicateProjectDuplicateProjectRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns DuplicateProjectDuplicateProjectRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns DuplicateProjectDuplicateProjectRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns DuplicateProjectDuplicateProjectRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns DuplicateProjectDuplicateProjectRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns DuplicateProjectDuplicateProjectRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns DuplicateProjectDuplicateProjectRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetAutoRollback() *bool {
	return v.RepoDetail.AutoRollback
}

// GetCanDeploy returns DuplicateProjectDuplicateProjectRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns DuplicateProjectDuplicateProjectRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns DuplicateProjectDuplicateProjectRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetAwsIamRole() *string {
	return v.RepoDetail.AwsIamRole
}

// GetGcpServiceAccount returns DuplicateProjectDuplicateProjectRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns DuplicateProjectDuplicateProjectRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns DuplicateProjectDuplicateProjectRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns DuplicateProjectDuplicateProjectRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns DuplicateProjectDuplicateProjectRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns DuplicateProjectDuplicateProjectRepo.Id, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetId() uuid.UUID { return v.RepoDetail.RepoCommon.Id }

// GetPath returns DuplicateProjectDuplicateProjectRepo.Path, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns DuplicateProjectDuplicateProjectRepo.Name, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns DuplicateProjectDuplicateProjectRepo.Enabled, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetEnabled() bool {
	return v.RepoDetail.RepoCommon.Enabled
}

// GetSource returns DuplicateProjectDuplicateProjectRepo.Source, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns DuplicateProjectDuplicateProjectRepo.DeployType, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns DuplicateProjectDuplicateProjectRepo.Image, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetImage() *string {
	return v.RepoDetail.RepoCommon.Image
}

// GetUpdatedAt returns DuplicateProjectDuplicateProjectRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns DuplicateProjectDuplicateProjectRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns DuplicateProjectDuplicateProjectRepo.Owner, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns DuplicateProjectDuplicateProjectRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns DuplicateProjectDuplicateProjectRepo.Cdns, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns DuplicateProjectDuplicateProjectRepo.Ports, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns DuplicateProjectDuplicateProjectRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns DuplicateProjectDuplicateProjectRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns DuplicateProjectDuplicateProjectRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns DuplicateProjectDuplicateProjectRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns DuplicateProjectDuplicateProjectRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns DuplicateProjectDuplicateProjectRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns DuplicateProjectDuplicateProjectRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns DuplicateProjectDuplicateProjectRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns DuplicateProjectDuplicateProjectRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *DuplicateProjectDuplicateProjectRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DuplicateProjectDuplicateProjectRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.DuplicateProjectDuplicateProjectRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDuplicateProjectDuplicateProjectRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *DuplicateProjectDuplicateProjectRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DuplicateProjectDuplicateProjectRepo) __premarshalJSON() (*__premarshalDuplicateProjectDuplicateProjectRepo, error) {
	var retval __premarshalDuplicateProjectDuplicateProjectRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

type DuplicateProjectInput struct {
	// - v0.RepoID
	Id      uuid.UUID `json:"id"`
	Enabled bool      `json:"enabled"`
	Name    string    `json:"name"`
	// Duplicate repo to existing project
	// - v0.ProjectID or v1.GroupID
	ProjectID *uuid.UUID `json:"projectID"`
	// Creates a new environment by name
	EnvironmentName *string `json:"environmentName"`
	// Put the new repo in an existing environment within the specified project
	// - v0.EnvironmentID or v1.SubGroupID
	EnvironmentID *uuid.UUID `json:"environmentID"`
}

// GetId returns DuplicateProjectInput.Id, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetId() uuid.UUID { return v.Id }

// GetEnabled returns DuplicateProjectInput.Enabled, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetEnabled() bool { return v.Enabled }

// GetName returns DuplicateProjectInput.Name, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetName() string { return v.Name }

// GetProjectID returns DuplicateProjectInput.ProjectID, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetProjectID() *uuid.UUID { return v.ProjectID }

// GetEnvironmentName returns DuplicateProjectInput.EnvironmentName, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetEnvironmentName() *string { return v.EnvironmentName }

// GetEnvironmentID returns DuplicateProjectInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetEnvironmentID() *uuid.UUID { return v.EnvironmentID }

// DuplicateProjectResponse is returned by DuplicateProject on success.
type DuplicateProjectResponse struct {
	// Create a copy of a repo, optionally specifying the target project and project environment
	DuplicateProject DuplicateProjectDuplicateProjectRepo `json:"duplicateProject"`
}

// GetDuplicateProject returns DuplicateProjectResponse.DuplicateProject, and is useful for accessing the field via an interface.
func (v *DuplicateProjectResponse) GetDuplicateProject() DuplicateProjectDuplicateProjectRepo {
	return v.DuplicateProject
}

type DuplicateProjectV3Input struct {
	// - v0.ProjectV3ID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
	// - v0.ProjectID or v1.GroupID
	ProjectID   *uuid.UUID `json:"projectID"`
	ProjectName *string    `json:"projectName"`
	// - v0.EnvironmentID or v1.SubGroupID
	EnvironmentID   *uuid.UUID `json:"environmentID"`
	EnvironmentName *string    `json:"environmentName"`
}

// GetId returns DuplicateProjectV3Input.Id, and is useful for accessing the field via an interface.
func (v *DuplicateProjectV3Input) GetId() uuid.UUID { return v.Id }

// GetName returns DuplicateProjectV3Input.Name, and is useful for accessing the field via an interface.
func (v *DuplicateProjectV3Input) GetName() string { return v.Name }

// GetProjectID returns DuplicateProjectV3Input.ProjectID, and is useful for accessing the field via an interface.
func (v *DuplicateProjectV3Input) GetProjectID() *uuid.UUID { return v.ProjectID }

// GetProjectName returns DuplicateProjectV3Input.ProjectName, and is useful for accessing the field via an interface.
func (v *DuplicateProjectV3Input) GetProjectName() *string { return v.ProjectName }

// GetEnvironmentID returns DuplicateProjectV3Input.EnvironmentID, and is useful for accessing the field via an interface.
func (v *DuplicateProjectV3Input) GetEnvironmentID() *uuid.UUID { return v.EnvironmentID }

// GetEnvironmentName returns DuplicateProjectV3Input.EnvironmentName, and is useful for accessing the field via an interface.
func (v *DuplicateProjectV3Input) GetEnvironmentName() *string { return v.EnvironmentName }

// EnvVarDetail includes the GraphQL fields of EnvVar requested by the fragment EnvVarDetail.
type EnvVarDetail struct {
	Id      uuid.UUID                       `json:"id"`
	Name    string                          `json:"name"`
	Value   string                          `json:"value"`
	Visible bool                            `json:"visible"`
	Sealed  bool                            `json:"sealed"`
	Source  *EnvVarDetailSourceEnvVarSource `json:"source"`
}

// GetId returns EnvVarDetail.Id, and is useful for accessing the field via an interface.
func (v *EnvVarDetail) GetId() uuid.UUID { return v.Id }

// GetName returns EnvVarDetail.Name, and is useful for accessing the field via an interface.
func (v *EnvVarDetail) GetName() string { return v.Name }

// GetValue returns EnvVarDetail.Value, and is useful for accessing the field via an interface.
func (v *EnvVarDetail) GetValue() string { return v.Value }

// GetVisible returns EnvVarDetail.Visible, and is useful for accessing the field via an interface.
func (v *EnvVarDetail) GetVisible() bool { return v.Visible }

// GetSealed returns EnvVarDetail.Sealed, and is useful for accessing the field via an interface.
func (v *EnvVarDetail) GetSealed() bool { return v.Sealed }

// GetSource returns EnvVarDetail.Source, and is useful for accessing the field via an interface.
func (v *EnvVarDetail) GetSource() *EnvVarDetailSourceEnvVarSource { return v.Source }

// EnvVarDetailSourceEnvVarSource includes the requested fields of the GraphQL type EnvVarSource.
type EnvVarDetailSourceEnvVarSource struct {
	Type EnvVarSourceType `json:"type"`
}

// GetType returns EnvVarDetailSourceEnvVarSource.Type, and is useful for accessing the field via an interface.
func (v *EnvVarDetailSourceEnvVarSource) GetType() EnvVarSourceType { return v.Type }

type EnvVarInput struct {
	Name   string `json:"name"`
	Value  string `json:"value"`
	Sealed *bool  `json:"sealed"`
}

// GetName returns EnvVarInput.Name, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetName() string { return v.Name }

// GetValue returns EnvVarInput.Value, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetValue() string { return v.Value }

// GetSealed returns EnvVarInput.Sealed, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetSealed() *bool { return v.Sealed }

type EnvVarSourceType string

const (
	EnvVarSourceTypeZeet        EnvVarSourceType = "ZEET"
	EnvVarSourceTypeProject     EnvVarSourceType = "PROJECT"
	EnvVarSourceTypeEnvironment EnvVarSourceType = "ENVIRONMENT"
	EnvVarSourceTypeCluster     EnvVarSourceType = "CLUSTER"
	EnvVarSourceTypeDatabase    EnvVarSourceType = "DATABASE"
	EnvVarSourceTypeProjectLink EnvVarSourceType = "PROJECT_LINK"
)

type FeatureKey string

const (
	FeatureKeyAdvancedAutoscaling FeatureKey = "ADVANCED_AUTOSCALING"
	FeatureKeyDatadogApm          FeatureKey = "DATADOG_APM"
	FeatureKeyStaticEgress        FeatureKey = "STATIC_EGRESS"
	FeatureKeySupportCenter       FeatureKey = "SUPPORT_CENTER"
)

type FilterCriterion struct {
	UserFilter                            *UserFilter                            `json:"userFilter"`
	ResourceFilter                        *ResourceFilter                        `json:"resourceFilter"`
	RepoFilter                            *RepoFilter                            `json:"repoFilter"`
	DeployableDriverActionExecutionFilter *DeployableDriverActionExecutionFilter `json:"deployableDriverActionExecutionFilter"`
	ResourceAdapterFilter                 *ResourceAdapterFilter                 `json:"resourceAdapterFilter"`
	BlueprintMetadataFilter               *BlueprintMetadataFilter               `json:"blueprintMetadataFilter"`
}

// GetUserFilter returns FilterCriterion.UserFilter, and is useful for accessing the field via an interface.
func (v *FilterCriterion) GetUserFilter() *UserFilter { return v.UserFilter }

// GetResourceFilter returns FilterCriterion.ResourceFilter, and is useful for accessing the field via an interface.
func (v *FilterCriterion) GetResourceFilter() *ResourceFilter { return v.ResourceFilter }

// GetRepoFilter returns FilterCriterion.RepoFilter, and is useful for accessing the field via an interface.
func (v *FilterCriterion) GetRepoFilter() *RepoFilter { return v.RepoFilter }

// GetDeployableDriverActionExecutionFilter returns FilterCriterion.DeployableDriverActionExecutionFilter, and is useful for accessing the field via an interface.
func (v *FilterCriterion) GetDeployableDriverActionExecutionFilter() *DeployableDriverActionExecutionFilter {
	return v.DeployableDriverActionExecutionFilter
}

// GetResourceAdapterFilter returns FilterCriterion.ResourceAdapterFilter, and is useful for accessing the field via an interface.
func (v *FilterCriterion) GetResourceAdapterFilter() *ResourceAdapterFilter {
	return v.ResourceAdapterFilter
}

// GetBlueprintMetadataFilter returns FilterCriterion.BlueprintMetadataFilter, and is useful for accessing the field via an interface.
func (v *FilterCriterion) GetBlueprintMetadataFilter() *BlueprintMetadataFilter {
	return v.BlueprintMetadataFilter
}

type FilterCriterionOperatorType string

const (
	FilterCriterionOperatorTypeEquals    FilterCriterionOperatorType = "EQUALS"
	FilterCriterionOperatorTypeNotEquals FilterCriterionOperatorType = "NOT_EQUALS"
	FilterCriterionOperatorTypeIncludes  FilterCriterionOperatorType = "INCLUDES"
	FilterCriterionOperatorTypeExcludes  FilterCriterionOperatorType = "EXCLUDES"
	FilterCriterionOperatorTypeStarts    FilterCriterionOperatorType = "STARTS"
	FilterCriterionOperatorTypeEnds      FilterCriterionOperatorType = "ENDS"
	FilterCriterionOperatorTypeContains  FilterCriterionOperatorType = "CONTAINS"
)

type FilterExpression struct {
	Operator *FilterExpressionOperator `json:"operator"`
	Filters  []FilterNode              `json:"filters"`
}

// GetOperator returns FilterExpression.Operator, and is useful for accessing the field via an interface.
func (v *FilterExpression) GetOperator() *FilterExpressionOperator { return v.Operator }

// GetFilters returns FilterExpression.Filters, and is useful for accessing the field via an interface.
func (v *FilterExpression) GetFilters() []FilterNode { return v.Filters }

type FilterExpressionOperator string

const (
	FilterExpressionOperatorAnd FilterExpressionOperator = "AND"
	FilterExpressionOperatorOr  FilterExpressionOperator = "OR"
	FilterExpressionOperatorNot FilterExpressionOperator = "NOT"
)

type FilterInput struct {
	Sort   *SortInput `json:"sort"`
	Page   *PageInput `json:"page"`
	Filter FilterNode `json:"filter"`
}

// GetSort returns FilterInput.Sort, and is useful for accessing the field via an interface.
func (v *FilterInput) GetSort() *SortInput { return v.Sort }

// GetPage returns FilterInput.Page, and is useful for accessing the field via an interface.
func (v *FilterInput) GetPage() *PageInput { return v.Page }

// GetFilter returns FilterInput.Filter, and is useful for accessing the field via an interface.
func (v *FilterInput) GetFilter() FilterNode { return v.Filter }

type FilterNode struct {
	Expression *FilterExpression `json:"expression"`
	Criterion  *FilterCriterion  `json:"criterion"`
}

// GetExpression returns FilterNode.Expression, and is useful for accessing the field via an interface.
func (v *FilterNode) GetExpression() *FilterExpression { return v.Expression }

// GetCriterion returns FilterNode.Criterion, and is useful for accessing the field via an interface.
func (v *FilterNode) GetCriterion() *FilterCriterion { return v.Criterion }

// GCPAccountDetail includes the GraphQL fields of GCPAccount requested by the fragment GCPAccountDetail.
type GCPAccountDetail struct {
	Id          uuid.UUID       `json:"id"`
	Name        string          `json:"name"`
	State       GCPAccountState `json:"state"`
	ProjectID   *string         `json:"projectID"`
	ClientEmail *string         `json:"clientEmail"`
	Connected   *bool           `json:"connected"`
	Error       *string         `json:"error"`
}

// GetId returns GCPAccountDetail.Id, and is useful for accessing the field via an interface.
func (v *GCPAccountDetail) GetId() uuid.UUID { return v.Id }

// GetName returns GCPAccountDetail.Name, and is useful for accessing the field via an interface.
func (v *GCPAccountDetail) GetName() string { return v.Name }

// GetState returns GCPAccountDetail.State, and is useful for accessing the field via an interface.
func (v *GCPAccountDetail) GetState() GCPAccountState { return v.State }

// GetProjectID returns GCPAccountDetail.ProjectID, and is useful for accessing the field via an interface.
func (v *GCPAccountDetail) GetProjectID() *string { return v.ProjectID }

// GetClientEmail returns GCPAccountDetail.ClientEmail, and is useful for accessing the field via an interface.
func (v *GCPAccountDetail) GetClientEmail() *string { return v.ClientEmail }

// GetConnected returns GCPAccountDetail.Connected, and is useful for accessing the field via an interface.
func (v *GCPAccountDetail) GetConnected() *bool { return v.Connected }

// GetError returns GCPAccountDetail.Error, and is useful for accessing the field via an interface.
func (v *GCPAccountDetail) GetError() *string { return v.Error }

type GCPAccountState string

const (
	GCPAccountStateWaiting GCPAccountState = "WAITING"
	GCPAccountStateSuccess GCPAccountState = "SUCCESS"
	GCPAccountStateError   GCPAccountState = "ERROR"
)

type GCSBucketBackendInput struct {
	GcpAccountID uuid.UUID `json:"gcpAccountID"`
	Location     string    `json:"location"`
	BucketName   string    `json:"bucketName"`
	Prefix       *string   `json:"prefix"`
}

// GetGcpAccountID returns GCSBucketBackendInput.GcpAccountID, and is useful for accessing the field via an interface.
func (v *GCSBucketBackendInput) GetGcpAccountID() uuid.UUID { return v.GcpAccountID }

// GetLocation returns GCSBucketBackendInput.Location, and is useful for accessing the field via an interface.
func (v *GCSBucketBackendInput) GetLocation() string { return v.Location }

// GetBucketName returns GCSBucketBackendInput.BucketName, and is useful for accessing the field via an interface.
func (v *GCSBucketBackendInput) GetBucketName() string { return v.BucketName }

// GetPrefix returns GCSBucketBackendInput.Prefix, and is useful for accessing the field via an interface.
func (v *GCSBucketBackendInput) GetPrefix() *string { return v.Prefix }

type GPUInput struct {
	Type  *string `json:"type"`
	Count int     `json:"count"`
}

// GetType returns GPUInput.Type, and is useful for accessing the field via an interface.
func (v *GPUInput) GetType() *string { return v.Type }

// GetCount returns GPUInput.Count, and is useful for accessing the field via an interface.
func (v *GPUInput) GetCount() int { return v.Count }

type GcpCloudRunGeneratorConfigurationInput struct {
	EnvVars         []*EnvVarInput `json:"envVars"`
	Name            string         `json:"name"`
	HttpPort        *string        `json:"httpPort"`
	ContainerMemory *float64       `json:"containerMemory"`
	ContainerCpu    *float64       `json:"containerCpu"`
	RunCommand      *string        `json:"runCommand"`
}

// GetEnvVars returns GcpCloudRunGeneratorConfigurationInput.EnvVars, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetEnvVars() []*EnvVarInput { return v.EnvVars }

// GetName returns GcpCloudRunGeneratorConfigurationInput.Name, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetName() string { return v.Name }

// GetHttpPort returns GcpCloudRunGeneratorConfigurationInput.HttpPort, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetHttpPort() *string { return v.HttpPort }

// GetContainerMemory returns GcpCloudRunGeneratorConfigurationInput.ContainerMemory, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetContainerMemory() *float64 {
	return v.ContainerMemory
}

// GetContainerCpu returns GcpCloudRunGeneratorConfigurationInput.ContainerCpu, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetContainerCpu() *float64 { return v.ContainerCpu }

// GetRunCommand returns GcpCloudRunGeneratorConfigurationInput.RunCommand, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetRunCommand() *string { return v.RunCommand }

type GcpCloudRunProjectV3ConfigurationInput struct {
	GcpAccountId uuid.UUID                               `json:"gcpAccountId"`
	GcpRegion    *string                                 `json:"gcpRegion"`
	Generator    *GcpCloudRunGeneratorConfigurationInput `json:"generator"`
}

// GetGcpAccountId returns GcpCloudRunProjectV3ConfigurationInput.GcpAccountId, and is useful for accessing the field via an interface.
func (v *GcpCloudRunProjectV3ConfigurationInput) GetGcpAccountId() uuid.UUID { return v.GcpAccountId }

// GetGcpRegion returns GcpCloudRunProjectV3ConfigurationInput.GcpRegion, and is useful for accessing the field via an interface.
func (v *GcpCloudRunProjectV3ConfigurationInput) GetGcpRegion() *string { return v.GcpRegion }

// GetGenerator returns GcpCloudRunProjectV3ConfigurationInput.Generator, and is useful for accessing the field via an interface.
func (v *GcpCloudRunProjectV3ConfigurationInput) GetGenerator() *GcpCloudRunGeneratorConfigurationInput {
	return v.Generator
}

type GcpClusterCreationOptions struct {
	EnableL4   bool `json:"enableL4"`
	EnableA100 bool `json:"enableA100"`
}

// GetEnableL4 returns GcpClusterCreationOptions.EnableL4, and is useful for accessing the field via an interface.
func (v *GcpClusterCreationOptions) GetEnableL4() bool { return v.EnableL4 }

// GetEnableA100 returns GcpClusterCreationOptions.EnableA100, and is useful for accessing the field via an interface.
func (v *GcpClusterCreationOptions) GetEnableA100() bool { return v.EnableA100 }

// GitHubRepo includes the GraphQL fields of GitHubRepository requested by the fragment GitHubRepo.
type GitHubRepo struct {
	Id              uuid.UUID `json:"id"`
	Name            string    `json:"name"`
	Owner           string    `json:"owner"`
	Url             string    `json:"url"`
	Description     *string   `json:"description"`
	IsFork          bool      `json:"isFork"`
	IsPrivate       bool      `json:"isPrivate"`
	PrimaryLanguage *string   `json:"primaryLanguage"`
	UpdatedAt       time.Time `json:"updatedAt"`
}

// GetId returns GitHubRepo.Id, and is useful for accessing the field via an interface.
func (v *GitHubRepo) GetId() uuid.UUID { return v.Id }

// GetName returns GitHubRepo.Name, and is useful for accessing the field via an interface.
func (v *GitHubRepo) GetName() string { return v.Name }

// GetOwner returns GitHubRepo.Owner, and is useful for accessing the field via an interface.
func (v *GitHubRepo) GetOwner() string { return v.Owner }

// GetUrl returns GitHubRepo.Url, and is useful for accessing the field via an interface.
func (v *GitHubRepo) GetUrl() string { return v.Url }

// GetDescription returns GitHubRepo.Description, and is useful for accessing the field via an interface.
func (v *GitHubRepo) GetDescription() *string { return v.Description }

// GetIsFork returns GitHubRepo.IsFork, and is useful for accessing the field via an interface.
func (v *GitHubRepo) GetIsFork() bool { return v.IsFork }

// GetIsPrivate returns GitHubRepo.IsPrivate, and is useful for accessing the field via an interface.
func (v *GitHubRepo) GetIsPrivate() bool { return v.IsPrivate }

// GetPrimaryLanguage returns GitHubRepo.PrimaryLanguage, and is useful for accessing the field via an interface.
func (v *GitHubRepo) GetPrimaryLanguage() *string { return v.PrimaryLanguage }

// GetUpdatedAt returns GitHubRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GitHubRepo) GetUpdatedAt() time.Time { return v.UpdatedAt }

type GitHubRepoIntegrationInput struct {
	GithubConnectionID  *int    `json:"githubConnectionID"`
	GithubOwner         *string `json:"githubOwner"`
	GithubName          *string `json:"githubName"`
	AutoDeployBranch    *bool   `json:"autoDeployBranch"`
	AutoStopBranch      *bool   `json:"autoStopBranch"`
	AutoStopPullRequest *bool   `json:"autoStopPullRequest"`
	BranchIgnore        *string `json:"branchIgnore"`
	BranchStopIgnore    *string `json:"branchStopIgnore"`
}

// GetGithubConnectionID returns GitHubRepoIntegrationInput.GithubConnectionID, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetGithubConnectionID() *int { return v.GithubConnectionID }

// GetGithubOwner returns GitHubRepoIntegrationInput.GithubOwner, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetGithubOwner() *string { return v.GithubOwner }

// GetGithubName returns GitHubRepoIntegrationInput.GithubName, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetGithubName() *string { return v.GithubName }

// GetAutoDeployBranch returns GitHubRepoIntegrationInput.AutoDeployBranch, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetAutoDeployBranch() *bool { return v.AutoDeployBranch }

// GetAutoStopBranch returns GitHubRepoIntegrationInput.AutoStopBranch, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetAutoStopBranch() *bool { return v.AutoStopBranch }

// GetAutoStopPullRequest returns GitHubRepoIntegrationInput.AutoStopPullRequest, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetAutoStopPullRequest() *bool { return v.AutoStopPullRequest }

// GetBranchIgnore returns GitHubRepoIntegrationInput.BranchIgnore, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetBranchIgnore() *string { return v.BranchIgnore }

// GetBranchStopIgnore returns GitHubRepoIntegrationInput.BranchStopIgnore, and is useful for accessing the field via an interface.
func (v *GitHubRepoIntegrationInput) GetBranchStopIgnore() *string { return v.BranchStopIgnore }

type GitSourceInput struct {
	Repository  string                     `json:"repository"`
	Ref         *string                    `json:"ref"`
	Path        *string                    `json:"path"`
	Integration *GitSourceIntegrationInput `json:"integration"`
}

// GetRepository returns GitSourceInput.Repository, and is useful for accessing the field via an interface.
func (v *GitSourceInput) GetRepository() string { return v.Repository }

// GetRef returns GitSourceInput.Ref, and is useful for accessing the field via an interface.
func (v *GitSourceInput) GetRef() *string { return v.Ref }

// GetPath returns GitSourceInput.Path, and is useful for accessing the field via an interface.
func (v *GitSourceInput) GetPath() *string { return v.Path }

// GetIntegration returns GitSourceInput.Integration, and is useful for accessing the field via an interface.
func (v *GitSourceInput) GetIntegration() *GitSourceIntegrationInput { return v.Integration }

type GitSourceIntegrationInput struct {
	GithubInstallationID   *int       `json:"githubInstallationID"`
	GithubIntegrationID    *uuid.UUID `json:"githubIntegrationID"`
	GitlabIntegrationID    *uuid.UUID `json:"gitlabIntegrationID"`
	BitbucketIntegrationID *uuid.UUID `json:"bitbucketIntegrationID"`
}

// GetGithubInstallationID returns GitSourceIntegrationInput.GithubInstallationID, and is useful for accessing the field via an interface.
func (v *GitSourceIntegrationInput) GetGithubInstallationID() *int { return v.GithubInstallationID }

// GetGithubIntegrationID returns GitSourceIntegrationInput.GithubIntegrationID, and is useful for accessing the field via an interface.
func (v *GitSourceIntegrationInput) GetGithubIntegrationID() *uuid.UUID { return v.GithubIntegrationID }

// GetGitlabIntegrationID returns GitSourceIntegrationInput.GitlabIntegrationID, and is useful for accessing the field via an interface.
func (v *GitSourceIntegrationInput) GetGitlabIntegrationID() *uuid.UUID { return v.GitlabIntegrationID }

// GetBitbucketIntegrationID returns GitSourceIntegrationInput.BitbucketIntegrationID, and is useful for accessing the field via an interface.
func (v *GitSourceIntegrationInput) GetBitbucketIntegrationID() *uuid.UUID {
	return v.BitbucketIntegrationID
}

type GitSubmodulesType string

const (
	GitSubmodulesTypeNone      GitSubmodulesType = "NONE"
	GitSubmodulesTypeRecursive GitSubmodulesType = "RECURSIVE"
)

type GithubConnectionInput struct {
	ApiUrl       *string `json:"apiUrl"`
	Installation string  `json:"installation"`
	Owner        string  `json:"owner"`
	Repo         string  `json:"repo"`
}

// GetApiUrl returns GithubConnectionInput.ApiUrl, and is useful for accessing the field via an interface.
func (v *GithubConnectionInput) GetApiUrl() *string { return v.ApiUrl }

// GetInstallation returns GithubConnectionInput.Installation, and is useful for accessing the field via an interface.
func (v *GithubConnectionInput) GetInstallation() string { return v.Installation }

// GetOwner returns GithubConnectionInput.Owner, and is useful for accessing the field via an interface.
func (v *GithubConnectionInput) GetOwner() string { return v.Owner }

// GetRepo returns GithubConnectionInput.Repo, and is useful for accessing the field via an interface.
func (v *GithubConnectionInput) GetRepo() string { return v.Repo }

// GithubDetail includes the GraphQL fields of GitHubRepository requested by the fragment GithubDetail.
type GithubDetail struct {
	DefaultBranch          *GithubDetailDefaultBranchGitBranch             `json:"defaultBranch"`
	Ports                  []GithubDetailPortsPort                         `json:"ports"`
	Volumes                []GithubDetailVolumesVolumeSpec                 `json:"volumes"`
	BuildMethodSuggestions []GithubDetailBuildMethodSuggestionsBuildMethod `json:"buildMethodSuggestions"`
}

// GetDefaultBranch returns GithubDetail.DefaultBranch, and is useful for accessing the field via an interface.
func (v *GithubDetail) GetDefaultBranch() *GithubDetailDefaultBranchGitBranch { return v.DefaultBranch }

// GetPorts returns GithubDetail.Ports, and is useful for accessing the field via an interface.
func (v *GithubDetail) GetPorts() []GithubDetailPortsPort { return v.Ports }

// GetVolumes returns GithubDetail.Volumes, and is useful for accessing the field via an interface.
func (v *GithubDetail) GetVolumes() []GithubDetailVolumesVolumeSpec { return v.Volumes }

// GetBuildMethodSuggestions returns GithubDetail.BuildMethodSuggestions, and is useful for accessing the field via an interface.
func (v *GithubDetail) GetBuildMethodSuggestions() []GithubDetailBuildMethodSuggestionsBuildMethod {
	return v.BuildMethodSuggestions
}

// GithubDetailBuildMethodSuggestionsBuildMethod includes the requested fields of the GraphQL type BuildMethod.
type GithubDetailBuildMethodSuggestionsBuildMethod struct {
	Name           string    `json:"name"`
	Type           BuildType `json:"type"`
	DockerfilePath *string   `json:"dockerfilePath"`
	BuildCommand   *string   `json:"buildCommand"`
	StaticPath     *string   `json:"staticPath"`
	RunCommand     *string   `json:"runCommand"`
}

// GetName returns GithubDetailBuildMethodSuggestionsBuildMethod.Name, and is useful for accessing the field via an interface.
func (v *GithubDetailBuildMethodSuggestionsBuildMethod) GetName() string { return v.Name }

// GetType returns GithubDetailBuildMethodSuggestionsBuildMethod.Type, and is useful for accessing the field via an interface.
func (v *GithubDetailBuildMethodSuggestionsBuildMethod) GetType() BuildType { return v.Type }

// GetDockerfilePath returns GithubDetailBuildMethodSuggestionsBuildMethod.DockerfilePath, and is useful for accessing the field via an interface.
func (v *GithubDetailBuildMethodSuggestionsBuildMethod) GetDockerfilePath() *string {
	return v.DockerfilePath
}

// GetBuildCommand returns GithubDetailBuildMethodSuggestionsBuildMethod.BuildCommand, and is useful for accessing the field via an interface.
func (v *GithubDetailBuildMethodSuggestionsBuildMethod) GetBuildCommand() *string {
	return v.BuildCommand
}

// GetStaticPath returns GithubDetailBuildMethodSuggestionsBuildMethod.StaticPath, and is useful for accessing the field via an interface.
func (v *GithubDetailBuildMethodSuggestionsBuildMethod) GetStaticPath() *string { return v.StaticPath }

// GetRunCommand returns GithubDetailBuildMethodSuggestionsBuildMethod.RunCommand, and is useful for accessing the field via an interface.
func (v *GithubDetailBuildMethodSuggestionsBuildMethod) GetRunCommand() *string { return v.RunCommand }

// GithubDetailDefaultBranchGitBranch includes the requested fields of the GraphQL type GitBranch.
type GithubDetailDefaultBranchGitBranch struct {
	Name string `json:"name"`
}

// GetName returns GithubDetailDefaultBranchGitBranch.Name, and is useful for accessing the field via an interface.
func (v *GithubDetailDefaultBranchGitBranch) GetName() string { return v.Name }

// GithubDetailPortsPort includes the requested fields of the GraphQL type Port.
type GithubDetailPortsPort struct {
	Port     string `json:"port"`
	Protocol string `json:"protocol"`
	Https    bool   `json:"https"`
	Public   bool   `json:"public"`
}

// GetPort returns GithubDetailPortsPort.Port, and is useful for accessing the field via an interface.
func (v *GithubDetailPortsPort) GetPort() string { return v.Port }

// GetProtocol returns GithubDetailPortsPort.Protocol, and is useful for accessing the field via an interface.
func (v *GithubDetailPortsPort) GetProtocol() string { return v.Protocol }

// GetHttps returns GithubDetailPortsPort.Https, and is useful for accessing the field via an interface.
func (v *GithubDetailPortsPort) GetHttps() bool { return v.Https }

// GetPublic returns GithubDetailPortsPort.Public, and is useful for accessing the field via an interface.
func (v *GithubDetailPortsPort) GetPublic() bool { return v.Public }

// GithubDetailVolumesVolumeSpec includes the requested fields of the GraphQL type VolumeSpec.
type GithubDetailVolumesVolumeSpec struct {
	MountPath string `json:"mountPath"`
	Size      int    `json:"size"`
}

// GetMountPath returns GithubDetailVolumesVolumeSpec.MountPath, and is useful for accessing the field via an interface.
func (v *GithubDetailVolumesVolumeSpec) GetMountPath() string { return v.MountPath }

// GetSize returns GithubDetailVolumesVolumeSpec.Size, and is useful for accessing the field via an interface.
func (v *GithubDetailVolumesVolumeSpec) GetSize() int { return v.Size }

type GithubUserType string

const (
	GithubUserTypeUser         GithubUserType = "User"
	GithubUserTypeOrganization GithubUserType = "Organization"
)

type GitlabConnectionInput struct {
	GitlabIntegrationID uuid.UUID `json:"gitlabIntegrationID"`
	ProjectPath         *string   `json:"projectPath"`
}

// GetGitlabIntegrationID returns GitlabConnectionInput.GitlabIntegrationID, and is useful for accessing the field via an interface.
func (v *GitlabConnectionInput) GetGitlabIntegrationID() uuid.UUID { return v.GitlabIntegrationID }

// GetProjectPath returns GitlabConnectionInput.ProjectPath, and is useful for accessing the field via an interface.
func (v *GitlabConnectionInput) GetProjectPath() *string { return v.ProjectPath }

type GitlabRepoIntegrationInput struct {
	GitlabConnection    *GitlabConnectionInput `json:"gitlabConnection"`
	AutoDeployBranch    *bool                  `json:"autoDeployBranch"`
	AutoStopBranch      *bool                  `json:"autoStopBranch"`
	AutoStopPullRequest *bool                  `json:"autoStopPullRequest"`
	BranchIgnore        *string                `json:"branchIgnore"`
	BranchStopIgnore    *string                `json:"branchStopIgnore"`
}

// GetGitlabConnection returns GitlabRepoIntegrationInput.GitlabConnection, and is useful for accessing the field via an interface.
func (v *GitlabRepoIntegrationInput) GetGitlabConnection() *GitlabConnectionInput {
	return v.GitlabConnection
}

// GetAutoDeployBranch returns GitlabRepoIntegrationInput.AutoDeployBranch, and is useful for accessing the field via an interface.
func (v *GitlabRepoIntegrationInput) GetAutoDeployBranch() *bool { return v.AutoDeployBranch }

// GetAutoStopBranch returns GitlabRepoIntegrationInput.AutoStopBranch, and is useful for accessing the field via an interface.
func (v *GitlabRepoIntegrationInput) GetAutoStopBranch() *bool { return v.AutoStopBranch }

// GetAutoStopPullRequest returns GitlabRepoIntegrationInput.AutoStopPullRequest, and is useful for accessing the field via an interface.
func (v *GitlabRepoIntegrationInput) GetAutoStopPullRequest() *bool { return v.AutoStopPullRequest }

// GetBranchIgnore returns GitlabRepoIntegrationInput.BranchIgnore, and is useful for accessing the field via an interface.
func (v *GitlabRepoIntegrationInput) GetBranchIgnore() *string { return v.BranchIgnore }

// GetBranchStopIgnore returns GitlabRepoIntegrationInput.BranchStopIgnore, and is useful for accessing the field via an interface.
func (v *GitlabRepoIntegrationInput) GetBranchStopIgnore() *string { return v.BranchStopIgnore }

// GroupListItem includes the GraphQL fields of Project requested by the fragment GroupListItem.
type GroupListItem struct {
	// - v0.ProjectID or v1.GroupID
	Id           uuid.UUID                                     `json:"id"`
	Name         string                                        `json:"name"`
	UpdatedAt    time.Time                                     `json:"updatedAt"`
	Environments []GroupListItemEnvironmentsProjectEnvironment `json:"environments"`
}

// GetId returns GroupListItem.Id, and is useful for accessing the field via an interface.
func (v *GroupListItem) GetId() uuid.UUID { return v.Id }

// GetName returns GroupListItem.Name, and is useful for accessing the field via an interface.
func (v *GroupListItem) GetName() string { return v.Name }

// GetUpdatedAt returns GroupListItem.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GroupListItem) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetEnvironments returns GroupListItem.Environments, and is useful for accessing the field via an interface.
func (v *GroupListItem) GetEnvironments() []GroupListItemEnvironmentsProjectEnvironment {
	return v.Environments
}

// GroupListItemEnvironmentsProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type GroupListItemEnvironmentsProjectEnvironment struct {
	SubgroupListItem `json:"-"`
}

// GetId returns GroupListItemEnvironmentsProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *GroupListItemEnvironmentsProjectEnvironment) GetId() uuid.UUID { return v.SubgroupListItem.Id }

// GetName returns GroupListItemEnvironmentsProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *GroupListItemEnvironmentsProjectEnvironment) GetName() string {
	return v.SubgroupListItem.Name
}

// GetUpdatedAt returns GroupListItemEnvironmentsProjectEnvironment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GroupListItemEnvironmentsProjectEnvironment) GetUpdatedAt() time.Time {
	return v.SubgroupListItem.UpdatedAt
}

func (v *GroupListItemEnvironmentsProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GroupListItemEnvironmentsProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.GroupListItemEnvironmentsProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.SubgroupListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGroupListItemEnvironmentsProjectEnvironment struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *GroupListItemEnvironmentsProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GroupListItemEnvironmentsProjectEnvironment) __premarshalJSON() (*__premarshalGroupListItemEnvironmentsProjectEnvironment, error) {
	var retval __premarshalGroupListItemEnvironmentsProjectEnvironment

	retval.Id = v.SubgroupListItem.Id
	retval.Name = v.SubgroupListItem.Name
	retval.UpdatedAt = v.SubgroupListItem.UpdatedAt
	return &retval, nil
}

// HelmCommon includes the GraphQL fields of HelmChart requested by the fragment HelmCommon.
type HelmCommon struct {
	Id          string                             `json:"id"`
	Name        *string                            `json:"name"`
	Description *string                            `json:"description"`
	LogoImage   *string                            `json:"logoImage"`
	Version     *string                            `json:"version"`
	App_version *string                            `json:"app_version"`
	Repository  HelmCommonRepositoryHelmRepository `json:"repository"`
}

// GetId returns HelmCommon.Id, and is useful for accessing the field via an interface.
func (v *HelmCommon) GetId() string { return v.Id }

// GetName returns HelmCommon.Name, and is useful for accessing the field via an interface.
func (v *HelmCommon) GetName() *string { return v.Name }

// GetDescription returns HelmCommon.Description, and is useful for accessing the field via an interface.
func (v *HelmCommon) GetDescription() *string { return v.Description }

// GetLogoImage returns HelmCommon.LogoImage, and is useful for accessing the field via an interface.
func (v *HelmCommon) GetLogoImage() *string { return v.LogoImage }

// GetVersion returns HelmCommon.Version, and is useful for accessing the field via an interface.
func (v *HelmCommon) GetVersion() *string { return v.Version }

// GetApp_version returns HelmCommon.App_version, and is useful for accessing the field via an interface.
func (v *HelmCommon) GetApp_version() *string { return v.App_version }

// GetRepository returns HelmCommon.Repository, and is useful for accessing the field via an interface.
func (v *HelmCommon) GetRepository() HelmCommonRepositoryHelmRepository { return v.Repository }

// HelmCommonRepositoryHelmRepository includes the requested fields of the GraphQL type HelmRepository.
type HelmCommonRepositoryHelmRepository struct {
	Id   string  `json:"id"`
	Name *string `json:"name"`
	Url  *string `json:"url"`
}

// GetId returns HelmCommonRepositoryHelmRepository.Id, and is useful for accessing the field via an interface.
func (v *HelmCommonRepositoryHelmRepository) GetId() string { return v.Id }

// GetName returns HelmCommonRepositoryHelmRepository.Name, and is useful for accessing the field via an interface.
func (v *HelmCommonRepositoryHelmRepository) GetName() *string { return v.Name }

// GetUrl returns HelmCommonRepositoryHelmRepository.Url, and is useful for accessing the field via an interface.
func (v *HelmCommonRepositoryHelmRepository) GetUrl() *string { return v.Url }

type HelmProjectV3ConfigurationInput struct {
	ClusterID   uuid.UUID `json:"clusterID"`
	Namespace   *string   `json:"namespace"`
	ReleaseName string    `json:"releaseName"`
	Values      *string   `json:"values"`
}

// GetClusterID returns HelmProjectV3ConfigurationInput.ClusterID, and is useful for accessing the field via an interface.
func (v *HelmProjectV3ConfigurationInput) GetClusterID() uuid.UUID { return v.ClusterID }

// GetNamespace returns HelmProjectV3ConfigurationInput.Namespace, and is useful for accessing the field via an interface.
func (v *HelmProjectV3ConfigurationInput) GetNamespace() *string { return v.Namespace }

// GetReleaseName returns HelmProjectV3ConfigurationInput.ReleaseName, and is useful for accessing the field via an interface.
func (v *HelmProjectV3ConfigurationInput) GetReleaseName() string { return v.ReleaseName }

// GetValues returns HelmProjectV3ConfigurationInput.Values, and is useful for accessing the field via an interface.
func (v *HelmProjectV3ConfigurationInput) GetValues() *string { return v.Values }

type HelmRepositorySourceInput struct {
	RepositoryURL string  `json:"repositoryURL"`
	Chart         string  `json:"chart"`
	Version       *string `json:"version"`
}

// GetRepositoryURL returns HelmRepositorySourceInput.RepositoryURL, and is useful for accessing the field via an interface.
func (v *HelmRepositorySourceInput) GetRepositoryURL() string { return v.RepositoryURL }

// GetChart returns HelmRepositorySourceInput.Chart, and is useful for accessing the field via an interface.
func (v *HelmRepositorySourceInput) GetChart() string { return v.Chart }

// GetVersion returns HelmRepositorySourceInput.Version, and is useful for accessing the field via an interface.
func (v *HelmRepositorySourceInput) GetVersion() *string { return v.Version }

type IPFSServiceState string

const (
	IPFSServiceStateCreating IPFSServiceState = "CREATING"
	IPFSServiceStateHealthy  IPFSServiceState = "HEALTHY"
	IPFSServiceStateDeleting IPFSServiceState = "DELETING"
	IPFSServiceStateError    IPFSServiceState = "ERROR"
)

// IntegrationCommon includes the GraphQL fields of Integration requested by the fragment IntegrationCommon.
//
// IntegrationCommon is implemented by the following types:
// IntegrationCommonBitbucketIntegration
// IntegrationCommonDatadogIntegration
// IntegrationCommonDiscordIntegration
// IntegrationCommonDiscordWebhookIntegration
// IntegrationCommonEmailIntegration
// IntegrationCommonGithubIntegration
// IntegrationCommonGitlabIntegration
// IntegrationCommonSlackIntegration
// IntegrationCommonSlackWebhookIntegration
type IntegrationCommon interface {
	implementsGraphQLInterfaceIntegrationCommon()
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	// GetType returns the interface-field "type" from its implementation.
	GetType() IntegrationType
	// GetName returns the interface-field "name" from its implementation.
	GetName() string
	// GetDescription returns the interface-field "description" from its implementation.
	GetDescription() string
	// GetImage returns the interface-field "image" from its implementation.
	GetImage() string
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() time.Time
}

func (v *IntegrationCommonBitbucketIntegration) implementsGraphQLInterfaceIntegrationCommon()      {}
func (v *IntegrationCommonDatadogIntegration) implementsGraphQLInterfaceIntegrationCommon()        {}
func (v *IntegrationCommonDiscordIntegration) implementsGraphQLInterfaceIntegrationCommon()        {}
func (v *IntegrationCommonDiscordWebhookIntegration) implementsGraphQLInterfaceIntegrationCommon() {}
func (v *IntegrationCommonEmailIntegration) implementsGraphQLInterfaceIntegrationCommon()          {}
func (v *IntegrationCommonGithubIntegration) implementsGraphQLInterfaceIntegrationCommon()         {}
func (v *IntegrationCommonGitlabIntegration) implementsGraphQLInterfaceIntegrationCommon()         {}
func (v *IntegrationCommonSlackIntegration) implementsGraphQLInterfaceIntegrationCommon()          {}
func (v *IntegrationCommonSlackWebhookIntegration) implementsGraphQLInterfaceIntegrationCommon()   {}

func __unmarshalIntegrationCommon(b []byte, v *IntegrationCommon) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BitbucketIntegration":
		*v = new(IntegrationCommonBitbucketIntegration)
		return json.Unmarshal(b, *v)
	case "DatadogIntegration":
		*v = new(IntegrationCommonDatadogIntegration)
		return json.Unmarshal(b, *v)
	case "DiscordIntegration":
		*v = new(IntegrationCommonDiscordIntegration)
		return json.Unmarshal(b, *v)
	case "DiscordWebhookIntegration":
		*v = new(IntegrationCommonDiscordWebhookIntegration)
		return json.Unmarshal(b, *v)
	case "EmailIntegration":
		*v = new(IntegrationCommonEmailIntegration)
		return json.Unmarshal(b, *v)
	case "GithubIntegration":
		*v = new(IntegrationCommonGithubIntegration)
		return json.Unmarshal(b, *v)
	case "GitlabIntegration":
		*v = new(IntegrationCommonGitlabIntegration)
		return json.Unmarshal(b, *v)
	case "SlackIntegration":
		*v = new(IntegrationCommonSlackIntegration)
		return json.Unmarshal(b, *v)
	case "SlackWebhookIntegration":
		*v = new(IntegrationCommonSlackWebhookIntegration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Integration.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for IntegrationCommon: "%v"`, tn.TypeName)
	}
}

func __marshalIntegrationCommon(v *IntegrationCommon) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *IntegrationCommonBitbucketIntegration:
		typename = "BitbucketIntegration"

		result := struct {
			TypeName string `json:"__typename"`
			*IntegrationCommonBitbucketIntegration
		}{typename, v}
		return json.Marshal(result)
	case *IntegrationCommonDatadogIntegration:
		typename = "DatadogIntegration"

		result := struct {
			TypeName string `json:"__typename"`
			*IntegrationCommonDatadogIntegration
		}{typename, v}
		return json.Marshal(result)
	case *IntegrationCommonDiscordIntegration:
		typename = "DiscordIntegration"

		result := struct {
			TypeName string `json:"__typename"`
			*IntegrationCommonDiscordIntegration
		}{typename, v}
		return json.Marshal(result)
	case *IntegrationCommonDiscordWebhookIntegration:
		typename = "DiscordWebhookIntegration"

		result := struct {
			TypeName string `json:"__typename"`
			*IntegrationCommonDiscordWebhookIntegration
		}{typename, v}
		return json.Marshal(result)
	case *IntegrationCommonEmailIntegration:
		typename = "EmailIntegration"

		result := struct {
			TypeName string `json:"__typename"`
			*IntegrationCommonEmailIntegration
		}{typename, v}
		return json.Marshal(result)
	case *IntegrationCommonGithubIntegration:
		typename = "GithubIntegration"

		result := struct {
			TypeName string `json:"__typename"`
			*IntegrationCommonGithubIntegration
		}{typename, v}
		return json.Marshal(result)
	case *IntegrationCommonGitlabIntegration:
		typename = "GitlabIntegration"

		result := struct {
			TypeName string `json:"__typename"`
			*IntegrationCommonGitlabIntegration
		}{typename, v}
		return json.Marshal(result)
	case *IntegrationCommonSlackIntegration:
		typename = "SlackIntegration"

		result := struct {
			TypeName string `json:"__typename"`
			*IntegrationCommonSlackIntegration
		}{typename, v}
		return json.Marshal(result)
	case *IntegrationCommonSlackWebhookIntegration:
		typename = "SlackWebhookIntegration"

		result := struct {
			TypeName string `json:"__typename"`
			*IntegrationCommonSlackWebhookIntegration
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for IntegrationCommon: "%T"`, v)
	}
}

// IntegrationCommon includes the GraphQL fields of BitbucketIntegration requested by the fragment IntegrationCommon.
type IntegrationCommonBitbucketIntegration struct {
	Id          uuid.UUID       `json:"id"`
	Type        IntegrationType `json:"type"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Image       string          `json:"image"`
	CreatedAt   time.Time       `json:"createdAt"`
	UpdatedAt   time.Time       `json:"updatedAt"`
}

// GetId returns IntegrationCommonBitbucketIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationCommonBitbucketIntegration) GetId() uuid.UUID { return v.Id }

// GetType returns IntegrationCommonBitbucketIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationCommonBitbucketIntegration) GetType() IntegrationType { return v.Type }

// GetName returns IntegrationCommonBitbucketIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationCommonBitbucketIntegration) GetName() string { return v.Name }

// GetDescription returns IntegrationCommonBitbucketIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationCommonBitbucketIntegration) GetDescription() string { return v.Description }

// GetImage returns IntegrationCommonBitbucketIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationCommonBitbucketIntegration) GetImage() string { return v.Image }

// GetCreatedAt returns IntegrationCommonBitbucketIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonBitbucketIntegration) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns IntegrationCommonBitbucketIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonBitbucketIntegration) GetUpdatedAt() time.Time { return v.UpdatedAt }

// IntegrationCommon includes the GraphQL fields of DatadogIntegration requested by the fragment IntegrationCommon.
type IntegrationCommonDatadogIntegration struct {
	Id          uuid.UUID       `json:"id"`
	Type        IntegrationType `json:"type"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Image       string          `json:"image"`
	CreatedAt   time.Time       `json:"createdAt"`
	UpdatedAt   time.Time       `json:"updatedAt"`
}

// GetId returns IntegrationCommonDatadogIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDatadogIntegration) GetId() uuid.UUID { return v.Id }

// GetType returns IntegrationCommonDatadogIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDatadogIntegration) GetType() IntegrationType { return v.Type }

// GetName returns IntegrationCommonDatadogIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDatadogIntegration) GetName() string { return v.Name }

// GetDescription returns IntegrationCommonDatadogIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDatadogIntegration) GetDescription() string { return v.Description }

// GetImage returns IntegrationCommonDatadogIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDatadogIntegration) GetImage() string { return v.Image }

// GetCreatedAt returns IntegrationCommonDatadogIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDatadogIntegration) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns IntegrationCommonDatadogIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDatadogIntegration) GetUpdatedAt() time.Time { return v.UpdatedAt }

// IntegrationCommon includes the GraphQL fields of DiscordIntegration requested by the fragment IntegrationCommon.
type IntegrationCommonDiscordIntegration struct {
	Id          uuid.UUID       `json:"id"`
	Type        IntegrationType `json:"type"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Image       string          `json:"image"`
	CreatedAt   time.Time       `json:"createdAt"`
	UpdatedAt   time.Time       `json:"updatedAt"`
}

// GetId returns IntegrationCommonDiscordIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordIntegration) GetId() uuid.UUID { return v.Id }

// GetType returns IntegrationCommonDiscordIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordIntegration) GetType() IntegrationType { return v.Type }

// GetName returns IntegrationCommonDiscordIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordIntegration) GetName() string { return v.Name }

// GetDescription returns IntegrationCommonDiscordIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordIntegration) GetDescription() string { return v.Description }

// GetImage returns IntegrationCommonDiscordIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordIntegration) GetImage() string { return v.Image }

// GetCreatedAt returns IntegrationCommonDiscordIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordIntegration) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns IntegrationCommonDiscordIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordIntegration) GetUpdatedAt() time.Time { return v.UpdatedAt }

// IntegrationCommon includes the GraphQL fields of DiscordWebhookIntegration requested by the fragment IntegrationCommon.
type IntegrationCommonDiscordWebhookIntegration struct {
	Id          uuid.UUID       `json:"id"`
	Type        IntegrationType `json:"type"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Image       string          `json:"image"`
	CreatedAt   time.Time       `json:"createdAt"`
	UpdatedAt   time.Time       `json:"updatedAt"`
}

// GetId returns IntegrationCommonDiscordWebhookIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordWebhookIntegration) GetId() uuid.UUID { return v.Id }

// GetType returns IntegrationCommonDiscordWebhookIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordWebhookIntegration) GetType() IntegrationType { return v.Type }

// GetName returns IntegrationCommonDiscordWebhookIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordWebhookIntegration) GetName() string { return v.Name }

// GetDescription returns IntegrationCommonDiscordWebhookIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordWebhookIntegration) GetDescription() string { return v.Description }

// GetImage returns IntegrationCommonDiscordWebhookIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordWebhookIntegration) GetImage() string { return v.Image }

// GetCreatedAt returns IntegrationCommonDiscordWebhookIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordWebhookIntegration) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns IntegrationCommonDiscordWebhookIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonDiscordWebhookIntegration) GetUpdatedAt() time.Time { return v.UpdatedAt }

// IntegrationCommon includes the GraphQL fields of EmailIntegration requested by the fragment IntegrationCommon.
type IntegrationCommonEmailIntegration struct {
	Id          uuid.UUID       `json:"id"`
	Type        IntegrationType `json:"type"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Image       string          `json:"image"`
	CreatedAt   time.Time       `json:"createdAt"`
	UpdatedAt   time.Time       `json:"updatedAt"`
}

// GetId returns IntegrationCommonEmailIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationCommonEmailIntegration) GetId() uuid.UUID { return v.Id }

// GetType returns IntegrationCommonEmailIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationCommonEmailIntegration) GetType() IntegrationType { return v.Type }

// GetName returns IntegrationCommonEmailIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationCommonEmailIntegration) GetName() string { return v.Name }

// GetDescription returns IntegrationCommonEmailIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationCommonEmailIntegration) GetDescription() string { return v.Description }

// GetImage returns IntegrationCommonEmailIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationCommonEmailIntegration) GetImage() string { return v.Image }

// GetCreatedAt returns IntegrationCommonEmailIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonEmailIntegration) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns IntegrationCommonEmailIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonEmailIntegration) GetUpdatedAt() time.Time { return v.UpdatedAt }

// IntegrationCommon includes the GraphQL fields of GithubIntegration requested by the fragment IntegrationCommon.
type IntegrationCommonGithubIntegration struct {
	Id          uuid.UUID       `json:"id"`
	Type        IntegrationType `json:"type"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Image       string          `json:"image"`
	CreatedAt   time.Time       `json:"createdAt"`
	UpdatedAt   time.Time       `json:"updatedAt"`
}

// GetId returns IntegrationCommonGithubIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGithubIntegration) GetId() uuid.UUID { return v.Id }

// GetType returns IntegrationCommonGithubIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGithubIntegration) GetType() IntegrationType { return v.Type }

// GetName returns IntegrationCommonGithubIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGithubIntegration) GetName() string { return v.Name }

// GetDescription returns IntegrationCommonGithubIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGithubIntegration) GetDescription() string { return v.Description }

// GetImage returns IntegrationCommonGithubIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGithubIntegration) GetImage() string { return v.Image }

// GetCreatedAt returns IntegrationCommonGithubIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGithubIntegration) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns IntegrationCommonGithubIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGithubIntegration) GetUpdatedAt() time.Time { return v.UpdatedAt }

// IntegrationCommon includes the GraphQL fields of GitlabIntegration requested by the fragment IntegrationCommon.
type IntegrationCommonGitlabIntegration struct {
	Id          uuid.UUID       `json:"id"`
	Type        IntegrationType `json:"type"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Image       string          `json:"image"`
	CreatedAt   time.Time       `json:"createdAt"`
	UpdatedAt   time.Time       `json:"updatedAt"`
}

// GetId returns IntegrationCommonGitlabIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGitlabIntegration) GetId() uuid.UUID { return v.Id }

// GetType returns IntegrationCommonGitlabIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGitlabIntegration) GetType() IntegrationType { return v.Type }

// GetName returns IntegrationCommonGitlabIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGitlabIntegration) GetName() string { return v.Name }

// GetDescription returns IntegrationCommonGitlabIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGitlabIntegration) GetDescription() string { return v.Description }

// GetImage returns IntegrationCommonGitlabIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGitlabIntegration) GetImage() string { return v.Image }

// GetCreatedAt returns IntegrationCommonGitlabIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGitlabIntegration) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns IntegrationCommonGitlabIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonGitlabIntegration) GetUpdatedAt() time.Time { return v.UpdatedAt }

// IntegrationCommon includes the GraphQL fields of SlackIntegration requested by the fragment IntegrationCommon.
type IntegrationCommonSlackIntegration struct {
	Id          uuid.UUID       `json:"id"`
	Type        IntegrationType `json:"type"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Image       string          `json:"image"`
	CreatedAt   time.Time       `json:"createdAt"`
	UpdatedAt   time.Time       `json:"updatedAt"`
}

// GetId returns IntegrationCommonSlackIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackIntegration) GetId() uuid.UUID { return v.Id }

// GetType returns IntegrationCommonSlackIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackIntegration) GetType() IntegrationType { return v.Type }

// GetName returns IntegrationCommonSlackIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackIntegration) GetName() string { return v.Name }

// GetDescription returns IntegrationCommonSlackIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackIntegration) GetDescription() string { return v.Description }

// GetImage returns IntegrationCommonSlackIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackIntegration) GetImage() string { return v.Image }

// GetCreatedAt returns IntegrationCommonSlackIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackIntegration) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns IntegrationCommonSlackIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackIntegration) GetUpdatedAt() time.Time { return v.UpdatedAt }

// IntegrationCommon includes the GraphQL fields of SlackWebhookIntegration requested by the fragment IntegrationCommon.
type IntegrationCommonSlackWebhookIntegration struct {
	Id          uuid.UUID       `json:"id"`
	Type        IntegrationType `json:"type"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Image       string          `json:"image"`
	CreatedAt   time.Time       `json:"createdAt"`
	UpdatedAt   time.Time       `json:"updatedAt"`
}

// GetId returns IntegrationCommonSlackWebhookIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackWebhookIntegration) GetId() uuid.UUID { return v.Id }

// GetType returns IntegrationCommonSlackWebhookIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackWebhookIntegration) GetType() IntegrationType { return v.Type }

// GetName returns IntegrationCommonSlackWebhookIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackWebhookIntegration) GetName() string { return v.Name }

// GetDescription returns IntegrationCommonSlackWebhookIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackWebhookIntegration) GetDescription() string { return v.Description }

// GetImage returns IntegrationCommonSlackWebhookIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackWebhookIntegration) GetImage() string { return v.Image }

// GetCreatedAt returns IntegrationCommonSlackWebhookIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackWebhookIntegration) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns IntegrationCommonSlackWebhookIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationCommonSlackWebhookIntegration) GetUpdatedAt() time.Time { return v.UpdatedAt }

// IntegrationDetail includes the GraphQL fields of Integration requested by the fragment IntegrationDetail.
//
// IntegrationDetail is implemented by the following types:
// IntegrationDetailBitbucketIntegration
// IntegrationDetailDatadogIntegration
// IntegrationDetailDiscordIntegration
// IntegrationDetailDiscordWebhookIntegration
// IntegrationDetailEmailIntegration
// IntegrationDetailGithubIntegration
// IntegrationDetailGitlabIntegration
// IntegrationDetailSlackIntegration
// IntegrationDetailSlackWebhookIntegration
type IntegrationDetail interface {
	implementsGraphQLInterfaceIntegrationDetail()
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	IntegrationCommon
}

func (v *IntegrationDetailBitbucketIntegration) implementsGraphQLInterfaceIntegrationDetail()      {}
func (v *IntegrationDetailBitbucketIntegration) implementsGraphQLInterfaceIntegrationCommon()      {}
func (v *IntegrationDetailDatadogIntegration) implementsGraphQLInterfaceIntegrationDetail()        {}
func (v *IntegrationDetailDatadogIntegration) implementsGraphQLInterfaceIntegrationCommon()        {}
func (v *IntegrationDetailDiscordIntegration) implementsGraphQLInterfaceIntegrationDetail()        {}
func (v *IntegrationDetailDiscordIntegration) implementsGraphQLInterfaceIntegrationCommon()        {}
func (v *IntegrationDetailDiscordWebhookIntegration) implementsGraphQLInterfaceIntegrationDetail() {}
func (v *IntegrationDetailDiscordWebhookIntegration) implementsGraphQLInterfaceIntegrationCommon() {}
func (v *IntegrationDetailEmailIntegration) implementsGraphQLInterfaceIntegrationDetail()          {}
func (v *IntegrationDetailEmailIntegration) implementsGraphQLInterfaceIntegrationCommon()          {}
func (v *IntegrationDetailGithubIntegration) implementsGraphQLInterfaceIntegrationDetail()         {}
func (v *IntegrationDetailGithubIntegration) implementsGraphQLInterfaceIntegrationCommon()         {}
func (v *IntegrationDetailGitlabIntegration) implementsGraphQLInterfaceIntegrationDetail()         {}
func (v *IntegrationDetailGitlabIntegration) implementsGraphQLInterfaceIntegrationCommon()         {}
func (v *IntegrationDetailSlackIntegration) implementsGraphQLInterfaceIntegrationDetail()          {}
func (v *IntegrationDetailSlackIntegration) implementsGraphQLInterfaceIntegrationCommon()          {}
func (v *IntegrationDetailSlackWebhookIntegration) implementsGraphQLInterfaceIntegrationDetail()   {}
func (v *IntegrationDetailSlackWebhookIntegration) implementsGraphQLInterfaceIntegrationCommon()   {}

func __unmarshalIntegrationDetail(b []byte, v *IntegrationDetail) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BitbucketIntegration":
		*v = new(IntegrationDetailBitbucketIntegration)
		return json.Unmarshal(b, *v)
	case "DatadogIntegration":
		*v = new(IntegrationDetailDatadogIntegration)
		return json.Unmarshal(b, *v)
	case "DiscordIntegration":
		*v = new(IntegrationDetailDiscordIntegration)
		return json.Unmarshal(b, *v)
	case "DiscordWebhookIntegration":
		*v = new(IntegrationDetailDiscordWebhookIntegration)
		return json.Unmarshal(b, *v)
	case "EmailIntegration":
		*v = new(IntegrationDetailEmailIntegration)
		return json.Unmarshal(b, *v)
	case "GithubIntegration":
		*v = new(IntegrationDetailGithubIntegration)
		return json.Unmarshal(b, *v)
	case "GitlabIntegration":
		*v = new(IntegrationDetailGitlabIntegration)
		return json.Unmarshal(b, *v)
	case "SlackIntegration":
		*v = new(IntegrationDetailSlackIntegration)
		return json.Unmarshal(b, *v)
	case "SlackWebhookIntegration":
		*v = new(IntegrationDetailSlackWebhookIntegration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Integration.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for IntegrationDetail: "%v"`, tn.TypeName)
	}
}

func __marshalIntegrationDetail(v *IntegrationDetail) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *IntegrationDetailBitbucketIntegration:
		typename = "BitbucketIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalIntegrationDetailBitbucketIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *IntegrationDetailDatadogIntegration:
		typename = "DatadogIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalIntegrationDetailDatadogIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *IntegrationDetailDiscordIntegration:
		typename = "DiscordIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalIntegrationDetailDiscordIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *IntegrationDetailDiscordWebhookIntegration:
		typename = "DiscordWebhookIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalIntegrationDetailDiscordWebhookIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *IntegrationDetailEmailIntegration:
		typename = "EmailIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalIntegrationDetailEmailIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *IntegrationDetailGithubIntegration:
		typename = "GithubIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalIntegrationDetailGithubIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *IntegrationDetailGitlabIntegration:
		typename = "GitlabIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalIntegrationDetailGitlabIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *IntegrationDetailSlackIntegration:
		typename = "SlackIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalIntegrationDetailSlackIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *IntegrationDetailSlackWebhookIntegration:
		typename = "SlackWebhookIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalIntegrationDetailSlackWebhookIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for IntegrationDetail: "%T"`, v)
	}
}

// IntegrationDetailAccountBitbucketAccount includes the requested fields of the GraphQL type BitbucketAccount.
type IntegrationDetailAccountBitbucketAccount struct {
	Username string `json:"username"`
}

// GetUsername returns IntegrationDetailAccountBitbucketAccount.Username, and is useful for accessing the field via an interface.
func (v *IntegrationDetailAccountBitbucketAccount) GetUsername() string { return v.Username }

// IntegrationDetail includes the GraphQL fields of BitbucketIntegration requested by the fragment IntegrationDetail.
type IntegrationDetailBitbucketIntegration struct {
	Id                                    uuid.UUID `json:"id"`
	IntegrationCommonBitbucketIntegration `json:"-"`
	WebhookUrl                            string                                    `json:"webhookUrl"`
	WebhookToken                          string                                    `json:"webhookToken"`
	Account                               *IntegrationDetailAccountBitbucketAccount `json:"account"`
	AuthType                              BitbucketIntegrationAuthType              `json:"authType"`
}

// GetId returns IntegrationDetailBitbucketIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationDetailBitbucketIntegration) GetId() uuid.UUID { return v.Id }

// GetWebhookUrl returns IntegrationDetailBitbucketIntegration.WebhookUrl, and is useful for accessing the field via an interface.
func (v *IntegrationDetailBitbucketIntegration) GetWebhookUrl() string { return v.WebhookUrl }

// GetWebhookToken returns IntegrationDetailBitbucketIntegration.WebhookToken, and is useful for accessing the field via an interface.
func (v *IntegrationDetailBitbucketIntegration) GetWebhookToken() string { return v.WebhookToken }

// GetAccount returns IntegrationDetailBitbucketIntegration.Account, and is useful for accessing the field via an interface.
func (v *IntegrationDetailBitbucketIntegration) GetAccount() *IntegrationDetailAccountBitbucketAccount {
	return v.Account
}

// GetAuthType returns IntegrationDetailBitbucketIntegration.AuthType, and is useful for accessing the field via an interface.
func (v *IntegrationDetailBitbucketIntegration) GetAuthType() BitbucketIntegrationAuthType {
	return v.AuthType
}

// GetType returns IntegrationDetailBitbucketIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationDetailBitbucketIntegration) GetType() IntegrationType {
	return v.IntegrationCommonBitbucketIntegration.Type
}

// GetName returns IntegrationDetailBitbucketIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationDetailBitbucketIntegration) GetName() string {
	return v.IntegrationCommonBitbucketIntegration.Name
}

// GetDescription returns IntegrationDetailBitbucketIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationDetailBitbucketIntegration) GetDescription() string {
	return v.IntegrationCommonBitbucketIntegration.Description
}

// GetImage returns IntegrationDetailBitbucketIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationDetailBitbucketIntegration) GetImage() string {
	return v.IntegrationCommonBitbucketIntegration.Image
}

// GetCreatedAt returns IntegrationDetailBitbucketIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailBitbucketIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonBitbucketIntegration.CreatedAt
}

// GetUpdatedAt returns IntegrationDetailBitbucketIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailBitbucketIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonBitbucketIntegration.UpdatedAt
}

func (v *IntegrationDetailBitbucketIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntegrationDetailBitbucketIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.IntegrationDetailBitbucketIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonBitbucketIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntegrationDetailBitbucketIntegration struct {
	Id uuid.UUID `json:"id"`

	WebhookUrl string `json:"webhookUrl"`

	WebhookToken string `json:"webhookToken"`

	Account *IntegrationDetailAccountBitbucketAccount `json:"account"`

	AuthType BitbucketIntegrationAuthType `json:"authType"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *IntegrationDetailBitbucketIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntegrationDetailBitbucketIntegration) __premarshalJSON() (*__premarshalIntegrationDetailBitbucketIntegration, error) {
	var retval __premarshalIntegrationDetailBitbucketIntegration

	retval.Id = v.Id
	retval.WebhookUrl = v.WebhookUrl
	retval.WebhookToken = v.WebhookToken
	retval.Account = v.Account
	retval.AuthType = v.AuthType
	retval.Type = v.IntegrationCommonBitbucketIntegration.Type
	retval.Name = v.IntegrationCommonBitbucketIntegration.Name
	retval.Description = v.IntegrationCommonBitbucketIntegration.Description
	retval.Image = v.IntegrationCommonBitbucketIntegration.Image
	retval.CreatedAt = v.IntegrationCommonBitbucketIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonBitbucketIntegration.UpdatedAt
	return &retval, nil
}

// IntegrationDetail includes the GraphQL fields of DatadogIntegration requested by the fragment IntegrationDetail.
type IntegrationDetailDatadogIntegration struct {
	Id                                  uuid.UUID `json:"id"`
	IntegrationCommonDatadogIntegration `json:"-"`
	ApiKey                              *string `json:"apiKey"`
}

// GetId returns IntegrationDetailDatadogIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDatadogIntegration) GetId() uuid.UUID { return v.Id }

// GetApiKey returns IntegrationDetailDatadogIntegration.ApiKey, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDatadogIntegration) GetApiKey() *string { return v.ApiKey }

// GetType returns IntegrationDetailDatadogIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDatadogIntegration) GetType() IntegrationType {
	return v.IntegrationCommonDatadogIntegration.Type
}

// GetName returns IntegrationDetailDatadogIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDatadogIntegration) GetName() string {
	return v.IntegrationCommonDatadogIntegration.Name
}

// GetDescription returns IntegrationDetailDatadogIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDatadogIntegration) GetDescription() string {
	return v.IntegrationCommonDatadogIntegration.Description
}

// GetImage returns IntegrationDetailDatadogIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDatadogIntegration) GetImage() string {
	return v.IntegrationCommonDatadogIntegration.Image
}

// GetCreatedAt returns IntegrationDetailDatadogIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDatadogIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonDatadogIntegration.CreatedAt
}

// GetUpdatedAt returns IntegrationDetailDatadogIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDatadogIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonDatadogIntegration.UpdatedAt
}

func (v *IntegrationDetailDatadogIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntegrationDetailDatadogIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.IntegrationDetailDatadogIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonDatadogIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntegrationDetailDatadogIntegration struct {
	Id uuid.UUID `json:"id"`

	ApiKey *string `json:"apiKey"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *IntegrationDetailDatadogIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntegrationDetailDatadogIntegration) __premarshalJSON() (*__premarshalIntegrationDetailDatadogIntegration, error) {
	var retval __premarshalIntegrationDetailDatadogIntegration

	retval.Id = v.Id
	retval.ApiKey = v.ApiKey
	retval.Type = v.IntegrationCommonDatadogIntegration.Type
	retval.Name = v.IntegrationCommonDatadogIntegration.Name
	retval.Description = v.IntegrationCommonDatadogIntegration.Description
	retval.Image = v.IntegrationCommonDatadogIntegration.Image
	retval.CreatedAt = v.IntegrationCommonDatadogIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonDatadogIntegration.UpdatedAt
	return &retval, nil
}

// IntegrationDetail includes the GraphQL fields of DiscordIntegration requested by the fragment IntegrationDetail.
type IntegrationDetailDiscordIntegration struct {
	Id                                  uuid.UUID `json:"id"`
	IntegrationCommonDiscordIntegration `json:"-"`
}

// GetId returns IntegrationDetailDiscordIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordIntegration) GetId() uuid.UUID { return v.Id }

// GetType returns IntegrationDetailDiscordIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordIntegration) GetType() IntegrationType {
	return v.IntegrationCommonDiscordIntegration.Type
}

// GetName returns IntegrationDetailDiscordIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordIntegration) GetName() string {
	return v.IntegrationCommonDiscordIntegration.Name
}

// GetDescription returns IntegrationDetailDiscordIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordIntegration) GetDescription() string {
	return v.IntegrationCommonDiscordIntegration.Description
}

// GetImage returns IntegrationDetailDiscordIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordIntegration) GetImage() string {
	return v.IntegrationCommonDiscordIntegration.Image
}

// GetCreatedAt returns IntegrationDetailDiscordIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonDiscordIntegration.CreatedAt
}

// GetUpdatedAt returns IntegrationDetailDiscordIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonDiscordIntegration.UpdatedAt
}

func (v *IntegrationDetailDiscordIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntegrationDetailDiscordIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.IntegrationDetailDiscordIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonDiscordIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntegrationDetailDiscordIntegration struct {
	Id uuid.UUID `json:"id"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *IntegrationDetailDiscordIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntegrationDetailDiscordIntegration) __premarshalJSON() (*__premarshalIntegrationDetailDiscordIntegration, error) {
	var retval __premarshalIntegrationDetailDiscordIntegration

	retval.Id = v.Id
	retval.Type = v.IntegrationCommonDiscordIntegration.Type
	retval.Name = v.IntegrationCommonDiscordIntegration.Name
	retval.Description = v.IntegrationCommonDiscordIntegration.Description
	retval.Image = v.IntegrationCommonDiscordIntegration.Image
	retval.CreatedAt = v.IntegrationCommonDiscordIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonDiscordIntegration.UpdatedAt
	return &retval, nil
}

// IntegrationDetail includes the GraphQL fields of DiscordWebhookIntegration requested by the fragment IntegrationDetail.
type IntegrationDetailDiscordWebhookIntegration struct {
	Id                                                     uuid.UUID `json:"id"`
	IntegrationCommonDiscordWebhookIntegration             `json:"-"`
	NotificationIntegrationCommonDiscordWebhookIntegration `json:"-"`
	Url                                                    *string `json:"url"`
}

// GetId returns IntegrationDetailDiscordWebhookIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordWebhookIntegration) GetId() uuid.UUID { return v.Id }

// GetUrl returns IntegrationDetailDiscordWebhookIntegration.Url, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordWebhookIntegration) GetUrl() *string { return v.Url }

// GetType returns IntegrationDetailDiscordWebhookIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordWebhookIntegration) GetType() IntegrationType {
	return v.IntegrationCommonDiscordWebhookIntegration.Type
}

// GetName returns IntegrationDetailDiscordWebhookIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordWebhookIntegration) GetName() string {
	return v.IntegrationCommonDiscordWebhookIntegration.Name
}

// GetDescription returns IntegrationDetailDiscordWebhookIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordWebhookIntegration) GetDescription() string {
	return v.IntegrationCommonDiscordWebhookIntegration.Description
}

// GetImage returns IntegrationDetailDiscordWebhookIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordWebhookIntegration) GetImage() string {
	return v.IntegrationCommonDiscordWebhookIntegration.Image
}

// GetCreatedAt returns IntegrationDetailDiscordWebhookIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordWebhookIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonDiscordWebhookIntegration.CreatedAt
}

// GetUpdatedAt returns IntegrationDetailDiscordWebhookIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordWebhookIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonDiscordWebhookIntegration.UpdatedAt
}

// GetNotificationSettings returns IntegrationDetailDiscordWebhookIntegration.NotificationSettings, and is useful for accessing the field via an interface.
func (v *IntegrationDetailDiscordWebhookIntegration) GetNotificationSettings() *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings {
	return v.NotificationIntegrationCommonDiscordWebhookIntegration.NotificationSettings
}

func (v *IntegrationDetailDiscordWebhookIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntegrationDetailDiscordWebhookIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.IntegrationDetailDiscordWebhookIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonDiscordWebhookIntegration)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.NotificationIntegrationCommonDiscordWebhookIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntegrationDetailDiscordWebhookIntegration struct {
	Id uuid.UUID `json:"id"`

	Url *string `json:"url"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	NotificationSettings *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings `json:"notificationSettings"`
}

func (v *IntegrationDetailDiscordWebhookIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntegrationDetailDiscordWebhookIntegration) __premarshalJSON() (*__premarshalIntegrationDetailDiscordWebhookIntegration, error) {
	var retval __premarshalIntegrationDetailDiscordWebhookIntegration

	retval.Id = v.Id
	retval.Url = v.Url
	retval.Type = v.IntegrationCommonDiscordWebhookIntegration.Type
	retval.Name = v.IntegrationCommonDiscordWebhookIntegration.Name
	retval.Description = v.IntegrationCommonDiscordWebhookIntegration.Description
	retval.Image = v.IntegrationCommonDiscordWebhookIntegration.Image
	retval.CreatedAt = v.IntegrationCommonDiscordWebhookIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonDiscordWebhookIntegration.UpdatedAt
	retval.NotificationSettings = v.NotificationIntegrationCommonDiscordWebhookIntegration.NotificationSettings
	return &retval, nil
}

// IntegrationDetail includes the GraphQL fields of EmailIntegration requested by the fragment IntegrationDetail.
type IntegrationDetailEmailIntegration struct {
	Id                                            uuid.UUID `json:"id"`
	IntegrationCommonEmailIntegration             `json:"-"`
	NotificationIntegrationCommonEmailIntegration `json:"-"`
	EmailAddress                                  string `json:"emailAddress"`
	// An email integration must be confirmed by the recipient before it can be considered active.
	Activated *bool `json:"activated"`
}

// GetId returns IntegrationDetailEmailIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationDetailEmailIntegration) GetId() uuid.UUID { return v.Id }

// GetEmailAddress returns IntegrationDetailEmailIntegration.EmailAddress, and is useful for accessing the field via an interface.
func (v *IntegrationDetailEmailIntegration) GetEmailAddress() string { return v.EmailAddress }

// GetActivated returns IntegrationDetailEmailIntegration.Activated, and is useful for accessing the field via an interface.
func (v *IntegrationDetailEmailIntegration) GetActivated() *bool { return v.Activated }

// GetType returns IntegrationDetailEmailIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationDetailEmailIntegration) GetType() IntegrationType {
	return v.IntegrationCommonEmailIntegration.Type
}

// GetName returns IntegrationDetailEmailIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationDetailEmailIntegration) GetName() string {
	return v.IntegrationCommonEmailIntegration.Name
}

// GetDescription returns IntegrationDetailEmailIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationDetailEmailIntegration) GetDescription() string {
	return v.IntegrationCommonEmailIntegration.Description
}

// GetImage returns IntegrationDetailEmailIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationDetailEmailIntegration) GetImage() string {
	return v.IntegrationCommonEmailIntegration.Image
}

// GetCreatedAt returns IntegrationDetailEmailIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailEmailIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonEmailIntegration.CreatedAt
}

// GetUpdatedAt returns IntegrationDetailEmailIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailEmailIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonEmailIntegration.UpdatedAt
}

// GetNotificationSettings returns IntegrationDetailEmailIntegration.NotificationSettings, and is useful for accessing the field via an interface.
func (v *IntegrationDetailEmailIntegration) GetNotificationSettings() *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings {
	return v.NotificationIntegrationCommonEmailIntegration.NotificationSettings
}

func (v *IntegrationDetailEmailIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntegrationDetailEmailIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.IntegrationDetailEmailIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonEmailIntegration)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.NotificationIntegrationCommonEmailIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntegrationDetailEmailIntegration struct {
	Id uuid.UUID `json:"id"`

	EmailAddress string `json:"emailAddress"`

	Activated *bool `json:"activated"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	NotificationSettings *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings `json:"notificationSettings"`
}

func (v *IntegrationDetailEmailIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntegrationDetailEmailIntegration) __premarshalJSON() (*__premarshalIntegrationDetailEmailIntegration, error) {
	var retval __premarshalIntegrationDetailEmailIntegration

	retval.Id = v.Id
	retval.EmailAddress = v.EmailAddress
	retval.Activated = v.Activated
	retval.Type = v.IntegrationCommonEmailIntegration.Type
	retval.Name = v.IntegrationCommonEmailIntegration.Name
	retval.Description = v.IntegrationCommonEmailIntegration.Description
	retval.Image = v.IntegrationCommonEmailIntegration.Image
	retval.CreatedAt = v.IntegrationCommonEmailIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonEmailIntegration.UpdatedAt
	retval.NotificationSettings = v.NotificationIntegrationCommonEmailIntegration.NotificationSettings
	return &retval, nil
}

// IntegrationDetail includes the GraphQL fields of GithubIntegration requested by the fragment IntegrationDetail.
type IntegrationDetailGithubIntegration struct {
	Id                                 uuid.UUID `json:"id"`
	IntegrationCommonGithubIntegration `json:"-"`
	Login                              string `json:"login"`
	AppID                              int    `json:"appID"`
	InstallationID                     int    `json:"installationID"`
	TargetType                         string `json:"targetType"`
}

// GetId returns IntegrationDetailGithubIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGithubIntegration) GetId() uuid.UUID { return v.Id }

// GetLogin returns IntegrationDetailGithubIntegration.Login, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGithubIntegration) GetLogin() string { return v.Login }

// GetAppID returns IntegrationDetailGithubIntegration.AppID, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGithubIntegration) GetAppID() int { return v.AppID }

// GetInstallationID returns IntegrationDetailGithubIntegration.InstallationID, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGithubIntegration) GetInstallationID() int { return v.InstallationID }

// GetTargetType returns IntegrationDetailGithubIntegration.TargetType, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGithubIntegration) GetTargetType() string { return v.TargetType }

// GetType returns IntegrationDetailGithubIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGithubIntegration) GetType() IntegrationType {
	return v.IntegrationCommonGithubIntegration.Type
}

// GetName returns IntegrationDetailGithubIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGithubIntegration) GetName() string {
	return v.IntegrationCommonGithubIntegration.Name
}

// GetDescription returns IntegrationDetailGithubIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGithubIntegration) GetDescription() string {
	return v.IntegrationCommonGithubIntegration.Description
}

// GetImage returns IntegrationDetailGithubIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGithubIntegration) GetImage() string {
	return v.IntegrationCommonGithubIntegration.Image
}

// GetCreatedAt returns IntegrationDetailGithubIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGithubIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonGithubIntegration.CreatedAt
}

// GetUpdatedAt returns IntegrationDetailGithubIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGithubIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonGithubIntegration.UpdatedAt
}

func (v *IntegrationDetailGithubIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntegrationDetailGithubIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.IntegrationDetailGithubIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonGithubIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntegrationDetailGithubIntegration struct {
	Id uuid.UUID `json:"id"`

	Login string `json:"login"`

	AppID int `json:"appID"`

	InstallationID int `json:"installationID"`

	TargetType string `json:"targetType"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *IntegrationDetailGithubIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntegrationDetailGithubIntegration) __premarshalJSON() (*__premarshalIntegrationDetailGithubIntegration, error) {
	var retval __premarshalIntegrationDetailGithubIntegration

	retval.Id = v.Id
	retval.Login = v.Login
	retval.AppID = v.AppID
	retval.InstallationID = v.InstallationID
	retval.TargetType = v.TargetType
	retval.Type = v.IntegrationCommonGithubIntegration.Type
	retval.Name = v.IntegrationCommonGithubIntegration.Name
	retval.Description = v.IntegrationCommonGithubIntegration.Description
	retval.Image = v.IntegrationCommonGithubIntegration.Image
	retval.CreatedAt = v.IntegrationCommonGithubIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonGithubIntegration.UpdatedAt
	return &retval, nil
}

// IntegrationDetail includes the GraphQL fields of GitlabIntegration requested by the fragment IntegrationDetail.
type IntegrationDetailGitlabIntegration struct {
	Id                                 uuid.UUID `json:"id"`
	IntegrationCommonGitlabIntegration `json:"-"`
	AccessTokenPrefix                  *string `json:"accessTokenPrefix"`
	WebhookUrl                         string  `json:"webhookUrl"`
	WebhookToken                       string  `json:"webhookToken"`
}

// GetId returns IntegrationDetailGitlabIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGitlabIntegration) GetId() uuid.UUID { return v.Id }

// GetAccessTokenPrefix returns IntegrationDetailGitlabIntegration.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGitlabIntegration) GetAccessTokenPrefix() *string {
	return v.AccessTokenPrefix
}

// GetWebhookUrl returns IntegrationDetailGitlabIntegration.WebhookUrl, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGitlabIntegration) GetWebhookUrl() string { return v.WebhookUrl }

// GetWebhookToken returns IntegrationDetailGitlabIntegration.WebhookToken, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGitlabIntegration) GetWebhookToken() string { return v.WebhookToken }

// GetType returns IntegrationDetailGitlabIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGitlabIntegration) GetType() IntegrationType {
	return v.IntegrationCommonGitlabIntegration.Type
}

// GetName returns IntegrationDetailGitlabIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGitlabIntegration) GetName() string {
	return v.IntegrationCommonGitlabIntegration.Name
}

// GetDescription returns IntegrationDetailGitlabIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGitlabIntegration) GetDescription() string {
	return v.IntegrationCommonGitlabIntegration.Description
}

// GetImage returns IntegrationDetailGitlabIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGitlabIntegration) GetImage() string {
	return v.IntegrationCommonGitlabIntegration.Image
}

// GetCreatedAt returns IntegrationDetailGitlabIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGitlabIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonGitlabIntegration.CreatedAt
}

// GetUpdatedAt returns IntegrationDetailGitlabIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailGitlabIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonGitlabIntegration.UpdatedAt
}

func (v *IntegrationDetailGitlabIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntegrationDetailGitlabIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.IntegrationDetailGitlabIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonGitlabIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntegrationDetailGitlabIntegration struct {
	Id uuid.UUID `json:"id"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	WebhookUrl string `json:"webhookUrl"`

	WebhookToken string `json:"webhookToken"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *IntegrationDetailGitlabIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntegrationDetailGitlabIntegration) __premarshalJSON() (*__premarshalIntegrationDetailGitlabIntegration, error) {
	var retval __premarshalIntegrationDetailGitlabIntegration

	retval.Id = v.Id
	retval.AccessTokenPrefix = v.AccessTokenPrefix
	retval.WebhookUrl = v.WebhookUrl
	retval.WebhookToken = v.WebhookToken
	retval.Type = v.IntegrationCommonGitlabIntegration.Type
	retval.Name = v.IntegrationCommonGitlabIntegration.Name
	retval.Description = v.IntegrationCommonGitlabIntegration.Description
	retval.Image = v.IntegrationCommonGitlabIntegration.Image
	retval.CreatedAt = v.IntegrationCommonGitlabIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonGitlabIntegration.UpdatedAt
	return &retval, nil
}

// IntegrationDetail includes the GraphQL fields of SlackIntegration requested by the fragment IntegrationDetail.
type IntegrationDetailSlackIntegration struct {
	Id                                uuid.UUID `json:"id"`
	IntegrationCommonSlackIntegration `json:"-"`
}

// GetId returns IntegrationDetailSlackIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackIntegration) GetId() uuid.UUID { return v.Id }

// GetType returns IntegrationDetailSlackIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackIntegration) GetType() IntegrationType {
	return v.IntegrationCommonSlackIntegration.Type
}

// GetName returns IntegrationDetailSlackIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackIntegration) GetName() string {
	return v.IntegrationCommonSlackIntegration.Name
}

// GetDescription returns IntegrationDetailSlackIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackIntegration) GetDescription() string {
	return v.IntegrationCommonSlackIntegration.Description
}

// GetImage returns IntegrationDetailSlackIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackIntegration) GetImage() string {
	return v.IntegrationCommonSlackIntegration.Image
}

// GetCreatedAt returns IntegrationDetailSlackIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonSlackIntegration.CreatedAt
}

// GetUpdatedAt returns IntegrationDetailSlackIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonSlackIntegration.UpdatedAt
}

func (v *IntegrationDetailSlackIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntegrationDetailSlackIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.IntegrationDetailSlackIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonSlackIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntegrationDetailSlackIntegration struct {
	Id uuid.UUID `json:"id"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *IntegrationDetailSlackIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntegrationDetailSlackIntegration) __premarshalJSON() (*__premarshalIntegrationDetailSlackIntegration, error) {
	var retval __premarshalIntegrationDetailSlackIntegration

	retval.Id = v.Id
	retval.Type = v.IntegrationCommonSlackIntegration.Type
	retval.Name = v.IntegrationCommonSlackIntegration.Name
	retval.Description = v.IntegrationCommonSlackIntegration.Description
	retval.Image = v.IntegrationCommonSlackIntegration.Image
	retval.CreatedAt = v.IntegrationCommonSlackIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonSlackIntegration.UpdatedAt
	return &retval, nil
}

// IntegrationDetail includes the GraphQL fields of SlackWebhookIntegration requested by the fragment IntegrationDetail.
type IntegrationDetailSlackWebhookIntegration struct {
	Id                                                   uuid.UUID `json:"id"`
	IntegrationCommonSlackWebhookIntegration             `json:"-"`
	NotificationIntegrationCommonSlackWebhookIntegration `json:"-"`
	Url                                                  *string `json:"url"`
}

// GetId returns IntegrationDetailSlackWebhookIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackWebhookIntegration) GetId() uuid.UUID { return v.Id }

// GetUrl returns IntegrationDetailSlackWebhookIntegration.Url, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackWebhookIntegration) GetUrl() *string { return v.Url }

// GetType returns IntegrationDetailSlackWebhookIntegration.Type, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackWebhookIntegration) GetType() IntegrationType {
	return v.IntegrationCommonSlackWebhookIntegration.Type
}

// GetName returns IntegrationDetailSlackWebhookIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackWebhookIntegration) GetName() string {
	return v.IntegrationCommonSlackWebhookIntegration.Name
}

// GetDescription returns IntegrationDetailSlackWebhookIntegration.Description, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackWebhookIntegration) GetDescription() string {
	return v.IntegrationCommonSlackWebhookIntegration.Description
}

// GetImage returns IntegrationDetailSlackWebhookIntegration.Image, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackWebhookIntegration) GetImage() string {
	return v.IntegrationCommonSlackWebhookIntegration.Image
}

// GetCreatedAt returns IntegrationDetailSlackWebhookIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackWebhookIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonSlackWebhookIntegration.CreatedAt
}

// GetUpdatedAt returns IntegrationDetailSlackWebhookIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackWebhookIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonSlackWebhookIntegration.UpdatedAt
}

// GetNotificationSettings returns IntegrationDetailSlackWebhookIntegration.NotificationSettings, and is useful for accessing the field via an interface.
func (v *IntegrationDetailSlackWebhookIntegration) GetNotificationSettings() *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings {
	return v.NotificationIntegrationCommonSlackWebhookIntegration.NotificationSettings
}

func (v *IntegrationDetailSlackWebhookIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntegrationDetailSlackWebhookIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.IntegrationDetailSlackWebhookIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonSlackWebhookIntegration)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.NotificationIntegrationCommonSlackWebhookIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntegrationDetailSlackWebhookIntegration struct {
	Id uuid.UUID `json:"id"`

	Url *string `json:"url"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	NotificationSettings *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings `json:"notificationSettings"`
}

func (v *IntegrationDetailSlackWebhookIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntegrationDetailSlackWebhookIntegration) __premarshalJSON() (*__premarshalIntegrationDetailSlackWebhookIntegration, error) {
	var retval __premarshalIntegrationDetailSlackWebhookIntegration

	retval.Id = v.Id
	retval.Url = v.Url
	retval.Type = v.IntegrationCommonSlackWebhookIntegration.Type
	retval.Name = v.IntegrationCommonSlackWebhookIntegration.Name
	retval.Description = v.IntegrationCommonSlackWebhookIntegration.Description
	retval.Image = v.IntegrationCommonSlackWebhookIntegration.Image
	retval.CreatedAt = v.IntegrationCommonSlackWebhookIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonSlackWebhookIntegration.UpdatedAt
	retval.NotificationSettings = v.NotificationIntegrationCommonSlackWebhookIntegration.NotificationSettings
	return &retval, nil
}

type IntegrationType string

const (
	IntegrationTypeSlack          IntegrationType = "SLACK"
	IntegrationTypeSlackWebhook   IntegrationType = "SLACK_WEBHOOK"
	IntegrationTypeDiscord        IntegrationType = "DISCORD"
	IntegrationTypeDiscordWebhook IntegrationType = "DISCORD_WEBHOOK"
	IntegrationTypeDatadog        IntegrationType = "DATADOG"
	IntegrationTypeGitlab         IntegrationType = "GITLAB"
	IntegrationTypeGithub         IntegrationType = "GITHUB"
	IntegrationTypeEmail          IntegrationType = "EMAIL"
	IntegrationTypeBitbucket      IntegrationType = "BITBUCKET"
)

type InviteTeamMemberInput struct {
	Id        uuid.UUID      `json:"id"`
	Role      TeamMemberRole `json:"role"`
	Email     *string        `json:"email"`
	ExpiresAt *time.Time     `json:"expiresAt"`
}

// GetId returns InviteTeamMemberInput.Id, and is useful for accessing the field via an interface.
func (v *InviteTeamMemberInput) GetId() uuid.UUID { return v.Id }

// GetRole returns InviteTeamMemberInput.Role, and is useful for accessing the field via an interface.
func (v *InviteTeamMemberInput) GetRole() TeamMemberRole { return v.Role }

// GetEmail returns InviteTeamMemberInput.Email, and is useful for accessing the field via an interface.
func (v *InviteTeamMemberInput) GetEmail() *string { return v.Email }

// GetExpiresAt returns InviteTeamMemberInput.ExpiresAt, and is useful for accessing the field via an interface.
func (v *InviteTeamMemberInput) GetExpiresAt() *time.Time { return v.ExpiresAt }

// IpfSServicesFragment includes the GraphQL fields of IPFSService requested by the fragment IpfSServicesFragment.
type IpfSServicesFragment struct {
	Id          uuid.UUID                       `json:"id"`
	State       IPFSServiceState                `json:"state"`
	ApiURL      *string                         `json:"apiURL"`
	NodeURL     *string                         `json:"nodeURL"`
	AccessToken *string                         `json:"accessToken"`
	Owner       IpfSServicesFragmentOwnerUser   `json:"owner"`
	Api         *IpfSServicesFragmentApiProject `json:"api"`
}

// GetId returns IpfSServicesFragment.Id, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragment) GetId() uuid.UUID { return v.Id }

// GetState returns IpfSServicesFragment.State, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragment) GetState() IPFSServiceState { return v.State }

// GetApiURL returns IpfSServicesFragment.ApiURL, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragment) GetApiURL() *string { return v.ApiURL }

// GetNodeURL returns IpfSServicesFragment.NodeURL, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragment) GetNodeURL() *string { return v.NodeURL }

// GetAccessToken returns IpfSServicesFragment.AccessToken, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragment) GetAccessToken() *string { return v.AccessToken }

// GetOwner returns IpfSServicesFragment.Owner, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragment) GetOwner() IpfSServicesFragmentOwnerUser { return v.Owner }

// GetApi returns IpfSServicesFragment.Api, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragment) GetApi() *IpfSServicesFragmentApiProject { return v.Api }

// IpfSServicesFragmentApiProject includes the requested fields of the GraphQL type Project.
type IpfSServicesFragmentApiProject struct {
	// - v0.ProjectID or v1.GroupID
	Id   uuid.UUID                           `json:"id"`
	Repo *IpfSServicesFragmentApiProjectRepo `json:"repo"`
}

// GetId returns IpfSServicesFragmentApiProject.Id, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProject) GetId() uuid.UUID { return v.Id }

// GetRepo returns IpfSServicesFragmentApiProject.Repo, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProject) GetRepo() *IpfSServicesFragmentApiProjectRepo { return v.Repo }

// IpfSServicesFragmentApiProjectRepo includes the requested fields of the GraphQL type Repo.
type IpfSServicesFragmentApiProjectRepo struct {
	// - v0.RepoID
	Id             uuid.UUID                                          `json:"id"`
	ClusterDomains []IpfSServicesFragmentApiProjectRepoClusterDomains `json:"clusterDomains"`
}

// GetId returns IpfSServicesFragmentApiProjectRepo.Id, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepo) GetId() uuid.UUID { return v.Id }

// GetClusterDomains returns IpfSServicesFragmentApiProjectRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepo) GetClusterDomains() []IpfSServicesFragmentApiProjectRepoClusterDomains {
	return v.ClusterDomains
}

// IpfSServicesFragmentApiProjectRepoClusterDomains includes the requested fields of the GraphQL type ClusterDomains.
type IpfSServicesFragmentApiProjectRepoClusterDomains struct {
	Id      uuid.UUID                                                             `json:"id"`
	Domains []IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain `json:"domains"`
}

// GetId returns IpfSServicesFragmentApiProjectRepoClusterDomains.Id, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepoClusterDomains) GetId() uuid.UUID { return v.Id }

// GetDomains returns IpfSServicesFragmentApiProjectRepoClusterDomains.Domains, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepoClusterDomains) GetDomains() []IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain {
	return v.Domains
}

// IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain includes the requested fields of the GraphQL type CustomDomain.
type IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain struct {
	Id           uuid.UUID `json:"id"`
	Domain       string    `json:"domain"`
	DomainDetail `json:"-"`
}

// GetId returns IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain.Id, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain) GetId() uuid.UUID {
	return v.Id
}

// GetDomain returns IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain.Domain, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain) GetDomain() string {
	return v.Domain
}

// GetIsApex returns IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain.IsApex, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain) GetIsApex() bool {
	return v.DomainDetail.IsApex
}

// GetCnameTargets returns IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain.CnameTargets, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain) GetCnameTargets() []string {
	return v.DomainDetail.CnameTargets
}

// GetIpTargets returns IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain.IpTargets, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain) GetIpTargets() []string {
	return v.DomainDetail.IpTargets
}

// GetDisableCertManager returns IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain.DisableCertManager, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain) GetDisableCertManager() *bool {
	return v.DomainDetail.DisableCertManager
}

// GetCertManagerChallengeType returns IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain.CertManagerChallengeType, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain) GetCertManagerChallengeType() *CertManagerChallengeType {
	return v.DomainDetail.CertManagerChallengeType
}

// GetSyncDomain returns IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain.SyncDomain, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain) GetSyncDomain() *DomainDetailSyncDomainCustomDomain {
	return v.DomainDetail.SyncDomain
}

// GetInstructions returns IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain.Instructions, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain) GetInstructions() []DomainDetailInstructionsDNSRecord {
	return v.DomainDetail.Instructions
}

// GetCertificate returns IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain.Certificate, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain) GetCertificate() *DomainDetailCertificate {
	return v.DomainDetail.Certificate
}

func (v *IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain
		graphql.NoUnmarshalJSON
	}
	firstPass.IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DomainDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain struct {
	Id uuid.UUID `json:"id"`

	Domain string `json:"domain"`

	IsApex bool `json:"isApex"`

	CnameTargets []string `json:"cnameTargets"`

	IpTargets []string `json:"ipTargets"`

	DisableCertManager *bool `json:"disableCertManager"`

	CertManagerChallengeType *CertManagerChallengeType `json:"certManagerChallengeType"`

	SyncDomain *DomainDetailSyncDomainCustomDomain `json:"syncDomain"`

	Instructions []DomainDetailInstructionsDNSRecord `json:"instructions"`

	Certificate *DomainDetailCertificate `json:"certificate"`
}

func (v *IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain) __premarshalJSON() (*__premarshalIpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain, error) {
	var retval __premarshalIpfSServicesFragmentApiProjectRepoClusterDomainsDomainsCustomDomain

	retval.Id = v.Id
	retval.Domain = v.Domain
	retval.IsApex = v.DomainDetail.IsApex
	retval.CnameTargets = v.DomainDetail.CnameTargets
	retval.IpTargets = v.DomainDetail.IpTargets
	retval.DisableCertManager = v.DomainDetail.DisableCertManager
	retval.CertManagerChallengeType = v.DomainDetail.CertManagerChallengeType
	retval.SyncDomain = v.DomainDetail.SyncDomain
	retval.Instructions = v.DomainDetail.Instructions
	retval.Certificate = v.DomainDetail.Certificate
	return &retval, nil
}

// IpfSServicesFragmentOwnerUser includes the requested fields of the GraphQL type User.
type IpfSServicesFragmentOwnerUser struct {
	Id         uuid.UUID `json:"id"`
	UserCommon `json:"-"`
}

// GetId returns IpfSServicesFragmentOwnerUser.Id, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentOwnerUser) GetId() uuid.UUID { return v.Id }

// GetEmail returns IpfSServicesFragmentOwnerUser.Email, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentOwnerUser) GetEmail() *string { return v.UserCommon.Email }

// GetCreatedAt returns IpfSServicesFragmentOwnerUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentOwnerUser) GetCreatedAt() *time.Time { return v.UserCommon.CreatedAt }

// GetFreeTrialEndsAt returns IpfSServicesFragmentOwnerUser.FreeTrialEndsAt, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentOwnerUser) GetFreeTrialEndsAt() *time.Time {
	return v.UserCommon.FreeTrialEndsAt
}

// GetHasPaymentMethod returns IpfSServicesFragmentOwnerUser.HasPaymentMethod, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentOwnerUser) GetHasPaymentMethod() *bool {
	return v.UserCommon.HasPaymentMethod
}

// GetPaymentError returns IpfSServicesFragmentOwnerUser.PaymentError, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentOwnerUser) GetPaymentError() *string { return v.UserCommon.PaymentError }

// GetPaymentAuthorizationError returns IpfSServicesFragmentOwnerUser.PaymentAuthorizationError, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentOwnerUser) GetPaymentAuthorizationError() *string {
	return v.UserCommon.PaymentAuthorizationError
}

// GetAdvanced returns IpfSServicesFragmentOwnerUser.Advanced, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentOwnerUser) GetAdvanced() *bool { return v.UserCommon.Advanced }

// GetName returns IpfSServicesFragmentOwnerUser.Name, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentOwnerUser) GetName() string { return v.UserCommon.UserPublicCommon.Name }

// GetLogin returns IpfSServicesFragmentOwnerUser.Login, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentOwnerUser) GetLogin() string { return v.UserCommon.UserPublicCommon.Login }

// GetAvatar returns IpfSServicesFragmentOwnerUser.Avatar, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentOwnerUser) GetAvatar() *string {
	return v.UserCommon.UserPublicCommon.Avatar
}

// GetIsTeam returns IpfSServicesFragmentOwnerUser.IsTeam, and is useful for accessing the field via an interface.
func (v *IpfSServicesFragmentOwnerUser) GetIsTeam() *bool {
	return v.UserCommon.UserPublicCommon.IsTeam
}

func (v *IpfSServicesFragmentOwnerUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IpfSServicesFragmentOwnerUser
		graphql.NoUnmarshalJSON
	}
	firstPass.IpfSServicesFragmentOwnerUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIpfSServicesFragmentOwnerUser struct {
	Id uuid.UUID `json:"id"`

	Email *string `json:"email"`

	CreatedAt *time.Time `json:"createdAt"`

	FreeTrialEndsAt *time.Time `json:"freeTrialEndsAt"`

	HasPaymentMethod *bool `json:"hasPaymentMethod"`

	PaymentError *string `json:"paymentError"`

	PaymentAuthorizationError *string `json:"paymentAuthorizationError"`

	Advanced *bool `json:"advanced"`

	Name string `json:"name"`

	Login string `json:"login"`

	Avatar *string `json:"avatar"`

	IsTeam *bool `json:"isTeam"`
}

func (v *IpfSServicesFragmentOwnerUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IpfSServicesFragmentOwnerUser) __premarshalJSON() (*__premarshalIpfSServicesFragmentOwnerUser, error) {
	var retval __premarshalIpfSServicesFragmentOwnerUser

	retval.Id = v.Id
	retval.Email = v.UserCommon.Email
	retval.CreatedAt = v.UserCommon.CreatedAt
	retval.FreeTrialEndsAt = v.UserCommon.FreeTrialEndsAt
	retval.HasPaymentMethod = v.UserCommon.HasPaymentMethod
	retval.PaymentError = v.UserCommon.PaymentError
	retval.PaymentAuthorizationError = v.UserCommon.PaymentAuthorizationError
	retval.Advanced = v.UserCommon.Advanced
	retval.Name = v.UserCommon.UserPublicCommon.Name
	retval.Login = v.UserCommon.UserPublicCommon.Login
	retval.Avatar = v.UserCommon.UserPublicCommon.Avatar
	retval.IsTeam = v.UserCommon.UserPublicCommon.IsTeam
	return &retval, nil
}

// IpfsServicesResponse is returned by IpfsServices on success.
type IpfsServicesResponse struct {
	User IpfsServicesUser `json:"user"`
}

// GetUser returns IpfsServicesResponse.User, and is useful for accessing the field via an interface.
func (v *IpfsServicesResponse) GetUser() IpfsServicesUser { return v.User }

// IpfsServicesUser includes the requested fields of the GraphQL type User.
type IpfsServicesUser struct {
	Id           uuid.UUID                                 `json:"id"`
	IpfsServices []IpfsServicesUserIpfsServicesIPFSService `json:"ipfsServices"`
}

// GetId returns IpfsServicesUser.Id, and is useful for accessing the field via an interface.
func (v *IpfsServicesUser) GetId() uuid.UUID { return v.Id }

// GetIpfsServices returns IpfsServicesUser.IpfsServices, and is useful for accessing the field via an interface.
func (v *IpfsServicesUser) GetIpfsServices() []IpfsServicesUserIpfsServicesIPFSService {
	return v.IpfsServices
}

// IpfsServicesUserIpfsServicesIPFSService includes the requested fields of the GraphQL type IPFSService.
type IpfsServicesUserIpfsServicesIPFSService struct {
	Id                   uuid.UUID `json:"id"`
	IpfSServicesFragment `json:"-"`
}

// GetId returns IpfsServicesUserIpfsServicesIPFSService.Id, and is useful for accessing the field via an interface.
func (v *IpfsServicesUserIpfsServicesIPFSService) GetId() uuid.UUID { return v.Id }

// GetState returns IpfsServicesUserIpfsServicesIPFSService.State, and is useful for accessing the field via an interface.
func (v *IpfsServicesUserIpfsServicesIPFSService) GetState() IPFSServiceState {
	return v.IpfSServicesFragment.State
}

// GetApiURL returns IpfsServicesUserIpfsServicesIPFSService.ApiURL, and is useful for accessing the field via an interface.
func (v *IpfsServicesUserIpfsServicesIPFSService) GetApiURL() *string {
	return v.IpfSServicesFragment.ApiURL
}

// GetNodeURL returns IpfsServicesUserIpfsServicesIPFSService.NodeURL, and is useful for accessing the field via an interface.
func (v *IpfsServicesUserIpfsServicesIPFSService) GetNodeURL() *string {
	return v.IpfSServicesFragment.NodeURL
}

// GetAccessToken returns IpfsServicesUserIpfsServicesIPFSService.AccessToken, and is useful for accessing the field via an interface.
func (v *IpfsServicesUserIpfsServicesIPFSService) GetAccessToken() *string {
	return v.IpfSServicesFragment.AccessToken
}

// GetOwner returns IpfsServicesUserIpfsServicesIPFSService.Owner, and is useful for accessing the field via an interface.
func (v *IpfsServicesUserIpfsServicesIPFSService) GetOwner() IpfSServicesFragmentOwnerUser {
	return v.IpfSServicesFragment.Owner
}

// GetApi returns IpfsServicesUserIpfsServicesIPFSService.Api, and is useful for accessing the field via an interface.
func (v *IpfsServicesUserIpfsServicesIPFSService) GetApi() *IpfSServicesFragmentApiProject {
	return v.IpfSServicesFragment.Api
}

func (v *IpfsServicesUserIpfsServicesIPFSService) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IpfsServicesUserIpfsServicesIPFSService
		graphql.NoUnmarshalJSON
	}
	firstPass.IpfsServicesUserIpfsServicesIPFSService = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IpfSServicesFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIpfsServicesUserIpfsServicesIPFSService struct {
	Id uuid.UUID `json:"id"`

	State IPFSServiceState `json:"state"`

	ApiURL *string `json:"apiURL"`

	NodeURL *string `json:"nodeURL"`

	AccessToken *string `json:"accessToken"`

	Owner IpfSServicesFragmentOwnerUser `json:"owner"`

	Api *IpfSServicesFragmentApiProject `json:"api"`
}

func (v *IpfsServicesUserIpfsServicesIPFSService) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IpfsServicesUserIpfsServicesIPFSService) __premarshalJSON() (*__premarshalIpfsServicesUserIpfsServicesIPFSService, error) {
	var retval __premarshalIpfsServicesUserIpfsServicesIPFSService

	retval.Id = v.Id
	retval.State = v.IpfSServicesFragment.State
	retval.ApiURL = v.IpfSServicesFragment.ApiURL
	retval.NodeURL = v.IpfSServicesFragment.NodeURL
	retval.AccessToken = v.IpfSServicesFragment.AccessToken
	retval.Owner = v.IpfSServicesFragment.Owner
	retval.Api = v.IpfSServicesFragment.Api
	return &retval, nil
}

// JobCommon includes the GraphQL fields of JobRun requested by the fragment JobCommon.
type JobCommon struct {
	Id        uuid.UUID       `json:"id"`
	State     JobRunState     `json:"state"`
	Build     *JobCommonBuild `json:"build"`
	Command   string          `json:"command"`
	ExitCode  *int            `json:"exitCode"`
	CreatedAt *time.Time      `json:"createdAt"`
}

// GetId returns JobCommon.Id, and is useful for accessing the field via an interface.
func (v *JobCommon) GetId() uuid.UUID { return v.Id }

// GetState returns JobCommon.State, and is useful for accessing the field via an interface.
func (v *JobCommon) GetState() JobRunState { return v.State }

// GetBuild returns JobCommon.Build, and is useful for accessing the field via an interface.
func (v *JobCommon) GetBuild() *JobCommonBuild { return v.Build }

// GetCommand returns JobCommon.Command, and is useful for accessing the field via an interface.
func (v *JobCommon) GetCommand() string { return v.Command }

// GetExitCode returns JobCommon.ExitCode, and is useful for accessing the field via an interface.
func (v *JobCommon) GetExitCode() *int { return v.ExitCode }

// GetCreatedAt returns JobCommon.CreatedAt, and is useful for accessing the field via an interface.
func (v *JobCommon) GetCreatedAt() *time.Time { return v.CreatedAt }

// JobCommonBuild includes the requested fields of the GraphQL type Build.
type JobCommonBuild struct {
	Version *string `json:"version"`
}

// GetVersion returns JobCommonBuild.Version, and is useful for accessing the field via an interface.
func (v *JobCommonBuild) GetVersion() *string { return v.Version }

type JobRunState string

const (
	JobRunStateJobRunStarting        JobRunState = "JOB_RUN_STARTING"
	JobRunStateJobRunRunning         JobRunState = "JOB_RUN_RUNNING"
	JobRunStateJobRunFailed          JobRunState = "JOB_RUN_FAILED"
	JobRunStateJobRunSucceeded       JobRunState = "JOB_RUN_SUCCEEDED"
	JobRunStateJobRunPendingApproval JobRunState = "JOB_RUN_PENDING_APPROVAL"
)

type KanikoFlagsInput struct {
	CompressedCaching *bool `json:"compressedCaching"`
}

// GetCompressedCaching returns KanikoFlagsInput.CompressedCaching, and is useful for accessing the field via an interface.
func (v *KanikoFlagsInput) GetCompressedCaching() *bool { return v.CompressedCaching }

type KubernetesCustomizationInput struct {
	NodeSelector       *string `json:"nodeSelector"`
	HostNetwork        *bool   `json:"hostNetwork"`
	PodSpecPatch       *string `json:"podSpecPatch"`
	IngressSpecPatch   *string `json:"ingressSpecPatch"`
	PodAnnotations     *string `json:"podAnnotations"`
	ServiceAnnotations *string `json:"serviceAnnotations"`
	IngressAnnotations *string `json:"ingressAnnotations"`
	ClusterIssuerName  *string `json:"clusterIssuerName"`
}

// GetNodeSelector returns KubernetesCustomizationInput.NodeSelector, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetNodeSelector() *string { return v.NodeSelector }

// GetHostNetwork returns KubernetesCustomizationInput.HostNetwork, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetHostNetwork() *bool { return v.HostNetwork }

// GetPodSpecPatch returns KubernetesCustomizationInput.PodSpecPatch, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetPodSpecPatch() *string { return v.PodSpecPatch }

// GetIngressSpecPatch returns KubernetesCustomizationInput.IngressSpecPatch, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetIngressSpecPatch() *string { return v.IngressSpecPatch }

// GetPodAnnotations returns KubernetesCustomizationInput.PodAnnotations, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetPodAnnotations() *string { return v.PodAnnotations }

// GetServiceAnnotations returns KubernetesCustomizationInput.ServiceAnnotations, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetServiceAnnotations() *string { return v.ServiceAnnotations }

// GetIngressAnnotations returns KubernetesCustomizationInput.IngressAnnotations, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetIngressAnnotations() *string { return v.IngressAnnotations }

// GetClusterIssuerName returns KubernetesCustomizationInput.ClusterIssuerName, and is useful for accessing the field via an interface.
func (v *KubernetesCustomizationInput) GetClusterIssuerName() *string { return v.ClusterIssuerName }

type KubernetesManifestGeneratorConfigurationInput struct {
	EnvVars                    []EnvVarInput `json:"envVars"`
	RunCommand                 *string       `json:"runCommand"`
	ServerlessMemory           *int          `json:"serverlessMemory"`
	ServerlessArch             *string       `json:"serverlessArch"`
	CustomDomainHost           *string       `json:"customDomainHost"`
	CustomDomainCertificateArn *string       `json:"customDomainCertificateArn"`
	HttpPort                   *string       `json:"httpPort"`
	BuildImage                 *string       `json:"buildImage"`
}

// GetEnvVars returns KubernetesManifestGeneratorConfigurationInput.EnvVars, and is useful for accessing the field via an interface.
func (v *KubernetesManifestGeneratorConfigurationInput) GetEnvVars() []EnvVarInput { return v.EnvVars }

// GetRunCommand returns KubernetesManifestGeneratorConfigurationInput.RunCommand, and is useful for accessing the field via an interface.
func (v *KubernetesManifestGeneratorConfigurationInput) GetRunCommand() *string { return v.RunCommand }

// GetServerlessMemory returns KubernetesManifestGeneratorConfigurationInput.ServerlessMemory, and is useful for accessing the field via an interface.
func (v *KubernetesManifestGeneratorConfigurationInput) GetServerlessMemory() *int {
	return v.ServerlessMemory
}

// GetServerlessArch returns KubernetesManifestGeneratorConfigurationInput.ServerlessArch, and is useful for accessing the field via an interface.
func (v *KubernetesManifestGeneratorConfigurationInput) GetServerlessArch() *string {
	return v.ServerlessArch
}

// GetCustomDomainHost returns KubernetesManifestGeneratorConfigurationInput.CustomDomainHost, and is useful for accessing the field via an interface.
func (v *KubernetesManifestGeneratorConfigurationInput) GetCustomDomainHost() *string {
	return v.CustomDomainHost
}

// GetCustomDomainCertificateArn returns KubernetesManifestGeneratorConfigurationInput.CustomDomainCertificateArn, and is useful for accessing the field via an interface.
func (v *KubernetesManifestGeneratorConfigurationInput) GetCustomDomainCertificateArn() *string {
	return v.CustomDomainCertificateArn
}

// GetHttpPort returns KubernetesManifestGeneratorConfigurationInput.HttpPort, and is useful for accessing the field via an interface.
func (v *KubernetesManifestGeneratorConfigurationInput) GetHttpPort() *string { return v.HttpPort }

// GetBuildImage returns KubernetesManifestGeneratorConfigurationInput.BuildImage, and is useful for accessing the field via an interface.
func (v *KubernetesManifestGeneratorConfigurationInput) GetBuildImage() *string { return v.BuildImage }

type KubernetesSecretMountInput struct {
	SecretName string `json:"secretName"`
	MountPath  string `json:"mountPath"`
}

// GetSecretName returns KubernetesSecretMountInput.SecretName, and is useful for accessing the field via an interface.
func (v *KubernetesSecretMountInput) GetSecretName() string { return v.SecretName }

// GetMountPath returns KubernetesSecretMountInput.MountPath, and is useful for accessing the field via an interface.
func (v *KubernetesSecretMountInput) GetMountPath() string { return v.MountPath }

// LambdaLinks includes the GraphQL fields of AWSLinks requested by the fragment LambdaLinks.
type LambdaLinks struct {
	Cloudformation    *string `json:"cloudformation"`
	Lambda            *string `json:"lambda"`
	ApiGateway        *string `json:"apiGateway"`
	CloudwatchLogs    *string `json:"cloudwatchLogs"`
	CloudwatchMetrics *string `json:"cloudwatchMetrics"`
}

// GetCloudformation returns LambdaLinks.Cloudformation, and is useful for accessing the field via an interface.
func (v *LambdaLinks) GetCloudformation() *string { return v.Cloudformation }

// GetLambda returns LambdaLinks.Lambda, and is useful for accessing the field via an interface.
func (v *LambdaLinks) GetLambda() *string { return v.Lambda }

// GetApiGateway returns LambdaLinks.ApiGateway, and is useful for accessing the field via an interface.
func (v *LambdaLinks) GetApiGateway() *string { return v.ApiGateway }

// GetCloudwatchLogs returns LambdaLinks.CloudwatchLogs, and is useful for accessing the field via an interface.
func (v *LambdaLinks) GetCloudwatchLogs() *string { return v.CloudwatchLogs }

// GetCloudwatchMetrics returns LambdaLinks.CloudwatchMetrics, and is useful for accessing the field via an interface.
func (v *LambdaLinks) GetCloudwatchMetrics() *string { return v.CloudwatchMetrics }

type LinkCloudToClusterInput struct {
	CloudType   CloudProvider `json:"cloudType"`
	CloudId     uuid.UUID     `json:"cloudId"`
	ClusterID   uuid.UUID     `json:"clusterID"`
	CloudAZ     *string       `json:"cloudAZ"`
	CloudRegion *string       `json:"cloudRegion"`
}

// GetCloudType returns LinkCloudToClusterInput.CloudType, and is useful for accessing the field via an interface.
func (v *LinkCloudToClusterInput) GetCloudType() CloudProvider { return v.CloudType }

// GetCloudId returns LinkCloudToClusterInput.CloudId, and is useful for accessing the field via an interface.
func (v *LinkCloudToClusterInput) GetCloudId() uuid.UUID { return v.CloudId }

// GetClusterID returns LinkCloudToClusterInput.ClusterID, and is useful for accessing the field via an interface.
func (v *LinkCloudToClusterInput) GetClusterID() uuid.UUID { return v.ClusterID }

// GetCloudAZ returns LinkCloudToClusterInput.CloudAZ, and is useful for accessing the field via an interface.
func (v *LinkCloudToClusterInput) GetCloudAZ() *string { return v.CloudAZ }

// GetCloudRegion returns LinkCloudToClusterInput.CloudRegion, and is useful for accessing the field via an interface.
func (v *LinkCloudToClusterInput) GetCloudRegion() *string { return v.CloudRegion }

// LinkClusterToCloudLinkCloudToCluster includes the requested fields of the GraphQL type Cluster.
type LinkClusterToCloudLinkCloudToCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns LinkClusterToCloudLinkCloudToCluster.Id, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetId() uuid.UUID { return v.Id }

// GetName returns LinkClusterToCloudLinkCloudToCluster.Name, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns LinkClusterToCloudLinkCloudToCluster.Region, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetRegion() *string { return v.ClusterDetail.Region }

// GetState returns LinkClusterToCloudLinkCloudToCluster.State, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetState() ClusterState { return v.ClusterDetail.State }

// GetStatus returns LinkClusterToCloudLinkCloudToCluster.Status, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetStatus() *ClusterStatus {
	return v.ClusterDetail.Status
}

// GetConnected returns LinkClusterToCloudLinkCloudToCluster.Connected, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetConnected() *bool { return v.ClusterDetail.Connected }

// GetDomain returns LinkClusterToCloudLinkCloudToCluster.Domain, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetDomain() *string { return v.ClusterDetail.Domain }

// GetIsExternal returns LinkClusterToCloudLinkCloudToCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetIsExternal() *bool {
	return v.ClusterDetail.IsExternal
}

// GetIsEjected returns LinkClusterToCloudLinkCloudToCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetIsEjected() *bool { return v.ClusterDetail.IsEjected }

// GetComponents returns LinkClusterToCloudLinkCloudToCluster.Components, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns LinkClusterToCloudLinkCloudToCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns LinkClusterToCloudLinkCloudToCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns LinkClusterToCloudLinkCloudToCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns LinkClusterToCloudLinkCloudToCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns LinkClusterToCloudLinkCloudToCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns LinkClusterToCloudLinkCloudToCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns LinkClusterToCloudLinkCloudToCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns LinkClusterToCloudLinkCloudToCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns LinkClusterToCloudLinkCloudToCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetIngressIP() *string {
	return v.ClusterDetail.IngressIP
}

// GetIngressDNS returns LinkClusterToCloudLinkCloudToCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetIngressDNS() *string {
	return v.ClusterDetail.IngressDNS
}

// GetClusterProvider returns LinkClusterToCloudLinkCloudToCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns LinkClusterToCloudLinkCloudToCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns LinkClusterToCloudLinkCloudToCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns LinkClusterToCloudLinkCloudToCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns LinkClusterToCloudLinkCloudToCluster.Grafana, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns LinkClusterToCloudLinkCloudToCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns LinkClusterToCloudLinkCloudToCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns LinkClusterToCloudLinkCloudToCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns LinkClusterToCloudLinkCloudToCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetail.UpdatedAt
}

// GetCreatedAt returns LinkClusterToCloudLinkCloudToCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetCreatedAt() time.Time {
	return v.ClusterDetail.CreatedAt
}

// GetProjects returns LinkClusterToCloudLinkCloudToCluster.Projects, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns LinkClusterToCloudLinkCloudToCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns LinkClusterToCloudLinkCloudToCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudLinkCloudToCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *LinkClusterToCloudLinkCloudToCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LinkClusterToCloudLinkCloudToCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.LinkClusterToCloudLinkCloudToCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalLinkClusterToCloudLinkCloudToCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *LinkClusterToCloudLinkCloudToCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LinkClusterToCloudLinkCloudToCluster) __premarshalJSON() (*__premarshalLinkClusterToCloudLinkCloudToCluster, error) {
	var retval __premarshalLinkClusterToCloudLinkCloudToCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal LinkClusterToCloudLinkCloudToCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// LinkClusterToCloudResponse is returned by LinkClusterToCloud on success.
type LinkClusterToCloudResponse struct {
	LinkCloudToCluster LinkClusterToCloudLinkCloudToCluster `json:"linkCloudToCluster"`
}

// GetLinkCloudToCluster returns LinkClusterToCloudResponse.LinkCloudToCluster, and is useful for accessing the field via an interface.
func (v *LinkClusterToCloudResponse) GetLinkCloudToCluster() LinkClusterToCloudLinkCloudToCluster {
	return v.LinkCloudToCluster
}

type LinkDatabaseInput struct {
	Id         uuid.UUID `json:"id"`
	DatabaseID uuid.UUID `json:"databaseID"`
	EnvPrefix  *string   `json:"envPrefix"`
}

// GetId returns LinkDatabaseInput.Id, and is useful for accessing the field via an interface.
func (v *LinkDatabaseInput) GetId() uuid.UUID { return v.Id }

// GetDatabaseID returns LinkDatabaseInput.DatabaseID, and is useful for accessing the field via an interface.
func (v *LinkDatabaseInput) GetDatabaseID() uuid.UUID { return v.DatabaseID }

// GetEnvPrefix returns LinkDatabaseInput.EnvPrefix, and is useful for accessing the field via an interface.
func (v *LinkDatabaseInput) GetEnvPrefix() *string { return v.EnvPrefix }

// LinodeAccountDetail includes the GraphQL fields of LinodeAccount requested by the fragment LinodeAccountDetail.
type LinodeAccountDetail struct {
	Id                uuid.UUID         `json:"id"`
	Name              string            `json:"name"`
	State             CloudAccountState `json:"state"`
	AccessTokenPrefix *string           `json:"accessTokenPrefix"`
	Connected         *bool             `json:"connected"`
}

// GetId returns LinodeAccountDetail.Id, and is useful for accessing the field via an interface.
func (v *LinodeAccountDetail) GetId() uuid.UUID { return v.Id }

// GetName returns LinodeAccountDetail.Name, and is useful for accessing the field via an interface.
func (v *LinodeAccountDetail) GetName() string { return v.Name }

// GetState returns LinodeAccountDetail.State, and is useful for accessing the field via an interface.
func (v *LinodeAccountDetail) GetState() CloudAccountState { return v.State }

// GetAccessTokenPrefix returns LinodeAccountDetail.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *LinodeAccountDetail) GetAccessTokenPrefix() *string { return v.AccessTokenPrefix }

// GetConnected returns LinodeAccountDetail.Connected, and is useful for accessing the field via an interface.
func (v *LinodeAccountDetail) GetConnected() *bool { return v.Connected }

type LogDNAIntegrationInput struct {
	Key string `json:"key"`
}

// GetKey returns LogDNAIntegrationInput.Key, and is useful for accessing the field via an interface.
func (v *LogDNAIntegrationInput) GetKey() string { return v.Key }

type LogShipperInput struct {
	Type        *LogShipperType              `json:"type"`
	Logz        *LogzIntegrationInput        `json:"logz"`
	Syslog      *SyslogIntegrationInput      `json:"syslog"`
	LogDNA      *LogDNAIntegrationInput      `json:"logDNA"`
	Datadog     *DatadogLogIntegrationInput  `json:"datadog"`
	Betterstack *BetterStackIntegrationInput `json:"betterstack"`
}

// GetType returns LogShipperInput.Type, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetType() *LogShipperType { return v.Type }

// GetLogz returns LogShipperInput.Logz, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetLogz() *LogzIntegrationInput { return v.Logz }

// GetSyslog returns LogShipperInput.Syslog, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetSyslog() *SyslogIntegrationInput { return v.Syslog }

// GetLogDNA returns LogShipperInput.LogDNA, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetLogDNA() *LogDNAIntegrationInput { return v.LogDNA }

// GetDatadog returns LogShipperInput.Datadog, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetDatadog() *DatadogLogIntegrationInput { return v.Datadog }

// GetBetterstack returns LogShipperInput.Betterstack, and is useful for accessing the field via an interface.
func (v *LogShipperInput) GetBetterstack() *BetterStackIntegrationInput { return v.Betterstack }

type LogShipperType string

const (
	LogShipperTypeLogzio      LogShipperType = "LOGZIO"
	LogShipperTypeSyslog      LogShipperType = "SYSLOG"
	LogShipperTypeLogdna      LogShipperType = "LOGDNA"
	LogShipperTypeDatadog     LogShipperType = "DATADOG"
	LogShipperTypeBetterstack LogShipperType = "BETTERSTACK"
)

type LogzIntegrationInput struct {
	Token string `json:"token"`
	Url   string `json:"url"`
}

// GetToken returns LogzIntegrationInput.Token, and is useful for accessing the field via an interface.
func (v *LogzIntegrationInput) GetToken() string { return v.Token }

// GetUrl returns LogzIntegrationInput.Url, and is useful for accessing the field via an interface.
func (v *LogzIntegrationInput) GetUrl() string { return v.Url }

type ManifestProjectV3ConfigurationInput struct {
	ClusterID uuid.UUID                                      `json:"clusterID"`
	Namespace *string                                        `json:"namespace"`
	Generator *KubernetesManifestGeneratorConfigurationInput `json:"generator"`
}

// GetClusterID returns ManifestProjectV3ConfigurationInput.ClusterID, and is useful for accessing the field via an interface.
func (v *ManifestProjectV3ConfigurationInput) GetClusterID() uuid.UUID { return v.ClusterID }

// GetNamespace returns ManifestProjectV3ConfigurationInput.Namespace, and is useful for accessing the field via an interface.
func (v *ManifestProjectV3ConfigurationInput) GetNamespace() *string { return v.Namespace }

// GetGenerator returns ManifestProjectV3ConfigurationInput.Generator, and is useful for accessing the field via an interface.
func (v *ManifestProjectV3ConfigurationInput) GetGenerator() *KubernetesManifestGeneratorConfigurationInput {
	return v.Generator
}

type MetricLabelType string

const (
	MetricLabelTypePod       MetricLabelType = "POD"
	MetricLabelTypeContainer MetricLabelType = "CONTAINER"
)

type MetricQueryOptions struct {
	Range   ObservabilityRange `json:"range"`
	GroupBy []MetricLabelType  `json:"groupBy"`
}

// GetRange returns MetricQueryOptions.Range, and is useful for accessing the field via an interface.
func (v *MetricQueryOptions) GetRange() ObservabilityRange { return v.Range }

// GetGroupBy returns MetricQueryOptions.GroupBy, and is useful for accessing the field via an interface.
func (v *MetricQueryOptions) GetGroupBy() []MetricLabelType { return v.GroupBy }

// MetricStream includes the GraphQL fields of MetricStream requested by the fragment MetricStream.
type MetricStream struct {
	Type    *MetricType                           `json:"type"`
	Query   string                                `json:"query"`
	Labels  []MetricStreamLabelsMetricStreamLabel `json:"labels"`
	Entries []MetricStreamEntriesMetricEntry      `json:"entries"`
}

// GetType returns MetricStream.Type, and is useful for accessing the field via an interface.
func (v *MetricStream) GetType() *MetricType { return v.Type }

// GetQuery returns MetricStream.Query, and is useful for accessing the field via an interface.
func (v *MetricStream) GetQuery() string { return v.Query }

// GetLabels returns MetricStream.Labels, and is useful for accessing the field via an interface.
func (v *MetricStream) GetLabels() []MetricStreamLabelsMetricStreamLabel { return v.Labels }

// GetEntries returns MetricStream.Entries, and is useful for accessing the field via an interface.
func (v *MetricStream) GetEntries() []MetricStreamEntriesMetricEntry { return v.Entries }

// MetricStreamEntriesMetricEntry includes the requested fields of the GraphQL type MetricEntry.
type MetricStreamEntriesMetricEntry struct {
	Value     *float64  `json:"value"`
	Timestamp time.Time `json:"timestamp"`
}

// GetValue returns MetricStreamEntriesMetricEntry.Value, and is useful for accessing the field via an interface.
func (v *MetricStreamEntriesMetricEntry) GetValue() *float64 { return v.Value }

// GetTimestamp returns MetricStreamEntriesMetricEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricStreamEntriesMetricEntry) GetTimestamp() time.Time { return v.Timestamp }

// MetricStreamLabelsMetricStreamLabel includes the requested fields of the GraphQL type MetricStreamLabel.
type MetricStreamLabelsMetricStreamLabel struct {
	Label MetricLabelType `json:"label"`
	Value string          `json:"value"`
}

// GetLabel returns MetricStreamLabelsMetricStreamLabel.Label, and is useful for accessing the field via an interface.
func (v *MetricStreamLabelsMetricStreamLabel) GetLabel() MetricLabelType { return v.Label }

// GetValue returns MetricStreamLabelsMetricStreamLabel.Value, and is useful for accessing the field via an interface.
func (v *MetricStreamLabelsMetricStreamLabel) GetValue() string { return v.Value }

type MetricType string

const (
	MetricTypeQuery   MetricType = "QUERY"
	MetricTypeCpu     MetricType = "CPU"
	MetricTypeMemory  MetricType = "MEMORY"
	MetricTypeNetwork MetricType = "NETWORK"
	MetricTypeStorage MetricType = "STORAGE"
)

type MoveRepoInput struct {
	Id uuid.UUID `json:"id"`
	// - v0.ProjectID or v1.GroupID
	ProjectID       *uuid.UUID `json:"projectID"`
	EnvironmentName *string    `json:"environmentName"`
	// - v0.EnvironmentID or v1.SubGroupID
	EnvironmentID *uuid.UUID `json:"environmentID"`
	Name          *string    `json:"name"`
}

// GetId returns MoveRepoInput.Id, and is useful for accessing the field via an interface.
func (v *MoveRepoInput) GetId() uuid.UUID { return v.Id }

// GetProjectID returns MoveRepoInput.ProjectID, and is useful for accessing the field via an interface.
func (v *MoveRepoInput) GetProjectID() *uuid.UUID { return v.ProjectID }

// GetEnvironmentName returns MoveRepoInput.EnvironmentName, and is useful for accessing the field via an interface.
func (v *MoveRepoInput) GetEnvironmentName() *string { return v.EnvironmentName }

// GetEnvironmentID returns MoveRepoInput.EnvironmentID, and is useful for accessing the field via an interface.
func (v *MoveRepoInput) GetEnvironmentID() *uuid.UUID { return v.EnvironmentID }

// GetName returns MoveRepoInput.Name, and is useful for accessing the field via an interface.
func (v *MoveRepoInput) GetName() *string { return v.Name }

type MultiEntityCriterion struct {
	Value []uuid.UUID `json:"value"`
}

// GetValue returns MultiEntityCriterion.Value, and is useful for accessing the field via an interface.
func (v *MultiEntityCriterion) GetValue() []uuid.UUID { return v.Value }

type NotificationConditionGroupInput struct {
	Operator   NotificationConditionGroupOperator `json:"operator"`
	Conditions []NotificationConditionInput       `json:"conditions"`
}

// GetOperator returns NotificationConditionGroupInput.Operator, and is useful for accessing the field via an interface.
func (v *NotificationConditionGroupInput) GetOperator() NotificationConditionGroupOperator {
	return v.Operator
}

// GetConditions returns NotificationConditionGroupInput.Conditions, and is useful for accessing the field via an interface.
func (v *NotificationConditionGroupInput) GetConditions() []NotificationConditionInput {
	return v.Conditions
}

type NotificationConditionGroupOperator string

const (
	// The condition group is satisfied when ALL child conditions are satisfied
	NotificationConditionGroupOperatorAll NotificationConditionGroupOperator = "ALL"
	// The condition group is satisfied when ANY of the child conditions are satisfied.
	// WARNING: Not yet supported
	NotificationConditionGroupOperatorAny NotificationConditionGroupOperator = "ANY"
)

type NotificationConditionInput struct {
	Operator NotificationConditionOperator `json:"operator"`
	Key      NotificationConditionKey      `json:"key"`
	Value    string                        `json:"value"`
}

// GetOperator returns NotificationConditionInput.Operator, and is useful for accessing the field via an interface.
func (v *NotificationConditionInput) GetOperator() NotificationConditionOperator { return v.Operator }

// GetKey returns NotificationConditionInput.Key, and is useful for accessing the field via an interface.
func (v *NotificationConditionInput) GetKey() NotificationConditionKey { return v.Key }

// GetValue returns NotificationConditionInput.Value, and is useful for accessing the field via an interface.
func (v *NotificationConditionInput) GetValue() string { return v.Value }

// The set of available condition keys
type NotificationConditionKey string

const (
	// This is the id of the project (called a 'Group' in v1 API) which the notification originated from.
	NotificationConditionKeyProjectId NotificationConditionKey = "PROJECT_ID"
	// This is the id of the project environment (called a 'SubGroup' in v1) which the notification originated from.
	NotificationConditionKeyProjectEnvironmentId NotificationConditionKey = "PROJECT_ENVIRONMENT_ID"
	// This is the id of the ProjectV3Adapter ('Project' in v1 API) which the notification originated from.
	NotificationConditionKeyProjectV3AdapterId NotificationConditionKey = "PROJECT_V3_ADAPTER_ID"
)

type NotificationConditionOperator string

const (
	// The equality (==) operator, i.e. <key> == <value>
	NotificationConditionOperatorEquals NotificationConditionOperator = "EQUALS"
)

// The definition for notification conditions or notification.
//
// An instance of this input type can represent one of the following:
// - a single condition group: the 'groups' list is not empty, and the operator is not present
// - a combination of condition groups: the 'groups' list contains multiple members, and the operator is present
// - a single condition: the 'condition' field is present
// - clearing any configured conditions: the noConditions field is present and set to true
type NotificationConditionProviderInput struct {
	Operator     *NotificationConditionGroupOperator `json:"operator"`
	Groups       []NotificationConditionGroupInput   `json:"groups"`
	Condition    *NotificationConditionInput         `json:"condition"`
	NoConditions *bool                               `json:"noConditions"`
}

// GetOperator returns NotificationConditionProviderInput.Operator, and is useful for accessing the field via an interface.
func (v *NotificationConditionProviderInput) GetOperator() *NotificationConditionGroupOperator {
	return v.Operator
}

// GetGroups returns NotificationConditionProviderInput.Groups, and is useful for accessing the field via an interface.
func (v *NotificationConditionProviderInput) GetGroups() []NotificationConditionGroupInput {
	return v.Groups
}

// GetCondition returns NotificationConditionProviderInput.Condition, and is useful for accessing the field via an interface.
func (v *NotificationConditionProviderInput) GetCondition() *NotificationConditionInput {
	return v.Condition
}

// GetNoConditions returns NotificationConditionProviderInput.NoConditions, and is useful for accessing the field via an interface.
func (v *NotificationConditionProviderInput) GetNoConditions() *bool { return v.NoConditions }

// NotificationIntegrationCommon includes the GraphQL fields of NotificationIntegration requested by the fragment NotificationIntegrationCommon.
// The GraphQL type's documentation follows.
//
// A destination for Zeet notifications.
//
// NotificationIntegrationCommon is implemented by the following types:
// NotificationIntegrationCommonDiscordWebhookIntegration
// NotificationIntegrationCommonEmailIntegration
// NotificationIntegrationCommonSlackWebhookIntegration
type NotificationIntegrationCommon interface {
	implementsGraphQLInterfaceNotificationIntegrationCommon()
	// GetNotificationSettings returns the interface-field "notificationSettings" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// A notification integration can independently configure notification settings.
	// When null, this integration will use the user's
	// notificationIntegrationSettings.
	//
	// NOTE: These settings are NOT individually "merged" with the user's
	// notificationIntegrationSettings, either the integration's settings are used,
	// or the user's settings are used as a fallback.
	GetNotificationSettings() *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings
}

func (v *NotificationIntegrationCommonDiscordWebhookIntegration) implementsGraphQLInterfaceNotificationIntegrationCommon() {
}
func (v *NotificationIntegrationCommonEmailIntegration) implementsGraphQLInterfaceNotificationIntegrationCommon() {
}
func (v *NotificationIntegrationCommonSlackWebhookIntegration) implementsGraphQLInterfaceNotificationIntegrationCommon() {
}

func __unmarshalNotificationIntegrationCommon(b []byte, v *NotificationIntegrationCommon) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DiscordWebhookIntegration":
		*v = new(NotificationIntegrationCommonDiscordWebhookIntegration)
		return json.Unmarshal(b, *v)
	case "EmailIntegration":
		*v = new(NotificationIntegrationCommonEmailIntegration)
		return json.Unmarshal(b, *v)
	case "SlackWebhookIntegration":
		*v = new(NotificationIntegrationCommonSlackWebhookIntegration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing NotificationIntegration.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for NotificationIntegrationCommon: "%v"`, tn.TypeName)
	}
}

func __marshalNotificationIntegrationCommon(v *NotificationIntegrationCommon) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *NotificationIntegrationCommonDiscordWebhookIntegration:
		typename = "DiscordWebhookIntegration"

		result := struct {
			TypeName string `json:"__typename"`
			*NotificationIntegrationCommonDiscordWebhookIntegration
		}{typename, v}
		return json.Marshal(result)
	case *NotificationIntegrationCommonEmailIntegration:
		typename = "EmailIntegration"

		result := struct {
			TypeName string `json:"__typename"`
			*NotificationIntegrationCommonEmailIntegration
		}{typename, v}
		return json.Marshal(result)
	case *NotificationIntegrationCommonSlackWebhookIntegration:
		typename = "SlackWebhookIntegration"

		result := struct {
			TypeName string `json:"__typename"`
			*NotificationIntegrationCommonSlackWebhookIntegration
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for NotificationIntegrationCommon: "%T"`, v)
	}
}

// NotificationIntegrationCommon includes the GraphQL fields of DiscordWebhookIntegration requested by the fragment NotificationIntegrationCommon.
// The GraphQL type's documentation follows.
//
// A destination for Zeet notifications.
type NotificationIntegrationCommonDiscordWebhookIntegration struct {
	// A notification integration can independently configure notification settings.
	// When null, this integration will use the user's
	// notificationIntegrationSettings.
	//
	// NOTE: These settings are NOT individually "merged" with the user's
	// notificationIntegrationSettings, either the integration's settings are used,
	// or the user's settings are used as a fallback.
	NotificationSettings *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings `json:"notificationSettings"`
}

// GetNotificationSettings returns NotificationIntegrationCommonDiscordWebhookIntegration.NotificationSettings, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationCommonDiscordWebhookIntegration) GetNotificationSettings() *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings {
	return v.NotificationSettings
}

// NotificationIntegrationCommon includes the GraphQL fields of EmailIntegration requested by the fragment NotificationIntegrationCommon.
// The GraphQL type's documentation follows.
//
// A destination for Zeet notifications.
type NotificationIntegrationCommonEmailIntegration struct {
	// A notification integration can independently configure notification settings.
	// When null, this integration will use the user's
	// notificationIntegrationSettings.
	//
	// NOTE: These settings are NOT individually "merged" with the user's
	// notificationIntegrationSettings, either the integration's settings are used,
	// or the user's settings are used as a fallback.
	NotificationSettings *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings `json:"notificationSettings"`
}

// GetNotificationSettings returns NotificationIntegrationCommonEmailIntegration.NotificationSettings, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationCommonEmailIntegration) GetNotificationSettings() *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings {
	return v.NotificationSettings
}

// NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings includes the requested fields of the GraphQL type NotificationIntegrationSettings.
type NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings struct {
	// Enable/Disable build notifications
	Build *bool `json:"build"`
	// Enable/Disable deploy notifications
	Deploy *bool `json:"deploy"`
	// Enable/Disable kubernetes pod crash notifications
	PodCrash *bool `json:"podCrash"`
	// The condition that must be satisfied for a notification to be forwarded to this integration.
	// A null value indicates all configured notifications will be forwarded.
	//
	// Conditions apply to _all_ configured notification types. To apply different
	// conditions independently to each notification type,
	// create a separate notification integration for each notification type, and apply the desired conditions to each.
	//
	// NOTE: Conditions cannot be configured "globally" for a user.
	Conditions *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider `json:"-"`
}

// GetBuild returns NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings.Build, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings) GetBuild() *bool {
	return v.Build
}

// GetDeploy returns NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings.Deploy, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings) GetDeploy() *bool {
	return v.Deploy
}

// GetPodCrash returns NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings.PodCrash, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings) GetPodCrash() *bool {
	return v.PodCrash
}

// GetConditions returns NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings.Conditions, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings) GetConditions() *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider {
	return v.Conditions
}

func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings
		Conditions json.RawMessage `json:"conditions"`
		graphql.NoUnmarshalJSON
	}
	firstPass.NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Conditions
		src := firstPass.Conditions
		if len(src) != 0 && string(src) != "null" {
			*dst = new(NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider)
			err = __unmarshalNotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings.Conditions: %w", err)
			}
		}
	}
	return nil
}

type __premarshalNotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings struct {
	Build *bool `json:"build"`

	Deploy *bool `json:"deploy"`

	PodCrash *bool `json:"podCrash"`

	Conditions json.RawMessage `json:"conditions"`
}

func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings) __premarshalJSON() (*__premarshalNotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings, error) {
	var retval __premarshalNotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings

	retval.Build = v.Build
	retval.Deploy = v.Deploy
	retval.PodCrash = v.PodCrash
	{

		dst := &retval.Conditions
		src := v.Conditions
		if src != nil {
			var err error
			*dst, err = __marshalNotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings.Conditions: %w", err)
			}
		}
	}
	return &retval, nil
}

// NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition includes the requested fields of the GraphQL type NotificationCondition.
// The GraphQL type's documentation follows.
//
// A notification condition represents a test of some attribute against a target value. A NotificationCondition is evaluated
// to a true/false value, and can be combined via  NotificationConditionGroup.
//
// For example: {operator: EQUALS, key: PROJECT_ID, value: "abc-123"} will test a
// given notification for `event.project_id == "abc-123"`
type NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition struct {
	Typename *string `json:"__typename"`
	// The key to test using the operator and value
	Key *NotificationConditionKey `json:"key"`
	// The method by which the key is tested relative to the target value
	Operator *NotificationConditionOperator `json:"operator"`
	// The required value to satisfy the operator against the specific key.
	// The type of this will depend on the key and the operator, for example: {operator: EQUALS, key: PROJECT_ID}
	// will expect a string value.
	//
	// For example, if the IN operator is used with the PROJECT_ID key, the value will be a a json array: ["abc-123", "def-456"]
	Value *string `json:"value"`
}

// GetTypename returns NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition.Typename, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition) GetTypename() *string {
	return v.Typename
}

// GetKey returns NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition.Key, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition) GetKey() *NotificationConditionKey {
	return v.Key
}

// GetOperator returns NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition.Operator, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition) GetOperator() *NotificationConditionOperator {
	return v.Operator
}

// GetValue returns NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition.Value, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition) GetValue() *string {
	return v.Value
}

// NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionGroup includes the requested fields of the GraphQL type NotificationConditionGroup.
// The GraphQL type's documentation follows.
//
// Represents the logical combination of one or more conditions
type NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionGroup.Typename, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionGroup) GetTypename() *string {
	return v.Typename
}

// NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider includes the requested fields of the GraphQL interface NotificationConditionProvider.
//
// NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider is implemented by the following types:
// NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition
// NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionGroup
// The GraphQL type's documentation follows.
//
// Conditions can be provided as either a singular condition or a group of combined conditions.
// When a notification is triggered by Zeet, a NotificationConditionProvider, if
// configured, will be evaluated against the notification's attributes.
// If the NotificationConditionProvider is satisfied (i.e. evaluates to 'true'),
// then the notification will be forwarded to the target integration.
type NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider interface {
	implementsGraphQLInterfaceNotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition) implementsGraphQLInterfaceNotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider() {
}
func (v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionGroup) implementsGraphQLInterfaceNotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider() {
}

func __unmarshalNotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider(b []byte, v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "NotificationCondition":
		*v = new(NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition)
		return json.Unmarshal(b, *v)
	case "NotificationConditionGroup":
		*v = new(NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionGroup)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing NotificationConditionProvider.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider: "%v"`, tn.TypeName)
	}
}

func __marshalNotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider(v *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition:
		typename = "NotificationCondition"

		result := struct {
			TypeName string `json:"__typename"`
			*NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationCondition
		}{typename, v}
		return json.Marshal(result)
	case *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionGroup:
		typename = "NotificationConditionGroup"

		result := struct {
			TypeName string `json:"__typename"`
			*NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionGroup
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettingsConditionsNotificationConditionProvider: "%T"`, v)
	}
}

// NotificationIntegrationCommon includes the GraphQL fields of SlackWebhookIntegration requested by the fragment NotificationIntegrationCommon.
// The GraphQL type's documentation follows.
//
// A destination for Zeet notifications.
type NotificationIntegrationCommonSlackWebhookIntegration struct {
	// A notification integration can independently configure notification settings.
	// When null, this integration will use the user's
	// notificationIntegrationSettings.
	//
	// NOTE: These settings are NOT individually "merged" with the user's
	// notificationIntegrationSettings, either the integration's settings are used,
	// or the user's settings are used as a fallback.
	NotificationSettings *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings `json:"notificationSettings"`
}

// GetNotificationSettings returns NotificationIntegrationCommonSlackWebhookIntegration.NotificationSettings, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationCommonSlackWebhookIntegration) GetNotificationSettings() *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings {
	return v.NotificationSettings
}

type NotificationIntegrationSettingsInput struct {
	// Enable/Disable build notifications, null causes no change to current setting
	//
	// NOTE: not applicable to "global" settings, only applicable to integration-specific settings
	Build *bool `json:"build"`
	// Enable/Disable deploy notifications, null causes no change to current setting
	//
	// NOTE: not applicable to "global" settings, only applicable to integration-specific settings
	Deploy *bool `json:"deploy"`
	// Enable/Disable kubernetes pod crash notifications, null causes no change to current setting
	PodCrash *bool `json:"podCrash"`
	// NOTE: Conditions cannot be configured "globally" for a user. Conditions may only be configured for a specific integration.
	Conditions *NotificationConditionProviderInput `json:"conditions"`
}

// GetBuild returns NotificationIntegrationSettingsInput.Build, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationSettingsInput) GetBuild() *bool { return v.Build }

// GetDeploy returns NotificationIntegrationSettingsInput.Deploy, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationSettingsInput) GetDeploy() *bool { return v.Deploy }

// GetPodCrash returns NotificationIntegrationSettingsInput.PodCrash, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationSettingsInput) GetPodCrash() *bool { return v.PodCrash }

// GetConditions returns NotificationIntegrationSettingsInput.Conditions, and is useful for accessing the field via an interface.
func (v *NotificationIntegrationSettingsInput) GetConditions() *NotificationConditionProviderInput {
	return v.Conditions
}

type ObservabilityRange struct {
	Start time.Time      `json:"start"`
	End   *time.Time     `json:"end"`
	Step  *time.Duration `json:"step"`
}

// GetStart returns ObservabilityRange.Start, and is useful for accessing the field via an interface.
func (v *ObservabilityRange) GetStart() time.Time { return v.Start }

// GetEnd returns ObservabilityRange.End, and is useful for accessing the field via an interface.
func (v *ObservabilityRange) GetEnd() *time.Time { return v.End }

// GetStep returns ObservabilityRange.Step, and is useful for accessing the field via an interface.
func (v *ObservabilityRange) GetStep() *time.Duration { return v.Step }

type PageInput struct {
	First  *int    `json:"first"`
	Last   *int    `json:"last"`
	After  *string `json:"after"`
	Before *string `json:"before"`
	Filter *string `json:"filter"`
	Sort   *string `json:"sort"`
}

// GetFirst returns PageInput.First, and is useful for accessing the field via an interface.
func (v *PageInput) GetFirst() *int { return v.First }

// GetLast returns PageInput.Last, and is useful for accessing the field via an interface.
func (v *PageInput) GetLast() *int { return v.Last }

// GetAfter returns PageInput.After, and is useful for accessing the field via an interface.
func (v *PageInput) GetAfter() *string { return v.After }

// GetBefore returns PageInput.Before, and is useful for accessing the field via an interface.
func (v *PageInput) GetBefore() *string { return v.Before }

// GetFilter returns PageInput.Filter, and is useful for accessing the field via an interface.
func (v *PageInput) GetFilter() *string { return v.Filter }

// GetSort returns PageInput.Sort, and is useful for accessing the field via an interface.
func (v *PageInput) GetSort() *string { return v.Sort }

type PlanBillingPeriod string

const (
	PlanBillingPeriodMonthly  PlanBillingPeriod = "MONTHLY"
	PlanBillingPeriodAnnually PlanBillingPeriod = "ANNUALLY"
)

type PlanTier string

const (
	PlanTierLegacy PlanTier = "LEGACY"
	PlanTierBasic  PlanTier = "BASIC"
	PlanTierPro    PlanTier = "PRO"
)

type PortInput struct {
	Port     string       `json:"port"`
	Protocol PortProtocol `json:"protocol"`
	Public   bool         `json:"public"`
	Https    bool         `json:"https"`
	Grpc     *bool        `json:"grpc"`
}

// GetPort returns PortInput.Port, and is useful for accessing the field via an interface.
func (v *PortInput) GetPort() string { return v.Port }

// GetProtocol returns PortInput.Protocol, and is useful for accessing the field via an interface.
func (v *PortInput) GetProtocol() PortProtocol { return v.Protocol }

// GetPublic returns PortInput.Public, and is useful for accessing the field via an interface.
func (v *PortInput) GetPublic() bool { return v.Public }

// GetHttps returns PortInput.Https, and is useful for accessing the field via an interface.
func (v *PortInput) GetHttps() bool { return v.Https }

// GetGrpc returns PortInput.Grpc, and is useful for accessing the field via an interface.
func (v *PortInput) GetGrpc() *bool { return v.Grpc }

type PortProtocol string

const (
	PortProtocolTcp PortProtocol = "tcp"
	PortProtocolUdp PortProtocol = "udp"
)

// ProbeDetail includes the GraphQL fields of Probe requested by the fragment ProbeDetail.
type ProbeDetail struct {
	Command             *string                   `json:"command"`
	Http                *ProbeDetailHttpHTTPProbe `json:"http"`
	Tcp                 *ProbeDetailTcpTCPProbe   `json:"tcp"`
	InitialDelaySeconds int                       `json:"initialDelaySeconds"`
	PeriodSeconds       int                       `json:"periodSeconds"`
	SuccessThreshold    int                       `json:"successThreshold"`
	FailureThreshold    int                       `json:"failureThreshold"`
	TimeoutSeconds      int                       `json:"timeoutSeconds"`
}

// GetCommand returns ProbeDetail.Command, and is useful for accessing the field via an interface.
func (v *ProbeDetail) GetCommand() *string { return v.Command }

// GetHttp returns ProbeDetail.Http, and is useful for accessing the field via an interface.
func (v *ProbeDetail) GetHttp() *ProbeDetailHttpHTTPProbe { return v.Http }

// GetTcp returns ProbeDetail.Tcp, and is useful for accessing the field via an interface.
func (v *ProbeDetail) GetTcp() *ProbeDetailTcpTCPProbe { return v.Tcp }

// GetInitialDelaySeconds returns ProbeDetail.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *ProbeDetail) GetInitialDelaySeconds() int { return v.InitialDelaySeconds }

// GetPeriodSeconds returns ProbeDetail.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *ProbeDetail) GetPeriodSeconds() int { return v.PeriodSeconds }

// GetSuccessThreshold returns ProbeDetail.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *ProbeDetail) GetSuccessThreshold() int { return v.SuccessThreshold }

// GetFailureThreshold returns ProbeDetail.FailureThreshold, and is useful for accessing the field via an interface.
func (v *ProbeDetail) GetFailureThreshold() int { return v.FailureThreshold }

// GetTimeoutSeconds returns ProbeDetail.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *ProbeDetail) GetTimeoutSeconds() int { return v.TimeoutSeconds }

// ProbeDetailHttpHTTPProbe includes the requested fields of the GraphQL type HTTPProbe.
type ProbeDetailHttpHTTPProbe struct {
	Host *string `json:"host"`
	Port string  `json:"port"`
	Path *string `json:"path"`
}

// GetHost returns ProbeDetailHttpHTTPProbe.Host, and is useful for accessing the field via an interface.
func (v *ProbeDetailHttpHTTPProbe) GetHost() *string { return v.Host }

// GetPort returns ProbeDetailHttpHTTPProbe.Port, and is useful for accessing the field via an interface.
func (v *ProbeDetailHttpHTTPProbe) GetPort() string { return v.Port }

// GetPath returns ProbeDetailHttpHTTPProbe.Path, and is useful for accessing the field via an interface.
func (v *ProbeDetailHttpHTTPProbe) GetPath() *string { return v.Path }

// ProbeDetailTcpTCPProbe includes the requested fields of the GraphQL type TCPProbe.
type ProbeDetailTcpTCPProbe struct {
	Host *string `json:"host"`
	Port string  `json:"port"`
}

// GetHost returns ProbeDetailTcpTCPProbe.Host, and is useful for accessing the field via an interface.
func (v *ProbeDetailTcpTCPProbe) GetHost() *string { return v.Host }

// GetPort returns ProbeDetailTcpTCPProbe.Port, and is useful for accessing the field via an interface.
func (v *ProbeDetailTcpTCPProbe) GetPort() string { return v.Port }

type ProbeInput struct {
	Command             *string `json:"command"`
	HttpEndpoint        *string `json:"httpEndpoint"`
	TcpEndpoint         *string `json:"tcpEndpoint"`
	InitialDelaySeconds *int    `json:"initialDelaySeconds"`
	PeriodSeconds       *int    `json:"periodSeconds"`
	SuccessThreshold    *int    `json:"successThreshold"`
	FailureThreshold    *int    `json:"failureThreshold"`
	TimeoutSeconds      *int    `json:"timeoutSeconds"`
}

// GetCommand returns ProbeInput.Command, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetCommand() *string { return v.Command }

// GetHttpEndpoint returns ProbeInput.HttpEndpoint, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetHttpEndpoint() *string { return v.HttpEndpoint }

// GetTcpEndpoint returns ProbeInput.TcpEndpoint, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetTcpEndpoint() *string { return v.TcpEndpoint }

// GetInitialDelaySeconds returns ProbeInput.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetInitialDelaySeconds() *int { return v.InitialDelaySeconds }

// GetPeriodSeconds returns ProbeInput.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetPeriodSeconds() *int { return v.PeriodSeconds }

// GetSuccessThreshold returns ProbeInput.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetSuccessThreshold() *int { return v.SuccessThreshold }

// GetFailureThreshold returns ProbeInput.FailureThreshold, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetFailureThreshold() *int { return v.FailureThreshold }

// GetTimeoutSeconds returns ProbeInput.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *ProbeInput) GetTimeoutSeconds() *int { return v.TimeoutSeconds }

// ProductCatalogSectionDetail includes the GraphQL fields of ProductCatalogSection requested by the fragment ProductCatalogSectionDetail.
// The GraphQL type's documentation follows.
//
// A section of the product catalog, showing products of a single type (Plan Tier, Support Tier, etc)
type ProductCatalogSectionDetail struct {
	SectionName string `json:"sectionName"`
	// Metadata for the product type this section is for
	ProductTypeMetadata *ProductCatalogSectionDetailProductTypeMetadata `json:"productTypeMetadata"`
	// All available products, regardless of the current subscription.
	AllProducts []ProductCatalogSectionDetailAllProductsCatalogProductView `json:"allProducts"`
}

// GetSectionName returns ProductCatalogSectionDetail.SectionName, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetail) GetSectionName() string { return v.SectionName }

// GetProductTypeMetadata returns ProductCatalogSectionDetail.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetail) GetProductTypeMetadata() *ProductCatalogSectionDetailProductTypeMetadata {
	return v.ProductTypeMetadata
}

// GetAllProducts returns ProductCatalogSectionDetail.AllProducts, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetail) GetAllProducts() []ProductCatalogSectionDetailAllProductsCatalogProductView {
	return v.AllProducts
}

// ProductCatalogSectionDetailAllProductsCatalogProductView includes the requested fields of the GraphQL type CatalogProductView.
type ProductCatalogSectionDetailAllProductsCatalogProductView struct {
	Product     ProductCatalogSectionDetailAllProductsCatalogProductViewProduct `json:"-"`
	Description *string                                                         `json:"description"`
	// Indicates if this is part of the current subscription, or represents an upgrade or downgrade over the current product.
	// Null if no user is being queried.
	Status *CatalogProductStatus `json:"status"`
	// Whether this product is available for self-service purchasing.
	Available bool `json:"available"`
}

// GetProduct returns ProductCatalogSectionDetailAllProductsCatalogProductView.Product, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductView) GetProduct() ProductCatalogSectionDetailAllProductsCatalogProductViewProduct {
	return v.Product
}

// GetDescription returns ProductCatalogSectionDetailAllProductsCatalogProductView.Description, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductView) GetDescription() *string {
	return v.Description
}

// GetStatus returns ProductCatalogSectionDetailAllProductsCatalogProductView.Status, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductView) GetStatus() *CatalogProductStatus {
	return v.Status
}

// GetAvailable returns ProductCatalogSectionDetailAllProductsCatalogProductView.Available, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductView) GetAvailable() bool {
	return v.Available
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductView) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProductCatalogSectionDetailAllProductsCatalogProductView
		Product json.RawMessage `json:"product"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ProductCatalogSectionDetailAllProductsCatalogProductView = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Product
		src := firstPass.Product
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalProductCatalogSectionDetailAllProductsCatalogProductViewProduct(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ProductCatalogSectionDetailAllProductsCatalogProductView.Product: %w", err)
			}
		}
	}
	return nil
}

type __premarshalProductCatalogSectionDetailAllProductsCatalogProductView struct {
	Product json.RawMessage `json:"product"`

	Description *string `json:"description"`

	Status *CatalogProductStatus `json:"status"`

	Available bool `json:"available"`
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductView) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductView) __premarshalJSON() (*__premarshalProductCatalogSectionDetailAllProductsCatalogProductView, error) {
	var retval __premarshalProductCatalogSectionDetailAllProductsCatalogProductView

	{

		dst := &retval.Product
		src := v.Product
		var err error
		*dst, err = __marshalProductCatalogSectionDetailAllProductsCatalogProductViewProduct(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ProductCatalogSectionDetailAllProductsCatalogProductView.Product: %w", err)
		}
	}
	retval.Description = v.Description
	retval.Status = v.Status
	retval.Available = v.Available
	return &retval, nil
}

// ProductCatalogSectionDetailAllProductsCatalogProductViewProduct includes the requested fields of the GraphQL interface Product.
//
// ProductCatalogSectionDetailAllProductsCatalogProductViewProduct is implemented by the following types:
// ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess
// ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2
// ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack
// ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier
type ProductCatalogSectionDetailAllProductsCatalogProductViewProduct interface {
	implementsGraphQLInterfaceProductCatalogSectionDetailAllProductsCatalogProductViewProduct()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	ProductDetail
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess) implementsGraphQLInterfaceProductCatalogSectionDetailAllProductsCatalogProductViewProduct() {
}
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess) implementsGraphQLInterfaceProductDetail() {
}
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2) implementsGraphQLInterfaceProductCatalogSectionDetailAllProductsCatalogProductViewProduct() {
}
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2) implementsGraphQLInterfaceProductDetail() {
}
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack) implementsGraphQLInterfaceProductCatalogSectionDetailAllProductsCatalogProductViewProduct() {
}
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack) implementsGraphQLInterfaceProductDetail() {
}
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier) implementsGraphQLInterfaceProductCatalogSectionDetailAllProductsCatalogProductViewProduct() {
}
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier) implementsGraphQLInterfaceProductDetail() {
}

func __unmarshalProductCatalogSectionDetailAllProductsCatalogProductViewProduct(b []byte, v *ProductCatalogSectionDetailAllProductsCatalogProductViewProduct) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ApiAccess":
		*v = new(ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess)
		return json.Unmarshal(b, *v)
	case "PlanTierV2":
		*v = new(ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2)
		return json.Unmarshal(b, *v)
	case "ProjectPack":
		*v = new(ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack)
		return json.Unmarshal(b, *v)
	case "SupportTier":
		*v = new(ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Product.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ProductCatalogSectionDetailAllProductsCatalogProductViewProduct: "%v"`, tn.TypeName)
	}
}

func __marshalProductCatalogSectionDetailAllProductsCatalogProductViewProduct(v *ProductCatalogSectionDetailAllProductsCatalogProductViewProduct) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess:
		typename = "ApiAccess"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2:
		typename = "PlanTierV2"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack:
		typename = "ProjectPack"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier:
		typename = "SupportTier"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ProductCatalogSectionDetailAllProductsCatalogProductViewProduct: "%T"`, v)
	}
}

// ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess includes the requested fields of the GraphQL type ApiAccess.
type ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess struct {
	Typename               *string `json:"__typename"`
	ProductDetailApiAccess `json:"-"`
}

// GetTypename returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess.Typename, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailApiAccess.ProductTypeMetadata
}

// GetName returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess.Name, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess) GetName() *string {
	return v.ProductDetailApiAccess.Name
}

// GetDescription returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess.Description, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess) GetDescription() *string {
	return v.ProductDetailApiAccess.Description
}

// GetSku returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess.Sku, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess) GetSku() uuid.UUID {
	return v.ProductDetailApiAccess.Sku
}

// GetDisplayPrice returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess.DisplayPrice, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess) GetDisplayPrice() *string {
	return v.ProductDetailApiAccess.DisplayPrice
}

// GetUsage returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess.Usage, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess) GetUsage() []ProductDetailUsage {
	return v.ProductDetailApiAccess.Usage
}

// GetBenefits returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess.Benefits, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess) GetBenefits() []string {
	return v.ProductDetailApiAccess.Benefits
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess
		graphql.NoUnmarshalJSON
	}
	firstPass.ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailApiAccess)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess) __premarshalJSON() (*__premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess, error) {
	var retval __premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductApiAccess

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailApiAccess.ProductTypeMetadata
	retval.Name = v.ProductDetailApiAccess.Name
	retval.Description = v.ProductDetailApiAccess.Description
	retval.Sku = v.ProductDetailApiAccess.Sku
	retval.DisplayPrice = v.ProductDetailApiAccess.DisplayPrice
	retval.Usage = v.ProductDetailApiAccess.Usage
	retval.Benefits = v.ProductDetailApiAccess.Benefits
	return &retval, nil
}

// ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2 includes the requested fields of the GraphQL type PlanTierV2.
type ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2 struct {
	Typename                *string `json:"__typename"`
	ProductDetailPlanTierV2 `json:"-"`
}

// GetTypename returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2.Typename, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailPlanTierV2.ProductTypeMetadata
}

// GetName returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2.Name, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2) GetName() *string {
	return v.ProductDetailPlanTierV2.Name
}

// GetDescription returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2.Description, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2) GetDescription() *string {
	return v.ProductDetailPlanTierV2.Description
}

// GetSku returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2.Sku, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2) GetSku() uuid.UUID {
	return v.ProductDetailPlanTierV2.Sku
}

// GetDisplayPrice returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2.DisplayPrice, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2) GetDisplayPrice() *string {
	return v.ProductDetailPlanTierV2.DisplayPrice
}

// GetUsage returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2.Usage, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2) GetUsage() []ProductDetailUsage {
	return v.ProductDetailPlanTierV2.Usage
}

// GetBenefits returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2.Benefits, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2) GetBenefits() []string {
	return v.ProductDetailPlanTierV2.Benefits
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2
		graphql.NoUnmarshalJSON
	}
	firstPass.ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailPlanTierV2)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2 struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2) __premarshalJSON() (*__premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2, error) {
	var retval __premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductPlanTierV2

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailPlanTierV2.ProductTypeMetadata
	retval.Name = v.ProductDetailPlanTierV2.Name
	retval.Description = v.ProductDetailPlanTierV2.Description
	retval.Sku = v.ProductDetailPlanTierV2.Sku
	retval.DisplayPrice = v.ProductDetailPlanTierV2.DisplayPrice
	retval.Usage = v.ProductDetailPlanTierV2.Usage
	retval.Benefits = v.ProductDetailPlanTierV2.Benefits
	return &retval, nil
}

// ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack includes the requested fields of the GraphQL type ProjectPack.
type ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack struct {
	Typename                 *string `json:"__typename"`
	ProductDetailProjectPack `json:"-"`
}

// GetTypename returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack.Typename, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailProjectPack.ProductTypeMetadata
}

// GetName returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack.Name, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack) GetName() *string {
	return v.ProductDetailProjectPack.Name
}

// GetDescription returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack.Description, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack) GetDescription() *string {
	return v.ProductDetailProjectPack.Description
}

// GetSku returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack.Sku, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack) GetSku() uuid.UUID {
	return v.ProductDetailProjectPack.Sku
}

// GetDisplayPrice returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack.DisplayPrice, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack) GetDisplayPrice() *string {
	return v.ProductDetailProjectPack.DisplayPrice
}

// GetUsage returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack.Usage, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack) GetUsage() []ProductDetailUsage {
	return v.ProductDetailProjectPack.Usage
}

// GetBenefits returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack.Benefits, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack) GetBenefits() []string {
	return v.ProductDetailProjectPack.Benefits
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack
		graphql.NoUnmarshalJSON
	}
	firstPass.ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailProjectPack)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack) __premarshalJSON() (*__premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack, error) {
	var retval __premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductProjectPack

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailProjectPack.ProductTypeMetadata
	retval.Name = v.ProductDetailProjectPack.Name
	retval.Description = v.ProductDetailProjectPack.Description
	retval.Sku = v.ProductDetailProjectPack.Sku
	retval.DisplayPrice = v.ProductDetailProjectPack.DisplayPrice
	retval.Usage = v.ProductDetailProjectPack.Usage
	retval.Benefits = v.ProductDetailProjectPack.Benefits
	return &retval, nil
}

// ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier includes the requested fields of the GraphQL type SupportTier.
type ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier struct {
	Typename                 *string `json:"__typename"`
	ProductDetailSupportTier `json:"-"`
}

// GetTypename returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier.Typename, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailSupportTier.ProductTypeMetadata
}

// GetName returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier.Name, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier) GetName() *string {
	return v.ProductDetailSupportTier.Name
}

// GetDescription returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier.Description, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier) GetDescription() *string {
	return v.ProductDetailSupportTier.Description
}

// GetSku returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier.Sku, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier) GetSku() uuid.UUID {
	return v.ProductDetailSupportTier.Sku
}

// GetDisplayPrice returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier.DisplayPrice, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier) GetDisplayPrice() *string {
	return v.ProductDetailSupportTier.DisplayPrice
}

// GetUsage returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier.Usage, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier) GetUsage() []ProductDetailUsage {
	return v.ProductDetailSupportTier.Usage
}

// GetBenefits returns ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier.Benefits, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier) GetBenefits() []string {
	return v.ProductDetailSupportTier.Benefits
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier
		graphql.NoUnmarshalJSON
	}
	firstPass.ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailSupportTier)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier) __premarshalJSON() (*__premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier, error) {
	var retval __premarshalProductCatalogSectionDetailAllProductsCatalogProductViewProductSupportTier

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailSupportTier.ProductTypeMetadata
	retval.Name = v.ProductDetailSupportTier.Name
	retval.Description = v.ProductDetailSupportTier.Description
	retval.Sku = v.ProductDetailSupportTier.Sku
	retval.DisplayPrice = v.ProductDetailSupportTier.DisplayPrice
	retval.Usage = v.ProductDetailSupportTier.Usage
	retval.Benefits = v.ProductDetailSupportTier.Benefits
	return &retval, nil
}

// ProductCatalogSectionDetailProductTypeMetadata includes the requested fields of the GraphQL type ProductTypeMetadata.
type ProductCatalogSectionDetailProductTypeMetadata struct {
	ProductType       *ProductType `json:"productType"`
	DisplayName       *string      `json:"displayName"`
	PricingPageAnchor *string      `json:"pricingPageAnchor"`
}

// GetProductType returns ProductCatalogSectionDetailProductTypeMetadata.ProductType, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailProductTypeMetadata) GetProductType() *ProductType {
	return v.ProductType
}

// GetDisplayName returns ProductCatalogSectionDetailProductTypeMetadata.DisplayName, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailProductTypeMetadata) GetDisplayName() *string {
	return v.DisplayName
}

// GetPricingPageAnchor returns ProductCatalogSectionDetailProductTypeMetadata.PricingPageAnchor, and is useful for accessing the field via an interface.
func (v *ProductCatalogSectionDetailProductTypeMetadata) GetPricingPageAnchor() *string {
	return v.PricingPageAnchor
}

// ProductDetail includes the GraphQL fields of Product requested by the fragment ProductDetail.
//
// ProductDetail is implemented by the following types:
// ProductDetailApiAccess
// ProductDetailPlanTierV2
// ProductDetailProjectPack
// ProductDetailSupportTier
type ProductDetail interface {
	implementsGraphQLInterfaceProductDetail()
	// GetProductTypeMetadata returns the interface-field "productTypeMetadata" from its implementation.
	GetProductTypeMetadata() *ProductDetailProductTypeMetadata
	// GetName returns the interface-field "name" from its implementation.
	GetName() *string
	// GetDescription returns the interface-field "description" from its implementation.
	GetDescription() *string
	// GetSku returns the interface-field "sku" from its implementation.
	GetSku() uuid.UUID
	// GetDisplayPrice returns the interface-field "displayPrice" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// A string used to communicate the price of this product. No currency or format should be assumed.
	GetDisplayPrice() *string
	// GetUsage returns the interface-field "usage" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Any usage governed by this Product.
	GetUsage() []ProductDetailUsage
	// GetBenefits returns the interface-field "benefits" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Any benefit descriptions.
	GetBenefits() []string
}

func (v *ProductDetailApiAccess) implementsGraphQLInterfaceProductDetail()   {}
func (v *ProductDetailPlanTierV2) implementsGraphQLInterfaceProductDetail()  {}
func (v *ProductDetailProjectPack) implementsGraphQLInterfaceProductDetail() {}
func (v *ProductDetailSupportTier) implementsGraphQLInterfaceProductDetail() {}

func __unmarshalProductDetail(b []byte, v *ProductDetail) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ApiAccess":
		*v = new(ProductDetailApiAccess)
		return json.Unmarshal(b, *v)
	case "PlanTierV2":
		*v = new(ProductDetailPlanTierV2)
		return json.Unmarshal(b, *v)
	case "ProjectPack":
		*v = new(ProductDetailProjectPack)
		return json.Unmarshal(b, *v)
	case "SupportTier":
		*v = new(ProductDetailSupportTier)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Product.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ProductDetail: "%v"`, tn.TypeName)
	}
}

func __marshalProductDetail(v *ProductDetail) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ProductDetailApiAccess:
		typename = "ApiAccess"

		result := struct {
			TypeName string `json:"__typename"`
			*ProductDetailApiAccess
		}{typename, v}
		return json.Marshal(result)
	case *ProductDetailPlanTierV2:
		typename = "PlanTierV2"

		result := struct {
			TypeName string `json:"__typename"`
			*ProductDetailPlanTierV2
		}{typename, v}
		return json.Marshal(result)
	case *ProductDetailProjectPack:
		typename = "ProjectPack"

		result := struct {
			TypeName string `json:"__typename"`
			*ProductDetailProjectPack
		}{typename, v}
		return json.Marshal(result)
	case *ProductDetailSupportTier:
		typename = "SupportTier"

		result := struct {
			TypeName string `json:"__typename"`
			*ProductDetailSupportTier
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ProductDetail: "%T"`, v)
	}
}

// ProductDetail includes the GraphQL fields of ApiAccess requested by the fragment ProductDetail.
type ProductDetailApiAccess struct {
	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`
	Name                *string                           `json:"name"`
	Description         *string                           `json:"description"`
	Sku                 uuid.UUID                         `json:"sku"`
	// A string used to communicate the price of this product. No currency or format should be assumed.
	DisplayPrice *string `json:"displayPrice"`
	// Any usage governed by this Product.
	Usage []ProductDetailUsage `json:"usage"`
	// Any benefit descriptions.
	Benefits []string `json:"benefits"`
}

// GetProductTypeMetadata returns ProductDetailApiAccess.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *ProductDetailApiAccess) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductTypeMetadata
}

// GetName returns ProductDetailApiAccess.Name, and is useful for accessing the field via an interface.
func (v *ProductDetailApiAccess) GetName() *string { return v.Name }

// GetDescription returns ProductDetailApiAccess.Description, and is useful for accessing the field via an interface.
func (v *ProductDetailApiAccess) GetDescription() *string { return v.Description }

// GetSku returns ProductDetailApiAccess.Sku, and is useful for accessing the field via an interface.
func (v *ProductDetailApiAccess) GetSku() uuid.UUID { return v.Sku }

// GetDisplayPrice returns ProductDetailApiAccess.DisplayPrice, and is useful for accessing the field via an interface.
func (v *ProductDetailApiAccess) GetDisplayPrice() *string { return v.DisplayPrice }

// GetUsage returns ProductDetailApiAccess.Usage, and is useful for accessing the field via an interface.
func (v *ProductDetailApiAccess) GetUsage() []ProductDetailUsage { return v.Usage }

// GetBenefits returns ProductDetailApiAccess.Benefits, and is useful for accessing the field via an interface.
func (v *ProductDetailApiAccess) GetBenefits() []string { return v.Benefits }

// ProductDetail includes the GraphQL fields of PlanTierV2 requested by the fragment ProductDetail.
type ProductDetailPlanTierV2 struct {
	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`
	Name                *string                           `json:"name"`
	Description         *string                           `json:"description"`
	Sku                 uuid.UUID                         `json:"sku"`
	// A string used to communicate the price of this product. No currency or format should be assumed.
	DisplayPrice *string `json:"displayPrice"`
	// Any usage governed by this Product.
	Usage []ProductDetailUsage `json:"usage"`
	// Any benefit descriptions.
	Benefits []string `json:"benefits"`
}

// GetProductTypeMetadata returns ProductDetailPlanTierV2.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *ProductDetailPlanTierV2) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductTypeMetadata
}

// GetName returns ProductDetailPlanTierV2.Name, and is useful for accessing the field via an interface.
func (v *ProductDetailPlanTierV2) GetName() *string { return v.Name }

// GetDescription returns ProductDetailPlanTierV2.Description, and is useful for accessing the field via an interface.
func (v *ProductDetailPlanTierV2) GetDescription() *string { return v.Description }

// GetSku returns ProductDetailPlanTierV2.Sku, and is useful for accessing the field via an interface.
func (v *ProductDetailPlanTierV2) GetSku() uuid.UUID { return v.Sku }

// GetDisplayPrice returns ProductDetailPlanTierV2.DisplayPrice, and is useful for accessing the field via an interface.
func (v *ProductDetailPlanTierV2) GetDisplayPrice() *string { return v.DisplayPrice }

// GetUsage returns ProductDetailPlanTierV2.Usage, and is useful for accessing the field via an interface.
func (v *ProductDetailPlanTierV2) GetUsage() []ProductDetailUsage { return v.Usage }

// GetBenefits returns ProductDetailPlanTierV2.Benefits, and is useful for accessing the field via an interface.
func (v *ProductDetailPlanTierV2) GetBenefits() []string { return v.Benefits }

// ProductDetailProductTypeMetadata includes the requested fields of the GraphQL type ProductTypeMetadata.
type ProductDetailProductTypeMetadata struct {
	ProductType       *ProductType `json:"productType"`
	DisplayName       *string      `json:"displayName"`
	PricingPageAnchor *string      `json:"pricingPageAnchor"`
}

// GetProductType returns ProductDetailProductTypeMetadata.ProductType, and is useful for accessing the field via an interface.
func (v *ProductDetailProductTypeMetadata) GetProductType() *ProductType { return v.ProductType }

// GetDisplayName returns ProductDetailProductTypeMetadata.DisplayName, and is useful for accessing the field via an interface.
func (v *ProductDetailProductTypeMetadata) GetDisplayName() *string { return v.DisplayName }

// GetPricingPageAnchor returns ProductDetailProductTypeMetadata.PricingPageAnchor, and is useful for accessing the field via an interface.
func (v *ProductDetailProductTypeMetadata) GetPricingPageAnchor() *string { return v.PricingPageAnchor }

// ProductDetail includes the GraphQL fields of ProjectPack requested by the fragment ProductDetail.
type ProductDetailProjectPack struct {
	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`
	Name                *string                           `json:"name"`
	Description         *string                           `json:"description"`
	Sku                 uuid.UUID                         `json:"sku"`
	// A string used to communicate the price of this product. No currency or format should be assumed.
	DisplayPrice *string `json:"displayPrice"`
	// Any usage governed by this Product.
	Usage []ProductDetailUsage `json:"usage"`
	// Any benefit descriptions.
	Benefits []string `json:"benefits"`
}

// GetProductTypeMetadata returns ProductDetailProjectPack.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *ProductDetailProjectPack) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductTypeMetadata
}

// GetName returns ProductDetailProjectPack.Name, and is useful for accessing the field via an interface.
func (v *ProductDetailProjectPack) GetName() *string { return v.Name }

// GetDescription returns ProductDetailProjectPack.Description, and is useful for accessing the field via an interface.
func (v *ProductDetailProjectPack) GetDescription() *string { return v.Description }

// GetSku returns ProductDetailProjectPack.Sku, and is useful for accessing the field via an interface.
func (v *ProductDetailProjectPack) GetSku() uuid.UUID { return v.Sku }

// GetDisplayPrice returns ProductDetailProjectPack.DisplayPrice, and is useful for accessing the field via an interface.
func (v *ProductDetailProjectPack) GetDisplayPrice() *string { return v.DisplayPrice }

// GetUsage returns ProductDetailProjectPack.Usage, and is useful for accessing the field via an interface.
func (v *ProductDetailProjectPack) GetUsage() []ProductDetailUsage { return v.Usage }

// GetBenefits returns ProductDetailProjectPack.Benefits, and is useful for accessing the field via an interface.
func (v *ProductDetailProjectPack) GetBenefits() []string { return v.Benefits }

// ProductDetail includes the GraphQL fields of SupportTier requested by the fragment ProductDetail.
type ProductDetailSupportTier struct {
	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`
	Name                *string                           `json:"name"`
	Description         *string                           `json:"description"`
	Sku                 uuid.UUID                         `json:"sku"`
	// A string used to communicate the price of this product. No currency or format should be assumed.
	DisplayPrice *string `json:"displayPrice"`
	// Any usage governed by this Product.
	Usage []ProductDetailUsage `json:"usage"`
	// Any benefit descriptions.
	Benefits []string `json:"benefits"`
}

// GetProductTypeMetadata returns ProductDetailSupportTier.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *ProductDetailSupportTier) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductTypeMetadata
}

// GetName returns ProductDetailSupportTier.Name, and is useful for accessing the field via an interface.
func (v *ProductDetailSupportTier) GetName() *string { return v.Name }

// GetDescription returns ProductDetailSupportTier.Description, and is useful for accessing the field via an interface.
func (v *ProductDetailSupportTier) GetDescription() *string { return v.Description }

// GetSku returns ProductDetailSupportTier.Sku, and is useful for accessing the field via an interface.
func (v *ProductDetailSupportTier) GetSku() uuid.UUID { return v.Sku }

// GetDisplayPrice returns ProductDetailSupportTier.DisplayPrice, and is useful for accessing the field via an interface.
func (v *ProductDetailSupportTier) GetDisplayPrice() *string { return v.DisplayPrice }

// GetUsage returns ProductDetailSupportTier.Usage, and is useful for accessing the field via an interface.
func (v *ProductDetailSupportTier) GetUsage() []ProductDetailUsage { return v.Usage }

// GetBenefits returns ProductDetailSupportTier.Benefits, and is useful for accessing the field via an interface.
func (v *ProductDetailSupportTier) GetBenefits() []string { return v.Benefits }

// ProductDetailUsage includes the requested fields of the GraphQL type Usage.
// The GraphQL type's documentation follows.
//
// A usage indicator
type ProductDetailUsage struct {
	Unit       string `json:"unit"`
	UnitPlural string `json:"unitPlural"`
	// A header display name
	DisplayName string `json:"displayName"`
	// When the query is not for a specific user, currentUsage will be null
	CurrentUsage *int `json:"currentUsage"`
	// Null indicates unlimited usage allowed
	MaximumUsage *int    `json:"maximumUsage"`
	Description  *string `json:"description"`
}

// GetUnit returns ProductDetailUsage.Unit, and is useful for accessing the field via an interface.
func (v *ProductDetailUsage) GetUnit() string { return v.Unit }

// GetUnitPlural returns ProductDetailUsage.UnitPlural, and is useful for accessing the field via an interface.
func (v *ProductDetailUsage) GetUnitPlural() string { return v.UnitPlural }

// GetDisplayName returns ProductDetailUsage.DisplayName, and is useful for accessing the field via an interface.
func (v *ProductDetailUsage) GetDisplayName() string { return v.DisplayName }

// GetCurrentUsage returns ProductDetailUsage.CurrentUsage, and is useful for accessing the field via an interface.
func (v *ProductDetailUsage) GetCurrentUsage() *int { return v.CurrentUsage }

// GetMaximumUsage returns ProductDetailUsage.MaximumUsage, and is useful for accessing the field via an interface.
func (v *ProductDetailUsage) GetMaximumUsage() *int { return v.MaximumUsage }

// GetDescription returns ProductDetailUsage.Description, and is useful for accessing the field via an interface.
func (v *ProductDetailUsage) GetDescription() *string { return v.Description }

type ProductType string

const (
	ProductTypePlanTier    ProductType = "PLAN_TIER"
	ProductTypeProjectPack ProductType = "PROJECT_PACK"
	ProductTypeSupportTier ProductType = "SUPPORT_TIER"
	ProductTypeApiAccess   ProductType = "API_ACCESS"
)

// ProjectBasic includes the GraphQL fields of Project requested by the fragment ProjectBasic.
type ProjectBasic struct {
	// - v0.ProjectID or v1.GroupID
	Id    uuid.UUID             `json:"id"`
	Name  string                `json:"name"`
	Owner ProjectBasicOwnerUser `json:"owner"`
}

// GetId returns ProjectBasic.Id, and is useful for accessing the field via an interface.
func (v *ProjectBasic) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectBasic.Name, and is useful for accessing the field via an interface.
func (v *ProjectBasic) GetName() string { return v.Name }

// GetOwner returns ProjectBasic.Owner, and is useful for accessing the field via an interface.
func (v *ProjectBasic) GetOwner() ProjectBasicOwnerUser { return v.Owner }

// ProjectBasicOwnerUser includes the requested fields of the GraphQL type User.
type ProjectBasicOwnerUser struct {
	Id    uuid.UUID `json:"id"`
	Login string    `json:"login"`
}

// GetId returns ProjectBasicOwnerUser.Id, and is useful for accessing the field via an interface.
func (v *ProjectBasicOwnerUser) GetId() uuid.UUID { return v.Id }

// GetLogin returns ProjectBasicOwnerUser.Login, and is useful for accessing the field via an interface.
func (v *ProjectBasicOwnerUser) GetLogin() string { return v.Login }

// ProjectBlueprintConfigurationDetail includes the GraphQL fields of BlueprintConfiguration requested by the fragment ProjectBlueprintConfigurationDetail.
//
// ProjectBlueprintConfigurationDetail is implemented by the following types:
// ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration
// ProjectBlueprintConfigurationDetailBlueprintManifestConfiguration
// ProjectBlueprintConfigurationDetailBlueprintHelmConfiguration
type ProjectBlueprintConfigurationDetail interface {
	implementsGraphQLInterfaceProjectBlueprintConfigurationDetail()
}

func (v *ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration) implementsGraphQLInterfaceProjectBlueprintConfigurationDetail() {
}
func (v *ProjectBlueprintConfigurationDetailBlueprintManifestConfiguration) implementsGraphQLInterfaceProjectBlueprintConfigurationDetail() {
}
func (v *ProjectBlueprintConfigurationDetailBlueprintHelmConfiguration) implementsGraphQLInterfaceProjectBlueprintConfigurationDetail() {
}

func __unmarshalProjectBlueprintConfigurationDetail(b []byte, v *ProjectBlueprintConfigurationDetail) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BlueprintTerraformConfiguration":
		*v = new(ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration)
		return json.Unmarshal(b, *v)
	case "BlueprintManifestConfiguration":
		*v = new(ProjectBlueprintConfigurationDetailBlueprintManifestConfiguration)
		return json.Unmarshal(b, *v)
	case "BlueprintHelmConfiguration":
		*v = new(ProjectBlueprintConfigurationDetailBlueprintHelmConfiguration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing BlueprintConfiguration.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ProjectBlueprintConfigurationDetail: "%v"`, tn.TypeName)
	}
}

func __marshalProjectBlueprintConfigurationDetail(v *ProjectBlueprintConfigurationDetail) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration:
		typename = "BlueprintTerraformConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *ProjectBlueprintConfigurationDetailBlueprintManifestConfiguration:
		typename = "BlueprintManifestConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectBlueprintConfigurationDetailBlueprintManifestConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *ProjectBlueprintConfigurationDetailBlueprintHelmConfiguration:
		typename = "BlueprintHelmConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectBlueprintConfigurationDetailBlueprintHelmConfiguration
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ProjectBlueprintConfigurationDetail: "%T"`, v)
	}
}

// ProjectBlueprintConfigurationDetail includes the GraphQL fields of BlueprintHelmConfiguration requested by the fragment ProjectBlueprintConfigurationDetail.
type ProjectBlueprintConfigurationDetailBlueprintHelmConfiguration struct {
	Source *ProjectBlueprintConfigurationDetailSource `json:"source"`
}

// GetSource returns ProjectBlueprintConfigurationDetailBlueprintHelmConfiguration.Source, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailBlueprintHelmConfiguration) GetSource() *ProjectBlueprintConfigurationDetailSource {
	return v.Source
}

// ProjectBlueprintConfigurationDetail includes the GraphQL fields of BlueprintManifestConfiguration requested by the fragment ProjectBlueprintConfigurationDetail.
type ProjectBlueprintConfigurationDetailBlueprintManifestConfiguration struct {
	Source *ProjectBlueprintConfigurationDetailSource `json:"source"`
}

// GetSource returns ProjectBlueprintConfigurationDetailBlueprintManifestConfiguration.Source, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailBlueprintManifestConfiguration) GetSource() *ProjectBlueprintConfigurationDetailSource {
	return v.Source
}

// ProjectBlueprintConfigurationDetail includes the GraphQL fields of BlueprintTerraformConfiguration requested by the fragment ProjectBlueprintConfigurationDetail.
type ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration struct {
	RegistrySource          *string                                                               `json:"registrySource"`
	ModuleVersionConstraint *string                                                               `json:"moduleVersionConstraint"`
	GithubSource            *string                                                               `json:"githubSource"`
	ModuleSource            *ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSource `json:"moduleSource"`
}

// GetRegistrySource returns ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration.RegistrySource, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration) GetRegistrySource() *string {
	return v.RegistrySource
}

// GetModuleVersionConstraint returns ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration.ModuleVersionConstraint, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration) GetModuleVersionConstraint() *string {
	return v.ModuleVersionConstraint
}

// GetGithubSource returns ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration.GithubSource, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration) GetGithubSource() *string {
	return v.GithubSource
}

// GetModuleSource returns ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration.ModuleSource, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailBlueprintTerraformConfiguration) GetModuleSource() *ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSource {
	return v.ModuleSource
}

// ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSource includes the requested fields of the GraphQL type TerraformModuleSource.
type ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSource struct {
	// Any valid Terraform Module source: https://developer.hashicorp.com/terraform/language/modules/sources
	Source string `json:"source"`
	// The version field is only applicable to Terraform Registry sources
	Version *string `json:"version"`
	// Configuring an integration provides authentication to retrieve the module from private sources
	Integration *ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegration `json:"integration"`
}

// GetSource returns ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSource.Source, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSource) GetSource() string {
	return v.Source
}

// GetVersion returns ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSource.Version, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSource) GetVersion() *string {
	return v.Version
}

// GetIntegration returns ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSource.Integration, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSource) GetIntegration() *ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegration {
	return v.Integration
}

// ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegration includes the requested fields of the GraphQL type TerraformModuleSourceIntegration.
type ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegration struct {
	Git *ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegrationGitGitSourceIntegration `json:"git"`
}

// GetGit returns ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegration.Git, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegration) GetGit() *ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegrationGitGitSourceIntegration {
	return v.Git
}

// ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegrationGitGitSourceIntegration includes the requested fields of the GraphQL type GitSourceIntegration.
type ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegrationGitGitSourceIntegration struct {
	GithubInstallationID   *int       `json:"githubInstallationID"`
	BitbucketIntegrationID *uuid.UUID `json:"bitbucketIntegrationID"`
	GitlabIntegrationID    *uuid.UUID `json:"gitlabIntegrationID"`
}

// GetGithubInstallationID returns ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegrationGitGitSourceIntegration.GithubInstallationID, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegrationGitGitSourceIntegration) GetGithubInstallationID() *int {
	return v.GithubInstallationID
}

// GetBitbucketIntegrationID returns ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegrationGitGitSourceIntegration.BitbucketIntegrationID, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegrationGitGitSourceIntegration) GetBitbucketIntegrationID() *uuid.UUID {
	return v.BitbucketIntegrationID
}

// GetGitlabIntegrationID returns ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegrationGitGitSourceIntegration.GitlabIntegrationID, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailModuleSourceTerraformModuleSourceIntegrationGitGitSourceIntegration) GetGitlabIntegrationID() *uuid.UUID {
	return v.GitlabIntegrationID
}

// ProjectBlueprintConfigurationDetailSource includes the requested fields of the GraphQL type Source.
type ProjectBlueprintConfigurationDetailSource struct {
	Git *ProjectBlueprintConfigurationDetailSourceGitGitSource `json:"git"`
}

// GetGit returns ProjectBlueprintConfigurationDetailSource.Git, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailSource) GetGit() *ProjectBlueprintConfigurationDetailSourceGitGitSource {
	return v.Git
}

// ProjectBlueprintConfigurationDetailSourceGitGitSource includes the requested fields of the GraphQL type GitSource.
type ProjectBlueprintConfigurationDetailSourceGitGitSource struct {
	Repository  string                                                            `json:"repository"`
	Path        *string                                                           `json:"path"`
	Ref         *string                                                           `json:"ref"`
	Integration *ProjectBlueprintConfigurationDetailSourceGitGitSourceIntegration `json:"integration"`
}

// GetRepository returns ProjectBlueprintConfigurationDetailSourceGitGitSource.Repository, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailSourceGitGitSource) GetRepository() string {
	return v.Repository
}

// GetPath returns ProjectBlueprintConfigurationDetailSourceGitGitSource.Path, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailSourceGitGitSource) GetPath() *string { return v.Path }

// GetRef returns ProjectBlueprintConfigurationDetailSourceGitGitSource.Ref, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailSourceGitGitSource) GetRef() *string { return v.Ref }

// GetIntegration returns ProjectBlueprintConfigurationDetailSourceGitGitSource.Integration, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailSourceGitGitSource) GetIntegration() *ProjectBlueprintConfigurationDetailSourceGitGitSourceIntegration {
	return v.Integration
}

// ProjectBlueprintConfigurationDetailSourceGitGitSourceIntegration includes the requested fields of the GraphQL type GitSourceIntegration.
type ProjectBlueprintConfigurationDetailSourceGitGitSourceIntegration struct {
	GithubInstallationID   *int       `json:"githubInstallationID"`
	BitbucketIntegrationID *uuid.UUID `json:"bitbucketIntegrationID"`
	GitlabIntegrationID    *uuid.UUID `json:"gitlabIntegrationID"`
}

// GetGithubInstallationID returns ProjectBlueprintConfigurationDetailSourceGitGitSourceIntegration.GithubInstallationID, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailSourceGitGitSourceIntegration) GetGithubInstallationID() *int {
	return v.GithubInstallationID
}

// GetBitbucketIntegrationID returns ProjectBlueprintConfigurationDetailSourceGitGitSourceIntegration.BitbucketIntegrationID, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailSourceGitGitSourceIntegration) GetBitbucketIntegrationID() *uuid.UUID {
	return v.BitbucketIntegrationID
}

// GetGitlabIntegrationID returns ProjectBlueprintConfigurationDetailSourceGitGitSourceIntegration.GitlabIntegrationID, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailSourceGitGitSourceIntegration) GetGitlabIntegrationID() *uuid.UUID {
	return v.GitlabIntegrationID
}

type ProjectBuildInput struct {
	BuildType        *BuildType `json:"buildType"`
	DockerfilePath   *string    `json:"dockerfilePath"`
	WorkingDirectory *string    `json:"workingDirectory"`
	BuildCommand     *string    `json:"buildCommand"`
	RunCommand       *string    `json:"runCommand"`
	StaticPath       *string    `json:"staticPath"`
	NodejsVersion    *string    `json:"nodejsVersion"`
	PythonVersion    *string    `json:"pythonVersion"`
	GolangVersion    *string    `json:"golangVersion"`
}

// GetBuildType returns ProjectBuildInput.BuildType, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetBuildType() *BuildType { return v.BuildType }

// GetDockerfilePath returns ProjectBuildInput.DockerfilePath, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetDockerfilePath() *string { return v.DockerfilePath }

// GetWorkingDirectory returns ProjectBuildInput.WorkingDirectory, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetWorkingDirectory() *string { return v.WorkingDirectory }

// GetBuildCommand returns ProjectBuildInput.BuildCommand, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetBuildCommand() *string { return v.BuildCommand }

// GetRunCommand returns ProjectBuildInput.RunCommand, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetRunCommand() *string { return v.RunCommand }

// GetStaticPath returns ProjectBuildInput.StaticPath, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetStaticPath() *string { return v.StaticPath }

// GetNodejsVersion returns ProjectBuildInput.NodejsVersion, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetNodejsVersion() *string { return v.NodejsVersion }

// GetPythonVersion returns ProjectBuildInput.PythonVersion, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetPythonVersion() *string { return v.PythonVersion }

// GetGolangVersion returns ProjectBuildInput.GolangVersion, and is useful for accessing the field via an interface.
func (v *ProjectBuildInput) GetGolangVersion() *string { return v.GolangVersion }

type ProjectCollaboratorRole string

const (
	ProjectCollaboratorRoleOwner  ProjectCollaboratorRole = "OWNER"
	ProjectCollaboratorRoleEditor ProjectCollaboratorRole = "EDITOR"
	ProjectCollaboratorRoleViewer ProjectCollaboratorRole = "VIEWER"
)

// ProjectConnectionComon includes the GraphQL fields of ProjectConnection requested by the fragment ProjectConnectionComon.
type ProjectConnectionComon struct {
	PageInfo ProjectConnectionComonPageInfo       `json:"pageInfo"`
	Nodes    []ProjectConnectionComonNodesProject `json:"nodes"`
}

// GetPageInfo returns ProjectConnectionComon.PageInfo, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComon) GetPageInfo() ProjectConnectionComonPageInfo { return v.PageInfo }

// GetNodes returns ProjectConnectionComon.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComon) GetNodes() []ProjectConnectionComonNodesProject { return v.Nodes }

// ProjectConnectionComonNodesProject includes the requested fields of the GraphQL type Project.
type ProjectConnectionComonNodesProject struct {
	// - v0.ProjectID or v1.GroupID
	Id   uuid.UUID                               `json:"id"`
	Repo *ProjectConnectionComonNodesProjectRepo `json:"repo"`
}

// GetId returns ProjectConnectionComonNodesProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProject) GetId() uuid.UUID { return v.Id }

// GetRepo returns ProjectConnectionComonNodesProject.Repo, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProject) GetRepo() *ProjectConnectionComonNodesProjectRepo {
	return v.Repo
}

// ProjectConnectionComonNodesProjectRepo includes the requested fields of the GraphQL type Repo.
type ProjectConnectionComonNodesProjectRepo struct {
	RepoCommon `json:"-"`
}

// GetId returns ProjectConnectionComonNodesProjectRepo.Id, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetId() uuid.UUID { return v.RepoCommon.Id }

// GetPath returns ProjectConnectionComonNodesProjectRepo.Path, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetPath() string { return v.RepoCommon.Path }

// GetName returns ProjectConnectionComonNodesProjectRepo.Name, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetName() string { return v.RepoCommon.Name }

// GetEnabled returns ProjectConnectionComonNodesProjectRepo.Enabled, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetEnabled() bool { return v.RepoCommon.Enabled }

// GetSource returns ProjectConnectionComonNodesProjectRepo.Source, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoCommon.Source
}

// GetDeployTarget returns ProjectConnectionComonNodesProjectRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetDeployTarget() *DeployTarget {
	return v.RepoCommon.DeployTarget
}

// GetDeployType returns ProjectConnectionComonNodesProjectRepo.DeployType, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetDeployType() *DeployType {
	return v.RepoCommon.DeployType
}

// GetDeployService returns ProjectConnectionComonNodesProjectRepo.DeployService, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetDeployService() *bool {
	return v.RepoCommon.DeployService
}

// GetDeployJob returns ProjectConnectionComonNodesProjectRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetDeployJob() *bool { return v.RepoCommon.DeployJob }

// GetAwsAccount returns ProjectConnectionComonNodesProjectRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns ProjectConnectionComonNodesProjectRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns ProjectConnectionComonNodesProjectRepo.Image, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetImage() *string { return v.RepoCommon.Image }

// GetCpu returns ProjectConnectionComonNodesProjectRepo.Cpu, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetCpu() *string { return v.RepoCommon.Cpu }

// GetMemory returns ProjectConnectionComonNodesProjectRepo.Memory, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetMemory() *string { return v.RepoCommon.Memory }

// GetGpu returns ProjectConnectionComonNodesProjectRepo.Gpu, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoCommon.Gpu
}

// GetTpu returns ProjectConnectionComonNodesProjectRepo.Tpu, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoCommon.Tpu
}

// GetUpdatedAt returns ProjectConnectionComonNodesProjectRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetUpdatedAt() time.Time {
	return v.RepoCommon.UpdatedAt
}

// GetDisableReason returns ProjectConnectionComonNodesProjectRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetDisableReason() *DisableReason {
	return v.RepoCommon.DisableReason
}

// GetCluster returns ProjectConnectionComonNodesProjectRepo.Cluster, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetCluster() *RepoCommonCluster {
	return v.RepoCommon.Cluster
}

// GetDatabaseProvider returns ProjectConnectionComonNodesProjectRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns ProjectConnectionComonNodesProjectRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns ProjectConnectionComonNodesProjectRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCommon.Autoscaling
}

// GetOwner returns ProjectConnectionComonNodesProjectRepo.Owner, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoCommon.Owner
}

// GetProject returns ProjectConnectionComonNodesProjectRepo.Project, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetProject() *RepoCommonProject {
	return v.RepoCommon.Project
}

// GetProjectEnvironment returns ProjectConnectionComonNodesProjectRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonNodesProjectRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *ProjectConnectionComonNodesProjectRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectConnectionComonNodesProjectRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectConnectionComonNodesProjectRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectConnectionComonNodesProjectRepo struct {
	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *ProjectConnectionComonNodesProjectRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectConnectionComonNodesProjectRepo) __premarshalJSON() (*__premarshalProjectConnectionComonNodesProjectRepo, error) {
	var retval __premarshalProjectConnectionComonNodesProjectRepo

	retval.Id = v.RepoCommon.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// ProjectConnectionComonPageInfo includes the requested fields of the GraphQL type PageInfo.
type ProjectConnectionComonPageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns ProjectConnectionComonPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonPageInfo) GetStartCursor() string { return v.StartCursor }

// GetEndCursor returns ProjectConnectionComonPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonPageInfo) GetEndCursor() string { return v.EndCursor }

// GetHasNextPage returns ProjectConnectionComonPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetHasPreviousPage returns ProjectConnectionComonPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *ProjectConnectionComonPageInfo) GetHasPreviousPage() bool { return v.HasPreviousPage }

type ProjectConnectorSchema struct {
	Entries []ProjectConnectorSchemaEntry `json:"entries"`
}

// GetEntries returns ProjectConnectorSchema.Entries, and is useful for accessing the field via an interface.
func (v *ProjectConnectorSchema) GetEntries() []ProjectConnectorSchemaEntry { return v.Entries }

type ProjectConnectorSchemaEntry struct {
	Type   *ProjectConnectorType         `json:"type"`
	Fields []ProjectConnectorSchemaField `json:"fields"`
}

// GetType returns ProjectConnectorSchemaEntry.Type, and is useful for accessing the field via an interface.
func (v *ProjectConnectorSchemaEntry) GetType() *ProjectConnectorType { return v.Type }

// GetFields returns ProjectConnectorSchemaEntry.Fields, and is useful for accessing the field via an interface.
func (v *ProjectConnectorSchemaEntry) GetFields() []ProjectConnectorSchemaField { return v.Fields }

type ProjectConnectorSchemaField struct {
	Name        *string                          `json:"name"`
	DisplayName *string                          `json:"displayName"`
	Type        *ProjectConnectorSchemaFieldType `json:"type"`
}

// GetName returns ProjectConnectorSchemaField.Name, and is useful for accessing the field via an interface.
func (v *ProjectConnectorSchemaField) GetName() *string { return v.Name }

// GetDisplayName returns ProjectConnectorSchemaField.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectConnectorSchemaField) GetDisplayName() *string { return v.DisplayName }

// GetType returns ProjectConnectorSchemaField.Type, and is useful for accessing the field via an interface.
func (v *ProjectConnectorSchemaField) GetType() *ProjectConnectorSchemaFieldType { return v.Type }

type ProjectConnectorSchemaFieldType string

const (
	ProjectConnectorSchemaFieldTypeOutput ProjectConnectorSchemaFieldType = "OUTPUT"
)

type ProjectConnectorType string

const (
	ProjectConnectorTypeDatabaseConnection ProjectConnectorType = "DATABASE_CONNECTION"
)

// ProjectContext includes the GraphQL fields of Project requested by the fragment ProjectContext.
type ProjectContext struct {
	// - v0.ProjectID or v1.GroupID
	Id                 uuid.UUID                                          `json:"id"`
	Name               string                                             `json:"name"`
	IsMultiRepo        bool                                               `json:"isMultiRepo"`
	DefaultEnvironment ProjectContextDefaultEnvironmentProjectEnvironment `json:"defaultEnvironment"`
	Owner              ProjectContextOwnerUser                            `json:"owner"`
	CreatedAt          time.Time                                          `json:"createdAt"`
	UpdatedAt          time.Time                                          `json:"updatedAt"`
}

// GetId returns ProjectContext.Id, and is useful for accessing the field via an interface.
func (v *ProjectContext) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectContext.Name, and is useful for accessing the field via an interface.
func (v *ProjectContext) GetName() string { return v.Name }

// GetIsMultiRepo returns ProjectContext.IsMultiRepo, and is useful for accessing the field via an interface.
func (v *ProjectContext) GetIsMultiRepo() bool { return v.IsMultiRepo }

// GetDefaultEnvironment returns ProjectContext.DefaultEnvironment, and is useful for accessing the field via an interface.
func (v *ProjectContext) GetDefaultEnvironment() ProjectContextDefaultEnvironmentProjectEnvironment {
	return v.DefaultEnvironment
}

// GetOwner returns ProjectContext.Owner, and is useful for accessing the field via an interface.
func (v *ProjectContext) GetOwner() ProjectContextOwnerUser { return v.Owner }

// GetCreatedAt returns ProjectContext.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectContext) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns ProjectContext.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectContext) GetUpdatedAt() time.Time { return v.UpdatedAt }

// ProjectContextDefaultEnvironmentProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type ProjectContextDefaultEnvironmentProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id          uuid.UUID                                                      `json:"id"`
	Name        string                                                         `json:"name"`
	DefaultRepo *ProjectContextDefaultEnvironmentProjectEnvironmentDefaultRepo `json:"defaultRepo"`
}

// GetId returns ProjectContextDefaultEnvironmentProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *ProjectContextDefaultEnvironmentProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectContextDefaultEnvironmentProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *ProjectContextDefaultEnvironmentProjectEnvironment) GetName() string { return v.Name }

// GetDefaultRepo returns ProjectContextDefaultEnvironmentProjectEnvironment.DefaultRepo, and is useful for accessing the field via an interface.
func (v *ProjectContextDefaultEnvironmentProjectEnvironment) GetDefaultRepo() *ProjectContextDefaultEnvironmentProjectEnvironmentDefaultRepo {
	return v.DefaultRepo
}

// ProjectContextDefaultEnvironmentProjectEnvironmentDefaultRepo includes the requested fields of the GraphQL type Repo.
type ProjectContextDefaultEnvironmentProjectEnvironmentDefaultRepo struct {
	// - v0.RepoID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectContextDefaultEnvironmentProjectEnvironmentDefaultRepo.Id, and is useful for accessing the field via an interface.
func (v *ProjectContextDefaultEnvironmentProjectEnvironmentDefaultRepo) GetId() uuid.UUID {
	return v.Id
}

// GetName returns ProjectContextDefaultEnvironmentProjectEnvironmentDefaultRepo.Name, and is useful for accessing the field via an interface.
func (v *ProjectContextDefaultEnvironmentProjectEnvironmentDefaultRepo) GetName() string {
	return v.Name
}

// ProjectContextOwnerUser includes the requested fields of the GraphQL type User.
type ProjectContextOwnerUser struct {
	Id    uuid.UUID `json:"id"`
	Login string    `json:"login"`
}

// GetId returns ProjectContextOwnerUser.Id, and is useful for accessing the field via an interface.
func (v *ProjectContextOwnerUser) GetId() uuid.UUID { return v.Id }

// GetLogin returns ProjectContextOwnerUser.Login, and is useful for accessing the field via an interface.
func (v *ProjectContextOwnerUser) GetLogin() string { return v.Login }

type ProjectDeployInput struct {
	DeployTarget    DeployTarget   `json:"deployTarget"`
	DeployType      *DeployType    `json:"deployType"`
	DeployRuntime   *DeployRuntime `json:"deployRuntime"`
	AwsAccountID    *uuid.UUID     `json:"awsAccountID"`
	GcpAccountID    *uuid.UUID     `json:"gcpAccountID"`
	DoAccountID     *uuid.UUID     `json:"doAccountID"`
	LinodeAccountID *uuid.UUID     `json:"linodeAccountID"`
	VultrAccountID  *uuid.UUID     `json:"vultrAccountID"`
	ClusterID       *uuid.UUID     `json:"clusterID"`
	Region          *string        `json:"region"`
}

// GetDeployTarget returns ProjectDeployInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetDeployTarget() DeployTarget { return v.DeployTarget }

// GetDeployType returns ProjectDeployInput.DeployType, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetDeployType() *DeployType { return v.DeployType }

// GetDeployRuntime returns ProjectDeployInput.DeployRuntime, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetDeployRuntime() *DeployRuntime { return v.DeployRuntime }

// GetAwsAccountID returns ProjectDeployInput.AwsAccountID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetAwsAccountID() *uuid.UUID { return v.AwsAccountID }

// GetGcpAccountID returns ProjectDeployInput.GcpAccountID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetGcpAccountID() *uuid.UUID { return v.GcpAccountID }

// GetDoAccountID returns ProjectDeployInput.DoAccountID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetDoAccountID() *uuid.UUID { return v.DoAccountID }

// GetLinodeAccountID returns ProjectDeployInput.LinodeAccountID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetLinodeAccountID() *uuid.UUID { return v.LinodeAccountID }

// GetVultrAccountID returns ProjectDeployInput.VultrAccountID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetVultrAccountID() *uuid.UUID { return v.VultrAccountID }

// GetClusterID returns ProjectDeployInput.ClusterID, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetClusterID() *uuid.UUID { return v.ClusterID }

// GetRegion returns ProjectDeployInput.Region, and is useful for accessing the field via an interface.
func (v *ProjectDeployInput) GetRegion() *string { return v.Region }

// ProjectEnvironmentBasic includes the GraphQL fields of ProjectEnvironment requested by the fragment ProjectEnvironmentBasic.
type ProjectEnvironmentBasic struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectEnvironmentBasic.Id, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentBasic) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectEnvironmentBasic.Name, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentBasic) GetName() string { return v.Name }

// ProjectEnvironmentListItem includes the GraphQL fields of ProjectEnvironment requested by the fragment ProjectEnvironmentListItem.
type ProjectEnvironmentListItem struct {
	ProjectEnvironmentBasic `json:"-"`
	UpdatedAt               time.Time                                                              `json:"updatedAt"`
	ProjectV3Adapters       *ProjectEnvironmentListItemProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
}

// GetUpdatedAt returns ProjectEnvironmentListItem.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentListItem) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetProjectV3Adapters returns ProjectEnvironmentListItem.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentListItem) GetProjectV3Adapters() *ProjectEnvironmentListItemProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// GetId returns ProjectEnvironmentListItem.Id, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentListItem) GetId() uuid.UUID { return v.ProjectEnvironmentBasic.Id }

// GetName returns ProjectEnvironmentListItem.Name, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentListItem) GetName() string { return v.ProjectEnvironmentBasic.Name }

func (v *ProjectEnvironmentListItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectEnvironmentListItem
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectEnvironmentListItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectEnvironmentBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectEnvironmentListItem struct {
	UpdatedAt time.Time `json:"updatedAt"`

	ProjectV3Adapters *ProjectEnvironmentListItemProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *ProjectEnvironmentListItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectEnvironmentListItem) __premarshalJSON() (*__premarshalProjectEnvironmentListItem, error) {
	var retval __premarshalProjectEnvironmentListItem

	retval.UpdatedAt = v.UpdatedAt
	retval.ProjectV3Adapters = v.ProjectV3Adapters
	retval.Id = v.ProjectEnvironmentBasic.Id
	retval.Name = v.ProjectEnvironmentBasic.Name
	return &retval, nil
}

// ProjectEnvironmentListItemProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type ProjectEnvironmentListItemProjectV3AdaptersProjectV3AdapterConnection struct {
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns ProjectEnvironmentListItemProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentListItemProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.TotalCount
}

// ProjectListItem includes the GraphQL fields of ProjectV3Adapter requested by the fragment ProjectListItem.
type ProjectListItem struct {
	// - v0.ProjectAdapterID or v1.ProjectID
	Id                 uuid.UUID                          `json:"id"`
	Name               string                             `json:"name"`
	Repo               *ProjectListItemRepo               `json:"repo"`
	Project            *ProjectListItemProject            `json:"project"`
	ProjectEnvironment *ProjectListItemProjectEnvironment `json:"projectEnvironment"`
	CreatedAt          time.Time                          `json:"createdAt"`
	UpdatedAt          time.Time                          `json:"updatedAt"`
}

// GetId returns ProjectListItem.Id, and is useful for accessing the field via an interface.
func (v *ProjectListItem) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectListItem.Name, and is useful for accessing the field via an interface.
func (v *ProjectListItem) GetName() string { return v.Name }

// GetRepo returns ProjectListItem.Repo, and is useful for accessing the field via an interface.
func (v *ProjectListItem) GetRepo() *ProjectListItemRepo { return v.Repo }

// GetProject returns ProjectListItem.Project, and is useful for accessing the field via an interface.
func (v *ProjectListItem) GetProject() *ProjectListItemProject { return v.Project }

// GetProjectEnvironment returns ProjectListItem.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *ProjectListItem) GetProjectEnvironment() *ProjectListItemProjectEnvironment {
	return v.ProjectEnvironment
}

// GetCreatedAt returns ProjectListItem.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectListItem) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns ProjectListItem.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectListItem) GetUpdatedAt() time.Time { return v.UpdatedAt }

// ProjectListItemProject includes the requested fields of the GraphQL type Project.
type ProjectListItemProject struct {
	// - v0.ProjectID or v1.GroupID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectListItemProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectListItemProject) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectListItemProject.Name, and is useful for accessing the field via an interface.
func (v *ProjectListItemProject) GetName() string { return v.Name }

// ProjectListItemProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type ProjectListItemProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectListItemProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *ProjectListItemProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectListItemProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *ProjectListItemProjectEnvironment) GetName() string { return v.Name }

// ProjectListItemRepo includes the requested fields of the GraphQL type Repo.
type ProjectListItemRepo struct {
	// - v0.RepoID
	Id uuid.UUID `json:"id"`
}

// GetId returns ProjectListItemRepo.Id, and is useful for accessing the field via an interface.
func (v *ProjectListItemRepo) GetId() uuid.UUID { return v.Id }

// ProjectV3AdapterConnectionCommon includes the GraphQL fields of ProjectV3AdapterConnection requested by the fragment ProjectV3AdapterConnectionCommon.
type ProjectV3AdapterConnectionCommon struct {
	PageInfo   ProjectV3AdapterConnectionCommonPageInfo                `json:"pageInfo"`
	Nodes      []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter `json:"nodes"`
	TotalCount int                                                     `json:"totalCount"`
}

// GetPageInfo returns ProjectV3AdapterConnectionCommon.PageInfo, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommon) GetPageInfo() ProjectV3AdapterConnectionCommonPageInfo {
	return v.PageInfo
}

// GetNodes returns ProjectV3AdapterConnectionCommon.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommon) GetNodes() []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter {
	return v.Nodes
}

// GetTotalCount returns ProjectV3AdapterConnectionCommon.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommon) GetTotalCount() int { return v.TotalCount }

// ProjectV3AdapterConnectionCommonNodesProjectV3Adapter includes the requested fields of the GraphQL type ProjectV3Adapter.
type ProjectV3AdapterConnectionCommonNodesProjectV3Adapter struct {
	// - v0.ProjectAdapterID or v1.ProjectID
	Id                 uuid.UUID                                                                `json:"id"`
	Name               string                                                                   `json:"name"`
	Project            *ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProject            `json:"project"`
	ProjectEnvironment *ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProjectEnvironment `json:"projectEnvironment"`
}

// GetId returns ProjectV3AdapterConnectionCommonNodesProjectV3Adapter.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommonNodesProjectV3Adapter) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectV3AdapterConnectionCommonNodesProjectV3Adapter.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommonNodesProjectV3Adapter) GetName() string { return v.Name }

// GetProject returns ProjectV3AdapterConnectionCommonNodesProjectV3Adapter.Project, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommonNodesProjectV3Adapter) GetProject() *ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProject {
	return v.Project
}

// GetProjectEnvironment returns ProjectV3AdapterConnectionCommonNodesProjectV3Adapter.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommonNodesProjectV3Adapter) GetProjectEnvironment() *ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProjectEnvironment {
	return v.ProjectEnvironment
}

// ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProject includes the requested fields of the GraphQL type Project.
type ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProject struct {
	// - v0.ProjectID or v1.GroupID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProject) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProject.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProject) GetName() string {
	return v.Name
}

// ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProjectEnvironment) GetId() uuid.UUID {
	return v.Id
}

// GetName returns ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommonNodesProjectV3AdapterProjectEnvironment) GetName() string {
	return v.Name
}

// ProjectV3AdapterConnectionCommonPageInfo includes the requested fields of the GraphQL type PageInfo.
type ProjectV3AdapterConnectionCommonPageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns ProjectV3AdapterConnectionCommonPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommonPageInfo) GetStartCursor() string { return v.StartCursor }

// GetEndCursor returns ProjectV3AdapterConnectionCommonPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommonPageInfo) GetEndCursor() string { return v.EndCursor }

// GetHasNextPage returns ProjectV3AdapterConnectionCommonPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommonPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetHasPreviousPage returns ProjectV3AdapterConnectionCommonPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionCommonPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// ProjectV3AdapterDetail includes the GraphQL fields of ProjectV3Adapter requested by the fragment ProjectV3AdapterDetail.
type ProjectV3AdapterDetail struct {
	Name string `json:"name"`
	// - v0.ProjectAdapterID or v1.ProjectID
	Id                 uuid.UUID                                 `json:"id"`
	Status             *ProjectV3AdapterStatus                   `json:"status"`
	IsDeployV2         bool                                      `json:"isDeployV2"`
	Repo               *ProjectV3AdapterDetailRepo               `json:"repo"`
	ProjectV3          *ProjectV3AdapterDetailProjectV3          `json:"projectV3"`
	Project            *ProjectV3AdapterDetailProject            `json:"project"`
	ProjectEnvironment *ProjectV3AdapterDetailProjectEnvironment `json:"projectEnvironment"`
}

// GetName returns ProjectV3AdapterDetail.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetail) GetName() string { return v.Name }

// GetId returns ProjectV3AdapterDetail.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetail) GetId() uuid.UUID { return v.Id }

// GetStatus returns ProjectV3AdapterDetail.Status, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetail) GetStatus() *ProjectV3AdapterStatus { return v.Status }

// GetIsDeployV2 returns ProjectV3AdapterDetail.IsDeployV2, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetail) GetIsDeployV2() bool { return v.IsDeployV2 }

// GetRepo returns ProjectV3AdapterDetail.Repo, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetail) GetRepo() *ProjectV3AdapterDetailRepo { return v.Repo }

// GetProjectV3 returns ProjectV3AdapterDetail.ProjectV3, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetail) GetProjectV3() *ProjectV3AdapterDetailProjectV3 { return v.ProjectV3 }

// GetProject returns ProjectV3AdapterDetail.Project, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetail) GetProject() *ProjectV3AdapterDetailProject { return v.Project }

// GetProjectEnvironment returns ProjectV3AdapterDetail.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetail) GetProjectEnvironment() *ProjectV3AdapterDetailProjectEnvironment {
	return v.ProjectEnvironment
}

// ProjectV3AdapterDetailProject includes the requested fields of the GraphQL type Project.
type ProjectV3AdapterDetailProject struct {
	// - v0.ProjectID or v1.GroupID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectV3AdapterDetailProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetailProject) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectV3AdapterDetailProject.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetailProject) GetName() string { return v.Name }

// ProjectV3AdapterDetailProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type ProjectV3AdapterDetailProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectV3AdapterDetailProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetailProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectV3AdapterDetailProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetailProjectEnvironment) GetName() string { return v.Name }

// ProjectV3AdapterDetailProjectV3 includes the requested fields of the GraphQL type ProjectV3.
type ProjectV3AdapterDetailProjectV3 struct {
	ProjectV3Detail `json:"-"`
}

// GetId returns ProjectV3AdapterDetailProjectV3.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetailProjectV3) GetId() uuid.UUID { return v.ProjectV3Detail.Id }

// GetRequirePlanApproval returns ProjectV3AdapterDetailProjectV3.RequirePlanApproval, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetailProjectV3) GetRequirePlanApproval() bool {
	return v.ProjectV3Detail.RequirePlanApproval
}

// GetName returns ProjectV3AdapterDetailProjectV3.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetailProjectV3) GetName() string { return v.ProjectV3Detail.Name }

// GetBlueprintID returns ProjectV3AdapterDetailProjectV3.BlueprintID, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetailProjectV3) GetBlueprintID() uuid.UUID {
	return v.ProjectV3Detail.BlueprintID
}

// GetBlueprintConfiguration returns ProjectV3AdapterDetailProjectV3.BlueprintConfiguration, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetailProjectV3) GetBlueprintConfiguration() *ProjectV3DetailBlueprintConfiguration {
	return v.ProjectV3Detail.BlueprintConfiguration
}

// GetConfiguration returns ProjectV3AdapterDetailProjectV3.Configuration, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetailProjectV3) GetConfiguration() *ProjectV3DetailConfigurationProjectV3Configuration {
	return v.ProjectV3Detail.Configuration
}

// GetVariables returns ProjectV3AdapterDetailProjectV3.Variables, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetailProjectV3) GetVariables() []ProjectV3DetailVariablesBlueprintVariable {
	return v.ProjectV3Detail.Variables
}

// GetDriverWorkflows returns ProjectV3AdapterDetailProjectV3.DriverWorkflows, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetailProjectV3) GetDriverWorkflows() []ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow {
	return v.ProjectV3Detail.DriverWorkflows
}

func (v *ProjectV3AdapterDetailProjectV3) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectV3AdapterDetailProjectV3
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectV3AdapterDetailProjectV3 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3Detail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectV3AdapterDetailProjectV3 struct {
	Id uuid.UUID `json:"id"`

	RequirePlanApproval bool `json:"requirePlanApproval"`

	Name string `json:"name"`

	BlueprintID uuid.UUID `json:"blueprintID"`

	BlueprintConfiguration json.RawMessage `json:"blueprintConfiguration"`

	Configuration json.RawMessage `json:"configuration"`

	Variables []json.RawMessage `json:"variables"`

	DriverWorkflows []ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow `json:"driverWorkflows"`
}

func (v *ProjectV3AdapterDetailProjectV3) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectV3AdapterDetailProjectV3) __premarshalJSON() (*__premarshalProjectV3AdapterDetailProjectV3, error) {
	var retval __premarshalProjectV3AdapterDetailProjectV3

	retval.Id = v.ProjectV3Detail.Id
	retval.RequirePlanApproval = v.ProjectV3Detail.RequirePlanApproval
	retval.Name = v.ProjectV3Detail.Name
	retval.BlueprintID = v.ProjectV3Detail.BlueprintID
	{

		dst := &retval.BlueprintConfiguration
		src := v.ProjectV3Detail.BlueprintConfiguration
		if src != nil {
			var err error
			*dst, err = __marshalProjectV3DetailBlueprintConfiguration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ProjectV3AdapterDetailProjectV3.ProjectV3Detail.BlueprintConfiguration: %w", err)
			}
		}
	}
	{

		dst := &retval.Configuration
		src := v.ProjectV3Detail.Configuration
		if src != nil {
			var err error
			*dst, err = __marshalProjectV3DetailConfigurationProjectV3Configuration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ProjectV3AdapterDetailProjectV3.ProjectV3Detail.Configuration: %w", err)
			}
		}
	}
	{

		dst := &retval.Variables
		src := v.ProjectV3Detail.Variables
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalProjectV3DetailVariablesBlueprintVariable(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ProjectV3AdapterDetailProjectV3.ProjectV3Detail.Variables: %w", err)
			}
		}
	}
	retval.DriverWorkflows = v.ProjectV3Detail.DriverWorkflows
	return &retval, nil
}

// ProjectV3AdapterDetailRepo includes the requested fields of the GraphQL type Repo.
type ProjectV3AdapterDetailRepo struct {
	// - v0.RepoID
	Id uuid.UUID `json:"id"`
}

// GetId returns ProjectV3AdapterDetailRepo.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterDetailRepo) GetId() uuid.UUID { return v.Id }

type ProjectV3AdapterStatus string

const (
	ProjectV3AdapterStatusUnknown               ProjectV3AdapterStatus = "UNKNOWN"
	ProjectV3AdapterStatusDraft                 ProjectV3AdapterStatus = "DRAFT"
	ProjectV3AdapterStatusPaused                ProjectV3AdapterStatus = "PAUSED"
	ProjectV3AdapterStatusInactive              ProjectV3AdapterStatus = "INACTIVE"
	ProjectV3AdapterStatusPendingHealthyCluster ProjectV3AdapterStatus = "PENDING_HEALTHY_CLUSTER"
	ProjectV3AdapterStatusJobRunStarting        ProjectV3AdapterStatus = "JOB_RUN_STARTING"
	ProjectV3AdapterStatusJobRunRunning         ProjectV3AdapterStatus = "JOB_RUN_RUNNING"
	ProjectV3AdapterStatusJobRunFailed          ProjectV3AdapterStatus = "JOB_RUN_FAILED"
	ProjectV3AdapterStatusJobRunSucceeded       ProjectV3AdapterStatus = "JOB_RUN_SUCCEEDED"
	ProjectV3AdapterStatusJobRunCancelled       ProjectV3AdapterStatus = "JOB_RUN_CANCELLED"
	ProjectV3AdapterStatusJobRunPendingApproval ProjectV3AdapterStatus = "JOB_RUN_PENDING_APPROVAL"
	ProjectV3AdapterStatusDeployPending         ProjectV3AdapterStatus = "DEPLOY_PENDING"
	ProjectV3AdapterStatusDeployInProgress      ProjectV3AdapterStatus = "DEPLOY_IN_PROGRESS"
	ProjectV3AdapterStatusDeployFailed          ProjectV3AdapterStatus = "DEPLOY_FAILED"
	ProjectV3AdapterStatusDeploySucceeded       ProjectV3AdapterStatus = "DEPLOY_SUCCEEDED"
	ProjectV3AdapterStatusDeployStopped         ProjectV3AdapterStatus = "DEPLOY_STOPPED"
	ProjectV3AdapterStatusDeployHealthy         ProjectV3AdapterStatus = "DEPLOY_HEALTHY"
	ProjectV3AdapterStatusDeployCrashing        ProjectV3AdapterStatus = "DEPLOY_CRASHING"
	ProjectV3AdapterStatusBuildPending          ProjectV3AdapterStatus = "BUILD_PENDING"
	ProjectV3AdapterStatusBuildInProgress       ProjectV3AdapterStatus = "BUILD_IN_PROGRESS"
	ProjectV3AdapterStatusBuildFailed           ProjectV3AdapterStatus = "BUILD_FAILED"
	ProjectV3AdapterStatusBuildSucceeded        ProjectV3AdapterStatus = "BUILD_SUCCEEDED"
	ProjectV3AdapterStatusBuildAborted          ProjectV3AdapterStatus = "BUILD_ABORTED"
	ProjectV3AdapterStatusContainerPulling      ProjectV3AdapterStatus = "CONTAINER_PULLING"
	ProjectV3AdapterStatusHealthChecking        ProjectV3AdapterStatus = "HEALTH_CHECKING"
	ProjectV3AdapterStatusNodeProvisioning      ProjectV3AdapterStatus = "NODE_PROVISIONING"
)

// ProjectV3Detail includes the GraphQL fields of ProjectV3 requested by the fragment ProjectV3Detail.
type ProjectV3Detail struct {
	// - v0.ProjectV3ID
	Id                  uuid.UUID `json:"id"`
	RequirePlanApproval bool      `json:"requirePlanApproval"`
	Name                string    `json:"name"`
	BlueprintID         uuid.UUID `json:"blueprintID"`
	// The 'blueprint configuration overrides' applied to this project.
	BlueprintConfiguration *ProjectV3DetailBlueprintConfiguration              `json:"-"`
	Configuration          *ProjectV3DetailConfigurationProjectV3Configuration `json:"-"`
	Variables              []ProjectV3DetailVariablesBlueprintVariable         `json:"-"`
	// Driver workflows submitted for this project.
	// NOTE: this field will not surface actions executed via the deprecated 'executeBlueprintDriverAction' mutation.
	DriverWorkflows []ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow `json:"driverWorkflows"`
}

// GetId returns ProjectV3Detail.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3Detail) GetId() uuid.UUID { return v.Id }

// GetRequirePlanApproval returns ProjectV3Detail.RequirePlanApproval, and is useful for accessing the field via an interface.
func (v *ProjectV3Detail) GetRequirePlanApproval() bool { return v.RequirePlanApproval }

// GetName returns ProjectV3Detail.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3Detail) GetName() string { return v.Name }

// GetBlueprintID returns ProjectV3Detail.BlueprintID, and is useful for accessing the field via an interface.
func (v *ProjectV3Detail) GetBlueprintID() uuid.UUID { return v.BlueprintID }

// GetBlueprintConfiguration returns ProjectV3Detail.BlueprintConfiguration, and is useful for accessing the field via an interface.
func (v *ProjectV3Detail) GetBlueprintConfiguration() *ProjectV3DetailBlueprintConfiguration {
	return v.BlueprintConfiguration
}

// GetConfiguration returns ProjectV3Detail.Configuration, and is useful for accessing the field via an interface.
func (v *ProjectV3Detail) GetConfiguration() *ProjectV3DetailConfigurationProjectV3Configuration {
	return v.Configuration
}

// GetVariables returns ProjectV3Detail.Variables, and is useful for accessing the field via an interface.
func (v *ProjectV3Detail) GetVariables() []ProjectV3DetailVariablesBlueprintVariable {
	return v.Variables
}

// GetDriverWorkflows returns ProjectV3Detail.DriverWorkflows, and is useful for accessing the field via an interface.
func (v *ProjectV3Detail) GetDriverWorkflows() []ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow {
	return v.DriverWorkflows
}

func (v *ProjectV3Detail) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectV3Detail
		BlueprintConfiguration json.RawMessage   `json:"blueprintConfiguration"`
		Configuration          json.RawMessage   `json:"configuration"`
		Variables              []json.RawMessage `json:"variables"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectV3Detail = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.BlueprintConfiguration
		src := firstPass.BlueprintConfiguration
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ProjectV3DetailBlueprintConfiguration)
			err = __unmarshalProjectV3DetailBlueprintConfiguration(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ProjectV3Detail.BlueprintConfiguration: %w", err)
			}
		}
	}

	{
		dst := &v.Configuration
		src := firstPass.Configuration
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ProjectV3DetailConfigurationProjectV3Configuration)
			err = __unmarshalProjectV3DetailConfigurationProjectV3Configuration(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ProjectV3Detail.Configuration: %w", err)
			}
		}
	}

	{
		dst := &v.Variables
		src := firstPass.Variables
		*dst = make(
			[]ProjectV3DetailVariablesBlueprintVariable,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalProjectV3DetailVariablesBlueprintVariable(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal ProjectV3Detail.Variables: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalProjectV3Detail struct {
	Id uuid.UUID `json:"id"`

	RequirePlanApproval bool `json:"requirePlanApproval"`

	Name string `json:"name"`

	BlueprintID uuid.UUID `json:"blueprintID"`

	BlueprintConfiguration json.RawMessage `json:"blueprintConfiguration"`

	Configuration json.RawMessage `json:"configuration"`

	Variables []json.RawMessage `json:"variables"`

	DriverWorkflows []ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow `json:"driverWorkflows"`
}

func (v *ProjectV3Detail) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectV3Detail) __premarshalJSON() (*__premarshalProjectV3Detail, error) {
	var retval __premarshalProjectV3Detail

	retval.Id = v.Id
	retval.RequirePlanApproval = v.RequirePlanApproval
	retval.Name = v.Name
	retval.BlueprintID = v.BlueprintID
	{

		dst := &retval.BlueprintConfiguration
		src := v.BlueprintConfiguration
		if src != nil {
			var err error
			*dst, err = __marshalProjectV3DetailBlueprintConfiguration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ProjectV3Detail.BlueprintConfiguration: %w", err)
			}
		}
	}
	{

		dst := &retval.Configuration
		src := v.Configuration
		if src != nil {
			var err error
			*dst, err = __marshalProjectV3DetailConfigurationProjectV3Configuration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ProjectV3Detail.Configuration: %w", err)
			}
		}
	}
	{

		dst := &retval.Variables
		src := v.Variables
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalProjectV3DetailVariablesBlueprintVariable(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ProjectV3Detail.Variables: %w", err)
			}
		}
	}
	retval.DriverWorkflows = v.DriverWorkflows
	return &retval, nil
}

// ProjectV3DetailBlueprintConfiguration includes the requested fields of the GraphQL interface BlueprintConfiguration.
//
// ProjectV3DetailBlueprintConfiguration is implemented by the following types:
// ProjectV3DetailBlueprintConfigurationBlueprintHelmConfiguration
// ProjectV3DetailBlueprintConfigurationBlueprintManifestConfiguration
// ProjectV3DetailBlueprintConfigurationBlueprintTerraformConfiguration
type ProjectV3DetailBlueprintConfiguration interface {
	implementsGraphQLInterfaceProjectV3DetailBlueprintConfiguration()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	ProjectBlueprintConfigurationDetail
}

func (v *ProjectV3DetailBlueprintConfigurationBlueprintHelmConfiguration) implementsGraphQLInterfaceProjectV3DetailBlueprintConfiguration() {
}
func (v *ProjectV3DetailBlueprintConfigurationBlueprintHelmConfiguration) implementsGraphQLInterfaceProjectBlueprintConfigurationDetail() {
}
func (v *ProjectV3DetailBlueprintConfigurationBlueprintManifestConfiguration) implementsGraphQLInterfaceProjectV3DetailBlueprintConfiguration() {
}
func (v *ProjectV3DetailBlueprintConfigurationBlueprintManifestConfiguration) implementsGraphQLInterfaceProjectBlueprintConfigurationDetail() {
}
func (v *ProjectV3DetailBlueprintConfigurationBlueprintTerraformConfiguration) implementsGraphQLInterfaceProjectV3DetailBlueprintConfiguration() {
}
func (v *ProjectV3DetailBlueprintConfigurationBlueprintTerraformConfiguration) implementsGraphQLInterfaceProjectBlueprintConfigurationDetail() {
}

func __unmarshalProjectV3DetailBlueprintConfiguration(b []byte, v *ProjectV3DetailBlueprintConfiguration) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BlueprintHelmConfiguration":
		*v = new(ProjectV3DetailBlueprintConfigurationBlueprintHelmConfiguration)
		return json.Unmarshal(b, *v)
	case "BlueprintManifestConfiguration":
		*v = new(ProjectV3DetailBlueprintConfigurationBlueprintManifestConfiguration)
		return json.Unmarshal(b, *v)
	case "BlueprintTerraformConfiguration":
		*v = new(ProjectV3DetailBlueprintConfigurationBlueprintTerraformConfiguration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing BlueprintConfiguration.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ProjectV3DetailBlueprintConfiguration: "%v"`, tn.TypeName)
	}
}

func __marshalProjectV3DetailBlueprintConfiguration(v *ProjectV3DetailBlueprintConfiguration) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ProjectV3DetailBlueprintConfigurationBlueprintHelmConfiguration:
		typename = "BlueprintHelmConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectV3DetailBlueprintConfigurationBlueprintHelmConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *ProjectV3DetailBlueprintConfigurationBlueprintManifestConfiguration:
		typename = "BlueprintManifestConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectV3DetailBlueprintConfigurationBlueprintManifestConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *ProjectV3DetailBlueprintConfigurationBlueprintTerraformConfiguration:
		typename = "BlueprintTerraformConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectV3DetailBlueprintConfigurationBlueprintTerraformConfiguration
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ProjectV3DetailBlueprintConfiguration: "%T"`, v)
	}
}

// ProjectV3DetailBlueprintConfigurationBlueprintHelmConfiguration includes the requested fields of the GraphQL type BlueprintHelmConfiguration.
type ProjectV3DetailBlueprintConfigurationBlueprintHelmConfiguration struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ProjectV3DetailBlueprintConfigurationBlueprintHelmConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailBlueprintConfigurationBlueprintHelmConfiguration) GetTypename() *string {
	return v.Typename
}

// ProjectV3DetailBlueprintConfigurationBlueprintManifestConfiguration includes the requested fields of the GraphQL type BlueprintManifestConfiguration.
type ProjectV3DetailBlueprintConfigurationBlueprintManifestConfiguration struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ProjectV3DetailBlueprintConfigurationBlueprintManifestConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailBlueprintConfigurationBlueprintManifestConfiguration) GetTypename() *string {
	return v.Typename
}

// ProjectV3DetailBlueprintConfigurationBlueprintTerraformConfiguration includes the requested fields of the GraphQL type BlueprintTerraformConfiguration.
type ProjectV3DetailBlueprintConfigurationBlueprintTerraformConfiguration struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ProjectV3DetailBlueprintConfigurationBlueprintTerraformConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailBlueprintConfigurationBlueprintTerraformConfiguration) GetTypename() *string {
	return v.Typename
}

// ProjectV3DetailConfigurationHelmProjectV3Configuration includes the requested fields of the GraphQL type HelmProjectV3Configuration.
type ProjectV3DetailConfigurationHelmProjectV3Configuration struct {
	Typename    *string   `json:"__typename"`
	ClusterID   uuid.UUID `json:"clusterID"`
	Namespace   *string   `json:"namespace"`
	ReleaseName string    `json:"releaseName"`
	Values      *string   `json:"values"`
}

// GetTypename returns ProjectV3DetailConfigurationHelmProjectV3Configuration.Typename, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationHelmProjectV3Configuration) GetTypename() *string {
	return v.Typename
}

// GetClusterID returns ProjectV3DetailConfigurationHelmProjectV3Configuration.ClusterID, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationHelmProjectV3Configuration) GetClusterID() uuid.UUID {
	return v.ClusterID
}

// GetNamespace returns ProjectV3DetailConfigurationHelmProjectV3Configuration.Namespace, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationHelmProjectV3Configuration) GetNamespace() *string {
	return v.Namespace
}

// GetReleaseName returns ProjectV3DetailConfigurationHelmProjectV3Configuration.ReleaseName, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationHelmProjectV3Configuration) GetReleaseName() string {
	return v.ReleaseName
}

// GetValues returns ProjectV3DetailConfigurationHelmProjectV3Configuration.Values, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationHelmProjectV3Configuration) GetValues() *string { return v.Values }

// ProjectV3DetailConfigurationManifestProjectV3Configuration includes the requested fields of the GraphQL type ManifestProjectV3Configuration.
type ProjectV3DetailConfigurationManifestProjectV3Configuration struct {
	Typename  *string   `json:"__typename"`
	ClusterID uuid.UUID `json:"clusterID"`
	Namespace *string   `json:"namespace"`
}

// GetTypename returns ProjectV3DetailConfigurationManifestProjectV3Configuration.Typename, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationManifestProjectV3Configuration) GetTypename() *string {
	return v.Typename
}

// GetClusterID returns ProjectV3DetailConfigurationManifestProjectV3Configuration.ClusterID, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationManifestProjectV3Configuration) GetClusterID() uuid.UUID {
	return v.ClusterID
}

// GetNamespace returns ProjectV3DetailConfigurationManifestProjectV3Configuration.Namespace, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationManifestProjectV3Configuration) GetNamespace() *string {
	return v.Namespace
}

// ProjectV3DetailConfigurationProjectV3Configuration includes the requested fields of the GraphQL interface ProjectV3Configuration.
//
// ProjectV3DetailConfigurationProjectV3Configuration is implemented by the following types:
// ProjectV3DetailConfigurationHelmProjectV3Configuration
// ProjectV3DetailConfigurationManifestProjectV3Configuration
// ProjectV3DetailConfigurationTerraformProjectV3Configuration
type ProjectV3DetailConfigurationProjectV3Configuration interface {
	implementsGraphQLInterfaceProjectV3DetailConfigurationProjectV3Configuration()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ProjectV3DetailConfigurationHelmProjectV3Configuration) implementsGraphQLInterfaceProjectV3DetailConfigurationProjectV3Configuration() {
}
func (v *ProjectV3DetailConfigurationManifestProjectV3Configuration) implementsGraphQLInterfaceProjectV3DetailConfigurationProjectV3Configuration() {
}
func (v *ProjectV3DetailConfigurationTerraformProjectV3Configuration) implementsGraphQLInterfaceProjectV3DetailConfigurationProjectV3Configuration() {
}

func __unmarshalProjectV3DetailConfigurationProjectV3Configuration(b []byte, v *ProjectV3DetailConfigurationProjectV3Configuration) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "HelmProjectV3Configuration":
		*v = new(ProjectV3DetailConfigurationHelmProjectV3Configuration)
		return json.Unmarshal(b, *v)
	case "ManifestProjectV3Configuration":
		*v = new(ProjectV3DetailConfigurationManifestProjectV3Configuration)
		return json.Unmarshal(b, *v)
	case "TerraformProjectV3Configuration":
		*v = new(ProjectV3DetailConfigurationTerraformProjectV3Configuration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ProjectV3Configuration.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ProjectV3DetailConfigurationProjectV3Configuration: "%v"`, tn.TypeName)
	}
}

func __marshalProjectV3DetailConfigurationProjectV3Configuration(v *ProjectV3DetailConfigurationProjectV3Configuration) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ProjectV3DetailConfigurationHelmProjectV3Configuration:
		typename = "HelmProjectV3Configuration"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectV3DetailConfigurationHelmProjectV3Configuration
		}{typename, v}
		return json.Marshal(result)
	case *ProjectV3DetailConfigurationManifestProjectV3Configuration:
		typename = "ManifestProjectV3Configuration"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectV3DetailConfigurationManifestProjectV3Configuration
		}{typename, v}
		return json.Marshal(result)
	case *ProjectV3DetailConfigurationTerraformProjectV3Configuration:
		typename = "TerraformProjectV3Configuration"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectV3DetailConfigurationTerraformProjectV3Configuration
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ProjectV3DetailConfigurationProjectV3Configuration: "%T"`, v)
	}
}

// ProjectV3DetailConfigurationTerraformProjectV3Configuration includes the requested fields of the GraphQL type TerraformProjectV3Configuration.
type ProjectV3DetailConfigurationTerraformProjectV3Configuration struct {
	Typename     *string                                                                                      `json:"__typename"`
	StateBackend ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackend `json:"stateBackend"`
	Provider     *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProvider        `json:"provider"`
}

// GetTypename returns ProjectV3DetailConfigurationTerraformProjectV3Configuration.Typename, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3Configuration) GetTypename() *string {
	return v.Typename
}

// GetStateBackend returns ProjectV3DetailConfigurationTerraformProjectV3Configuration.StateBackend, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3Configuration) GetStateBackend() ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackend {
	return v.StateBackend
}

// GetProvider returns ProjectV3DetailConfigurationTerraformProjectV3Configuration.Provider, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3Configuration) GetProvider() *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProvider {
	return v.Provider
}

// ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProvider includes the requested fields of the GraphQL type TerraformProvider.
// The GraphQL type's documentation follows.
//
// The Zeet-connected cloud account which will be mapped to a terraform provider
type ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProvider struct {
	AwsAccount *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProviderAwsAccountAWSAccount `json:"awsAccount"`
	GcpAccount *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProviderGcpAccountGCPAccount `json:"gcpAccount"`
	// Region name, when applicable
	Region *string `json:"region"`
}

// GetAwsAccount returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProvider.AwsAccount, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProvider) GetAwsAccount() *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProviderAwsAccountAWSAccount {
	return v.AwsAccount
}

// GetGcpAccount returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProvider.GcpAccount, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProvider) GetGcpAccount() *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProviderGcpAccountGCPAccount {
	return v.GcpAccount
}

// GetRegion returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProvider.Region, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProvider) GetRegion() *string {
	return v.Region
}

// ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProviderAwsAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProviderAwsAccountAWSAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProviderAwsAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProviderAwsAccountAWSAccount) GetId() uuid.UUID {
	return v.Id
}

// ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProviderGcpAccountGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProviderGcpAccountGCPAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProviderGcpAccountGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationProviderTerraformProviderGcpAccountGCPAccount) GetId() uuid.UUID {
	return v.Id
}

// ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackend includes the requested fields of the GraphQL type TerraformStateBackend.
type ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackend struct {
	S3Bucket  *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration   `json:"s3Bucket"`
	GcsBucket *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration `json:"gcsBucket"`
}

// GetS3Bucket returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackend.S3Bucket, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackend) GetS3Bucket() *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration {
	return v.S3Bucket
}

// GetGcsBucket returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackend.GcsBucket, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackend) GetGcsBucket() *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration {
	return v.GcsBucket
}

// ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration includes the requested fields of the GraphQL type GCSBucketConfiguration.
type ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration struct {
	GcpAccountID uuid.UUID `json:"gcpAccountID"`
	BucketName   string    `json:"bucketName"`
	Location     string    `json:"location"`
	Prefix       *string   `json:"prefix"`
}

// GetGcpAccountID returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration.GcpAccountID, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration) GetGcpAccountID() uuid.UUID {
	return v.GcpAccountID
}

// GetBucketName returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration.BucketName, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration) GetBucketName() string {
	return v.BucketName
}

// GetLocation returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration.Location, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration) GetLocation() string {
	return v.Location
}

// GetPrefix returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration.Prefix, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration) GetPrefix() *string {
	return v.Prefix
}

// ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration includes the requested fields of the GraphQL type S3BucketConfiguration.
type ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration struct {
	AwsAccountID uuid.UUID `json:"awsAccountID"`
	BucketName   string    `json:"bucketName"`
	Region       string    `json:"region"`
	Key          *string   `json:"key"`
}

// GetAwsAccountID returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration.AwsAccountID, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration) GetAwsAccountID() uuid.UUID {
	return v.AwsAccountID
}

// GetBucketName returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration.BucketName, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration) GetBucketName() string {
	return v.BucketName
}

// GetRegion returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration.Region, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration) GetRegion() string {
	return v.Region
}

// GetKey returns ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration.Key, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailConfigurationTerraformProjectV3ConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration) GetKey() *string {
	return v.Key
}

// ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow includes the requested fields of the GraphQL type BlueprintDriverWorkflow.
// The GraphQL type's documentation follows.
//
// CAUTION: Experimental!
//
// Provides a similar interface to the ProjectV3Workflow type.
type ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow struct {
	BlueprintDriverWorkflowList `json:"-"`
}

// GetId returns ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow) GetId() uuid.UUID {
	return v.BlueprintDriverWorkflowList.Id
}

// GetStatus returns ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow.Status, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow) GetStatus() ProjectV3WorkflowStatus {
	return v.BlueprintDriverWorkflowList.Status
}

// GetSteps returns ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow.Steps, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow) GetSteps() []BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep {
	return v.BlueprintDriverWorkflowList.Steps
}

// GetCreatedAt returns ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow) GetCreatedAt() time.Time {
	return v.BlueprintDriverWorkflowList.CreatedAt
}

// GetUpdatedAt returns ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow) GetUpdatedAt() time.Time {
	return v.BlueprintDriverWorkflowList.UpdatedAt
}

func (v *ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintDriverWorkflowList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow struct {
	Id uuid.UUID `json:"id"`

	Status ProjectV3WorkflowStatus `json:"status"`

	Steps []BlueprintDriverWorkflowListStepsBlueprintDriverWorkflowStep `json:"steps"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow) __premarshalJSON() (*__premarshalProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow, error) {
	var retval __premarshalProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow

	retval.Id = v.BlueprintDriverWorkflowList.Id
	retval.Status = v.BlueprintDriverWorkflowList.Status
	retval.Steps = v.BlueprintDriverWorkflowList.Steps
	retval.CreatedAt = v.BlueprintDriverWorkflowList.CreatedAt
	retval.UpdatedAt = v.BlueprintDriverWorkflowList.UpdatedAt
	return &retval, nil
}

// ProjectV3DetailVariablesBlueprintVariable includes the requested fields of the GraphQL interface BlueprintVariable.
//
// ProjectV3DetailVariablesBlueprintVariable is implemented by the following types:
// ProjectV3DetailVariablesBlueprintVariableBoolean
// ProjectV3DetailVariablesBlueprintVariableFloat
// ProjectV3DetailVariablesBlueprintVariableInt
// ProjectV3DetailVariablesBlueprintVariableJSON
// ProjectV3DetailVariablesBlueprintVariableString
type ProjectV3DetailVariablesBlueprintVariable interface {
	implementsGraphQLInterfaceProjectV3DetailVariablesBlueprintVariable()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ProjectV3DetailVariablesBlueprintVariableBoolean) implementsGraphQLInterfaceProjectV3DetailVariablesBlueprintVariable() {
}
func (v *ProjectV3DetailVariablesBlueprintVariableFloat) implementsGraphQLInterfaceProjectV3DetailVariablesBlueprintVariable() {
}
func (v *ProjectV3DetailVariablesBlueprintVariableInt) implementsGraphQLInterfaceProjectV3DetailVariablesBlueprintVariable() {
}
func (v *ProjectV3DetailVariablesBlueprintVariableJSON) implementsGraphQLInterfaceProjectV3DetailVariablesBlueprintVariable() {
}
func (v *ProjectV3DetailVariablesBlueprintVariableString) implementsGraphQLInterfaceProjectV3DetailVariablesBlueprintVariable() {
}

func __unmarshalProjectV3DetailVariablesBlueprintVariable(b []byte, v *ProjectV3DetailVariablesBlueprintVariable) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BlueprintVariableBoolean":
		*v = new(ProjectV3DetailVariablesBlueprintVariableBoolean)
		return json.Unmarshal(b, *v)
	case "BlueprintVariableFloat":
		*v = new(ProjectV3DetailVariablesBlueprintVariableFloat)
		return json.Unmarshal(b, *v)
	case "BlueprintVariableInt":
		*v = new(ProjectV3DetailVariablesBlueprintVariableInt)
		return json.Unmarshal(b, *v)
	case "BlueprintVariableJSON":
		*v = new(ProjectV3DetailVariablesBlueprintVariableJSON)
		return json.Unmarshal(b, *v)
	case "BlueprintVariableString":
		*v = new(ProjectV3DetailVariablesBlueprintVariableString)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing BlueprintVariable.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ProjectV3DetailVariablesBlueprintVariable: "%v"`, tn.TypeName)
	}
}

func __marshalProjectV3DetailVariablesBlueprintVariable(v *ProjectV3DetailVariablesBlueprintVariable) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ProjectV3DetailVariablesBlueprintVariableBoolean:
		typename = "BlueprintVariableBoolean"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectV3DetailVariablesBlueprintVariableBoolean
		}{typename, v}
		return json.Marshal(result)
	case *ProjectV3DetailVariablesBlueprintVariableFloat:
		typename = "BlueprintVariableFloat"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectV3DetailVariablesBlueprintVariableFloat
		}{typename, v}
		return json.Marshal(result)
	case *ProjectV3DetailVariablesBlueprintVariableInt:
		typename = "BlueprintVariableInt"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectV3DetailVariablesBlueprintVariableInt
		}{typename, v}
		return json.Marshal(result)
	case *ProjectV3DetailVariablesBlueprintVariableJSON:
		typename = "BlueprintVariableJSON"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectV3DetailVariablesBlueprintVariableJSON
		}{typename, v}
		return json.Marshal(result)
	case *ProjectV3DetailVariablesBlueprintVariableString:
		typename = "BlueprintVariableString"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectV3DetailVariablesBlueprintVariableString
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ProjectV3DetailVariablesBlueprintVariable: "%T"`, v)
	}
}

// ProjectV3DetailVariablesBlueprintVariableBoolean includes the requested fields of the GraphQL type BlueprintVariableBoolean.
type ProjectV3DetailVariablesBlueprintVariableBoolean struct {
	Typename       *string    `json:"__typename"`
	Id             uuid.UUID  `json:"id"`
	VariableSpecID *uuid.UUID `json:"variableSpecID"`
	Name           string     `json:"name"`
	BooleanValue   bool       `json:"booleanValue"`
}

// GetTypename returns ProjectV3DetailVariablesBlueprintVariableBoolean.Typename, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableBoolean) GetTypename() *string { return v.Typename }

// GetId returns ProjectV3DetailVariablesBlueprintVariableBoolean.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableBoolean) GetId() uuid.UUID { return v.Id }

// GetVariableSpecID returns ProjectV3DetailVariablesBlueprintVariableBoolean.VariableSpecID, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableBoolean) GetVariableSpecID() *uuid.UUID {
	return v.VariableSpecID
}

// GetName returns ProjectV3DetailVariablesBlueprintVariableBoolean.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableBoolean) GetName() string { return v.Name }

// GetBooleanValue returns ProjectV3DetailVariablesBlueprintVariableBoolean.BooleanValue, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableBoolean) GetBooleanValue() bool {
	return v.BooleanValue
}

// ProjectV3DetailVariablesBlueprintVariableFloat includes the requested fields of the GraphQL type BlueprintVariableFloat.
type ProjectV3DetailVariablesBlueprintVariableFloat struct {
	Typename       *string    `json:"__typename"`
	Id             uuid.UUID  `json:"id"`
	VariableSpecID *uuid.UUID `json:"variableSpecID"`
	Name           string     `json:"name"`
	FloatValue     float64    `json:"floatValue"`
}

// GetTypename returns ProjectV3DetailVariablesBlueprintVariableFloat.Typename, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableFloat) GetTypename() *string { return v.Typename }

// GetId returns ProjectV3DetailVariablesBlueprintVariableFloat.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableFloat) GetId() uuid.UUID { return v.Id }

// GetVariableSpecID returns ProjectV3DetailVariablesBlueprintVariableFloat.VariableSpecID, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableFloat) GetVariableSpecID() *uuid.UUID {
	return v.VariableSpecID
}

// GetName returns ProjectV3DetailVariablesBlueprintVariableFloat.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableFloat) GetName() string { return v.Name }

// GetFloatValue returns ProjectV3DetailVariablesBlueprintVariableFloat.FloatValue, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableFloat) GetFloatValue() float64 { return v.FloatValue }

// ProjectV3DetailVariablesBlueprintVariableInt includes the requested fields of the GraphQL type BlueprintVariableInt.
type ProjectV3DetailVariablesBlueprintVariableInt struct {
	Typename       *string    `json:"__typename"`
	Id             uuid.UUID  `json:"id"`
	VariableSpecID *uuid.UUID `json:"variableSpecID"`
	Name           string     `json:"name"`
	IntValue       int        `json:"intValue"`
}

// GetTypename returns ProjectV3DetailVariablesBlueprintVariableInt.Typename, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableInt) GetTypename() *string { return v.Typename }

// GetId returns ProjectV3DetailVariablesBlueprintVariableInt.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableInt) GetId() uuid.UUID { return v.Id }

// GetVariableSpecID returns ProjectV3DetailVariablesBlueprintVariableInt.VariableSpecID, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableInt) GetVariableSpecID() *uuid.UUID {
	return v.VariableSpecID
}

// GetName returns ProjectV3DetailVariablesBlueprintVariableInt.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableInt) GetName() string { return v.Name }

// GetIntValue returns ProjectV3DetailVariablesBlueprintVariableInt.IntValue, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableInt) GetIntValue() int { return v.IntValue }

// ProjectV3DetailVariablesBlueprintVariableJSON includes the requested fields of the GraphQL type BlueprintVariableJSON.
type ProjectV3DetailVariablesBlueprintVariableJSON struct {
	Typename       *string    `json:"__typename"`
	Id             uuid.UUID  `json:"id"`
	VariableSpecID *uuid.UUID `json:"variableSpecID"`
	Name           string     `json:"name"`
	JsonValue      string     `json:"jsonValue"`
}

// GetTypename returns ProjectV3DetailVariablesBlueprintVariableJSON.Typename, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableJSON) GetTypename() *string { return v.Typename }

// GetId returns ProjectV3DetailVariablesBlueprintVariableJSON.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableJSON) GetId() uuid.UUID { return v.Id }

// GetVariableSpecID returns ProjectV3DetailVariablesBlueprintVariableJSON.VariableSpecID, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableJSON) GetVariableSpecID() *uuid.UUID {
	return v.VariableSpecID
}

// GetName returns ProjectV3DetailVariablesBlueprintVariableJSON.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableJSON) GetName() string { return v.Name }

// GetJsonValue returns ProjectV3DetailVariablesBlueprintVariableJSON.JsonValue, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableJSON) GetJsonValue() string { return v.JsonValue }

// ProjectV3DetailVariablesBlueprintVariableString includes the requested fields of the GraphQL type BlueprintVariableString.
type ProjectV3DetailVariablesBlueprintVariableString struct {
	Typename       *string    `json:"__typename"`
	Id             uuid.UUID  `json:"id"`
	VariableSpecID *uuid.UUID `json:"variableSpecID"`
	Name           string     `json:"name"`
	StringValue    string     `json:"stringValue"`
}

// GetTypename returns ProjectV3DetailVariablesBlueprintVariableString.Typename, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableString) GetTypename() *string { return v.Typename }

// GetId returns ProjectV3DetailVariablesBlueprintVariableString.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableString) GetId() uuid.UUID { return v.Id }

// GetVariableSpecID returns ProjectV3DetailVariablesBlueprintVariableString.VariableSpecID, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableString) GetVariableSpecID() *uuid.UUID {
	return v.VariableSpecID
}

// GetName returns ProjectV3DetailVariablesBlueprintVariableString.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableString) GetName() string { return v.Name }

// GetStringValue returns ProjectV3DetailVariablesBlueprintVariableString.StringValue, and is useful for accessing the field via an interface.
func (v *ProjectV3DetailVariablesBlueprintVariableString) GetStringValue() string {
	return v.StringValue
}

// ProjectV3ListItem includes the GraphQL fields of ProjectV3 requested by the fragment ProjectV3ListItem.
type ProjectV3ListItem struct {
	// - v0.ProjectV3ID
	Id          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	BlueprintID uuid.UUID `json:"blueprintID"`
}

// GetId returns ProjectV3ListItem.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItem) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectV3ListItem.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItem) GetName() string { return v.Name }

// GetBlueprintID returns ProjectV3ListItem.BlueprintID, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItem) GetBlueprintID() uuid.UUID { return v.BlueprintID }

// ProjectV3ListItemConnection includes the GraphQL fields of ProjectV3AdapterConnection requested by the fragment ProjectV3ListItemConnection.
type ProjectV3ListItemConnection struct {
	Nodes []ProjectV3ListItemConnectionNodesProjectV3Adapter `json:"nodes"`
}

// GetNodes returns ProjectV3ListItemConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnection) GetNodes() []ProjectV3ListItemConnectionNodesProjectV3Adapter {
	return v.Nodes
}

// ProjectV3ListItemConnectionNodesProjectV3Adapter includes the requested fields of the GraphQL type ProjectV3Adapter.
type ProjectV3ListItemConnectionNodesProjectV3Adapter struct {
	Name string `json:"name"`
	// - v0.ProjectAdapterID or v1.ProjectID
	Id                 uuid.UUID                                                           `json:"id"`
	Status             *ProjectV3AdapterStatus                                             `json:"status"`
	IsDeployV2         bool                                                                `json:"isDeployV2"`
	ProjectV3          *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3          `json:"projectV3"`
	Repo               *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo               `json:"repo"`
	Project            *ProjectV3ListItemConnectionNodesProjectV3AdapterProject            `json:"project"`
	ProjectEnvironment *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectEnvironment `json:"projectEnvironment"`
	UpdatedAt          time.Time                                                           `json:"updatedAt"`
}

// GetName returns ProjectV3ListItemConnectionNodesProjectV3Adapter.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3Adapter) GetName() string { return v.Name }

// GetId returns ProjectV3ListItemConnectionNodesProjectV3Adapter.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3Adapter) GetId() uuid.UUID { return v.Id }

// GetStatus returns ProjectV3ListItemConnectionNodesProjectV3Adapter.Status, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3Adapter) GetStatus() *ProjectV3AdapterStatus {
	return v.Status
}

// GetIsDeployV2 returns ProjectV3ListItemConnectionNodesProjectV3Adapter.IsDeployV2, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3Adapter) GetIsDeployV2() bool { return v.IsDeployV2 }

// GetProjectV3 returns ProjectV3ListItemConnectionNodesProjectV3Adapter.ProjectV3, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3Adapter) GetProjectV3() *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3 {
	return v.ProjectV3
}

// GetRepo returns ProjectV3ListItemConnectionNodesProjectV3Adapter.Repo, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3Adapter) GetRepo() *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo {
	return v.Repo
}

// GetProject returns ProjectV3ListItemConnectionNodesProjectV3Adapter.Project, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3Adapter) GetProject() *ProjectV3ListItemConnectionNodesProjectV3AdapterProject {
	return v.Project
}

// GetProjectEnvironment returns ProjectV3ListItemConnectionNodesProjectV3Adapter.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3Adapter) GetProjectEnvironment() *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectEnvironment {
	return v.ProjectEnvironment
}

// GetUpdatedAt returns ProjectV3ListItemConnectionNodesProjectV3Adapter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3Adapter) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// ProjectV3ListItemConnectionNodesProjectV3AdapterProject includes the requested fields of the GraphQL type Project.
type ProjectV3ListItemConnectionNodesProjectV3AdapterProject struct {
	// - v0.ProjectID or v1.GroupID
	Id          uuid.UUID                                                           `json:"id"`
	Name        string                                                              `json:"name"`
	DefaultRepo *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectDefaultRepo `json:"defaultRepo"`
}

// GetId returns ProjectV3ListItemConnectionNodesProjectV3AdapterProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterProject) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectV3ListItemConnectionNodesProjectV3AdapterProject.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterProject) GetName() string { return v.Name }

// GetDefaultRepo returns ProjectV3ListItemConnectionNodesProjectV3AdapterProject.DefaultRepo, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterProject) GetDefaultRepo() *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectDefaultRepo {
	return v.DefaultRepo
}

// ProjectV3ListItemConnectionNodesProjectV3AdapterProjectDefaultRepo includes the requested fields of the GraphQL type Repo.
type ProjectV3ListItemConnectionNodesProjectV3AdapterProjectDefaultRepo struct {
	// - v0.RepoID
	Id uuid.UUID `json:"id"`
}

// GetId returns ProjectV3ListItemConnectionNodesProjectV3AdapterProjectDefaultRepo.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectDefaultRepo) GetId() uuid.UUID {
	return v.Id
}

// ProjectV3ListItemConnectionNodesProjectV3AdapterProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type ProjectV3ListItemConnectionNodesProjectV3AdapterProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectV3ListItemConnectionNodesProjectV3AdapterProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectEnvironment) GetId() uuid.UUID {
	return v.Id
}

// GetName returns ProjectV3ListItemConnectionNodesProjectV3AdapterProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectEnvironment) GetName() string {
	return v.Name
}

// ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3 includes the requested fields of the GraphQL type ProjectV3.
type ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3 struct {
	ProjectV3ListItem `json:"-"`
}

// GetId returns ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3) GetId() uuid.UUID {
	return v.ProjectV3ListItem.Id
}

// GetName returns ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3) GetName() string {
	return v.ProjectV3ListItem.Name
}

// GetBlueprintID returns ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3.BlueprintID, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3) GetBlueprintID() uuid.UUID {
	return v.ProjectV3ListItem.BlueprintID
}

func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3ListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3 struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	BlueprintID uuid.UUID `json:"blueprintID"`
}

func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3) __premarshalJSON() (*__premarshalProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3, error) {
	var retval __premarshalProjectV3ListItemConnectionNodesProjectV3AdapterProjectV3

	retval.Id = v.ProjectV3ListItem.Id
	retval.Name = v.ProjectV3ListItem.Name
	retval.BlueprintID = v.ProjectV3ListItem.BlueprintID
	return &retval, nil
}

// ProjectV3ListItemConnectionNodesProjectV3AdapterRepo includes the requested fields of the GraphQL type Repo.
type ProjectV3ListItemConnectionNodesProjectV3AdapterRepo struct {
	RepoCommon `json:"-"`
}

// GetId returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetId() uuid.UUID {
	return v.RepoCommon.Id
}

// GetPath returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Path, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetPath() string {
	return v.RepoCommon.Path
}

// GetName returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetName() string {
	return v.RepoCommon.Name
}

// GetEnabled returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Enabled, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetEnabled() bool {
	return v.RepoCommon.Enabled
}

// GetSource returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Source, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoCommon.Source
}

// GetDeployTarget returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetDeployTarget() *DeployTarget {
	return v.RepoCommon.DeployTarget
}

// GetDeployType returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.DeployType, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetDeployType() *DeployType {
	return v.RepoCommon.DeployType
}

// GetDeployService returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.DeployService, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetDeployService() *bool {
	return v.RepoCommon.DeployService
}

// GetDeployJob returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetDeployJob() *bool {
	return v.RepoCommon.DeployJob
}

// GetAwsAccount returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Image, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetImage() *string {
	return v.RepoCommon.Image
}

// GetCpu returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Cpu, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetCpu() *string {
	return v.RepoCommon.Cpu
}

// GetMemory returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Memory, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetMemory() *string {
	return v.RepoCommon.Memory
}

// GetGpu returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Gpu, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoCommon.Gpu
}

// GetTpu returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Tpu, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoCommon.Tpu
}

// GetUpdatedAt returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetUpdatedAt() time.Time {
	return v.RepoCommon.UpdatedAt
}

// GetDisableReason returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetDisableReason() *DisableReason {
	return v.RepoCommon.DisableReason
}

// GetCluster returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Cluster, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetCluster() *RepoCommonCluster {
	return v.RepoCommon.Cluster
}

// GetDatabaseProvider returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCommon.Autoscaling
}

// GetOwner returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Owner, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoCommon.Owner
}

// GetProject returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.Project, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetProject() *RepoCommonProject {
	return v.RepoCommon.Project
}

// GetProjectEnvironment returns ProjectV3ListItemConnectionNodesProjectV3AdapterRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectV3ListItemConnectionNodesProjectV3AdapterRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectV3ListItemConnectionNodesProjectV3AdapterRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectV3ListItemConnectionNodesProjectV3AdapterRepo struct {
	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectV3ListItemConnectionNodesProjectV3AdapterRepo) __premarshalJSON() (*__premarshalProjectV3ListItemConnectionNodesProjectV3AdapterRepo, error) {
	var retval __premarshalProjectV3ListItemConnectionNodesProjectV3AdapterRepo

	retval.Id = v.RepoCommon.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// ProjectV3ProductionDeploymentConnection includes the GraphQL fields of ProjectV3AdapterConnection requested by the fragment ProjectV3ProductionDeploymentConnection.
type ProjectV3ProductionDeploymentConnection struct {
	Nodes []ProjectV3ProductionDeploymentConnectionNodesProjectV3Adapter `json:"nodes"`
}

// GetNodes returns ProjectV3ProductionDeploymentConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnection) GetNodes() []ProjectV3ProductionDeploymentConnectionNodesProjectV3Adapter {
	return v.Nodes
}

// ProjectV3ProductionDeploymentConnectionNodesProjectV3Adapter includes the requested fields of the GraphQL type ProjectV3Adapter.
type ProjectV3ProductionDeploymentConnectionNodesProjectV3Adapter struct {
	// - v0.ProjectAdapterID or v1.ProjectID
	Id   uuid.UUID                                                         `json:"id"`
	Repo *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepo `json:"repo"`
}

// GetId returns ProjectV3ProductionDeploymentConnectionNodesProjectV3Adapter.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3Adapter) GetId() uuid.UUID { return v.Id }

// GetRepo returns ProjectV3ProductionDeploymentConnectionNodesProjectV3Adapter.Repo, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3Adapter) GetRepo() *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepo {
	return v.Repo
}

// ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepo includes the requested fields of the GraphQL type Repo.
type ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepo struct {
	// - v0.RepoID
	Id                   uuid.UUID                                                                             `json:"id"`
	ProductionDeployment *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment `json:"productionDeployment"`
}

// GetId returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepo.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepo) GetId() uuid.UUID {
	return v.Id
}

// GetProductionDeployment returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepo) GetProductionDeployment() *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment {
	return v.ProductionDeployment
}

// ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment includes the requested fields of the GraphQL type Deployment.
type ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment struct {
	Id               uuid.UUID `json:"id"`
	DeploymentCommon `json:"-"`
}

// GetId returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) GetId() uuid.UUID {
	return v.Id
}

// GetDescription returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment.Description, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) GetDescription() *string {
	return v.DeploymentCommon.Description
}

// GetVersion returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment.Version, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) GetVersion() string {
	return v.DeploymentCommon.Version
}

// GetStatus returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment.Status, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) GetStatus() DeploymentStatus {
	return v.DeploymentCommon.Status
}

// GetBranch returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment.Branch, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) GetBranch() *string {
	return v.DeploymentCommon.Branch
}

// GetEndpoints returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) GetEndpoints() []string {
	return v.DeploymentCommon.Endpoints
}

// GetPrivateEndpoint returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) GetPrivateEndpoint() *string {
	return v.DeploymentCommon.PrivateEndpoint
}

// GetErrorMessage returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment.ErrorMessage, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) GetErrorMessage() *string {
	return v.DeploymentCommon.ErrorMessage
}

// GetDeployStatus returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment.DeployStatus, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) GetDeployStatus() *DeploymentCommonDeployStatus {
	return v.DeploymentCommon.DeployStatus
}

// GetBuild returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment.Build, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) GetBuild() *DeploymentCommonBuild {
	return v.DeploymentCommon.Build
}

// GetAlternativeImages returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment.AlternativeImages, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) GetAlternativeImages() []DeploymentCommonAlternativeImagesAlternativeImage {
	return v.DeploymentCommon.AlternativeImages
}

// GetUpdatedAt returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) GetUpdatedAt() time.Time {
	return v.DeploymentCommon.UpdatedAt
}

// GetCreatedAt returns ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) GetCreatedAt() time.Time {
	return v.DeploymentCommon.CreatedAt
}

func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment struct {
	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	Version string `json:"version"`

	Status DeploymentStatus `json:"status"`

	Branch *string `json:"branch"`

	Endpoints []string `json:"endpoints"`

	PrivateEndpoint *string `json:"privateEndpoint"`

	ErrorMessage *string `json:"errorMessage"`

	DeployStatus *DeploymentCommonDeployStatus `json:"deployStatus"`

	Build *DeploymentCommonBuild `json:"build"`

	AlternativeImages []DeploymentCommonAlternativeImagesAlternativeImage `json:"alternativeImages"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment) __premarshalJSON() (*__premarshalProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment, error) {
	var retval __premarshalProjectV3ProductionDeploymentConnectionNodesProjectV3AdapterRepoProductionDeployment

	retval.Id = v.Id
	retval.Description = v.DeploymentCommon.Description
	retval.Version = v.DeploymentCommon.Version
	retval.Status = v.DeploymentCommon.Status
	retval.Branch = v.DeploymentCommon.Branch
	retval.Endpoints = v.DeploymentCommon.Endpoints
	retval.PrivateEndpoint = v.DeploymentCommon.PrivateEndpoint
	retval.ErrorMessage = v.DeploymentCommon.ErrorMessage
	retval.DeployStatus = v.DeploymentCommon.DeployStatus
	retval.Build = v.DeploymentCommon.Build
	retval.AlternativeImages = v.DeploymentCommon.AlternativeImages
	retval.UpdatedAt = v.DeploymentCommon.UpdatedAt
	retval.CreatedAt = v.DeploymentCommon.CreatedAt
	return &retval, nil
}

type ProjectV3WorkflowStatus string

const (
	ProjectV3WorkflowStatusQueued              ProjectV3WorkflowStatus = "QUEUED"
	ProjectV3WorkflowStatusStarting            ProjectV3WorkflowStatus = "STARTING"
	ProjectV3WorkflowStatusRunning             ProjectV3WorkflowStatus = "RUNNING"
	ProjectV3WorkflowStatusFailed              ProjectV3WorkflowStatus = "FAILED"
	ProjectV3WorkflowStatusSucceeded           ProjectV3WorkflowStatus = "SUCCEEDED"
	ProjectV3WorkflowStatusPendingApproval     ProjectV3WorkflowStatus = "PENDING_APPROVAL"
	ProjectV3WorkflowStatusPendingManualAction ProjectV3WorkflowStatus = "PENDING_MANUAL_ACTION"
	ProjectV3WorkflowStatusAborted             ProjectV3WorkflowStatus = "ABORTED"
)

// ProjectWithRepo includes the GraphQL fields of ProjectV3Adapter requested by the fragment ProjectWithRepo.
type ProjectWithRepo struct {
	Repo *ProjectWithRepoRepo `json:"repo"`
}

// GetRepo returns ProjectWithRepo.Repo, and is useful for accessing the field via an interface.
func (v *ProjectWithRepo) GetRepo() *ProjectWithRepoRepo { return v.Repo }

// ProjectWithRepoRepo includes the requested fields of the GraphQL type Repo.
type ProjectWithRepoRepo struct {
	// - v0.RepoID
	Id                   uuid.UUID                                `json:"id"`
	Image                *string                                  `json:"image"`
	DeployTarget         *DeployTarget                            `json:"deployTarget"`
	DeployJob            *bool                                    `json:"deployJob"`
	Source               ProjectWithRepoRepoSource                `json:"source"`
	ProductionDeployment *ProjectWithRepoRepoProductionDeployment `json:"productionDeployment"`
}

// GetId returns ProjectWithRepoRepo.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithRepoRepo) GetId() uuid.UUID { return v.Id }

// GetImage returns ProjectWithRepoRepo.Image, and is useful for accessing the field via an interface.
func (v *ProjectWithRepoRepo) GetImage() *string { return v.Image }

// GetDeployTarget returns ProjectWithRepoRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *ProjectWithRepoRepo) GetDeployTarget() *DeployTarget { return v.DeployTarget }

// GetDeployJob returns ProjectWithRepoRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *ProjectWithRepoRepo) GetDeployJob() *bool { return v.DeployJob }

// GetSource returns ProjectWithRepoRepo.Source, and is useful for accessing the field via an interface.
func (v *ProjectWithRepoRepo) GetSource() ProjectWithRepoRepoSource { return v.Source }

// GetProductionDeployment returns ProjectWithRepoRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *ProjectWithRepoRepo) GetProductionDeployment() *ProjectWithRepoRepoProductionDeployment {
	return v.ProductionDeployment
}

// ProjectWithRepoRepoProductionDeployment includes the requested fields of the GraphQL type Deployment.
type ProjectWithRepoRepoProductionDeployment struct {
	Endpoints       []string `json:"endpoints"`
	PrivateEndpoint *string  `json:"privateEndpoint"`
}

// GetEndpoints returns ProjectWithRepoRepoProductionDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *ProjectWithRepoRepoProductionDeployment) GetEndpoints() []string { return v.Endpoints }

// GetPrivateEndpoint returns ProjectWithRepoRepoProductionDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *ProjectWithRepoRepoProductionDeployment) GetPrivateEndpoint() *string {
	return v.PrivateEndpoint
}

// ProjectWithRepoRepoSource includes the requested fields of the GraphQL type RepoSource.
type ProjectWithRepoRepoSource struct {
	Id   uuid.UUID      `json:"id"`
	Type RepoSourceType `json:"type"`
	Name string         `json:"name"`
}

// GetId returns ProjectWithRepoRepoSource.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithRepoRepoSource) GetId() uuid.UUID { return v.Id }

// GetType returns ProjectWithRepoRepoSource.Type, and is useful for accessing the field via an interface.
func (v *ProjectWithRepoRepoSource) GetType() RepoSourceType { return v.Type }

// GetName returns ProjectWithRepoRepoSource.Name, and is useful for accessing the field via an interface.
func (v *ProjectWithRepoRepoSource) GetName() string { return v.Name }

type PrometheusScrapeInput struct {
	Path string `json:"path"`
	Port int    `json:"port"`
}

// GetPath returns PrometheusScrapeInput.Path, and is useful for accessing the field via an interface.
func (v *PrometheusScrapeInput) GetPath() string { return v.Path }

// GetPort returns PrometheusScrapeInput.Port, and is useful for accessing the field via an interface.
func (v *PrometheusScrapeInput) GetPort() int { return v.Port }

type ReissueCustomDomainCertificateInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns ReissueCustomDomainCertificateInput.Id, and is useful for accessing the field via an interface.
func (v *ReissueCustomDomainCertificateInput) GetId() uuid.UUID { return v.Id }

type RemoveProbeInput struct {
	// - v0.RepoID
	Id             uuid.UUID `json:"id"`
	ReadinessProbe *bool     `json:"readinessProbe"`
	LivenessProbe  *bool     `json:"livenessProbe"`
	StartupProbe   *bool     `json:"startupProbe"`
}

// GetId returns RemoveProbeInput.Id, and is useful for accessing the field via an interface.
func (v *RemoveProbeInput) GetId() uuid.UUID { return v.Id }

// GetReadinessProbe returns RemoveProbeInput.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *RemoveProbeInput) GetReadinessProbe() *bool { return v.ReadinessProbe }

// GetLivenessProbe returns RemoveProbeInput.LivenessProbe, and is useful for accessing the field via an interface.
func (v *RemoveProbeInput) GetLivenessProbe() *bool { return v.LivenessProbe }

// GetStartupProbe returns RemoveProbeInput.StartupProbe, and is useful for accessing the field via an interface.
func (v *RemoveProbeInput) GetStartupProbe() *bool { return v.StartupProbe }

type RemoveRepoCustomDomainInput struct {
	Id       uuid.UUID `json:"id"`
	DomainID uuid.UUID `json:"domainID"`
}

// GetId returns RemoveRepoCustomDomainInput.Id, and is useful for accessing the field via an interface.
func (v *RemoveRepoCustomDomainInput) GetId() uuid.UUID { return v.Id }

// GetDomainID returns RemoveRepoCustomDomainInput.DomainID, and is useful for accessing the field via an interface.
func (v *RemoveRepoCustomDomainInput) GetDomainID() uuid.UUID { return v.DomainID }

type RemoveTeamMemberInput struct {
	Id     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"userID"`
}

// GetId returns RemoveTeamMemberInput.Id, and is useful for accessing the field via an interface.
func (v *RemoveTeamMemberInput) GetId() uuid.UUID { return v.Id }

// GetUserID returns RemoveTeamMemberInput.UserID, and is useful for accessing the field via an interface.
func (v *RemoveTeamMemberInput) GetUserID() uuid.UUID { return v.UserID }

type RemoveUserIntegrationInput struct {
	UserID uuid.UUID `json:"userID"`
	Id     uuid.UUID `json:"id"`
}

// GetUserID returns RemoveUserIntegrationInput.UserID, and is useful for accessing the field via an interface.
func (v *RemoveUserIntegrationInput) GetUserID() uuid.UUID { return v.UserID }

// GetId returns RemoveUserIntegrationInput.Id, and is useful for accessing the field via an interface.
func (v *RemoveUserIntegrationInput) GetId() uuid.UUID { return v.Id }

type ReplicationInput struct {
	Region    string     `json:"region"`
	Replicas  int        `json:"replicas"`
	ClusterID *uuid.UUID `json:"clusterID"`
}

// GetRegion returns ReplicationInput.Region, and is useful for accessing the field via an interface.
func (v *ReplicationInput) GetRegion() string { return v.Region }

// GetReplicas returns ReplicationInput.Replicas, and is useful for accessing the field via an interface.
func (v *ReplicationInput) GetReplicas() int { return v.Replicas }

// GetClusterID returns ReplicationInput.ClusterID, and is useful for accessing the field via an interface.
func (v *ReplicationInput) GetClusterID() *uuid.UUID { return v.ClusterID }

type RepoAction string

const (
	RepoActionDeploy RepoAction = "DEPLOY"
)

// RepoBasic includes the GraphQL fields of Repo requested by the fragment RepoBasic.
type RepoBasic struct {
	// - v0.RepoID
	Id                 uuid.UUID                    `json:"id"`
	Path               string                       `json:"path"`
	Name               string                       `json:"name"`
	Enabled            bool                         `json:"enabled"`
	Image              *string                      `json:"image"`
	Owner              RepoBasicOwnerUser           `json:"owner"`
	Project            *RepoBasicProject            `json:"project"`
	ProjectEnvironment *RepoBasicProjectEnvironment `json:"projectEnvironment"`
}

// GetId returns RepoBasic.Id, and is useful for accessing the field via an interface.
func (v *RepoBasic) GetId() uuid.UUID { return v.Id }

// GetPath returns RepoBasic.Path, and is useful for accessing the field via an interface.
func (v *RepoBasic) GetPath() string { return v.Path }

// GetName returns RepoBasic.Name, and is useful for accessing the field via an interface.
func (v *RepoBasic) GetName() string { return v.Name }

// GetEnabled returns RepoBasic.Enabled, and is useful for accessing the field via an interface.
func (v *RepoBasic) GetEnabled() bool { return v.Enabled }

// GetImage returns RepoBasic.Image, and is useful for accessing the field via an interface.
func (v *RepoBasic) GetImage() *string { return v.Image }

// GetOwner returns RepoBasic.Owner, and is useful for accessing the field via an interface.
func (v *RepoBasic) GetOwner() RepoBasicOwnerUser { return v.Owner }

// GetProject returns RepoBasic.Project, and is useful for accessing the field via an interface.
func (v *RepoBasic) GetProject() *RepoBasicProject { return v.Project }

// GetProjectEnvironment returns RepoBasic.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *RepoBasic) GetProjectEnvironment() *RepoBasicProjectEnvironment { return v.ProjectEnvironment }

// RepoBasicOwnerUser includes the requested fields of the GraphQL type User.
type RepoBasicOwnerUser struct {
	Id    uuid.UUID `json:"id"`
	Login string    `json:"login"`
}

// GetId returns RepoBasicOwnerUser.Id, and is useful for accessing the field via an interface.
func (v *RepoBasicOwnerUser) GetId() uuid.UUID { return v.Id }

// GetLogin returns RepoBasicOwnerUser.Login, and is useful for accessing the field via an interface.
func (v *RepoBasicOwnerUser) GetLogin() string { return v.Login }

// RepoBasicProject includes the requested fields of the GraphQL type Project.
type RepoBasicProject struct {
	// - v0.ProjectID or v1.GroupID
	Id           uuid.UUID `json:"id"`
	ProjectBasic `json:"-"`
}

// GetId returns RepoBasicProject.Id, and is useful for accessing the field via an interface.
func (v *RepoBasicProject) GetId() uuid.UUID { return v.Id }

// GetName returns RepoBasicProject.Name, and is useful for accessing the field via an interface.
func (v *RepoBasicProject) GetName() string { return v.ProjectBasic.Name }

// GetOwner returns RepoBasicProject.Owner, and is useful for accessing the field via an interface.
func (v *RepoBasicProject) GetOwner() ProjectBasicOwnerUser { return v.ProjectBasic.Owner }

func (v *RepoBasicProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoBasicProject
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoBasicProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoBasicProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Owner ProjectBasicOwnerUser `json:"owner"`
}

func (v *RepoBasicProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoBasicProject) __premarshalJSON() (*__premarshalRepoBasicProject, error) {
	var retval __premarshalRepoBasicProject

	retval.Id = v.Id
	retval.Name = v.ProjectBasic.Name
	retval.Owner = v.ProjectBasic.Owner
	return &retval, nil
}

// RepoBasicProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type RepoBasicProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id                      uuid.UUID `json:"id"`
	ProjectEnvironmentBasic `json:"-"`
}

// GetId returns RepoBasicProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *RepoBasicProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns RepoBasicProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *RepoBasicProjectEnvironment) GetName() string { return v.ProjectEnvironmentBasic.Name }

func (v *RepoBasicProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoBasicProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoBasicProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectEnvironmentBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoBasicProjectEnvironment struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *RepoBasicProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoBasicProjectEnvironment) __premarshalJSON() (*__premarshalRepoBasicProjectEnvironment, error) {
	var retval __premarshalRepoBasicProjectEnvironment

	retval.Id = v.Id
	retval.Name = v.ProjectEnvironmentBasic.Name
	return &retval, nil
}

// RepoBranchDeployments includes the GraphQL fields of DeploymentConnection requested by the fragment RepoBranchDeployments.
type RepoBranchDeployments struct {
	PageInfo RepoBranchDeploymentsPageInfo          `json:"pageInfo"`
	Nodes    []RepoBranchDeploymentsNodesDeployment `json:"nodes"`
}

// GetPageInfo returns RepoBranchDeployments.PageInfo, and is useful for accessing the field via an interface.
func (v *RepoBranchDeployments) GetPageInfo() RepoBranchDeploymentsPageInfo { return v.PageInfo }

// GetNodes returns RepoBranchDeployments.Nodes, and is useful for accessing the field via an interface.
func (v *RepoBranchDeployments) GetNodes() []RepoBranchDeploymentsNodesDeployment { return v.Nodes }

// RepoBranchDeploymentsNodesDeployment includes the requested fields of the GraphQL type Deployment.
type RepoBranchDeploymentsNodesDeployment struct {
	Id               uuid.UUID `json:"id"`
	DeploymentCommon `json:"-"`
	AwsLinks         *RepoBranchDeploymentsNodesDeploymentAwsLinksAWSLinks `json:"awsLinks"`
	GcpLinks         *RepoBranchDeploymentsNodesDeploymentGcpLinksGCPLinks `json:"gcpLinks"`
}

// GetId returns RepoBranchDeploymentsNodesDeployment.Id, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetId() uuid.UUID { return v.Id }

// GetAwsLinks returns RepoBranchDeploymentsNodesDeployment.AwsLinks, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetAwsLinks() *RepoBranchDeploymentsNodesDeploymentAwsLinksAWSLinks {
	return v.AwsLinks
}

// GetGcpLinks returns RepoBranchDeploymentsNodesDeployment.GcpLinks, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetGcpLinks() *RepoBranchDeploymentsNodesDeploymentGcpLinksGCPLinks {
	return v.GcpLinks
}

// GetDescription returns RepoBranchDeploymentsNodesDeployment.Description, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetDescription() *string {
	return v.DeploymentCommon.Description
}

// GetVersion returns RepoBranchDeploymentsNodesDeployment.Version, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetVersion() string { return v.DeploymentCommon.Version }

// GetStatus returns RepoBranchDeploymentsNodesDeployment.Status, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetStatus() DeploymentStatus {
	return v.DeploymentCommon.Status
}

// GetBranch returns RepoBranchDeploymentsNodesDeployment.Branch, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetBranch() *string { return v.DeploymentCommon.Branch }

// GetEndpoints returns RepoBranchDeploymentsNodesDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetEndpoints() []string {
	return v.DeploymentCommon.Endpoints
}

// GetPrivateEndpoint returns RepoBranchDeploymentsNodesDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetPrivateEndpoint() *string {
	return v.DeploymentCommon.PrivateEndpoint
}

// GetErrorMessage returns RepoBranchDeploymentsNodesDeployment.ErrorMessage, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetErrorMessage() *string {
	return v.DeploymentCommon.ErrorMessage
}

// GetDeployStatus returns RepoBranchDeploymentsNodesDeployment.DeployStatus, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetDeployStatus() *DeploymentCommonDeployStatus {
	return v.DeploymentCommon.DeployStatus
}

// GetBuild returns RepoBranchDeploymentsNodesDeployment.Build, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetBuild() *DeploymentCommonBuild {
	return v.DeploymentCommon.Build
}

// GetAlternativeImages returns RepoBranchDeploymentsNodesDeployment.AlternativeImages, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetAlternativeImages() []DeploymentCommonAlternativeImagesAlternativeImage {
	return v.DeploymentCommon.AlternativeImages
}

// GetUpdatedAt returns RepoBranchDeploymentsNodesDeployment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetUpdatedAt() time.Time {
	return v.DeploymentCommon.UpdatedAt
}

// GetCreatedAt returns RepoBranchDeploymentsNodesDeployment.CreatedAt, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeployment) GetCreatedAt() time.Time {
	return v.DeploymentCommon.CreatedAt
}

func (v *RepoBranchDeploymentsNodesDeployment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoBranchDeploymentsNodesDeployment
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoBranchDeploymentsNodesDeployment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoBranchDeploymentsNodesDeployment struct {
	Id uuid.UUID `json:"id"`

	AwsLinks *RepoBranchDeploymentsNodesDeploymentAwsLinksAWSLinks `json:"awsLinks"`

	GcpLinks *RepoBranchDeploymentsNodesDeploymentGcpLinksGCPLinks `json:"gcpLinks"`

	Description *string `json:"description"`

	Version string `json:"version"`

	Status DeploymentStatus `json:"status"`

	Branch *string `json:"branch"`

	Endpoints []string `json:"endpoints"`

	PrivateEndpoint *string `json:"privateEndpoint"`

	ErrorMessage *string `json:"errorMessage"`

	DeployStatus *DeploymentCommonDeployStatus `json:"deployStatus"`

	Build *DeploymentCommonBuild `json:"build"`

	AlternativeImages []DeploymentCommonAlternativeImagesAlternativeImage `json:"alternativeImages"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *RepoBranchDeploymentsNodesDeployment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoBranchDeploymentsNodesDeployment) __premarshalJSON() (*__premarshalRepoBranchDeploymentsNodesDeployment, error) {
	var retval __premarshalRepoBranchDeploymentsNodesDeployment

	retval.Id = v.Id
	retval.AwsLinks = v.AwsLinks
	retval.GcpLinks = v.GcpLinks
	retval.Description = v.DeploymentCommon.Description
	retval.Version = v.DeploymentCommon.Version
	retval.Status = v.DeploymentCommon.Status
	retval.Branch = v.DeploymentCommon.Branch
	retval.Endpoints = v.DeploymentCommon.Endpoints
	retval.PrivateEndpoint = v.DeploymentCommon.PrivateEndpoint
	retval.ErrorMessage = v.DeploymentCommon.ErrorMessage
	retval.DeployStatus = v.DeploymentCommon.DeployStatus
	retval.Build = v.DeploymentCommon.Build
	retval.AlternativeImages = v.DeploymentCommon.AlternativeImages
	retval.UpdatedAt = v.DeploymentCommon.UpdatedAt
	retval.CreatedAt = v.DeploymentCommon.CreatedAt
	return &retval, nil
}

// RepoBranchDeploymentsNodesDeploymentAwsLinksAWSLinks includes the requested fields of the GraphQL type AWSLinks.
type RepoBranchDeploymentsNodesDeploymentAwsLinksAWSLinks struct {
	CloudwatchLogs *string `json:"cloudwatchLogs"`
}

// GetCloudwatchLogs returns RepoBranchDeploymentsNodesDeploymentAwsLinksAWSLinks.CloudwatchLogs, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeploymentAwsLinksAWSLinks) GetCloudwatchLogs() *string {
	return v.CloudwatchLogs
}

// RepoBranchDeploymentsNodesDeploymentGcpLinksGCPLinks includes the requested fields of the GraphQL type GCPLinks.
type RepoBranchDeploymentsNodesDeploymentGcpLinksGCPLinks struct {
	CloudLogging *string `json:"cloudLogging"`
}

// GetCloudLogging returns RepoBranchDeploymentsNodesDeploymentGcpLinksGCPLinks.CloudLogging, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsNodesDeploymentGcpLinksGCPLinks) GetCloudLogging() *string {
	return v.CloudLogging
}

// RepoBranchDeploymentsPageInfo includes the requested fields of the GraphQL type PageInfo.
type RepoBranchDeploymentsPageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns RepoBranchDeploymentsPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsPageInfo) GetStartCursor() string { return v.StartCursor }

// GetEndCursor returns RepoBranchDeploymentsPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsPageInfo) GetEndCursor() string { return v.EndCursor }

// GetHasNextPage returns RepoBranchDeploymentsPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetHasPreviousPage returns RepoBranchDeploymentsPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *RepoBranchDeploymentsPageInfo) GetHasPreviousPage() bool { return v.HasPreviousPage }

// RepoBuild includes the GraphQL fields of Repo requested by the fragment RepoBuild.
type RepoBuild struct {
	BuildMethod                  *RepoBuildBuildMethod                          `json:"buildMethod"`
	BuildResources               *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`
	BuildSpec                    *RepoBuildBuildSpecContainerSpec               `json:"buildSpec"`
	NoBuildCache                 *bool                                          `json:"noBuildCache"`
	GitSubmodules                *GitSubmodulesType                             `json:"gitSubmodules"`
	KanikoFlags                  *RepoBuildKanikoFlags                          `json:"kanikoFlags"`
	AlternativeImageTagTemplates []string                                       `json:"alternativeImageTagTemplates"`
}

// GetBuildMethod returns RepoBuild.BuildMethod, and is useful for accessing the field via an interface.
func (v *RepoBuild) GetBuildMethod() *RepoBuildBuildMethod { return v.BuildMethod }

// GetBuildResources returns RepoBuild.BuildResources, and is useful for accessing the field via an interface.
func (v *RepoBuild) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.BuildResources
}

// GetBuildSpec returns RepoBuild.BuildSpec, and is useful for accessing the field via an interface.
func (v *RepoBuild) GetBuildSpec() *RepoBuildBuildSpecContainerSpec { return v.BuildSpec }

// GetNoBuildCache returns RepoBuild.NoBuildCache, and is useful for accessing the field via an interface.
func (v *RepoBuild) GetNoBuildCache() *bool { return v.NoBuildCache }

// GetGitSubmodules returns RepoBuild.GitSubmodules, and is useful for accessing the field via an interface.
func (v *RepoBuild) GetGitSubmodules() *GitSubmodulesType { return v.GitSubmodules }

// GetKanikoFlags returns RepoBuild.KanikoFlags, and is useful for accessing the field via an interface.
func (v *RepoBuild) GetKanikoFlags() *RepoBuildKanikoFlags { return v.KanikoFlags }

// GetAlternativeImageTagTemplates returns RepoBuild.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *RepoBuild) GetAlternativeImageTagTemplates() []string { return v.AlternativeImageTagTemplates }

// RepoBuildBuildMethod includes the requested fields of the GraphQL type BuildMethod.
type RepoBuildBuildMethod struct {
	Name             string    `json:"name"`
	Type             BuildType `json:"type"`
	WorkingDirectory *string   `json:"workingDirectory"`
	DockerfilePath   *string   `json:"dockerfilePath"`
	BuildCommand     *string   `json:"buildCommand"`
	StaticPath       *string   `json:"staticPath"`
	RunCommand       *string   `json:"runCommand"`
	ReleaseCommand   *string   `json:"releaseCommand"`
	NodejsVersion    *string   `json:"nodejsVersion"`
	PythonVersion    *string   `json:"pythonVersion"`
	GolangVersion    *string   `json:"golangVersion"`
}

// GetName returns RepoBuildBuildMethod.Name, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildMethod) GetName() string { return v.Name }

// GetType returns RepoBuildBuildMethod.Type, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildMethod) GetType() BuildType { return v.Type }

// GetWorkingDirectory returns RepoBuildBuildMethod.WorkingDirectory, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildMethod) GetWorkingDirectory() *string { return v.WorkingDirectory }

// GetDockerfilePath returns RepoBuildBuildMethod.DockerfilePath, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildMethod) GetDockerfilePath() *string { return v.DockerfilePath }

// GetBuildCommand returns RepoBuildBuildMethod.BuildCommand, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildMethod) GetBuildCommand() *string { return v.BuildCommand }

// GetStaticPath returns RepoBuildBuildMethod.StaticPath, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildMethod) GetStaticPath() *string { return v.StaticPath }

// GetRunCommand returns RepoBuildBuildMethod.RunCommand, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildMethod) GetRunCommand() *string { return v.RunCommand }

// GetReleaseCommand returns RepoBuildBuildMethod.ReleaseCommand, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildMethod) GetReleaseCommand() *string { return v.ReleaseCommand }

// GetNodejsVersion returns RepoBuildBuildMethod.NodejsVersion, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildMethod) GetNodejsVersion() *string { return v.NodejsVersion }

// GetPythonVersion returns RepoBuildBuildMethod.PythonVersion, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildMethod) GetPythonVersion() *string { return v.PythonVersion }

// GetGolangVersion returns RepoBuildBuildMethod.GolangVersion, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildMethod) GetGolangVersion() *string { return v.GolangVersion }

// RepoBuildBuildResourcesContainerResourcesSpec includes the requested fields of the GraphQL type ContainerResourcesSpec.
type RepoBuildBuildResourcesContainerResourcesSpec struct {
	Cpu              *float64 `json:"cpu"`
	Memory           *float64 `json:"memory"`
	EphemeralStorage *float64 `json:"ephemeralStorage"`
	Spot             *bool    `json:"spot"`
}

// GetCpu returns RepoBuildBuildResourcesContainerResourcesSpec.Cpu, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildResourcesContainerResourcesSpec) GetCpu() *float64 { return v.Cpu }

// GetMemory returns RepoBuildBuildResourcesContainerResourcesSpec.Memory, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildResourcesContainerResourcesSpec) GetMemory() *float64 { return v.Memory }

// GetEphemeralStorage returns RepoBuildBuildResourcesContainerResourcesSpec.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildResourcesContainerResourcesSpec) GetEphemeralStorage() *float64 {
	return v.EphemeralStorage
}

// GetSpot returns RepoBuildBuildResourcesContainerResourcesSpec.Spot, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildResourcesContainerResourcesSpec) GetSpot() *bool { return v.Spot }

// RepoBuildBuildSpecContainerSpec includes the requested fields of the GraphQL type ContainerSpec.
type RepoBuildBuildSpecContainerSpec struct {
	Cpu    *float64 `json:"cpu"`
	Memory *float64 `json:"memory"`
}

// GetCpu returns RepoBuildBuildSpecContainerSpec.Cpu, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildSpecContainerSpec) GetCpu() *float64 { return v.Cpu }

// GetMemory returns RepoBuildBuildSpecContainerSpec.Memory, and is useful for accessing the field via an interface.
func (v *RepoBuildBuildSpecContainerSpec) GetMemory() *float64 { return v.Memory }

// RepoBuildKanikoFlags includes the requested fields of the GraphQL type KanikoFlags.
type RepoBuildKanikoFlags struct {
	CompressedCaching *bool `json:"compressedCaching"`
}

// GetCompressedCaching returns RepoBuildKanikoFlags.CompressedCaching, and is useful for accessing the field via an interface.
func (v *RepoBuildKanikoFlags) GetCompressedCaching() *bool { return v.CompressedCaching }

// RepoCommon includes the GraphQL fields of Repo requested by the fragment RepoCommon.
type RepoCommon struct {
	// - v0.RepoID
	Id                 uuid.UUID                       `json:"id"`
	Path               string                          `json:"path"`
	Name               string                          `json:"name"`
	Enabled            bool                            `json:"enabled"`
	Source             RepoCommonSourceRepoSource      `json:"source"`
	DeployTarget       *DeployTarget                   `json:"deployTarget"`
	DeployType         *DeployType                     `json:"deployType"`
	DeployService      *bool                           `json:"deployService"`
	DeployJob          *bool                           `json:"deployJob"`
	AwsAccount         *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`
	GcpAccount         *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`
	Image              *string                         `json:"image"`
	Cpu                *string                         `json:"cpu"`
	Memory             *string                         `json:"memory"`
	Gpu                *RepoCommonGpuGPUSpec           `json:"gpu"`
	Tpu                *RepoCommonTpuTPUSpec           `json:"tpu"`
	UpdatedAt          time.Time                       `json:"updatedAt"`
	DisableReason      *DisableReason                  `json:"disableReason"`
	Cluster            *RepoCommonCluster              `json:"cluster"`
	DatabaseProvider   *DatabaseProviderType           `json:"databaseProvider"`
	DatabaseEngine     *DatabaseEngineType             `json:"databaseEngine"`
	Autoscaling        *RepoCommonAutoscaling          `json:"autoscaling"`
	Owner              RepoCommonOwnerUser             `json:"owner"`
	Project            *RepoCommonProject              `json:"project"`
	ProjectEnvironment *RepoCommonProjectEnvironment   `json:"projectEnvironment"`
}

// GetId returns RepoCommon.Id, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetId() uuid.UUID { return v.Id }

// GetPath returns RepoCommon.Path, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetPath() string { return v.Path }

// GetName returns RepoCommon.Name, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetName() string { return v.Name }

// GetEnabled returns RepoCommon.Enabled, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetEnabled() bool { return v.Enabled }

// GetSource returns RepoCommon.Source, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetSource() RepoCommonSourceRepoSource { return v.Source }

// GetDeployTarget returns RepoCommon.DeployTarget, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetDeployTarget() *DeployTarget { return v.DeployTarget }

// GetDeployType returns RepoCommon.DeployType, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetDeployType() *DeployType { return v.DeployType }

// GetDeployService returns RepoCommon.DeployService, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetDeployService() *bool { return v.DeployService }

// GetDeployJob returns RepoCommon.DeployJob, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetDeployJob() *bool { return v.DeployJob }

// GetAwsAccount returns RepoCommon.AwsAccount, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetAwsAccount() *RepoCommonAwsAccountAWSAccount { return v.AwsAccount }

// GetGcpAccount returns RepoCommon.GcpAccount, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetGcpAccount() *RepoCommonGcpAccountGCPAccount { return v.GcpAccount }

// GetImage returns RepoCommon.Image, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetImage() *string { return v.Image }

// GetCpu returns RepoCommon.Cpu, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetCpu() *string { return v.Cpu }

// GetMemory returns RepoCommon.Memory, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetMemory() *string { return v.Memory }

// GetGpu returns RepoCommon.Gpu, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetGpu() *RepoCommonGpuGPUSpec { return v.Gpu }

// GetTpu returns RepoCommon.Tpu, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetTpu() *RepoCommonTpuTPUSpec { return v.Tpu }

// GetUpdatedAt returns RepoCommon.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetDisableReason returns RepoCommon.DisableReason, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetDisableReason() *DisableReason { return v.DisableReason }

// GetCluster returns RepoCommon.Cluster, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetCluster() *RepoCommonCluster { return v.Cluster }

// GetDatabaseProvider returns RepoCommon.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetDatabaseProvider() *DatabaseProviderType { return v.DatabaseProvider }

// GetDatabaseEngine returns RepoCommon.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetDatabaseEngine() *DatabaseEngineType { return v.DatabaseEngine }

// GetAutoscaling returns RepoCommon.Autoscaling, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetAutoscaling() *RepoCommonAutoscaling { return v.Autoscaling }

// GetOwner returns RepoCommon.Owner, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetOwner() RepoCommonOwnerUser { return v.Owner }

// GetProject returns RepoCommon.Project, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetProject() *RepoCommonProject { return v.Project }

// GetProjectEnvironment returns RepoCommon.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *RepoCommon) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.ProjectEnvironment
}

// RepoCommonAutoscaling includes the requested fields of the GraphQL type Autoscaling.
type RepoCommonAutoscaling struct {
	MinReplicas int `json:"minReplicas"`
	MaxReplicas int `json:"maxReplicas"`
}

// GetMinReplicas returns RepoCommonAutoscaling.MinReplicas, and is useful for accessing the field via an interface.
func (v *RepoCommonAutoscaling) GetMinReplicas() int { return v.MinReplicas }

// GetMaxReplicas returns RepoCommonAutoscaling.MaxReplicas, and is useful for accessing the field via an interface.
func (v *RepoCommonAutoscaling) GetMaxReplicas() int { return v.MaxReplicas }

// RepoCommonAwsAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type RepoCommonAwsAccountAWSAccount struct {
	Id        uuid.UUID `json:"id"`
	AccountID *string   `json:"accountID"`
}

// GetId returns RepoCommonAwsAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonAwsAccountAWSAccount) GetId() uuid.UUID { return v.Id }

// GetAccountID returns RepoCommonAwsAccountAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *RepoCommonAwsAccountAWSAccount) GetAccountID() *string { return v.AccountID }

// RepoCommonCluster includes the requested fields of the GraphQL type Cluster.
type RepoCommonCluster struct {
	Id            uuid.UUID                                   `json:"id"`
	Name          string                                      `json:"name"`
	Domain        *string                                     `json:"domain"`
	AwsAccount    *RepoCommonClusterAwsAccountAWSAccount      `json:"awsAccount"`
	GcpAccount    *RepoCommonClusterGcpAccountGCPAccount      `json:"gcpAccount"`
	DoAccount     *RepoCommonClusterDoAccountDOAccount        `json:"doAccount"`
	CwAccount     *RepoCommonClusterCwAccountCoreWeaveAccount `json:"cwAccount"`
	LinodeAccount *RepoCommonClusterLinodeAccount             `json:"linodeAccount"`
	VultrAccount  *RepoCommonClusterVultrAccount              `json:"vultrAccount"`
	AzureAccount  *RepoCommonClusterAzureAccount              `json:"azureAccount"`
}

// GetId returns RepoCommonCluster.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonCluster) GetId() uuid.UUID { return v.Id }

// GetName returns RepoCommonCluster.Name, and is useful for accessing the field via an interface.
func (v *RepoCommonCluster) GetName() string { return v.Name }

// GetDomain returns RepoCommonCluster.Domain, and is useful for accessing the field via an interface.
func (v *RepoCommonCluster) GetDomain() *string { return v.Domain }

// GetAwsAccount returns RepoCommonCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *RepoCommonCluster) GetAwsAccount() *RepoCommonClusterAwsAccountAWSAccount {
	return v.AwsAccount
}

// GetGcpAccount returns RepoCommonCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *RepoCommonCluster) GetGcpAccount() *RepoCommonClusterGcpAccountGCPAccount {
	return v.GcpAccount
}

// GetDoAccount returns RepoCommonCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *RepoCommonCluster) GetDoAccount() *RepoCommonClusterDoAccountDOAccount { return v.DoAccount }

// GetCwAccount returns RepoCommonCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *RepoCommonCluster) GetCwAccount() *RepoCommonClusterCwAccountCoreWeaveAccount {
	return v.CwAccount
}

// GetLinodeAccount returns RepoCommonCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *RepoCommonCluster) GetLinodeAccount() *RepoCommonClusterLinodeAccount {
	return v.LinodeAccount
}

// GetVultrAccount returns RepoCommonCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *RepoCommonCluster) GetVultrAccount() *RepoCommonClusterVultrAccount { return v.VultrAccount }

// GetAzureAccount returns RepoCommonCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *RepoCommonCluster) GetAzureAccount() *RepoCommonClusterAzureAccount { return v.AzureAccount }

// RepoCommonClusterAwsAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type RepoCommonClusterAwsAccountAWSAccount struct {
	Id        uuid.UUID `json:"id"`
	AccountID *string   `json:"accountID"`
}

// GetId returns RepoCommonClusterAwsAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterAwsAccountAWSAccount) GetId() uuid.UUID { return v.Id }

// GetAccountID returns RepoCommonClusterAwsAccountAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterAwsAccountAWSAccount) GetAccountID() *string { return v.AccountID }

// RepoCommonClusterAzureAccount includes the requested fields of the GraphQL type AzureAccount.
type RepoCommonClusterAzureAccount struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns RepoCommonClusterAzureAccount.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterAzureAccount) GetId() uuid.UUID { return v.Id }

// GetName returns RepoCommonClusterAzureAccount.Name, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterAzureAccount) GetName() string { return v.Name }

// RepoCommonClusterCwAccountCoreWeaveAccount includes the requested fields of the GraphQL type CoreWeaveAccount.
type RepoCommonClusterCwAccountCoreWeaveAccount struct {
	Id        uuid.UUID `json:"id"`
	Namespace *string   `json:"namespace"`
}

// GetId returns RepoCommonClusterCwAccountCoreWeaveAccount.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterCwAccountCoreWeaveAccount) GetId() uuid.UUID { return v.Id }

// GetNamespace returns RepoCommonClusterCwAccountCoreWeaveAccount.Namespace, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterCwAccountCoreWeaveAccount) GetNamespace() *string { return v.Namespace }

// RepoCommonClusterDoAccountDOAccount includes the requested fields of the GraphQL type DOAccount.
type RepoCommonClusterDoAccountDOAccount struct {
	Id                uuid.UUID `json:"id"`
	AccessTokenPrefix *string   `json:"accessTokenPrefix"`
}

// GetId returns RepoCommonClusterDoAccountDOAccount.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterDoAccountDOAccount) GetId() uuid.UUID { return v.Id }

// GetAccessTokenPrefix returns RepoCommonClusterDoAccountDOAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterDoAccountDOAccount) GetAccessTokenPrefix() *string {
	return v.AccessTokenPrefix
}

// RepoCommonClusterGcpAccountGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type RepoCommonClusterGcpAccountGCPAccount struct {
	Id        uuid.UUID `json:"id"`
	ProjectID *string   `json:"projectID"`
}

// GetId returns RepoCommonClusterGcpAccountGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterGcpAccountGCPAccount) GetId() uuid.UUID { return v.Id }

// GetProjectID returns RepoCommonClusterGcpAccountGCPAccount.ProjectID, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterGcpAccountGCPAccount) GetProjectID() *string { return v.ProjectID }

// RepoCommonClusterLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type RepoCommonClusterLinodeAccount struct {
	Id                uuid.UUID `json:"id"`
	AccessTokenPrefix *string   `json:"accessTokenPrefix"`
}

// GetId returns RepoCommonClusterLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterLinodeAccount) GetId() uuid.UUID { return v.Id }

// GetAccessTokenPrefix returns RepoCommonClusterLinodeAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterLinodeAccount) GetAccessTokenPrefix() *string { return v.AccessTokenPrefix }

// RepoCommonClusterVultrAccount includes the requested fields of the GraphQL type VultrAccount.
type RepoCommonClusterVultrAccount struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns RepoCommonClusterVultrAccount.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterVultrAccount) GetId() uuid.UUID { return v.Id }

// GetName returns RepoCommonClusterVultrAccount.Name, and is useful for accessing the field via an interface.
func (v *RepoCommonClusterVultrAccount) GetName() string { return v.Name }

// RepoCommonGcpAccountGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type RepoCommonGcpAccountGCPAccount struct {
	Id        uuid.UUID `json:"id"`
	ProjectID *string   `json:"projectID"`
}

// GetId returns RepoCommonGcpAccountGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonGcpAccountGCPAccount) GetId() uuid.UUID { return v.Id }

// GetProjectID returns RepoCommonGcpAccountGCPAccount.ProjectID, and is useful for accessing the field via an interface.
func (v *RepoCommonGcpAccountGCPAccount) GetProjectID() *string { return v.ProjectID }

// RepoCommonGpuGPUSpec includes the requested fields of the GraphQL type GPUSpec.
type RepoCommonGpuGPUSpec struct {
	Type  *string `json:"type"`
	Count int     `json:"count"`
}

// GetType returns RepoCommonGpuGPUSpec.Type, and is useful for accessing the field via an interface.
func (v *RepoCommonGpuGPUSpec) GetType() *string { return v.Type }

// GetCount returns RepoCommonGpuGPUSpec.Count, and is useful for accessing the field via an interface.
func (v *RepoCommonGpuGPUSpec) GetCount() int { return v.Count }

// RepoCommonOwnerUser includes the requested fields of the GraphQL type User.
type RepoCommonOwnerUser struct {
	Id               uuid.UUID `json:"id"`
	UserPublicCommon `json:"-"`
	Advanced         *bool `json:"advanced"`
}

// GetId returns RepoCommonOwnerUser.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonOwnerUser) GetId() uuid.UUID { return v.Id }

// GetAdvanced returns RepoCommonOwnerUser.Advanced, and is useful for accessing the field via an interface.
func (v *RepoCommonOwnerUser) GetAdvanced() *bool { return v.Advanced }

// GetName returns RepoCommonOwnerUser.Name, and is useful for accessing the field via an interface.
func (v *RepoCommonOwnerUser) GetName() string { return v.UserPublicCommon.Name }

// GetLogin returns RepoCommonOwnerUser.Login, and is useful for accessing the field via an interface.
func (v *RepoCommonOwnerUser) GetLogin() string { return v.UserPublicCommon.Login }

// GetAvatar returns RepoCommonOwnerUser.Avatar, and is useful for accessing the field via an interface.
func (v *RepoCommonOwnerUser) GetAvatar() *string { return v.UserPublicCommon.Avatar }

// GetIsTeam returns RepoCommonOwnerUser.IsTeam, and is useful for accessing the field via an interface.
func (v *RepoCommonOwnerUser) GetIsTeam() *bool { return v.UserPublicCommon.IsTeam }

func (v *RepoCommonOwnerUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoCommonOwnerUser
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoCommonOwnerUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserPublicCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoCommonOwnerUser struct {
	Id uuid.UUID `json:"id"`

	Advanced *bool `json:"advanced"`

	Name string `json:"name"`

	Login string `json:"login"`

	Avatar *string `json:"avatar"`

	IsTeam *bool `json:"isTeam"`
}

func (v *RepoCommonOwnerUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoCommonOwnerUser) __premarshalJSON() (*__premarshalRepoCommonOwnerUser, error) {
	var retval __premarshalRepoCommonOwnerUser

	retval.Id = v.Id
	retval.Advanced = v.Advanced
	retval.Name = v.UserPublicCommon.Name
	retval.Login = v.UserPublicCommon.Login
	retval.Avatar = v.UserPublicCommon.Avatar
	retval.IsTeam = v.UserPublicCommon.IsTeam
	return &retval, nil
}

// RepoCommonProject includes the requested fields of the GraphQL type Project.
type RepoCommonProject struct {
	// - v0.ProjectID or v1.GroupID
	Id           uuid.UUID `json:"id"`
	ProjectBasic `json:"-"`
}

// GetId returns RepoCommonProject.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonProject) GetId() uuid.UUID { return v.Id }

// GetName returns RepoCommonProject.Name, and is useful for accessing the field via an interface.
func (v *RepoCommonProject) GetName() string { return v.ProjectBasic.Name }

// GetOwner returns RepoCommonProject.Owner, and is useful for accessing the field via an interface.
func (v *RepoCommonProject) GetOwner() ProjectBasicOwnerUser { return v.ProjectBasic.Owner }

func (v *RepoCommonProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoCommonProject
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoCommonProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoCommonProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Owner ProjectBasicOwnerUser `json:"owner"`
}

func (v *RepoCommonProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoCommonProject) __premarshalJSON() (*__premarshalRepoCommonProject, error) {
	var retval __premarshalRepoCommonProject

	retval.Id = v.Id
	retval.Name = v.ProjectBasic.Name
	retval.Owner = v.ProjectBasic.Owner
	return &retval, nil
}

// RepoCommonProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type RepoCommonProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id                      uuid.UUID `json:"id"`
	ProjectEnvironmentBasic `json:"-"`
}

// GetId returns RepoCommonProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns RepoCommonProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *RepoCommonProjectEnvironment) GetName() string { return v.ProjectEnvironmentBasic.Name }

func (v *RepoCommonProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoCommonProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoCommonProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectEnvironmentBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoCommonProjectEnvironment struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *RepoCommonProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoCommonProjectEnvironment) __premarshalJSON() (*__premarshalRepoCommonProjectEnvironment, error) {
	var retval __premarshalRepoCommonProjectEnvironment

	retval.Id = v.Id
	retval.Name = v.ProjectEnvironmentBasic.Name
	return &retval, nil
}

// RepoCommonSourceRepoSource includes the requested fields of the GraphQL type RepoSource.
type RepoCommonSourceRepoSource struct {
	Id   uuid.UUID      `json:"id"`
	Type RepoSourceType `json:"type"`
	Name string         `json:"name"`
}

// GetId returns RepoCommonSourceRepoSource.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonSourceRepoSource) GetId() uuid.UUID { return v.Id }

// GetType returns RepoCommonSourceRepoSource.Type, and is useful for accessing the field via an interface.
func (v *RepoCommonSourceRepoSource) GetType() RepoSourceType { return v.Type }

// GetName returns RepoCommonSourceRepoSource.Name, and is useful for accessing the field via an interface.
func (v *RepoCommonSourceRepoSource) GetName() string { return v.Name }

// RepoCommonTpuTPUSpec includes the requested fields of the GraphQL type TPUSpec.
type RepoCommonTpuTPUSpec struct {
	TfVersion string `json:"tfVersion"`
	Type      string `json:"type"`
	Cores     int    `json:"cores"`
}

// GetTfVersion returns RepoCommonTpuTPUSpec.TfVersion, and is useful for accessing the field via an interface.
func (v *RepoCommonTpuTPUSpec) GetTfVersion() string { return v.TfVersion }

// GetType returns RepoCommonTpuTPUSpec.Type, and is useful for accessing the field via an interface.
func (v *RepoCommonTpuTPUSpec) GetType() string { return v.Type }

// GetCores returns RepoCommonTpuTPUSpec.Cores, and is useful for accessing the field via an interface.
func (v *RepoCommonTpuTPUSpec) GetCores() int { return v.Cores }

// RepoCommonWithDB includes the GraphQL fields of Repo requested by the fragment RepoCommonWithDB.
type RepoCommonWithDB struct {
	// - v0.RepoID
	Id               uuid.UUID `json:"id"`
	RepoCommon       `json:"-"`
	DatabaseProvider *DatabaseProviderType                        `json:"databaseProvider"`
	DatabaseEngine   *DatabaseEngineType                          `json:"databaseEngine"`
	DatabaseVersion  *string                                      `json:"databaseVersion"`
	DatabaseLinks    []RepoCommonWithDBDatabaseLinksDatabaseLink  `json:"databaseLinks"`
	LinkedProjects   []RepoCommonWithDBLinkedProjectsDatabaseLink `json:"linkedProjects"`
}

// GetId returns RepoCommonWithDB.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetId() uuid.UUID { return v.Id }

// GetDatabaseProvider returns RepoCommonWithDB.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetDatabaseProvider() *DatabaseProviderType { return v.DatabaseProvider }

// GetDatabaseEngine returns RepoCommonWithDB.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetDatabaseEngine() *DatabaseEngineType { return v.DatabaseEngine }

// GetDatabaseVersion returns RepoCommonWithDB.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetDatabaseVersion() *string { return v.DatabaseVersion }

// GetDatabaseLinks returns RepoCommonWithDB.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetDatabaseLinks() []RepoCommonWithDBDatabaseLinksDatabaseLink {
	return v.DatabaseLinks
}

// GetLinkedProjects returns RepoCommonWithDB.LinkedProjects, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetLinkedProjects() []RepoCommonWithDBLinkedProjectsDatabaseLink {
	return v.LinkedProjects
}

// GetPath returns RepoCommonWithDB.Path, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetPath() string { return v.RepoCommon.Path }

// GetName returns RepoCommonWithDB.Name, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetName() string { return v.RepoCommon.Name }

// GetEnabled returns RepoCommonWithDB.Enabled, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetEnabled() bool { return v.RepoCommon.Enabled }

// GetSource returns RepoCommonWithDB.Source, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetSource() RepoCommonSourceRepoSource { return v.RepoCommon.Source }

// GetDeployTarget returns RepoCommonWithDB.DeployTarget, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetDeployTarget() *DeployTarget { return v.RepoCommon.DeployTarget }

// GetDeployType returns RepoCommonWithDB.DeployType, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetDeployType() *DeployType { return v.RepoCommon.DeployType }

// GetDeployService returns RepoCommonWithDB.DeployService, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetDeployService() *bool { return v.RepoCommon.DeployService }

// GetDeployJob returns RepoCommonWithDB.DeployJob, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetDeployJob() *bool { return v.RepoCommon.DeployJob }

// GetAwsAccount returns RepoCommonWithDB.AwsAccount, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns RepoCommonWithDB.GcpAccount, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns RepoCommonWithDB.Image, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetImage() *string { return v.RepoCommon.Image }

// GetCpu returns RepoCommonWithDB.Cpu, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetCpu() *string { return v.RepoCommon.Cpu }

// GetMemory returns RepoCommonWithDB.Memory, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetMemory() *string { return v.RepoCommon.Memory }

// GetGpu returns RepoCommonWithDB.Gpu, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetGpu() *RepoCommonGpuGPUSpec { return v.RepoCommon.Gpu }

// GetTpu returns RepoCommonWithDB.Tpu, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetTpu() *RepoCommonTpuTPUSpec { return v.RepoCommon.Tpu }

// GetUpdatedAt returns RepoCommonWithDB.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetUpdatedAt() time.Time { return v.RepoCommon.UpdatedAt }

// GetDisableReason returns RepoCommonWithDB.DisableReason, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetDisableReason() *DisableReason { return v.RepoCommon.DisableReason }

// GetCluster returns RepoCommonWithDB.Cluster, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetCluster() *RepoCommonCluster { return v.RepoCommon.Cluster }

// GetAutoscaling returns RepoCommonWithDB.Autoscaling, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetAutoscaling() *RepoCommonAutoscaling { return v.RepoCommon.Autoscaling }

// GetOwner returns RepoCommonWithDB.Owner, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetOwner() RepoCommonOwnerUser { return v.RepoCommon.Owner }

// GetProject returns RepoCommonWithDB.Project, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetProject() *RepoCommonProject { return v.RepoCommon.Project }

// GetProjectEnvironment returns RepoCommonWithDB.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDB) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *RepoCommonWithDB) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoCommonWithDB
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoCommonWithDB = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoCommonWithDB struct {
	Id uuid.UUID `json:"id"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseLinks []RepoCommonWithDBDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoCommonWithDBLinkedProjectsDatabaseLink `json:"linkedProjects"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *RepoCommonWithDB) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoCommonWithDB) __premarshalJSON() (*__premarshalRepoCommonWithDB, error) {
	var retval __premarshalRepoCommonWithDB

	retval.Id = v.Id
	retval.DatabaseProvider = v.DatabaseProvider
	retval.DatabaseEngine = v.DatabaseEngine
	retval.DatabaseVersion = v.DatabaseVersion
	retval.DatabaseLinks = v.DatabaseLinks
	retval.LinkedProjects = v.LinkedProjects
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// RepoCommonWithDBDatabaseLinksDatabaseLink includes the requested fields of the GraphQL type DatabaseLink.
type RepoCommonWithDBDatabaseLinksDatabaseLink struct {
	Id        uuid.UUID                                             `json:"id"`
	EnvPrefix *string                                               `json:"envPrefix"`
	Envs      []RepoCommonWithDBDatabaseLinksDatabaseLinkEnvsEnvVar `json:"envs"`
	Database  RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo `json:"database"`
}

// GetId returns RepoCommonWithDBDatabaseLinksDatabaseLink.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLink) GetId() uuid.UUID { return v.Id }

// GetEnvPrefix returns RepoCommonWithDBDatabaseLinksDatabaseLink.EnvPrefix, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLink) GetEnvPrefix() *string { return v.EnvPrefix }

// GetEnvs returns RepoCommonWithDBDatabaseLinksDatabaseLink.Envs, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLink) GetEnvs() []RepoCommonWithDBDatabaseLinksDatabaseLinkEnvsEnvVar {
	return v.Envs
}

// GetDatabase returns RepoCommonWithDBDatabaseLinksDatabaseLink.Database, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLink) GetDatabase() RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo {
	return v.Database
}

// RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo includes the requested fields of the GraphQL type Repo.
type RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo struct {
	RepoCommon `json:"-"`
}

// GetId returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetId() uuid.UUID {
	return v.RepoCommon.Id
}

// GetPath returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Path, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetPath() string {
	return v.RepoCommon.Path
}

// GetName returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Name, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetName() string {
	return v.RepoCommon.Name
}

// GetEnabled returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Enabled, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetEnabled() bool {
	return v.RepoCommon.Enabled
}

// GetSource returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Source, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoCommon.Source
}

// GetDeployTarget returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetDeployTarget() *DeployTarget {
	return v.RepoCommon.DeployTarget
}

// GetDeployType returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.DeployType, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetDeployType() *DeployType {
	return v.RepoCommon.DeployType
}

// GetDeployService returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.DeployService, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetDeployService() *bool {
	return v.RepoCommon.DeployService
}

// GetDeployJob returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetDeployJob() *bool {
	return v.RepoCommon.DeployJob
}

// GetAwsAccount returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Image, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetImage() *string {
	return v.RepoCommon.Image
}

// GetCpu returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Cpu, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetCpu() *string {
	return v.RepoCommon.Cpu
}

// GetMemory returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Memory, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetMemory() *string {
	return v.RepoCommon.Memory
}

// GetGpu returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Gpu, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoCommon.Gpu
}

// GetTpu returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Tpu, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoCommon.Tpu
}

// GetUpdatedAt returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetUpdatedAt() time.Time {
	return v.RepoCommon.UpdatedAt
}

// GetDisableReason returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetDisableReason() *DisableReason {
	return v.RepoCommon.DisableReason
}

// GetCluster returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Cluster, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetCluster() *RepoCommonCluster {
	return v.RepoCommon.Cluster
}

// GetDatabaseProvider returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCommon.Autoscaling
}

// GetOwner returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Owner, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoCommon.Owner
}

// GetProject returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.Project, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetProject() *RepoCommonProject {
	return v.RepoCommon.Project
}

// GetProjectEnvironment returns RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo struct {
	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo) __premarshalJSON() (*__premarshalRepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo, error) {
	var retval __premarshalRepoCommonWithDBDatabaseLinksDatabaseLinkDatabaseRepo

	retval.Id = v.RepoCommon.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// RepoCommonWithDBDatabaseLinksDatabaseLinkEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type RepoCommonWithDBDatabaseLinksDatabaseLinkEnvsEnvVar struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns RepoCommonWithDBDatabaseLinksDatabaseLinkEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns RepoCommonWithDBDatabaseLinksDatabaseLinkEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBDatabaseLinksDatabaseLinkEnvsEnvVar) GetValue() string { return v.Value }

// RepoCommonWithDBLinkedProjectsDatabaseLink includes the requested fields of the GraphQL type DatabaseLink.
type RepoCommonWithDBLinkedProjectsDatabaseLink struct {
	Id        uuid.UUID                                      `json:"id"`
	EnvPrefix *string                                        `json:"envPrefix"`
	Repo      RepoCommonWithDBLinkedProjectsDatabaseLinkRepo `json:"repo"`
}

// GetId returns RepoCommonWithDBLinkedProjectsDatabaseLink.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLink) GetId() uuid.UUID { return v.Id }

// GetEnvPrefix returns RepoCommonWithDBLinkedProjectsDatabaseLink.EnvPrefix, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLink) GetEnvPrefix() *string { return v.EnvPrefix }

// GetRepo returns RepoCommonWithDBLinkedProjectsDatabaseLink.Repo, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLink) GetRepo() RepoCommonWithDBLinkedProjectsDatabaseLinkRepo {
	return v.Repo
}

// RepoCommonWithDBLinkedProjectsDatabaseLinkRepo includes the requested fields of the GraphQL type Repo.
type RepoCommonWithDBLinkedProjectsDatabaseLinkRepo struct {
	RepoCommon `json:"-"`
}

// GetId returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Id, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetId() uuid.UUID { return v.RepoCommon.Id }

// GetPath returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Path, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetPath() string { return v.RepoCommon.Path }

// GetName returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Name, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetName() string { return v.RepoCommon.Name }

// GetEnabled returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Enabled, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetEnabled() bool {
	return v.RepoCommon.Enabled
}

// GetSource returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Source, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoCommon.Source
}

// GetDeployTarget returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetDeployTarget() *DeployTarget {
	return v.RepoCommon.DeployTarget
}

// GetDeployType returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.DeployType, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetDeployType() *DeployType {
	return v.RepoCommon.DeployType
}

// GetDeployService returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.DeployService, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetDeployService() *bool {
	return v.RepoCommon.DeployService
}

// GetDeployJob returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetDeployJob() *bool {
	return v.RepoCommon.DeployJob
}

// GetAwsAccount returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Image, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetImage() *string {
	return v.RepoCommon.Image
}

// GetCpu returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Cpu, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetCpu() *string { return v.RepoCommon.Cpu }

// GetMemory returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Memory, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetMemory() *string {
	return v.RepoCommon.Memory
}

// GetGpu returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Gpu, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoCommon.Gpu
}

// GetTpu returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Tpu, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoCommon.Tpu
}

// GetUpdatedAt returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetUpdatedAt() time.Time {
	return v.RepoCommon.UpdatedAt
}

// GetDisableReason returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetDisableReason() *DisableReason {
	return v.RepoCommon.DisableReason
}

// GetCluster returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Cluster, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetCluster() *RepoCommonCluster {
	return v.RepoCommon.Cluster
}

// GetDatabaseProvider returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCommon.Autoscaling
}

// GetOwner returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Owner, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoCommon.Owner
}

// GetProject returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.Project, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetProject() *RepoCommonProject {
	return v.RepoCommon.Project
}

// GetProjectEnvironment returns RepoCommonWithDBLinkedProjectsDatabaseLinkRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoCommonWithDBLinkedProjectsDatabaseLinkRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoCommonWithDBLinkedProjectsDatabaseLinkRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoCommonWithDBLinkedProjectsDatabaseLinkRepo struct {
	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoCommonWithDBLinkedProjectsDatabaseLinkRepo) __premarshalJSON() (*__premarshalRepoCommonWithDBLinkedProjectsDatabaseLinkRepo, error) {
	var retval __premarshalRepoCommonWithDBLinkedProjectsDatabaseLinkRepo

	retval.Id = v.RepoCommon.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// RepoCustomization includes the GraphQL fields of Repo requested by the fragment RepoCustomization.
type RepoCustomization struct {
	RepoCommon              `json:"-"`
	KubernetesCustomization *RepoCustomizationKubernetesCustomization `json:"kubernetesCustomization"`
}

// GetKubernetesCustomization returns RepoCustomization.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetKubernetesCustomization() *RepoCustomizationKubernetesCustomization {
	return v.KubernetesCustomization
}

// GetId returns RepoCustomization.Id, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetId() uuid.UUID { return v.RepoCommon.Id }

// GetPath returns RepoCustomization.Path, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetPath() string { return v.RepoCommon.Path }

// GetName returns RepoCustomization.Name, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetName() string { return v.RepoCommon.Name }

// GetEnabled returns RepoCustomization.Enabled, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetEnabled() bool { return v.RepoCommon.Enabled }

// GetSource returns RepoCustomization.Source, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetSource() RepoCommonSourceRepoSource { return v.RepoCommon.Source }

// GetDeployTarget returns RepoCustomization.DeployTarget, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetDeployTarget() *DeployTarget { return v.RepoCommon.DeployTarget }

// GetDeployType returns RepoCustomization.DeployType, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetDeployType() *DeployType { return v.RepoCommon.DeployType }

// GetDeployService returns RepoCustomization.DeployService, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetDeployService() *bool { return v.RepoCommon.DeployService }

// GetDeployJob returns RepoCustomization.DeployJob, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetDeployJob() *bool { return v.RepoCommon.DeployJob }

// GetAwsAccount returns RepoCustomization.AwsAccount, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns RepoCustomization.GcpAccount, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns RepoCustomization.Image, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetImage() *string { return v.RepoCommon.Image }

// GetCpu returns RepoCustomization.Cpu, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetCpu() *string { return v.RepoCommon.Cpu }

// GetMemory returns RepoCustomization.Memory, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetMemory() *string { return v.RepoCommon.Memory }

// GetGpu returns RepoCustomization.Gpu, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetGpu() *RepoCommonGpuGPUSpec { return v.RepoCommon.Gpu }

// GetTpu returns RepoCustomization.Tpu, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetTpu() *RepoCommonTpuTPUSpec { return v.RepoCommon.Tpu }

// GetUpdatedAt returns RepoCustomization.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetUpdatedAt() time.Time { return v.RepoCommon.UpdatedAt }

// GetDisableReason returns RepoCustomization.DisableReason, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetDisableReason() *DisableReason { return v.RepoCommon.DisableReason }

// GetCluster returns RepoCustomization.Cluster, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetCluster() *RepoCommonCluster { return v.RepoCommon.Cluster }

// GetDatabaseProvider returns RepoCustomization.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns RepoCustomization.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns RepoCustomization.Autoscaling, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetAutoscaling() *RepoCommonAutoscaling { return v.RepoCommon.Autoscaling }

// GetOwner returns RepoCustomization.Owner, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetOwner() RepoCommonOwnerUser { return v.RepoCommon.Owner }

// GetProject returns RepoCustomization.Project, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetProject() *RepoCommonProject { return v.RepoCommon.Project }

// GetProjectEnvironment returns RepoCustomization.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *RepoCustomization) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *RepoCustomization) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoCustomization
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoCustomization = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoCustomization struct {
	KubernetesCustomization *RepoCustomizationKubernetesCustomization `json:"kubernetesCustomization"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *RepoCustomization) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoCustomization) __premarshalJSON() (*__premarshalRepoCustomization, error) {
	var retval __premarshalRepoCustomization

	retval.KubernetesCustomization = v.KubernetesCustomization
	retval.Id = v.RepoCommon.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// RepoCustomizationKubernetesCustomization includes the requested fields of the GraphQL type KubernetesCustomization.
type RepoCustomizationKubernetesCustomization struct {
	ServiceAccountName *string            `json:"serviceAccountName"`
	PodAnnotations     *map[string]string `json:"podAnnotations"`
	ServiceAnnotations *map[string]string `json:"serviceAnnotations"`
	IngressAnnotations *map[string]string `json:"ingressAnnotations"`
	PodSpecPatch       *string            `json:"podSpecPatch"`
	IngressSpecPatch   *string            `json:"ingressSpecPatch"`
}

// GetServiceAccountName returns RepoCustomizationKubernetesCustomization.ServiceAccountName, and is useful for accessing the field via an interface.
func (v *RepoCustomizationKubernetesCustomization) GetServiceAccountName() *string {
	return v.ServiceAccountName
}

// GetPodAnnotations returns RepoCustomizationKubernetesCustomization.PodAnnotations, and is useful for accessing the field via an interface.
func (v *RepoCustomizationKubernetesCustomization) GetPodAnnotations() *map[string]string {
	return v.PodAnnotations
}

// GetServiceAnnotations returns RepoCustomizationKubernetesCustomization.ServiceAnnotations, and is useful for accessing the field via an interface.
func (v *RepoCustomizationKubernetesCustomization) GetServiceAnnotations() *map[string]string {
	return v.ServiceAnnotations
}

// GetIngressAnnotations returns RepoCustomizationKubernetesCustomization.IngressAnnotations, and is useful for accessing the field via an interface.
func (v *RepoCustomizationKubernetesCustomization) GetIngressAnnotations() *map[string]string {
	return v.IngressAnnotations
}

// GetPodSpecPatch returns RepoCustomizationKubernetesCustomization.PodSpecPatch, and is useful for accessing the field via an interface.
func (v *RepoCustomizationKubernetesCustomization) GetPodSpecPatch() *string { return v.PodSpecPatch }

// GetIngressSpecPatch returns RepoCustomizationKubernetesCustomization.IngressSpecPatch, and is useful for accessing the field via an interface.
func (v *RepoCustomizationKubernetesCustomization) GetIngressSpecPatch() *string {
	return v.IngressSpecPatch
}

// RepoDeploy includes the GraphQL fields of Repo requested by the fragment RepoDeploy.
type RepoDeploy struct {
	// - v0.RepoID
	Id           uuid.UUID `json:"id"`
	RepoCommon   `json:"-"`
	CanDeploy    *bool         `json:"canDeploy"`
	DeployTarget *DeployTarget `json:"deployTarget"`
}

// GetId returns RepoDeploy.Id, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetId() uuid.UUID { return v.Id }

// GetCanDeploy returns RepoDeploy.CanDeploy, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetCanDeploy() *bool { return v.CanDeploy }

// GetDeployTarget returns RepoDeploy.DeployTarget, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetDeployTarget() *DeployTarget { return v.DeployTarget }

// GetPath returns RepoDeploy.Path, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetPath() string { return v.RepoCommon.Path }

// GetName returns RepoDeploy.Name, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetName() string { return v.RepoCommon.Name }

// GetEnabled returns RepoDeploy.Enabled, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetEnabled() bool { return v.RepoCommon.Enabled }

// GetSource returns RepoDeploy.Source, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetSource() RepoCommonSourceRepoSource { return v.RepoCommon.Source }

// GetDeployType returns RepoDeploy.DeployType, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetDeployType() *DeployType { return v.RepoCommon.DeployType }

// GetDeployService returns RepoDeploy.DeployService, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetDeployService() *bool { return v.RepoCommon.DeployService }

// GetDeployJob returns RepoDeploy.DeployJob, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetDeployJob() *bool { return v.RepoCommon.DeployJob }

// GetAwsAccount returns RepoDeploy.AwsAccount, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetAwsAccount() *RepoCommonAwsAccountAWSAccount { return v.RepoCommon.AwsAccount }

// GetGcpAccount returns RepoDeploy.GcpAccount, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetGcpAccount() *RepoCommonGcpAccountGCPAccount { return v.RepoCommon.GcpAccount }

// GetImage returns RepoDeploy.Image, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetImage() *string { return v.RepoCommon.Image }

// GetCpu returns RepoDeploy.Cpu, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetCpu() *string { return v.RepoCommon.Cpu }

// GetMemory returns RepoDeploy.Memory, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetMemory() *string { return v.RepoCommon.Memory }

// GetGpu returns RepoDeploy.Gpu, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetGpu() *RepoCommonGpuGPUSpec { return v.RepoCommon.Gpu }

// GetTpu returns RepoDeploy.Tpu, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetTpu() *RepoCommonTpuTPUSpec { return v.RepoCommon.Tpu }

// GetUpdatedAt returns RepoDeploy.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetUpdatedAt() time.Time { return v.RepoCommon.UpdatedAt }

// GetDisableReason returns RepoDeploy.DisableReason, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetDisableReason() *DisableReason { return v.RepoCommon.DisableReason }

// GetCluster returns RepoDeploy.Cluster, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetCluster() *RepoCommonCluster { return v.RepoCommon.Cluster }

// GetDatabaseProvider returns RepoDeploy.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns RepoDeploy.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetDatabaseEngine() *DatabaseEngineType { return v.RepoCommon.DatabaseEngine }

// GetAutoscaling returns RepoDeploy.Autoscaling, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetAutoscaling() *RepoCommonAutoscaling { return v.RepoCommon.Autoscaling }

// GetOwner returns RepoDeploy.Owner, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetOwner() RepoCommonOwnerUser { return v.RepoCommon.Owner }

// GetProject returns RepoDeploy.Project, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetProject() *RepoCommonProject { return v.RepoCommon.Project }

// GetProjectEnvironment returns RepoDeploy.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *RepoDeploy) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *RepoDeploy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDeploy
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDeploy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDeploy struct {
	Id uuid.UUID `json:"id"`

	CanDeploy *bool `json:"canDeploy"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *RepoDeploy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDeploy) __premarshalJSON() (*__premarshalRepoDeploy, error) {
	var retval __premarshalRepoDeploy

	retval.Id = v.Id
	retval.CanDeploy = v.CanDeploy
	retval.DeployTarget = v.DeployTarget
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// RepoDetail includes the GraphQL fields of Repo requested by the fragment RepoDetail.
type RepoDetail struct {
	SecretMounts                   []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`
	KubernetesCustomization        *RepoDetailKubernetesCustomization            `json:"kubernetesCustomization"`
	Manifest                       *RepoDetailManifest                           `json:"manifest"`
	AppID                          *string                                       `json:"appID"`
	DefaultIngressDomain           *string                                       `json:"defaultIngressDomain"`
	KappID                         *string                                       `json:"kappID"`
	UseHumanReadableKubernetesName *bool                                         `json:"useHumanReadableKubernetesName"`
	RepoCommon                     `json:"-"`
	RepoNetwork                    `json:"-"`
	RepoBuild                      `json:"-"`
	Project                        *RepoDetailProject                                   `json:"project"`
	ProductionDeployment           *RepoDetailProductionDeployment                      `json:"productionDeployment"`
	Namespace                      *string                                              `json:"namespace"`
	Envs                           []RepoDetailEnvsEnvVar                               `json:"envs"`
	Collaborators                  []RepoDetailCollaboratorsProjectCollaborator         `json:"collaborators"`
	Volumes                        []RepoDetailVolumesVolumeSpec                        `json:"volumes"`
	Replication                    []RepoDetailReplication                              `json:"replication"`
	DeployTarget                   *DeployTarget                                        `json:"deployTarget"`
	Cluster                        *RepoDetailCluster                                   `json:"cluster"`
	AwsAccount                     *RepoDetailAwsAccountAWSAccount                      `json:"awsAccount"`
	GcpAccount                     *RepoDetailGcpAccountGCPAccount                      `json:"gcpAccount"`
	LogShipper                     *RepoDetailLogShipper                                `json:"logShipper"`
	ReadinessProbe                 *RepoDetailReadinessProbe                            `json:"readinessProbe"`
	LivenessProbe                  *RepoDetailLivenessProbe                             `json:"livenessProbe"`
	StartupProbe                   *RepoDetailStartupProbe                              `json:"startupProbe"`
	ManualDeploy                   *bool                                                `json:"manualDeploy"`
	DeployStrategy                 *DeployStrategy                                      `json:"deployStrategy"`
	Free                           *bool                                                `json:"free"`
	Cpu                            *string                                              `json:"cpu"`
	Memory                         *string                                              `json:"memory"`
	Gpu                            *RepoDetailGpuGPUSpec                                `json:"gpu"`
	Tpu                            *RepoDetailTpuTPUSpec                                `json:"tpu"`
	EphemeralStorage               *float64                                             `json:"ephemeralStorage"`
	Dedicated                      *bool                                                `json:"dedicated"`
	GithubIntegration              *RepoDetailGithubIntegrationGitHubRepoIntegration    `json:"githubIntegration"`
	GitlabIntegration              *RepoDetailGitlabIntegrationGitlabRepoIntegration    `json:"gitlabIntegration"`
	ProductionBranch               *string                                              `json:"productionBranch"`
	BranchResources                *RepoDetailBranchResourcesContainerResourcesSpec     `json:"branchResources"`
	ServerlessResources            *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`
	ServerlessRegion               *string                                              `json:"serverlessRegion"`
	PrometheusScrape               *RepoDetailPrometheusScrape                          `json:"prometheusScrape"`
	HelmValues                     *string                                              `json:"helmValues"`
	TerraformVersion               *string                                              `json:"terraformVersion"`
	TerraformVariables             *string                                              `json:"terraformVariables"`
	JobRuns                        *RepoDetailJobRunsJobRunConnection                   `json:"jobRuns"`
	DeployService                  *bool                                                `json:"deployService"`
	DeployJob                      *bool                                                `json:"deployJob"`
	PreStopSleep                   *int                                                 `json:"preStopSleep"`
	TerminationGracePeriodSeconds  *int                                                 `json:"terminationGracePeriodSeconds"`
	Autoscaling                    *RepoDetailAutoscaling                               `json:"autoscaling"`
	ContainerRegistry              *RepoDetailContainerRegistry                         `json:"containerRegistry"`
	DatabaseProvider               *DatabaseProviderType                                `json:"databaseProvider"`
	DatabaseEngine                 *DatabaseEngineType                                  `json:"databaseEngine"`
	DatabaseVersion                *string                                              `json:"databaseVersion"`
	DatabaseEnvs                   []RepoDetailDatabaseEnvsEnvVar                       `json:"databaseEnvs"`
	DatabaseLinks                  []RepoDetailDatabaseLinksDatabaseLink                `json:"databaseLinks"`
	LinkedProjects                 []RepoDetailLinkedProjectsDatabaseLink               `json:"linkedProjects"`
	AutoRetry                      *bool                                                `json:"autoRetry"`
	AutoRollback                   *bool                                                `json:"autoRollback"`
	CanDeploy                      *bool                                                `json:"canDeploy"`
	PipelineCluster                *RepoDetailPipelineCluster                           `json:"pipelineCluster"`
	AwsIamRole                     *string                                              `json:"awsIamRole"`
	GcpServiceAccount              *string                                              `json:"gcpServiceAccount"`
	DatadogApmEnabled              *bool                                                `json:"datadogApmEnabled"`
	ProjectEnvironment             *RepoDetailProjectEnvironment                        `json:"projectEnvironment"`
	PipelineLinks                  []RepoDetailPipelineLinksRepoPipelineLink            `json:"pipelineLinks"`
	DeployTimeoutSeconds           *int                                                 `json:"deployTimeoutSeconds"`
}

// GetSecretMounts returns RepoDetail.SecretMounts, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.SecretMounts
}

// GetKubernetesCustomization returns RepoDetail.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.KubernetesCustomization
}

// GetManifest returns RepoDetail.Manifest, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetManifest() *RepoDetailManifest { return v.Manifest }

// GetAppID returns RepoDetail.AppID, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetAppID() *string { return v.AppID }

// GetDefaultIngressDomain returns RepoDetail.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDefaultIngressDomain() *string { return v.DefaultIngressDomain }

// GetKappID returns RepoDetail.KappID, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetKappID() *string { return v.KappID }

// GetUseHumanReadableKubernetesName returns RepoDetail.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetUseHumanReadableKubernetesName() *bool {
	return v.UseHumanReadableKubernetesName
}

// GetProject returns RepoDetail.Project, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetProject() *RepoDetailProject { return v.Project }

// GetProductionDeployment returns RepoDetail.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.ProductionDeployment
}

// GetNamespace returns RepoDetail.Namespace, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetNamespace() *string { return v.Namespace }

// GetEnvs returns RepoDetail.Envs, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetEnvs() []RepoDetailEnvsEnvVar { return v.Envs }

// GetCollaborators returns RepoDetail.Collaborators, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.Collaborators
}

// GetVolumes returns RepoDetail.Volumes, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetVolumes() []RepoDetailVolumesVolumeSpec { return v.Volumes }

// GetReplication returns RepoDetail.Replication, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetReplication() []RepoDetailReplication { return v.Replication }

// GetDeployTarget returns RepoDetail.DeployTarget, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDeployTarget() *DeployTarget { return v.DeployTarget }

// GetCluster returns RepoDetail.Cluster, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetCluster() *RepoDetailCluster { return v.Cluster }

// GetAwsAccount returns RepoDetail.AwsAccount, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetAwsAccount() *RepoDetailAwsAccountAWSAccount { return v.AwsAccount }

// GetGcpAccount returns RepoDetail.GcpAccount, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetGcpAccount() *RepoDetailGcpAccountGCPAccount { return v.GcpAccount }

// GetLogShipper returns RepoDetail.LogShipper, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetLogShipper() *RepoDetailLogShipper { return v.LogShipper }

// GetReadinessProbe returns RepoDetail.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetReadinessProbe() *RepoDetailReadinessProbe { return v.ReadinessProbe }

// GetLivenessProbe returns RepoDetail.LivenessProbe, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetLivenessProbe() *RepoDetailLivenessProbe { return v.LivenessProbe }

// GetStartupProbe returns RepoDetail.StartupProbe, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetStartupProbe() *RepoDetailStartupProbe { return v.StartupProbe }

// GetManualDeploy returns RepoDetail.ManualDeploy, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetManualDeploy() *bool { return v.ManualDeploy }

// GetDeployStrategy returns RepoDetail.DeployStrategy, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDeployStrategy() *DeployStrategy { return v.DeployStrategy }

// GetFree returns RepoDetail.Free, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetFree() *bool { return v.Free }

// GetCpu returns RepoDetail.Cpu, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetCpu() *string { return v.Cpu }

// GetMemory returns RepoDetail.Memory, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetMemory() *string { return v.Memory }

// GetGpu returns RepoDetail.Gpu, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetGpu() *RepoDetailGpuGPUSpec { return v.Gpu }

// GetTpu returns RepoDetail.Tpu, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetTpu() *RepoDetailTpuTPUSpec { return v.Tpu }

// GetEphemeralStorage returns RepoDetail.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetEphemeralStorage() *float64 { return v.EphemeralStorage }

// GetDedicated returns RepoDetail.Dedicated, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDedicated() *bool { return v.Dedicated }

// GetGithubIntegration returns RepoDetail.GithubIntegration, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.GithubIntegration
}

// GetGitlabIntegration returns RepoDetail.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.GitlabIntegration
}

// GetProductionBranch returns RepoDetail.ProductionBranch, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetProductionBranch() *string { return v.ProductionBranch }

// GetBranchResources returns RepoDetail.BranchResources, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.BranchResources
}

// GetServerlessResources returns RepoDetail.ServerlessResources, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.ServerlessResources
}

// GetServerlessRegion returns RepoDetail.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetServerlessRegion() *string { return v.ServerlessRegion }

// GetPrometheusScrape returns RepoDetail.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetPrometheusScrape() *RepoDetailPrometheusScrape { return v.PrometheusScrape }

// GetHelmValues returns RepoDetail.HelmValues, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetHelmValues() *string { return v.HelmValues }

// GetTerraformVersion returns RepoDetail.TerraformVersion, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetTerraformVersion() *string { return v.TerraformVersion }

// GetTerraformVariables returns RepoDetail.TerraformVariables, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetTerraformVariables() *string { return v.TerraformVariables }

// GetJobRuns returns RepoDetail.JobRuns, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetJobRuns() *RepoDetailJobRunsJobRunConnection { return v.JobRuns }

// GetDeployService returns RepoDetail.DeployService, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDeployService() *bool { return v.DeployService }

// GetDeployJob returns RepoDetail.DeployJob, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDeployJob() *bool { return v.DeployJob }

// GetPreStopSleep returns RepoDetail.PreStopSleep, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetPreStopSleep() *int { return v.PreStopSleep }

// GetTerminationGracePeriodSeconds returns RepoDetail.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetTerminationGracePeriodSeconds() *int { return v.TerminationGracePeriodSeconds }

// GetAutoscaling returns RepoDetail.Autoscaling, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetAutoscaling() *RepoDetailAutoscaling { return v.Autoscaling }

// GetContainerRegistry returns RepoDetail.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetContainerRegistry() *RepoDetailContainerRegistry { return v.ContainerRegistry }

// GetDatabaseProvider returns RepoDetail.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDatabaseProvider() *DatabaseProviderType { return v.DatabaseProvider }

// GetDatabaseEngine returns RepoDetail.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDatabaseEngine() *DatabaseEngineType { return v.DatabaseEngine }

// GetDatabaseVersion returns RepoDetail.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDatabaseVersion() *string { return v.DatabaseVersion }

// GetDatabaseEnvs returns RepoDetail.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar { return v.DatabaseEnvs }

// GetDatabaseLinks returns RepoDetail.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink { return v.DatabaseLinks }

// GetLinkedProjects returns RepoDetail.LinkedProjects, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.LinkedProjects
}

// GetAutoRetry returns RepoDetail.AutoRetry, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetAutoRetry() *bool { return v.AutoRetry }

// GetAutoRollback returns RepoDetail.AutoRollback, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetAutoRollback() *bool { return v.AutoRollback }

// GetCanDeploy returns RepoDetail.CanDeploy, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetCanDeploy() *bool { return v.CanDeploy }

// GetPipelineCluster returns RepoDetail.PipelineCluster, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetPipelineCluster() *RepoDetailPipelineCluster { return v.PipelineCluster }

// GetAwsIamRole returns RepoDetail.AwsIamRole, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetAwsIamRole() *string { return v.AwsIamRole }

// GetGcpServiceAccount returns RepoDetail.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetGcpServiceAccount() *string { return v.GcpServiceAccount }

// GetDatadogApmEnabled returns RepoDetail.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDatadogApmEnabled() *bool { return v.DatadogApmEnabled }

// GetProjectEnvironment returns RepoDetail.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.ProjectEnvironment
}

// GetPipelineLinks returns RepoDetail.PipelineLinks, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.PipelineLinks
}

// GetDeployTimeoutSeconds returns RepoDetail.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDeployTimeoutSeconds() *int { return v.DeployTimeoutSeconds }

// GetId returns RepoDetail.Id, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetId() uuid.UUID { return v.RepoCommon.Id }

// GetPath returns RepoDetail.Path, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetPath() string { return v.RepoCommon.Path }

// GetName returns RepoDetail.Name, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetName() string { return v.RepoCommon.Name }

// GetEnabled returns RepoDetail.Enabled, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetEnabled() bool { return v.RepoCommon.Enabled }

// GetSource returns RepoDetail.Source, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetSource() RepoCommonSourceRepoSource { return v.RepoCommon.Source }

// GetDeployType returns RepoDetail.DeployType, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDeployType() *DeployType { return v.RepoCommon.DeployType }

// GetImage returns RepoDetail.Image, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetImage() *string { return v.RepoCommon.Image }

// GetUpdatedAt returns RepoDetail.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetUpdatedAt() time.Time { return v.RepoCommon.UpdatedAt }

// GetDisableReason returns RepoDetail.DisableReason, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetDisableReason() *DisableReason { return v.RepoCommon.DisableReason }

// GetOwner returns RepoDetail.Owner, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetOwner() RepoCommonOwnerUser { return v.RepoCommon.Owner }

// GetClusterDomains returns RepoDetail.ClusterDomains, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoNetwork.ClusterDomains
}

// GetCdns returns RepoDetail.Cdns, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetCdns() []RepoNetworkCdnsCDN { return v.RepoNetwork.Cdns }

// GetPorts returns RepoDetail.Ports, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetPorts() []RepoNetworkPortsPort { return v.RepoNetwork.Ports }

// GetHostNetwork returns RepoDetail.HostNetwork, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetHostNetwork() *bool { return v.RepoNetwork.HostNetwork }

// GetStaticIP returns RepoDetail.StaticIP, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetStaticIP() *bool { return v.RepoNetwork.StaticIP }

// GetBuildMethod returns RepoDetail.BuildMethod, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetBuildMethod() *RepoBuildBuildMethod { return v.RepoBuild.BuildMethod }

// GetBuildResources returns RepoDetail.BuildResources, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoBuild.BuildResources
}

// GetBuildSpec returns RepoDetail.BuildSpec, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetBuildSpec() *RepoBuildBuildSpecContainerSpec { return v.RepoBuild.BuildSpec }

// GetNoBuildCache returns RepoDetail.NoBuildCache, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetNoBuildCache() *bool { return v.RepoBuild.NoBuildCache }

// GetGitSubmodules returns RepoDetail.GitSubmodules, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetGitSubmodules() *GitSubmodulesType { return v.RepoBuild.GitSubmodules }

// GetKanikoFlags returns RepoDetail.KanikoFlags, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetKanikoFlags() *RepoBuildKanikoFlags { return v.RepoBuild.KanikoFlags }

// GetAlternativeImageTagTemplates returns RepoDetail.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *RepoDetail) GetAlternativeImageTagTemplates() []string {
	return v.RepoBuild.AlternativeImageTagTemplates
}

func (v *RepoDetail) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDetail
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDetail = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.RepoNetwork)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.RepoBuild)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDetail struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *RepoDetail) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDetail) __premarshalJSON() (*__premarshalRepoDetail, error) {
	var retval __premarshalRepoDetail

	retval.SecretMounts = v.SecretMounts
	retval.KubernetesCustomization = v.KubernetesCustomization
	retval.Manifest = v.Manifest
	retval.AppID = v.AppID
	retval.DefaultIngressDomain = v.DefaultIngressDomain
	retval.KappID = v.KappID
	retval.UseHumanReadableKubernetesName = v.UseHumanReadableKubernetesName
	retval.Project = v.Project
	retval.ProductionDeployment = v.ProductionDeployment
	retval.Namespace = v.Namespace
	retval.Envs = v.Envs
	retval.Collaborators = v.Collaborators
	retval.Volumes = v.Volumes
	retval.Replication = v.Replication
	retval.DeployTarget = v.DeployTarget
	retval.Cluster = v.Cluster
	retval.AwsAccount = v.AwsAccount
	retval.GcpAccount = v.GcpAccount
	retval.LogShipper = v.LogShipper
	retval.ReadinessProbe = v.ReadinessProbe
	retval.LivenessProbe = v.LivenessProbe
	retval.StartupProbe = v.StartupProbe
	retval.ManualDeploy = v.ManualDeploy
	retval.DeployStrategy = v.DeployStrategy
	retval.Free = v.Free
	retval.Cpu = v.Cpu
	retval.Memory = v.Memory
	retval.Gpu = v.Gpu
	retval.Tpu = v.Tpu
	retval.EphemeralStorage = v.EphemeralStorage
	retval.Dedicated = v.Dedicated
	retval.GithubIntegration = v.GithubIntegration
	retval.GitlabIntegration = v.GitlabIntegration
	retval.ProductionBranch = v.ProductionBranch
	retval.BranchResources = v.BranchResources
	retval.ServerlessResources = v.ServerlessResources
	retval.ServerlessRegion = v.ServerlessRegion
	retval.PrometheusScrape = v.PrometheusScrape
	retval.HelmValues = v.HelmValues
	retval.TerraformVersion = v.TerraformVersion
	retval.TerraformVariables = v.TerraformVariables
	retval.JobRuns = v.JobRuns
	retval.DeployService = v.DeployService
	retval.DeployJob = v.DeployJob
	retval.PreStopSleep = v.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.TerminationGracePeriodSeconds
	retval.Autoscaling = v.Autoscaling
	retval.ContainerRegistry = v.ContainerRegistry
	retval.DatabaseProvider = v.DatabaseProvider
	retval.DatabaseEngine = v.DatabaseEngine
	retval.DatabaseVersion = v.DatabaseVersion
	retval.DatabaseEnvs = v.DatabaseEnvs
	retval.DatabaseLinks = v.DatabaseLinks
	retval.LinkedProjects = v.LinkedProjects
	retval.AutoRetry = v.AutoRetry
	retval.AutoRollback = v.AutoRollback
	retval.CanDeploy = v.CanDeploy
	retval.PipelineCluster = v.PipelineCluster
	retval.AwsIamRole = v.AwsIamRole
	retval.GcpServiceAccount = v.GcpServiceAccount
	retval.DatadogApmEnabled = v.DatadogApmEnabled
	retval.ProjectEnvironment = v.ProjectEnvironment
	retval.PipelineLinks = v.PipelineLinks
	retval.DeployTimeoutSeconds = v.DeployTimeoutSeconds
	retval.Id = v.RepoCommon.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployType = v.RepoCommon.DeployType
	retval.Image = v.RepoCommon.Image
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Owner = v.RepoCommon.Owner
	retval.ClusterDomains = v.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoNetwork.Cdns
	retval.Ports = v.RepoNetwork.Ports
	retval.HostNetwork = v.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// RepoDetailAutoscaling includes the requested fields of the GraphQL type Autoscaling.
type RepoDetailAutoscaling struct {
	KedaScaledObjectSpec *string                                           `json:"kedaScaledObjectSpec"`
	MinReplicas          int                                               `json:"minReplicas"`
	MaxReplicas          int                                               `json:"maxReplicas"`
	CoolDownPeriod       *int                                              `json:"coolDownPeriod"`
	Triggers             []RepoDetailAutoscalingTriggersAutoscalingTrigger `json:"triggers"`
}

// GetKedaScaledObjectSpec returns RepoDetailAutoscaling.KedaScaledObjectSpec, and is useful for accessing the field via an interface.
func (v *RepoDetailAutoscaling) GetKedaScaledObjectSpec() *string { return v.KedaScaledObjectSpec }

// GetMinReplicas returns RepoDetailAutoscaling.MinReplicas, and is useful for accessing the field via an interface.
func (v *RepoDetailAutoscaling) GetMinReplicas() int { return v.MinReplicas }

// GetMaxReplicas returns RepoDetailAutoscaling.MaxReplicas, and is useful for accessing the field via an interface.
func (v *RepoDetailAutoscaling) GetMaxReplicas() int { return v.MaxReplicas }

// GetCoolDownPeriod returns RepoDetailAutoscaling.CoolDownPeriod, and is useful for accessing the field via an interface.
func (v *RepoDetailAutoscaling) GetCoolDownPeriod() *int { return v.CoolDownPeriod }

// GetTriggers returns RepoDetailAutoscaling.Triggers, and is useful for accessing the field via an interface.
func (v *RepoDetailAutoscaling) GetTriggers() []RepoDetailAutoscalingTriggersAutoscalingTrigger {
	return v.Triggers
}

// RepoDetailAutoscalingTriggersAutoscalingTrigger includes the requested fields of the GraphQL type AutoscalingTrigger.
type RepoDetailAutoscalingTriggersAutoscalingTrigger struct {
	Type AutoscalingType `json:"type"`
	Spec string          `json:"spec"`
}

// GetType returns RepoDetailAutoscalingTriggersAutoscalingTrigger.Type, and is useful for accessing the field via an interface.
func (v *RepoDetailAutoscalingTriggersAutoscalingTrigger) GetType() AutoscalingType { return v.Type }

// GetSpec returns RepoDetailAutoscalingTriggersAutoscalingTrigger.Spec, and is useful for accessing the field via an interface.
func (v *RepoDetailAutoscalingTriggersAutoscalingTrigger) GetSpec() string { return v.Spec }

// RepoDetailAwsAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type RepoDetailAwsAccountAWSAccount struct {
	Id        uuid.UUID `json:"id"`
	AccountID *string   `json:"accountID"`
}

// GetId returns RepoDetailAwsAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailAwsAccountAWSAccount) GetId() uuid.UUID { return v.Id }

// GetAccountID returns RepoDetailAwsAccountAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *RepoDetailAwsAccountAWSAccount) GetAccountID() *string { return v.AccountID }

// RepoDetailBranchResourcesContainerResourcesSpec includes the requested fields of the GraphQL type ContainerResourcesSpec.
type RepoDetailBranchResourcesContainerResourcesSpec struct {
	Resources `json:"-"`
}

// GetCpu returns RepoDetailBranchResourcesContainerResourcesSpec.Cpu, and is useful for accessing the field via an interface.
func (v *RepoDetailBranchResourcesContainerResourcesSpec) GetCpu() *float64 { return v.Resources.Cpu }

// GetMemory returns RepoDetailBranchResourcesContainerResourcesSpec.Memory, and is useful for accessing the field via an interface.
func (v *RepoDetailBranchResourcesContainerResourcesSpec) GetMemory() *float64 {
	return v.Resources.Memory
}

// GetEphemeralStorage returns RepoDetailBranchResourcesContainerResourcesSpec.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *RepoDetailBranchResourcesContainerResourcesSpec) GetEphemeralStorage() *float64 {
	return v.Resources.EphemeralStorage
}

// GetSpot returns RepoDetailBranchResourcesContainerResourcesSpec.Spot, and is useful for accessing the field via an interface.
func (v *RepoDetailBranchResourcesContainerResourcesSpec) GetSpot() *bool { return v.Resources.Spot }

// GetAccelerator returns RepoDetailBranchResourcesContainerResourcesSpec.Accelerator, and is useful for accessing the field via an interface.
func (v *RepoDetailBranchResourcesContainerResourcesSpec) GetAccelerator() *ResourcesAcceleratorAcceleratorSpec {
	return v.Resources.Accelerator
}

func (v *RepoDetailBranchResourcesContainerResourcesSpec) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDetailBranchResourcesContainerResourcesSpec
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDetailBranchResourcesContainerResourcesSpec = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Resources)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDetailBranchResourcesContainerResourcesSpec struct {
	Cpu *float64 `json:"cpu"`

	Memory *float64 `json:"memory"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Spot *bool `json:"spot"`

	Accelerator *ResourcesAcceleratorAcceleratorSpec `json:"accelerator"`
}

func (v *RepoDetailBranchResourcesContainerResourcesSpec) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDetailBranchResourcesContainerResourcesSpec) __premarshalJSON() (*__premarshalRepoDetailBranchResourcesContainerResourcesSpec, error) {
	var retval __premarshalRepoDetailBranchResourcesContainerResourcesSpec

	retval.Cpu = v.Resources.Cpu
	retval.Memory = v.Resources.Memory
	retval.EphemeralStorage = v.Resources.EphemeralStorage
	retval.Spot = v.Resources.Spot
	retval.Accelerator = v.Resources.Accelerator
	return &retval, nil
}

// RepoDetailCluster includes the requested fields of the GraphQL type Cluster.
type RepoDetailCluster struct {
	Id              uuid.UUID        `json:"id"`
	Name            string           `json:"name"`
	Region          *string          `json:"region"`
	IngressIP       *string          `json:"ingressIP"`
	Connected       *bool            `json:"connected"`
	StaticIPs       []string         `json:"staticIPs"`
	CloudProvider   *CloudProvider   `json:"cloudProvider"`
	ClusterProvider *ClusterProvider `json:"clusterProvider"`
}

// GetId returns RepoDetailCluster.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailCluster) GetId() uuid.UUID { return v.Id }

// GetName returns RepoDetailCluster.Name, and is useful for accessing the field via an interface.
func (v *RepoDetailCluster) GetName() string { return v.Name }

// GetRegion returns RepoDetailCluster.Region, and is useful for accessing the field via an interface.
func (v *RepoDetailCluster) GetRegion() *string { return v.Region }

// GetIngressIP returns RepoDetailCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *RepoDetailCluster) GetIngressIP() *string { return v.IngressIP }

// GetConnected returns RepoDetailCluster.Connected, and is useful for accessing the field via an interface.
func (v *RepoDetailCluster) GetConnected() *bool { return v.Connected }

// GetStaticIPs returns RepoDetailCluster.StaticIPs, and is useful for accessing the field via an interface.
func (v *RepoDetailCluster) GetStaticIPs() []string { return v.StaticIPs }

// GetCloudProvider returns RepoDetailCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *RepoDetailCluster) GetCloudProvider() *CloudProvider { return v.CloudProvider }

// GetClusterProvider returns RepoDetailCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *RepoDetailCluster) GetClusterProvider() *ClusterProvider { return v.ClusterProvider }

// RepoDetailCollaboratorsProjectCollaborator includes the requested fields of the GraphQL type ProjectCollaborator.
type RepoDetailCollaboratorsProjectCollaborator struct {
	Id                 uuid.UUID `json:"id"`
	CollaboratorCommon `json:"-"`
}

// GetId returns RepoDetailCollaboratorsProjectCollaborator.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailCollaboratorsProjectCollaborator) GetId() uuid.UUID { return v.Id }

// GetUser returns RepoDetailCollaboratorsProjectCollaborator.User, and is useful for accessing the field via an interface.
func (v *RepoDetailCollaboratorsProjectCollaborator) GetUser() CollaboratorCommonUser {
	return v.CollaboratorCommon.User
}

// GetRole returns RepoDetailCollaboratorsProjectCollaborator.Role, and is useful for accessing the field via an interface.
func (v *RepoDetailCollaboratorsProjectCollaborator) GetRole() ProjectCollaboratorRole {
	return v.CollaboratorCommon.Role
}

func (v *RepoDetailCollaboratorsProjectCollaborator) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDetailCollaboratorsProjectCollaborator
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDetailCollaboratorsProjectCollaborator = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CollaboratorCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDetailCollaboratorsProjectCollaborator struct {
	Id uuid.UUID `json:"id"`

	User CollaboratorCommonUser `json:"user"`

	Role ProjectCollaboratorRole `json:"role"`
}

func (v *RepoDetailCollaboratorsProjectCollaborator) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDetailCollaboratorsProjectCollaborator) __premarshalJSON() (*__premarshalRepoDetailCollaboratorsProjectCollaborator, error) {
	var retval __premarshalRepoDetailCollaboratorsProjectCollaborator

	retval.Id = v.Id
	retval.User = v.CollaboratorCommon.User
	retval.Role = v.CollaboratorCommon.Role
	return &retval, nil
}

// RepoDetailContainerRegistry includes the requested fields of the GraphQL type ContainerRegistry.
type RepoDetailContainerRegistry struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns RepoDetailContainerRegistry.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailContainerRegistry) GetId() uuid.UUID { return v.Id }

// RepoDetailDatabaseEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type RepoDetailDatabaseEnvsEnvVar struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns RepoDetailDatabaseEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns RepoDetailDatabaseEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseEnvsEnvVar) GetValue() string { return v.Value }

// RepoDetailDatabaseLinksDatabaseLink includes the requested fields of the GraphQL type DatabaseLink.
type RepoDetailDatabaseLinksDatabaseLink struct {
	Id        uuid.UUID                                       `json:"id"`
	EnvPrefix *string                                         `json:"envPrefix"`
	Envs      []RepoDetailDatabaseLinksDatabaseLinkEnvsEnvVar `json:"envs"`
	Database  RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo `json:"database"`
}

// GetId returns RepoDetailDatabaseLinksDatabaseLink.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLink) GetId() uuid.UUID { return v.Id }

// GetEnvPrefix returns RepoDetailDatabaseLinksDatabaseLink.EnvPrefix, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLink) GetEnvPrefix() *string { return v.EnvPrefix }

// GetEnvs returns RepoDetailDatabaseLinksDatabaseLink.Envs, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLink) GetEnvs() []RepoDetailDatabaseLinksDatabaseLinkEnvsEnvVar {
	return v.Envs
}

// GetDatabase returns RepoDetailDatabaseLinksDatabaseLink.Database, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLink) GetDatabase() RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo {
	return v.Database
}

// RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo includes the requested fields of the GraphQL type Repo.
type RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo struct {
	RepoCommon `json:"-"`
}

// GetId returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetId() uuid.UUID { return v.RepoCommon.Id }

// GetPath returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Path, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetPath() string { return v.RepoCommon.Path }

// GetName returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Name, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetName() string { return v.RepoCommon.Name }

// GetEnabled returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Enabled, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetEnabled() bool {
	return v.RepoCommon.Enabled
}

// GetSource returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Source, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoCommon.Source
}

// GetDeployTarget returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetDeployTarget() *DeployTarget {
	return v.RepoCommon.DeployTarget
}

// GetDeployType returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.DeployType, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetDeployType() *DeployType {
	return v.RepoCommon.DeployType
}

// GetDeployService returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.DeployService, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetDeployService() *bool {
	return v.RepoCommon.DeployService
}

// GetDeployJob returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetDeployJob() *bool {
	return v.RepoCommon.DeployJob
}

// GetAwsAccount returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Image, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetImage() *string {
	return v.RepoCommon.Image
}

// GetCpu returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Cpu, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetCpu() *string { return v.RepoCommon.Cpu }

// GetMemory returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Memory, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetMemory() *string {
	return v.RepoCommon.Memory
}

// GetGpu returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Gpu, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoCommon.Gpu
}

// GetTpu returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Tpu, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoCommon.Tpu
}

// GetUpdatedAt returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetUpdatedAt() time.Time {
	return v.RepoCommon.UpdatedAt
}

// GetDisableReason returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetDisableReason() *DisableReason {
	return v.RepoCommon.DisableReason
}

// GetCluster returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Cluster, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetCluster() *RepoCommonCluster {
	return v.RepoCommon.Cluster
}

// GetDatabaseProvider returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCommon.Autoscaling
}

// GetOwner returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Owner, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoCommon.Owner
}

// GetProject returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.Project, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetProject() *RepoCommonProject {
	return v.RepoCommon.Project
}

// GetProjectEnvironment returns RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDetailDatabaseLinksDatabaseLinkDatabaseRepo struct {
	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDetailDatabaseLinksDatabaseLinkDatabaseRepo) __premarshalJSON() (*__premarshalRepoDetailDatabaseLinksDatabaseLinkDatabaseRepo, error) {
	var retval __premarshalRepoDetailDatabaseLinksDatabaseLinkDatabaseRepo

	retval.Id = v.RepoCommon.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// RepoDetailDatabaseLinksDatabaseLinkEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type RepoDetailDatabaseLinksDatabaseLinkEnvsEnvVar struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns RepoDetailDatabaseLinksDatabaseLinkEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns RepoDetailDatabaseLinksDatabaseLinkEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *RepoDetailDatabaseLinksDatabaseLinkEnvsEnvVar) GetValue() string { return v.Value }

// RepoDetailEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type RepoDetailEnvsEnvVar struct {
	Id      uuid.UUID                   `json:"id"`
	Name    string                      `json:"name"`
	Value   string                      `json:"value"`
	Visible bool                        `json:"visible"`
	Sealed  bool                        `json:"sealed"`
	Source  *RepoDetailEnvsEnvVarSource `json:"source"`
}

// GetId returns RepoDetailEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailEnvsEnvVar) GetId() uuid.UUID { return v.Id }

// GetName returns RepoDetailEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *RepoDetailEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns RepoDetailEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *RepoDetailEnvsEnvVar) GetValue() string { return v.Value }

// GetVisible returns RepoDetailEnvsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *RepoDetailEnvsEnvVar) GetVisible() bool { return v.Visible }

// GetSealed returns RepoDetailEnvsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *RepoDetailEnvsEnvVar) GetSealed() bool { return v.Sealed }

// GetSource returns RepoDetailEnvsEnvVar.Source, and is useful for accessing the field via an interface.
func (v *RepoDetailEnvsEnvVar) GetSource() *RepoDetailEnvsEnvVarSource { return v.Source }

// RepoDetailEnvsEnvVarSource includes the requested fields of the GraphQL type EnvVarSource.
type RepoDetailEnvsEnvVarSource struct {
	Type EnvVarSourceType `json:"type"`
}

// GetType returns RepoDetailEnvsEnvVarSource.Type, and is useful for accessing the field via an interface.
func (v *RepoDetailEnvsEnvVarSource) GetType() EnvVarSourceType { return v.Type }

// RepoDetailGcpAccountGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type RepoDetailGcpAccountGCPAccount struct {
	Id        uuid.UUID `json:"id"`
	ProjectID *string   `json:"projectID"`
}

// GetId returns RepoDetailGcpAccountGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailGcpAccountGCPAccount) GetId() uuid.UUID { return v.Id }

// GetProjectID returns RepoDetailGcpAccountGCPAccount.ProjectID, and is useful for accessing the field via an interface.
func (v *RepoDetailGcpAccountGCPAccount) GetProjectID() *string { return v.ProjectID }

// RepoDetailGithubIntegrationGitHubRepoIntegration includes the requested fields of the GraphQL type GitHubRepoIntegration.
type RepoDetailGithubIntegrationGitHubRepoIntegration struct {
	Id               uuid.UUID                                                                         `json:"id"`
	GithubRepository *RepoDetailGithubIntegrationGitHubRepoIntegrationGithubRepositoryGitHubRepository `json:"githubRepository"`
	AutoDeployBranch bool                                                                              `json:"autoDeployBranch"`
	AutoStopBranch   bool                                                                              `json:"autoStopBranch"`
	BranchIgnore     string                                                                            `json:"branchIgnore"`
	BranchStopIgnore string                                                                            `json:"branchStopIgnore"`
}

// GetId returns RepoDetailGithubIntegrationGitHubRepoIntegration.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailGithubIntegrationGitHubRepoIntegration) GetId() uuid.UUID { return v.Id }

// GetGithubRepository returns RepoDetailGithubIntegrationGitHubRepoIntegration.GithubRepository, and is useful for accessing the field via an interface.
func (v *RepoDetailGithubIntegrationGitHubRepoIntegration) GetGithubRepository() *RepoDetailGithubIntegrationGitHubRepoIntegrationGithubRepositoryGitHubRepository {
	return v.GithubRepository
}

// GetAutoDeployBranch returns RepoDetailGithubIntegrationGitHubRepoIntegration.AutoDeployBranch, and is useful for accessing the field via an interface.
func (v *RepoDetailGithubIntegrationGitHubRepoIntegration) GetAutoDeployBranch() bool {
	return v.AutoDeployBranch
}

// GetAutoStopBranch returns RepoDetailGithubIntegrationGitHubRepoIntegration.AutoStopBranch, and is useful for accessing the field via an interface.
func (v *RepoDetailGithubIntegrationGitHubRepoIntegration) GetAutoStopBranch() bool {
	return v.AutoStopBranch
}

// GetBranchIgnore returns RepoDetailGithubIntegrationGitHubRepoIntegration.BranchIgnore, and is useful for accessing the field via an interface.
func (v *RepoDetailGithubIntegrationGitHubRepoIntegration) GetBranchIgnore() string {
	return v.BranchIgnore
}

// GetBranchStopIgnore returns RepoDetailGithubIntegrationGitHubRepoIntegration.BranchStopIgnore, and is useful for accessing the field via an interface.
func (v *RepoDetailGithubIntegrationGitHubRepoIntegration) GetBranchStopIgnore() string {
	return v.BranchStopIgnore
}

// RepoDetailGithubIntegrationGitHubRepoIntegrationGithubRepositoryGitHubRepository includes the requested fields of the GraphQL type GitHubRepository.
type RepoDetailGithubIntegrationGitHubRepoIntegrationGithubRepositoryGitHubRepository struct {
	Id    uuid.UUID `json:"id"`
	Owner string    `json:"owner"`
	Name  string    `json:"name"`
}

// GetId returns RepoDetailGithubIntegrationGitHubRepoIntegrationGithubRepositoryGitHubRepository.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailGithubIntegrationGitHubRepoIntegrationGithubRepositoryGitHubRepository) GetId() uuid.UUID {
	return v.Id
}

// GetOwner returns RepoDetailGithubIntegrationGitHubRepoIntegrationGithubRepositoryGitHubRepository.Owner, and is useful for accessing the field via an interface.
func (v *RepoDetailGithubIntegrationGitHubRepoIntegrationGithubRepositoryGitHubRepository) GetOwner() string {
	return v.Owner
}

// GetName returns RepoDetailGithubIntegrationGitHubRepoIntegrationGithubRepositoryGitHubRepository.Name, and is useful for accessing the field via an interface.
func (v *RepoDetailGithubIntegrationGitHubRepoIntegrationGithubRepositoryGitHubRepository) GetName() string {
	return v.Name
}

// RepoDetailGitlabIntegrationGitlabRepoIntegration includes the requested fields of the GraphQL type GitlabRepoIntegration.
type RepoDetailGitlabIntegrationGitlabRepoIntegration struct {
	Id               uuid.UUID `json:"id"`
	AutoDeployBranch bool      `json:"autoDeployBranch"`
	AutoStopBranch   bool      `json:"autoStopBranch"`
	BranchIgnore     string    `json:"branchIgnore"`
	BranchStopIgnore string    `json:"branchStopIgnore"`
}

// GetId returns RepoDetailGitlabIntegrationGitlabRepoIntegration.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailGitlabIntegrationGitlabRepoIntegration) GetId() uuid.UUID { return v.Id }

// GetAutoDeployBranch returns RepoDetailGitlabIntegrationGitlabRepoIntegration.AutoDeployBranch, and is useful for accessing the field via an interface.
func (v *RepoDetailGitlabIntegrationGitlabRepoIntegration) GetAutoDeployBranch() bool {
	return v.AutoDeployBranch
}

// GetAutoStopBranch returns RepoDetailGitlabIntegrationGitlabRepoIntegration.AutoStopBranch, and is useful for accessing the field via an interface.
func (v *RepoDetailGitlabIntegrationGitlabRepoIntegration) GetAutoStopBranch() bool {
	return v.AutoStopBranch
}

// GetBranchIgnore returns RepoDetailGitlabIntegrationGitlabRepoIntegration.BranchIgnore, and is useful for accessing the field via an interface.
func (v *RepoDetailGitlabIntegrationGitlabRepoIntegration) GetBranchIgnore() string {
	return v.BranchIgnore
}

// GetBranchStopIgnore returns RepoDetailGitlabIntegrationGitlabRepoIntegration.BranchStopIgnore, and is useful for accessing the field via an interface.
func (v *RepoDetailGitlabIntegrationGitlabRepoIntegration) GetBranchStopIgnore() string {
	return v.BranchStopIgnore
}

// RepoDetailGpuGPUSpec includes the requested fields of the GraphQL type GPUSpec.
type RepoDetailGpuGPUSpec struct {
	Type  *string `json:"type"`
	Count int     `json:"count"`
}

// GetType returns RepoDetailGpuGPUSpec.Type, and is useful for accessing the field via an interface.
func (v *RepoDetailGpuGPUSpec) GetType() *string { return v.Type }

// GetCount returns RepoDetailGpuGPUSpec.Count, and is useful for accessing the field via an interface.
func (v *RepoDetailGpuGPUSpec) GetCount() int { return v.Count }

// RepoDetailJobRunsJobRunConnection includes the requested fields of the GraphQL type JobRunConnection.
type RepoDetailJobRunsJobRunConnection struct {
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns RepoDetailJobRunsJobRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *RepoDetailJobRunsJobRunConnection) GetTotalCount() int { return v.TotalCount }

// RepoDetailKubernetesCustomization includes the requested fields of the GraphQL type KubernetesCustomization.
type RepoDetailKubernetesCustomization struct {
	ServiceAccountName *string            `json:"serviceAccountName"`
	PodAnnotations     *map[string]string `json:"podAnnotations"`
	ServiceAnnotations *map[string]string `json:"serviceAnnotations"`
	IngressAnnotations *map[string]string `json:"ingressAnnotations"`
}

// GetServiceAccountName returns RepoDetailKubernetesCustomization.ServiceAccountName, and is useful for accessing the field via an interface.
func (v *RepoDetailKubernetesCustomization) GetServiceAccountName() *string {
	return v.ServiceAccountName
}

// GetPodAnnotations returns RepoDetailKubernetesCustomization.PodAnnotations, and is useful for accessing the field via an interface.
func (v *RepoDetailKubernetesCustomization) GetPodAnnotations() *map[string]string {
	return v.PodAnnotations
}

// GetServiceAnnotations returns RepoDetailKubernetesCustomization.ServiceAnnotations, and is useful for accessing the field via an interface.
func (v *RepoDetailKubernetesCustomization) GetServiceAnnotations() *map[string]string {
	return v.ServiceAnnotations
}

// GetIngressAnnotations returns RepoDetailKubernetesCustomization.IngressAnnotations, and is useful for accessing the field via an interface.
func (v *RepoDetailKubernetesCustomization) GetIngressAnnotations() *map[string]string {
	return v.IngressAnnotations
}

// RepoDetailLinkedProjectsDatabaseLink includes the requested fields of the GraphQL type DatabaseLink.
type RepoDetailLinkedProjectsDatabaseLink struct {
	Id        uuid.UUID                                `json:"id"`
	EnvPrefix *string                                  `json:"envPrefix"`
	Repo      RepoDetailLinkedProjectsDatabaseLinkRepo `json:"repo"`
}

// GetId returns RepoDetailLinkedProjectsDatabaseLink.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLink) GetId() uuid.UUID { return v.Id }

// GetEnvPrefix returns RepoDetailLinkedProjectsDatabaseLink.EnvPrefix, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLink) GetEnvPrefix() *string { return v.EnvPrefix }

// GetRepo returns RepoDetailLinkedProjectsDatabaseLink.Repo, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLink) GetRepo() RepoDetailLinkedProjectsDatabaseLinkRepo {
	return v.Repo
}

// RepoDetailLinkedProjectsDatabaseLinkRepo includes the requested fields of the GraphQL type Repo.
type RepoDetailLinkedProjectsDatabaseLinkRepo struct {
	RepoCommon `json:"-"`
}

// GetId returns RepoDetailLinkedProjectsDatabaseLinkRepo.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetId() uuid.UUID { return v.RepoCommon.Id }

// GetPath returns RepoDetailLinkedProjectsDatabaseLinkRepo.Path, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetPath() string { return v.RepoCommon.Path }

// GetName returns RepoDetailLinkedProjectsDatabaseLinkRepo.Name, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetName() string { return v.RepoCommon.Name }

// GetEnabled returns RepoDetailLinkedProjectsDatabaseLinkRepo.Enabled, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetEnabled() bool { return v.RepoCommon.Enabled }

// GetSource returns RepoDetailLinkedProjectsDatabaseLinkRepo.Source, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoCommon.Source
}

// GetDeployTarget returns RepoDetailLinkedProjectsDatabaseLinkRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetDeployTarget() *DeployTarget {
	return v.RepoCommon.DeployTarget
}

// GetDeployType returns RepoDetailLinkedProjectsDatabaseLinkRepo.DeployType, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetDeployType() *DeployType {
	return v.RepoCommon.DeployType
}

// GetDeployService returns RepoDetailLinkedProjectsDatabaseLinkRepo.DeployService, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetDeployService() *bool {
	return v.RepoCommon.DeployService
}

// GetDeployJob returns RepoDetailLinkedProjectsDatabaseLinkRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetDeployJob() *bool {
	return v.RepoCommon.DeployJob
}

// GetAwsAccount returns RepoDetailLinkedProjectsDatabaseLinkRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns RepoDetailLinkedProjectsDatabaseLinkRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns RepoDetailLinkedProjectsDatabaseLinkRepo.Image, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetImage() *string { return v.RepoCommon.Image }

// GetCpu returns RepoDetailLinkedProjectsDatabaseLinkRepo.Cpu, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetCpu() *string { return v.RepoCommon.Cpu }

// GetMemory returns RepoDetailLinkedProjectsDatabaseLinkRepo.Memory, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetMemory() *string { return v.RepoCommon.Memory }

// GetGpu returns RepoDetailLinkedProjectsDatabaseLinkRepo.Gpu, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoCommon.Gpu
}

// GetTpu returns RepoDetailLinkedProjectsDatabaseLinkRepo.Tpu, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoCommon.Tpu
}

// GetUpdatedAt returns RepoDetailLinkedProjectsDatabaseLinkRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetUpdatedAt() time.Time {
	return v.RepoCommon.UpdatedAt
}

// GetDisableReason returns RepoDetailLinkedProjectsDatabaseLinkRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetDisableReason() *DisableReason {
	return v.RepoCommon.DisableReason
}

// GetCluster returns RepoDetailLinkedProjectsDatabaseLinkRepo.Cluster, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetCluster() *RepoCommonCluster {
	return v.RepoCommon.Cluster
}

// GetDatabaseProvider returns RepoDetailLinkedProjectsDatabaseLinkRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns RepoDetailLinkedProjectsDatabaseLinkRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns RepoDetailLinkedProjectsDatabaseLinkRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCommon.Autoscaling
}

// GetOwner returns RepoDetailLinkedProjectsDatabaseLinkRepo.Owner, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoCommon.Owner
}

// GetProject returns RepoDetailLinkedProjectsDatabaseLinkRepo.Project, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetProject() *RepoCommonProject {
	return v.RepoCommon.Project
}

// GetProjectEnvironment returns RepoDetailLinkedProjectsDatabaseLinkRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDetailLinkedProjectsDatabaseLinkRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDetailLinkedProjectsDatabaseLinkRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDetailLinkedProjectsDatabaseLinkRepo struct {
	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDetailLinkedProjectsDatabaseLinkRepo) __premarshalJSON() (*__premarshalRepoDetailLinkedProjectsDatabaseLinkRepo, error) {
	var retval __premarshalRepoDetailLinkedProjectsDatabaseLinkRepo

	retval.Id = v.RepoCommon.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// RepoDetailLivenessProbe includes the requested fields of the GraphQL type Probe.
type RepoDetailLivenessProbe struct {
	ProbeDetail `json:"-"`
}

// GetCommand returns RepoDetailLivenessProbe.Command, and is useful for accessing the field via an interface.
func (v *RepoDetailLivenessProbe) GetCommand() *string { return v.ProbeDetail.Command }

// GetHttp returns RepoDetailLivenessProbe.Http, and is useful for accessing the field via an interface.
func (v *RepoDetailLivenessProbe) GetHttp() *ProbeDetailHttpHTTPProbe { return v.ProbeDetail.Http }

// GetTcp returns RepoDetailLivenessProbe.Tcp, and is useful for accessing the field via an interface.
func (v *RepoDetailLivenessProbe) GetTcp() *ProbeDetailTcpTCPProbe { return v.ProbeDetail.Tcp }

// GetInitialDelaySeconds returns RepoDetailLivenessProbe.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *RepoDetailLivenessProbe) GetInitialDelaySeconds() int {
	return v.ProbeDetail.InitialDelaySeconds
}

// GetPeriodSeconds returns RepoDetailLivenessProbe.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *RepoDetailLivenessProbe) GetPeriodSeconds() int { return v.ProbeDetail.PeriodSeconds }

// GetSuccessThreshold returns RepoDetailLivenessProbe.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *RepoDetailLivenessProbe) GetSuccessThreshold() int { return v.ProbeDetail.SuccessThreshold }

// GetFailureThreshold returns RepoDetailLivenessProbe.FailureThreshold, and is useful for accessing the field via an interface.
func (v *RepoDetailLivenessProbe) GetFailureThreshold() int { return v.ProbeDetail.FailureThreshold }

// GetTimeoutSeconds returns RepoDetailLivenessProbe.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *RepoDetailLivenessProbe) GetTimeoutSeconds() int { return v.ProbeDetail.TimeoutSeconds }

func (v *RepoDetailLivenessProbe) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDetailLivenessProbe
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDetailLivenessProbe = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProbeDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDetailLivenessProbe struct {
	Command *string `json:"command"`

	Http *ProbeDetailHttpHTTPProbe `json:"http"`

	Tcp *ProbeDetailTcpTCPProbe `json:"tcp"`

	InitialDelaySeconds int `json:"initialDelaySeconds"`

	PeriodSeconds int `json:"periodSeconds"`

	SuccessThreshold int `json:"successThreshold"`

	FailureThreshold int `json:"failureThreshold"`

	TimeoutSeconds int `json:"timeoutSeconds"`
}

func (v *RepoDetailLivenessProbe) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDetailLivenessProbe) __premarshalJSON() (*__premarshalRepoDetailLivenessProbe, error) {
	var retval __premarshalRepoDetailLivenessProbe

	retval.Command = v.ProbeDetail.Command
	retval.Http = v.ProbeDetail.Http
	retval.Tcp = v.ProbeDetail.Tcp
	retval.InitialDelaySeconds = v.ProbeDetail.InitialDelaySeconds
	retval.PeriodSeconds = v.ProbeDetail.PeriodSeconds
	retval.SuccessThreshold = v.ProbeDetail.SuccessThreshold
	retval.FailureThreshold = v.ProbeDetail.FailureThreshold
	retval.TimeoutSeconds = v.ProbeDetail.TimeoutSeconds
	return &retval, nil
}

// RepoDetailLogShipper includes the requested fields of the GraphQL type LogShipper.
type RepoDetailLogShipper struct {
	Type        LogShipperType                                         `json:"type"`
	Logz        *RepoDetailLogShipperLogzLogzIntegration               `json:"logz"`
	Syslog      *RepoDetailLogShipperSyslogSyslogIntegration           `json:"syslog"`
	LogDNA      *RepoDetailLogShipperLogDNALogDNAIntegration           `json:"logDNA"`
	Datadog     *RepoDetailLogShipperDatadogDatadogLogIntegration      `json:"datadog"`
	Betterstack *RepoDetailLogShipperBetterstackBetterStackIntegration `json:"betterstack"`
}

// GetType returns RepoDetailLogShipper.Type, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipper) GetType() LogShipperType { return v.Type }

// GetLogz returns RepoDetailLogShipper.Logz, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipper) GetLogz() *RepoDetailLogShipperLogzLogzIntegration { return v.Logz }

// GetSyslog returns RepoDetailLogShipper.Syslog, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipper) GetSyslog() *RepoDetailLogShipperSyslogSyslogIntegration {
	return v.Syslog
}

// GetLogDNA returns RepoDetailLogShipper.LogDNA, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipper) GetLogDNA() *RepoDetailLogShipperLogDNALogDNAIntegration {
	return v.LogDNA
}

// GetDatadog returns RepoDetailLogShipper.Datadog, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipper) GetDatadog() *RepoDetailLogShipperDatadogDatadogLogIntegration {
	return v.Datadog
}

// GetBetterstack returns RepoDetailLogShipper.Betterstack, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipper) GetBetterstack() *RepoDetailLogShipperBetterstackBetterStackIntegration {
	return v.Betterstack
}

// RepoDetailLogShipperBetterstackBetterStackIntegration includes the requested fields of the GraphQL type BetterStackIntegration.
type RepoDetailLogShipperBetterstackBetterStackIntegration struct {
	Token string `json:"token"`
}

// GetToken returns RepoDetailLogShipperBetterstackBetterStackIntegration.Token, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipperBetterstackBetterStackIntegration) GetToken() string { return v.Token }

// RepoDetailLogShipperDatadogDatadogLogIntegration includes the requested fields of the GraphQL type DatadogLogIntegration.
type RepoDetailLogShipperDatadogDatadogLogIntegration struct {
	Key  string  `json:"key"`
	Host *string `json:"host"`
}

// GetKey returns RepoDetailLogShipperDatadogDatadogLogIntegration.Key, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipperDatadogDatadogLogIntegration) GetKey() string { return v.Key }

// GetHost returns RepoDetailLogShipperDatadogDatadogLogIntegration.Host, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipperDatadogDatadogLogIntegration) GetHost() *string { return v.Host }

// RepoDetailLogShipperLogDNALogDNAIntegration includes the requested fields of the GraphQL type LogDNAIntegration.
type RepoDetailLogShipperLogDNALogDNAIntegration struct {
	Key string `json:"key"`
}

// GetKey returns RepoDetailLogShipperLogDNALogDNAIntegration.Key, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipperLogDNALogDNAIntegration) GetKey() string { return v.Key }

// RepoDetailLogShipperLogzLogzIntegration includes the requested fields of the GraphQL type LogzIntegration.
type RepoDetailLogShipperLogzLogzIntegration struct {
	Token string  `json:"token"`
	Url   *string `json:"url"`
}

// GetToken returns RepoDetailLogShipperLogzLogzIntegration.Token, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipperLogzLogzIntegration) GetToken() string { return v.Token }

// GetUrl returns RepoDetailLogShipperLogzLogzIntegration.Url, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipperLogzLogzIntegration) GetUrl() *string { return v.Url }

// RepoDetailLogShipperSyslogSyslogIntegration includes the requested fields of the GraphQL type SyslogIntegration.
type RepoDetailLogShipperSyslogSyslogIntegration struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Mode string `json:"mode"`
}

// GetHost returns RepoDetailLogShipperSyslogSyslogIntegration.Host, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipperSyslogSyslogIntegration) GetHost() string { return v.Host }

// GetPort returns RepoDetailLogShipperSyslogSyslogIntegration.Port, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipperSyslogSyslogIntegration) GetPort() string { return v.Port }

// GetMode returns RepoDetailLogShipperSyslogSyslogIntegration.Mode, and is useful for accessing the field via an interface.
func (v *RepoDetailLogShipperSyslogSyslogIntegration) GetMode() string { return v.Mode }

// RepoDetailManifest includes the requested fields of the GraphQL type Manifest.
type RepoDetailManifest struct {
	Manifests     []string `json:"manifests"`
	ManifestValue *string  `json:"manifestValue"`
	KustomizeDirs []string `json:"kustomizeDirs"`
}

// GetManifests returns RepoDetailManifest.Manifests, and is useful for accessing the field via an interface.
func (v *RepoDetailManifest) GetManifests() []string { return v.Manifests }

// GetManifestValue returns RepoDetailManifest.ManifestValue, and is useful for accessing the field via an interface.
func (v *RepoDetailManifest) GetManifestValue() *string { return v.ManifestValue }

// GetKustomizeDirs returns RepoDetailManifest.KustomizeDirs, and is useful for accessing the field via an interface.
func (v *RepoDetailManifest) GetKustomizeDirs() []string { return v.KustomizeDirs }

// RepoDetailPipelineCluster includes the requested fields of the GraphQL type Cluster.
type RepoDetailPipelineCluster struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns RepoDetailPipelineCluster.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailPipelineCluster) GetId() uuid.UUID { return v.Id }

// RepoDetailPipelineLinksRepoPipelineLink includes the requested fields of the GraphQL type RepoPipelineLink.
type RepoDetailPipelineLinksRepoPipelineLink struct {
	RepoPipelineLinkDetail `json:"-"`
}

// GetId returns RepoDetailPipelineLinksRepoPipelineLink.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailPipelineLinksRepoPipelineLink) GetId() uuid.UUID {
	return v.RepoPipelineLinkDetail.Id
}

// GetSource returns RepoDetailPipelineLinksRepoPipelineLink.Source, and is useful for accessing the field via an interface.
func (v *RepoDetailPipelineLinksRepoPipelineLink) GetSource() RepoPipelineLinkDetailSourceRepo {
	return v.RepoPipelineLinkDetail.Source
}

// GetSourceEvent returns RepoDetailPipelineLinksRepoPipelineLink.SourceEvent, and is useful for accessing the field via an interface.
func (v *RepoDetailPipelineLinksRepoPipelineLink) GetSourceEvent() RepoEvent {
	return v.RepoPipelineLinkDetail.SourceEvent
}

// GetTargetGroup returns RepoDetailPipelineLinksRepoPipelineLink.TargetGroup, and is useful for accessing the field via an interface.
func (v *RepoDetailPipelineLinksRepoPipelineLink) GetTargetGroup() RepoPipelineLinkDetailTargetGroupRepoGroup {
	return v.RepoPipelineLinkDetail.TargetGroup
}

// GetTargetAction returns RepoDetailPipelineLinksRepoPipelineLink.TargetAction, and is useful for accessing the field via an interface.
func (v *RepoDetailPipelineLinksRepoPipelineLink) GetTargetAction() RepoAction {
	return v.RepoPipelineLinkDetail.TargetAction
}

func (v *RepoDetailPipelineLinksRepoPipelineLink) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDetailPipelineLinksRepoPipelineLink
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDetailPipelineLinksRepoPipelineLink = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoPipelineLinkDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDetailPipelineLinksRepoPipelineLink struct {
	Id uuid.UUID `json:"id"`

	Source RepoPipelineLinkDetailSourceRepo `json:"source"`

	SourceEvent RepoEvent `json:"sourceEvent"`

	TargetGroup RepoPipelineLinkDetailTargetGroupRepoGroup `json:"targetGroup"`

	TargetAction RepoAction `json:"targetAction"`
}

func (v *RepoDetailPipelineLinksRepoPipelineLink) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDetailPipelineLinksRepoPipelineLink) __premarshalJSON() (*__premarshalRepoDetailPipelineLinksRepoPipelineLink, error) {
	var retval __premarshalRepoDetailPipelineLinksRepoPipelineLink

	retval.Id = v.RepoPipelineLinkDetail.Id
	retval.Source = v.RepoPipelineLinkDetail.Source
	retval.SourceEvent = v.RepoPipelineLinkDetail.SourceEvent
	retval.TargetGroup = v.RepoPipelineLinkDetail.TargetGroup
	retval.TargetAction = v.RepoPipelineLinkDetail.TargetAction
	return &retval, nil
}

// RepoDetailProductionDeployment includes the requested fields of the GraphQL type Deployment.
type RepoDetailProductionDeployment struct {
	DeploymentCommon `json:"-"`
	AwsLinks         *RepoDetailProductionDeploymentAwsLinksAWSLinks           `json:"awsLinks"`
	GcpLinks         *RepoDetailProductionDeploymentGcpLinksGCPLinks           `json:"gcpLinks"`
	LoadBalancers    []RepoDetailProductionDeploymentLoadBalancersLoadBalancer `json:"loadBalancers"`
}

// GetAwsLinks returns RepoDetailProductionDeployment.AwsLinks, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetAwsLinks() *RepoDetailProductionDeploymentAwsLinksAWSLinks {
	return v.AwsLinks
}

// GetGcpLinks returns RepoDetailProductionDeployment.GcpLinks, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetGcpLinks() *RepoDetailProductionDeploymentGcpLinksGCPLinks {
	return v.GcpLinks
}

// GetLoadBalancers returns RepoDetailProductionDeployment.LoadBalancers, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetLoadBalancers() []RepoDetailProductionDeploymentLoadBalancersLoadBalancer {
	return v.LoadBalancers
}

// GetId returns RepoDetailProductionDeployment.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetId() uuid.UUID { return v.DeploymentCommon.Id }

// GetDescription returns RepoDetailProductionDeployment.Description, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetDescription() *string {
	return v.DeploymentCommon.Description
}

// GetVersion returns RepoDetailProductionDeployment.Version, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetVersion() string { return v.DeploymentCommon.Version }

// GetStatus returns RepoDetailProductionDeployment.Status, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetStatus() DeploymentStatus {
	return v.DeploymentCommon.Status
}

// GetBranch returns RepoDetailProductionDeployment.Branch, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetBranch() *string { return v.DeploymentCommon.Branch }

// GetEndpoints returns RepoDetailProductionDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetEndpoints() []string { return v.DeploymentCommon.Endpoints }

// GetPrivateEndpoint returns RepoDetailProductionDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetPrivateEndpoint() *string {
	return v.DeploymentCommon.PrivateEndpoint
}

// GetErrorMessage returns RepoDetailProductionDeployment.ErrorMessage, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetErrorMessage() *string {
	return v.DeploymentCommon.ErrorMessage
}

// GetDeployStatus returns RepoDetailProductionDeployment.DeployStatus, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetDeployStatus() *DeploymentCommonDeployStatus {
	return v.DeploymentCommon.DeployStatus
}

// GetBuild returns RepoDetailProductionDeployment.Build, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetBuild() *DeploymentCommonBuild {
	return v.DeploymentCommon.Build
}

// GetAlternativeImages returns RepoDetailProductionDeployment.AlternativeImages, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetAlternativeImages() []DeploymentCommonAlternativeImagesAlternativeImage {
	return v.DeploymentCommon.AlternativeImages
}

// GetUpdatedAt returns RepoDetailProductionDeployment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetUpdatedAt() time.Time {
	return v.DeploymentCommon.UpdatedAt
}

// GetCreatedAt returns RepoDetailProductionDeployment.CreatedAt, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeployment) GetCreatedAt() time.Time {
	return v.DeploymentCommon.CreatedAt
}

func (v *RepoDetailProductionDeployment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDetailProductionDeployment
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDetailProductionDeployment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDetailProductionDeployment struct {
	AwsLinks *RepoDetailProductionDeploymentAwsLinksAWSLinks `json:"awsLinks"`

	GcpLinks *RepoDetailProductionDeploymentGcpLinksGCPLinks `json:"gcpLinks"`

	LoadBalancers []RepoDetailProductionDeploymentLoadBalancersLoadBalancer `json:"loadBalancers"`

	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	Version string `json:"version"`

	Status DeploymentStatus `json:"status"`

	Branch *string `json:"branch"`

	Endpoints []string `json:"endpoints"`

	PrivateEndpoint *string `json:"privateEndpoint"`

	ErrorMessage *string `json:"errorMessage"`

	DeployStatus *DeploymentCommonDeployStatus `json:"deployStatus"`

	Build *DeploymentCommonBuild `json:"build"`

	AlternativeImages []DeploymentCommonAlternativeImagesAlternativeImage `json:"alternativeImages"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *RepoDetailProductionDeployment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDetailProductionDeployment) __premarshalJSON() (*__premarshalRepoDetailProductionDeployment, error) {
	var retval __premarshalRepoDetailProductionDeployment

	retval.AwsLinks = v.AwsLinks
	retval.GcpLinks = v.GcpLinks
	retval.LoadBalancers = v.LoadBalancers
	retval.Id = v.DeploymentCommon.Id
	retval.Description = v.DeploymentCommon.Description
	retval.Version = v.DeploymentCommon.Version
	retval.Status = v.DeploymentCommon.Status
	retval.Branch = v.DeploymentCommon.Branch
	retval.Endpoints = v.DeploymentCommon.Endpoints
	retval.PrivateEndpoint = v.DeploymentCommon.PrivateEndpoint
	retval.ErrorMessage = v.DeploymentCommon.ErrorMessage
	retval.DeployStatus = v.DeploymentCommon.DeployStatus
	retval.Build = v.DeploymentCommon.Build
	retval.AlternativeImages = v.DeploymentCommon.AlternativeImages
	retval.UpdatedAt = v.DeploymentCommon.UpdatedAt
	retval.CreatedAt = v.DeploymentCommon.CreatedAt
	return &retval, nil
}

// RepoDetailProductionDeploymentAwsLinksAWSLinks includes the requested fields of the GraphQL type AWSLinks.
type RepoDetailProductionDeploymentAwsLinksAWSLinks struct {
	LambdaLinks `json:"-"`
	Rds         *string `json:"rds"`
}

// GetRds returns RepoDetailProductionDeploymentAwsLinksAWSLinks.Rds, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentAwsLinksAWSLinks) GetRds() *string { return v.Rds }

// GetCloudformation returns RepoDetailProductionDeploymentAwsLinksAWSLinks.Cloudformation, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentAwsLinksAWSLinks) GetCloudformation() *string {
	return v.LambdaLinks.Cloudformation
}

// GetLambda returns RepoDetailProductionDeploymentAwsLinksAWSLinks.Lambda, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentAwsLinksAWSLinks) GetLambda() *string {
	return v.LambdaLinks.Lambda
}

// GetApiGateway returns RepoDetailProductionDeploymentAwsLinksAWSLinks.ApiGateway, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentAwsLinksAWSLinks) GetApiGateway() *string {
	return v.LambdaLinks.ApiGateway
}

// GetCloudwatchLogs returns RepoDetailProductionDeploymentAwsLinksAWSLinks.CloudwatchLogs, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentAwsLinksAWSLinks) GetCloudwatchLogs() *string {
	return v.LambdaLinks.CloudwatchLogs
}

// GetCloudwatchMetrics returns RepoDetailProductionDeploymentAwsLinksAWSLinks.CloudwatchMetrics, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentAwsLinksAWSLinks) GetCloudwatchMetrics() *string {
	return v.LambdaLinks.CloudwatchMetrics
}

func (v *RepoDetailProductionDeploymentAwsLinksAWSLinks) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDetailProductionDeploymentAwsLinksAWSLinks
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDetailProductionDeploymentAwsLinksAWSLinks = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.LambdaLinks)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDetailProductionDeploymentAwsLinksAWSLinks struct {
	Rds *string `json:"rds"`

	Cloudformation *string `json:"cloudformation"`

	Lambda *string `json:"lambda"`

	ApiGateway *string `json:"apiGateway"`

	CloudwatchLogs *string `json:"cloudwatchLogs"`

	CloudwatchMetrics *string `json:"cloudwatchMetrics"`
}

func (v *RepoDetailProductionDeploymentAwsLinksAWSLinks) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDetailProductionDeploymentAwsLinksAWSLinks) __premarshalJSON() (*__premarshalRepoDetailProductionDeploymentAwsLinksAWSLinks, error) {
	var retval __premarshalRepoDetailProductionDeploymentAwsLinksAWSLinks

	retval.Rds = v.Rds
	retval.Cloudformation = v.LambdaLinks.Cloudformation
	retval.Lambda = v.LambdaLinks.Lambda
	retval.ApiGateway = v.LambdaLinks.ApiGateway
	retval.CloudwatchLogs = v.LambdaLinks.CloudwatchLogs
	retval.CloudwatchMetrics = v.LambdaLinks.CloudwatchMetrics
	return &retval, nil
}

// RepoDetailProductionDeploymentGcpLinksGCPLinks includes the requested fields of the GraphQL type GCPLinks.
type RepoDetailProductionDeploymentGcpLinksGCPLinks struct {
	CloudFunctionsLinks `json:"-"`
}

// GetDeploymentManager returns RepoDetailProductionDeploymentGcpLinksGCPLinks.DeploymentManager, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentGcpLinksGCPLinks) GetDeploymentManager() *string {
	return v.CloudFunctionsLinks.DeploymentManager
}

// GetCloudRun returns RepoDetailProductionDeploymentGcpLinksGCPLinks.CloudRun, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentGcpLinksGCPLinks) GetCloudRun() *string {
	return v.CloudFunctionsLinks.CloudRun
}

// GetCloudFunctions returns RepoDetailProductionDeploymentGcpLinksGCPLinks.CloudFunctions, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentGcpLinksGCPLinks) GetCloudFunctions() *string {
	return v.CloudFunctionsLinks.CloudFunctions
}

// GetCloudFunctionsTrigger returns RepoDetailProductionDeploymentGcpLinksGCPLinks.CloudFunctionsTrigger, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentGcpLinksGCPLinks) GetCloudFunctionsTrigger() *string {
	return v.CloudFunctionsLinks.CloudFunctionsTrigger
}

// GetCloudLogging returns RepoDetailProductionDeploymentGcpLinksGCPLinks.CloudLogging, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentGcpLinksGCPLinks) GetCloudLogging() *string {
	return v.CloudFunctionsLinks.CloudLogging
}

// GetCloudMonitoring returns RepoDetailProductionDeploymentGcpLinksGCPLinks.CloudMonitoring, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentGcpLinksGCPLinks) GetCloudMonitoring() *string {
	return v.CloudFunctionsLinks.CloudMonitoring
}

func (v *RepoDetailProductionDeploymentGcpLinksGCPLinks) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDetailProductionDeploymentGcpLinksGCPLinks
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDetailProductionDeploymentGcpLinksGCPLinks = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudFunctionsLinks)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDetailProductionDeploymentGcpLinksGCPLinks struct {
	DeploymentManager *string `json:"deploymentManager"`

	CloudRun *string `json:"cloudRun"`

	CloudFunctions *string `json:"cloudFunctions"`

	CloudFunctionsTrigger *string `json:"cloudFunctionsTrigger"`

	CloudLogging *string `json:"cloudLogging"`

	CloudMonitoring *string `json:"cloudMonitoring"`
}

func (v *RepoDetailProductionDeploymentGcpLinksGCPLinks) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDetailProductionDeploymentGcpLinksGCPLinks) __premarshalJSON() (*__premarshalRepoDetailProductionDeploymentGcpLinksGCPLinks, error) {
	var retval __premarshalRepoDetailProductionDeploymentGcpLinksGCPLinks

	retval.DeploymentManager = v.CloudFunctionsLinks.DeploymentManager
	retval.CloudRun = v.CloudFunctionsLinks.CloudRun
	retval.CloudFunctions = v.CloudFunctionsLinks.CloudFunctions
	retval.CloudFunctionsTrigger = v.CloudFunctionsLinks.CloudFunctionsTrigger
	retval.CloudLogging = v.CloudFunctionsLinks.CloudLogging
	retval.CloudMonitoring = v.CloudFunctionsLinks.CloudMonitoring
	return &retval, nil
}

// RepoDetailProductionDeploymentLoadBalancersLoadBalancer includes the requested fields of the GraphQL type LoadBalancer.
type RepoDetailProductionDeploymentLoadBalancersLoadBalancer struct {
	Dns   []string `json:"dns"`
	Ips   []string `json:"ips"`
	Ports []int    `json:"ports"`
}

// GetDns returns RepoDetailProductionDeploymentLoadBalancersLoadBalancer.Dns, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentLoadBalancersLoadBalancer) GetDns() []string { return v.Dns }

// GetIps returns RepoDetailProductionDeploymentLoadBalancersLoadBalancer.Ips, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentLoadBalancersLoadBalancer) GetIps() []string { return v.Ips }

// GetPorts returns RepoDetailProductionDeploymentLoadBalancersLoadBalancer.Ports, and is useful for accessing the field via an interface.
func (v *RepoDetailProductionDeploymentLoadBalancersLoadBalancer) GetPorts() []int { return v.Ports }

// RepoDetailProject includes the requested fields of the GraphQL type Project.
type RepoDetailProject struct {
	// - v0.ProjectID or v1.GroupID
	Id           uuid.UUID                                         `json:"id"`
	Name         string                                            `json:"name"`
	Environments []RepoDetailProjectEnvironmentsProjectEnvironment `json:"environments"`
	Envs         []RepoDetailProjectEnvsEnvVar                     `json:"envs"`
}

// GetId returns RepoDetailProject.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailProject) GetId() uuid.UUID { return v.Id }

// GetName returns RepoDetailProject.Name, and is useful for accessing the field via an interface.
func (v *RepoDetailProject) GetName() string { return v.Name }

// GetEnvironments returns RepoDetailProject.Environments, and is useful for accessing the field via an interface.
func (v *RepoDetailProject) GetEnvironments() []RepoDetailProjectEnvironmentsProjectEnvironment {
	return v.Environments
}

// GetEnvs returns RepoDetailProject.Envs, and is useful for accessing the field via an interface.
func (v *RepoDetailProject) GetEnvs() []RepoDetailProjectEnvsEnvVar { return v.Envs }

// RepoDetailProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type RepoDetailProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id   uuid.UUID                                `json:"id"`
	Name string                                   `json:"name"`
	Envs []RepoDetailProjectEnvironmentEnvsEnvVar `json:"envs"`
}

// GetId returns RepoDetailProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns RepoDetailProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvironment) GetName() string { return v.Name }

// GetEnvs returns RepoDetailProjectEnvironment.Envs, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvironment) GetEnvs() []RepoDetailProjectEnvironmentEnvsEnvVar {
	return v.Envs
}

// RepoDetailProjectEnvironmentEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type RepoDetailProjectEnvironmentEnvsEnvVar struct {
	Id      uuid.UUID                                     `json:"id"`
	Name    string                                        `json:"name"`
	Value   string                                        `json:"value"`
	Visible bool                                          `json:"visible"`
	Sealed  bool                                          `json:"sealed"`
	Source  *RepoDetailProjectEnvironmentEnvsEnvVarSource `json:"source"`
}

// GetId returns RepoDetailProjectEnvironmentEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvironmentEnvsEnvVar) GetId() uuid.UUID { return v.Id }

// GetName returns RepoDetailProjectEnvironmentEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvironmentEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns RepoDetailProjectEnvironmentEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvironmentEnvsEnvVar) GetValue() string { return v.Value }

// GetVisible returns RepoDetailProjectEnvironmentEnvsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvironmentEnvsEnvVar) GetVisible() bool { return v.Visible }

// GetSealed returns RepoDetailProjectEnvironmentEnvsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvironmentEnvsEnvVar) GetSealed() bool { return v.Sealed }

// GetSource returns RepoDetailProjectEnvironmentEnvsEnvVar.Source, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvironmentEnvsEnvVar) GetSource() *RepoDetailProjectEnvironmentEnvsEnvVarSource {
	return v.Source
}

// RepoDetailProjectEnvironmentEnvsEnvVarSource includes the requested fields of the GraphQL type EnvVarSource.
type RepoDetailProjectEnvironmentEnvsEnvVarSource struct {
	Type EnvVarSourceType `json:"type"`
}

// GetType returns RepoDetailProjectEnvironmentEnvsEnvVarSource.Type, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvironmentEnvsEnvVarSource) GetType() EnvVarSourceType { return v.Type }

// RepoDetailProjectEnvironmentsProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type RepoDetailProjectEnvironmentsProjectEnvironment struct {
	ProjectEnvironmentBasic `json:"-"`
}

// GetId returns RepoDetailProjectEnvironmentsProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvironmentsProjectEnvironment) GetId() uuid.UUID {
	return v.ProjectEnvironmentBasic.Id
}

// GetName returns RepoDetailProjectEnvironmentsProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvironmentsProjectEnvironment) GetName() string {
	return v.ProjectEnvironmentBasic.Name
}

func (v *RepoDetailProjectEnvironmentsProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDetailProjectEnvironmentsProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDetailProjectEnvironmentsProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectEnvironmentBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDetailProjectEnvironmentsProjectEnvironment struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *RepoDetailProjectEnvironmentsProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDetailProjectEnvironmentsProjectEnvironment) __premarshalJSON() (*__premarshalRepoDetailProjectEnvironmentsProjectEnvironment, error) {
	var retval __premarshalRepoDetailProjectEnvironmentsProjectEnvironment

	retval.Id = v.ProjectEnvironmentBasic.Id
	retval.Name = v.ProjectEnvironmentBasic.Name
	return &retval, nil
}

// RepoDetailProjectEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type RepoDetailProjectEnvsEnvVar struct {
	Id      uuid.UUID                          `json:"id"`
	Name    string                             `json:"name"`
	Value   string                             `json:"value"`
	Visible bool                               `json:"visible"`
	Sealed  bool                               `json:"sealed"`
	Source  *RepoDetailProjectEnvsEnvVarSource `json:"source"`
}

// GetId returns RepoDetailProjectEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvsEnvVar) GetId() uuid.UUID { return v.Id }

// GetName returns RepoDetailProjectEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns RepoDetailProjectEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvsEnvVar) GetValue() string { return v.Value }

// GetVisible returns RepoDetailProjectEnvsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvsEnvVar) GetVisible() bool { return v.Visible }

// GetSealed returns RepoDetailProjectEnvsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvsEnvVar) GetSealed() bool { return v.Sealed }

// GetSource returns RepoDetailProjectEnvsEnvVar.Source, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvsEnvVar) GetSource() *RepoDetailProjectEnvsEnvVarSource { return v.Source }

// RepoDetailProjectEnvsEnvVarSource includes the requested fields of the GraphQL type EnvVarSource.
type RepoDetailProjectEnvsEnvVarSource struct {
	Type EnvVarSourceType `json:"type"`
}

// GetType returns RepoDetailProjectEnvsEnvVarSource.Type, and is useful for accessing the field via an interface.
func (v *RepoDetailProjectEnvsEnvVarSource) GetType() EnvVarSourceType { return v.Type }

// RepoDetailPrometheusScrape includes the requested fields of the GraphQL type PrometheusScrape.
type RepoDetailPrometheusScrape struct {
	Path string `json:"path"`
	Port int    `json:"port"`
}

// GetPath returns RepoDetailPrometheusScrape.Path, and is useful for accessing the field via an interface.
func (v *RepoDetailPrometheusScrape) GetPath() string { return v.Path }

// GetPort returns RepoDetailPrometheusScrape.Port, and is useful for accessing the field via an interface.
func (v *RepoDetailPrometheusScrape) GetPort() int { return v.Port }

// RepoDetailReadinessProbe includes the requested fields of the GraphQL type Probe.
type RepoDetailReadinessProbe struct {
	ProbeDetail `json:"-"`
}

// GetCommand returns RepoDetailReadinessProbe.Command, and is useful for accessing the field via an interface.
func (v *RepoDetailReadinessProbe) GetCommand() *string { return v.ProbeDetail.Command }

// GetHttp returns RepoDetailReadinessProbe.Http, and is useful for accessing the field via an interface.
func (v *RepoDetailReadinessProbe) GetHttp() *ProbeDetailHttpHTTPProbe { return v.ProbeDetail.Http }

// GetTcp returns RepoDetailReadinessProbe.Tcp, and is useful for accessing the field via an interface.
func (v *RepoDetailReadinessProbe) GetTcp() *ProbeDetailTcpTCPProbe { return v.ProbeDetail.Tcp }

// GetInitialDelaySeconds returns RepoDetailReadinessProbe.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *RepoDetailReadinessProbe) GetInitialDelaySeconds() int {
	return v.ProbeDetail.InitialDelaySeconds
}

// GetPeriodSeconds returns RepoDetailReadinessProbe.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *RepoDetailReadinessProbe) GetPeriodSeconds() int { return v.ProbeDetail.PeriodSeconds }

// GetSuccessThreshold returns RepoDetailReadinessProbe.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *RepoDetailReadinessProbe) GetSuccessThreshold() int { return v.ProbeDetail.SuccessThreshold }

// GetFailureThreshold returns RepoDetailReadinessProbe.FailureThreshold, and is useful for accessing the field via an interface.
func (v *RepoDetailReadinessProbe) GetFailureThreshold() int { return v.ProbeDetail.FailureThreshold }

// GetTimeoutSeconds returns RepoDetailReadinessProbe.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *RepoDetailReadinessProbe) GetTimeoutSeconds() int { return v.ProbeDetail.TimeoutSeconds }

func (v *RepoDetailReadinessProbe) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDetailReadinessProbe
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDetailReadinessProbe = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProbeDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDetailReadinessProbe struct {
	Command *string `json:"command"`

	Http *ProbeDetailHttpHTTPProbe `json:"http"`

	Tcp *ProbeDetailTcpTCPProbe `json:"tcp"`

	InitialDelaySeconds int `json:"initialDelaySeconds"`

	PeriodSeconds int `json:"periodSeconds"`

	SuccessThreshold int `json:"successThreshold"`

	FailureThreshold int `json:"failureThreshold"`

	TimeoutSeconds int `json:"timeoutSeconds"`
}

func (v *RepoDetailReadinessProbe) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDetailReadinessProbe) __premarshalJSON() (*__premarshalRepoDetailReadinessProbe, error) {
	var retval __premarshalRepoDetailReadinessProbe

	retval.Command = v.ProbeDetail.Command
	retval.Http = v.ProbeDetail.Http
	retval.Tcp = v.ProbeDetail.Tcp
	retval.InitialDelaySeconds = v.ProbeDetail.InitialDelaySeconds
	retval.PeriodSeconds = v.ProbeDetail.PeriodSeconds
	retval.SuccessThreshold = v.ProbeDetail.SuccessThreshold
	retval.FailureThreshold = v.ProbeDetail.FailureThreshold
	retval.TimeoutSeconds = v.ProbeDetail.TimeoutSeconds
	return &retval, nil
}

// RepoDetailReplication includes the requested fields of the GraphQL type Replication.
type RepoDetailReplication struct {
	Region   string                        `json:"region"`
	Replicas *int                          `json:"replicas"`
	Cluster  *RepoDetailReplicationCluster `json:"cluster"`
}

// GetRegion returns RepoDetailReplication.Region, and is useful for accessing the field via an interface.
func (v *RepoDetailReplication) GetRegion() string { return v.Region }

// GetReplicas returns RepoDetailReplication.Replicas, and is useful for accessing the field via an interface.
func (v *RepoDetailReplication) GetReplicas() *int { return v.Replicas }

// GetCluster returns RepoDetailReplication.Cluster, and is useful for accessing the field via an interface.
func (v *RepoDetailReplication) GetCluster() *RepoDetailReplicationCluster { return v.Cluster }

// RepoDetailReplicationCluster includes the requested fields of the GraphQL type Cluster.
type RepoDetailReplicationCluster struct {
	Id     uuid.UUID `json:"id"`
	Name   string    `json:"name"`
	Region *string   `json:"region"`
}

// GetId returns RepoDetailReplicationCluster.Id, and is useful for accessing the field via an interface.
func (v *RepoDetailReplicationCluster) GetId() uuid.UUID { return v.Id }

// GetName returns RepoDetailReplicationCluster.Name, and is useful for accessing the field via an interface.
func (v *RepoDetailReplicationCluster) GetName() string { return v.Name }

// GetRegion returns RepoDetailReplicationCluster.Region, and is useful for accessing the field via an interface.
func (v *RepoDetailReplicationCluster) GetRegion() *string { return v.Region }

// RepoDetailSecretMountsKubernetesSecretMount includes the requested fields of the GraphQL type KubernetesSecretMount.
type RepoDetailSecretMountsKubernetesSecretMount struct {
	SecretName string `json:"secretName"`
	MountPath  string `json:"mountPath"`
	ReadOnly   bool   `json:"readOnly"`
}

// GetSecretName returns RepoDetailSecretMountsKubernetesSecretMount.SecretName, and is useful for accessing the field via an interface.
func (v *RepoDetailSecretMountsKubernetesSecretMount) GetSecretName() string { return v.SecretName }

// GetMountPath returns RepoDetailSecretMountsKubernetesSecretMount.MountPath, and is useful for accessing the field via an interface.
func (v *RepoDetailSecretMountsKubernetesSecretMount) GetMountPath() string { return v.MountPath }

// GetReadOnly returns RepoDetailSecretMountsKubernetesSecretMount.ReadOnly, and is useful for accessing the field via an interface.
func (v *RepoDetailSecretMountsKubernetesSecretMount) GetReadOnly() bool { return v.ReadOnly }

// RepoDetailServerlessResourcesServerlessResourceSpec includes the requested fields of the GraphQL type ServerlessResourceSpec.
type RepoDetailServerlessResourcesServerlessResourceSpec struct {
	Cpu    *float64 `json:"cpu"`
	Memory *float64 `json:"memory"`
}

// GetCpu returns RepoDetailServerlessResourcesServerlessResourceSpec.Cpu, and is useful for accessing the field via an interface.
func (v *RepoDetailServerlessResourcesServerlessResourceSpec) GetCpu() *float64 { return v.Cpu }

// GetMemory returns RepoDetailServerlessResourcesServerlessResourceSpec.Memory, and is useful for accessing the field via an interface.
func (v *RepoDetailServerlessResourcesServerlessResourceSpec) GetMemory() *float64 { return v.Memory }

// RepoDetailStartupProbe includes the requested fields of the GraphQL type Probe.
type RepoDetailStartupProbe struct {
	ProbeDetail `json:"-"`
}

// GetCommand returns RepoDetailStartupProbe.Command, and is useful for accessing the field via an interface.
func (v *RepoDetailStartupProbe) GetCommand() *string { return v.ProbeDetail.Command }

// GetHttp returns RepoDetailStartupProbe.Http, and is useful for accessing the field via an interface.
func (v *RepoDetailStartupProbe) GetHttp() *ProbeDetailHttpHTTPProbe { return v.ProbeDetail.Http }

// GetTcp returns RepoDetailStartupProbe.Tcp, and is useful for accessing the field via an interface.
func (v *RepoDetailStartupProbe) GetTcp() *ProbeDetailTcpTCPProbe { return v.ProbeDetail.Tcp }

// GetInitialDelaySeconds returns RepoDetailStartupProbe.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *RepoDetailStartupProbe) GetInitialDelaySeconds() int {
	return v.ProbeDetail.InitialDelaySeconds
}

// GetPeriodSeconds returns RepoDetailStartupProbe.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *RepoDetailStartupProbe) GetPeriodSeconds() int { return v.ProbeDetail.PeriodSeconds }

// GetSuccessThreshold returns RepoDetailStartupProbe.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *RepoDetailStartupProbe) GetSuccessThreshold() int { return v.ProbeDetail.SuccessThreshold }

// GetFailureThreshold returns RepoDetailStartupProbe.FailureThreshold, and is useful for accessing the field via an interface.
func (v *RepoDetailStartupProbe) GetFailureThreshold() int { return v.ProbeDetail.FailureThreshold }

// GetTimeoutSeconds returns RepoDetailStartupProbe.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *RepoDetailStartupProbe) GetTimeoutSeconds() int { return v.ProbeDetail.TimeoutSeconds }

func (v *RepoDetailStartupProbe) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoDetailStartupProbe
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoDetailStartupProbe = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProbeDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoDetailStartupProbe struct {
	Command *string `json:"command"`

	Http *ProbeDetailHttpHTTPProbe `json:"http"`

	Tcp *ProbeDetailTcpTCPProbe `json:"tcp"`

	InitialDelaySeconds int `json:"initialDelaySeconds"`

	PeriodSeconds int `json:"periodSeconds"`

	SuccessThreshold int `json:"successThreshold"`

	FailureThreshold int `json:"failureThreshold"`

	TimeoutSeconds int `json:"timeoutSeconds"`
}

func (v *RepoDetailStartupProbe) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoDetailStartupProbe) __premarshalJSON() (*__premarshalRepoDetailStartupProbe, error) {
	var retval __premarshalRepoDetailStartupProbe

	retval.Command = v.ProbeDetail.Command
	retval.Http = v.ProbeDetail.Http
	retval.Tcp = v.ProbeDetail.Tcp
	retval.InitialDelaySeconds = v.ProbeDetail.InitialDelaySeconds
	retval.PeriodSeconds = v.ProbeDetail.PeriodSeconds
	retval.SuccessThreshold = v.ProbeDetail.SuccessThreshold
	retval.FailureThreshold = v.ProbeDetail.FailureThreshold
	retval.TimeoutSeconds = v.ProbeDetail.TimeoutSeconds
	return &retval, nil
}

// RepoDetailTpuTPUSpec includes the requested fields of the GraphQL type TPUSpec.
type RepoDetailTpuTPUSpec struct {
	Type      string `json:"type"`
	Cores     int    `json:"cores"`
	TfVersion string `json:"tfVersion"`
}

// GetType returns RepoDetailTpuTPUSpec.Type, and is useful for accessing the field via an interface.
func (v *RepoDetailTpuTPUSpec) GetType() string { return v.Type }

// GetCores returns RepoDetailTpuTPUSpec.Cores, and is useful for accessing the field via an interface.
func (v *RepoDetailTpuTPUSpec) GetCores() int { return v.Cores }

// GetTfVersion returns RepoDetailTpuTPUSpec.TfVersion, and is useful for accessing the field via an interface.
func (v *RepoDetailTpuTPUSpec) GetTfVersion() string { return v.TfVersion }

// RepoDetailVolumesVolumeSpec includes the requested fields of the GraphQL type VolumeSpec.
type RepoDetailVolumesVolumeSpec struct {
	MountPath string `json:"mountPath"`
	Size      int    `json:"size"`
}

// GetMountPath returns RepoDetailVolumesVolumeSpec.MountPath, and is useful for accessing the field via an interface.
func (v *RepoDetailVolumesVolumeSpec) GetMountPath() string { return v.MountPath }

// GetSize returns RepoDetailVolumesVolumeSpec.Size, and is useful for accessing the field via an interface.
func (v *RepoDetailVolumesVolumeSpec) GetSize() int { return v.Size }

type RepoEvent string

const (
	RepoEventBuildSucceeded  RepoEvent = "BUILD_SUCCEEDED"
	RepoEventDeploySucceeded RepoEvent = "DEPLOY_SUCCEEDED"
)

type RepoFilter struct {
	Status *RepoStatusCriterion `json:"status"`
}

// GetStatus returns RepoFilter.Status, and is useful for accessing the field via an interface.
func (v *RepoFilter) GetStatus() *RepoStatusCriterion { return v.Status }

// RepoListItem includes the GraphQL fields of Repo requested by the fragment RepoListItem.
type RepoListItem struct {
	RepoCommon           `json:"-"`
	ProductionDeployment *RepoListItemProductionDeployment `json:"productionDeployment"`
}

// GetProductionDeployment returns RepoListItem.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetProductionDeployment() *RepoListItemProductionDeployment {
	return v.ProductionDeployment
}

// GetId returns RepoListItem.Id, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetId() uuid.UUID { return v.RepoCommon.Id }

// GetPath returns RepoListItem.Path, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetPath() string { return v.RepoCommon.Path }

// GetName returns RepoListItem.Name, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetName() string { return v.RepoCommon.Name }

// GetEnabled returns RepoListItem.Enabled, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetEnabled() bool { return v.RepoCommon.Enabled }

// GetSource returns RepoListItem.Source, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetSource() RepoCommonSourceRepoSource { return v.RepoCommon.Source }

// GetDeployTarget returns RepoListItem.DeployTarget, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetDeployTarget() *DeployTarget { return v.RepoCommon.DeployTarget }

// GetDeployType returns RepoListItem.DeployType, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetDeployType() *DeployType { return v.RepoCommon.DeployType }

// GetDeployService returns RepoListItem.DeployService, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetDeployService() *bool { return v.RepoCommon.DeployService }

// GetDeployJob returns RepoListItem.DeployJob, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetDeployJob() *bool { return v.RepoCommon.DeployJob }

// GetAwsAccount returns RepoListItem.AwsAccount, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns RepoListItem.GcpAccount, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns RepoListItem.Image, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetImage() *string { return v.RepoCommon.Image }

// GetCpu returns RepoListItem.Cpu, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetCpu() *string { return v.RepoCommon.Cpu }

// GetMemory returns RepoListItem.Memory, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetMemory() *string { return v.RepoCommon.Memory }

// GetGpu returns RepoListItem.Gpu, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetGpu() *RepoCommonGpuGPUSpec { return v.RepoCommon.Gpu }

// GetTpu returns RepoListItem.Tpu, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetTpu() *RepoCommonTpuTPUSpec { return v.RepoCommon.Tpu }

// GetUpdatedAt returns RepoListItem.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetUpdatedAt() time.Time { return v.RepoCommon.UpdatedAt }

// GetDisableReason returns RepoListItem.DisableReason, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetDisableReason() *DisableReason { return v.RepoCommon.DisableReason }

// GetCluster returns RepoListItem.Cluster, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetCluster() *RepoCommonCluster { return v.RepoCommon.Cluster }

// GetDatabaseProvider returns RepoListItem.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns RepoListItem.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetDatabaseEngine() *DatabaseEngineType { return v.RepoCommon.DatabaseEngine }

// GetAutoscaling returns RepoListItem.Autoscaling, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetAutoscaling() *RepoCommonAutoscaling { return v.RepoCommon.Autoscaling }

// GetOwner returns RepoListItem.Owner, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetOwner() RepoCommonOwnerUser { return v.RepoCommon.Owner }

// GetProject returns RepoListItem.Project, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetProject() *RepoCommonProject { return v.RepoCommon.Project }

// GetProjectEnvironment returns RepoListItem.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *RepoListItem) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *RepoListItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoListItem
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoListItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoListItem struct {
	ProductionDeployment *RepoListItemProductionDeployment `json:"productionDeployment"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *RepoListItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoListItem) __premarshalJSON() (*__premarshalRepoListItem, error) {
	var retval __premarshalRepoListItem

	retval.ProductionDeployment = v.ProductionDeployment
	retval.Id = v.RepoCommon.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// RepoListItemProductionDeployment includes the requested fields of the GraphQL type Deployment.
type RepoListItemProductionDeployment struct {
	Id               uuid.UUID `json:"id"`
	DeploymentCommon `json:"-"`
}

// GetId returns RepoListItemProductionDeployment.Id, and is useful for accessing the field via an interface.
func (v *RepoListItemProductionDeployment) GetId() uuid.UUID { return v.Id }

// GetDescription returns RepoListItemProductionDeployment.Description, and is useful for accessing the field via an interface.
func (v *RepoListItemProductionDeployment) GetDescription() *string {
	return v.DeploymentCommon.Description
}

// GetVersion returns RepoListItemProductionDeployment.Version, and is useful for accessing the field via an interface.
func (v *RepoListItemProductionDeployment) GetVersion() string { return v.DeploymentCommon.Version }

// GetStatus returns RepoListItemProductionDeployment.Status, and is useful for accessing the field via an interface.
func (v *RepoListItemProductionDeployment) GetStatus() DeploymentStatus {
	return v.DeploymentCommon.Status
}

// GetBranch returns RepoListItemProductionDeployment.Branch, and is useful for accessing the field via an interface.
func (v *RepoListItemProductionDeployment) GetBranch() *string { return v.DeploymentCommon.Branch }

// GetEndpoints returns RepoListItemProductionDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *RepoListItemProductionDeployment) GetEndpoints() []string {
	return v.DeploymentCommon.Endpoints
}

// GetPrivateEndpoint returns RepoListItemProductionDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *RepoListItemProductionDeployment) GetPrivateEndpoint() *string {
	return v.DeploymentCommon.PrivateEndpoint
}

// GetErrorMessage returns RepoListItemProductionDeployment.ErrorMessage, and is useful for accessing the field via an interface.
func (v *RepoListItemProductionDeployment) GetErrorMessage() *string {
	return v.DeploymentCommon.ErrorMessage
}

// GetDeployStatus returns RepoListItemProductionDeployment.DeployStatus, and is useful for accessing the field via an interface.
func (v *RepoListItemProductionDeployment) GetDeployStatus() *DeploymentCommonDeployStatus {
	return v.DeploymentCommon.DeployStatus
}

// GetBuild returns RepoListItemProductionDeployment.Build, and is useful for accessing the field via an interface.
func (v *RepoListItemProductionDeployment) GetBuild() *DeploymentCommonBuild {
	return v.DeploymentCommon.Build
}

// GetAlternativeImages returns RepoListItemProductionDeployment.AlternativeImages, and is useful for accessing the field via an interface.
func (v *RepoListItemProductionDeployment) GetAlternativeImages() []DeploymentCommonAlternativeImagesAlternativeImage {
	return v.DeploymentCommon.AlternativeImages
}

// GetUpdatedAt returns RepoListItemProductionDeployment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoListItemProductionDeployment) GetUpdatedAt() time.Time {
	return v.DeploymentCommon.UpdatedAt
}

// GetCreatedAt returns RepoListItemProductionDeployment.CreatedAt, and is useful for accessing the field via an interface.
func (v *RepoListItemProductionDeployment) GetCreatedAt() time.Time {
	return v.DeploymentCommon.CreatedAt
}

func (v *RepoListItemProductionDeployment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoListItemProductionDeployment
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoListItemProductionDeployment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoListItemProductionDeployment struct {
	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	Version string `json:"version"`

	Status DeploymentStatus `json:"status"`

	Branch *string `json:"branch"`

	Endpoints []string `json:"endpoints"`

	PrivateEndpoint *string `json:"privateEndpoint"`

	ErrorMessage *string `json:"errorMessage"`

	DeployStatus *DeploymentCommonDeployStatus `json:"deployStatus"`

	Build *DeploymentCommonBuild `json:"build"`

	AlternativeImages []DeploymentCommonAlternativeImagesAlternativeImage `json:"alternativeImages"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *RepoListItemProductionDeployment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoListItemProductionDeployment) __premarshalJSON() (*__premarshalRepoListItemProductionDeployment, error) {
	var retval __premarshalRepoListItemProductionDeployment

	retval.Id = v.Id
	retval.Description = v.DeploymentCommon.Description
	retval.Version = v.DeploymentCommon.Version
	retval.Status = v.DeploymentCommon.Status
	retval.Branch = v.DeploymentCommon.Branch
	retval.Endpoints = v.DeploymentCommon.Endpoints
	retval.PrivateEndpoint = v.DeploymentCommon.PrivateEndpoint
	retval.ErrorMessage = v.DeploymentCommon.ErrorMessage
	retval.DeployStatus = v.DeploymentCommon.DeployStatus
	retval.Build = v.DeploymentCommon.Build
	retval.AlternativeImages = v.DeploymentCommon.AlternativeImages
	retval.UpdatedAt = v.DeploymentCommon.UpdatedAt
	retval.CreatedAt = v.DeploymentCommon.CreatedAt
	return &retval, nil
}

// RepoNetwork includes the GraphQL fields of Repo requested by the fragment RepoNetwork.
type RepoNetwork struct {
	RepoCommon     `json:"-"`
	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`
	Cdns           []RepoNetworkCdnsCDN        `json:"cdns"`
	Ports          []RepoNetworkPortsPort      `json:"ports"`
	HostNetwork    *bool                       `json:"hostNetwork"`
	StaticIP       *bool                       `json:"staticIP"`
}

// GetClusterDomains returns RepoNetwork.ClusterDomains, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetClusterDomains() []RepoNetworkClusterDomains { return v.ClusterDomains }

// GetCdns returns RepoNetwork.Cdns, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetCdns() []RepoNetworkCdnsCDN { return v.Cdns }

// GetPorts returns RepoNetwork.Ports, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetPorts() []RepoNetworkPortsPort { return v.Ports }

// GetHostNetwork returns RepoNetwork.HostNetwork, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetHostNetwork() *bool { return v.HostNetwork }

// GetStaticIP returns RepoNetwork.StaticIP, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetStaticIP() *bool { return v.StaticIP }

// GetId returns RepoNetwork.Id, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetId() uuid.UUID { return v.RepoCommon.Id }

// GetPath returns RepoNetwork.Path, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetPath() string { return v.RepoCommon.Path }

// GetName returns RepoNetwork.Name, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetName() string { return v.RepoCommon.Name }

// GetEnabled returns RepoNetwork.Enabled, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetEnabled() bool { return v.RepoCommon.Enabled }

// GetSource returns RepoNetwork.Source, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetSource() RepoCommonSourceRepoSource { return v.RepoCommon.Source }

// GetDeployTarget returns RepoNetwork.DeployTarget, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetDeployTarget() *DeployTarget { return v.RepoCommon.DeployTarget }

// GetDeployType returns RepoNetwork.DeployType, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetDeployType() *DeployType { return v.RepoCommon.DeployType }

// GetDeployService returns RepoNetwork.DeployService, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetDeployService() *bool { return v.RepoCommon.DeployService }

// GetDeployJob returns RepoNetwork.DeployJob, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetDeployJob() *bool { return v.RepoCommon.DeployJob }

// GetAwsAccount returns RepoNetwork.AwsAccount, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetAwsAccount() *RepoCommonAwsAccountAWSAccount { return v.RepoCommon.AwsAccount }

// GetGcpAccount returns RepoNetwork.GcpAccount, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetGcpAccount() *RepoCommonGcpAccountGCPAccount { return v.RepoCommon.GcpAccount }

// GetImage returns RepoNetwork.Image, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetImage() *string { return v.RepoCommon.Image }

// GetCpu returns RepoNetwork.Cpu, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetCpu() *string { return v.RepoCommon.Cpu }

// GetMemory returns RepoNetwork.Memory, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetMemory() *string { return v.RepoCommon.Memory }

// GetGpu returns RepoNetwork.Gpu, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetGpu() *RepoCommonGpuGPUSpec { return v.RepoCommon.Gpu }

// GetTpu returns RepoNetwork.Tpu, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetTpu() *RepoCommonTpuTPUSpec { return v.RepoCommon.Tpu }

// GetUpdatedAt returns RepoNetwork.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetUpdatedAt() time.Time { return v.RepoCommon.UpdatedAt }

// GetDisableReason returns RepoNetwork.DisableReason, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetDisableReason() *DisableReason { return v.RepoCommon.DisableReason }

// GetCluster returns RepoNetwork.Cluster, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetCluster() *RepoCommonCluster { return v.RepoCommon.Cluster }

// GetDatabaseProvider returns RepoNetwork.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns RepoNetwork.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetDatabaseEngine() *DatabaseEngineType { return v.RepoCommon.DatabaseEngine }

// GetAutoscaling returns RepoNetwork.Autoscaling, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetAutoscaling() *RepoCommonAutoscaling { return v.RepoCommon.Autoscaling }

// GetOwner returns RepoNetwork.Owner, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetOwner() RepoCommonOwnerUser { return v.RepoCommon.Owner }

// GetProject returns RepoNetwork.Project, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetProject() *RepoCommonProject { return v.RepoCommon.Project }

// GetProjectEnvironment returns RepoNetwork.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *RepoNetwork) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *RepoNetwork) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoNetwork
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoNetwork = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoNetwork struct {
	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *RepoNetwork) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoNetwork) __premarshalJSON() (*__premarshalRepoNetwork, error) {
	var retval __premarshalRepoNetwork

	retval.ClusterDomains = v.ClusterDomains
	retval.Cdns = v.Cdns
	retval.Ports = v.Ports
	retval.HostNetwork = v.HostNetwork
	retval.StaticIP = v.StaticIP
	retval.Id = v.RepoCommon.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// RepoNetworkCdnsCDN includes the requested fields of the GraphQL type CDN.
type RepoNetworkCdnsCDN struct {
	Id        uuid.UUID `json:"id"`
	CDNDetail `json:"-"`
}

// GetId returns RepoNetworkCdnsCDN.Id, and is useful for accessing the field via an interface.
func (v *RepoNetworkCdnsCDN) GetId() uuid.UUID { return v.Id }

// GetDomains returns RepoNetworkCdnsCDN.Domains, and is useful for accessing the field via an interface.
func (v *RepoNetworkCdnsCDN) GetDomains() []CDNDetailDomainsCDNDomain { return v.CDNDetail.Domains }

// GetEndpoint returns RepoNetworkCdnsCDN.Endpoint, and is useful for accessing the field via an interface.
func (v *RepoNetworkCdnsCDN) GetEndpoint() *string { return v.CDNDetail.Endpoint }

// GetState returns RepoNetworkCdnsCDN.State, and is useful for accessing the field via an interface.
func (v *RepoNetworkCdnsCDN) GetState() string { return v.CDNDetail.State }

// GetCertificate returns RepoNetworkCdnsCDN.Certificate, and is useful for accessing the field via an interface.
func (v *RepoNetworkCdnsCDN) GetCertificate() *CDNDetailCertificate { return v.CDNDetail.Certificate }

func (v *RepoNetworkCdnsCDN) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoNetworkCdnsCDN
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoNetworkCdnsCDN = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CDNDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoNetworkCdnsCDN struct {
	Id uuid.UUID `json:"id"`

	Domains []CDNDetailDomainsCDNDomain `json:"domains"`

	Endpoint *string `json:"endpoint"`

	State string `json:"state"`

	Certificate *CDNDetailCertificate `json:"certificate"`
}

func (v *RepoNetworkCdnsCDN) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoNetworkCdnsCDN) __premarshalJSON() (*__premarshalRepoNetworkCdnsCDN, error) {
	var retval __premarshalRepoNetworkCdnsCDN

	retval.Id = v.Id
	retval.Domains = v.CDNDetail.Domains
	retval.Endpoint = v.CDNDetail.Endpoint
	retval.State = v.CDNDetail.State
	retval.Certificate = v.CDNDetail.Certificate
	return &retval, nil
}

// RepoNetworkClusterDomains includes the requested fields of the GraphQL type ClusterDomains.
type RepoNetworkClusterDomains struct {
	Id                   uuid.UUID `json:"id"`
	ClusterDomainsDetail `json:"-"`
}

// GetId returns RepoNetworkClusterDomains.Id, and is useful for accessing the field via an interface.
func (v *RepoNetworkClusterDomains) GetId() uuid.UUID { return v.Id }

// GetCluster returns RepoNetworkClusterDomains.Cluster, and is useful for accessing the field via an interface.
func (v *RepoNetworkClusterDomains) GetCluster() ClusterDomainsDetailCluster {
	return v.ClusterDomainsDetail.Cluster
}

// GetDomains returns RepoNetworkClusterDomains.Domains, and is useful for accessing the field via an interface.
func (v *RepoNetworkClusterDomains) GetDomains() []ClusterDomainsDetailDomainsCustomDomain {
	return v.ClusterDomainsDetail.Domains
}

func (v *RepoNetworkClusterDomains) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RepoNetworkClusterDomains
		graphql.NoUnmarshalJSON
	}
	firstPass.RepoNetworkClusterDomains = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDomainsDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRepoNetworkClusterDomains struct {
	Id uuid.UUID `json:"id"`

	Cluster ClusterDomainsDetailCluster `json:"cluster"`

	Domains []ClusterDomainsDetailDomainsCustomDomain `json:"domains"`
}

func (v *RepoNetworkClusterDomains) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RepoNetworkClusterDomains) __premarshalJSON() (*__premarshalRepoNetworkClusterDomains, error) {
	var retval __premarshalRepoNetworkClusterDomains

	retval.Id = v.Id
	retval.Cluster = v.ClusterDomainsDetail.Cluster
	retval.Domains = v.ClusterDomainsDetail.Domains
	return &retval, nil
}

// RepoNetworkPortsPort includes the requested fields of the GraphQL type Port.
type RepoNetworkPortsPort struct {
	Port         string `json:"port"`
	Protocol     string `json:"protocol"`
	Public       bool   `json:"public"`
	Https        bool   `json:"https"`
	Grpc         bool   `json:"grpc"`
	LoadBalancer bool   `json:"loadBalancer"`
}

// GetPort returns RepoNetworkPortsPort.Port, and is useful for accessing the field via an interface.
func (v *RepoNetworkPortsPort) GetPort() string { return v.Port }

// GetProtocol returns RepoNetworkPortsPort.Protocol, and is useful for accessing the field via an interface.
func (v *RepoNetworkPortsPort) GetProtocol() string { return v.Protocol }

// GetPublic returns RepoNetworkPortsPort.Public, and is useful for accessing the field via an interface.
func (v *RepoNetworkPortsPort) GetPublic() bool { return v.Public }

// GetHttps returns RepoNetworkPortsPort.Https, and is useful for accessing the field via an interface.
func (v *RepoNetworkPortsPort) GetHttps() bool { return v.Https }

// GetGrpc returns RepoNetworkPortsPort.Grpc, and is useful for accessing the field via an interface.
func (v *RepoNetworkPortsPort) GetGrpc() bool { return v.Grpc }

// GetLoadBalancer returns RepoNetworkPortsPort.LoadBalancer, and is useful for accessing the field via an interface.
func (v *RepoNetworkPortsPort) GetLoadBalancer() bool { return v.LoadBalancer }

// RepoPipelineLinkDetail includes the GraphQL fields of RepoPipelineLink requested by the fragment RepoPipelineLinkDetail.
type RepoPipelineLinkDetail struct {
	// - v0.RepoID
	Id           uuid.UUID                                  `json:"id"`
	Source       RepoPipelineLinkDetailSourceRepo           `json:"source"`
	SourceEvent  RepoEvent                                  `json:"sourceEvent"`
	TargetGroup  RepoPipelineLinkDetailTargetGroupRepoGroup `json:"targetGroup"`
	TargetAction RepoAction                                 `json:"targetAction"`
}

// GetId returns RepoPipelineLinkDetail.Id, and is useful for accessing the field via an interface.
func (v *RepoPipelineLinkDetail) GetId() uuid.UUID { return v.Id }

// GetSource returns RepoPipelineLinkDetail.Source, and is useful for accessing the field via an interface.
func (v *RepoPipelineLinkDetail) GetSource() RepoPipelineLinkDetailSourceRepo { return v.Source }

// GetSourceEvent returns RepoPipelineLinkDetail.SourceEvent, and is useful for accessing the field via an interface.
func (v *RepoPipelineLinkDetail) GetSourceEvent() RepoEvent { return v.SourceEvent }

// GetTargetGroup returns RepoPipelineLinkDetail.TargetGroup, and is useful for accessing the field via an interface.
func (v *RepoPipelineLinkDetail) GetTargetGroup() RepoPipelineLinkDetailTargetGroupRepoGroup {
	return v.TargetGroup
}

// GetTargetAction returns RepoPipelineLinkDetail.TargetAction, and is useful for accessing the field via an interface.
func (v *RepoPipelineLinkDetail) GetTargetAction() RepoAction { return v.TargetAction }

// RepoPipelineLinkDetailSourceRepo includes the requested fields of the GraphQL type Repo.
type RepoPipelineLinkDetailSourceRepo struct {
	// - v0.RepoID
	Id uuid.UUID `json:"id"`
}

// GetId returns RepoPipelineLinkDetailSourceRepo.Id, and is useful for accessing the field via an interface.
func (v *RepoPipelineLinkDetailSourceRepo) GetId() uuid.UUID { return v.Id }

// RepoPipelineLinkDetailTargetGroupRepoGroup includes the requested fields of the GraphQL type RepoGroup.
type RepoPipelineLinkDetailTargetGroupRepoGroup struct {
	Id       uuid.UUID                                                         `json:"id"`
	Selector *RepoPipelineLinkDetailTargetGroupRepoGroupSelectorLabelSelectors `json:"selector"`
}

// GetId returns RepoPipelineLinkDetailTargetGroupRepoGroup.Id, and is useful for accessing the field via an interface.
func (v *RepoPipelineLinkDetailTargetGroupRepoGroup) GetId() uuid.UUID { return v.Id }

// GetSelector returns RepoPipelineLinkDetailTargetGroupRepoGroup.Selector, and is useful for accessing the field via an interface.
func (v *RepoPipelineLinkDetailTargetGroupRepoGroup) GetSelector() *RepoPipelineLinkDetailTargetGroupRepoGroupSelectorLabelSelectors {
	return v.Selector
}

// RepoPipelineLinkDetailTargetGroupRepoGroupSelectorLabelSelectors includes the requested fields of the GraphQL type LabelSelectors.
type RepoPipelineLinkDetailTargetGroupRepoGroupSelectorLabelSelectors struct {
	MatchLabels *map[string]string `json:"matchLabels"`
}

// GetMatchLabels returns RepoPipelineLinkDetailTargetGroupRepoGroupSelectorLabelSelectors.MatchLabels, and is useful for accessing the field via an interface.
func (v *RepoPipelineLinkDetailTargetGroupRepoGroupSelectorLabelSelectors) GetMatchLabels() *map[string]string {
	return v.MatchLabels
}

type RepoSourceType string

const (
	RepoSourceTypeGithub       RepoSourceType = "GITHUB"
	RepoSourceTypeGithubPublic RepoSourceType = "GITHUB_PUBLIC"
	RepoSourceTypeGitlab       RepoSourceType = "GITLAB"
	RepoSourceTypeBitbucket    RepoSourceType = "BITBUCKET"
	RepoSourceTypeGit          RepoSourceType = "GIT"
	RepoSourceTypeDocker       RepoSourceType = "DOCKER"
	RepoSourceTypeDockerHub    RepoSourceType = "DOCKER_HUB"
	RepoSourceTypeHelm         RepoSourceType = "HELM"
	RepoSourceTypeTerraform    RepoSourceType = "TERRAFORM"
)

type RepoStatusCriterion struct {
	Value    *string                      `json:"value"`
	Operator *FilterCriterionOperatorType `json:"operator"`
}

// GetValue returns RepoStatusCriterion.Value, and is useful for accessing the field via an interface.
func (v *RepoStatusCriterion) GetValue() *string { return v.Value }

// GetOperator returns RepoStatusCriterion.Operator, and is useful for accessing the field via an interface.
func (v *RepoStatusCriterion) GetOperator() *FilterCriterionOperatorType { return v.Operator }

type ResourceAdapterFilter struct {
	Ids             *MultiEntityCriterion   `json:"ids"`
	RepoIds         *MultiEntityCriterion   `json:"repoIds"`
	ResourceIds     *MultiEntityCriterion   `json:"resourceIds"`
	DeployableIds   *MultiEntityCriterion   `json:"deployableIds"`
	Name            *StringCriterion        `json:"name"`
	Status          *AdapterStatusCriterion `json:"status"`
	ProjectName     *StringCriterion        `json:"projectName"`
	EnvironmentName *StringCriterion        `json:"environmentName"`
	// Active=true or Paused=false
	Active *BooleanCriterion `json:"active"`
}

// GetIds returns ResourceAdapterFilter.Ids, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetIds() *MultiEntityCriterion { return v.Ids }

// GetRepoIds returns ResourceAdapterFilter.RepoIds, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetRepoIds() *MultiEntityCriterion { return v.RepoIds }

// GetResourceIds returns ResourceAdapterFilter.ResourceIds, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetResourceIds() *MultiEntityCriterion { return v.ResourceIds }

// GetDeployableIds returns ResourceAdapterFilter.DeployableIds, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetDeployableIds() *MultiEntityCriterion { return v.DeployableIds }

// GetName returns ResourceAdapterFilter.Name, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetName() *StringCriterion { return v.Name }

// GetStatus returns ResourceAdapterFilter.Status, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetStatus() *AdapterStatusCriterion { return v.Status }

// GetProjectName returns ResourceAdapterFilter.ProjectName, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetProjectName() *StringCriterion { return v.ProjectName }

// GetEnvironmentName returns ResourceAdapterFilter.EnvironmentName, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetEnvironmentName() *StringCriterion { return v.EnvironmentName }

// GetActive returns ResourceAdapterFilter.Active, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetActive() *BooleanCriterion { return v.Active }

type ResourceBranchInput struct {
	ProductionBranch *string `json:"productionBranch"`
	AutoDeployBranch *bool   `json:"autoDeployBranch"`
	AutoStopBranch   *bool   `json:"autoStopBranch"`
	BranchIgnore     *string `json:"branchIgnore"`
	BranchStopIgnore *string `json:"branchStopIgnore"`
}

// GetProductionBranch returns ResourceBranchInput.ProductionBranch, and is useful for accessing the field via an interface.
func (v *ResourceBranchInput) GetProductionBranch() *string { return v.ProductionBranch }

// GetAutoDeployBranch returns ResourceBranchInput.AutoDeployBranch, and is useful for accessing the field via an interface.
func (v *ResourceBranchInput) GetAutoDeployBranch() *bool { return v.AutoDeployBranch }

// GetAutoStopBranch returns ResourceBranchInput.AutoStopBranch, and is useful for accessing the field via an interface.
func (v *ResourceBranchInput) GetAutoStopBranch() *bool { return v.AutoStopBranch }

// GetBranchIgnore returns ResourceBranchInput.BranchIgnore, and is useful for accessing the field via an interface.
func (v *ResourceBranchInput) GetBranchIgnore() *string { return v.BranchIgnore }

// GetBranchStopIgnore returns ResourceBranchInput.BranchStopIgnore, and is useful for accessing the field via an interface.
func (v *ResourceBranchInput) GetBranchStopIgnore() *string { return v.BranchStopIgnore }

type ResourceBuildInput struct {
	Build                    *ProjectBuildInput           `json:"build"`
	BuildTarget              *BuildTargetInput            `json:"buildTarget"`
	BuildResources           *ContainerResourcesSpecInput `json:"buildResources"`
	GitSubmodules            *GitSubmodulesType           `json:"gitSubmodules"`
	KanikoFlags              *KanikoFlagsInput            `json:"kanikoFlags"`
	NoBuildCache             *bool                        `json:"noBuildCache"`
	ContainerRegistryID      *uuid.UUID                   `json:"containerRegistryID"`
	ContainerCacheRepository *string                      `json:"containerCacheRepository"`
	ContainerRepository      *string                      `json:"containerRepository"`
}

// GetBuild returns ResourceBuildInput.Build, and is useful for accessing the field via an interface.
func (v *ResourceBuildInput) GetBuild() *ProjectBuildInput { return v.Build }

// GetBuildTarget returns ResourceBuildInput.BuildTarget, and is useful for accessing the field via an interface.
func (v *ResourceBuildInput) GetBuildTarget() *BuildTargetInput { return v.BuildTarget }

// GetBuildResources returns ResourceBuildInput.BuildResources, and is useful for accessing the field via an interface.
func (v *ResourceBuildInput) GetBuildResources() *ContainerResourcesSpecInput {
	return v.BuildResources
}

// GetGitSubmodules returns ResourceBuildInput.GitSubmodules, and is useful for accessing the field via an interface.
func (v *ResourceBuildInput) GetGitSubmodules() *GitSubmodulesType { return v.GitSubmodules }

// GetKanikoFlags returns ResourceBuildInput.KanikoFlags, and is useful for accessing the field via an interface.
func (v *ResourceBuildInput) GetKanikoFlags() *KanikoFlagsInput { return v.KanikoFlags }

// GetNoBuildCache returns ResourceBuildInput.NoBuildCache, and is useful for accessing the field via an interface.
func (v *ResourceBuildInput) GetNoBuildCache() *bool { return v.NoBuildCache }

// GetContainerRegistryID returns ResourceBuildInput.ContainerRegistryID, and is useful for accessing the field via an interface.
func (v *ResourceBuildInput) GetContainerRegistryID() *uuid.UUID { return v.ContainerRegistryID }

// GetContainerCacheRepository returns ResourceBuildInput.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *ResourceBuildInput) GetContainerCacheRepository() *string { return v.ContainerCacheRepository }

// GetContainerRepository returns ResourceBuildInput.ContainerRepository, and is useful for accessing the field via an interface.
func (v *ResourceBuildInput) GetContainerRepository() *string { return v.ContainerRepository }

type ResourceDatabaseInput struct {
	DeployTarget DatabaseDeployTargetInput `json:"deployTarget"`
	Engine       DatabaseEngineType        `json:"engine"`
	Version      string                    `json:"version"`
	Options      *DatabaseOptions          `json:"options"`
}

// GetDeployTarget returns ResourceDatabaseInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *ResourceDatabaseInput) GetDeployTarget() DatabaseDeployTargetInput { return v.DeployTarget }

// GetEngine returns ResourceDatabaseInput.Engine, and is useful for accessing the field via an interface.
func (v *ResourceDatabaseInput) GetEngine() DatabaseEngineType { return v.Engine }

// GetVersion returns ResourceDatabaseInput.Version, and is useful for accessing the field via an interface.
func (v *ResourceDatabaseInput) GetVersion() string { return v.Version }

// GetOptions returns ResourceDatabaseInput.Options, and is useful for accessing the field via an interface.
func (v *ResourceDatabaseInput) GetOptions() *DatabaseOptions { return v.Options }

type ResourceFilter struct {
	Ids           *MultiEntityCriterion `json:"ids"`
	DeployableIds *MultiEntityCriterion `json:"deployableIds"`
	UserIds       *MultiEntityCriterion `json:"userIds"`
}

// GetIds returns ResourceFilter.Ids, and is useful for accessing the field via an interface.
func (v *ResourceFilter) GetIds() *MultiEntityCriterion { return v.Ids }

// GetDeployableIds returns ResourceFilter.DeployableIds, and is useful for accessing the field via an interface.
func (v *ResourceFilter) GetDeployableIds() *MultiEntityCriterion { return v.DeployableIds }

// GetUserIds returns ResourceFilter.UserIds, and is useful for accessing the field via an interface.
func (v *ResourceFilter) GetUserIds() *MultiEntityCriterion { return v.UserIds }

type ResourceKubernetesAppInput struct {
	UseHumanReadableName          *bool                         `json:"useHumanReadableName"`
	DeployJob                     *bool                         `json:"deployJob"`
	DeployService                 *bool                         `json:"deployService"`
	ReleaseCommand                *string                       `json:"releaseCommand"`
	Envs                          []EnvVarInput                 `json:"envs"`
	RunCommand                    *string                       `json:"runCommand"`
	Volumes                       []VolumeInput                 `json:"volumes"`
	SecretMounts                  []KubernetesSecretMountInput  `json:"secretMounts"`
	Ports                         []PortInput                   `json:"ports"`
	DefaultIngressDomain          *string                       `json:"defaultIngressDomain"`
	StaticIP                      *bool                         `json:"staticIP"`
	Resources                     *ContainerResourcesSpecInput  `json:"resources"`
	BranchResources               *ContainerResourcesSpecInput  `json:"branchResources"`
	Replication                   []*ReplicationInput           `json:"replication"`
	Autoscaling                   *AutoscalingInput             `json:"autoscaling"`
	LogShipper                    *LogShipperInput              `json:"logShipper"`
	DatadogApmEnabled             *bool                         `json:"datadogApmEnabled"`
	PrometheusScrape              *PrometheusScrapeInput        `json:"prometheusScrape"`
	DeployStrategy                *DeployStrategy               `json:"deployStrategy"`
	PreStopSleep                  *int                          `json:"preStopSleep"`
	TerminationGracePeriodSeconds *int                          `json:"terminationGracePeriodSeconds"`
	ReadinessProbe                *ProbeInput                   `json:"readinessProbe"`
	LivenessProbe                 *ProbeInput                   `json:"livenessProbe"`
	StartupProbe                  *ProbeInput                   `json:"startupProbe"`
	AwsIamRole                    *string                       `json:"awsIamRole"`
	GcpServiceAccount             *string                       `json:"gcpServiceAccount"`
	Customization                 *KubernetesCustomizationInput `json:"customization"`
}

// GetUseHumanReadableName returns ResourceKubernetesAppInput.UseHumanReadableName, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetUseHumanReadableName() *bool { return v.UseHumanReadableName }

// GetDeployJob returns ResourceKubernetesAppInput.DeployJob, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetDeployJob() *bool { return v.DeployJob }

// GetDeployService returns ResourceKubernetesAppInput.DeployService, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetDeployService() *bool { return v.DeployService }

// GetReleaseCommand returns ResourceKubernetesAppInput.ReleaseCommand, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetReleaseCommand() *string { return v.ReleaseCommand }

// GetEnvs returns ResourceKubernetesAppInput.Envs, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetEnvs() []EnvVarInput { return v.Envs }

// GetRunCommand returns ResourceKubernetesAppInput.RunCommand, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetRunCommand() *string { return v.RunCommand }

// GetVolumes returns ResourceKubernetesAppInput.Volumes, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetVolumes() []VolumeInput { return v.Volumes }

// GetSecretMounts returns ResourceKubernetesAppInput.SecretMounts, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetSecretMounts() []KubernetesSecretMountInput {
	return v.SecretMounts
}

// GetPorts returns ResourceKubernetesAppInput.Ports, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetPorts() []PortInput { return v.Ports }

// GetDefaultIngressDomain returns ResourceKubernetesAppInput.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetDefaultIngressDomain() *string { return v.DefaultIngressDomain }

// GetStaticIP returns ResourceKubernetesAppInput.StaticIP, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetStaticIP() *bool { return v.StaticIP }

// GetResources returns ResourceKubernetesAppInput.Resources, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetResources() *ContainerResourcesSpecInput { return v.Resources }

// GetBranchResources returns ResourceKubernetesAppInput.BranchResources, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetBranchResources() *ContainerResourcesSpecInput {
	return v.BranchResources
}

// GetReplication returns ResourceKubernetesAppInput.Replication, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetReplication() []*ReplicationInput { return v.Replication }

// GetAutoscaling returns ResourceKubernetesAppInput.Autoscaling, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetAutoscaling() *AutoscalingInput { return v.Autoscaling }

// GetLogShipper returns ResourceKubernetesAppInput.LogShipper, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetLogShipper() *LogShipperInput { return v.LogShipper }

// GetDatadogApmEnabled returns ResourceKubernetesAppInput.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetDatadogApmEnabled() *bool { return v.DatadogApmEnabled }

// GetPrometheusScrape returns ResourceKubernetesAppInput.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetPrometheusScrape() *PrometheusScrapeInput {
	return v.PrometheusScrape
}

// GetDeployStrategy returns ResourceKubernetesAppInput.DeployStrategy, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetDeployStrategy() *DeployStrategy { return v.DeployStrategy }

// GetPreStopSleep returns ResourceKubernetesAppInput.PreStopSleep, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetPreStopSleep() *int { return v.PreStopSleep }

// GetTerminationGracePeriodSeconds returns ResourceKubernetesAppInput.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetTerminationGracePeriodSeconds() *int {
	return v.TerminationGracePeriodSeconds
}

// GetReadinessProbe returns ResourceKubernetesAppInput.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetReadinessProbe() *ProbeInput { return v.ReadinessProbe }

// GetLivenessProbe returns ResourceKubernetesAppInput.LivenessProbe, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetLivenessProbe() *ProbeInput { return v.LivenessProbe }

// GetStartupProbe returns ResourceKubernetesAppInput.StartupProbe, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetStartupProbe() *ProbeInput { return v.StartupProbe }

// GetAwsIamRole returns ResourceKubernetesAppInput.AwsIamRole, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetAwsIamRole() *string { return v.AwsIamRole }

// GetGcpServiceAccount returns ResourceKubernetesAppInput.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetGcpServiceAccount() *string { return v.GcpServiceAccount }

// GetCustomization returns ResourceKubernetesAppInput.Customization, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesAppInput) GetCustomization() *KubernetesCustomizationInput {
	return v.Customization
}

type ResourceKubernetesHelmInput struct {
	ReleaseName *string   `json:"releaseName"`
	Values      *string   `json:"values"`
	ValuesFiles []*string `json:"valuesFiles"`
}

// GetReleaseName returns ResourceKubernetesHelmInput.ReleaseName, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesHelmInput) GetReleaseName() *string { return v.ReleaseName }

// GetValues returns ResourceKubernetesHelmInput.Values, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesHelmInput) GetValues() *string { return v.Values }

// GetValuesFiles returns ResourceKubernetesHelmInput.ValuesFiles, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesHelmInput) GetValuesFiles() []*string { return v.ValuesFiles }

type ResourceKubernetesInput struct {
	DeployTarget *ProjectDeployInput              `json:"deployTarget"`
	Namespace    *string                          `json:"namespace"`
	App          *ResourceKubernetesAppInput      `json:"app"`
	Manifest     *ResourceKubernetesManifestInput `json:"manifest"`
	Helm         *ResourceKubernetesHelmInput     `json:"helm"`
}

// GetDeployTarget returns ResourceKubernetesInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesInput) GetDeployTarget() *ProjectDeployInput { return v.DeployTarget }

// GetNamespace returns ResourceKubernetesInput.Namespace, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesInput) GetNamespace() *string { return v.Namespace }

// GetApp returns ResourceKubernetesInput.App, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesInput) GetApp() *ResourceKubernetesAppInput { return v.App }

// GetManifest returns ResourceKubernetesInput.Manifest, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesInput) GetManifest() *ResourceKubernetesManifestInput { return v.Manifest }

// GetHelm returns ResourceKubernetesInput.Helm, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesInput) GetHelm() *ResourceKubernetesHelmInput { return v.Helm }

type ResourceKubernetesManifestInput struct {
	ManifestValue *string   `json:"manifestValue"`
	Manifests     []*string `json:"manifests"`
	KustomizeDirs []*string `json:"kustomizeDirs"`
}

// GetManifestValue returns ResourceKubernetesManifestInput.ManifestValue, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesManifestInput) GetManifestValue() *string { return v.ManifestValue }

// GetManifests returns ResourceKubernetesManifestInput.Manifests, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesManifestInput) GetManifests() []*string { return v.Manifests }

// GetKustomizeDirs returns ResourceKubernetesManifestInput.KustomizeDirs, and is useful for accessing the field via an interface.
func (v *ResourceKubernetesManifestInput) GetKustomizeDirs() []*string { return v.KustomizeDirs }

type ResourceServerlessInput struct {
	DeployService       *bool                         `json:"deployService"`
	DeployTarget        *ProjectDeployInput           `json:"deployTarget"`
	Envs                []*EnvVarInput                `json:"envs"`
	Ports               []PortInput                   `json:"ports"`
	ServerlessResources *ServerlessResourcesSpecInput `json:"serverlessResources"`
}

// GetDeployService returns ResourceServerlessInput.DeployService, and is useful for accessing the field via an interface.
func (v *ResourceServerlessInput) GetDeployService() *bool { return v.DeployService }

// GetDeployTarget returns ResourceServerlessInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *ResourceServerlessInput) GetDeployTarget() *ProjectDeployInput { return v.DeployTarget }

// GetEnvs returns ResourceServerlessInput.Envs, and is useful for accessing the field via an interface.
func (v *ResourceServerlessInput) GetEnvs() []*EnvVarInput { return v.Envs }

// GetPorts returns ResourceServerlessInput.Ports, and is useful for accessing the field via an interface.
func (v *ResourceServerlessInput) GetPorts() []PortInput { return v.Ports }

// GetServerlessResources returns ResourceServerlessInput.ServerlessResources, and is useful for accessing the field via an interface.
func (v *ResourceServerlessInput) GetServerlessResources() *ServerlessResourcesSpecInput {
	return v.ServerlessResources
}

type ResourceTerraformInput struct {
	DeployTarget *ProjectDeployInput `json:"deployTarget"`
	Variables    *string             `json:"variables"`
}

// GetDeployTarget returns ResourceTerraformInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *ResourceTerraformInput) GetDeployTarget() *ProjectDeployInput { return v.DeployTarget }

// GetVariables returns ResourceTerraformInput.Variables, and is useful for accessing the field via an interface.
func (v *ResourceTerraformInput) GetVariables() *string { return v.Variables }

type ResourceWorkflowInput struct {
	AutoRetry            *bool      `json:"autoRetry"`
	AutoRollback         *bool      `json:"autoRollback"`
	ManualDeploy         *bool      `json:"manualDeploy"`
	PipelineClusterID    *uuid.UUID `json:"pipelineClusterID"`
	DeployTimeoutSeconds *int       `json:"deployTimeoutSeconds"`
}

// GetAutoRetry returns ResourceWorkflowInput.AutoRetry, and is useful for accessing the field via an interface.
func (v *ResourceWorkflowInput) GetAutoRetry() *bool { return v.AutoRetry }

// GetAutoRollback returns ResourceWorkflowInput.AutoRollback, and is useful for accessing the field via an interface.
func (v *ResourceWorkflowInput) GetAutoRollback() *bool { return v.AutoRollback }

// GetManualDeploy returns ResourceWorkflowInput.ManualDeploy, and is useful for accessing the field via an interface.
func (v *ResourceWorkflowInput) GetManualDeploy() *bool { return v.ManualDeploy }

// GetPipelineClusterID returns ResourceWorkflowInput.PipelineClusterID, and is useful for accessing the field via an interface.
func (v *ResourceWorkflowInput) GetPipelineClusterID() *uuid.UUID { return v.PipelineClusterID }

// GetDeployTimeoutSeconds returns ResourceWorkflowInput.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *ResourceWorkflowInput) GetDeployTimeoutSeconds() *int { return v.DeployTimeoutSeconds }

// Resources includes the GraphQL fields of ContainerResourcesSpec requested by the fragment Resources.
type Resources struct {
	Cpu              *float64                             `json:"cpu"`
	Memory           *float64                             `json:"memory"`
	EphemeralStorage *float64                             `json:"ephemeralStorage"`
	Spot             *bool                                `json:"spot"`
	Accelerator      *ResourcesAcceleratorAcceleratorSpec `json:"accelerator"`
}

// GetCpu returns Resources.Cpu, and is useful for accessing the field via an interface.
func (v *Resources) GetCpu() *float64 { return v.Cpu }

// GetMemory returns Resources.Memory, and is useful for accessing the field via an interface.
func (v *Resources) GetMemory() *float64 { return v.Memory }

// GetEphemeralStorage returns Resources.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *Resources) GetEphemeralStorage() *float64 { return v.EphemeralStorage }

// GetSpot returns Resources.Spot, and is useful for accessing the field via an interface.
func (v *Resources) GetSpot() *bool { return v.Spot }

// GetAccelerator returns Resources.Accelerator, and is useful for accessing the field via an interface.
func (v *Resources) GetAccelerator() *ResourcesAcceleratorAcceleratorSpec { return v.Accelerator }

// ResourcesAcceleratorAcceleratorSpec includes the requested fields of the GraphQL type AcceleratorSpec.
type ResourcesAcceleratorAcceleratorSpec struct {
	Type  *string `json:"type"`
	Count *int    `json:"count"`
}

// GetType returns ResourcesAcceleratorAcceleratorSpec.Type, and is useful for accessing the field via an interface.
func (v *ResourcesAcceleratorAcceleratorSpec) GetType() *string { return v.Type }

// GetCount returns ResourcesAcceleratorAcceleratorSpec.Count, and is useful for accessing the field via an interface.
func (v *ResourcesAcceleratorAcceleratorSpec) GetCount() *int { return v.Count }

type RunJobInput struct {
	Id         uuid.UUID     `json:"id"`
	RunCommand *string       `json:"runCommand"`
	Envs       []EnvVarInput `json:"envs"`
	Build      *bool         `json:"build"`
}

// GetId returns RunJobInput.Id, and is useful for accessing the field via an interface.
func (v *RunJobInput) GetId() uuid.UUID { return v.Id }

// GetRunCommand returns RunJobInput.RunCommand, and is useful for accessing the field via an interface.
func (v *RunJobInput) GetRunCommand() *string { return v.RunCommand }

// GetEnvs returns RunJobInput.Envs, and is useful for accessing the field via an interface.
func (v *RunJobInput) GetEnvs() []EnvVarInput { return v.Envs }

// GetBuild returns RunJobInput.Build, and is useful for accessing the field via an interface.
func (v *RunJobInput) GetBuild() *bool { return v.Build }

type S3BucketBackendInput struct {
	AwsAccountID uuid.UUID `json:"awsAccountID"`
	Region       string    `json:"region"`
	BucketName   string    `json:"bucketName"`
	Key          *string   `json:"key"`
}

// GetAwsAccountID returns S3BucketBackendInput.AwsAccountID, and is useful for accessing the field via an interface.
func (v *S3BucketBackendInput) GetAwsAccountID() uuid.UUID { return v.AwsAccountID }

// GetRegion returns S3BucketBackendInput.Region, and is useful for accessing the field via an interface.
func (v *S3BucketBackendInput) GetRegion() string { return v.Region }

// GetBucketName returns S3BucketBackendInput.BucketName, and is useful for accessing the field via an interface.
func (v *S3BucketBackendInput) GetBucketName() string { return v.BucketName }

// GetKey returns S3BucketBackendInput.Key, and is useful for accessing the field via an interface.
func (v *S3BucketBackendInput) GetKey() *string { return v.Key }

type SearchHelmChartsInput struct {
	First *int    `json:"first"`
	After *string `json:"after"`
	Query *string `json:"query"`
}

// GetFirst returns SearchHelmChartsInput.First, and is useful for accessing the field via an interface.
func (v *SearchHelmChartsInput) GetFirst() *int { return v.First }

// GetAfter returns SearchHelmChartsInput.After, and is useful for accessing the field via an interface.
func (v *SearchHelmChartsInput) GetAfter() *string { return v.After }

// GetQuery returns SearchHelmChartsInput.Query, and is useful for accessing the field via an interface.
func (v *SearchHelmChartsInput) GetQuery() *string { return v.Query }

type ServerlessResourcesSpecInput struct {
	Cpu    *float64 `json:"cpu"`
	Memory float64  `json:"memory"`
}

// GetCpu returns ServerlessResourcesSpecInput.Cpu, and is useful for accessing the field via an interface.
func (v *ServerlessResourcesSpecInput) GetCpu() *float64 { return v.Cpu }

// GetMemory returns ServerlessResourcesSpecInput.Memory, and is useful for accessing the field via an interface.
func (v *ServerlessResourcesSpecInput) GetMemory() float64 { return v.Memory }

type SetRepoEnvsInput struct {
	Id   uuid.UUID     `json:"id"`
	Envs []EnvVarInput `json:"envs"`
}

// GetId returns SetRepoEnvsInput.Id, and is useful for accessing the field via an interface.
func (v *SetRepoEnvsInput) GetId() uuid.UUID { return v.Id }

// GetEnvs returns SetRepoEnvsInput.Envs, and is useful for accessing the field via an interface.
func (v *SetRepoEnvsInput) GetEnvs() []EnvVarInput { return v.Envs }

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

type SortInput struct {
	Direction *SortDirection `json:"direction"`
	Field     *string        `json:"field"`
}

// GetDirection returns SortInput.Direction, and is useful for accessing the field via an interface.
func (v *SortInput) GetDirection() *SortDirection { return v.Direction }

// GetField returns SortInput.Field, and is useful for accessing the field via an interface.
func (v *SortInput) GetField() *string { return v.Field }

type SourceInput struct {
	Git               *GitSourceInput               `json:"git"`
	TerraformRegistry *TerraformRegistrySourceInput `json:"terraformRegistry"`
	HelmRepository    *HelmRepositorySourceInput    `json:"helmRepository"`
	ContainerRegistry *ContainerRegistrySourceInput `json:"containerRegistry"`
}

// GetGit returns SourceInput.Git, and is useful for accessing the field via an interface.
func (v *SourceInput) GetGit() *GitSourceInput { return v.Git }

// GetTerraformRegistry returns SourceInput.TerraformRegistry, and is useful for accessing the field via an interface.
func (v *SourceInput) GetTerraformRegistry() *TerraformRegistrySourceInput {
	return v.TerraformRegistry
}

// GetHelmRepository returns SourceInput.HelmRepository, and is useful for accessing the field via an interface.
func (v *SourceInput) GetHelmRepository() *HelmRepositorySourceInput { return v.HelmRepository }

// GetContainerRegistry returns SourceInput.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *SourceInput) GetContainerRegistry() *ContainerRegistrySourceInput {
	return v.ContainerRegistry
}

type StringCriterion struct {
	Value    *string                      `json:"value"`
	Operator *FilterCriterionOperatorType `json:"operator"`
}

// GetValue returns StringCriterion.Value, and is useful for accessing the field via an interface.
func (v *StringCriterion) GetValue() *string { return v.Value }

// GetOperator returns StringCriterion.Operator, and is useful for accessing the field via an interface.
func (v *StringCriterion) GetOperator() *FilterCriterionOperatorType { return v.Operator }

// SubgroupListItem includes the GraphQL fields of ProjectEnvironment requested by the fragment SubgroupListItem.
type SubgroupListItem struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetId returns SubgroupListItem.Id, and is useful for accessing the field via an interface.
func (v *SubgroupListItem) GetId() uuid.UUID { return v.Id }

// GetName returns SubgroupListItem.Name, and is useful for accessing the field via an interface.
func (v *SubgroupListItem) GetName() string { return v.Name }

// GetUpdatedAt returns SubgroupListItem.UpdatedAt, and is useful for accessing the field via an interface.
func (v *SubgroupListItem) GetUpdatedAt() time.Time { return v.UpdatedAt }

type SubscriptionCart struct {
	PlanTierSku    uuid.UUID `json:"planTierSku"`
	ProjectPackSku uuid.UUID `json:"projectPackSku"`
	SupportTierSku uuid.UUID `json:"supportTierSku"`
	ApiAccessSku   uuid.UUID `json:"apiAccessSku"`
}

// GetPlanTierSku returns SubscriptionCart.PlanTierSku, and is useful for accessing the field via an interface.
func (v *SubscriptionCart) GetPlanTierSku() uuid.UUID { return v.PlanTierSku }

// GetProjectPackSku returns SubscriptionCart.ProjectPackSku, and is useful for accessing the field via an interface.
func (v *SubscriptionCart) GetProjectPackSku() uuid.UUID { return v.ProjectPackSku }

// GetSupportTierSku returns SubscriptionCart.SupportTierSku, and is useful for accessing the field via an interface.
func (v *SubscriptionCart) GetSupportTierSku() uuid.UUID { return v.SupportTierSku }

// GetApiAccessSku returns SubscriptionCart.ApiAccessSku, and is useful for accessing the field via an interface.
func (v *SubscriptionCart) GetApiAccessSku() uuid.UUID { return v.ApiAccessSku }

type SuggestProjectNameInput struct {
	Name *string `json:"name"`
	Type *string `json:"type"`
}

// GetName returns SuggestProjectNameInput.Name, and is useful for accessing the field via an interface.
func (v *SuggestProjectNameInput) GetName() *string { return v.Name }

// GetType returns SuggestProjectNameInput.Type, and is useful for accessing the field via an interface.
func (v *SuggestProjectNameInput) GetType() *string { return v.Type }

type SuggestTemplateNameInput struct {
	Id   uuid.UUID `json:"id"`
	Name *string   `json:"name"`
}

// GetId returns SuggestTemplateNameInput.Id, and is useful for accessing the field via an interface.
func (v *SuggestTemplateNameInput) GetId() uuid.UUID { return v.Id }

// GetName returns SuggestTemplateNameInput.Name, and is useful for accessing the field via an interface.
func (v *SuggestTemplateNameInput) GetName() *string { return v.Name }

type SyslogIntegrationInput struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Mode string `json:"mode"`
}

// GetHost returns SyslogIntegrationInput.Host, and is useful for accessing the field via an interface.
func (v *SyslogIntegrationInput) GetHost() string { return v.Host }

// GetPort returns SyslogIntegrationInput.Port, and is useful for accessing the field via an interface.
func (v *SyslogIntegrationInput) GetPort() string { return v.Port }

// GetMode returns SyslogIntegrationInput.Mode, and is useful for accessing the field via an interface.
func (v *SyslogIntegrationInput) GetMode() string { return v.Mode }

type TPUInput struct {
	Type      string `json:"type"`
	Cores     int    `json:"cores"`
	TfVersion string `json:"tfVersion"`
}

// GetType returns TPUInput.Type, and is useful for accessing the field via an interface.
func (v *TPUInput) GetType() string { return v.Type }

// GetCores returns TPUInput.Cores, and is useful for accessing the field via an interface.
func (v *TPUInput) GetCores() int { return v.Cores }

// GetTfVersion returns TPUInput.TfVersion, and is useful for accessing the field via an interface.
func (v *TPUInput) GetTfVersion() string { return v.TfVersion }

// TeamCommon includes the GraphQL fields of Team requested by the fragment TeamCommon.
type TeamCommon struct {
	Id   uuid.UUID      `json:"id"`
	Plan TeamCommonPlan `json:"plan"`
	User TeamCommonUser `json:"user"`
}

// GetId returns TeamCommon.Id, and is useful for accessing the field via an interface.
func (v *TeamCommon) GetId() uuid.UUID { return v.Id }

// GetPlan returns TeamCommon.Plan, and is useful for accessing the field via an interface.
func (v *TeamCommon) GetPlan() TeamCommonPlan { return v.Plan }

// GetUser returns TeamCommon.User, and is useful for accessing the field via an interface.
func (v *TeamCommon) GetUser() TeamCommonUser { return v.User }

// TeamCommonPlan includes the requested fields of the GraphQL type Plan.
type TeamCommonPlan struct {
	Tier          PlanTier           `json:"tier"`
	BillingPeriod *PlanBillingPeriod `json:"billingPeriod"`
}

// GetTier returns TeamCommonPlan.Tier, and is useful for accessing the field via an interface.
func (v *TeamCommonPlan) GetTier() PlanTier { return v.Tier }

// GetBillingPeriod returns TeamCommonPlan.BillingPeriod, and is useful for accessing the field via an interface.
func (v *TeamCommonPlan) GetBillingPeriod() *PlanBillingPeriod { return v.BillingPeriod }

// TeamCommonUser includes the requested fields of the GraphQL type User.
type TeamCommonUser struct {
	Id         uuid.UUID `json:"id"`
	UserCommon `json:"-"`
}

// GetId returns TeamCommonUser.Id, and is useful for accessing the field via an interface.
func (v *TeamCommonUser) GetId() uuid.UUID { return v.Id }

// GetEmail returns TeamCommonUser.Email, and is useful for accessing the field via an interface.
func (v *TeamCommonUser) GetEmail() *string { return v.UserCommon.Email }

// GetCreatedAt returns TeamCommonUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *TeamCommonUser) GetCreatedAt() *time.Time { return v.UserCommon.CreatedAt }

// GetFreeTrialEndsAt returns TeamCommonUser.FreeTrialEndsAt, and is useful for accessing the field via an interface.
func (v *TeamCommonUser) GetFreeTrialEndsAt() *time.Time { return v.UserCommon.FreeTrialEndsAt }

// GetHasPaymentMethod returns TeamCommonUser.HasPaymentMethod, and is useful for accessing the field via an interface.
func (v *TeamCommonUser) GetHasPaymentMethod() *bool { return v.UserCommon.HasPaymentMethod }

// GetPaymentError returns TeamCommonUser.PaymentError, and is useful for accessing the field via an interface.
func (v *TeamCommonUser) GetPaymentError() *string { return v.UserCommon.PaymentError }

// GetPaymentAuthorizationError returns TeamCommonUser.PaymentAuthorizationError, and is useful for accessing the field via an interface.
func (v *TeamCommonUser) GetPaymentAuthorizationError() *string {
	return v.UserCommon.PaymentAuthorizationError
}

// GetAdvanced returns TeamCommonUser.Advanced, and is useful for accessing the field via an interface.
func (v *TeamCommonUser) GetAdvanced() *bool { return v.UserCommon.Advanced }

// GetName returns TeamCommonUser.Name, and is useful for accessing the field via an interface.
func (v *TeamCommonUser) GetName() string { return v.UserCommon.UserPublicCommon.Name }

// GetLogin returns TeamCommonUser.Login, and is useful for accessing the field via an interface.
func (v *TeamCommonUser) GetLogin() string { return v.UserCommon.UserPublicCommon.Login }

// GetAvatar returns TeamCommonUser.Avatar, and is useful for accessing the field via an interface.
func (v *TeamCommonUser) GetAvatar() *string { return v.UserCommon.UserPublicCommon.Avatar }

// GetIsTeam returns TeamCommonUser.IsTeam, and is useful for accessing the field via an interface.
func (v *TeamCommonUser) GetIsTeam() *bool { return v.UserCommon.UserPublicCommon.IsTeam }

func (v *TeamCommonUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TeamCommonUser
		graphql.NoUnmarshalJSON
	}
	firstPass.TeamCommonUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalTeamCommonUser struct {
	Id uuid.UUID `json:"id"`

	Email *string `json:"email"`

	CreatedAt *time.Time `json:"createdAt"`

	FreeTrialEndsAt *time.Time `json:"freeTrialEndsAt"`

	HasPaymentMethod *bool `json:"hasPaymentMethod"`

	PaymentError *string `json:"paymentError"`

	PaymentAuthorizationError *string `json:"paymentAuthorizationError"`

	Advanced *bool `json:"advanced"`

	Name string `json:"name"`

	Login string `json:"login"`

	Avatar *string `json:"avatar"`

	IsTeam *bool `json:"isTeam"`
}

func (v *TeamCommonUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TeamCommonUser) __premarshalJSON() (*__premarshalTeamCommonUser, error) {
	var retval __premarshalTeamCommonUser

	retval.Id = v.Id
	retval.Email = v.UserCommon.Email
	retval.CreatedAt = v.UserCommon.CreatedAt
	retval.FreeTrialEndsAt = v.UserCommon.FreeTrialEndsAt
	retval.HasPaymentMethod = v.UserCommon.HasPaymentMethod
	retval.PaymentError = v.UserCommon.PaymentError
	retval.PaymentAuthorizationError = v.UserCommon.PaymentAuthorizationError
	retval.Advanced = v.UserCommon.Advanced
	retval.Name = v.UserCommon.UserPublicCommon.Name
	retval.Login = v.UserCommon.UserPublicCommon.Login
	retval.Avatar = v.UserCommon.UserPublicCommon.Avatar
	retval.IsTeam = v.UserCommon.UserPublicCommon.IsTeam
	return &retval, nil
}

// TeamDetail includes the GraphQL fields of Team requested by the fragment TeamDetail.
type TeamDetail struct {
	Id         uuid.UUID `json:"id"`
	TeamCommon `json:"-"`
	User       TeamDetailUser `json:"user"`
}

// GetId returns TeamDetail.Id, and is useful for accessing the field via an interface.
func (v *TeamDetail) GetId() uuid.UUID { return v.Id }

// GetUser returns TeamDetail.User, and is useful for accessing the field via an interface.
func (v *TeamDetail) GetUser() TeamDetailUser { return v.User }

// GetPlan returns TeamDetail.Plan, and is useful for accessing the field via an interface.
func (v *TeamDetail) GetPlan() TeamCommonPlan { return v.TeamCommon.Plan }

func (v *TeamDetail) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TeamDetail
		graphql.NoUnmarshalJSON
	}
	firstPass.TeamDetail = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalTeamDetail struct {
	Id uuid.UUID `json:"id"`

	User TeamDetailUser `json:"user"`

	Plan TeamCommonPlan `json:"plan"`
}

func (v *TeamDetail) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TeamDetail) __premarshalJSON() (*__premarshalTeamDetail, error) {
	var retval __premarshalTeamDetail

	retval.Id = v.Id
	retval.User = v.User
	retval.Plan = v.TeamCommon.Plan
	return &retval, nil
}

// TeamDetailUser includes the requested fields of the GraphQL type User.
type TeamDetailUser struct {
	Id         uuid.UUID `json:"id"`
	UserDetail `json:"-"`
}

// GetId returns TeamDetailUser.Id, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetId() uuid.UUID { return v.Id }

// GetHasZeetCloud returns TeamDetailUser.HasZeetCloud, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetHasZeetCloud() *bool { return v.UserDetail.HasZeetCloud }

// GetHasOnboarded returns TeamDetailUser.HasOnboarded, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetHasOnboarded() *bool { return v.UserDetail.HasOnboarded }

// GetCanDeploy returns TeamDetailUser.CanDeploy, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetCanDeploy() *bool { return v.UserDetail.CanDeploy }

// GetEmail returns TeamDetailUser.Email, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetEmail() *string { return v.UserDetail.UserCommon.Email }

// GetCreatedAt returns TeamDetailUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetCreatedAt() *time.Time { return v.UserDetail.UserCommon.CreatedAt }

// GetFreeTrialEndsAt returns TeamDetailUser.FreeTrialEndsAt, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetFreeTrialEndsAt() *time.Time {
	return v.UserDetail.UserCommon.FreeTrialEndsAt
}

// GetHasPaymentMethod returns TeamDetailUser.HasPaymentMethod, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetHasPaymentMethod() *bool { return v.UserDetail.UserCommon.HasPaymentMethod }

// GetPaymentError returns TeamDetailUser.PaymentError, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetPaymentError() *string { return v.UserDetail.UserCommon.PaymentError }

// GetPaymentAuthorizationError returns TeamDetailUser.PaymentAuthorizationError, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetPaymentAuthorizationError() *string {
	return v.UserDetail.UserCommon.PaymentAuthorizationError
}

// GetAdvanced returns TeamDetailUser.Advanced, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetAdvanced() *bool { return v.UserDetail.UserCommon.Advanced }

// GetName returns TeamDetailUser.Name, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetName() string { return v.UserDetail.UserCommon.UserPublicCommon.Name }

// GetLogin returns TeamDetailUser.Login, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetLogin() string { return v.UserDetail.UserCommon.UserPublicCommon.Login }

// GetAvatar returns TeamDetailUser.Avatar, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetAvatar() *string { return v.UserDetail.UserCommon.UserPublicCommon.Avatar }

// GetIsTeam returns TeamDetailUser.IsTeam, and is useful for accessing the field via an interface.
func (v *TeamDetailUser) GetIsTeam() *bool { return v.UserDetail.UserCommon.UserPublicCommon.IsTeam }

func (v *TeamDetailUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TeamDetailUser
		graphql.NoUnmarshalJSON
	}
	firstPass.TeamDetailUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalTeamDetailUser struct {
	Id uuid.UUID `json:"id"`

	HasZeetCloud *bool `json:"hasZeetCloud"`

	HasOnboarded *bool `json:"hasOnboarded"`

	CanDeploy *bool `json:"canDeploy"`

	Email *string `json:"email"`

	CreatedAt *time.Time `json:"createdAt"`

	FreeTrialEndsAt *time.Time `json:"freeTrialEndsAt"`

	HasPaymentMethod *bool `json:"hasPaymentMethod"`

	PaymentError *string `json:"paymentError"`

	PaymentAuthorizationError *string `json:"paymentAuthorizationError"`

	Advanced *bool `json:"advanced"`

	Name string `json:"name"`

	Login string `json:"login"`

	Avatar *string `json:"avatar"`

	IsTeam *bool `json:"isTeam"`
}

func (v *TeamDetailUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TeamDetailUser) __premarshalJSON() (*__premarshalTeamDetailUser, error) {
	var retval __premarshalTeamDetailUser

	retval.Id = v.Id
	retval.HasZeetCloud = v.UserDetail.HasZeetCloud
	retval.HasOnboarded = v.UserDetail.HasOnboarded
	retval.CanDeploy = v.UserDetail.CanDeploy
	retval.Email = v.UserDetail.UserCommon.Email
	retval.CreatedAt = v.UserDetail.UserCommon.CreatedAt
	retval.FreeTrialEndsAt = v.UserDetail.UserCommon.FreeTrialEndsAt
	retval.HasPaymentMethod = v.UserDetail.UserCommon.HasPaymentMethod
	retval.PaymentError = v.UserDetail.UserCommon.PaymentError
	retval.PaymentAuthorizationError = v.UserDetail.UserCommon.PaymentAuthorizationError
	retval.Advanced = v.UserDetail.UserCommon.Advanced
	retval.Name = v.UserDetail.UserCommon.UserPublicCommon.Name
	retval.Login = v.UserDetail.UserCommon.UserPublicCommon.Login
	retval.Avatar = v.UserDetail.UserCommon.UserPublicCommon.Avatar
	retval.IsTeam = v.UserDetail.UserCommon.UserPublicCommon.IsTeam
	return &retval, nil
}

// TeamInvite includes the GraphQL fields of TeamMemberInvitation requested by the fragment TeamInvite.
type TeamInvite struct {
	Id        uuid.UUID      `json:"id"`
	Role      TeamMemberRole `json:"role"`
	Link      string         `json:"link"`
	Email     *string        `json:"email"`
	ExpiresAt *time.Time     `json:"expiresAt"`
	CreatedAt time.Time      `json:"createdAt"`
}

// GetId returns TeamInvite.Id, and is useful for accessing the field via an interface.
func (v *TeamInvite) GetId() uuid.UUID { return v.Id }

// GetRole returns TeamInvite.Role, and is useful for accessing the field via an interface.
func (v *TeamInvite) GetRole() TeamMemberRole { return v.Role }

// GetLink returns TeamInvite.Link, and is useful for accessing the field via an interface.
func (v *TeamInvite) GetLink() string { return v.Link }

// GetEmail returns TeamInvite.Email, and is useful for accessing the field via an interface.
func (v *TeamInvite) GetEmail() *string { return v.Email }

// GetExpiresAt returns TeamInvite.ExpiresAt, and is useful for accessing the field via an interface.
func (v *TeamInvite) GetExpiresAt() *time.Time { return v.ExpiresAt }

// GetCreatedAt returns TeamInvite.CreatedAt, and is useful for accessing the field via an interface.
func (v *TeamInvite) GetCreatedAt() time.Time { return v.CreatedAt }

// TeamMember includes the GraphQL fields of Team requested by the fragment TeamMember.
type TeamMember struct {
	Id                uuid.UUID                                         `json:"id"`
	Members           []TeamMemberMembersUserTeamEdge                   `json:"members"`
	MemberInvitations []TeamMemberMemberInvitationsTeamMemberInvitation `json:"memberInvitations"`
}

// GetId returns TeamMember.Id, and is useful for accessing the field via an interface.
func (v *TeamMember) GetId() uuid.UUID { return v.Id }

// GetMembers returns TeamMember.Members, and is useful for accessing the field via an interface.
func (v *TeamMember) GetMembers() []TeamMemberMembersUserTeamEdge { return v.Members }

// GetMemberInvitations returns TeamMember.MemberInvitations, and is useful for accessing the field via an interface.
func (v *TeamMember) GetMemberInvitations() []TeamMemberMemberInvitationsTeamMemberInvitation {
	return v.MemberInvitations
}

// TeamMemberMemberInvitationsTeamMemberInvitation includes the requested fields of the GraphQL type TeamMemberInvitation.
type TeamMemberMemberInvitationsTeamMemberInvitation struct {
	Id         uuid.UUID `json:"id"`
	TeamInvite `json:"-"`
}

// GetId returns TeamMemberMemberInvitationsTeamMemberInvitation.Id, and is useful for accessing the field via an interface.
func (v *TeamMemberMemberInvitationsTeamMemberInvitation) GetId() uuid.UUID { return v.Id }

// GetRole returns TeamMemberMemberInvitationsTeamMemberInvitation.Role, and is useful for accessing the field via an interface.
func (v *TeamMemberMemberInvitationsTeamMemberInvitation) GetRole() TeamMemberRole {
	return v.TeamInvite.Role
}

// GetLink returns TeamMemberMemberInvitationsTeamMemberInvitation.Link, and is useful for accessing the field via an interface.
func (v *TeamMemberMemberInvitationsTeamMemberInvitation) GetLink() string { return v.TeamInvite.Link }

// GetEmail returns TeamMemberMemberInvitationsTeamMemberInvitation.Email, and is useful for accessing the field via an interface.
func (v *TeamMemberMemberInvitationsTeamMemberInvitation) GetEmail() *string {
	return v.TeamInvite.Email
}

// GetExpiresAt returns TeamMemberMemberInvitationsTeamMemberInvitation.ExpiresAt, and is useful for accessing the field via an interface.
func (v *TeamMemberMemberInvitationsTeamMemberInvitation) GetExpiresAt() *time.Time {
	return v.TeamInvite.ExpiresAt
}

// GetCreatedAt returns TeamMemberMemberInvitationsTeamMemberInvitation.CreatedAt, and is useful for accessing the field via an interface.
func (v *TeamMemberMemberInvitationsTeamMemberInvitation) GetCreatedAt() time.Time {
	return v.TeamInvite.CreatedAt
}

func (v *TeamMemberMemberInvitationsTeamMemberInvitation) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TeamMemberMemberInvitationsTeamMemberInvitation
		graphql.NoUnmarshalJSON
	}
	firstPass.TeamMemberMemberInvitationsTeamMemberInvitation = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamInvite)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalTeamMemberMemberInvitationsTeamMemberInvitation struct {
	Id uuid.UUID `json:"id"`

	Role TeamMemberRole `json:"role"`

	Link string `json:"link"`

	Email *string `json:"email"`

	ExpiresAt *time.Time `json:"expiresAt"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *TeamMemberMemberInvitationsTeamMemberInvitation) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TeamMemberMemberInvitationsTeamMemberInvitation) __premarshalJSON() (*__premarshalTeamMemberMemberInvitationsTeamMemberInvitation, error) {
	var retval __premarshalTeamMemberMemberInvitationsTeamMemberInvitation

	retval.Id = v.Id
	retval.Role = v.TeamInvite.Role
	retval.Link = v.TeamInvite.Link
	retval.Email = v.TeamInvite.Email
	retval.ExpiresAt = v.TeamInvite.ExpiresAt
	retval.CreatedAt = v.TeamInvite.CreatedAt
	return &retval, nil
}

// TeamMemberMembersUserTeamEdge includes the requested fields of the GraphQL type UserTeamEdge.
type TeamMemberMembersUserTeamEdge struct {
	Id   uuid.UUID                         `json:"id"`
	User TeamMemberMembersUserTeamEdgeUser `json:"user"`
	Role TeamMemberRole                    `json:"role"`
}

// GetId returns TeamMemberMembersUserTeamEdge.Id, and is useful for accessing the field via an interface.
func (v *TeamMemberMembersUserTeamEdge) GetId() uuid.UUID { return v.Id }

// GetUser returns TeamMemberMembersUserTeamEdge.User, and is useful for accessing the field via an interface.
func (v *TeamMemberMembersUserTeamEdge) GetUser() TeamMemberMembersUserTeamEdgeUser { return v.User }

// GetRole returns TeamMemberMembersUserTeamEdge.Role, and is useful for accessing the field via an interface.
func (v *TeamMemberMembersUserTeamEdge) GetRole() TeamMemberRole { return v.Role }

// TeamMemberMembersUserTeamEdgeUser includes the requested fields of the GraphQL type User.
type TeamMemberMembersUserTeamEdgeUser struct {
	UserPublicCommon `json:"-"`
}

// GetId returns TeamMemberMembersUserTeamEdgeUser.Id, and is useful for accessing the field via an interface.
func (v *TeamMemberMembersUserTeamEdgeUser) GetId() uuid.UUID { return v.UserPublicCommon.Id }

// GetName returns TeamMemberMembersUserTeamEdgeUser.Name, and is useful for accessing the field via an interface.
func (v *TeamMemberMembersUserTeamEdgeUser) GetName() string { return v.UserPublicCommon.Name }

// GetLogin returns TeamMemberMembersUserTeamEdgeUser.Login, and is useful for accessing the field via an interface.
func (v *TeamMemberMembersUserTeamEdgeUser) GetLogin() string { return v.UserPublicCommon.Login }

// GetAvatar returns TeamMemberMembersUserTeamEdgeUser.Avatar, and is useful for accessing the field via an interface.
func (v *TeamMemberMembersUserTeamEdgeUser) GetAvatar() *string { return v.UserPublicCommon.Avatar }

// GetIsTeam returns TeamMemberMembersUserTeamEdgeUser.IsTeam, and is useful for accessing the field via an interface.
func (v *TeamMemberMembersUserTeamEdgeUser) GetIsTeam() *bool { return v.UserPublicCommon.IsTeam }

func (v *TeamMemberMembersUserTeamEdgeUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TeamMemberMembersUserTeamEdgeUser
		graphql.NoUnmarshalJSON
	}
	firstPass.TeamMemberMembersUserTeamEdgeUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserPublicCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalTeamMemberMembersUserTeamEdgeUser struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Login string `json:"login"`

	Avatar *string `json:"avatar"`

	IsTeam *bool `json:"isTeam"`
}

func (v *TeamMemberMembersUserTeamEdgeUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TeamMemberMembersUserTeamEdgeUser) __premarshalJSON() (*__premarshalTeamMemberMembersUserTeamEdgeUser, error) {
	var retval __premarshalTeamMemberMembersUserTeamEdgeUser

	retval.Id = v.UserPublicCommon.Id
	retval.Name = v.UserPublicCommon.Name
	retval.Login = v.UserPublicCommon.Login
	retval.Avatar = v.UserPublicCommon.Avatar
	retval.IsTeam = v.UserPublicCommon.IsTeam
	return &retval, nil
}

type TeamMemberRole string

const (
	TeamMemberRoleOwner  TeamMemberRole = "OWNER"
	TeamMemberRoleAdmin  TeamMemberRole = "ADMIN"
	TeamMemberRoleMember TeamMemberRole = "MEMBER"
	TeamMemberRoleViewer TeamMemberRole = "VIEWER"
)

// TemplateCommon includes the GraphQL fields of Template requested by the fragment TemplateCommon.
type TemplateCommon struct {
	Id            uuid.UUID                               `json:"id"`
	Name          string                                  `json:"name"`
	Description   string                                  `json:"description"`
	Image         string                                  `json:"image"`
	HomepageURL   *string                                 `json:"homepageURL"`
	RepositoryURL *string                                 `json:"repositoryURL"`
	Stats         *TemplateCommonStatsTemplateStats       `json:"stats"`
	Projects      []TemplateCommonProjectsProjectTemplate `json:"projects"`
}

// GetId returns TemplateCommon.Id, and is useful for accessing the field via an interface.
func (v *TemplateCommon) GetId() uuid.UUID { return v.Id }

// GetName returns TemplateCommon.Name, and is useful for accessing the field via an interface.
func (v *TemplateCommon) GetName() string { return v.Name }

// GetDescription returns TemplateCommon.Description, and is useful for accessing the field via an interface.
func (v *TemplateCommon) GetDescription() string { return v.Description }

// GetImage returns TemplateCommon.Image, and is useful for accessing the field via an interface.
func (v *TemplateCommon) GetImage() string { return v.Image }

// GetHomepageURL returns TemplateCommon.HomepageURL, and is useful for accessing the field via an interface.
func (v *TemplateCommon) GetHomepageURL() *string { return v.HomepageURL }

// GetRepositoryURL returns TemplateCommon.RepositoryURL, and is useful for accessing the field via an interface.
func (v *TemplateCommon) GetRepositoryURL() *string { return v.RepositoryURL }

// GetStats returns TemplateCommon.Stats, and is useful for accessing the field via an interface.
func (v *TemplateCommon) GetStats() *TemplateCommonStatsTemplateStats { return v.Stats }

// GetProjects returns TemplateCommon.Projects, and is useful for accessing the field via an interface.
func (v *TemplateCommon) GetProjects() []TemplateCommonProjectsProjectTemplate { return v.Projects }

// TemplateCommonProjectsProjectTemplate includes the requested fields of the GraphQL type ProjectTemplate.
type TemplateCommonProjectsProjectTemplate struct {
	Id          uuid.UUID                                                 `json:"id"`
	Name        string                                                    `json:"name"`
	Description string                                                    `json:"description"`
	Image       string                                                    `json:"image"`
	Source      TemplateCommonProjectsProjectTemplateSourceRepoSource     `json:"source"`
	Envs        []TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate `json:"envs"`
	Ports       []TemplateCommonProjectsProjectTemplatePortsPort          `json:"ports"`
	Volumes     []TemplateCommonProjectsProjectTemplateVolumesVolumeSpec  `json:"volumes"`
	Cpu         float64                                                   `json:"cpu"`
	Memory      float64                                                   `json:"memory"`
	Gpu         *int                                                      `json:"gpu"`
	Dedicated   *bool                                                     `json:"dedicated"`
	Replication []TemplateCommonProjectsProjectTemplateReplication        `json:"replication"`
}

// GetId returns TemplateCommonProjectsProjectTemplate.Id, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplate) GetId() uuid.UUID { return v.Id }

// GetName returns TemplateCommonProjectsProjectTemplate.Name, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplate) GetName() string { return v.Name }

// GetDescription returns TemplateCommonProjectsProjectTemplate.Description, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplate) GetDescription() string { return v.Description }

// GetImage returns TemplateCommonProjectsProjectTemplate.Image, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplate) GetImage() string { return v.Image }

// GetSource returns TemplateCommonProjectsProjectTemplate.Source, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplate) GetSource() TemplateCommonProjectsProjectTemplateSourceRepoSource {
	return v.Source
}

// GetEnvs returns TemplateCommonProjectsProjectTemplate.Envs, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplate) GetEnvs() []TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate {
	return v.Envs
}

// GetPorts returns TemplateCommonProjectsProjectTemplate.Ports, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplate) GetPorts() []TemplateCommonProjectsProjectTemplatePortsPort {
	return v.Ports
}

// GetVolumes returns TemplateCommonProjectsProjectTemplate.Volumes, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplate) GetVolumes() []TemplateCommonProjectsProjectTemplateVolumesVolumeSpec {
	return v.Volumes
}

// GetCpu returns TemplateCommonProjectsProjectTemplate.Cpu, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplate) GetCpu() float64 { return v.Cpu }

// GetMemory returns TemplateCommonProjectsProjectTemplate.Memory, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplate) GetMemory() float64 { return v.Memory }

// GetGpu returns TemplateCommonProjectsProjectTemplate.Gpu, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplate) GetGpu() *int { return v.Gpu }

// GetDedicated returns TemplateCommonProjectsProjectTemplate.Dedicated, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplate) GetDedicated() *bool { return v.Dedicated }

// GetReplication returns TemplateCommonProjectsProjectTemplate.Replication, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplate) GetReplication() []TemplateCommonProjectsProjectTemplateReplication {
	return v.Replication
}

// TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate includes the requested fields of the GraphQL type EnvVarTemplate.
type TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate struct {
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Value       *string  `json:"value"`
	Generator   *string  `json:"generator"`
	Reference   *string  `json:"reference"`
	Required    bool     `json:"required"`
	Locked      bool     `json:"locked"`
	Hidden      bool     `json:"hidden"`
	Options     []string `json:"options"`
}

// GetName returns TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate.Name, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate) GetName() string { return v.Name }

// GetDescription returns TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate.Description, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate) GetDescription() string {
	return v.Description
}

// GetValue returns TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate.Value, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate) GetValue() *string { return v.Value }

// GetGenerator returns TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate.Generator, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate) GetGenerator() *string {
	return v.Generator
}

// GetReference returns TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate.Reference, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate) GetReference() *string {
	return v.Reference
}

// GetRequired returns TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate.Required, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate) GetRequired() bool {
	return v.Required
}

// GetLocked returns TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate.Locked, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate) GetLocked() bool { return v.Locked }

// GetHidden returns TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate.Hidden, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate) GetHidden() bool { return v.Hidden }

// GetOptions returns TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate.Options, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateEnvsEnvVarTemplate) GetOptions() []string {
	return v.Options
}

// TemplateCommonProjectsProjectTemplatePortsPort includes the requested fields of the GraphQL type Port.
type TemplateCommonProjectsProjectTemplatePortsPort struct {
	Port     string `json:"port"`
	Protocol string `json:"protocol"`
	Public   bool   `json:"public"`
	Https    bool   `json:"https"`
}

// GetPort returns TemplateCommonProjectsProjectTemplatePortsPort.Port, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplatePortsPort) GetPort() string { return v.Port }

// GetProtocol returns TemplateCommonProjectsProjectTemplatePortsPort.Protocol, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplatePortsPort) GetProtocol() string { return v.Protocol }

// GetPublic returns TemplateCommonProjectsProjectTemplatePortsPort.Public, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplatePortsPort) GetPublic() bool { return v.Public }

// GetHttps returns TemplateCommonProjectsProjectTemplatePortsPort.Https, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplatePortsPort) GetHttps() bool { return v.Https }

// TemplateCommonProjectsProjectTemplateReplication includes the requested fields of the GraphQL type Replication.
type TemplateCommonProjectsProjectTemplateReplication struct {
	Region   string `json:"region"`
	Replicas *int   `json:"replicas"`
}

// GetRegion returns TemplateCommonProjectsProjectTemplateReplication.Region, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateReplication) GetRegion() string { return v.Region }

// GetReplicas returns TemplateCommonProjectsProjectTemplateReplication.Replicas, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateReplication) GetReplicas() *int { return v.Replicas }

// TemplateCommonProjectsProjectTemplateSourceRepoSource includes the requested fields of the GraphQL type RepoSource.
type TemplateCommonProjectsProjectTemplateSourceRepoSource struct {
	Type RepoSourceType `json:"type"`
	Name string         `json:"name"`
}

// GetType returns TemplateCommonProjectsProjectTemplateSourceRepoSource.Type, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateSourceRepoSource) GetType() RepoSourceType {
	return v.Type
}

// GetName returns TemplateCommonProjectsProjectTemplateSourceRepoSource.Name, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateSourceRepoSource) GetName() string { return v.Name }

// TemplateCommonProjectsProjectTemplateVolumesVolumeSpec includes the requested fields of the GraphQL type VolumeSpec.
type TemplateCommonProjectsProjectTemplateVolumesVolumeSpec struct {
	MountPath string `json:"mountPath"`
	Size      int    `json:"size"`
}

// GetMountPath returns TemplateCommonProjectsProjectTemplateVolumesVolumeSpec.MountPath, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateVolumesVolumeSpec) GetMountPath() string {
	return v.MountPath
}

// GetSize returns TemplateCommonProjectsProjectTemplateVolumesVolumeSpec.Size, and is useful for accessing the field via an interface.
func (v *TemplateCommonProjectsProjectTemplateVolumesVolumeSpec) GetSize() int { return v.Size }

// TemplateCommonStatsTemplateStats includes the requested fields of the GraphQL type TemplateStats.
type TemplateCommonStatsTemplateStats struct {
	Deploys int `json:"deploys"`
	Forks   int `json:"forks"`
	Stars   int `json:"stars"`
}

// GetDeploys returns TemplateCommonStatsTemplateStats.Deploys, and is useful for accessing the field via an interface.
func (v *TemplateCommonStatsTemplateStats) GetDeploys() int { return v.Deploys }

// GetForks returns TemplateCommonStatsTemplateStats.Forks, and is useful for accessing the field via an interface.
func (v *TemplateCommonStatsTemplateStats) GetForks() int { return v.Forks }

// GetStars returns TemplateCommonStatsTemplateStats.Stars, and is useful for accessing the field via an interface.
func (v *TemplateCommonStatsTemplateStats) GetStars() int { return v.Stars }

// See TerraformAutomaticOutputConfiguration.
type TerraformAutomaticOutputConfigurationInput struct {
	Disabled  *bool    `json:"disabled"`
	Sensitive *bool    `json:"sensitive"`
	Excluded  []string `json:"excluded"`
}

// GetDisabled returns TerraformAutomaticOutputConfigurationInput.Disabled, and is useful for accessing the field via an interface.
func (v *TerraformAutomaticOutputConfigurationInput) GetDisabled() *bool { return v.Disabled }

// GetSensitive returns TerraformAutomaticOutputConfigurationInput.Sensitive, and is useful for accessing the field via an interface.
func (v *TerraformAutomaticOutputConfigurationInput) GetSensitive() *bool { return v.Sensitive }

// GetExcluded returns TerraformAutomaticOutputConfigurationInput.Excluded, and is useful for accessing the field via an interface.
func (v *TerraformAutomaticOutputConfigurationInput) GetExcluded() []string { return v.Excluded }

type TerraformModuleSourceInput struct {
	Source      string                                 `json:"source"`
	Version     *string                                `json:"version"`
	Integration *TerraformModuleSourceIntegrationInput `json:"integration"`
}

// GetSource returns TerraformModuleSourceInput.Source, and is useful for accessing the field via an interface.
func (v *TerraformModuleSourceInput) GetSource() string { return v.Source }

// GetVersion returns TerraformModuleSourceInput.Version, and is useful for accessing the field via an interface.
func (v *TerraformModuleSourceInput) GetVersion() *string { return v.Version }

// GetIntegration returns TerraformModuleSourceInput.Integration, and is useful for accessing the field via an interface.
func (v *TerraformModuleSourceInput) GetIntegration() *TerraformModuleSourceIntegrationInput {
	return v.Integration
}

type TerraformModuleSourceIntegrationInput struct {
	Git *GitSourceIntegrationInput `json:"git"`
}

// GetGit returns TerraformModuleSourceIntegrationInput.Git, and is useful for accessing the field via an interface.
func (v *TerraformModuleSourceIntegrationInput) GetGit() *GitSourceIntegrationInput { return v.Git }

// See TerraformOutputConfiguration.
type TerraformOutputConfigurationInput struct {
	Automatic     *TerraformAutomaticOutputConfigurationInput `json:"automatic"`
	Customization *string                                     `json:"customization"`
}

// GetAutomatic returns TerraformOutputConfigurationInput.Automatic, and is useful for accessing the field via an interface.
func (v *TerraformOutputConfigurationInput) GetAutomatic() *TerraformAutomaticOutputConfigurationInput {
	return v.Automatic
}

// GetCustomization returns TerraformOutputConfigurationInput.Customization, and is useful for accessing the field via an interface.
func (v *TerraformOutputConfigurationInput) GetCustomization() *string { return v.Customization }

type TerraformProjectV3ConfigurationInput struct {
	ModuleName   *string                    `json:"moduleName"`
	StateBackend TerraformStateBackendInput `json:"stateBackend"`
	// Terraform Provider configuration: Maps a zeet-connected cloud account to a terraform provider.
	// This parameter is optional for backwards compatibility. New Projects should specify their provider at creation,
	// instead of specifying the provider for each PLAN/PLAN_DESTROY action.
	//
	// This parameter will be required in the v1 API, and specifying provider "per-plan" will not be supported.
	Provider *TerraformProviderInput `json:"provider"`
}

// GetModuleName returns TerraformProjectV3ConfigurationInput.ModuleName, and is useful for accessing the field via an interface.
func (v *TerraformProjectV3ConfigurationInput) GetModuleName() *string { return v.ModuleName }

// GetStateBackend returns TerraformProjectV3ConfigurationInput.StateBackend, and is useful for accessing the field via an interface.
func (v *TerraformProjectV3ConfigurationInput) GetStateBackend() TerraformStateBackendInput {
	return v.StateBackend
}

// GetProvider returns TerraformProjectV3ConfigurationInput.Provider, and is useful for accessing the field via an interface.
func (v *TerraformProjectV3ConfigurationInput) GetProvider() *TerraformProviderInput {
	return v.Provider
}

type TerraformProviderInput struct {
	// Zeet ID for a connected AWS Account
	AwsAccountID *uuid.UUID `json:"awsAccountID"`
	// Zeet ID for a connected GCP Account
	GcpAccountID *uuid.UUID `json:"gcpAccountID"`
	// Zeet ID for a connected DigitalOcean Account
	DoAccountID *uuid.UUID `json:"doAccountID"`
	// Region name, when applicable
	Region *string `json:"region"`
}

// GetAwsAccountID returns TerraformProviderInput.AwsAccountID, and is useful for accessing the field via an interface.
func (v *TerraformProviderInput) GetAwsAccountID() *uuid.UUID { return v.AwsAccountID }

// GetGcpAccountID returns TerraformProviderInput.GcpAccountID, and is useful for accessing the field via an interface.
func (v *TerraformProviderInput) GetGcpAccountID() *uuid.UUID { return v.GcpAccountID }

// GetDoAccountID returns TerraformProviderInput.DoAccountID, and is useful for accessing the field via an interface.
func (v *TerraformProviderInput) GetDoAccountID() *uuid.UUID { return v.DoAccountID }

// GetRegion returns TerraformProviderInput.Region, and is useful for accessing the field via an interface.
func (v *TerraformProviderInput) GetRegion() *string { return v.Region }

type TerraformRegistrySourceInput struct {
	Source  string  `json:"source"`
	Version *string `json:"version"`
}

// GetSource returns TerraformRegistrySourceInput.Source, and is useful for accessing the field via an interface.
func (v *TerraformRegistrySourceInput) GetSource() string { return v.Source }

// GetVersion returns TerraformRegistrySourceInput.Version, and is useful for accessing the field via an interface.
func (v *TerraformRegistrySourceInput) GetVersion() *string { return v.Version }

type TerraformStateBackendInput struct {
	S3Bucket  *S3BucketBackendInput  `json:"s3Bucket"`
	GcsBucket *GCSBucketBackendInput `json:"gcsBucket"`
}

// GetS3Bucket returns TerraformStateBackendInput.S3Bucket, and is useful for accessing the field via an interface.
func (v *TerraformStateBackendInput) GetS3Bucket() *S3BucketBackendInput { return v.S3Bucket }

// GetGcsBucket returns TerraformStateBackendInput.GcsBucket, and is useful for accessing the field via an interface.
func (v *TerraformStateBackendInput) GetGcsBucket() *GCSBucketBackendInput { return v.GcsBucket }

type TransferProjectInput struct {
	Id uuid.UUID `json:"id"`
	To uuid.UUID `json:"to"`
}

// GetId returns TransferProjectInput.Id, and is useful for accessing the field via an interface.
func (v *TransferProjectInput) GetId() uuid.UUID { return v.Id }

// GetTo returns TransferProjectInput.To, and is useful for accessing the field via an interface.
func (v *TransferProjectInput) GetTo() uuid.UUID { return v.To }

type TroubleshootingIssueBlockType string

const (
	TroubleshootingIssueBlockTypeInstruction TroubleshootingIssueBlockType = "INSTRUCTION"
	TroubleshootingIssueBlockTypeEvidence    TroubleshootingIssueBlockType = "EVIDENCE"
)

type UpdateAWSAccountInput struct {
	Id   uuid.UUID `json:"id"`
	Name *string   `json:"name"`
}

// GetId returns UpdateAWSAccountInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateAWSAccountInput) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateAWSAccountInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateAWSAccountInput) GetName() *string { return v.Name }

type UpdateAzureAccountInput struct {
	Id             uuid.UUID `json:"id"`
	Name           *string   `json:"name"`
	SubscriptionID *string   `json:"subscriptionID"`
	TenantID       *string   `json:"tenantID"`
	ClientID       *string   `json:"clientID"`
	ClientSecret   *string   `json:"clientSecret"`
}

// GetId returns UpdateAzureAccountInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateAzureAccountInput) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateAzureAccountInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateAzureAccountInput) GetName() *string { return v.Name }

// GetSubscriptionID returns UpdateAzureAccountInput.SubscriptionID, and is useful for accessing the field via an interface.
func (v *UpdateAzureAccountInput) GetSubscriptionID() *string { return v.SubscriptionID }

// GetTenantID returns UpdateAzureAccountInput.TenantID, and is useful for accessing the field via an interface.
func (v *UpdateAzureAccountInput) GetTenantID() *string { return v.TenantID }

// GetClientID returns UpdateAzureAccountInput.ClientID, and is useful for accessing the field via an interface.
func (v *UpdateAzureAccountInput) GetClientID() *string { return v.ClientID }

// GetClientSecret returns UpdateAzureAccountInput.ClientSecret, and is useful for accessing the field via an interface.
func (v *UpdateAzureAccountInput) GetClientSecret() *string { return v.ClientSecret }

type UpdateBlueprintInput struct {
	DisplayName   *string                       `json:"displayName"`
	Published     *bool                         `json:"published"`
	Slug          *string                       `json:"slug"`
	Configuration *BlueprintConfigurationUpdate `json:"configuration"`
	// Update the variables. Supports partial updates: only specify the variables that you wish to update.
	// To modify or remove an existing variable, you must specify the variable's ID.
	//
	// If ID is not present, the variable will be created (and the "remove" field will be ignored).
	Variables       []BlueprintVariableSpecUpdate `json:"variables"`
	RichInputSchema *string                       `json:"richInputSchema"`
	Description     *string                       `json:"description"`
	Tags            []string                      `json:"tags"`
	LogoUrl         *string                       `json:"logoUrl"`
	OutputSchema    *BlueprintOutputSchema        `json:"outputSchema"`
	ConnectorSchema *ProjectConnectorSchema       `json:"connectorSchema"`
}

// GetDisplayName returns UpdateBlueprintInput.DisplayName, and is useful for accessing the field via an interface.
func (v *UpdateBlueprintInput) GetDisplayName() *string { return v.DisplayName }

// GetPublished returns UpdateBlueprintInput.Published, and is useful for accessing the field via an interface.
func (v *UpdateBlueprintInput) GetPublished() *bool { return v.Published }

// GetSlug returns UpdateBlueprintInput.Slug, and is useful for accessing the field via an interface.
func (v *UpdateBlueprintInput) GetSlug() *string { return v.Slug }

// GetConfiguration returns UpdateBlueprintInput.Configuration, and is useful for accessing the field via an interface.
func (v *UpdateBlueprintInput) GetConfiguration() *BlueprintConfigurationUpdate {
	return v.Configuration
}

// GetVariables returns UpdateBlueprintInput.Variables, and is useful for accessing the field via an interface.
func (v *UpdateBlueprintInput) GetVariables() []BlueprintVariableSpecUpdate { return v.Variables }

// GetRichInputSchema returns UpdateBlueprintInput.RichInputSchema, and is useful for accessing the field via an interface.
func (v *UpdateBlueprintInput) GetRichInputSchema() *string { return v.RichInputSchema }

// GetDescription returns UpdateBlueprintInput.Description, and is useful for accessing the field via an interface.
func (v *UpdateBlueprintInput) GetDescription() *string { return v.Description }

// GetTags returns UpdateBlueprintInput.Tags, and is useful for accessing the field via an interface.
func (v *UpdateBlueprintInput) GetTags() []string { return v.Tags }

// GetLogoUrl returns UpdateBlueprintInput.LogoUrl, and is useful for accessing the field via an interface.
func (v *UpdateBlueprintInput) GetLogoUrl() *string { return v.LogoUrl }

// GetOutputSchema returns UpdateBlueprintInput.OutputSchema, and is useful for accessing the field via an interface.
func (v *UpdateBlueprintInput) GetOutputSchema() *BlueprintOutputSchema { return v.OutputSchema }

// GetConnectorSchema returns UpdateBlueprintInput.ConnectorSchema, and is useful for accessing the field via an interface.
func (v *UpdateBlueprintInput) GetConnectorSchema() *ProjectConnectorSchema { return v.ConnectorSchema }

type UpdateCDNInput struct {
	Id      uuid.UUID `json:"id"`
	Domains []string  `json:"domains"`
}

// GetId returns UpdateCDNInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateCDNInput) GetId() uuid.UUID { return v.Id }

// GetDomains returns UpdateCDNInput.Domains, and is useful for accessing the field via an interface.
func (v *UpdateCDNInput) GetDomains() []string { return v.Domains }

type UpdateClusterAddOn struct {
	Slug       string            `json:"slug"`
	State      ClusterAddOnState `json:"state"`
	HelmValues *string           `json:"helmValues"`
}

// GetSlug returns UpdateClusterAddOn.Slug, and is useful for accessing the field via an interface.
func (v *UpdateClusterAddOn) GetSlug() string { return v.Slug }

// GetState returns UpdateClusterAddOn.State, and is useful for accessing the field via an interface.
func (v *UpdateClusterAddOn) GetState() ClusterAddOnState { return v.State }

// GetHelmValues returns UpdateClusterAddOn.HelmValues, and is useful for accessing the field via an interface.
func (v *UpdateClusterAddOn) GetHelmValues() *string { return v.HelmValues }

// UpdateClusterDetailsExternalLinkLinkCloudToCluster includes the requested fields of the GraphQL type Cluster.
type UpdateClusterDetailsExternalLinkLinkCloudToCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.Id, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.Name, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetName() string {
	return v.ClusterDetail.Name
}

// GetRegion returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.Region, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetRegion() *string {
	return v.ClusterDetail.Region
}

// GetState returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.State, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetState() ClusterState {
	return v.ClusterDetail.State
}

// GetStatus returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.Status, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetStatus() *ClusterStatus {
	return v.ClusterDetail.Status
}

// GetConnected returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.Connected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetConnected() *bool {
	return v.ClusterDetail.Connected
}

// GetDomain returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.Domain, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetDomain() *string {
	return v.ClusterDetail.Domain
}

// GetIsExternal returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetIsExternal() *bool {
	return v.ClusterDetail.IsExternal
}

// GetIsEjected returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetIsEjected() *bool {
	return v.ClusterDetail.IsEjected
}

// GetComponents returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.Components, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetIngressIP() *string {
	return v.ClusterDetail.IngressIP
}

// GetIngressDNS returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetIngressDNS() *string {
	return v.ClusterDetail.IngressDNS
}

// GetClusterProvider returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.Grafana, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetail.UpdatedAt
}

// GetCreatedAt returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetCreatedAt() time.Time {
	return v.ClusterDetail.CreatedAt
}

// GetProjects returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.Projects, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns UpdateClusterDetailsExternalLinkLinkCloudToCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateClusterDetailsExternalLinkLinkCloudToCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateClusterDetailsExternalLinkLinkCloudToCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateClusterDetailsExternalLinkLinkCloudToCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateClusterDetailsExternalLinkLinkCloudToCluster) __premarshalJSON() (*__premarshalUpdateClusterDetailsExternalLinkLinkCloudToCluster, error) {
	var retval __premarshalUpdateClusterDetailsExternalLinkLinkCloudToCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UpdateClusterDetailsExternalLinkLinkCloudToCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// UpdateClusterDetailsExternalLinkResponse is returned by UpdateClusterDetailsExternalLink on success.
type UpdateClusterDetailsExternalLinkResponse struct {
	UpdateCluster       UpdateClusterDetailsExternalLinkUpdateCluster              `json:"updateCluster"`
	UpdateClusterDomain UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster `json:"updateClusterDomain"`
	LinkCloudToCluster  UpdateClusterDetailsExternalLinkLinkCloudToCluster         `json:"linkCloudToCluster"`
}

// GetUpdateCluster returns UpdateClusterDetailsExternalLinkResponse.UpdateCluster, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkResponse) GetUpdateCluster() UpdateClusterDetailsExternalLinkUpdateCluster {
	return v.UpdateCluster
}

// GetUpdateClusterDomain returns UpdateClusterDetailsExternalLinkResponse.UpdateClusterDomain, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkResponse) GetUpdateClusterDomain() UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster {
	return v.UpdateClusterDomain
}

// GetLinkCloudToCluster returns UpdateClusterDetailsExternalLinkResponse.LinkCloudToCluster, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkResponse) GetLinkCloudToCluster() UpdateClusterDetailsExternalLinkLinkCloudToCluster {
	return v.LinkCloudToCluster
}

// UpdateClusterDetailsExternalLinkUpdateCluster includes the requested fields of the GraphQL type Cluster.
type UpdateClusterDetailsExternalLinkUpdateCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns UpdateClusterDetailsExternalLinkUpdateCluster.Id, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateClusterDetailsExternalLinkUpdateCluster.Name, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns UpdateClusterDetailsExternalLinkUpdateCluster.Region, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetRegion() *string {
	return v.ClusterDetail.Region
}

// GetState returns UpdateClusterDetailsExternalLinkUpdateCluster.State, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetState() ClusterState {
	return v.ClusterDetail.State
}

// GetStatus returns UpdateClusterDetailsExternalLinkUpdateCluster.Status, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetStatus() *ClusterStatus {
	return v.ClusterDetail.Status
}

// GetConnected returns UpdateClusterDetailsExternalLinkUpdateCluster.Connected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetConnected() *bool {
	return v.ClusterDetail.Connected
}

// GetDomain returns UpdateClusterDetailsExternalLinkUpdateCluster.Domain, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetDomain() *string {
	return v.ClusterDetail.Domain
}

// GetIsExternal returns UpdateClusterDetailsExternalLinkUpdateCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetIsExternal() *bool {
	return v.ClusterDetail.IsExternal
}

// GetIsEjected returns UpdateClusterDetailsExternalLinkUpdateCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetIsEjected() *bool {
	return v.ClusterDetail.IsEjected
}

// GetComponents returns UpdateClusterDetailsExternalLinkUpdateCluster.Components, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns UpdateClusterDetailsExternalLinkUpdateCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns UpdateClusterDetailsExternalLinkUpdateCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns UpdateClusterDetailsExternalLinkUpdateCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns UpdateClusterDetailsExternalLinkUpdateCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns UpdateClusterDetailsExternalLinkUpdateCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns UpdateClusterDetailsExternalLinkUpdateCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns UpdateClusterDetailsExternalLinkUpdateCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns UpdateClusterDetailsExternalLinkUpdateCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns UpdateClusterDetailsExternalLinkUpdateCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetIngressIP() *string {
	return v.ClusterDetail.IngressIP
}

// GetIngressDNS returns UpdateClusterDetailsExternalLinkUpdateCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetIngressDNS() *string {
	return v.ClusterDetail.IngressDNS
}

// GetClusterProvider returns UpdateClusterDetailsExternalLinkUpdateCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns UpdateClusterDetailsExternalLinkUpdateCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns UpdateClusterDetailsExternalLinkUpdateCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns UpdateClusterDetailsExternalLinkUpdateCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns UpdateClusterDetailsExternalLinkUpdateCluster.Grafana, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns UpdateClusterDetailsExternalLinkUpdateCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns UpdateClusterDetailsExternalLinkUpdateCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns UpdateClusterDetailsExternalLinkUpdateCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns UpdateClusterDetailsExternalLinkUpdateCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetail.UpdatedAt
}

// GetCreatedAt returns UpdateClusterDetailsExternalLinkUpdateCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetCreatedAt() time.Time {
	return v.ClusterDetail.CreatedAt
}

// GetProjects returns UpdateClusterDetailsExternalLinkUpdateCluster.Projects, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns UpdateClusterDetailsExternalLinkUpdateCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns UpdateClusterDetailsExternalLinkUpdateCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *UpdateClusterDetailsExternalLinkUpdateCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateClusterDetailsExternalLinkUpdateCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateClusterDetailsExternalLinkUpdateCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateClusterDetailsExternalLinkUpdateCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *UpdateClusterDetailsExternalLinkUpdateCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateClusterDetailsExternalLinkUpdateCluster) __premarshalJSON() (*__premarshalUpdateClusterDetailsExternalLinkUpdateCluster, error) {
	var retval __premarshalUpdateClusterDetailsExternalLinkUpdateCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UpdateClusterDetailsExternalLinkUpdateCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster includes the requested fields of the GraphQL type Cluster.
type UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.Id, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.Name, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetName() string {
	return v.ClusterDetail.Name
}

// GetRegion returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.Region, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetRegion() *string {
	return v.ClusterDetail.Region
}

// GetState returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.State, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetState() ClusterState {
	return v.ClusterDetail.State
}

// GetStatus returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.Status, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetStatus() *ClusterStatus {
	return v.ClusterDetail.Status
}

// GetConnected returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.Connected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetConnected() *bool {
	return v.ClusterDetail.Connected
}

// GetDomain returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.Domain, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetDomain() *string {
	return v.ClusterDetail.Domain
}

// GetIsExternal returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetIsExternal() *bool {
	return v.ClusterDetail.IsExternal
}

// GetIsEjected returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetIsEjected() *bool {
	return v.ClusterDetail.IsEjected
}

// GetComponents returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.Components, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetIngressIP() *string {
	return v.ClusterDetail.IngressIP
}

// GetIngressDNS returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetIngressDNS() *string {
	return v.ClusterDetail.IngressDNS
}

// GetClusterProvider returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.Grafana, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetail.UpdatedAt
}

// GetCreatedAt returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetCreatedAt() time.Time {
	return v.ClusterDetail.CreatedAt
}

// GetProjects returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.Projects, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateClusterDetailsExternalLinkUpdateClusterDomainCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster) __premarshalJSON() (*__premarshalUpdateClusterDetailsExternalLinkUpdateClusterDomainCluster, error) {
	var retval __premarshalUpdateClusterDetailsExternalLinkUpdateClusterDomainCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UpdateClusterDetailsExternalLinkUpdateClusterDomainCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// UpdateClusterDetailsExternalResponse is returned by UpdateClusterDetailsExternal on success.
type UpdateClusterDetailsExternalResponse struct {
	UpdateCluster       UpdateClusterDetailsExternalUpdateCluster              `json:"updateCluster"`
	UpdateClusterDomain UpdateClusterDetailsExternalUpdateClusterDomainCluster `json:"updateClusterDomain"`
}

// GetUpdateCluster returns UpdateClusterDetailsExternalResponse.UpdateCluster, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalResponse) GetUpdateCluster() UpdateClusterDetailsExternalUpdateCluster {
	return v.UpdateCluster
}

// GetUpdateClusterDomain returns UpdateClusterDetailsExternalResponse.UpdateClusterDomain, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalResponse) GetUpdateClusterDomain() UpdateClusterDetailsExternalUpdateClusterDomainCluster {
	return v.UpdateClusterDomain
}

// UpdateClusterDetailsExternalUpdateCluster includes the requested fields of the GraphQL type Cluster.
type UpdateClusterDetailsExternalUpdateCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns UpdateClusterDetailsExternalUpdateCluster.Id, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateClusterDetailsExternalUpdateCluster.Name, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns UpdateClusterDetailsExternalUpdateCluster.Region, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetRegion() *string {
	return v.ClusterDetail.Region
}

// GetState returns UpdateClusterDetailsExternalUpdateCluster.State, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetState() ClusterState {
	return v.ClusterDetail.State
}

// GetStatus returns UpdateClusterDetailsExternalUpdateCluster.Status, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetStatus() *ClusterStatus {
	return v.ClusterDetail.Status
}

// GetConnected returns UpdateClusterDetailsExternalUpdateCluster.Connected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetConnected() *bool {
	return v.ClusterDetail.Connected
}

// GetDomain returns UpdateClusterDetailsExternalUpdateCluster.Domain, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetDomain() *string {
	return v.ClusterDetail.Domain
}

// GetIsExternal returns UpdateClusterDetailsExternalUpdateCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetIsExternal() *bool {
	return v.ClusterDetail.IsExternal
}

// GetIsEjected returns UpdateClusterDetailsExternalUpdateCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetIsEjected() *bool {
	return v.ClusterDetail.IsEjected
}

// GetComponents returns UpdateClusterDetailsExternalUpdateCluster.Components, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns UpdateClusterDetailsExternalUpdateCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns UpdateClusterDetailsExternalUpdateCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns UpdateClusterDetailsExternalUpdateCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns UpdateClusterDetailsExternalUpdateCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns UpdateClusterDetailsExternalUpdateCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns UpdateClusterDetailsExternalUpdateCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns UpdateClusterDetailsExternalUpdateCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns UpdateClusterDetailsExternalUpdateCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns UpdateClusterDetailsExternalUpdateCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetIngressIP() *string {
	return v.ClusterDetail.IngressIP
}

// GetIngressDNS returns UpdateClusterDetailsExternalUpdateCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetIngressDNS() *string {
	return v.ClusterDetail.IngressDNS
}

// GetClusterProvider returns UpdateClusterDetailsExternalUpdateCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns UpdateClusterDetailsExternalUpdateCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns UpdateClusterDetailsExternalUpdateCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns UpdateClusterDetailsExternalUpdateCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns UpdateClusterDetailsExternalUpdateCluster.Grafana, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns UpdateClusterDetailsExternalUpdateCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns UpdateClusterDetailsExternalUpdateCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns UpdateClusterDetailsExternalUpdateCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns UpdateClusterDetailsExternalUpdateCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetail.UpdatedAt
}

// GetCreatedAt returns UpdateClusterDetailsExternalUpdateCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetCreatedAt() time.Time {
	return v.ClusterDetail.CreatedAt
}

// GetProjects returns UpdateClusterDetailsExternalUpdateCluster.Projects, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns UpdateClusterDetailsExternalUpdateCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns UpdateClusterDetailsExternalUpdateCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *UpdateClusterDetailsExternalUpdateCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateClusterDetailsExternalUpdateCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateClusterDetailsExternalUpdateCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateClusterDetailsExternalUpdateCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *UpdateClusterDetailsExternalUpdateCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateClusterDetailsExternalUpdateCluster) __premarshalJSON() (*__premarshalUpdateClusterDetailsExternalUpdateCluster, error) {
	var retval __premarshalUpdateClusterDetailsExternalUpdateCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UpdateClusterDetailsExternalUpdateCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// UpdateClusterDetailsExternalUpdateClusterDomainCluster includes the requested fields of the GraphQL type Cluster.
type UpdateClusterDetailsExternalUpdateClusterDomainCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.Id, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.Name, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetName() string {
	return v.ClusterDetail.Name
}

// GetRegion returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.Region, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetRegion() *string {
	return v.ClusterDetail.Region
}

// GetState returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.State, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetState() ClusterState {
	return v.ClusterDetail.State
}

// GetStatus returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.Status, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetStatus() *ClusterStatus {
	return v.ClusterDetail.Status
}

// GetConnected returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.Connected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetConnected() *bool {
	return v.ClusterDetail.Connected
}

// GetDomain returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.Domain, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetDomain() *string {
	return v.ClusterDetail.Domain
}

// GetIsExternal returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetIsExternal() *bool {
	return v.ClusterDetail.IsExternal
}

// GetIsEjected returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetIsEjected() *bool {
	return v.ClusterDetail.IsEjected
}

// GetComponents returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.Components, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetIngressIP() *string {
	return v.ClusterDetail.IngressIP
}

// GetIngressDNS returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetIngressDNS() *string {
	return v.ClusterDetail.IngressDNS
}

// GetClusterProvider returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.Grafana, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetail.UpdatedAt
}

// GetCreatedAt returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetCreatedAt() time.Time {
	return v.ClusterDetail.CreatedAt
}

// GetProjects returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.Projects, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns UpdateClusterDetailsExternalUpdateClusterDomainCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateClusterDetailsExternalUpdateClusterDomainCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateClusterDetailsExternalUpdateClusterDomainCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateClusterDetailsExternalUpdateClusterDomainCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateClusterDetailsExternalUpdateClusterDomainCluster) __premarshalJSON() (*__premarshalUpdateClusterDetailsExternalUpdateClusterDomainCluster, error) {
	var retval __premarshalUpdateClusterDetailsExternalUpdateClusterDomainCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UpdateClusterDetailsExternalUpdateClusterDomainCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// UpdateClusterDetailsZeetLinkLinkCloudToCluster includes the requested fields of the GraphQL type Cluster.
type UpdateClusterDetailsZeetLinkLinkCloudToCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.Id, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.Name, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetName() string {
	return v.ClusterDetail.Name
}

// GetRegion returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.Region, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetRegion() *string {
	return v.ClusterDetail.Region
}

// GetState returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.State, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetState() ClusterState {
	return v.ClusterDetail.State
}

// GetStatus returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.Status, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetStatus() *ClusterStatus {
	return v.ClusterDetail.Status
}

// GetConnected returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.Connected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetConnected() *bool {
	return v.ClusterDetail.Connected
}

// GetDomain returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.Domain, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetDomain() *string {
	return v.ClusterDetail.Domain
}

// GetIsExternal returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetIsExternal() *bool {
	return v.ClusterDetail.IsExternal
}

// GetIsEjected returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetIsEjected() *bool {
	return v.ClusterDetail.IsEjected
}

// GetComponents returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.Components, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetIngressIP() *string {
	return v.ClusterDetail.IngressIP
}

// GetIngressDNS returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetIngressDNS() *string {
	return v.ClusterDetail.IngressDNS
}

// GetClusterProvider returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.Grafana, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetail.UpdatedAt
}

// GetCreatedAt returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetCreatedAt() time.Time {
	return v.ClusterDetail.CreatedAt
}

// GetProjects returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.Projects, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns UpdateClusterDetailsZeetLinkLinkCloudToCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateClusterDetailsZeetLinkLinkCloudToCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateClusterDetailsZeetLinkLinkCloudToCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateClusterDetailsZeetLinkLinkCloudToCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateClusterDetailsZeetLinkLinkCloudToCluster) __premarshalJSON() (*__premarshalUpdateClusterDetailsZeetLinkLinkCloudToCluster, error) {
	var retval __premarshalUpdateClusterDetailsZeetLinkLinkCloudToCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UpdateClusterDetailsZeetLinkLinkCloudToCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// UpdateClusterDetailsZeetLinkResponse is returned by UpdateClusterDetailsZeetLink on success.
type UpdateClusterDetailsZeetLinkResponse struct {
	UpdateCluster      UpdateClusterDetailsZeetLinkUpdateCluster      `json:"updateCluster"`
	LinkCloudToCluster UpdateClusterDetailsZeetLinkLinkCloudToCluster `json:"linkCloudToCluster"`
}

// GetUpdateCluster returns UpdateClusterDetailsZeetLinkResponse.UpdateCluster, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkResponse) GetUpdateCluster() UpdateClusterDetailsZeetLinkUpdateCluster {
	return v.UpdateCluster
}

// GetLinkCloudToCluster returns UpdateClusterDetailsZeetLinkResponse.LinkCloudToCluster, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkResponse) GetLinkCloudToCluster() UpdateClusterDetailsZeetLinkLinkCloudToCluster {
	return v.LinkCloudToCluster
}

// UpdateClusterDetailsZeetLinkUpdateCluster includes the requested fields of the GraphQL type Cluster.
type UpdateClusterDetailsZeetLinkUpdateCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns UpdateClusterDetailsZeetLinkUpdateCluster.Id, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateClusterDetailsZeetLinkUpdateCluster.Name, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns UpdateClusterDetailsZeetLinkUpdateCluster.Region, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetRegion() *string {
	return v.ClusterDetail.Region
}

// GetState returns UpdateClusterDetailsZeetLinkUpdateCluster.State, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetState() ClusterState {
	return v.ClusterDetail.State
}

// GetStatus returns UpdateClusterDetailsZeetLinkUpdateCluster.Status, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetStatus() *ClusterStatus {
	return v.ClusterDetail.Status
}

// GetConnected returns UpdateClusterDetailsZeetLinkUpdateCluster.Connected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetConnected() *bool {
	return v.ClusterDetail.Connected
}

// GetDomain returns UpdateClusterDetailsZeetLinkUpdateCluster.Domain, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetDomain() *string {
	return v.ClusterDetail.Domain
}

// GetIsExternal returns UpdateClusterDetailsZeetLinkUpdateCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetIsExternal() *bool {
	return v.ClusterDetail.IsExternal
}

// GetIsEjected returns UpdateClusterDetailsZeetLinkUpdateCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetIsEjected() *bool {
	return v.ClusterDetail.IsEjected
}

// GetComponents returns UpdateClusterDetailsZeetLinkUpdateCluster.Components, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns UpdateClusterDetailsZeetLinkUpdateCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns UpdateClusterDetailsZeetLinkUpdateCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns UpdateClusterDetailsZeetLinkUpdateCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns UpdateClusterDetailsZeetLinkUpdateCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns UpdateClusterDetailsZeetLinkUpdateCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns UpdateClusterDetailsZeetLinkUpdateCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns UpdateClusterDetailsZeetLinkUpdateCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns UpdateClusterDetailsZeetLinkUpdateCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns UpdateClusterDetailsZeetLinkUpdateCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetIngressIP() *string {
	return v.ClusterDetail.IngressIP
}

// GetIngressDNS returns UpdateClusterDetailsZeetLinkUpdateCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetIngressDNS() *string {
	return v.ClusterDetail.IngressDNS
}

// GetClusterProvider returns UpdateClusterDetailsZeetLinkUpdateCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns UpdateClusterDetailsZeetLinkUpdateCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns UpdateClusterDetailsZeetLinkUpdateCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns UpdateClusterDetailsZeetLinkUpdateCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns UpdateClusterDetailsZeetLinkUpdateCluster.Grafana, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns UpdateClusterDetailsZeetLinkUpdateCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns UpdateClusterDetailsZeetLinkUpdateCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns UpdateClusterDetailsZeetLinkUpdateCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns UpdateClusterDetailsZeetLinkUpdateCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetail.UpdatedAt
}

// GetCreatedAt returns UpdateClusterDetailsZeetLinkUpdateCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetCreatedAt() time.Time {
	return v.ClusterDetail.CreatedAt
}

// GetProjects returns UpdateClusterDetailsZeetLinkUpdateCluster.Projects, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns UpdateClusterDetailsZeetLinkUpdateCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns UpdateClusterDetailsZeetLinkUpdateCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetLinkUpdateCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *UpdateClusterDetailsZeetLinkUpdateCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateClusterDetailsZeetLinkUpdateCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateClusterDetailsZeetLinkUpdateCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateClusterDetailsZeetLinkUpdateCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *UpdateClusterDetailsZeetLinkUpdateCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateClusterDetailsZeetLinkUpdateCluster) __premarshalJSON() (*__premarshalUpdateClusterDetailsZeetLinkUpdateCluster, error) {
	var retval __premarshalUpdateClusterDetailsZeetLinkUpdateCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UpdateClusterDetailsZeetLinkUpdateCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// UpdateClusterDetailsZeetResponse is returned by UpdateClusterDetailsZeet on success.
type UpdateClusterDetailsZeetResponse struct {
	UpdateCluster UpdateClusterDetailsZeetUpdateCluster `json:"updateCluster"`
}

// GetUpdateCluster returns UpdateClusterDetailsZeetResponse.UpdateCluster, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetResponse) GetUpdateCluster() UpdateClusterDetailsZeetUpdateCluster {
	return v.UpdateCluster
}

// UpdateClusterDetailsZeetUpdateCluster includes the requested fields of the GraphQL type Cluster.
type UpdateClusterDetailsZeetUpdateCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns UpdateClusterDetailsZeetUpdateCluster.Id, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateClusterDetailsZeetUpdateCluster.Name, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns UpdateClusterDetailsZeetUpdateCluster.Region, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetRegion() *string { return v.ClusterDetail.Region }

// GetState returns UpdateClusterDetailsZeetUpdateCluster.State, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetState() ClusterState { return v.ClusterDetail.State }

// GetStatus returns UpdateClusterDetailsZeetUpdateCluster.Status, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetStatus() *ClusterStatus {
	return v.ClusterDetail.Status
}

// GetConnected returns UpdateClusterDetailsZeetUpdateCluster.Connected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetConnected() *bool {
	return v.ClusterDetail.Connected
}

// GetDomain returns UpdateClusterDetailsZeetUpdateCluster.Domain, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetDomain() *string { return v.ClusterDetail.Domain }

// GetIsExternal returns UpdateClusterDetailsZeetUpdateCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetIsExternal() *bool {
	return v.ClusterDetail.IsExternal
}

// GetIsEjected returns UpdateClusterDetailsZeetUpdateCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetIsEjected() *bool {
	return v.ClusterDetail.IsEjected
}

// GetComponents returns UpdateClusterDetailsZeetUpdateCluster.Components, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns UpdateClusterDetailsZeetUpdateCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns UpdateClusterDetailsZeetUpdateCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns UpdateClusterDetailsZeetUpdateCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns UpdateClusterDetailsZeetUpdateCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns UpdateClusterDetailsZeetUpdateCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns UpdateClusterDetailsZeetUpdateCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns UpdateClusterDetailsZeetUpdateCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns UpdateClusterDetailsZeetUpdateCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns UpdateClusterDetailsZeetUpdateCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetIngressIP() *string {
	return v.ClusterDetail.IngressIP
}

// GetIngressDNS returns UpdateClusterDetailsZeetUpdateCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetIngressDNS() *string {
	return v.ClusterDetail.IngressDNS
}

// GetClusterProvider returns UpdateClusterDetailsZeetUpdateCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns UpdateClusterDetailsZeetUpdateCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns UpdateClusterDetailsZeetUpdateCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns UpdateClusterDetailsZeetUpdateCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns UpdateClusterDetailsZeetUpdateCluster.Grafana, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns UpdateClusterDetailsZeetUpdateCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns UpdateClusterDetailsZeetUpdateCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns UpdateClusterDetailsZeetUpdateCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns UpdateClusterDetailsZeetUpdateCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetail.UpdatedAt
}

// GetCreatedAt returns UpdateClusterDetailsZeetUpdateCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetCreatedAt() time.Time {
	return v.ClusterDetail.CreatedAt
}

// GetProjects returns UpdateClusterDetailsZeetUpdateCluster.Projects, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns UpdateClusterDetailsZeetUpdateCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns UpdateClusterDetailsZeetUpdateCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *UpdateClusterDetailsZeetUpdateCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *UpdateClusterDetailsZeetUpdateCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateClusterDetailsZeetUpdateCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateClusterDetailsZeetUpdateCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateClusterDetailsZeetUpdateCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *UpdateClusterDetailsZeetUpdateCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateClusterDetailsZeetUpdateCluster) __premarshalJSON() (*__premarshalUpdateClusterDetailsZeetUpdateCluster, error) {
	var retval __premarshalUpdateClusterDetailsZeetUpdateCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UpdateClusterDetailsZeetUpdateCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

type UpdateClusterDomainInput struct {
	Domain    string    `json:"domain"`
	ClusterID uuid.UUID `json:"clusterID"`
}

// GetDomain returns UpdateClusterDomainInput.Domain, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainInput) GetDomain() string { return v.Domain }

// GetClusterID returns UpdateClusterDomainInput.ClusterID, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainInput) GetClusterID() uuid.UUID { return v.ClusterID }

// UpdateClusterDomainResponse is returned by UpdateClusterDomain on success.
type UpdateClusterDomainResponse struct {
	UpdateClusterDomain UpdateClusterDomainUpdateClusterDomainCluster `json:"updateClusterDomain"`
}

// GetUpdateClusterDomain returns UpdateClusterDomainResponse.UpdateClusterDomain, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainResponse) GetUpdateClusterDomain() UpdateClusterDomainUpdateClusterDomainCluster {
	return v.UpdateClusterDomain
}

// UpdateClusterDomainUpdateClusterDomainCluster includes the requested fields of the GraphQL type Cluster.
type UpdateClusterDomainUpdateClusterDomainCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns UpdateClusterDomainUpdateClusterDomainCluster.Id, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateClusterDomainUpdateClusterDomainCluster.Name, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns UpdateClusterDomainUpdateClusterDomainCluster.Region, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetRegion() *string {
	return v.ClusterDetail.Region
}

// GetState returns UpdateClusterDomainUpdateClusterDomainCluster.State, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetState() ClusterState {
	return v.ClusterDetail.State
}

// GetStatus returns UpdateClusterDomainUpdateClusterDomainCluster.Status, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetStatus() *ClusterStatus {
	return v.ClusterDetail.Status
}

// GetConnected returns UpdateClusterDomainUpdateClusterDomainCluster.Connected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetConnected() *bool {
	return v.ClusterDetail.Connected
}

// GetDomain returns UpdateClusterDomainUpdateClusterDomainCluster.Domain, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetDomain() *string {
	return v.ClusterDetail.Domain
}

// GetIsExternal returns UpdateClusterDomainUpdateClusterDomainCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetIsExternal() *bool {
	return v.ClusterDetail.IsExternal
}

// GetIsEjected returns UpdateClusterDomainUpdateClusterDomainCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetIsEjected() *bool {
	return v.ClusterDetail.IsEjected
}

// GetComponents returns UpdateClusterDomainUpdateClusterDomainCluster.Components, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns UpdateClusterDomainUpdateClusterDomainCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns UpdateClusterDomainUpdateClusterDomainCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns UpdateClusterDomainUpdateClusterDomainCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns UpdateClusterDomainUpdateClusterDomainCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns UpdateClusterDomainUpdateClusterDomainCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns UpdateClusterDomainUpdateClusterDomainCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns UpdateClusterDomainUpdateClusterDomainCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns UpdateClusterDomainUpdateClusterDomainCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns UpdateClusterDomainUpdateClusterDomainCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetIngressIP() *string {
	return v.ClusterDetail.IngressIP
}

// GetIngressDNS returns UpdateClusterDomainUpdateClusterDomainCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetIngressDNS() *string {
	return v.ClusterDetail.IngressDNS
}

// GetClusterProvider returns UpdateClusterDomainUpdateClusterDomainCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns UpdateClusterDomainUpdateClusterDomainCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns UpdateClusterDomainUpdateClusterDomainCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns UpdateClusterDomainUpdateClusterDomainCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns UpdateClusterDomainUpdateClusterDomainCluster.Grafana, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns UpdateClusterDomainUpdateClusterDomainCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns UpdateClusterDomainUpdateClusterDomainCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns UpdateClusterDomainUpdateClusterDomainCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns UpdateClusterDomainUpdateClusterDomainCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetail.UpdatedAt
}

// GetCreatedAt returns UpdateClusterDomainUpdateClusterDomainCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetCreatedAt() time.Time {
	return v.ClusterDetail.CreatedAt
}

// GetProjects returns UpdateClusterDomainUpdateClusterDomainCluster.Projects, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns UpdateClusterDomainUpdateClusterDomainCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns UpdateClusterDomainUpdateClusterDomainCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *UpdateClusterDomainUpdateClusterDomainCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *UpdateClusterDomainUpdateClusterDomainCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateClusterDomainUpdateClusterDomainCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateClusterDomainUpdateClusterDomainCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateClusterDomainUpdateClusterDomainCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *UpdateClusterDomainUpdateClusterDomainCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateClusterDomainUpdateClusterDomainCluster) __premarshalJSON() (*__premarshalUpdateClusterDomainUpdateClusterDomainCluster, error) {
	var retval __premarshalUpdateClusterDomainUpdateClusterDomainCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UpdateClusterDomainUpdateClusterDomainCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

type UpdateClusterInput struct {
	Id                       uuid.UUID  `json:"id"`
	Kubeconfig               *string    `json:"kubeconfig"`
	Name                     *string    `json:"name"`
	ContainerRepository      *string    `json:"containerRepository"`
	ContainerCacheRepository *string    `json:"containerCacheRepository"`
	ContainerRegistryID      *uuid.UUID `json:"containerRegistryID"`
	// The new configuration for cluster add-ons. When this field is provided (i.e. not-null), it must include
	// _all_ cluster add-ons present in `Cluster.addOns`, even if some of the add-ons are not being modified.
	//
	// This is because once an add-on is added to a cluster, it cannot be _removed_, only _disabled_.
	AddOns []UpdateClusterAddOn `json:"addOns"`
}

// GetId returns UpdateClusterInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateClusterInput) GetId() uuid.UUID { return v.Id }

// GetKubeconfig returns UpdateClusterInput.Kubeconfig, and is useful for accessing the field via an interface.
func (v *UpdateClusterInput) GetKubeconfig() *string { return v.Kubeconfig }

// GetName returns UpdateClusterInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateClusterInput) GetName() *string { return v.Name }

// GetContainerRepository returns UpdateClusterInput.ContainerRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterInput) GetContainerRepository() *string { return v.ContainerRepository }

// GetContainerCacheRepository returns UpdateClusterInput.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *UpdateClusterInput) GetContainerCacheRepository() *string { return v.ContainerCacheRepository }

// GetContainerRegistryID returns UpdateClusterInput.ContainerRegistryID, and is useful for accessing the field via an interface.
func (v *UpdateClusterInput) GetContainerRegistryID() *uuid.UUID { return v.ContainerRegistryID }

// GetAddOns returns UpdateClusterInput.AddOns, and is useful for accessing the field via an interface.
func (v *UpdateClusterInput) GetAddOns() []UpdateClusterAddOn { return v.AddOns }

type UpdateCoreWeaveAccountInput struct {
	Id   uuid.UUID `json:"id"`
	Name *string   `json:"name"`
}

// GetId returns UpdateCoreWeaveAccountInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateCoreWeaveAccountInput) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateCoreWeaveAccountInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateCoreWeaveAccountInput) GetName() *string { return v.Name }

type UpdateDOAccountInput struct {
	Id          uuid.UUID `json:"id"`
	Name        *string   `json:"name"`
	AccessToken *string   `json:"accessToken"`
}

// GetId returns UpdateDOAccountInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateDOAccountInput) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateDOAccountInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateDOAccountInput) GetName() *string { return v.Name }

// GetAccessToken returns UpdateDOAccountInput.AccessToken, and is useful for accessing the field via an interface.
func (v *UpdateDOAccountInput) GetAccessToken() *string { return v.AccessToken }

type UpdateDatabaseLinkInput struct {
	Id        uuid.UUID `json:"id"`
	EnvPrefix *string   `json:"envPrefix"`
}

// GetId returns UpdateDatabaseLinkInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateDatabaseLinkInput) GetId() uuid.UUID { return v.Id }

// GetEnvPrefix returns UpdateDatabaseLinkInput.EnvPrefix, and is useful for accessing the field via an interface.
func (v *UpdateDatabaseLinkInput) GetEnvPrefix() *string { return v.EnvPrefix }

type UpdateGCPAccountInput struct {
	Id   uuid.UUID `json:"id"`
	Name *string   `json:"name"`
}

// GetId returns UpdateGCPAccountInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateGCPAccountInput) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateGCPAccountInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateGCPAccountInput) GetName() *string { return v.Name }

type UpdateGitlabIntegrationInput struct {
	UserID      uuid.UUID `json:"userID"`
	Id          uuid.UUID `json:"id"`
	Name        *string   `json:"name"`
	ApiUrl      *string   `json:"apiUrl"`
	AccessToken string    `json:"accessToken"`
}

// GetUserID returns UpdateGitlabIntegrationInput.UserID, and is useful for accessing the field via an interface.
func (v *UpdateGitlabIntegrationInput) GetUserID() uuid.UUID { return v.UserID }

// GetId returns UpdateGitlabIntegrationInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateGitlabIntegrationInput) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateGitlabIntegrationInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateGitlabIntegrationInput) GetName() *string { return v.Name }

// GetApiUrl returns UpdateGitlabIntegrationInput.ApiUrl, and is useful for accessing the field via an interface.
func (v *UpdateGitlabIntegrationInput) GetApiUrl() *string { return v.ApiUrl }

// GetAccessToken returns UpdateGitlabIntegrationInput.AccessToken, and is useful for accessing the field via an interface.
func (v *UpdateGitlabIntegrationInput) GetAccessToken() string { return v.AccessToken }

type UpdateLinodeAccountInput struct {
	Id          uuid.UUID `json:"id"`
	Name        *string   `json:"name"`
	AccessToken *string   `json:"accessToken"`
}

// GetId returns UpdateLinodeAccountInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateLinodeAccountInput) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateLinodeAccountInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateLinodeAccountInput) GetName() *string { return v.Name }

// GetAccessToken returns UpdateLinodeAccountInput.AccessToken, and is useful for accessing the field via an interface.
func (v *UpdateLinodeAccountInput) GetAccessToken() *string { return v.AccessToken }

type UpdateMarketplaceBlueprintInput struct {
	UserID      uuid.UUID `json:"userID"`
	BlueprintID uuid.UUID `json:"blueprintID"`
	Enabled     *bool     `json:"enabled"`
}

// GetUserID returns UpdateMarketplaceBlueprintInput.UserID, and is useful for accessing the field via an interface.
func (v *UpdateMarketplaceBlueprintInput) GetUserID() uuid.UUID { return v.UserID }

// GetBlueprintID returns UpdateMarketplaceBlueprintInput.BlueprintID, and is useful for accessing the field via an interface.
func (v *UpdateMarketplaceBlueprintInput) GetBlueprintID() uuid.UUID { return v.BlueprintID }

// GetEnabled returns UpdateMarketplaceBlueprintInput.Enabled, and is useful for accessing the field via an interface.
func (v *UpdateMarketplaceBlueprintInput) GetEnabled() *bool { return v.Enabled }

type UpdateProjectDangerInput struct {
	// - v0.RepoID
	Id                             uuid.UUID           `json:"id"`
	Namespace                      *string             `json:"namespace"`
	AppID                          *string             `json:"appID"`
	DefaultIngressDomain           *string             `json:"defaultIngressDomain"`
	UseHumanReadableKubernetesName *bool               `json:"useHumanReadableKubernetesName"`
	DeployTarget                   *ProjectDeployInput `json:"deployTarget"`
}

// GetId returns UpdateProjectDangerInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateProjectDangerInput) GetId() uuid.UUID { return v.Id }

// GetNamespace returns UpdateProjectDangerInput.Namespace, and is useful for accessing the field via an interface.
func (v *UpdateProjectDangerInput) GetNamespace() *string { return v.Namespace }

// GetAppID returns UpdateProjectDangerInput.AppID, and is useful for accessing the field via an interface.
func (v *UpdateProjectDangerInput) GetAppID() *string { return v.AppID }

// GetDefaultIngressDomain returns UpdateProjectDangerInput.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *UpdateProjectDangerInput) GetDefaultIngressDomain() *string { return v.DefaultIngressDomain }

// GetUseHumanReadableKubernetesName returns UpdateProjectDangerInput.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *UpdateProjectDangerInput) GetUseHumanReadableKubernetesName() *bool {
	return v.UseHumanReadableKubernetesName
}

// GetDeployTarget returns UpdateProjectDangerInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *UpdateProjectDangerInput) GetDeployTarget() *ProjectDeployInput { return v.DeployTarget }

type UpdateProjectEnvironmentInput struct {
	Id              uuid.UUID     `json:"id"`
	Name            *string       `json:"name"`
	RedeployRepoIDs []uuid.UUID   `json:"redeployRepoIDs"`
	Envs            []EnvVarInput `json:"envs"`
}

// GetId returns UpdateProjectEnvironmentInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateProjectEnvironmentInput) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateProjectEnvironmentInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateProjectEnvironmentInput) GetName() *string { return v.Name }

// GetRedeployRepoIDs returns UpdateProjectEnvironmentInput.RedeployRepoIDs, and is useful for accessing the field via an interface.
func (v *UpdateProjectEnvironmentInput) GetRedeployRepoIDs() []uuid.UUID { return v.RedeployRepoIDs }

// GetEnvs returns UpdateProjectEnvironmentInput.Envs, and is useful for accessing the field via an interface.
func (v *UpdateProjectEnvironmentInput) GetEnvs() []EnvVarInput { return v.Envs }

type UpdateProjectInput struct {
	// - v0.RepoID
	Id                            uuid.UUID                        `json:"id"`
	Path                          *string                          `json:"path"`
	Name                          *string                          `json:"name"`
	DockerImage                   *string                          `json:"dockerImage"`
	GithubIntegration             *GitHubRepoIntegrationInput      `json:"githubIntegration"`
	GitlabIntegration             *GitlabRepoIntegrationInput      `json:"gitlabIntegration"`
	BuildType                     *string                          `json:"buildType"`
	DockerfilePath                *string                          `json:"dockerfilePath"`
	DockerfileText                *string                          `json:"dockerfileText"`
	WorkingDirectory              *string                          `json:"workingDirectory"`
	BuildCommand                  *string                          `json:"buildCommand"`
	RunCommand                    *string                          `json:"runCommand"`
	StaticPath                    *string                          `json:"staticPath"`
	ReleaseCommand                *string                          `json:"releaseCommand"`
	NodejsVersion                 *string                          `json:"nodejsVersion"`
	PythonVersion                 *string                          `json:"pythonVersion"`
	GolangVersion                 *string                          `json:"golangVersion"`
	NoBuildCache                  *bool                            `json:"noBuildCache"`
	GitSubmodules                 *GitSubmodulesType               `json:"gitSubmodules"`
	KanikoFlags                   *KanikoFlagsInput                `json:"kanikoFlags"`
	AlternativeImageTagTemplates  []string                         `json:"alternativeImageTagTemplates"`
	Volumes                       *string                          `json:"volumes"`
	Ports                         *string                          `json:"ports"`
	Replication                   []ReplicationInput               `json:"replication"`
	Resources                     *ContainerResourcesSpecInput     `json:"resources"`
	BuildResources                *ContainerResourcesSpecInput     `json:"buildResources"`
	BranchResources               *ContainerResourcesSpecInput     `json:"branchResources"`
	ServerlessResources           *ServerlessResourcesSpecInput    `json:"serverlessResources"`
	ReadinessProbe                *ProbeInput                      `json:"readinessProbe"`
	LivenessProbe                 *ProbeInput                      `json:"livenessProbe"`
	StartupProbe                  *ProbeInput                      `json:"startupProbe"`
	Autoscaling                   *AutoscalingInput                `json:"autoscaling"`
	PreStopSleep                  *int                             `json:"preStopSleep"`
	TerminationGracePeriodSeconds *int                             `json:"terminationGracePeriodSeconds"`
	PrometheusScrape              *PrometheusScrapeInput           `json:"prometheusScrape"`
	HostNetwork                   *bool                            `json:"hostNetwork"`
	StaticIP                      *bool                            `json:"staticIP"`
	IamPolicies                   []string                         `json:"iamPolicies"`
	ManualDeploy                  *bool                            `json:"manualDeploy"`
	AutoRetry                     *bool                            `json:"autoRetry"`
	AutoRollback                  *bool                            `json:"autoRollback"`
	DeployStrategy                *DeployStrategy                  `json:"deployStrategy"`
	DeployTimeoutSeconds          *int                             `json:"deployTimeoutSeconds"`
	HelmVersion                   *string                          `json:"helmVersion"`
	HelmValues                    *string                          `json:"helmValues"`
	TerraformSource               *string                          `json:"terraformSource"`
	TerraformVersion              *string                          `json:"terraformVersion"`
	TerraformVariables            *string                          `json:"terraformVariables"`
	Manifests                     []string                         `json:"manifests"`
	ManifestValue                 *string                          `json:"manifestValue"`
	Manifest                      *ResourceKubernetesManifestInput `json:"manifest"`
	AwsIamRole                    *string                          `json:"awsIamRole"`
	GcpServiceAccount             *string                          `json:"gcpServiceAccount"`
	ClusterIssuerName             *string                          `json:"clusterIssuerName"`
	LogShipper                    *LogShipperInput                 `json:"logShipper"`
	DeployService                 *bool                            `json:"deployService"`
	DeployJob                     *bool                            `json:"deployJob"`
	CronJobSchedule               *string                          `json:"cronJobSchedule"`
	ProductionBranch              *string                          `json:"productionBranch"`
	ContainerRepository           *string                          `json:"containerRepository"`
	ContainerCacheRepository      *string                          `json:"containerCacheRepository"`
	ContainerRegistryID           *uuid.UUID                       `json:"containerRegistryID"`
	NodeSelector                  *string                          `json:"nodeSelector"`
	SecretMounts                  []KubernetesSecretMountInput     `json:"secretMounts"`
	KubernetesCustomization       *KubernetesCustomizationInput    `json:"kubernetesCustomization"`
	BuildCPU                      *float64                         `json:"buildCPU"`
	BuildMemory                   *float64                         `json:"buildMemory"`
	Cpu                           *string                          `json:"cpu"`
	Memory                        *string                          `json:"memory"`
	EphemeralStorage              *float64                         `json:"ephemeralStorage"`
	Gpu                           *GPUInput                        `json:"gpu"`
	Tpu                           *TPUInput                        `json:"tpu"`
	Dedicated                     *bool                            `json:"dedicated"`
	GithubInstallationID          *string                          `json:"githubInstallationID"`
	GithubRepository              *string                          `json:"githubRepository"`
	DeployBranch                  *bool                            `json:"deployBranch"`
	BranchIgnore                  *string                          `json:"branchIgnore"`
	DatadogApmEnabled             *bool                            `json:"datadogApmEnabled"`
	PipelineClusterID             *uuid.UUID                       `json:"pipelineClusterID"`
	DeployTarget                  *ProjectDeployInput              `json:"deployTarget"`
}

// GetId returns UpdateProjectInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetId() uuid.UUID { return v.Id }

// GetPath returns UpdateProjectInput.Path, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetPath() *string { return v.Path }

// GetName returns UpdateProjectInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetName() *string { return v.Name }

// GetDockerImage returns UpdateProjectInput.DockerImage, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDockerImage() *string { return v.DockerImage }

// GetGithubIntegration returns UpdateProjectInput.GithubIntegration, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGithubIntegration() *GitHubRepoIntegrationInput {
	return v.GithubIntegration
}

// GetGitlabIntegration returns UpdateProjectInput.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGitlabIntegration() *GitlabRepoIntegrationInput {
	return v.GitlabIntegration
}

// GetBuildType returns UpdateProjectInput.BuildType, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBuildType() *string { return v.BuildType }

// GetDockerfilePath returns UpdateProjectInput.DockerfilePath, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDockerfilePath() *string { return v.DockerfilePath }

// GetDockerfileText returns UpdateProjectInput.DockerfileText, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDockerfileText() *string { return v.DockerfileText }

// GetWorkingDirectory returns UpdateProjectInput.WorkingDirectory, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetWorkingDirectory() *string { return v.WorkingDirectory }

// GetBuildCommand returns UpdateProjectInput.BuildCommand, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBuildCommand() *string { return v.BuildCommand }

// GetRunCommand returns UpdateProjectInput.RunCommand, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetRunCommand() *string { return v.RunCommand }

// GetStaticPath returns UpdateProjectInput.StaticPath, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetStaticPath() *string { return v.StaticPath }

// GetReleaseCommand returns UpdateProjectInput.ReleaseCommand, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetReleaseCommand() *string { return v.ReleaseCommand }

// GetNodejsVersion returns UpdateProjectInput.NodejsVersion, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetNodejsVersion() *string { return v.NodejsVersion }

// GetPythonVersion returns UpdateProjectInput.PythonVersion, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetPythonVersion() *string { return v.PythonVersion }

// GetGolangVersion returns UpdateProjectInput.GolangVersion, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGolangVersion() *string { return v.GolangVersion }

// GetNoBuildCache returns UpdateProjectInput.NoBuildCache, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetNoBuildCache() *bool { return v.NoBuildCache }

// GetGitSubmodules returns UpdateProjectInput.GitSubmodules, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGitSubmodules() *GitSubmodulesType { return v.GitSubmodules }

// GetKanikoFlags returns UpdateProjectInput.KanikoFlags, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetKanikoFlags() *KanikoFlagsInput { return v.KanikoFlags }

// GetAlternativeImageTagTemplates returns UpdateProjectInput.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetAlternativeImageTagTemplates() []string {
	return v.AlternativeImageTagTemplates
}

// GetVolumes returns UpdateProjectInput.Volumes, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetVolumes() *string { return v.Volumes }

// GetPorts returns UpdateProjectInput.Ports, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetPorts() *string { return v.Ports }

// GetReplication returns UpdateProjectInput.Replication, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetReplication() []ReplicationInput { return v.Replication }

// GetResources returns UpdateProjectInput.Resources, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetResources() *ContainerResourcesSpecInput { return v.Resources }

// GetBuildResources returns UpdateProjectInput.BuildResources, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBuildResources() *ContainerResourcesSpecInput {
	return v.BuildResources
}

// GetBranchResources returns UpdateProjectInput.BranchResources, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBranchResources() *ContainerResourcesSpecInput {
	return v.BranchResources
}

// GetServerlessResources returns UpdateProjectInput.ServerlessResources, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetServerlessResources() *ServerlessResourcesSpecInput {
	return v.ServerlessResources
}

// GetReadinessProbe returns UpdateProjectInput.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetReadinessProbe() *ProbeInput { return v.ReadinessProbe }

// GetLivenessProbe returns UpdateProjectInput.LivenessProbe, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetLivenessProbe() *ProbeInput { return v.LivenessProbe }

// GetStartupProbe returns UpdateProjectInput.StartupProbe, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetStartupProbe() *ProbeInput { return v.StartupProbe }

// GetAutoscaling returns UpdateProjectInput.Autoscaling, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetAutoscaling() *AutoscalingInput { return v.Autoscaling }

// GetPreStopSleep returns UpdateProjectInput.PreStopSleep, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetPreStopSleep() *int { return v.PreStopSleep }

// GetTerminationGracePeriodSeconds returns UpdateProjectInput.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetTerminationGracePeriodSeconds() *int {
	return v.TerminationGracePeriodSeconds
}

// GetPrometheusScrape returns UpdateProjectInput.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetPrometheusScrape() *PrometheusScrapeInput { return v.PrometheusScrape }

// GetHostNetwork returns UpdateProjectInput.HostNetwork, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetHostNetwork() *bool { return v.HostNetwork }

// GetStaticIP returns UpdateProjectInput.StaticIP, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetStaticIP() *bool { return v.StaticIP }

// GetIamPolicies returns UpdateProjectInput.IamPolicies, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetIamPolicies() []string { return v.IamPolicies }

// GetManualDeploy returns UpdateProjectInput.ManualDeploy, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetManualDeploy() *bool { return v.ManualDeploy }

// GetAutoRetry returns UpdateProjectInput.AutoRetry, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetAutoRetry() *bool { return v.AutoRetry }

// GetAutoRollback returns UpdateProjectInput.AutoRollback, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetAutoRollback() *bool { return v.AutoRollback }

// GetDeployStrategy returns UpdateProjectInput.DeployStrategy, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDeployStrategy() *DeployStrategy { return v.DeployStrategy }

// GetDeployTimeoutSeconds returns UpdateProjectInput.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDeployTimeoutSeconds() *int { return v.DeployTimeoutSeconds }

// GetHelmVersion returns UpdateProjectInput.HelmVersion, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetHelmVersion() *string { return v.HelmVersion }

// GetHelmValues returns UpdateProjectInput.HelmValues, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetHelmValues() *string { return v.HelmValues }

// GetTerraformSource returns UpdateProjectInput.TerraformSource, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetTerraformSource() *string { return v.TerraformSource }

// GetTerraformVersion returns UpdateProjectInput.TerraformVersion, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetTerraformVersion() *string { return v.TerraformVersion }

// GetTerraformVariables returns UpdateProjectInput.TerraformVariables, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetTerraformVariables() *string { return v.TerraformVariables }

// GetManifests returns UpdateProjectInput.Manifests, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetManifests() []string { return v.Manifests }

// GetManifestValue returns UpdateProjectInput.ManifestValue, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetManifestValue() *string { return v.ManifestValue }

// GetManifest returns UpdateProjectInput.Manifest, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetManifest() *ResourceKubernetesManifestInput { return v.Manifest }

// GetAwsIamRole returns UpdateProjectInput.AwsIamRole, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetAwsIamRole() *string { return v.AwsIamRole }

// GetGcpServiceAccount returns UpdateProjectInput.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGcpServiceAccount() *string { return v.GcpServiceAccount }

// GetClusterIssuerName returns UpdateProjectInput.ClusterIssuerName, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetClusterIssuerName() *string { return v.ClusterIssuerName }

// GetLogShipper returns UpdateProjectInput.LogShipper, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetLogShipper() *LogShipperInput { return v.LogShipper }

// GetDeployService returns UpdateProjectInput.DeployService, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDeployService() *bool { return v.DeployService }

// GetDeployJob returns UpdateProjectInput.DeployJob, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDeployJob() *bool { return v.DeployJob }

// GetCronJobSchedule returns UpdateProjectInput.CronJobSchedule, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetCronJobSchedule() *string { return v.CronJobSchedule }

// GetProductionBranch returns UpdateProjectInput.ProductionBranch, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetProductionBranch() *string { return v.ProductionBranch }

// GetContainerRepository returns UpdateProjectInput.ContainerRepository, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetContainerRepository() *string { return v.ContainerRepository }

// GetContainerCacheRepository returns UpdateProjectInput.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetContainerCacheRepository() *string { return v.ContainerCacheRepository }

// GetContainerRegistryID returns UpdateProjectInput.ContainerRegistryID, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetContainerRegistryID() *uuid.UUID { return v.ContainerRegistryID }

// GetNodeSelector returns UpdateProjectInput.NodeSelector, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetNodeSelector() *string { return v.NodeSelector }

// GetSecretMounts returns UpdateProjectInput.SecretMounts, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetSecretMounts() []KubernetesSecretMountInput { return v.SecretMounts }

// GetKubernetesCustomization returns UpdateProjectInput.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetKubernetesCustomization() *KubernetesCustomizationInput {
	return v.KubernetesCustomization
}

// GetBuildCPU returns UpdateProjectInput.BuildCPU, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBuildCPU() *float64 { return v.BuildCPU }

// GetBuildMemory returns UpdateProjectInput.BuildMemory, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBuildMemory() *float64 { return v.BuildMemory }

// GetCpu returns UpdateProjectInput.Cpu, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetCpu() *string { return v.Cpu }

// GetMemory returns UpdateProjectInput.Memory, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetMemory() *string { return v.Memory }

// GetEphemeralStorage returns UpdateProjectInput.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetEphemeralStorage() *float64 { return v.EphemeralStorage }

// GetGpu returns UpdateProjectInput.Gpu, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGpu() *GPUInput { return v.Gpu }

// GetTpu returns UpdateProjectInput.Tpu, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetTpu() *TPUInput { return v.Tpu }

// GetDedicated returns UpdateProjectInput.Dedicated, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDedicated() *bool { return v.Dedicated }

// GetGithubInstallationID returns UpdateProjectInput.GithubInstallationID, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGithubInstallationID() *string { return v.GithubInstallationID }

// GetGithubRepository returns UpdateProjectInput.GithubRepository, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGithubRepository() *string { return v.GithubRepository }

// GetDeployBranch returns UpdateProjectInput.DeployBranch, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDeployBranch() *bool { return v.DeployBranch }

// GetBranchIgnore returns UpdateProjectInput.BranchIgnore, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetBranchIgnore() *string { return v.BranchIgnore }

// GetDatadogApmEnabled returns UpdateProjectInput.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDatadogApmEnabled() *bool { return v.DatadogApmEnabled }

// GetPipelineClusterID returns UpdateProjectInput.PipelineClusterID, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetPipelineClusterID() *uuid.UUID { return v.PipelineClusterID }

// GetDeployTarget returns UpdateProjectInput.DeployTarget, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetDeployTarget() *ProjectDeployInput { return v.DeployTarget }

type UpdateProjectV2Input struct {
	Id   uuid.UUID     `json:"id"`
	Name *string       `json:"name"`
	Envs []EnvVarInput `json:"envs"`
}

// GetId returns UpdateProjectV2Input.Id, and is useful for accessing the field via an interface.
func (v *UpdateProjectV2Input) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateProjectV2Input.Name, and is useful for accessing the field via an interface.
func (v *UpdateProjectV2Input) GetName() *string { return v.Name }

// GetEnvs returns UpdateProjectV2Input.Envs, and is useful for accessing the field via an interface.
func (v *UpdateProjectV2Input) GetEnvs() []EnvVarInput { return v.Envs }

type UpdateProjectV3Input struct {
	Name                *string                  `json:"name"`
	RequirePlanApproval *bool                    `json:"requirePlanApproval"`
	Variables           []BlueprintVariableInput `json:"variables"`
	// - v0.ProjectID or v1.GroupID
	ProjectID *uuid.UUID `json:"projectID"`
	// - v0.EnvironmentID or v1.SubGroupID
	EnvironmentID *uuid.UUID `json:"environmentID"`
	// Blueprint configuration overrides to apply to the project, or the configuration if this project is based on
	// a sourceless blueprint. If set to null, the configuration will be cleared. If omitted, no changes occur.
	// Otherwise, a partial PATCH update will be performed.
	BlueprintConfiguration *BlueprintConfigurationInput          `json:"blueprintConfiguration"`
	TerraformConfiguration *TerraformProjectV3ConfigurationInput `json:"terraformConfiguration"`
	ManifestConfiguration  *ManifestProjectV3ConfigurationInput  `json:"manifestConfiguration"`
	HelmConfiguration      *HelmProjectV3ConfigurationInput      `json:"helmConfiguration"`
}

// GetName returns UpdateProjectV3Input.Name, and is useful for accessing the field via an interface.
func (v *UpdateProjectV3Input) GetName() *string { return v.Name }

// GetRequirePlanApproval returns UpdateProjectV3Input.RequirePlanApproval, and is useful for accessing the field via an interface.
func (v *UpdateProjectV3Input) GetRequirePlanApproval() *bool { return v.RequirePlanApproval }

// GetVariables returns UpdateProjectV3Input.Variables, and is useful for accessing the field via an interface.
func (v *UpdateProjectV3Input) GetVariables() []BlueprintVariableInput { return v.Variables }

// GetProjectID returns UpdateProjectV3Input.ProjectID, and is useful for accessing the field via an interface.
func (v *UpdateProjectV3Input) GetProjectID() *uuid.UUID { return v.ProjectID }

// GetEnvironmentID returns UpdateProjectV3Input.EnvironmentID, and is useful for accessing the field via an interface.
func (v *UpdateProjectV3Input) GetEnvironmentID() *uuid.UUID { return v.EnvironmentID }

// GetBlueprintConfiguration returns UpdateProjectV3Input.BlueprintConfiguration, and is useful for accessing the field via an interface.
func (v *UpdateProjectV3Input) GetBlueprintConfiguration() *BlueprintConfigurationInput {
	return v.BlueprintConfiguration
}

// GetTerraformConfiguration returns UpdateProjectV3Input.TerraformConfiguration, and is useful for accessing the field via an interface.
func (v *UpdateProjectV3Input) GetTerraformConfiguration() *TerraformProjectV3ConfigurationInput {
	return v.TerraformConfiguration
}

// GetManifestConfiguration returns UpdateProjectV3Input.ManifestConfiguration, and is useful for accessing the field via an interface.
func (v *UpdateProjectV3Input) GetManifestConfiguration() *ManifestProjectV3ConfigurationInput {
	return v.ManifestConfiguration
}

// GetHelmConfiguration returns UpdateProjectV3Input.HelmConfiguration, and is useful for accessing the field via an interface.
func (v *UpdateProjectV3Input) GetHelmConfiguration() *HelmProjectV3ConfigurationInput {
	return v.HelmConfiguration
}

type UpdateRepoCustomDomainInput struct {
	Id                        uuid.UUID                 `json:"id"`
	DisableCertManager        *bool                     `json:"disableCertManager"`
	CertManagerChallengerType *CertManagerChallengeType `json:"certManagerChallengerType"`
	SyncDomainID              *uuid.UUID                `json:"syncDomainID"`
}

// GetId returns UpdateRepoCustomDomainInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateRepoCustomDomainInput) GetId() uuid.UUID { return v.Id }

// GetDisableCertManager returns UpdateRepoCustomDomainInput.DisableCertManager, and is useful for accessing the field via an interface.
func (v *UpdateRepoCustomDomainInput) GetDisableCertManager() *bool { return v.DisableCertManager }

// GetCertManagerChallengerType returns UpdateRepoCustomDomainInput.CertManagerChallengerType, and is useful for accessing the field via an interface.
func (v *UpdateRepoCustomDomainInput) GetCertManagerChallengerType() *CertManagerChallengeType {
	return v.CertManagerChallengerType
}

// GetSyncDomainID returns UpdateRepoCustomDomainInput.SyncDomainID, and is useful for accessing the field via an interface.
func (v *UpdateRepoCustomDomainInput) GetSyncDomainID() *uuid.UUID { return v.SyncDomainID }

type UpdateRepoPipelineLinkInput struct {
	// - v0.RepoID
	Id           uuid.UUID  `json:"id"`
	SourceEvent  *RepoEvent `json:"sourceEvent"`
	TargetRepoID *uuid.UUID `json:"targetRepoID"`
	// - v0.EnvironmentID or v1.SubGroupID
	TargetEnvironmentID *uuid.UUID  `json:"targetEnvironmentID"`
	TargetAction        *RepoAction `json:"targetAction"`
}

// GetId returns UpdateRepoPipelineLinkInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateRepoPipelineLinkInput) GetId() uuid.UUID { return v.Id }

// GetSourceEvent returns UpdateRepoPipelineLinkInput.SourceEvent, and is useful for accessing the field via an interface.
func (v *UpdateRepoPipelineLinkInput) GetSourceEvent() *RepoEvent { return v.SourceEvent }

// GetTargetRepoID returns UpdateRepoPipelineLinkInput.TargetRepoID, and is useful for accessing the field via an interface.
func (v *UpdateRepoPipelineLinkInput) GetTargetRepoID() *uuid.UUID { return v.TargetRepoID }

// GetTargetEnvironmentID returns UpdateRepoPipelineLinkInput.TargetEnvironmentID, and is useful for accessing the field via an interface.
func (v *UpdateRepoPipelineLinkInput) GetTargetEnvironmentID() *uuid.UUID {
	return v.TargetEnvironmentID
}

// GetTargetAction returns UpdateRepoPipelineLinkInput.TargetAction, and is useful for accessing the field via an interface.
func (v *UpdateRepoPipelineLinkInput) GetTargetAction() *RepoAction { return v.TargetAction }

type UpdateResourceAlphaInput struct {
	Source *SourceInput `json:"source"`
}

// GetSource returns UpdateResourceAlphaInput.Source, and is useful for accessing the field via an interface.
func (v *UpdateResourceAlphaInput) GetSource() *SourceInput { return v.Source }

type UpdateTeamInput struct {
	Id            uuid.UUID            `json:"id"`
	Plan          *UpdateTeamPlanInput `json:"plan"`
	PaymentMethod *string              `json:"paymentMethod"`
}

// GetId returns UpdateTeamInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateTeamInput) GetId() uuid.UUID { return v.Id }

// GetPlan returns UpdateTeamInput.Plan, and is useful for accessing the field via an interface.
func (v *UpdateTeamInput) GetPlan() *UpdateTeamPlanInput { return v.Plan }

// GetPaymentMethod returns UpdateTeamInput.PaymentMethod, and is useful for accessing the field via an interface.
func (v *UpdateTeamInput) GetPaymentMethod() *string { return v.PaymentMethod }

type UpdateTeamMemberRoleInput struct {
	Id   uuid.UUID      `json:"id"`
	Role TeamMemberRole `json:"role"`
}

// GetId returns UpdateTeamMemberRoleInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateTeamMemberRoleInput) GetId() uuid.UUID { return v.Id }

// GetRole returns UpdateTeamMemberRoleInput.Role, and is useful for accessing the field via an interface.
func (v *UpdateTeamMemberRoleInput) GetRole() TeamMemberRole { return v.Role }

// UpdateTeamMemberRoleResponse is returned by UpdateTeamMemberRole on success.
type UpdateTeamMemberRoleResponse struct {
	UpdateTeamMemberRole UpdateTeamMemberRoleUpdateTeamMemberRoleUserTeamEdge `json:"updateTeamMemberRole"`
}

// GetUpdateTeamMemberRole returns UpdateTeamMemberRoleResponse.UpdateTeamMemberRole, and is useful for accessing the field via an interface.
func (v *UpdateTeamMemberRoleResponse) GetUpdateTeamMemberRole() UpdateTeamMemberRoleUpdateTeamMemberRoleUserTeamEdge {
	return v.UpdateTeamMemberRole
}

// UpdateTeamMemberRoleUpdateTeamMemberRoleUserTeamEdge includes the requested fields of the GraphQL type UserTeamEdge.
type UpdateTeamMemberRoleUpdateTeamMemberRoleUserTeamEdge struct {
	Role TeamMemberRole `json:"role"`
	Id   uuid.UUID      `json:"id"`
}

// GetRole returns UpdateTeamMemberRoleUpdateTeamMemberRoleUserTeamEdge.Role, and is useful for accessing the field via an interface.
func (v *UpdateTeamMemberRoleUpdateTeamMemberRoleUserTeamEdge) GetRole() TeamMemberRole {
	return v.Role
}

// GetId returns UpdateTeamMemberRoleUpdateTeamMemberRoleUserTeamEdge.Id, and is useful for accessing the field via an interface.
func (v *UpdateTeamMemberRoleUpdateTeamMemberRoleUserTeamEdge) GetId() uuid.UUID { return v.Id }

type UpdateTeamPlanInput struct {
	Tier          PlanTier          `json:"tier"`
	BillingPeriod PlanBillingPeriod `json:"billingPeriod"`
}

// GetTier returns UpdateTeamPlanInput.Tier, and is useful for accessing the field via an interface.
func (v *UpdateTeamPlanInput) GetTier() PlanTier { return v.Tier }

// GetBillingPeriod returns UpdateTeamPlanInput.BillingPeriod, and is useful for accessing the field via an interface.
func (v *UpdateTeamPlanInput) GetBillingPeriod() PlanBillingPeriod { return v.BillingPeriod }

type UpdateUserInput struct {
	Id     uuid.UUID `json:"id"`
	Avatar *string   `json:"avatar"`
	Login  *string   `json:"login"`
	Name   *string   `json:"name"`
	Email  *string   `json:"email"`
}

// GetId returns UpdateUserInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetId() uuid.UUID { return v.Id }

// GetAvatar returns UpdateUserInput.Avatar, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetAvatar() *string { return v.Avatar }

// GetLogin returns UpdateUserInput.Login, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetLogin() *string { return v.Login }

// GetName returns UpdateUserInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetName() *string { return v.Name }

// GetEmail returns UpdateUserInput.Email, and is useful for accessing the field via an interface.
func (v *UpdateUserInput) GetEmail() *string { return v.Email }

type UpdateVultrAccountInput struct {
	Id   uuid.UUID `json:"id"`
	Name *string   `json:"name"`
}

// GetId returns UpdateVultrAccountInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateVultrAccountInput) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateVultrAccountInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateVultrAccountInput) GetName() *string { return v.Name }

type UpdateWebhookIntegrationInput struct {
	UserID uuid.UUID `json:"userID"`
	Id     uuid.UUID `json:"id"`
	Url    string    `json:"url"`
}

// GetUserID returns UpdateWebhookIntegrationInput.UserID, and is useful for accessing the field via an interface.
func (v *UpdateWebhookIntegrationInput) GetUserID() uuid.UUID { return v.UserID }

// GetId returns UpdateWebhookIntegrationInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateWebhookIntegrationInput) GetId() uuid.UUID { return v.Id }

// GetUrl returns UpdateWebhookIntegrationInput.Url, and is useful for accessing the field via an interface.
func (v *UpdateWebhookIntegrationInput) GetUrl() string { return v.Url }

// UrlOrContactUsDetail includes the GraphQL fields of UrlOrContactUs requested by the fragment UrlOrContactUsDetail.
// The GraphQL type's documentation follows.
//
// If a self-service link is available, url will be non-null. If url is null, notAllowed should be non-null.
type UrlOrContactUsDetail struct {
	Url       *string    `json:"url"`
	ContactUs *ContactUs `json:"contactUs"`
}

// GetUrl returns UrlOrContactUsDetail.Url, and is useful for accessing the field via an interface.
func (v *UrlOrContactUsDetail) GetUrl() *string { return v.Url }

// GetContactUs returns UrlOrContactUsDetail.ContactUs, and is useful for accessing the field via an interface.
func (v *UrlOrContactUsDetail) GetContactUs() *ContactUs { return v.ContactUs }

// UserClouds includes the GraphQL fields of User requested by the fragment UserClouds.
type UserClouds struct {
	AwsAccounts       []UserCloudsAwsAccountsAWSAccount             `json:"awsAccounts"`
	GcpAccounts       []UserCloudsGcpAccountsGCPAccount             `json:"gcpAccounts"`
	DoAccounts        []UserCloudsDoAccountsDOAccount               `json:"doAccounts"`
	CoreweaveAccounts []UserCloudsCoreweaveAccountsCoreWeaveAccount `json:"coreweaveAccounts"`
	LinodeAccounts    []UserCloudsLinodeAccountsLinodeAccount       `json:"linodeAccounts"`
	VultrAccounts     []UserCloudsVultrAccountsVultrAccount         `json:"vultrAccounts"`
	AzureAccounts     []UserCloudsAzureAccountsAzureAccount         `json:"azureAccounts"`
}

// GetAwsAccounts returns UserClouds.AwsAccounts, and is useful for accessing the field via an interface.
func (v *UserClouds) GetAwsAccounts() []UserCloudsAwsAccountsAWSAccount { return v.AwsAccounts }

// GetGcpAccounts returns UserClouds.GcpAccounts, and is useful for accessing the field via an interface.
func (v *UserClouds) GetGcpAccounts() []UserCloudsGcpAccountsGCPAccount { return v.GcpAccounts }

// GetDoAccounts returns UserClouds.DoAccounts, and is useful for accessing the field via an interface.
func (v *UserClouds) GetDoAccounts() []UserCloudsDoAccountsDOAccount { return v.DoAccounts }

// GetCoreweaveAccounts returns UserClouds.CoreweaveAccounts, and is useful for accessing the field via an interface.
func (v *UserClouds) GetCoreweaveAccounts() []UserCloudsCoreweaveAccountsCoreWeaveAccount {
	return v.CoreweaveAccounts
}

// GetLinodeAccounts returns UserClouds.LinodeAccounts, and is useful for accessing the field via an interface.
func (v *UserClouds) GetLinodeAccounts() []UserCloudsLinodeAccountsLinodeAccount {
	return v.LinodeAccounts
}

// GetVultrAccounts returns UserClouds.VultrAccounts, and is useful for accessing the field via an interface.
func (v *UserClouds) GetVultrAccounts() []UserCloudsVultrAccountsVultrAccount { return v.VultrAccounts }

// GetAzureAccounts returns UserClouds.AzureAccounts, and is useful for accessing the field via an interface.
func (v *UserClouds) GetAzureAccounts() []UserCloudsAzureAccountsAzureAccount { return v.AzureAccounts }

// UserCloudsAwsAccountsAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type UserCloudsAwsAccountsAWSAccount struct {
	Id                uuid.UUID                                                                   `json:"id"`
	Clusters          []UserCloudsAwsAccountsAWSAccountClustersCluster                            `json:"clusters"`
	ProjectV3Adapters *UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
	UpdatedAt         time.Time                                                                   `json:"updatedAt"`
	AWSAccountDetail  `json:"-"`
}

// GetId returns UserCloudsAwsAccountsAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccount) GetId() uuid.UUID { return v.Id }

// GetClusters returns UserCloudsAwsAccountsAWSAccount.Clusters, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccount) GetClusters() []UserCloudsAwsAccountsAWSAccountClustersCluster {
	return v.Clusters
}

// GetProjectV3Adapters returns UserCloudsAwsAccountsAWSAccount.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccount) GetProjectV3Adapters() *UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// GetUpdatedAt returns UserCloudsAwsAccountsAWSAccount.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccount) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetName returns UserCloudsAwsAccountsAWSAccount.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccount) GetName() string { return v.AWSAccountDetail.Name }

// GetState returns UserCloudsAwsAccountsAWSAccount.State, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccount) GetState() AWSAccountState { return v.AWSAccountDetail.State }

// GetAccountID returns UserCloudsAwsAccountsAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccount) GetAccountID() *string { return v.AWSAccountDetail.AccountID }

// GetRoleARN returns UserCloudsAwsAccountsAWSAccount.RoleARN, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccount) GetRoleARN() *string { return v.AWSAccountDetail.RoleARN }

// GetCloudFormationURL returns UserCloudsAwsAccountsAWSAccount.CloudFormationURL, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccount) GetCloudFormationURL() string {
	return v.AWSAccountDetail.CloudFormationURL
}

// GetConnected returns UserCloudsAwsAccountsAWSAccount.Connected, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccount) GetConnected() *bool { return v.AWSAccountDetail.Connected }

func (v *UserCloudsAwsAccountsAWSAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsAwsAccountsAWSAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsAwsAccountsAWSAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AWSAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsAwsAccountsAWSAccount struct {
	Id uuid.UUID `json:"id"`

	Clusters []UserCloudsAwsAccountsAWSAccountClustersCluster `json:"clusters"`

	ProjectV3Adapters *UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	UpdatedAt time.Time `json:"updatedAt"`

	Name string `json:"name"`

	State AWSAccountState `json:"state"`

	AccountID *string `json:"accountID"`

	RoleARN *string `json:"roleARN"`

	CloudFormationURL string `json:"cloudFormationURL"`

	Connected *bool `json:"connected"`
}

func (v *UserCloudsAwsAccountsAWSAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsAwsAccountsAWSAccount) __premarshalJSON() (*__premarshalUserCloudsAwsAccountsAWSAccount, error) {
	var retval __premarshalUserCloudsAwsAccountsAWSAccount

	retval.Id = v.Id
	retval.Clusters = v.Clusters
	retval.ProjectV3Adapters = v.ProjectV3Adapters
	retval.UpdatedAt = v.UpdatedAt
	retval.Name = v.AWSAccountDetail.Name
	retval.State = v.AWSAccountDetail.State
	retval.AccountID = v.AWSAccountDetail.AccountID
	retval.RoleARN = v.AWSAccountDetail.RoleARN
	retval.CloudFormationURL = v.AWSAccountDetail.CloudFormationURL
	retval.Connected = v.AWSAccountDetail.Connected
	return &retval, nil
}

// UserCloudsAwsAccountsAWSAccountClustersCluster includes the requested fields of the GraphQL type Cluster.
type UserCloudsAwsAccountsAWSAccountClustersCluster struct {
	Name string `json:"name"`
}

// GetName returns UserCloudsAwsAccountsAWSAccountClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccountClustersCluster) GetName() string { return v.Name }

// UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection struct {
	ProjectV3AdapterConnectionCommon `json:"-"`
}

// GetPageInfo returns UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection) GetPageInfo() ProjectV3AdapterConnectionCommonPageInfo {
	return v.ProjectV3AdapterConnectionCommon.PageInfo
}

// GetNodes returns UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter {
	return v.ProjectV3AdapterConnectionCommon.Nodes
}

// GetTotalCount returns UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.ProjectV3AdapterConnectionCommon.TotalCount
}

func (v *UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3AdapterConnectionCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection struct {
	PageInfo ProjectV3AdapterConnectionCommonPageInfo `json:"pageInfo"`

	Nodes []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter `json:"nodes"`

	TotalCount int `json:"totalCount"`
}

func (v *UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection) __premarshalJSON() (*__premarshalUserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection, error) {
	var retval __premarshalUserCloudsAwsAccountsAWSAccountProjectV3AdaptersProjectV3AdapterConnection

	retval.PageInfo = v.ProjectV3AdapterConnectionCommon.PageInfo
	retval.Nodes = v.ProjectV3AdapterConnectionCommon.Nodes
	retval.TotalCount = v.ProjectV3AdapterConnectionCommon.TotalCount
	return &retval, nil
}

// UserCloudsAzureAccountsAzureAccount includes the requested fields of the GraphQL type AzureAccount.
type UserCloudsAzureAccountsAzureAccount struct {
	Id                 uuid.UUID                                                                       `json:"id"`
	Clusters           []UserCloudsAzureAccountsAzureAccountClustersCluster                            `json:"clusters"`
	ProjectV3Adapters  *UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
	UpdatedAt          time.Time                                                                       `json:"updatedAt"`
	AzureAccountDetail `json:"-"`
}

// GetId returns UserCloudsAzureAccountsAzureAccount.Id, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccount) GetId() uuid.UUID { return v.Id }

// GetClusters returns UserCloudsAzureAccountsAzureAccount.Clusters, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccount) GetClusters() []UserCloudsAzureAccountsAzureAccountClustersCluster {
	return v.Clusters
}

// GetProjectV3Adapters returns UserCloudsAzureAccountsAzureAccount.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccount) GetProjectV3Adapters() *UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// GetUpdatedAt returns UserCloudsAzureAccountsAzureAccount.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccount) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetName returns UserCloudsAzureAccountsAzureAccount.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccount) GetName() string { return v.AzureAccountDetail.Name }

// GetState returns UserCloudsAzureAccountsAzureAccount.State, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccount) GetState() CloudAccountState {
	return v.AzureAccountDetail.State
}

// GetConnected returns UserCloudsAzureAccountsAzureAccount.Connected, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccount) GetConnected() *bool {
	return v.AzureAccountDetail.Connected
}

// GetSubscriptionID returns UserCloudsAzureAccountsAzureAccount.SubscriptionID, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccount) GetSubscriptionID() *string {
	return v.AzureAccountDetail.SubscriptionID
}

// GetTenantID returns UserCloudsAzureAccountsAzureAccount.TenantID, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccount) GetTenantID() *string {
	return v.AzureAccountDetail.TenantID
}

// GetClientID returns UserCloudsAzureAccountsAzureAccount.ClientID, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccount) GetClientID() *string {
	return v.AzureAccountDetail.ClientID
}

func (v *UserCloudsAzureAccountsAzureAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsAzureAccountsAzureAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsAzureAccountsAzureAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AzureAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsAzureAccountsAzureAccount struct {
	Id uuid.UUID `json:"id"`

	Clusters []UserCloudsAzureAccountsAzureAccountClustersCluster `json:"clusters"`

	ProjectV3Adapters *UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	UpdatedAt time.Time `json:"updatedAt"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	Connected *bool `json:"connected"`

	SubscriptionID *string `json:"subscriptionID"`

	TenantID *string `json:"tenantID"`

	ClientID *string `json:"clientID"`
}

func (v *UserCloudsAzureAccountsAzureAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsAzureAccountsAzureAccount) __premarshalJSON() (*__premarshalUserCloudsAzureAccountsAzureAccount, error) {
	var retval __premarshalUserCloudsAzureAccountsAzureAccount

	retval.Id = v.Id
	retval.Clusters = v.Clusters
	retval.ProjectV3Adapters = v.ProjectV3Adapters
	retval.UpdatedAt = v.UpdatedAt
	retval.Name = v.AzureAccountDetail.Name
	retval.State = v.AzureAccountDetail.State
	retval.Connected = v.AzureAccountDetail.Connected
	retval.SubscriptionID = v.AzureAccountDetail.SubscriptionID
	retval.TenantID = v.AzureAccountDetail.TenantID
	retval.ClientID = v.AzureAccountDetail.ClientID
	return &retval, nil
}

// UserCloudsAzureAccountsAzureAccountClustersCluster includes the requested fields of the GraphQL type Cluster.
type UserCloudsAzureAccountsAzureAccountClustersCluster struct {
	Name string `json:"name"`
}

// GetName returns UserCloudsAzureAccountsAzureAccountClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccountClustersCluster) GetName() string { return v.Name }

// UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection struct {
	ProjectV3AdapterConnectionCommon `json:"-"`
}

// GetPageInfo returns UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection) GetPageInfo() ProjectV3AdapterConnectionCommonPageInfo {
	return v.ProjectV3AdapterConnectionCommon.PageInfo
}

// GetNodes returns UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter {
	return v.ProjectV3AdapterConnectionCommon.Nodes
}

// GetTotalCount returns UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.ProjectV3AdapterConnectionCommon.TotalCount
}

func (v *UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3AdapterConnectionCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection struct {
	PageInfo ProjectV3AdapterConnectionCommonPageInfo `json:"pageInfo"`

	Nodes []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter `json:"nodes"`

	TotalCount int `json:"totalCount"`
}

func (v *UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection) __premarshalJSON() (*__premarshalUserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection, error) {
	var retval __premarshalUserCloudsAzureAccountsAzureAccountProjectV3AdaptersProjectV3AdapterConnection

	retval.PageInfo = v.ProjectV3AdapterConnectionCommon.PageInfo
	retval.Nodes = v.ProjectV3AdapterConnectionCommon.Nodes
	retval.TotalCount = v.ProjectV3AdapterConnectionCommon.TotalCount
	return &retval, nil
}

// UserCloudsCoreweaveAccountsCoreWeaveAccount includes the requested fields of the GraphQL type CoreWeaveAccount.
type UserCloudsCoreweaveAccountsCoreWeaveAccount struct {
	Id              uuid.UUID                                                    `json:"id"`
	UpdatedAt       time.Time                                                    `json:"updatedAt"`
	Clusters        []UserCloudsCoreweaveAccountsCoreWeaveAccountClustersCluster `json:"clusters"`
	CWAccountDetail `json:"-"`
}

// GetId returns UserCloudsCoreweaveAccountsCoreWeaveAccount.Id, and is useful for accessing the field via an interface.
func (v *UserCloudsCoreweaveAccountsCoreWeaveAccount) GetId() uuid.UUID { return v.Id }

// GetUpdatedAt returns UserCloudsCoreweaveAccountsCoreWeaveAccount.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserCloudsCoreweaveAccountsCoreWeaveAccount) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetClusters returns UserCloudsCoreweaveAccountsCoreWeaveAccount.Clusters, and is useful for accessing the field via an interface.
func (v *UserCloudsCoreweaveAccountsCoreWeaveAccount) GetClusters() []UserCloudsCoreweaveAccountsCoreWeaveAccountClustersCluster {
	return v.Clusters
}

// GetName returns UserCloudsCoreweaveAccountsCoreWeaveAccount.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsCoreweaveAccountsCoreWeaveAccount) GetName() string { return v.CWAccountDetail.Name }

// GetState returns UserCloudsCoreweaveAccountsCoreWeaveAccount.State, and is useful for accessing the field via an interface.
func (v *UserCloudsCoreweaveAccountsCoreWeaveAccount) GetState() CloudAccountState {
	return v.CWAccountDetail.State
}

// GetNamespace returns UserCloudsCoreweaveAccountsCoreWeaveAccount.Namespace, and is useful for accessing the field via an interface.
func (v *UserCloudsCoreweaveAccountsCoreWeaveAccount) GetNamespace() *string {
	return v.CWAccountDetail.Namespace
}

// GetConnected returns UserCloudsCoreweaveAccountsCoreWeaveAccount.Connected, and is useful for accessing the field via an interface.
func (v *UserCloudsCoreweaveAccountsCoreWeaveAccount) GetConnected() *bool {
	return v.CWAccountDetail.Connected
}

func (v *UserCloudsCoreweaveAccountsCoreWeaveAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsCoreweaveAccountsCoreWeaveAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsCoreweaveAccountsCoreWeaveAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CWAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsCoreweaveAccountsCoreWeaveAccount struct {
	Id uuid.UUID `json:"id"`

	UpdatedAt time.Time `json:"updatedAt"`

	Clusters []UserCloudsCoreweaveAccountsCoreWeaveAccountClustersCluster `json:"clusters"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	Namespace *string `json:"namespace"`

	Connected *bool `json:"connected"`
}

func (v *UserCloudsCoreweaveAccountsCoreWeaveAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsCoreweaveAccountsCoreWeaveAccount) __premarshalJSON() (*__premarshalUserCloudsCoreweaveAccountsCoreWeaveAccount, error) {
	var retval __premarshalUserCloudsCoreweaveAccountsCoreWeaveAccount

	retval.Id = v.Id
	retval.UpdatedAt = v.UpdatedAt
	retval.Clusters = v.Clusters
	retval.Name = v.CWAccountDetail.Name
	retval.State = v.CWAccountDetail.State
	retval.Namespace = v.CWAccountDetail.Namespace
	retval.Connected = v.CWAccountDetail.Connected
	return &retval, nil
}

// UserCloudsCoreweaveAccountsCoreWeaveAccountClustersCluster includes the requested fields of the GraphQL type Cluster.
type UserCloudsCoreweaveAccountsCoreWeaveAccountClustersCluster struct {
	Name              string                                                                                                 `json:"name"`
	ProjectV3Adapters *UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
}

// GetName returns UserCloudsCoreweaveAccountsCoreWeaveAccountClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsCoreweaveAccountsCoreWeaveAccountClustersCluster) GetName() string { return v.Name }

// GetProjectV3Adapters returns UserCloudsCoreweaveAccountsCoreWeaveAccountClustersCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UserCloudsCoreweaveAccountsCoreWeaveAccountClustersCluster) GetProjectV3Adapters() *UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection struct {
	ProjectV3AdapterConnectionCommon `json:"-"`
}

// GetPageInfo returns UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection) GetPageInfo() ProjectV3AdapterConnectionCommonPageInfo {
	return v.ProjectV3AdapterConnectionCommon.PageInfo
}

// GetNodes returns UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter {
	return v.ProjectV3AdapterConnectionCommon.Nodes
}

// GetTotalCount returns UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.ProjectV3AdapterConnectionCommon.TotalCount
}

func (v *UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3AdapterConnectionCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection struct {
	PageInfo ProjectV3AdapterConnectionCommonPageInfo `json:"pageInfo"`

	Nodes []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter `json:"nodes"`

	TotalCount int `json:"totalCount"`
}

func (v *UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection) __premarshalJSON() (*__premarshalUserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection, error) {
	var retval __premarshalUserCloudsCoreweaveAccountsCoreWeaveAccountClustersClusterProjectV3AdaptersProjectV3AdapterConnection

	retval.PageInfo = v.ProjectV3AdapterConnectionCommon.PageInfo
	retval.Nodes = v.ProjectV3AdapterConnectionCommon.Nodes
	retval.TotalCount = v.ProjectV3AdapterConnectionCommon.TotalCount
	return &retval, nil
}

// UserCloudsDoAccountsDOAccount includes the requested fields of the GraphQL type DOAccount.
type UserCloudsDoAccountsDOAccount struct {
	Id                uuid.UUID                                                                 `json:"id"`
	ProjectV3Adapters *UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
	UpdatedAt         time.Time                                                                 `json:"updatedAt"`
	Clusters          []UserCloudsDoAccountsDOAccountClustersCluster                            `json:"clusters"`
	DOAccountDetail   `json:"-"`
}

// GetId returns UserCloudsDoAccountsDOAccount.Id, and is useful for accessing the field via an interface.
func (v *UserCloudsDoAccountsDOAccount) GetId() uuid.UUID { return v.Id }

// GetProjectV3Adapters returns UserCloudsDoAccountsDOAccount.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UserCloudsDoAccountsDOAccount) GetProjectV3Adapters() *UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// GetUpdatedAt returns UserCloudsDoAccountsDOAccount.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserCloudsDoAccountsDOAccount) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetClusters returns UserCloudsDoAccountsDOAccount.Clusters, and is useful for accessing the field via an interface.
func (v *UserCloudsDoAccountsDOAccount) GetClusters() []UserCloudsDoAccountsDOAccountClustersCluster {
	return v.Clusters
}

// GetName returns UserCloudsDoAccountsDOAccount.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsDoAccountsDOAccount) GetName() string { return v.DOAccountDetail.Name }

// GetState returns UserCloudsDoAccountsDOAccount.State, and is useful for accessing the field via an interface.
func (v *UserCloudsDoAccountsDOAccount) GetState() DOAccountState { return v.DOAccountDetail.State }

// GetAccessTokenPrefix returns UserCloudsDoAccountsDOAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *UserCloudsDoAccountsDOAccount) GetAccessTokenPrefix() *string {
	return v.DOAccountDetail.AccessTokenPrefix
}

// GetDefaultProject returns UserCloudsDoAccountsDOAccount.DefaultProject, and is useful for accessing the field via an interface.
func (v *UserCloudsDoAccountsDOAccount) GetDefaultProject() *string {
	return v.DOAccountDetail.DefaultProject
}

// GetConnected returns UserCloudsDoAccountsDOAccount.Connected, and is useful for accessing the field via an interface.
func (v *UserCloudsDoAccountsDOAccount) GetConnected() *bool { return v.DOAccountDetail.Connected }

func (v *UserCloudsDoAccountsDOAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsDoAccountsDOAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsDoAccountsDOAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DOAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsDoAccountsDOAccount struct {
	Id uuid.UUID `json:"id"`

	ProjectV3Adapters *UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	UpdatedAt time.Time `json:"updatedAt"`

	Clusters []UserCloudsDoAccountsDOAccountClustersCluster `json:"clusters"`

	Name string `json:"name"`

	State DOAccountState `json:"state"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	DefaultProject *string `json:"defaultProject"`

	Connected *bool `json:"connected"`
}

func (v *UserCloudsDoAccountsDOAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsDoAccountsDOAccount) __premarshalJSON() (*__premarshalUserCloudsDoAccountsDOAccount, error) {
	var retval __premarshalUserCloudsDoAccountsDOAccount

	retval.Id = v.Id
	retval.ProjectV3Adapters = v.ProjectV3Adapters
	retval.UpdatedAt = v.UpdatedAt
	retval.Clusters = v.Clusters
	retval.Name = v.DOAccountDetail.Name
	retval.State = v.DOAccountDetail.State
	retval.AccessTokenPrefix = v.DOAccountDetail.AccessTokenPrefix
	retval.DefaultProject = v.DOAccountDetail.DefaultProject
	retval.Connected = v.DOAccountDetail.Connected
	return &retval, nil
}

// UserCloudsDoAccountsDOAccountClustersCluster includes the requested fields of the GraphQL type Cluster.
type UserCloudsDoAccountsDOAccountClustersCluster struct {
	Name string `json:"name"`
}

// GetName returns UserCloudsDoAccountsDOAccountClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsDoAccountsDOAccountClustersCluster) GetName() string { return v.Name }

// UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection struct {
	ProjectV3AdapterConnectionCommon `json:"-"`
}

// GetPageInfo returns UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection) GetPageInfo() ProjectV3AdapterConnectionCommonPageInfo {
	return v.ProjectV3AdapterConnectionCommon.PageInfo
}

// GetNodes returns UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter {
	return v.ProjectV3AdapterConnectionCommon.Nodes
}

// GetTotalCount returns UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.ProjectV3AdapterConnectionCommon.TotalCount
}

func (v *UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3AdapterConnectionCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection struct {
	PageInfo ProjectV3AdapterConnectionCommonPageInfo `json:"pageInfo"`

	Nodes []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter `json:"nodes"`

	TotalCount int `json:"totalCount"`
}

func (v *UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection) __premarshalJSON() (*__premarshalUserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection, error) {
	var retval __premarshalUserCloudsDoAccountsDOAccountProjectV3AdaptersProjectV3AdapterConnection

	retval.PageInfo = v.ProjectV3AdapterConnectionCommon.PageInfo
	retval.Nodes = v.ProjectV3AdapterConnectionCommon.Nodes
	retval.TotalCount = v.ProjectV3AdapterConnectionCommon.TotalCount
	return &retval, nil
}

// UserCloudsGcpAccountsGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type UserCloudsGcpAccountsGCPAccount struct {
	Id                uuid.UUID                                                                   `json:"id"`
	ProjectV3Adapters *UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
	Clusters          []UserCloudsGcpAccountsGCPAccountClustersCluster                            `json:"clusters"`
	UpdatedAt         time.Time                                                                   `json:"updatedAt"`
	GCPAccountDetail  `json:"-"`
}

// GetId returns UserCloudsGcpAccountsGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccount) GetId() uuid.UUID { return v.Id }

// GetProjectV3Adapters returns UserCloudsGcpAccountsGCPAccount.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccount) GetProjectV3Adapters() *UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// GetClusters returns UserCloudsGcpAccountsGCPAccount.Clusters, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccount) GetClusters() []UserCloudsGcpAccountsGCPAccountClustersCluster {
	return v.Clusters
}

// GetUpdatedAt returns UserCloudsGcpAccountsGCPAccount.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccount) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetName returns UserCloudsGcpAccountsGCPAccount.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccount) GetName() string { return v.GCPAccountDetail.Name }

// GetState returns UserCloudsGcpAccountsGCPAccount.State, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccount) GetState() GCPAccountState { return v.GCPAccountDetail.State }

// GetProjectID returns UserCloudsGcpAccountsGCPAccount.ProjectID, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccount) GetProjectID() *string { return v.GCPAccountDetail.ProjectID }

// GetClientEmail returns UserCloudsGcpAccountsGCPAccount.ClientEmail, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccount) GetClientEmail() *string {
	return v.GCPAccountDetail.ClientEmail
}

// GetConnected returns UserCloudsGcpAccountsGCPAccount.Connected, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccount) GetConnected() *bool { return v.GCPAccountDetail.Connected }

// GetError returns UserCloudsGcpAccountsGCPAccount.Error, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccount) GetError() *string { return v.GCPAccountDetail.Error }

func (v *UserCloudsGcpAccountsGCPAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsGcpAccountsGCPAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsGcpAccountsGCPAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GCPAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsGcpAccountsGCPAccount struct {
	Id uuid.UUID `json:"id"`

	ProjectV3Adapters *UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	Clusters []UserCloudsGcpAccountsGCPAccountClustersCluster `json:"clusters"`

	UpdatedAt time.Time `json:"updatedAt"`

	Name string `json:"name"`

	State GCPAccountState `json:"state"`

	ProjectID *string `json:"projectID"`

	ClientEmail *string `json:"clientEmail"`

	Connected *bool `json:"connected"`

	Error *string `json:"error"`
}

func (v *UserCloudsGcpAccountsGCPAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsGcpAccountsGCPAccount) __premarshalJSON() (*__premarshalUserCloudsGcpAccountsGCPAccount, error) {
	var retval __premarshalUserCloudsGcpAccountsGCPAccount

	retval.Id = v.Id
	retval.ProjectV3Adapters = v.ProjectV3Adapters
	retval.Clusters = v.Clusters
	retval.UpdatedAt = v.UpdatedAt
	retval.Name = v.GCPAccountDetail.Name
	retval.State = v.GCPAccountDetail.State
	retval.ProjectID = v.GCPAccountDetail.ProjectID
	retval.ClientEmail = v.GCPAccountDetail.ClientEmail
	retval.Connected = v.GCPAccountDetail.Connected
	retval.Error = v.GCPAccountDetail.Error
	return &retval, nil
}

// UserCloudsGcpAccountsGCPAccountClustersCluster includes the requested fields of the GraphQL type Cluster.
type UserCloudsGcpAccountsGCPAccountClustersCluster struct {
	Name string `json:"name"`
}

// GetName returns UserCloudsGcpAccountsGCPAccountClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccountClustersCluster) GetName() string { return v.Name }

// UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection struct {
	ProjectV3AdapterConnectionCommon `json:"-"`
}

// GetPageInfo returns UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection) GetPageInfo() ProjectV3AdapterConnectionCommonPageInfo {
	return v.ProjectV3AdapterConnectionCommon.PageInfo
}

// GetNodes returns UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter {
	return v.ProjectV3AdapterConnectionCommon.Nodes
}

// GetTotalCount returns UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.ProjectV3AdapterConnectionCommon.TotalCount
}

func (v *UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3AdapterConnectionCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection struct {
	PageInfo ProjectV3AdapterConnectionCommonPageInfo `json:"pageInfo"`

	Nodes []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter `json:"nodes"`

	TotalCount int `json:"totalCount"`
}

func (v *UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection) __premarshalJSON() (*__premarshalUserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection, error) {
	var retval __premarshalUserCloudsGcpAccountsGCPAccountProjectV3AdaptersProjectV3AdapterConnection

	retval.PageInfo = v.ProjectV3AdapterConnectionCommon.PageInfo
	retval.Nodes = v.ProjectV3AdapterConnectionCommon.Nodes
	retval.TotalCount = v.ProjectV3AdapterConnectionCommon.TotalCount
	return &retval, nil
}

// UserCloudsLinodeAccountsLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type UserCloudsLinodeAccountsLinodeAccount struct {
	Id                  uuid.UUID                                                                         `json:"id"`
	ProjectV3Adapters   *UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
	UpdatedAt           time.Time                                                                         `json:"updatedAt"`
	Clusters            []UserCloudsLinodeAccountsLinodeAccountClustersCluster                            `json:"clusters"`
	LinodeAccountDetail `json:"-"`
}

// GetId returns UserCloudsLinodeAccountsLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *UserCloudsLinodeAccountsLinodeAccount) GetId() uuid.UUID { return v.Id }

// GetProjectV3Adapters returns UserCloudsLinodeAccountsLinodeAccount.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UserCloudsLinodeAccountsLinodeAccount) GetProjectV3Adapters() *UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// GetUpdatedAt returns UserCloudsLinodeAccountsLinodeAccount.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserCloudsLinodeAccountsLinodeAccount) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetClusters returns UserCloudsLinodeAccountsLinodeAccount.Clusters, and is useful for accessing the field via an interface.
func (v *UserCloudsLinodeAccountsLinodeAccount) GetClusters() []UserCloudsLinodeAccountsLinodeAccountClustersCluster {
	return v.Clusters
}

// GetName returns UserCloudsLinodeAccountsLinodeAccount.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsLinodeAccountsLinodeAccount) GetName() string { return v.LinodeAccountDetail.Name }

// GetState returns UserCloudsLinodeAccountsLinodeAccount.State, and is useful for accessing the field via an interface.
func (v *UserCloudsLinodeAccountsLinodeAccount) GetState() CloudAccountState {
	return v.LinodeAccountDetail.State
}

// GetAccessTokenPrefix returns UserCloudsLinodeAccountsLinodeAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *UserCloudsLinodeAccountsLinodeAccount) GetAccessTokenPrefix() *string {
	return v.LinodeAccountDetail.AccessTokenPrefix
}

// GetConnected returns UserCloudsLinodeAccountsLinodeAccount.Connected, and is useful for accessing the field via an interface.
func (v *UserCloudsLinodeAccountsLinodeAccount) GetConnected() *bool {
	return v.LinodeAccountDetail.Connected
}

func (v *UserCloudsLinodeAccountsLinodeAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsLinodeAccountsLinodeAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsLinodeAccountsLinodeAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.LinodeAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsLinodeAccountsLinodeAccount struct {
	Id uuid.UUID `json:"id"`

	ProjectV3Adapters *UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	UpdatedAt time.Time `json:"updatedAt"`

	Clusters []UserCloudsLinodeAccountsLinodeAccountClustersCluster `json:"clusters"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	Connected *bool `json:"connected"`
}

func (v *UserCloudsLinodeAccountsLinodeAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsLinodeAccountsLinodeAccount) __premarshalJSON() (*__premarshalUserCloudsLinodeAccountsLinodeAccount, error) {
	var retval __premarshalUserCloudsLinodeAccountsLinodeAccount

	retval.Id = v.Id
	retval.ProjectV3Adapters = v.ProjectV3Adapters
	retval.UpdatedAt = v.UpdatedAt
	retval.Clusters = v.Clusters
	retval.Name = v.LinodeAccountDetail.Name
	retval.State = v.LinodeAccountDetail.State
	retval.AccessTokenPrefix = v.LinodeAccountDetail.AccessTokenPrefix
	retval.Connected = v.LinodeAccountDetail.Connected
	return &retval, nil
}

// UserCloudsLinodeAccountsLinodeAccountClustersCluster includes the requested fields of the GraphQL type Cluster.
type UserCloudsLinodeAccountsLinodeAccountClustersCluster struct {
	Name string `json:"name"`
}

// GetName returns UserCloudsLinodeAccountsLinodeAccountClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsLinodeAccountsLinodeAccountClustersCluster) GetName() string { return v.Name }

// UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection struct {
	ProjectV3AdapterConnectionCommon `json:"-"`
}

// GetPageInfo returns UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection) GetPageInfo() ProjectV3AdapterConnectionCommonPageInfo {
	return v.ProjectV3AdapterConnectionCommon.PageInfo
}

// GetNodes returns UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter {
	return v.ProjectV3AdapterConnectionCommon.Nodes
}

// GetTotalCount returns UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.ProjectV3AdapterConnectionCommon.TotalCount
}

func (v *UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3AdapterConnectionCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection struct {
	PageInfo ProjectV3AdapterConnectionCommonPageInfo `json:"pageInfo"`

	Nodes []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter `json:"nodes"`

	TotalCount int `json:"totalCount"`
}

func (v *UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection) __premarshalJSON() (*__premarshalUserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection, error) {
	var retval __premarshalUserCloudsLinodeAccountsLinodeAccountProjectV3AdaptersProjectV3AdapterConnection

	retval.PageInfo = v.ProjectV3AdapterConnectionCommon.PageInfo
	retval.Nodes = v.ProjectV3AdapterConnectionCommon.Nodes
	retval.TotalCount = v.ProjectV3AdapterConnectionCommon.TotalCount
	return &retval, nil
}

// UserCloudsVultrAccountsVultrAccount includes the requested fields of the GraphQL type VultrAccount.
type UserCloudsVultrAccountsVultrAccount struct {
	Id                 uuid.UUID                                                                       `json:"id"`
	Clusters           []UserCloudsVultrAccountsVultrAccountClustersCluster                            `json:"clusters"`
	ProjectV3Adapters  *UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
	UpdatedAt          time.Time                                                                       `json:"updatedAt"`
	VultrAccountDetail `json:"-"`
}

// GetId returns UserCloudsVultrAccountsVultrAccount.Id, and is useful for accessing the field via an interface.
func (v *UserCloudsVultrAccountsVultrAccount) GetId() uuid.UUID { return v.Id }

// GetClusters returns UserCloudsVultrAccountsVultrAccount.Clusters, and is useful for accessing the field via an interface.
func (v *UserCloudsVultrAccountsVultrAccount) GetClusters() []UserCloudsVultrAccountsVultrAccountClustersCluster {
	return v.Clusters
}

// GetProjectV3Adapters returns UserCloudsVultrAccountsVultrAccount.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *UserCloudsVultrAccountsVultrAccount) GetProjectV3Adapters() *UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// GetUpdatedAt returns UserCloudsVultrAccountsVultrAccount.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UserCloudsVultrAccountsVultrAccount) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetName returns UserCloudsVultrAccountsVultrAccount.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsVultrAccountsVultrAccount) GetName() string { return v.VultrAccountDetail.Name }

// GetState returns UserCloudsVultrAccountsVultrAccount.State, and is useful for accessing the field via an interface.
func (v *UserCloudsVultrAccountsVultrAccount) GetState() CloudAccountState {
	return v.VultrAccountDetail.State
}

// GetConnected returns UserCloudsVultrAccountsVultrAccount.Connected, and is useful for accessing the field via an interface.
func (v *UserCloudsVultrAccountsVultrAccount) GetConnected() *bool {
	return v.VultrAccountDetail.Connected
}

func (v *UserCloudsVultrAccountsVultrAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsVultrAccountsVultrAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsVultrAccountsVultrAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.VultrAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsVultrAccountsVultrAccount struct {
	Id uuid.UUID `json:"id"`

	Clusters []UserCloudsVultrAccountsVultrAccountClustersCluster `json:"clusters"`

	ProjectV3Adapters *UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	UpdatedAt time.Time `json:"updatedAt"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	Connected *bool `json:"connected"`
}

func (v *UserCloudsVultrAccountsVultrAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsVultrAccountsVultrAccount) __premarshalJSON() (*__premarshalUserCloudsVultrAccountsVultrAccount, error) {
	var retval __premarshalUserCloudsVultrAccountsVultrAccount

	retval.Id = v.Id
	retval.Clusters = v.Clusters
	retval.ProjectV3Adapters = v.ProjectV3Adapters
	retval.UpdatedAt = v.UpdatedAt
	retval.Name = v.VultrAccountDetail.Name
	retval.State = v.VultrAccountDetail.State
	retval.Connected = v.VultrAccountDetail.Connected
	return &retval, nil
}

// UserCloudsVultrAccountsVultrAccountClustersCluster includes the requested fields of the GraphQL type Cluster.
type UserCloudsVultrAccountsVultrAccountClustersCluster struct {
	Name string `json:"name"`
}

// GetName returns UserCloudsVultrAccountsVultrAccountClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *UserCloudsVultrAccountsVultrAccountClustersCluster) GetName() string { return v.Name }

// UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection struct {
	ProjectV3AdapterConnectionCommon `json:"-"`
}

// GetPageInfo returns UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection) GetPageInfo() ProjectV3AdapterConnectionCommonPageInfo {
	return v.ProjectV3AdapterConnectionCommon.PageInfo
}

// GetNodes returns UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter {
	return v.ProjectV3AdapterConnectionCommon.Nodes
}

// GetTotalCount returns UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.ProjectV3AdapterConnectionCommon.TotalCount
}

func (v *UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3AdapterConnectionCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection struct {
	PageInfo ProjectV3AdapterConnectionCommonPageInfo `json:"pageInfo"`

	Nodes []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter `json:"nodes"`

	TotalCount int `json:"totalCount"`
}

func (v *UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection) __premarshalJSON() (*__premarshalUserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection, error) {
	var retval __premarshalUserCloudsVultrAccountsVultrAccountProjectV3AdaptersProjectV3AdapterConnection

	retval.PageInfo = v.ProjectV3AdapterConnectionCommon.PageInfo
	retval.Nodes = v.ProjectV3AdapterConnectionCommon.Nodes
	retval.TotalCount = v.ProjectV3AdapterConnectionCommon.TotalCount
	return &retval, nil
}

// UserCommon includes the GraphQL fields of User requested by the fragment UserCommon.
type UserCommon struct {
	Id                        uuid.UUID `json:"id"`
	UserPublicCommon          `json:"-"`
	Email                     *string    `json:"email"`
	CreatedAt                 *time.Time `json:"createdAt"`
	FreeTrialEndsAt           *time.Time `json:"freeTrialEndsAt"`
	HasPaymentMethod          *bool      `json:"hasPaymentMethod"`
	PaymentError              *string    `json:"paymentError"`
	PaymentAuthorizationError *string    `json:"paymentAuthorizationError"`
	Advanced                  *bool      `json:"advanced"`
}

// GetId returns UserCommon.Id, and is useful for accessing the field via an interface.
func (v *UserCommon) GetId() uuid.UUID { return v.Id }

// GetEmail returns UserCommon.Email, and is useful for accessing the field via an interface.
func (v *UserCommon) GetEmail() *string { return v.Email }

// GetCreatedAt returns UserCommon.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserCommon) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetFreeTrialEndsAt returns UserCommon.FreeTrialEndsAt, and is useful for accessing the field via an interface.
func (v *UserCommon) GetFreeTrialEndsAt() *time.Time { return v.FreeTrialEndsAt }

// GetHasPaymentMethod returns UserCommon.HasPaymentMethod, and is useful for accessing the field via an interface.
func (v *UserCommon) GetHasPaymentMethod() *bool { return v.HasPaymentMethod }

// GetPaymentError returns UserCommon.PaymentError, and is useful for accessing the field via an interface.
func (v *UserCommon) GetPaymentError() *string { return v.PaymentError }

// GetPaymentAuthorizationError returns UserCommon.PaymentAuthorizationError, and is useful for accessing the field via an interface.
func (v *UserCommon) GetPaymentAuthorizationError() *string { return v.PaymentAuthorizationError }

// GetAdvanced returns UserCommon.Advanced, and is useful for accessing the field via an interface.
func (v *UserCommon) GetAdvanced() *bool { return v.Advanced }

// GetName returns UserCommon.Name, and is useful for accessing the field via an interface.
func (v *UserCommon) GetName() string { return v.UserPublicCommon.Name }

// GetLogin returns UserCommon.Login, and is useful for accessing the field via an interface.
func (v *UserCommon) GetLogin() string { return v.UserPublicCommon.Login }

// GetAvatar returns UserCommon.Avatar, and is useful for accessing the field via an interface.
func (v *UserCommon) GetAvatar() *string { return v.UserPublicCommon.Avatar }

// GetIsTeam returns UserCommon.IsTeam, and is useful for accessing the field via an interface.
func (v *UserCommon) GetIsTeam() *bool { return v.UserPublicCommon.IsTeam }

func (v *UserCommon) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserCommon
		graphql.NoUnmarshalJSON
	}
	firstPass.UserCommon = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserPublicCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserCommon struct {
	Id uuid.UUID `json:"id"`

	Email *string `json:"email"`

	CreatedAt *time.Time `json:"createdAt"`

	FreeTrialEndsAt *time.Time `json:"freeTrialEndsAt"`

	HasPaymentMethod *bool `json:"hasPaymentMethod"`

	PaymentError *string `json:"paymentError"`

	PaymentAuthorizationError *string `json:"paymentAuthorizationError"`

	Advanced *bool `json:"advanced"`

	Name string `json:"name"`

	Login string `json:"login"`

	Avatar *string `json:"avatar"`

	IsTeam *bool `json:"isTeam"`
}

func (v *UserCommon) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserCommon) __premarshalJSON() (*__premarshalUserCommon, error) {
	var retval __premarshalUserCommon

	retval.Id = v.Id
	retval.Email = v.Email
	retval.CreatedAt = v.CreatedAt
	retval.FreeTrialEndsAt = v.FreeTrialEndsAt
	retval.HasPaymentMethod = v.HasPaymentMethod
	retval.PaymentError = v.PaymentError
	retval.PaymentAuthorizationError = v.PaymentAuthorizationError
	retval.Advanced = v.Advanced
	retval.Name = v.UserPublicCommon.Name
	retval.Login = v.UserPublicCommon.Login
	retval.Avatar = v.UserPublicCommon.Avatar
	retval.IsTeam = v.UserPublicCommon.IsTeam
	return &retval, nil
}

// UserContainerRegistries includes the GraphQL fields of User requested by the fragment UserContainerRegistries.
type UserContainerRegistries struct {
	ContainerRegistries []UserContainerRegistriesContainerRegistriesContainerRegistry `json:"containerRegistries"`
}

// GetContainerRegistries returns UserContainerRegistries.ContainerRegistries, and is useful for accessing the field via an interface.
func (v *UserContainerRegistries) GetContainerRegistries() []UserContainerRegistriesContainerRegistriesContainerRegistry {
	return v.ContainerRegistries
}

// UserContainerRegistriesContainerRegistriesContainerRegistry includes the requested fields of the GraphQL type ContainerRegistry.
type UserContainerRegistriesContainerRegistriesContainerRegistry struct {
	Id       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Registry string    `json:"registry"`
	Username *string   `json:"username"`
}

// GetId returns UserContainerRegistriesContainerRegistriesContainerRegistry.Id, and is useful for accessing the field via an interface.
func (v *UserContainerRegistriesContainerRegistriesContainerRegistry) GetId() uuid.UUID { return v.Id }

// GetName returns UserContainerRegistriesContainerRegistriesContainerRegistry.Name, and is useful for accessing the field via an interface.
func (v *UserContainerRegistriesContainerRegistriesContainerRegistry) GetName() string { return v.Name }

// GetRegistry returns UserContainerRegistriesContainerRegistriesContainerRegistry.Registry, and is useful for accessing the field via an interface.
func (v *UserContainerRegistriesContainerRegistriesContainerRegistry) GetRegistry() string {
	return v.Registry
}

// GetUsername returns UserContainerRegistriesContainerRegistriesContainerRegistry.Username, and is useful for accessing the field via an interface.
func (v *UserContainerRegistriesContainerRegistriesContainerRegistry) GetUsername() *string {
	return v.Username
}

// UserDetail includes the GraphQL fields of User requested by the fragment UserDetail.
type UserDetail struct {
	Id           uuid.UUID `json:"id"`
	UserCommon   `json:"-"`
	HasZeetCloud *bool `json:"hasZeetCloud"`
	HasOnboarded *bool `json:"hasOnboarded"`
	CanDeploy    *bool `json:"canDeploy"`
}

// GetId returns UserDetail.Id, and is useful for accessing the field via an interface.
func (v *UserDetail) GetId() uuid.UUID { return v.Id }

// GetHasZeetCloud returns UserDetail.HasZeetCloud, and is useful for accessing the field via an interface.
func (v *UserDetail) GetHasZeetCloud() *bool { return v.HasZeetCloud }

// GetHasOnboarded returns UserDetail.HasOnboarded, and is useful for accessing the field via an interface.
func (v *UserDetail) GetHasOnboarded() *bool { return v.HasOnboarded }

// GetCanDeploy returns UserDetail.CanDeploy, and is useful for accessing the field via an interface.
func (v *UserDetail) GetCanDeploy() *bool { return v.CanDeploy }

// GetEmail returns UserDetail.Email, and is useful for accessing the field via an interface.
func (v *UserDetail) GetEmail() *string { return v.UserCommon.Email }

// GetCreatedAt returns UserDetail.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserDetail) GetCreatedAt() *time.Time { return v.UserCommon.CreatedAt }

// GetFreeTrialEndsAt returns UserDetail.FreeTrialEndsAt, and is useful for accessing the field via an interface.
func (v *UserDetail) GetFreeTrialEndsAt() *time.Time { return v.UserCommon.FreeTrialEndsAt }

// GetHasPaymentMethod returns UserDetail.HasPaymentMethod, and is useful for accessing the field via an interface.
func (v *UserDetail) GetHasPaymentMethod() *bool { return v.UserCommon.HasPaymentMethod }

// GetPaymentError returns UserDetail.PaymentError, and is useful for accessing the field via an interface.
func (v *UserDetail) GetPaymentError() *string { return v.UserCommon.PaymentError }

// GetPaymentAuthorizationError returns UserDetail.PaymentAuthorizationError, and is useful for accessing the field via an interface.
func (v *UserDetail) GetPaymentAuthorizationError() *string {
	return v.UserCommon.PaymentAuthorizationError
}

// GetAdvanced returns UserDetail.Advanced, and is useful for accessing the field via an interface.
func (v *UserDetail) GetAdvanced() *bool { return v.UserCommon.Advanced }

// GetName returns UserDetail.Name, and is useful for accessing the field via an interface.
func (v *UserDetail) GetName() string { return v.UserCommon.UserPublicCommon.Name }

// GetLogin returns UserDetail.Login, and is useful for accessing the field via an interface.
func (v *UserDetail) GetLogin() string { return v.UserCommon.UserPublicCommon.Login }

// GetAvatar returns UserDetail.Avatar, and is useful for accessing the field via an interface.
func (v *UserDetail) GetAvatar() *string { return v.UserCommon.UserPublicCommon.Avatar }

// GetIsTeam returns UserDetail.IsTeam, and is useful for accessing the field via an interface.
func (v *UserDetail) GetIsTeam() *bool { return v.UserCommon.UserPublicCommon.IsTeam }

func (v *UserDetail) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserDetail
		graphql.NoUnmarshalJSON
	}
	firstPass.UserDetail = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserDetail struct {
	Id uuid.UUID `json:"id"`

	HasZeetCloud *bool `json:"hasZeetCloud"`

	HasOnboarded *bool `json:"hasOnboarded"`

	CanDeploy *bool `json:"canDeploy"`

	Email *string `json:"email"`

	CreatedAt *time.Time `json:"createdAt"`

	FreeTrialEndsAt *time.Time `json:"freeTrialEndsAt"`

	HasPaymentMethod *bool `json:"hasPaymentMethod"`

	PaymentError *string `json:"paymentError"`

	PaymentAuthorizationError *string `json:"paymentAuthorizationError"`

	Advanced *bool `json:"advanced"`

	Name string `json:"name"`

	Login string `json:"login"`

	Avatar *string `json:"avatar"`

	IsTeam *bool `json:"isTeam"`
}

func (v *UserDetail) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserDetail) __premarshalJSON() (*__premarshalUserDetail, error) {
	var retval __premarshalUserDetail

	retval.Id = v.Id
	retval.HasZeetCloud = v.HasZeetCloud
	retval.HasOnboarded = v.HasOnboarded
	retval.CanDeploy = v.CanDeploy
	retval.Email = v.UserCommon.Email
	retval.CreatedAt = v.UserCommon.CreatedAt
	retval.FreeTrialEndsAt = v.UserCommon.FreeTrialEndsAt
	retval.HasPaymentMethod = v.UserCommon.HasPaymentMethod
	retval.PaymentError = v.UserCommon.PaymentError
	retval.PaymentAuthorizationError = v.UserCommon.PaymentAuthorizationError
	retval.Advanced = v.UserCommon.Advanced
	retval.Name = v.UserCommon.UserPublicCommon.Name
	retval.Login = v.UserCommon.UserPublicCommon.Login
	retval.Avatar = v.UserCommon.UserPublicCommon.Avatar
	retval.IsTeam = v.UserCommon.UserPublicCommon.IsTeam
	return &retval, nil
}

type UserFilter struct {
	Ids *MultiEntityCriterion `json:"ids"`
}

// GetIds returns UserFilter.Ids, and is useful for accessing the field via an interface.
func (v *UserFilter) GetIds() *MultiEntityCriterion { return v.Ids }

// UserPublicCommon includes the GraphQL fields of User requested by the fragment UserPublicCommon.
type UserPublicCommon struct {
	Id     uuid.UUID `json:"id"`
	Name   string    `json:"name"`
	Login  string    `json:"login"`
	Avatar *string   `json:"avatar"`
	IsTeam *bool     `json:"isTeam"`
}

// GetId returns UserPublicCommon.Id, and is useful for accessing the field via an interface.
func (v *UserPublicCommon) GetId() uuid.UUID { return v.Id }

// GetName returns UserPublicCommon.Name, and is useful for accessing the field via an interface.
func (v *UserPublicCommon) GetName() string { return v.Name }

// GetLogin returns UserPublicCommon.Login, and is useful for accessing the field via an interface.
func (v *UserPublicCommon) GetLogin() string { return v.Login }

// GetAvatar returns UserPublicCommon.Avatar, and is useful for accessing the field via an interface.
func (v *UserPublicCommon) GetAvatar() *string { return v.Avatar }

// GetIsTeam returns UserPublicCommon.IsTeam, and is useful for accessing the field via an interface.
func (v *UserPublicCommon) GetIsTeam() *bool { return v.IsTeam }

type VariableType string

const (
	VariableTypeString  VariableType = "STRING"
	VariableTypeBoolean VariableType = "BOOLEAN"
	VariableTypeInteger VariableType = "INTEGER"
	VariableTypeFloat   VariableType = "FLOAT"
)

type VolumeInput struct {
	MountPath string `json:"mountPath"`
	Size      int    `json:"size"`
}

// GetMountPath returns VolumeInput.MountPath, and is useful for accessing the field via an interface.
func (v *VolumeInput) GetMountPath() string { return v.MountPath }

// GetSize returns VolumeInput.Size, and is useful for accessing the field via an interface.
func (v *VolumeInput) GetSize() int { return v.Size }

// VultrAccountDetail includes the GraphQL fields of VultrAccount requested by the fragment VultrAccountDetail.
type VultrAccountDetail struct {
	Id        uuid.UUID         `json:"id"`
	Name      string            `json:"name"`
	State     CloudAccountState `json:"state"`
	Connected *bool             `json:"connected"`
}

// GetId returns VultrAccountDetail.Id, and is useful for accessing the field via an interface.
func (v *VultrAccountDetail) GetId() uuid.UUID { return v.Id }

// GetName returns VultrAccountDetail.Name, and is useful for accessing the field via an interface.
func (v *VultrAccountDetail) GetName() string { return v.Name }

// GetState returns VultrAccountDetail.State, and is useful for accessing the field via an interface.
func (v *VultrAccountDetail) GetState() CloudAccountState { return v.State }

// GetConnected returns VultrAccountDetail.Connected, and is useful for accessing the field via an interface.
func (v *VultrAccountDetail) GetConnected() *bool { return v.Connected }

// WorkflowStep includes the GraphQL fields of BlueprintDriverWorkflowStep requested by the fragment WorkflowStep.
type WorkflowStep struct {
	Action    BlueprintDriverWorkflowStepAction                    `json:"action"`
	Status    BlueprintDriverWorkflowStepStatus                    `json:"status"`
	Execution *WorkflowStepExecutionBlueprintDriverActionExecution `json:"execution"`
}

// GetAction returns WorkflowStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowStep) GetAction() BlueprintDriverWorkflowStepAction { return v.Action }

// GetStatus returns WorkflowStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowStep) GetStatus() BlueprintDriverWorkflowStepStatus { return v.Status }

// GetExecution returns WorkflowStep.Execution, and is useful for accessing the field via an interface.
func (v *WorkflowStep) GetExecution() *WorkflowStepExecutionBlueprintDriverActionExecution {
	return v.Execution
}

// WorkflowStepExecutionBlueprintDriverActionExecution includes the requested fields of the GraphQL type BlueprintDriverActionExecution.
type WorkflowStepExecutionBlueprintDriverActionExecution struct {
	Id         uuid.UUID                                                  `json:"id"`
	Driver     BlueprintDriver                                            `json:"driver"`
	Action     BlueprintDriverAction                                      `json:"action"`
	ApprovedAt *time.Time                                                 `json:"approvedAt"`
	JobRun     *WorkflowStepExecutionBlueprintDriverActionExecutionJobRun `json:"jobRun"`
}

// GetId returns WorkflowStepExecutionBlueprintDriverActionExecution.Id, and is useful for accessing the field via an interface.
func (v *WorkflowStepExecutionBlueprintDriverActionExecution) GetId() uuid.UUID { return v.Id }

// GetDriver returns WorkflowStepExecutionBlueprintDriverActionExecution.Driver, and is useful for accessing the field via an interface.
func (v *WorkflowStepExecutionBlueprintDriverActionExecution) GetDriver() BlueprintDriver {
	return v.Driver
}

// GetAction returns WorkflowStepExecutionBlueprintDriverActionExecution.Action, and is useful for accessing the field via an interface.
func (v *WorkflowStepExecutionBlueprintDriverActionExecution) GetAction() BlueprintDriverAction {
	return v.Action
}

// GetApprovedAt returns WorkflowStepExecutionBlueprintDriverActionExecution.ApprovedAt, and is useful for accessing the field via an interface.
func (v *WorkflowStepExecutionBlueprintDriverActionExecution) GetApprovedAt() *time.Time {
	return v.ApprovedAt
}

// GetJobRun returns WorkflowStepExecutionBlueprintDriverActionExecution.JobRun, and is useful for accessing the field via an interface.
func (v *WorkflowStepExecutionBlueprintDriverActionExecution) GetJobRun() *WorkflowStepExecutionBlueprintDriverActionExecutionJobRun {
	return v.JobRun
}

// WorkflowStepExecutionBlueprintDriverActionExecutionJobRun includes the requested fields of the GraphQL type JobRun.
type WorkflowStepExecutionBlueprintDriverActionExecutionJobRun struct {
	Id        uuid.UUID   `json:"id"`
	State     JobRunState `json:"state"`
	CreatedAt *time.Time  `json:"createdAt"`
	UpdatedAt *time.Time  `json:"updatedAt"`
}

// GetId returns WorkflowStepExecutionBlueprintDriverActionExecutionJobRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowStepExecutionBlueprintDriverActionExecutionJobRun) GetId() uuid.UUID { return v.Id }

// GetState returns WorkflowStepExecutionBlueprintDriverActionExecutionJobRun.State, and is useful for accessing the field via an interface.
func (v *WorkflowStepExecutionBlueprintDriverActionExecutionJobRun) GetState() JobRunState {
	return v.State
}

// GetCreatedAt returns WorkflowStepExecutionBlueprintDriverActionExecutionJobRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowStepExecutionBlueprintDriverActionExecutionJobRun) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowStepExecutionBlueprintDriverActionExecutionJobRun.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowStepExecutionBlueprintDriverActionExecutionJobRun) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// WorkflowStepWithLogs includes the GraphQL fields of BlueprintDriverWorkflowStep requested by the fragment WorkflowStepWithLogs.
type WorkflowStepWithLogs struct {
	Action    BlueprintDriverWorkflowStepAction                            `json:"action"`
	Status    BlueprintDriverWorkflowStepStatus                            `json:"status"`
	Execution *WorkflowStepWithLogsExecutionBlueprintDriverActionExecution `json:"execution"`
}

// GetAction returns WorkflowStepWithLogs.Action, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogs) GetAction() BlueprintDriverWorkflowStepAction { return v.Action }

// GetStatus returns WorkflowStepWithLogs.Status, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogs) GetStatus() BlueprintDriverWorkflowStepStatus { return v.Status }

// GetExecution returns WorkflowStepWithLogs.Execution, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogs) GetExecution() *WorkflowStepWithLogsExecutionBlueprintDriverActionExecution {
	return v.Execution
}

// WorkflowStepWithLogsExecutionBlueprintDriverActionExecution includes the requested fields of the GraphQL type BlueprintDriverActionExecution.
type WorkflowStepWithLogsExecutionBlueprintDriverActionExecution struct {
	Id         uuid.UUID                                                          `json:"id"`
	Driver     BlueprintDriver                                                    `json:"driver"`
	Action     BlueprintDriverAction                                              `json:"action"`
	ApprovedAt *time.Time                                                         `json:"approvedAt"`
	JobRun     *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun `json:"jobRun"`
}

// GetId returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecution.Id, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecution) GetId() uuid.UUID { return v.Id }

// GetDriver returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecution.Driver, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecution) GetDriver() BlueprintDriver {
	return v.Driver
}

// GetAction returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecution.Action, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecution) GetAction() BlueprintDriverAction {
	return v.Action
}

// GetApprovedAt returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecution.ApprovedAt, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecution) GetApprovedAt() *time.Time {
	return v.ApprovedAt
}

// GetJobRun returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecution.JobRun, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecution) GetJobRun() *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun {
	return v.JobRun
}

// WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun includes the requested fields of the GraphQL type JobRun.
type WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun struct {
	Id        uuid.UUID                                                              `json:"id"`
	State     JobRunState                                                            `json:"state"`
	Logs      *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogs `json:"logs"`
	CreatedAt *time.Time                                                             `json:"createdAt"`
	UpdatedAt *time.Time                                                             `json:"updatedAt"`
}

// GetId returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun) GetId() uuid.UUID {
	return v.Id
}

// GetState returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun.State, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun) GetState() JobRunState {
	return v.State
}

// GetLogs returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun.Logs, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun) GetLogs() *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogs {
	return v.Logs
}

// GetCreatedAt returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun) GetCreatedAt() *time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRun) GetUpdatedAt() *time.Time {
	return v.UpdatedAt
}

// WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogs includes the requested fields of the GraphQL type Logs.
type WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogs struct {
	Id        uuid.UUID                                                                              `json:"id"`
	Completed bool                                                                                   `json:"completed"`
	Expired   bool                                                                                   `json:"expired"`
	Entries   []WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogsEntriesLogEntry `json:"entries"`
}

// GetId returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogs.Id, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogs) GetId() uuid.UUID {
	return v.Id
}

// GetCompleted returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogs.Completed, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogs) GetCompleted() bool {
	return v.Completed
}

// GetExpired returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogs.Expired, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogs) GetExpired() bool {
	return v.Expired
}

// GetEntries returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogs.Entries, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogs) GetEntries() []WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogsEntriesLogEntry {
	return v.Entries
}

// WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogsEntriesLogEntry struct {
	Text      string     `json:"text"`
	Timestamp *time.Time `json:"timestamp"`
}

// GetText returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// GetTimestamp returns WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *WorkflowStepWithLogsExecutionBlueprintDriverActionExecutionJobRunLogsEntriesLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// __AttachAwsPolicyToUserInput is used internally by genqlient
type __AttachAwsPolicyToUserInput struct {
	Input AttachAwsPolicyToUser `json:"input"`
}

// GetInput returns __AttachAwsPolicyToUserInput.Input, and is useful for accessing the field via an interface.
func (v *__AttachAwsPolicyToUserInput) GetInput() AttachAwsPolicyToUser { return v.Input }

// __ConnectUserToIamInput is used internally by genqlient
type __ConnectUserToIamInput struct {
	Input ConnectUserToIamInput `json:"input"`
}

// GetInput returns __ConnectUserToIamInput.Input, and is useful for accessing the field via an interface.
func (v *__ConnectUserToIamInput) GetInput() ConnectUserToIamInput { return v.Input }

// __DisconnectUserFromIamInput is used internally by genqlient
type __DisconnectUserFromIamInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __DisconnectUserFromIamInput.Id, and is useful for accessing the field via an interface.
func (v *__DisconnectUserFromIamInput) GetId() uuid.UUID { return v.Id }

// __DuplicateProjectInput is used internally by genqlient
type __DuplicateProjectInput struct {
	Input DuplicateProjectInput `json:"input"`
}

// GetInput returns __DuplicateProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__DuplicateProjectInput) GetInput() DuplicateProjectInput { return v.Input }

// __IpfsServicesInput is used internally by genqlient
type __IpfsServicesInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __IpfsServicesInput.Id, and is useful for accessing the field via an interface.
func (v *__IpfsServicesInput) GetId() uuid.UUID { return v.Id }

// __LinkClusterToCloudInput is used internally by genqlient
type __LinkClusterToCloudInput struct {
	Input LinkCloudToClusterInput `json:"input"`
}

// GetInput returns __LinkClusterToCloudInput.Input, and is useful for accessing the field via an interface.
func (v *__LinkClusterToCloudInput) GetInput() LinkCloudToClusterInput { return v.Input }

// __UpdateClusterDetailsExternalInput is used internally by genqlient
type __UpdateClusterDetailsExternalInput struct {
	UpdateClusterInput       UpdateClusterInput       `json:"updateClusterInput"`
	UpdateClusterDomainInput UpdateClusterDomainInput `json:"updateClusterDomainInput"`
}

// GetUpdateClusterInput returns __UpdateClusterDetailsExternalInput.UpdateClusterInput, and is useful for accessing the field via an interface.
func (v *__UpdateClusterDetailsExternalInput) GetUpdateClusterInput() UpdateClusterInput {
	return v.UpdateClusterInput
}

// GetUpdateClusterDomainInput returns __UpdateClusterDetailsExternalInput.UpdateClusterDomainInput, and is useful for accessing the field via an interface.
func (v *__UpdateClusterDetailsExternalInput) GetUpdateClusterDomainInput() UpdateClusterDomainInput {
	return v.UpdateClusterDomainInput
}

// __UpdateClusterDetailsExternalLinkInput is used internally by genqlient
type __UpdateClusterDetailsExternalLinkInput struct {
	UpdateClusterInput       UpdateClusterInput       `json:"updateClusterInput"`
	UpdateClusterDomainInput UpdateClusterDomainInput `json:"updateClusterDomainInput"`
	LinkCloudToClusterInput  LinkCloudToClusterInput  `json:"linkCloudToClusterInput"`
}

// GetUpdateClusterInput returns __UpdateClusterDetailsExternalLinkInput.UpdateClusterInput, and is useful for accessing the field via an interface.
func (v *__UpdateClusterDetailsExternalLinkInput) GetUpdateClusterInput() UpdateClusterInput {
	return v.UpdateClusterInput
}

// GetUpdateClusterDomainInput returns __UpdateClusterDetailsExternalLinkInput.UpdateClusterDomainInput, and is useful for accessing the field via an interface.
func (v *__UpdateClusterDetailsExternalLinkInput) GetUpdateClusterDomainInput() UpdateClusterDomainInput {
	return v.UpdateClusterDomainInput
}

// GetLinkCloudToClusterInput returns __UpdateClusterDetailsExternalLinkInput.LinkCloudToClusterInput, and is useful for accessing the field via an interface.
func (v *__UpdateClusterDetailsExternalLinkInput) GetLinkCloudToClusterInput() LinkCloudToClusterInput {
	return v.LinkCloudToClusterInput
}

// __UpdateClusterDetailsZeetInput is used internally by genqlient
type __UpdateClusterDetailsZeetInput struct {
	UpdateClusterInput UpdateClusterInput `json:"updateClusterInput"`
}

// GetUpdateClusterInput returns __UpdateClusterDetailsZeetInput.UpdateClusterInput, and is useful for accessing the field via an interface.
func (v *__UpdateClusterDetailsZeetInput) GetUpdateClusterInput() UpdateClusterInput {
	return v.UpdateClusterInput
}

// __UpdateClusterDetailsZeetLinkInput is used internally by genqlient
type __UpdateClusterDetailsZeetLinkInput struct {
	UpdateClusterInput      UpdateClusterInput      `json:"updateClusterInput"`
	LinkCloudToClusterInput LinkCloudToClusterInput `json:"linkCloudToClusterInput"`
}

// GetUpdateClusterInput returns __UpdateClusterDetailsZeetLinkInput.UpdateClusterInput, and is useful for accessing the field via an interface.
func (v *__UpdateClusterDetailsZeetLinkInput) GetUpdateClusterInput() UpdateClusterInput {
	return v.UpdateClusterInput
}

// GetLinkCloudToClusterInput returns __UpdateClusterDetailsZeetLinkInput.LinkCloudToClusterInput, and is useful for accessing the field via an interface.
func (v *__UpdateClusterDetailsZeetLinkInput) GetLinkCloudToClusterInput() LinkCloudToClusterInput {
	return v.LinkCloudToClusterInput
}

// __UpdateClusterDomainInput is used internally by genqlient
type __UpdateClusterDomainInput struct {
	Input UpdateClusterDomainInput `json:"input"`
}

// GetInput returns __UpdateClusterDomainInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateClusterDomainInput) GetInput() UpdateClusterDomainInput { return v.Input }

// __UpdateTeamMemberRoleInput is used internally by genqlient
type __UpdateTeamMemberRoleInput struct {
	Input UpdateTeamMemberRoleInput `json:"input"`
}

// GetInput returns __UpdateTeamMemberRoleInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateTeamMemberRoleInput) GetInput() UpdateTeamMemberRoleInput { return v.Input }

// __abortBlueprintDriverWorkflowInput is used internally by genqlient
type __abortBlueprintDriverWorkflowInput struct {
	WorkflowID uuid.UUID `json:"workflowID"`
}

// GetWorkflowID returns __abortBlueprintDriverWorkflowInput.WorkflowID, and is useful for accessing the field via an interface.
func (v *__abortBlueprintDriverWorkflowInput) GetWorkflowID() uuid.UUID { return v.WorkflowID }

// __abortBuildInput is used internally by genqlient
type __abortBuildInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __abortBuildInput.Id, and is useful for accessing the field via an interface.
func (v *__abortBuildInput) GetId() uuid.UUID { return v.Id }

// __acceptTeamMemberInvitationInput is used internally by genqlient
type __acceptTeamMemberInvitationInput struct {
	Token string `json:"token"`
}

// GetToken returns __acceptTeamMemberInvitationInput.Token, and is useful for accessing the field via an interface.
func (v *__acceptTeamMemberInvitationInput) GetToken() string { return v.Token }

// __addAWSAccountInput is used internally by genqlient
type __addAWSAccountInput struct {
	Input AddAWSAccountInput `json:"input"`
}

// GetInput returns __addAWSAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__addAWSAccountInput) GetInput() AddAWSAccountInput { return v.Input }

// __addAzureAccountInput is used internally by genqlient
type __addAzureAccountInput struct {
	Input AddAzureAccountInput `json:"input"`
}

// GetInput returns __addAzureAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__addAzureAccountInput) GetInput() AddAzureAccountInput { return v.Input }

// __addCDNInput is used internally by genqlient
type __addCDNInput struct {
	Input AddCDNInput `json:"input"`
}

// GetInput returns __addCDNInput.Input, and is useful for accessing the field via an interface.
func (v *__addCDNInput) GetInput() AddCDNInput { return v.Input }

// __addClusterInput is used internally by genqlient
type __addClusterInput struct {
	Input AddClusterInput `json:"input"`
}

// GetInput returns __addClusterInput.Input, and is useful for accessing the field via an interface.
func (v *__addClusterInput) GetInput() AddClusterInput { return v.Input }

// __addContainerRegistryInput is used internally by genqlient
type __addContainerRegistryInput struct {
	Input AddContainerRegistryInput `json:"input"`
}

// GetInput returns __addContainerRegistryInput.Input, and is useful for accessing the field via an interface.
func (v *__addContainerRegistryInput) GetInput() AddContainerRegistryInput { return v.Input }

// __addCoreWeaveAccountInput is used internally by genqlient
type __addCoreWeaveAccountInput struct {
	Input AddCoreWeaveAccountInput `json:"input"`
}

// GetInput returns __addCoreWeaveAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__addCoreWeaveAccountInput) GetInput() AddCoreWeaveAccountInput { return v.Input }

// __addDOAccountInput is used internally by genqlient
type __addDOAccountInput struct {
	Input AddDOAccountInput `json:"input"`
}

// GetInput returns __addDOAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__addDOAccountInput) GetInput() AddDOAccountInput { return v.Input }

// __addGCPAccountInput is used internally by genqlient
type __addGCPAccountInput struct {
	Input AddGCPAccountInput `json:"input"`
}

// GetInput returns __addGCPAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__addGCPAccountInput) GetInput() AddGCPAccountInput { return v.Input }

// __addLinodeAccountInput is used internally by genqlient
type __addLinodeAccountInput struct {
	Input AddLinodeAccountInput `json:"input"`
}

// GetInput returns __addLinodeAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__addLinodeAccountInput) GetInput() AddLinodeAccountInput { return v.Input }

// __addProjectCollaboratorInput is used internally by genqlient
type __addProjectCollaboratorInput struct {
	Input AddProjectCollaboratorInput `json:"input"`
}

// GetInput returns __addProjectCollaboratorInput.Input, and is useful for accessing the field via an interface.
func (v *__addProjectCollaboratorInput) GetInput() AddProjectCollaboratorInput { return v.Input }

// __addRepoCustomDomainInput is used internally by genqlient
type __addRepoCustomDomainInput struct {
	Input AddRepoCustomDomainInput `json:"input"`
}

// GetInput returns __addRepoCustomDomainInput.Input, and is useful for accessing the field via an interface.
func (v *__addRepoCustomDomainInput) GetInput() AddRepoCustomDomainInput { return v.Input }

// __addTeamMemberInput is used internally by genqlient
type __addTeamMemberInput struct {
	Input AddTeamMemberInput `json:"input"`
}

// GetInput returns __addTeamMemberInput.Input, and is useful for accessing the field via an interface.
func (v *__addTeamMemberInput) GetInput() AddTeamMemberInput { return v.Input }

// __addVultrAccountInput is used internally by genqlient
type __addVultrAccountInput struct {
	Input AddVultrAccountInput `json:"input"`
}

// GetInput returns __addVultrAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__addVultrAccountInput) GetInput() AddVultrAccountInput { return v.Input }

// __approveBlueprintDriverWorkflowInput is used internally by genqlient
type __approveBlueprintDriverWorkflowInput struct {
	WorkflowID uuid.UUID `json:"workflowID"`
}

// GetWorkflowID returns __approveBlueprintDriverWorkflowInput.WorkflowID, and is useful for accessing the field via an interface.
func (v *__approveBlueprintDriverWorkflowInput) GetWorkflowID() uuid.UUID { return v.WorkflowID }

// __awsPolicyJsonInput is used internally by genqlient
type __awsPolicyJsonInput struct {
	UserId             uuid.UUID          `json:"userId"`
	AwsAccountId       uuid.UUID          `json:"awsAccountId"`
	AwsPolicyJsonInput AwsPolicyJsonInput `json:"awsPolicyJsonInput"`
}

// GetUserId returns __awsPolicyJsonInput.UserId, and is useful for accessing the field via an interface.
func (v *__awsPolicyJsonInput) GetUserId() uuid.UUID { return v.UserId }

// GetAwsAccountId returns __awsPolicyJsonInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *__awsPolicyJsonInput) GetAwsAccountId() uuid.UUID { return v.AwsAccountId }

// GetAwsPolicyJsonInput returns __awsPolicyJsonInput.AwsPolicyJsonInput, and is useful for accessing the field via an interface.
func (v *__awsPolicyJsonInput) GetAwsPolicyJsonInput() AwsPolicyJsonInput {
	return v.AwsPolicyJsonInput
}

// __blueprintDriverWorkflowInput is used internally by genqlient
type __blueprintDriverWorkflowInput struct {
	Id     uuid.UUID `json:"id"`
	UserId uuid.UUID `json:"userId"`
}

// GetId returns __blueprintDriverWorkflowInput.Id, and is useful for accessing the field via an interface.
func (v *__blueprintDriverWorkflowInput) GetId() uuid.UUID { return v.Id }

// GetUserId returns __blueprintDriverWorkflowInput.UserId, and is useful for accessing the field via an interface.
func (v *__blueprintDriverWorkflowInput) GetUserId() uuid.UUID { return v.UserId }

// __blueprintInput is used internally by genqlient
type __blueprintInput struct {
	UserId            uuid.UUID `json:"userId"`
	PermissionsUserId uuid.UUID `json:"permissionsUserId"`
	BlueprintId       uuid.UUID `json:"blueprintId"`
}

// GetUserId returns __blueprintInput.UserId, and is useful for accessing the field via an interface.
func (v *__blueprintInput) GetUserId() uuid.UUID { return v.UserId }

// GetPermissionsUserId returns __blueprintInput.PermissionsUserId, and is useful for accessing the field via an interface.
func (v *__blueprintInput) GetPermissionsUserId() uuid.UUID { return v.PermissionsUserId }

// GetBlueprintId returns __blueprintInput.BlueprintId, and is useful for accessing the field via an interface.
func (v *__blueprintInput) GetBlueprintId() uuid.UUID { return v.BlueprintId }

// __blueprintWithProjectsInput is used internally by genqlient
type __blueprintWithProjectsInput struct {
	UserId            uuid.UUID `json:"userId"`
	PermissionsUserId uuid.UUID `json:"permissionsUserId"`
	BlueprintId       uuid.UUID `json:"blueprintId"`
}

// GetUserId returns __blueprintWithProjectsInput.UserId, and is useful for accessing the field via an interface.
func (v *__blueprintWithProjectsInput) GetUserId() uuid.UUID { return v.UserId }

// GetPermissionsUserId returns __blueprintWithProjectsInput.PermissionsUserId, and is useful for accessing the field via an interface.
func (v *__blueprintWithProjectsInput) GetPermissionsUserId() uuid.UUID { return v.PermissionsUserId }

// GetBlueprintId returns __blueprintWithProjectsInput.BlueprintId, and is useful for accessing the field via an interface.
func (v *__blueprintWithProjectsInput) GetBlueprintId() uuid.UUID { return v.BlueprintId }

// __blueprintsInput is used internally by genqlient
type __blueprintsInput struct {
	UserId            uuid.UUID `json:"userId"`
	PermissionsUserId uuid.UUID `json:"permissionsUserId"`
	PageInput         PageInput `json:"pageInput"`
}

// GetUserId returns __blueprintsInput.UserId, and is useful for accessing the field via an interface.
func (v *__blueprintsInput) GetUserId() uuid.UUID { return v.UserId }

// GetPermissionsUserId returns __blueprintsInput.PermissionsUserId, and is useful for accessing the field via an interface.
func (v *__blueprintsInput) GetPermissionsUserId() uuid.UUID { return v.PermissionsUserId }

// GetPageInput returns __blueprintsInput.PageInput, and is useful for accessing the field via an interface.
func (v *__blueprintsInput) GetPageInput() PageInput { return v.PageInput }

// __buildRepoInput is used internally by genqlient
type __buildRepoInput struct {
	Id      uuid.UUID `json:"id"`
	Branch  *string   `json:"branch"`
	NoCache *bool     `json:"noCache"`
}

// GetId returns __buildRepoInput.Id, and is useful for accessing the field via an interface.
func (v *__buildRepoInput) GetId() uuid.UUID { return v.Id }

// GetBranch returns __buildRepoInput.Branch, and is useful for accessing the field via an interface.
func (v *__buildRepoInput) GetBranch() *string { return v.Branch }

// GetNoCache returns __buildRepoInput.NoCache, and is useful for accessing the field via an interface.
func (v *__buildRepoInput) GetNoCache() *bool { return v.NoCache }

// __buildTemplatesExistInput is used internally by genqlient
type __buildTemplatesExistInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __buildTemplatesExistInput.Id, and is useful for accessing the field via an interface.
func (v *__buildTemplatesExistInput) GetId() uuid.UUID { return v.Id }

// __buildTemplatesInput is used internally by genqlient
type __buildTemplatesInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __buildTemplatesInput.Id, and is useful for accessing the field via an interface.
func (v *__buildTemplatesInput) GetId() uuid.UUID { return v.Id }

// __checkProjectNameInput is used internally by genqlient
type __checkProjectNameInput struct {
	User  uuid.UUID             `json:"user"`
	Input CheckProjectNameInput `json:"input"`
}

// GetUser returns __checkProjectNameInput.User, and is useful for accessing the field via an interface.
func (v *__checkProjectNameInput) GetUser() uuid.UUID { return v.User }

// GetInput returns __checkProjectNameInput.Input, and is useful for accessing the field via an interface.
func (v *__checkProjectNameInput) GetInput() CheckProjectNameInput { return v.Input }

// __cloudDetailsAwsInput is used internally by genqlient
type __cloudDetailsAwsInput struct {
	Id        uuid.UUID `json:"id"`
	AccountId uuid.UUID `json:"accountId"`
}

// GetId returns __cloudDetailsAwsInput.Id, and is useful for accessing the field via an interface.
func (v *__cloudDetailsAwsInput) GetId() uuid.UUID { return v.Id }

// GetAccountId returns __cloudDetailsAwsInput.AccountId, and is useful for accessing the field via an interface.
func (v *__cloudDetailsAwsInput) GetAccountId() uuid.UUID { return v.AccountId }

// __cloudDetailsAzureInput is used internally by genqlient
type __cloudDetailsAzureInput struct {
	Id        uuid.UUID `json:"id"`
	AccountId uuid.UUID `json:"accountId"`
}

// GetId returns __cloudDetailsAzureInput.Id, and is useful for accessing the field via an interface.
func (v *__cloudDetailsAzureInput) GetId() uuid.UUID { return v.Id }

// GetAccountId returns __cloudDetailsAzureInput.AccountId, and is useful for accessing the field via an interface.
func (v *__cloudDetailsAzureInput) GetAccountId() uuid.UUID { return v.AccountId }

// __cloudDetailsCoreweaveInput is used internally by genqlient
type __cloudDetailsCoreweaveInput struct {
	Id        uuid.UUID `json:"id"`
	AccountId uuid.UUID `json:"accountId"`
}

// GetId returns __cloudDetailsCoreweaveInput.Id, and is useful for accessing the field via an interface.
func (v *__cloudDetailsCoreweaveInput) GetId() uuid.UUID { return v.Id }

// GetAccountId returns __cloudDetailsCoreweaveInput.AccountId, and is useful for accessing the field via an interface.
func (v *__cloudDetailsCoreweaveInput) GetAccountId() uuid.UUID { return v.AccountId }

// __cloudDetailsDoInput is used internally by genqlient
type __cloudDetailsDoInput struct {
	Id        uuid.UUID `json:"id"`
	AccountId uuid.UUID `json:"accountId"`
}

// GetId returns __cloudDetailsDoInput.Id, and is useful for accessing the field via an interface.
func (v *__cloudDetailsDoInput) GetId() uuid.UUID { return v.Id }

// GetAccountId returns __cloudDetailsDoInput.AccountId, and is useful for accessing the field via an interface.
func (v *__cloudDetailsDoInput) GetAccountId() uuid.UUID { return v.AccountId }

// __cloudDetailsGcpInput is used internally by genqlient
type __cloudDetailsGcpInput struct {
	Id        uuid.UUID `json:"id"`
	AccountId uuid.UUID `json:"accountId"`
}

// GetId returns __cloudDetailsGcpInput.Id, and is useful for accessing the field via an interface.
func (v *__cloudDetailsGcpInput) GetId() uuid.UUID { return v.Id }

// GetAccountId returns __cloudDetailsGcpInput.AccountId, and is useful for accessing the field via an interface.
func (v *__cloudDetailsGcpInput) GetAccountId() uuid.UUID { return v.AccountId }

// __cloudDetailsLinodeInput is used internally by genqlient
type __cloudDetailsLinodeInput struct {
	Id        uuid.UUID `json:"id"`
	AccountId uuid.UUID `json:"accountId"`
}

// GetId returns __cloudDetailsLinodeInput.Id, and is useful for accessing the field via an interface.
func (v *__cloudDetailsLinodeInput) GetId() uuid.UUID { return v.Id }

// GetAccountId returns __cloudDetailsLinodeInput.AccountId, and is useful for accessing the field via an interface.
func (v *__cloudDetailsLinodeInput) GetAccountId() uuid.UUID { return v.AccountId }

// __cloudDetailsVultrInput is used internally by genqlient
type __cloudDetailsVultrInput struct {
	Id        uuid.UUID `json:"id"`
	AccountId uuid.UUID `json:"accountId"`
}

// GetId returns __cloudDetailsVultrInput.Id, and is useful for accessing the field via an interface.
func (v *__cloudDetailsVultrInput) GetId() uuid.UUID { return v.Id }

// GetAccountId returns __cloudDetailsVultrInput.AccountId, and is useful for accessing the field via an interface.
func (v *__cloudDetailsVultrInput) GetAccountId() uuid.UUID { return v.AccountId }

// __clusterCertIssuersInput is used internally by genqlient
type __clusterCertIssuersInput struct {
	UserID    uuid.UUID `json:"userID"`
	RepoID    uuid.UUID `json:"repoID"`
	ClusterID uuid.UUID `json:"clusterID"`
}

// GetUserID returns __clusterCertIssuersInput.UserID, and is useful for accessing the field via an interface.
func (v *__clusterCertIssuersInput) GetUserID() uuid.UUID { return v.UserID }

// GetRepoID returns __clusterCertIssuersInput.RepoID, and is useful for accessing the field via an interface.
func (v *__clusterCertIssuersInput) GetRepoID() uuid.UUID { return v.RepoID }

// GetClusterID returns __clusterCertIssuersInput.ClusterID, and is useful for accessing the field via an interface.
func (v *__clusterCertIssuersInput) GetClusterID() uuid.UUID { return v.ClusterID }

// __clusterCommonInput is used internally by genqlient
type __clusterCommonInput struct {
	Id        uuid.UUID `json:"id"`
	ClusterId uuid.UUID `json:"clusterId"`
}

// GetId returns __clusterCommonInput.Id, and is useful for accessing the field via an interface.
func (v *__clusterCommonInput) GetId() uuid.UUID { return v.Id }

// GetClusterId returns __clusterCommonInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__clusterCommonInput) GetClusterId() uuid.UUID { return v.ClusterId }

// __clusterDeployLogsInput is used internally by genqlient
type __clusterDeployLogsInput struct {
	Id        uuid.UUID `json:"id"`
	ClusterId uuid.UUID `json:"clusterId"`
}

// GetId returns __clusterDeployLogsInput.Id, and is useful for accessing the field via an interface.
func (v *__clusterDeployLogsInput) GetId() uuid.UUID { return v.Id }

// GetClusterId returns __clusterDeployLogsInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__clusterDeployLogsInput) GetClusterId() uuid.UUID { return v.ClusterId }

// __clusterDetailsInput is used internally by genqlient
type __clusterDetailsInput struct {
	Id        uuid.UUID `json:"id"`
	ClusterId uuid.UUID `json:"clusterId"`
}

// GetId returns __clusterDetailsInput.Id, and is useful for accessing the field via an interface.
func (v *__clusterDetailsInput) GetId() uuid.UUID { return v.Id }

// GetClusterId returns __clusterDetailsInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__clusterDetailsInput) GetClusterId() uuid.UUID { return v.ClusterId }

// __clusterDomainInput is used internally by genqlient
type __clusterDomainInput struct {
	UserID    uuid.UUID `json:"userID"`
	ClusterID uuid.UUID `json:"clusterID"`
}

// GetUserID returns __clusterDomainInput.UserID, and is useful for accessing the field via an interface.
func (v *__clusterDomainInput) GetUserID() uuid.UUID { return v.UserID }

// GetClusterID returns __clusterDomainInput.ClusterID, and is useful for accessing the field via an interface.
func (v *__clusterDomainInput) GetClusterID() uuid.UUID { return v.ClusterID }

// __clusterKubeconfigInput is used internally by genqlient
type __clusterKubeconfigInput struct {
	UserID    uuid.UUID `json:"userID"`
	ClusterID uuid.UUID `json:"clusterID"`
}

// GetUserID returns __clusterKubeconfigInput.UserID, and is useful for accessing the field via an interface.
func (v *__clusterKubeconfigInput) GetUserID() uuid.UUID { return v.UserID }

// GetClusterID returns __clusterKubeconfigInput.ClusterID, and is useful for accessing the field via an interface.
func (v *__clusterKubeconfigInput) GetClusterID() uuid.UUID { return v.ClusterID }

// __clusterNameInput is used internally by genqlient
type __clusterNameInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ClusterId uuid.UUID `json:"clusterId"`
}

// GetTeamId returns __clusterNameInput.TeamId, and is useful for accessing the field via an interface.
func (v *__clusterNameInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetClusterId returns __clusterNameInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__clusterNameInput) GetClusterId() uuid.UUID { return v.ClusterId }

// __clusterProvisionTargetsInput is used internally by genqlient
type __clusterProvisionTargetsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __clusterProvisionTargetsInput.Id, and is useful for accessing the field via an interface.
func (v *__clusterProvisionTargetsInput) GetId() uuid.UUID { return v.Id }

// __clustersCustomDomainsInput is used internally by genqlient
type __clustersCustomDomainsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __clustersCustomDomainsInput.Id, and is useful for accessing the field via an interface.
func (v *__clustersCustomDomainsInput) GetId() uuid.UUID { return v.Id }

// __combinedAwsRdsMetricsUpdatedInput is used internally by genqlient
type __combinedAwsRdsMetricsUpdatedInput struct {
	DeploymentID uuid.UUID `json:"deploymentID"`
}

// GetDeploymentID returns __combinedAwsRdsMetricsUpdatedInput.DeploymentID, and is useful for accessing the field via an interface.
func (v *__combinedAwsRdsMetricsUpdatedInput) GetDeploymentID() uuid.UUID { return v.DeploymentID }

// __combinedCloudFunctionDeploymentMetricsUpdatedInput is used internally by genqlient
type __combinedCloudFunctionDeploymentMetricsUpdatedInput struct {
	DeploymentID uuid.UUID `json:"deploymentID"`
}

// GetDeploymentID returns __combinedCloudFunctionDeploymentMetricsUpdatedInput.DeploymentID, and is useful for accessing the field via an interface.
func (v *__combinedCloudFunctionDeploymentMetricsUpdatedInput) GetDeploymentID() uuid.UUID {
	return v.DeploymentID
}

// __combinedCloudRunMetricsUpdatedInput is used internally by genqlient
type __combinedCloudRunMetricsUpdatedInput struct {
	DeploymentID uuid.UUID `json:"deploymentID"`
}

// GetDeploymentID returns __combinedCloudRunMetricsUpdatedInput.DeploymentID, and is useful for accessing the field via an interface.
func (v *__combinedCloudRunMetricsUpdatedInput) GetDeploymentID() uuid.UUID { return v.DeploymentID }

// __combinedDeploymentMetricsInput is used internally by genqlient
type __combinedDeploymentMetricsInput struct {
	RepoID       uuid.UUID `json:"repoID"`
	DeploymentID uuid.UUID `json:"deploymentID"`
}

// GetRepoID returns __combinedDeploymentMetricsInput.RepoID, and is useful for accessing the field via an interface.
func (v *__combinedDeploymentMetricsInput) GetRepoID() uuid.UUID { return v.RepoID }

// GetDeploymentID returns __combinedDeploymentMetricsInput.DeploymentID, and is useful for accessing the field via an interface.
func (v *__combinedDeploymentMetricsInput) GetDeploymentID() uuid.UUID { return v.DeploymentID }

// __combinedDeploymentMetricsUpdatedInput is used internally by genqlient
type __combinedDeploymentMetricsUpdatedInput struct {
	DeploymentID uuid.UUID `json:"deploymentID"`
}

// GetDeploymentID returns __combinedDeploymentMetricsUpdatedInput.DeploymentID, and is useful for accessing the field via an interface.
func (v *__combinedDeploymentMetricsUpdatedInput) GetDeploymentID() uuid.UUID { return v.DeploymentID }

// __combinedDeploymentMetricsUpdatedV2Input is used internally by genqlient
type __combinedDeploymentMetricsUpdatedV2Input struct {
	DeploymentID   uuid.UUID           `json:"deploymentID"`
	DeploymentUUID uuid.UUID           `json:"deploymentUUID"`
	QueryOptions   *MetricQueryOptions `json:"queryOptions"`
}

// GetDeploymentID returns __combinedDeploymentMetricsUpdatedV2Input.DeploymentID, and is useful for accessing the field via an interface.
func (v *__combinedDeploymentMetricsUpdatedV2Input) GetDeploymentID() uuid.UUID {
	return v.DeploymentID
}

// GetDeploymentUUID returns __combinedDeploymentMetricsUpdatedV2Input.DeploymentUUID, and is useful for accessing the field via an interface.
func (v *__combinedDeploymentMetricsUpdatedV2Input) GetDeploymentUUID() uuid.UUID {
	return v.DeploymentUUID
}

// GetQueryOptions returns __combinedDeploymentMetricsUpdatedV2Input.QueryOptions, and is useful for accessing the field via an interface.
func (v *__combinedDeploymentMetricsUpdatedV2Input) GetQueryOptions() *MetricQueryOptions {
	return v.QueryOptions
}

// __combinedLambdaDeploymentMetricsUpdatedInput is used internally by genqlient
type __combinedLambdaDeploymentMetricsUpdatedInput struct {
	DeploymentID uuid.UUID `json:"deploymentID"`
}

// GetDeploymentID returns __combinedLambdaDeploymentMetricsUpdatedInput.DeploymentID, and is useful for accessing the field via an interface.
func (v *__combinedLambdaDeploymentMetricsUpdatedInput) GetDeploymentID() uuid.UUID {
	return v.DeploymentID
}

// __copyEnvVarsInput is used internally by genqlient
type __copyEnvVarsInput struct {
	From uuid.UUID `json:"from"`
	To   uuid.UUID `json:"to"`
}

// GetFrom returns __copyEnvVarsInput.From, and is useful for accessing the field via an interface.
func (v *__copyEnvVarsInput) GetFrom() uuid.UUID { return v.From }

// GetTo returns __copyEnvVarsInput.To, and is useful for accessing the field via an interface.
func (v *__copyEnvVarsInput) GetTo() uuid.UUID { return v.To }

// __createAPIKeyInput is used internally by genqlient
type __createAPIKeyInput struct {
	Input CreateAPIKeyInput `json:"input"`
}

// GetInput returns __createAPIKeyInput.Input, and is useful for accessing the field via an interface.
func (v *__createAPIKeyInput) GetInput() CreateAPIKeyInput { return v.Input }

// __createBitbucketIntegrationInput is used internally by genqlient
type __createBitbucketIntegrationInput struct {
	UserId      uuid.UUID `json:"userId"`
	AccessToken string    `json:"accessToken"`
	Name        string    `json:"name"`
}

// GetUserId returns __createBitbucketIntegrationInput.UserId, and is useful for accessing the field via an interface.
func (v *__createBitbucketIntegrationInput) GetUserId() uuid.UUID { return v.UserId }

// GetAccessToken returns __createBitbucketIntegrationInput.AccessToken, and is useful for accessing the field via an interface.
func (v *__createBitbucketIntegrationInput) GetAccessToken() string { return v.AccessToken }

// GetName returns __createBitbucketIntegrationInput.Name, and is useful for accessing the field via an interface.
func (v *__createBitbucketIntegrationInput) GetName() string { return v.Name }

// __createBlueprintDriverWorkflowInput is used internally by genqlient
type __createBlueprintDriverWorkflowInput struct {
	ProjectID uuid.UUID                           `json:"projectID"`
	Driver    BlueprintDriver                     `json:"driver"`
	Steps     []BlueprintDriverWorkflowStepAction `json:"steps"`
}

// GetProjectID returns __createBlueprintDriverWorkflowInput.ProjectID, and is useful for accessing the field via an interface.
func (v *__createBlueprintDriverWorkflowInput) GetProjectID() uuid.UUID { return v.ProjectID }

// GetDriver returns __createBlueprintDriverWorkflowInput.Driver, and is useful for accessing the field via an interface.
func (v *__createBlueprintDriverWorkflowInput) GetDriver() BlueprintDriver { return v.Driver }

// GetSteps returns __createBlueprintDriverWorkflowInput.Steps, and is useful for accessing the field via an interface.
func (v *__createBlueprintDriverWorkflowInput) GetSteps() []BlueprintDriverWorkflowStepAction {
	return v.Steps
}

// __createBlueprintInput is used internally by genqlient
type __createBlueprintInput struct {
	Input CreateBlueprintInput `json:"input"`
}

// GetInput returns __createBlueprintInput.Input, and is useful for accessing the field via an interface.
func (v *__createBlueprintInput) GetInput() CreateBlueprintInput { return v.Input }

// __createBranchInput is used internally by genqlient
type __createBranchInput struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns __createBranchInput.Id, and is useful for accessing the field via an interface.
func (v *__createBranchInput) GetId() uuid.UUID { return v.Id }

// GetName returns __createBranchInput.Name, and is useful for accessing the field via an interface.
func (v *__createBranchInput) GetName() string { return v.Name }

// __createClusterInput is used internally by genqlient
type __createClusterInput struct {
	Input CreateClusterInput `json:"input"`
}

// GetInput returns __createClusterInput.Input, and is useful for accessing the field via an interface.
func (v *__createClusterInput) GetInput() CreateClusterInput { return v.Input }

// __createDatabaseInput is used internally by genqlient
type __createDatabaseInput struct {
	Input *CreateDatabaseInput `json:"input"`
}

// GetInput returns __createDatabaseInput.Input, and is useful for accessing the field via an interface.
func (v *__createDatabaseInput) GetInput() *CreateDatabaseInput { return v.Input }

// __createDatadogIntegrationInput is used internally by genqlient
type __createDatadogIntegrationInput struct {
	Input CreateDatadogIntegrationInput `json:"input"`
}

// GetInput returns __createDatadogIntegrationInput.Input, and is useful for accessing the field via an interface.
func (v *__createDatadogIntegrationInput) GetInput() CreateDatadogIntegrationInput { return v.Input }

// __createDiscordWebhookIntegrationInput is used internally by genqlient
type __createDiscordWebhookIntegrationInput struct {
	Input CreateWebhookIntegrationInput `json:"input"`
}

// GetInput returns __createDiscordWebhookIntegrationInput.Input, and is useful for accessing the field via an interface.
func (v *__createDiscordWebhookIntegrationInput) GetInput() CreateWebhookIntegrationInput {
	return v.Input
}

// __createEmailIntegrationInput is used internally by genqlient
type __createEmailIntegrationInput struct {
	Input CreateEmailIntegrationInput `json:"input"`
}

// GetInput returns __createEmailIntegrationInput.Input, and is useful for accessing the field via an interface.
func (v *__createEmailIntegrationInput) GetInput() CreateEmailIntegrationInput { return v.Input }

// __createEphemeralContainerInput is used internally by genqlient
type __createEphemeralContainerInput struct {
	DeploymentId uuid.UUID                     `json:"deploymentId"`
	Input        CreateEphemeralContainerInput `json:"input"`
}

// GetDeploymentId returns __createEphemeralContainerInput.DeploymentId, and is useful for accessing the field via an interface.
func (v *__createEphemeralContainerInput) GetDeploymentId() uuid.UUID { return v.DeploymentId }

// GetInput returns __createEphemeralContainerInput.Input, and is useful for accessing the field via an interface.
func (v *__createEphemeralContainerInput) GetInput() CreateEphemeralContainerInput { return v.Input }

// __createGitlabIntegrationInput is used internally by genqlient
type __createGitlabIntegrationInput struct {
	Input CreateGitlabIntegrationInput `json:"input"`
}

// GetInput returns __createGitlabIntegrationInput.Input, and is useful for accessing the field via an interface.
func (v *__createGitlabIntegrationInput) GetInput() CreateGitlabIntegrationInput { return v.Input }

// __createProjectDockerInput is used internally by genqlient
type __createProjectDockerInput struct {
	Input *CreateProjectDockerInput `json:"input"`
}

// GetInput returns __createProjectDockerInput.Input, and is useful for accessing the field via an interface.
func (v *__createProjectDockerInput) GetInput() *CreateProjectDockerInput { return v.Input }

// __createProjectEnvironmentInput is used internally by genqlient
type __createProjectEnvironmentInput struct {
	Input CreateProjectEnvironmentInput `json:"input"`
}

// GetInput returns __createProjectEnvironmentInput.Input, and is useful for accessing the field via an interface.
func (v *__createProjectEnvironmentInput) GetInput() CreateProjectEnvironmentInput { return v.Input }

// __createProjectGitInput is used internally by genqlient
type __createProjectGitInput struct {
	Input *CreateProjectGitInput `json:"input"`
}

// GetInput returns __createProjectGitInput.Input, and is useful for accessing the field via an interface.
func (v *__createProjectGitInput) GetInput() *CreateProjectGitInput { return v.Input }

// __createProjectHelmInput is used internally by genqlient
type __createProjectHelmInput struct {
	Input *CreateProjectHelmInput `json:"input"`
}

// GetInput returns __createProjectHelmInput.Input, and is useful for accessing the field via an interface.
func (v *__createProjectHelmInput) GetInput() *CreateProjectHelmInput { return v.Input }

// __createProjectInput is used internally by genqlient
type __createProjectInput struct {
	Input *CreateProjectInput `json:"input"`
}

// GetInput returns __createProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__createProjectInput) GetInput() *CreateProjectInput { return v.Input }

// __createProjectManifestInput is used internally by genqlient
type __createProjectManifestInput struct {
	Input *CreateManifestAppInput `json:"input"`
}

// GetInput returns __createProjectManifestInput.Input, and is useful for accessing the field via an interface.
func (v *__createProjectManifestInput) GetInput() *CreateManifestAppInput { return v.Input }

// __createProjectTerraformInput is used internally by genqlient
type __createProjectTerraformInput struct {
	Input *CreateProjectTerraformInput `json:"input"`
}

// GetInput returns __createProjectTerraformInput.Input, and is useful for accessing the field via an interface.
func (v *__createProjectTerraformInput) GetInput() *CreateProjectTerraformInput { return v.Input }

// __createProjectV3Input is used internally by genqlient
type __createProjectV3Input struct {
	Input CreateProjectV3Input `json:"input"`
}

// GetInput returns __createProjectV3Input.Input, and is useful for accessing the field via an interface.
func (v *__createProjectV3Input) GetInput() CreateProjectV3Input { return v.Input }

// __createProjectsFromTemplateInput is used internally by genqlient
type __createProjectsFromTemplateInput struct {
	Input CreateProjectsFromTemplateInput `json:"input"`
}

// GetInput returns __createProjectsFromTemplateInput.Input, and is useful for accessing the field via an interface.
func (v *__createProjectsFromTemplateInput) GetInput() CreateProjectsFromTemplateInput {
	return v.Input
}

// __createRepoPipelineLinkInput is used internally by genqlient
type __createRepoPipelineLinkInput struct {
	Input CreateRepoPipelineLinkInput `json:"input"`
}

// GetInput returns __createRepoPipelineLinkInput.Input, and is useful for accessing the field via an interface.
func (v *__createRepoPipelineLinkInput) GetInput() CreateRepoPipelineLinkInput { return v.Input }

// __createResourceAlphaInput is used internally by genqlient
type __createResourceAlphaInput struct {
	Input CreateResourceAlphaInput `json:"input"`
}

// GetInput returns __createResourceAlphaInput.Input, and is useful for accessing the field via an interface.
func (v *__createResourceAlphaInput) GetInput() CreateResourceAlphaInput { return v.Input }

// __createSlackWebhookIntegrationInput is used internally by genqlient
type __createSlackWebhookIntegrationInput struct {
	Input CreateWebhookIntegrationInput `json:"input"`
}

// GetInput returns __createSlackWebhookIntegrationInput.Input, and is useful for accessing the field via an interface.
func (v *__createSlackWebhookIntegrationInput) GetInput() CreateWebhookIntegrationInput {
	return v.Input
}

// __createTeamInput is used internally by genqlient
type __createTeamInput struct {
	Input CreateTeamInput `json:"input"`
}

// GetInput returns __createTeamInput.Input, and is useful for accessing the field via an interface.
func (v *__createTeamInput) GetInput() CreateTeamInput { return v.Input }

// __currentUsageMetricsInput is used internally by genqlient
type __currentUsageMetricsInput struct {
	Id                uuid.UUID `json:"id"`
	TeamID            uuid.UUID `json:"teamID"`
	PermissionsUserId uuid.UUID `json:"permissionsUserId"`
	PageInput         PageInput `json:"pageInput"`
}

// GetId returns __currentUsageMetricsInput.Id, and is useful for accessing the field via an interface.
func (v *__currentUsageMetricsInput) GetId() uuid.UUID { return v.Id }

// GetTeamID returns __currentUsageMetricsInput.TeamID, and is useful for accessing the field via an interface.
func (v *__currentUsageMetricsInput) GetTeamID() uuid.UUID { return v.TeamID }

// GetPermissionsUserId returns __currentUsageMetricsInput.PermissionsUserId, and is useful for accessing the field via an interface.
func (v *__currentUsageMetricsInput) GetPermissionsUserId() uuid.UUID { return v.PermissionsUserId }

// GetPageInput returns __currentUsageMetricsInput.PageInput, and is useful for accessing the field via an interface.
func (v *__currentUsageMetricsInput) GetPageInput() PageInput { return v.PageInput }

// __deleteAPIKeyInput is used internally by genqlient
type __deleteAPIKeyInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteAPIKeyInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteAPIKeyInput) GetId() uuid.UUID { return v.Id }

// __deleteBlueprintInput is used internally by genqlient
type __deleteBlueprintInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteBlueprintInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteBlueprintInput) GetId() uuid.UUID { return v.Id }

// __deleteClusterInput is used internally by genqlient
type __deleteClusterInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteClusterInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteClusterInput) GetId() uuid.UUID { return v.Id }

// __deleteIntegrationInput is used internally by genqlient
type __deleteIntegrationInput struct {
	Input RemoveUserIntegrationInput `json:"input"`
}

// GetInput returns __deleteIntegrationInput.Input, and is useful for accessing the field via an interface.
func (v *__deleteIntegrationInput) GetInput() RemoveUserIntegrationInput { return v.Input }

// __deleteProjectBranchInput is used internally by genqlient
type __deleteProjectBranchInput struct {
	Id     uuid.UUID `json:"id"`
	Branch string    `json:"branch"`
}

// GetId returns __deleteProjectBranchInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteProjectBranchInput) GetId() uuid.UUID { return v.Id }

// GetBranch returns __deleteProjectBranchInput.Branch, and is useful for accessing the field via an interface.
func (v *__deleteProjectBranchInput) GetBranch() string { return v.Branch }

// __deleteProjectEnvironmentInput is used internally by genqlient
type __deleteProjectEnvironmentInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteProjectEnvironmentInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteProjectEnvironmentInput) GetId() uuid.UUID { return v.Id }

// __deleteProjectInput is used internally by genqlient
type __deleteProjectInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteProjectInput) GetId() uuid.UUID { return v.Id }

// __deleteProjectV2Input is used internally by genqlient
type __deleteProjectV2Input struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteProjectV2Input.Id, and is useful for accessing the field via an interface.
func (v *__deleteProjectV2Input) GetId() uuid.UUID { return v.Id }

// __deleteProjectV3Input is used internally by genqlient
type __deleteProjectV3Input struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteProjectV3Input.Id, and is useful for accessing the field via an interface.
func (v *__deleteProjectV3Input) GetId() uuid.UUID { return v.Id }

// __deleteRepoPipelineLinkInput is used internally by genqlient
type __deleteRepoPipelineLinkInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteRepoPipelineLinkInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteRepoPipelineLinkInput) GetId() uuid.UUID { return v.Id }

// __deleteTeamInput is used internally by genqlient
type __deleteTeamInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteTeamInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteTeamInput) GetId() uuid.UUID { return v.Id }

// __deleteTeamMemberInvitationInput is used internally by genqlient
type __deleteTeamMemberInvitationInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteTeamMemberInvitationInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteTeamMemberInvitationInput) GetId() uuid.UUID { return v.Id }

// __deployRepoBranchInput is used internally by genqlient
type __deployRepoBranchInput struct {
	Input DeployRepoBranchInput `json:"input"`
}

// GetInput returns __deployRepoBranchInput.Input, and is useful for accessing the field via an interface.
func (v *__deployRepoBranchInput) GetInput() DeployRepoBranchInput { return v.Input }

// __deployTemplatesExistInput is used internally by genqlient
type __deployTemplatesExistInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deployTemplatesExistInput.Id, and is useful for accessing the field via an interface.
func (v *__deployTemplatesExistInput) GetId() uuid.UUID { return v.Id }

// __deployTemplatesInput is used internally by genqlient
type __deployTemplatesInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deployTemplatesInput.Id, and is useful for accessing the field via an interface.
func (v *__deployTemplatesInput) GetId() uuid.UUID { return v.Id }

// __deploymentAlertInput is used internally by genqlient
type __deploymentAlertInput struct {
	DeploymentId uuid.UUID `json:"deploymentId"`
	AlertId      uuid.UUID `json:"alertId"`
}

// GetDeploymentId returns __deploymentAlertInput.DeploymentId, and is useful for accessing the field via an interface.
func (v *__deploymentAlertInput) GetDeploymentId() uuid.UUID { return v.DeploymentId }

// GetAlertId returns __deploymentAlertInput.AlertId, and is useful for accessing the field via an interface.
func (v *__deploymentAlertInput) GetAlertId() uuid.UUID { return v.AlertId }

// __deploymentBuildLogsAddedInput is used internally by genqlient
type __deploymentBuildLogsAddedInput struct {
	Input BuildLogsInput `json:"input"`
}

// GetInput returns __deploymentBuildLogsAddedInput.Input, and is useful for accessing the field via an interface.
func (v *__deploymentBuildLogsAddedInput) GetInput() BuildLogsInput { return v.Input }

// __deploymentBuildLogsInput is used internally by genqlient
type __deploymentBuildLogsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deploymentBuildLogsInput.Id, and is useful for accessing the field via an interface.
func (v *__deploymentBuildLogsInput) GetId() uuid.UUID { return v.Id }

// __deploymentBuildMetricsInput is used internally by genqlient
type __deploymentBuildMetricsInput struct {
	DeploymentID uuid.UUID `json:"deploymentID"`
}

// GetDeploymentID returns __deploymentBuildMetricsInput.DeploymentID, and is useful for accessing the field via an interface.
func (v *__deploymentBuildMetricsInput) GetDeploymentID() uuid.UUID { return v.DeploymentID }

// __deploymentDeployLogsInput is used internally by genqlient
type __deploymentDeployLogsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deploymentDeployLogsInput.Id, and is useful for accessing the field via an interface.
func (v *__deploymentDeployLogsInput) GetId() uuid.UUID { return v.Id }

// __deploymentLogsInput is used internally by genqlient
type __deploymentLogsInput struct {
	RepoID       uuid.UUID `json:"repoID"`
	DeploymentID uuid.UUID `json:"deploymentID"`
}

// GetRepoID returns __deploymentLogsInput.RepoID, and is useful for accessing the field via an interface.
func (v *__deploymentLogsInput) GetRepoID() uuid.UUID { return v.RepoID }

// GetDeploymentID returns __deploymentLogsInput.DeploymentID, and is useful for accessing the field via an interface.
func (v *__deploymentLogsInput) GetDeploymentID() uuid.UUID { return v.DeploymentID }

// __deploymentMetricsInput is used internally by genqlient
type __deploymentMetricsInput struct {
	RepoID       uuid.UUID `json:"repoID"`
	DeploymentID uuid.UUID `json:"deploymentID"`
	Name         string    `json:"name"`
}

// GetRepoID returns __deploymentMetricsInput.RepoID, and is useful for accessing the field via an interface.
func (v *__deploymentMetricsInput) GetRepoID() uuid.UUID { return v.RepoID }

// GetDeploymentID returns __deploymentMetricsInput.DeploymentID, and is useful for accessing the field via an interface.
func (v *__deploymentMetricsInput) GetDeploymentID() uuid.UUID { return v.DeploymentID }

// GetName returns __deploymentMetricsInput.Name, and is useful for accessing the field via an interface.
func (v *__deploymentMetricsInput) GetName() string { return v.Name }

// __deploymentReleaseLogsInput is used internally by genqlient
type __deploymentReleaseLogsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deploymentReleaseLogsInput.Id, and is useful for accessing the field via an interface.
func (v *__deploymentReleaseLogsInput) GetId() uuid.UUID { return v.Id }

// __deploymentUpdatedInput is used internally by genqlient
type __deploymentUpdatedInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deploymentUpdatedInput.Id, and is useful for accessing the field via an interface.
func (v *__deploymentUpdatedInput) GetId() uuid.UUID { return v.Id }

// __disableProjectInput is used internally by genqlient
type __disableProjectInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __disableProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__disableProjectInput) GetId() uuid.UUID { return v.Id }

// __dockerInfoInput is used internally by genqlient
type __dockerInfoInput struct {
	Image string `json:"image"`
}

// GetImage returns __dockerInfoInput.Image, and is useful for accessing the field via an interface.
func (v *__dockerInfoInput) GetImage() string { return v.Image }

// __dockerRepositoryPortsInput is used internally by genqlient
type __dockerRepositoryPortsInput struct {
	Image string `json:"image"`
}

// GetImage returns __dockerRepositoryPortsInput.Image, and is useful for accessing the field via an interface.
func (v *__dockerRepositoryPortsInput) GetImage() string { return v.Image }

// __duplicateBlueprintInput is used internally by genqlient
type __duplicateBlueprintInput struct {
	Input DuplicateBlueprintInput `json:"input"`
}

// GetInput returns __duplicateBlueprintInput.Input, and is useful for accessing the field via an interface.
func (v *__duplicateBlueprintInput) GetInput() DuplicateBlueprintInput { return v.Input }

// __duplicateProjectV3Input is used internally by genqlient
type __duplicateProjectV3Input struct {
	Input DuplicateProjectV3Input `json:"input"`
}

// GetInput returns __duplicateProjectV3Input.Input, and is useful for accessing the field via an interface.
func (v *__duplicateProjectV3Input) GetInput() DuplicateProjectV3Input { return v.Input }

// __enableProjectInput is used internally by genqlient
type __enableProjectInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __enableProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__enableProjectInput) GetId() uuid.UUID { return v.Id }

// __ensureCloudqueryEnabledInput is used internally by genqlient
type __ensureCloudqueryEnabledInput struct {
	AwsAccountId uuid.UUID `json:"awsAccountId"`
}

// GetAwsAccountId returns __ensureCloudqueryEnabledInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *__ensureCloudqueryEnabledInput) GetAwsAccountId() uuid.UUID { return v.AwsAccountId }

// __environmentEnvironmentVariablesInput is used internally by genqlient
type __environmentEnvironmentVariablesInput struct {
	Path string `json:"path"`
	Env  string `json:"env"`
}

// GetPath returns __environmentEnvironmentVariablesInput.Path, and is useful for accessing the field via an interface.
func (v *__environmentEnvironmentVariablesInput) GetPath() string { return v.Path }

// GetEnv returns __environmentEnvironmentVariablesInput.Env, and is useful for accessing the field via an interface.
func (v *__environmentEnvironmentVariablesInput) GetEnv() string { return v.Env }

// __freeQuotaInput is used internally by genqlient
type __freeQuotaInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __freeQuotaInput.Id, and is useful for accessing the field via an interface.
func (v *__freeQuotaInput) GetId() uuid.UUID { return v.Id }

// __freeTierEligibleInput is used internally by genqlient
type __freeTierEligibleInput struct {
	Input CheckPriceInput `json:"input"`
}

// GetInput returns __freeTierEligibleInput.Input, and is useful for accessing the field via an interface.
func (v *__freeTierEligibleInput) GetInput() CheckPriceInput { return v.Input }

// __generateDownloadableLogLinkInput is used internally by genqlient
type __generateDownloadableLogLinkInput struct {
	DeploymentID uuid.UUID `json:"deploymentID"`
}

// GetDeploymentID returns __generateDownloadableLogLinkInput.DeploymentID, and is useful for accessing the field via an interface.
func (v *__generateDownloadableLogLinkInput) GetDeploymentID() uuid.UUID { return v.DeploymentID }

// __getPriceTotalInput is used internally by genqlient
type __getPriceTotalInput struct {
	Input CheckPriceInput `json:"input"`
}

// GetInput returns __getPriceTotalInput.Input, and is useful for accessing the field via an interface.
func (v *__getPriceTotalInput) GetInput() CheckPriceInput { return v.Input }

// __githubRepoPortInput is used internally by genqlient
type __githubRepoPortInput struct {
	InstallationId uuid.UUID `json:"installationId"`
	Owner          string    `json:"owner"`
	Repo           string    `json:"repo"`
}

// GetInstallationId returns __githubRepoPortInput.InstallationId, and is useful for accessing the field via an interface.
func (v *__githubRepoPortInput) GetInstallationId() uuid.UUID { return v.InstallationId }

// GetOwner returns __githubRepoPortInput.Owner, and is useful for accessing the field via an interface.
func (v *__githubRepoPortInput) GetOwner() string { return v.Owner }

// GetRepo returns __githubRepoPortInput.Repo, and is useful for accessing the field via an interface.
func (v *__githubRepoPortInput) GetRepo() string { return v.Repo }

// __helmChartInput is used internally by genqlient
type __helmChartInput struct {
	Url  string `json:"url"`
	Name string `json:"name"`
}

// GetUrl returns __helmChartInput.Url, and is useful for accessing the field via an interface.
func (v *__helmChartInput) GetUrl() string { return v.Url }

// GetName returns __helmChartInput.Name, and is useful for accessing the field via an interface.
func (v *__helmChartInput) GetName() string { return v.Name }

// __inviteTeamMemberInput is used internally by genqlient
type __inviteTeamMemberInput struct {
	Input InviteTeamMemberInput `json:"input"`
}

// GetInput returns __inviteTeamMemberInput.Input, and is useful for accessing the field via an interface.
func (v *__inviteTeamMemberInput) GetInput() InviteTeamMemberInput { return v.Input }

// __lambdaCloudRunBlueprintsInput is used internally by genqlient
type __lambdaCloudRunBlueprintsInput struct {
	Owner                 string `json:"owner"`
	LambdaBlueprintSlug   string `json:"lambdaBlueprintSlug"`
	CloudRunBlueprintSlug string `json:"cloudRunBlueprintSlug"`
}

// GetOwner returns __lambdaCloudRunBlueprintsInput.Owner, and is useful for accessing the field via an interface.
func (v *__lambdaCloudRunBlueprintsInput) GetOwner() string { return v.Owner }

// GetLambdaBlueprintSlug returns __lambdaCloudRunBlueprintsInput.LambdaBlueprintSlug, and is useful for accessing the field via an interface.
func (v *__lambdaCloudRunBlueprintsInput) GetLambdaBlueprintSlug() string {
	return v.LambdaBlueprintSlug
}

// GetCloudRunBlueprintSlug returns __lambdaCloudRunBlueprintsInput.CloudRunBlueprintSlug, and is useful for accessing the field via an interface.
func (v *__lambdaCloudRunBlueprintsInput) GetCloudRunBlueprintSlug() string {
	return v.CloudRunBlueprintSlug
}

// __linkDatabaseInput is used internally by genqlient
type __linkDatabaseInput struct {
	Input LinkDatabaseInput `json:"input"`
}

// GetInput returns __linkDatabaseInput.Input, and is useful for accessing the field via an interface.
func (v *__linkDatabaseInput) GetInput() LinkDatabaseInput { return v.Input }

// __loggedOutDockerInfoInput is used internally by genqlient
type __loggedOutDockerInfoInput struct {
	Image string `json:"image"`
}

// GetImage returns __loggedOutDockerInfoInput.Image, and is useful for accessing the field via an interface.
func (v *__loggedOutDockerInfoInput) GetImage() string { return v.Image }

// __marketplaceBlueprintInput is used internally by genqlient
type __marketplaceBlueprintInput struct {
	Owner string `json:"owner"`
	Slug  string `json:"slug"`
}

// GetOwner returns __marketplaceBlueprintInput.Owner, and is useful for accessing the field via an interface.
func (v *__marketplaceBlueprintInput) GetOwner() string { return v.Owner }

// GetSlug returns __marketplaceBlueprintInput.Slug, and is useful for accessing the field via an interface.
func (v *__marketplaceBlueprintInput) GetSlug() string { return v.Slug }

// __marketplaceBlueprintMetadataInput is used internally by genqlient
type __marketplaceBlueprintMetadataInput struct {
	Owner   *string `json:"owner"`
	Slug    string  `json:"slug"`
	Version *string `json:"version"`
}

// GetOwner returns __marketplaceBlueprintMetadataInput.Owner, and is useful for accessing the field via an interface.
func (v *__marketplaceBlueprintMetadataInput) GetOwner() *string { return v.Owner }

// GetSlug returns __marketplaceBlueprintMetadataInput.Slug, and is useful for accessing the field via an interface.
func (v *__marketplaceBlueprintMetadataInput) GetSlug() string { return v.Slug }

// GetVersion returns __marketplaceBlueprintMetadataInput.Version, and is useful for accessing the field via an interface.
func (v *__marketplaceBlueprintMetadataInput) GetVersion() *string { return v.Version }

// __marketplaceBlueprintMetadataListInput is used internally by genqlient
type __marketplaceBlueprintMetadataListInput struct {
	FilterInput FilterInput `json:"filterInput"`
}

// GetFilterInput returns __marketplaceBlueprintMetadataListInput.FilterInput, and is useful for accessing the field via an interface.
func (v *__marketplaceBlueprintMetadataListInput) GetFilterInput() FilterInput { return v.FilterInput }

// __marketplaceBlueprintsInput is used internally by genqlient
type __marketplaceBlueprintsInput struct {
	PageInput PageInput `json:"pageInput"`
}

// GetPageInput returns __marketplaceBlueprintsInput.PageInput, and is useful for accessing the field via an interface.
func (v *__marketplaceBlueprintsInput) GetPageInput() PageInput { return v.PageInput }

// __maybeCreateBlueprintFromMetadataInput is used internally by genqlient
type __maybeCreateBlueprintFromMetadataInput struct {
	Slug    string `json:"slug"`
	Version string `json:"version"`
}

// GetSlug returns __maybeCreateBlueprintFromMetadataInput.Slug, and is useful for accessing the field via an interface.
func (v *__maybeCreateBlueprintFromMetadataInput) GetSlug() string { return v.Slug }

// GetVersion returns __maybeCreateBlueprintFromMetadataInput.Version, and is useful for accessing the field via an interface.
func (v *__maybeCreateBlueprintFromMetadataInput) GetVersion() string { return v.Version }

// __monthlyCostForServicesInput is used internally by genqlient
type __monthlyCostForServicesInput struct {
	AwsAccountId uuid.UUID `json:"awsAccountId"`
	Services     []string  `json:"services"`
}

// GetAwsAccountId returns __monthlyCostForServicesInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *__monthlyCostForServicesInput) GetAwsAccountId() uuid.UUID { return v.AwsAccountId }

// GetServices returns __monthlyCostForServicesInput.Services, and is useful for accessing the field via an interface.
func (v *__monthlyCostForServicesInput) GetServices() []string { return v.Services }

// __moveRepoInput is used internally by genqlient
type __moveRepoInput struct {
	Input MoveRepoInput `json:"input"`
}

// GetInput returns __moveRepoInput.Input, and is useful for accessing the field via an interface.
func (v *__moveRepoInput) GetInput() MoveRepoInput { return v.Input }

// __moveRepoTargetsInput is used internally by genqlient
type __moveRepoTargetsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __moveRepoTargetsInput.Id, and is useful for accessing the field via an interface.
func (v *__moveRepoTargetsInput) GetId() uuid.UUID { return v.Id }

// __paginatedRepoDeploymentsForProjectEnvironmentInput is used internally by genqlient
type __paginatedRepoDeploymentsForProjectEnvironmentInput struct {
	Path         string              `json:"path"`
	Environment  string              `json:"environment"`
	Filter       string              `json:"filter"`
	First        int                 `json:"first"`
	After        string              `json:"after"`
	Sort         *string             `json:"sort"`
	StatusFilter []*DeploymentStatus `json:"statusFilter"`
}

// GetPath returns __paginatedRepoDeploymentsForProjectEnvironmentInput.Path, and is useful for accessing the field via an interface.
func (v *__paginatedRepoDeploymentsForProjectEnvironmentInput) GetPath() string { return v.Path }

// GetEnvironment returns __paginatedRepoDeploymentsForProjectEnvironmentInput.Environment, and is useful for accessing the field via an interface.
func (v *__paginatedRepoDeploymentsForProjectEnvironmentInput) GetEnvironment() string {
	return v.Environment
}

// GetFilter returns __paginatedRepoDeploymentsForProjectEnvironmentInput.Filter, and is useful for accessing the field via an interface.
func (v *__paginatedRepoDeploymentsForProjectEnvironmentInput) GetFilter() string { return v.Filter }

// GetFirst returns __paginatedRepoDeploymentsForProjectEnvironmentInput.First, and is useful for accessing the field via an interface.
func (v *__paginatedRepoDeploymentsForProjectEnvironmentInput) GetFirst() int { return v.First }

// GetAfter returns __paginatedRepoDeploymentsForProjectEnvironmentInput.After, and is useful for accessing the field via an interface.
func (v *__paginatedRepoDeploymentsForProjectEnvironmentInput) GetAfter() string { return v.After }

// GetSort returns __paginatedRepoDeploymentsForProjectEnvironmentInput.Sort, and is useful for accessing the field via an interface.
func (v *__paginatedRepoDeploymentsForProjectEnvironmentInput) GetSort() *string { return v.Sort }

// GetStatusFilter returns __paginatedRepoDeploymentsForProjectEnvironmentInput.StatusFilter, and is useful for accessing the field via an interface.
func (v *__paginatedRepoDeploymentsForProjectEnvironmentInput) GetStatusFilter() []*DeploymentStatus {
	return v.StatusFilter
}

// __paginatedReposForProjectEnvironmentInput is used internally by genqlient
type __paginatedReposForProjectEnvironmentInput struct {
	Path         string              `json:"path"`
	Environment  string              `json:"environment"`
	Filter       string              `json:"filter"`
	First        int                 `json:"first"`
	After        string              `json:"after"`
	Sort         *string             `json:"sort"`
	StatusFilter []*DeploymentStatus `json:"statusFilter"`
}

// GetPath returns __paginatedReposForProjectEnvironmentInput.Path, and is useful for accessing the field via an interface.
func (v *__paginatedReposForProjectEnvironmentInput) GetPath() string { return v.Path }

// GetEnvironment returns __paginatedReposForProjectEnvironmentInput.Environment, and is useful for accessing the field via an interface.
func (v *__paginatedReposForProjectEnvironmentInput) GetEnvironment() string { return v.Environment }

// GetFilter returns __paginatedReposForProjectEnvironmentInput.Filter, and is useful for accessing the field via an interface.
func (v *__paginatedReposForProjectEnvironmentInput) GetFilter() string { return v.Filter }

// GetFirst returns __paginatedReposForProjectEnvironmentInput.First, and is useful for accessing the field via an interface.
func (v *__paginatedReposForProjectEnvironmentInput) GetFirst() int { return v.First }

// GetAfter returns __paginatedReposForProjectEnvironmentInput.After, and is useful for accessing the field via an interface.
func (v *__paginatedReposForProjectEnvironmentInput) GetAfter() string { return v.After }

// GetSort returns __paginatedReposForProjectEnvironmentInput.Sort, and is useful for accessing the field via an interface.
func (v *__paginatedReposForProjectEnvironmentInput) GetSort() *string { return v.Sort }

// GetStatusFilter returns __paginatedReposForProjectEnvironmentInput.StatusFilter, and is useful for accessing the field via an interface.
func (v *__paginatedReposForProjectEnvironmentInput) GetStatusFilter() []*DeploymentStatus {
	return v.StatusFilter
}

// __previewSubscriptionInput is used internally by genqlient
type __previewSubscriptionInput struct {
	ForUserID        uuid.UUID        `json:"forUserID"`
	SubscriptionCart SubscriptionCart `json:"subscriptionCart"`
}

// GetForUserID returns __previewSubscriptionInput.ForUserID, and is useful for accessing the field via an interface.
func (v *__previewSubscriptionInput) GetForUserID() uuid.UUID { return v.ForUserID }

// GetSubscriptionCart returns __previewSubscriptionInput.SubscriptionCart, and is useful for accessing the field via an interface.
func (v *__previewSubscriptionInput) GetSubscriptionCart() SubscriptionCart {
	return v.SubscriptionCart
}

// __projectActiveBranchesCountInput is used internally by genqlient
type __projectActiveBranchesCountInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __projectActiveBranchesCountInput.Id, and is useful for accessing the field via an interface.
func (v *__projectActiveBranchesCountInput) GetId() uuid.UUID { return v.Id }

// __projectBranchesInput is used internally by genqlient
type __projectBranchesInput struct {
	Id     uuid.UUID `json:"id"`
	Active *bool     `json:"active"`
}

// GetId returns __projectBranchesInput.Id, and is useful for accessing the field via an interface.
func (v *__projectBranchesInput) GetId() uuid.UUID { return v.Id }

// GetActive returns __projectBranchesInput.Active, and is useful for accessing the field via an interface.
func (v *__projectBranchesInput) GetActive() *bool { return v.Active }

// __projectByIdInput is used internally by genqlient
type __projectByIdInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __projectByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__projectByIdInput) GetId() uuid.UUID { return v.Id }

// __projectCountInput is used internally by genqlient
type __projectCountInput struct {
	UserId      uuid.UUID   `json:"userId"`
	FilterInput FilterInput `json:"filterInput"`
}

// GetUserId returns __projectCountInput.UserId, and is useful for accessing the field via an interface.
func (v *__projectCountInput) GetUserId() uuid.UUID { return v.UserId }

// GetFilterInput returns __projectCountInput.FilterInput, and is useful for accessing the field via an interface.
func (v *__projectCountInput) GetFilterInput() FilterInput { return v.FilterInput }

// __projectEnvironmentByIdInput is used internally by genqlient
type __projectEnvironmentByIdInput struct {
	ProjectId uuid.UUID `json:"projectId"`
	EnvId     uuid.UUID `json:"envId"`
}

// GetProjectId returns __projectEnvironmentByIdInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectEnvironmentByIdInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetEnvId returns __projectEnvironmentByIdInput.EnvId, and is useful for accessing the field via an interface.
func (v *__projectEnvironmentByIdInput) GetEnvId() uuid.UUID { return v.EnvId }

// __projectEnvironmentInput is used internally by genqlient
type __projectEnvironmentInput struct {
	Path string `json:"path"`
	Env  string `json:"env"`
}

// GetPath returns __projectEnvironmentInput.Path, and is useful for accessing the field via an interface.
func (v *__projectEnvironmentInput) GetPath() string { return v.Path }

// GetEnv returns __projectEnvironmentInput.Env, and is useful for accessing the field via an interface.
func (v *__projectEnvironmentInput) GetEnv() string { return v.Env }

// __projectEnvironmentVariablesInput is used internally by genqlient
type __projectEnvironmentVariablesInput struct {
	Path string `json:"path"`
}

// GetPath returns __projectEnvironmentVariablesInput.Path, and is useful for accessing the field via an interface.
func (v *__projectEnvironmentVariablesInput) GetPath() string { return v.Path }

// __projectEnvironmentsAndRepoCountInput is used internally by genqlient
type __projectEnvironmentsAndRepoCountInput struct {
	Path string `json:"path"`
}

// GetPath returns __projectEnvironmentsAndRepoCountInput.Path, and is useful for accessing the field via an interface.
func (v *__projectEnvironmentsAndRepoCountInput) GetPath() string { return v.Path }

// __projectEnvironmentsBasicInput is used internally by genqlient
type __projectEnvironmentsBasicInput struct {
	Path string `json:"path"`
}

// GetPath returns __projectEnvironmentsBasicInput.Path, and is useful for accessing the field via an interface.
func (v *__projectEnvironmentsBasicInput) GetPath() string { return v.Path }

// __projectEnvironmentsByIdInput is used internally by genqlient
type __projectEnvironmentsByIdInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __projectEnvironmentsByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__projectEnvironmentsByIdInput) GetId() uuid.UUID { return v.Id }

// __projectEnvironmentsInput is used internally by genqlient
type __projectEnvironmentsInput struct {
	Path string `json:"path"`
}

// GetPath returns __projectEnvironmentsInput.Path, and is useful for accessing the field via an interface.
func (v *__projectEnvironmentsInput) GetPath() string { return v.Path }

// __projectHelmChartInput is used internally by genqlient
type __projectHelmChartInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __projectHelmChartInput.Id, and is useful for accessing the field via an interface.
func (v *__projectHelmChartInput) GetId() uuid.UUID { return v.Id }

// __projectInput is used internally by genqlient
type __projectInput struct {
	Path string `json:"path"`
}

// GetPath returns __projectInput.Path, and is useful for accessing the field via an interface.
func (v *__projectInput) GetPath() string { return v.Path }

// __projectJobInput is used internally by genqlient
type __projectJobInput struct {
	RepoID uuid.UUID `json:"repoID"`
	JobID  uuid.UUID `json:"jobID"`
}

// GetRepoID returns __projectJobInput.RepoID, and is useful for accessing the field via an interface.
func (v *__projectJobInput) GetRepoID() uuid.UUID { return v.RepoID }

// GetJobID returns __projectJobInput.JobID, and is useful for accessing the field via an interface.
func (v *__projectJobInput) GetJobID() uuid.UUID { return v.JobID }

// __projectJobsInput is used internally by genqlient
type __projectJobsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __projectJobsInput.Id, and is useful for accessing the field via an interface.
func (v *__projectJobsInput) GetId() uuid.UUID { return v.Id }

// __projectV3Input is used internally by genqlient
type __projectV3Input struct {
	UserId          uuid.UUID `json:"userId"`
	ProjectName     string    `json:"projectName"`
	EnvironmentName string    `json:"environmentName"`
	Name            string    `json:"name"`
}

// GetUserId returns __projectV3Input.UserId, and is useful for accessing the field via an interface.
func (v *__projectV3Input) GetUserId() uuid.UUID { return v.UserId }

// GetProjectName returns __projectV3Input.ProjectName, and is useful for accessing the field via an interface.
func (v *__projectV3Input) GetProjectName() string { return v.ProjectName }

// GetEnvironmentName returns __projectV3Input.EnvironmentName, and is useful for accessing the field via an interface.
func (v *__projectV3Input) GetEnvironmentName() string { return v.EnvironmentName }

// GetName returns __projectV3Input.Name, and is useful for accessing the field via an interface.
func (v *__projectV3Input) GetName() string { return v.Name }

// __projectV3sForEnvironmentInput is used internally by genqlient
type __projectV3sForEnvironmentInput struct {
	UserId       uuid.UUID `json:"userId"`
	GroupName    string    `json:"groupName"`
	SubgroupName string    `json:"subgroupName"`
	Page         PageInput `json:"page"`
	ProjectName  string    `json:"projectName"`
}

// GetUserId returns __projectV3sForEnvironmentInput.UserId, and is useful for accessing the field via an interface.
func (v *__projectV3sForEnvironmentInput) GetUserId() uuid.UUID { return v.UserId }

// GetGroupName returns __projectV3sForEnvironmentInput.GroupName, and is useful for accessing the field via an interface.
func (v *__projectV3sForEnvironmentInput) GetGroupName() string { return v.GroupName }

// GetSubgroupName returns __projectV3sForEnvironmentInput.SubgroupName, and is useful for accessing the field via an interface.
func (v *__projectV3sForEnvironmentInput) GetSubgroupName() string { return v.SubgroupName }

// GetPage returns __projectV3sForEnvironmentInput.Page, and is useful for accessing the field via an interface.
func (v *__projectV3sForEnvironmentInput) GetPage() PageInput { return v.Page }

// GetProjectName returns __projectV3sForEnvironmentInput.ProjectName, and is useful for accessing the field via an interface.
func (v *__projectV3sForEnvironmentInput) GetProjectName() string { return v.ProjectName }

// __projectV3sForEnvironmentProductionDeploymentsInput is used internally by genqlient
type __projectV3sForEnvironmentProductionDeploymentsInput struct {
	UserId       uuid.UUID `json:"userId"`
	GroupName    string    `json:"groupName"`
	SubgroupName string    `json:"subgroupName"`
	Page         PageInput `json:"page"`
	ProjectName  string    `json:"projectName"`
}

// GetUserId returns __projectV3sForEnvironmentProductionDeploymentsInput.UserId, and is useful for accessing the field via an interface.
func (v *__projectV3sForEnvironmentProductionDeploymentsInput) GetUserId() uuid.UUID { return v.UserId }

// GetGroupName returns __projectV3sForEnvironmentProductionDeploymentsInput.GroupName, and is useful for accessing the field via an interface.
func (v *__projectV3sForEnvironmentProductionDeploymentsInput) GetGroupName() string {
	return v.GroupName
}

// GetSubgroupName returns __projectV3sForEnvironmentProductionDeploymentsInput.SubgroupName, and is useful for accessing the field via an interface.
func (v *__projectV3sForEnvironmentProductionDeploymentsInput) GetSubgroupName() string {
	return v.SubgroupName
}

// GetPage returns __projectV3sForEnvironmentProductionDeploymentsInput.Page, and is useful for accessing the field via an interface.
func (v *__projectV3sForEnvironmentProductionDeploymentsInput) GetPage() PageInput { return v.Page }

// GetProjectName returns __projectV3sForEnvironmentProductionDeploymentsInput.ProjectName, and is useful for accessing the field via an interface.
func (v *__projectV3sForEnvironmentProductionDeploymentsInput) GetProjectName() string {
	return v.ProjectName
}

// __projectsInput is used internally by genqlient
type __projectsInput struct {
	UserId      uuid.UUID   `json:"userId"`
	FilterInput FilterInput `json:"filterInput"`
}

// GetUserId returns __projectsInput.UserId, and is useful for accessing the field via an interface.
func (v *__projectsInput) GetUserId() uuid.UUID { return v.UserId }

// GetFilterInput returns __projectsInput.FilterInput, and is useful for accessing the field via an interface.
func (v *__projectsInput) GetFilterInput() FilterInput { return v.FilterInput }

// __projectsWithRepoInput is used internally by genqlient
type __projectsWithRepoInput struct {
	UserId      uuid.UUID   `json:"userId"`
	FilterInput FilterInput `json:"filterInput"`
}

// GetUserId returns __projectsWithRepoInput.UserId, and is useful for accessing the field via an interface.
func (v *__projectsWithRepoInput) GetUserId() uuid.UUID { return v.UserId }

// GetFilterInput returns __projectsWithRepoInput.FilterInput, and is useful for accessing the field via an interface.
func (v *__projectsWithRepoInput) GetFilterInput() FilterInput { return v.FilterInput }

// __purchaseSubscriptionInput is used internally by genqlient
type __purchaseSubscriptionInput struct {
	ForUserID        uuid.UUID        `json:"forUserID"`
	SubscriptionCart SubscriptionCart `json:"subscriptionCart"`
}

// GetForUserID returns __purchaseSubscriptionInput.ForUserID, and is useful for accessing the field via an interface.
func (v *__purchaseSubscriptionInput) GetForUserID() uuid.UUID { return v.ForUserID }

// GetSubscriptionCart returns __purchaseSubscriptionInput.SubscriptionCart, and is useful for accessing the field via an interface.
func (v *__purchaseSubscriptionInput) GetSubscriptionCart() SubscriptionCart {
	return v.SubscriptionCart
}

// __reissueCertInput is used internally by genqlient
type __reissueCertInput struct {
	Input ReissueCustomDomainCertificateInput `json:"input"`
}

// GetInput returns __reissueCertInput.Input, and is useful for accessing the field via an interface.
func (v *__reissueCertInput) GetInput() ReissueCustomDomainCertificateInput { return v.Input }

// __removeAWSAccountInput is used internally by genqlient
type __removeAWSAccountInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __removeAWSAccountInput.Id, and is useful for accessing the field via an interface.
func (v *__removeAWSAccountInput) GetId() uuid.UUID { return v.Id }

// __removeAzureAccountInput is used internally by genqlient
type __removeAzureAccountInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __removeAzureAccountInput.Id, and is useful for accessing the field via an interface.
func (v *__removeAzureAccountInput) GetId() uuid.UUID { return v.Id }

// __removeCDNInput is used internally by genqlient
type __removeCDNInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __removeCDNInput.Id, and is useful for accessing the field via an interface.
func (v *__removeCDNInput) GetId() uuid.UUID { return v.Id }

// __removeContainerRegistryInput is used internally by genqlient
type __removeContainerRegistryInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __removeContainerRegistryInput.Id, and is useful for accessing the field via an interface.
func (v *__removeContainerRegistryInput) GetId() uuid.UUID { return v.Id }

// __removeCoreWeaveAccountInput is used internally by genqlient
type __removeCoreWeaveAccountInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __removeCoreWeaveAccountInput.Id, and is useful for accessing the field via an interface.
func (v *__removeCoreWeaveAccountInput) GetId() uuid.UUID { return v.Id }

// __removeDOAccountInput is used internally by genqlient
type __removeDOAccountInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __removeDOAccountInput.Id, and is useful for accessing the field via an interface.
func (v *__removeDOAccountInput) GetId() uuid.UUID { return v.Id }

// __removeGCPAccountInput is used internally by genqlient
type __removeGCPAccountInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __removeGCPAccountInput.Id, and is useful for accessing the field via an interface.
func (v *__removeGCPAccountInput) GetId() uuid.UUID { return v.Id }

// __removeLinodeAccountInput is used internally by genqlient
type __removeLinodeAccountInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __removeLinodeAccountInput.Id, and is useful for accessing the field via an interface.
func (v *__removeLinodeAccountInput) GetId() uuid.UUID { return v.Id }

// __removeProbeInput is used internally by genqlient
type __removeProbeInput struct {
	Input RemoveProbeInput `json:"input"`
}

// GetInput returns __removeProbeInput.Input, and is useful for accessing the field via an interface.
func (v *__removeProbeInput) GetInput() RemoveProbeInput { return v.Input }

// __removeProjectCollaboratorInput is used internally by genqlient
type __removeProjectCollaboratorInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __removeProjectCollaboratorInput.Id, and is useful for accessing the field via an interface.
func (v *__removeProjectCollaboratorInput) GetId() uuid.UUID { return v.Id }

// __removeProjectLogShipperInput is used internally by genqlient
type __removeProjectLogShipperInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __removeProjectLogShipperInput.Id, and is useful for accessing the field via an interface.
func (v *__removeProjectLogShipperInput) GetId() uuid.UUID { return v.Id }

// __removeRepoCustomDomainInput is used internally by genqlient
type __removeRepoCustomDomainInput struct {
	Input RemoveRepoCustomDomainInput `json:"input"`
}

// GetInput returns __removeRepoCustomDomainInput.Input, and is useful for accessing the field via an interface.
func (v *__removeRepoCustomDomainInput) GetInput() RemoveRepoCustomDomainInput { return v.Input }

// __removeTeamMemberInput is used internally by genqlient
type __removeTeamMemberInput struct {
	Input RemoveTeamMemberInput `json:"input"`
}

// GetInput returns __removeTeamMemberInput.Input, and is useful for accessing the field via an interface.
func (v *__removeTeamMemberInput) GetInput() RemoveTeamMemberInput { return v.Input }

// __removeVultrAccountInput is used internally by genqlient
type __removeVultrAccountInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __removeVultrAccountInput.Id, and is useful for accessing the field via an interface.
func (v *__removeVultrAccountInput) GetId() uuid.UUID { return v.Id }

// __repoBuildSuggestionInput is used internally by genqlient
type __repoBuildSuggestionInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __repoBuildSuggestionInput.Id, and is useful for accessing the field via an interface.
func (v *__repoBuildSuggestionInput) GetId() uuid.UUID { return v.Id }

// __repoCustomizationInput is used internally by genqlient
type __repoCustomizationInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __repoCustomizationInput.Id, and is useful for accessing the field via an interface.
func (v *__repoCustomizationInput) GetId() uuid.UUID { return v.Id }

// __repoDeployRevisionsInput is used internally by genqlient
type __repoDeployRevisionsInput struct {
	RepoId uuid.UUID `json:"repoId"`
}

// GetRepoId returns __repoDeployRevisionsInput.RepoId, and is useful for accessing the field via an interface.
func (v *__repoDeployRevisionsInput) GetRepoId() uuid.UUID { return v.RepoId }

// __repoForProjectEnvironmentInput is used internally by genqlient
type __repoForProjectEnvironmentInput struct {
	Path        string `json:"path"`
	Environment string `json:"environment"`
	Repo        string `json:"repo"`
}

// GetPath returns __repoForProjectEnvironmentInput.Path, and is useful for accessing the field via an interface.
func (v *__repoForProjectEnvironmentInput) GetPath() string { return v.Path }

// GetEnvironment returns __repoForProjectEnvironmentInput.Environment, and is useful for accessing the field via an interface.
func (v *__repoForProjectEnvironmentInput) GetEnvironment() string { return v.Environment }

// GetRepo returns __repoForProjectEnvironmentInput.Repo, and is useful for accessing the field via an interface.
func (v *__repoForProjectEnvironmentInput) GetRepo() string { return v.Repo }

// __repoForProjectInput is used internally by genqlient
type __repoForProjectInput struct {
	Path string `json:"path"`
	Repo string `json:"repo"`
}

// GetPath returns __repoForProjectInput.Path, and is useful for accessing the field via an interface.
func (v *__repoForProjectInput) GetPath() string { return v.Path }

// GetRepo returns __repoForProjectInput.Repo, and is useful for accessing the field via an interface.
func (v *__repoForProjectInput) GetRepo() string { return v.Repo }

// __repoNetworkInput is used internally by genqlient
type __repoNetworkInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __repoNetworkInput.Id, and is useful for accessing the field via an interface.
func (v *__repoNetworkInput) GetId() uuid.UUID { return v.Id }

// __repoPrometheusInput is used internally by genqlient
type __repoPrometheusInput struct {
	UserID    uuid.UUID `json:"userID"`
	ClusterID uuid.UUID `json:"clusterID"`
	RepoID    uuid.UUID `json:"repoID"`
}

// GetUserID returns __repoPrometheusInput.UserID, and is useful for accessing the field via an interface.
func (v *__repoPrometheusInput) GetUserID() uuid.UUID { return v.UserID }

// GetClusterID returns __repoPrometheusInput.ClusterID, and is useful for accessing the field via an interface.
func (v *__repoPrometheusInput) GetClusterID() uuid.UUID { return v.ClusterID }

// GetRepoID returns __repoPrometheusInput.RepoID, and is useful for accessing the field via an interface.
func (v *__repoPrometheusInput) GetRepoID() uuid.UUID { return v.RepoID }

// __repoRenderIngressSpecPatchInput is used internally by genqlient
type __repoRenderIngressSpecPatchInput struct {
	Id    uuid.UUID `json:"id"`
	Patch *string   `json:"patch"`
}

// GetId returns __repoRenderIngressSpecPatchInput.Id, and is useful for accessing the field via an interface.
func (v *__repoRenderIngressSpecPatchInput) GetId() uuid.UUID { return v.Id }

// GetPatch returns __repoRenderIngressSpecPatchInput.Patch, and is useful for accessing the field via an interface.
func (v *__repoRenderIngressSpecPatchInput) GetPatch() *string { return v.Patch }

// __repoRenderPodSpecPatchInput is used internally by genqlient
type __repoRenderPodSpecPatchInput struct {
	Id    uuid.UUID `json:"id"`
	Patch *string   `json:"patch"`
}

// GetId returns __repoRenderPodSpecPatchInput.Id, and is useful for accessing the field via an interface.
func (v *__repoRenderPodSpecPatchInput) GetId() uuid.UUID { return v.Id }

// GetPatch returns __repoRenderPodSpecPatchInput.Patch, and is useful for accessing the field via an interface.
func (v *__repoRenderPodSpecPatchInput) GetPatch() *string { return v.Patch }

// __reposForProjectEnvironmentBasicInput is used internally by genqlient
type __reposForProjectEnvironmentBasicInput struct {
	Path        string `json:"path"`
	Environment string `json:"environment"`
}

// GetPath returns __reposForProjectEnvironmentBasicInput.Path, and is useful for accessing the field via an interface.
func (v *__reposForProjectEnvironmentBasicInput) GetPath() string { return v.Path }

// GetEnvironment returns __reposForProjectEnvironmentBasicInput.Environment, and is useful for accessing the field via an interface.
func (v *__reposForProjectEnvironmentBasicInput) GetEnvironment() string { return v.Environment }

// __reposForProjectEnvironmentInput is used internally by genqlient
type __reposForProjectEnvironmentInput struct {
	Path        string `json:"path"`
	Environment string `json:"environment"`
}

// GetPath returns __reposForProjectEnvironmentInput.Path, and is useful for accessing the field via an interface.
func (v *__reposForProjectEnvironmentInput) GetPath() string { return v.Path }

// GetEnvironment returns __reposForProjectEnvironmentInput.Environment, and is useful for accessing the field via an interface.
func (v *__reposForProjectEnvironmentInput) GetEnvironment() string { return v.Environment }

// __reposForProjectInput is used internally by genqlient
type __reposForProjectInput struct {
	Project string `json:"project"`
}

// GetProject returns __reposForProjectInput.Project, and is useful for accessing the field via an interface.
func (v *__reposForProjectInput) GetProject() string { return v.Project }

// __resendTeamMemberInvitationInput is used internally by genqlient
type __resendTeamMemberInvitationInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __resendTeamMemberInvitationInput.Id, and is useful for accessing the field via an interface.
func (v *__resendTeamMemberInvitationInput) GetId() uuid.UUID { return v.Id }

// __rollbackToDeploymentInput is used internally by genqlient
type __rollbackToDeploymentInput struct {
	ProjectID    uuid.UUID `json:"projectID"`
	DeploymentID uuid.UUID `json:"deploymentID"`
}

// GetProjectID returns __rollbackToDeploymentInput.ProjectID, and is useful for accessing the field via an interface.
func (v *__rollbackToDeploymentInput) GetProjectID() uuid.UUID { return v.ProjectID }

// GetDeploymentID returns __rollbackToDeploymentInput.DeploymentID, and is useful for accessing the field via an interface.
func (v *__rollbackToDeploymentInput) GetDeploymentID() uuid.UUID { return v.DeploymentID }

// __runJobInput is used internally by genqlient
type __runJobInput struct {
	Input RunJobInput `json:"input"`
}

// GetInput returns __runJobInput.Input, and is useful for accessing the field via an interface.
func (v *__runJobInput) GetInput() RunJobInput { return v.Input }

// __searchHelmChartsInput is used internally by genqlient
type __searchHelmChartsInput struct {
	Input SearchHelmChartsInput `json:"input"`
}

// GetInput returns __searchHelmChartsInput.Input, and is useful for accessing the field via an interface.
func (v *__searchHelmChartsInput) GetInput() SearchHelmChartsInput { return v.Input }

// __setPaymentMethodInput is used internally by genqlient
type __setPaymentMethodInput struct {
	PaymentMethod string `json:"paymentMethod"`
}

// GetPaymentMethod returns __setPaymentMethodInput.PaymentMethod, and is useful for accessing the field via an interface.
func (v *__setPaymentMethodInput) GetPaymentMethod() string { return v.PaymentMethod }

// __setRepoEnvsInput is used internally by genqlient
type __setRepoEnvsInput struct {
	Input SetRepoEnvsInput `json:"input"`
}

// GetInput returns __setRepoEnvsInput.Input, and is useful for accessing the field via an interface.
func (v *__setRepoEnvsInput) GetInput() SetRepoEnvsInput { return v.Input }

// __subgroupOverviewInput is used internally by genqlient
type __subgroupOverviewInput struct {
	Path        string `json:"path"`
	Environment string `json:"environment"`
}

// GetPath returns __subgroupOverviewInput.Path, and is useful for accessing the field via an interface.
func (v *__subgroupOverviewInput) GetPath() string { return v.Path }

// GetEnvironment returns __subgroupOverviewInput.Environment, and is useful for accessing the field via an interface.
func (v *__subgroupOverviewInput) GetEnvironment() string { return v.Environment }

// __subscriptionFeatureInput is used internally by genqlient
type __subscriptionFeatureInput struct {
	Id         uuid.UUID  `json:"id"`
	FeatureKey FeatureKey `json:"featureKey"`
}

// GetId returns __subscriptionFeatureInput.Id, and is useful for accessing the field via an interface.
func (v *__subscriptionFeatureInput) GetId() uuid.UUID { return v.Id }

// GetFeatureKey returns __subscriptionFeatureInput.FeatureKey, and is useful for accessing the field via an interface.
func (v *__subscriptionFeatureInput) GetFeatureKey() FeatureKey { return v.FeatureKey }

// __suggestProjectNameInput is used internally by genqlient
type __suggestProjectNameInput struct {
	User  uuid.UUID               `json:"user"`
	Input SuggestProjectNameInput `json:"input"`
}

// GetUser returns __suggestProjectNameInput.User, and is useful for accessing the field via an interface.
func (v *__suggestProjectNameInput) GetUser() uuid.UUID { return v.User }

// GetInput returns __suggestProjectNameInput.Input, and is useful for accessing the field via an interface.
func (v *__suggestProjectNameInput) GetInput() SuggestProjectNameInput { return v.Input }

// __suggestTemplateNameInput is used internally by genqlient
type __suggestTemplateNameInput struct {
	User  uuid.UUID                `json:"user"`
	Input SuggestTemplateNameInput `json:"input"`
}

// GetUser returns __suggestTemplateNameInput.User, and is useful for accessing the field via an interface.
func (v *__suggestTemplateNameInput) GetUser() uuid.UUID { return v.User }

// GetInput returns __suggestTemplateNameInput.Input, and is useful for accessing the field via an interface.
func (v *__suggestTemplateNameInput) GetInput() SuggestTemplateNameInput { return v.Input }

// __teamByNameInput is used internally by genqlient
type __teamByNameInput struct {
	Name string `json:"name"`
}

// GetName returns __teamByNameInput.Name, and is useful for accessing the field via an interface.
func (v *__teamByNameInput) GetName() string { return v.Name }

// __teamCloudInput is used internally by genqlient
type __teamCloudInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __teamCloudInput.Id, and is useful for accessing the field via an interface.
func (v *__teamCloudInput) GetId() uuid.UUID { return v.Id }

// __teamGithubReposInput is used internally by genqlient
type __teamGithubReposInput struct {
	Path string `json:"path"`
}

// GetPath returns __teamGithubReposInput.Path, and is useful for accessing the field via an interface.
func (v *__teamGithubReposInput) GetPath() string { return v.Path }

// __templateInput is used internally by genqlient
type __templateInput struct {
	Id   *uuid.UUID `json:"id"`
	Slug *string    `json:"slug"`
	Url  *string    `json:"url"`
}

// GetId returns __templateInput.Id, and is useful for accessing the field via an interface.
func (v *__templateInput) GetId() *uuid.UUID { return v.Id }

// GetSlug returns __templateInput.Slug, and is useful for accessing the field via an interface.
func (v *__templateInput) GetSlug() *string { return v.Slug }

// GetUrl returns __templateInput.Url, and is useful for accessing the field via an interface.
func (v *__templateInput) GetUrl() *string { return v.Url }

// __transferProjectInput is used internally by genqlient
type __transferProjectInput struct {
	Input TransferProjectInput `json:"input"`
}

// GetInput returns __transferProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__transferProjectInput) GetInput() TransferProjectInput { return v.Input }

// __unlinkClusterInput is used internally by genqlient
type __unlinkClusterInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __unlinkClusterInput.Id, and is useful for accessing the field via an interface.
func (v *__unlinkClusterInput) GetId() uuid.UUID { return v.Id }

// __unlinkDatabaseInput is used internally by genqlient
type __unlinkDatabaseInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __unlinkDatabaseInput.Id, and is useful for accessing the field via an interface.
func (v *__unlinkDatabaseInput) GetId() uuid.UUID { return v.Id }

// __unlinkProjectInput is used internally by genqlient
type __unlinkProjectInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __unlinkProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__unlinkProjectInput) GetId() uuid.UUID { return v.Id }

// __updateAWSAccountInput is used internally by genqlient
type __updateAWSAccountInput struct {
	Input UpdateAWSAccountInput `json:"input"`
}

// GetInput returns __updateAWSAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__updateAWSAccountInput) GetInput() UpdateAWSAccountInput { return v.Input }

// __updateAzureAccountInput is used internally by genqlient
type __updateAzureAccountInput struct {
	Input UpdateAzureAccountInput `json:"input"`
}

// GetInput returns __updateAzureAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__updateAzureAccountInput) GetInput() UpdateAzureAccountInput { return v.Input }

// __updateBitbucketIntegrationInput is used internally by genqlient
type __updateBitbucketIntegrationInput struct {
	Id     uuid.UUID `json:"id"`
	UserId uuid.UUID `json:"userId"`
	Name   string    `json:"name"`
}

// GetId returns __updateBitbucketIntegrationInput.Id, and is useful for accessing the field via an interface.
func (v *__updateBitbucketIntegrationInput) GetId() uuid.UUID { return v.Id }

// GetUserId returns __updateBitbucketIntegrationInput.UserId, and is useful for accessing the field via an interface.
func (v *__updateBitbucketIntegrationInput) GetUserId() uuid.UUID { return v.UserId }

// GetName returns __updateBitbucketIntegrationInput.Name, and is useful for accessing the field via an interface.
func (v *__updateBitbucketIntegrationInput) GetName() string { return v.Name }

// __updateBlueprintInput is used internally by genqlient
type __updateBlueprintInput struct {
	Id    uuid.UUID            `json:"id"`
	Input UpdateBlueprintInput `json:"input"`
}

// GetId returns __updateBlueprintInput.Id, and is useful for accessing the field via an interface.
func (v *__updateBlueprintInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __updateBlueprintInput.Input, and is useful for accessing the field via an interface.
func (v *__updateBlueprintInput) GetInput() UpdateBlueprintInput { return v.Input }

// __updateCDNInput is used internally by genqlient
type __updateCDNInput struct {
	Input UpdateCDNInput `json:"input"`
}

// GetInput returns __updateCDNInput.Input, and is useful for accessing the field via an interface.
func (v *__updateCDNInput) GetInput() UpdateCDNInput { return v.Input }

// __updateCertInput is used internally by genqlient
type __updateCertInput struct {
	Input UpdateRepoCustomDomainInput `json:"input"`
}

// GetInput returns __updateCertInput.Input, and is useful for accessing the field via an interface.
func (v *__updateCertInput) GetInput() UpdateRepoCustomDomainInput { return v.Input }

// __updateClusterInput is used internally by genqlient
type __updateClusterInput struct {
	Input UpdateClusterInput `json:"input"`
}

// GetInput returns __updateClusterInput.Input, and is useful for accessing the field via an interface.
func (v *__updateClusterInput) GetInput() UpdateClusterInput { return v.Input }

// __updateCoreWeaveAccountInput is used internally by genqlient
type __updateCoreWeaveAccountInput struct {
	Input UpdateCoreWeaveAccountInput `json:"input"`
}

// GetInput returns __updateCoreWeaveAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__updateCoreWeaveAccountInput) GetInput() UpdateCoreWeaveAccountInput { return v.Input }

// __updateDOAccountInput is used internally by genqlient
type __updateDOAccountInput struct {
	Input UpdateDOAccountInput `json:"input"`
}

// GetInput returns __updateDOAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__updateDOAccountInput) GetInput() UpdateDOAccountInput { return v.Input }

// __updateDatabaseLinkInput is used internally by genqlient
type __updateDatabaseLinkInput struct {
	Input UpdateDatabaseLinkInput `json:"input"`
}

// GetInput returns __updateDatabaseLinkInput.Input, and is useful for accessing the field via an interface.
func (v *__updateDatabaseLinkInput) GetInput() UpdateDatabaseLinkInput { return v.Input }

// __updateDiscordWebhookIntegrationInput is used internally by genqlient
type __updateDiscordWebhookIntegrationInput struct {
	Input UpdateWebhookIntegrationInput `json:"input"`
}

// GetInput returns __updateDiscordWebhookIntegrationInput.Input, and is useful for accessing the field via an interface.
func (v *__updateDiscordWebhookIntegrationInput) GetInput() UpdateWebhookIntegrationInput {
	return v.Input
}

// __updateEnvironmentEnvironmentVariablesInput is used internally by genqlient
type __updateEnvironmentEnvironmentVariablesInput struct {
	Input UpdateProjectEnvironmentInput `json:"input"`
}

// GetInput returns __updateEnvironmentEnvironmentVariablesInput.Input, and is useful for accessing the field via an interface.
func (v *__updateEnvironmentEnvironmentVariablesInput) GetInput() UpdateProjectEnvironmentInput {
	return v.Input
}

// __updateGCPAccountInput is used internally by genqlient
type __updateGCPAccountInput struct {
	Input UpdateGCPAccountInput `json:"input"`
}

// GetInput returns __updateGCPAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__updateGCPAccountInput) GetInput() UpdateGCPAccountInput { return v.Input }

// __updateGitlabIntegrationInput is used internally by genqlient
type __updateGitlabIntegrationInput struct {
	Input UpdateGitlabIntegrationInput `json:"input"`
}

// GetInput returns __updateGitlabIntegrationInput.Input, and is useful for accessing the field via an interface.
func (v *__updateGitlabIntegrationInput) GetInput() UpdateGitlabIntegrationInput { return v.Input }

// __updateLinodeAccountInput is used internally by genqlient
type __updateLinodeAccountInput struct {
	Input UpdateLinodeAccountInput `json:"input"`
}

// GetInput returns __updateLinodeAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__updateLinodeAccountInput) GetInput() UpdateLinodeAccountInput { return v.Input }

// __updateMarketplaceBlueprintInput is used internally by genqlient
type __updateMarketplaceBlueprintInput struct {
	Input UpdateMarketplaceBlueprintInput `json:"input"`
}

// GetInput returns __updateMarketplaceBlueprintInput.Input, and is useful for accessing the field via an interface.
func (v *__updateMarketplaceBlueprintInput) GetInput() UpdateMarketplaceBlueprintInput {
	return v.Input
}

// __updateNotificationIntegrationConditionsInput is used internally by genqlient
type __updateNotificationIntegrationConditionsInput struct {
	UserId        uuid.UUID                          `json:"userId"`
	IntegrationId uuid.UUID                          `json:"integrationId"`
	Input         NotificationConditionProviderInput `json:"input"`
}

// GetUserId returns __updateNotificationIntegrationConditionsInput.UserId, and is useful for accessing the field via an interface.
func (v *__updateNotificationIntegrationConditionsInput) GetUserId() uuid.UUID { return v.UserId }

// GetIntegrationId returns __updateNotificationIntegrationConditionsInput.IntegrationId, and is useful for accessing the field via an interface.
func (v *__updateNotificationIntegrationConditionsInput) GetIntegrationId() uuid.UUID {
	return v.IntegrationId
}

// GetInput returns __updateNotificationIntegrationConditionsInput.Input, and is useful for accessing the field via an interface.
func (v *__updateNotificationIntegrationConditionsInput) GetInput() NotificationConditionProviderInput {
	return v.Input
}

// __updateNotificationIntegrationSettingsInput is used internally by genqlient
type __updateNotificationIntegrationSettingsInput struct {
	UserID uuid.UUID                            `json:"userID"`
	Input  NotificationIntegrationSettingsInput `json:"input"`
}

// GetUserID returns __updateNotificationIntegrationSettingsInput.UserID, and is useful for accessing the field via an interface.
func (v *__updateNotificationIntegrationSettingsInput) GetUserID() uuid.UUID { return v.UserID }

// GetInput returns __updateNotificationIntegrationSettingsInput.Input, and is useful for accessing the field via an interface.
func (v *__updateNotificationIntegrationSettingsInput) GetInput() NotificationIntegrationSettingsInput {
	return v.Input
}

// __updateNotificationIntegrationSpecificSettingsInput is used internally by genqlient
type __updateNotificationIntegrationSpecificSettingsInput struct {
	UserID        uuid.UUID                            `json:"userID"`
	IntegrationID uuid.UUID                            `json:"integrationID"`
	Input         NotificationIntegrationSettingsInput `json:"input"`
}

// GetUserID returns __updateNotificationIntegrationSpecificSettingsInput.UserID, and is useful for accessing the field via an interface.
func (v *__updateNotificationIntegrationSpecificSettingsInput) GetUserID() uuid.UUID { return v.UserID }

// GetIntegrationID returns __updateNotificationIntegrationSpecificSettingsInput.IntegrationID, and is useful for accessing the field via an interface.
func (v *__updateNotificationIntegrationSpecificSettingsInput) GetIntegrationID() uuid.UUID {
	return v.IntegrationID
}

// GetInput returns __updateNotificationIntegrationSpecificSettingsInput.Input, and is useful for accessing the field via an interface.
func (v *__updateNotificationIntegrationSpecificSettingsInput) GetInput() NotificationIntegrationSettingsInput {
	return v.Input
}

// __updateProjectDangerSettingsInput is used internally by genqlient
type __updateProjectDangerSettingsInput struct {
	Input UpdateProjectDangerInput `json:"input"`
}

// GetInput returns __updateProjectDangerSettingsInput.Input, and is useful for accessing the field via an interface.
func (v *__updateProjectDangerSettingsInput) GetInput() UpdateProjectDangerInput { return v.Input }

// __updateProjectEnvironmentInput is used internally by genqlient
type __updateProjectEnvironmentInput struct {
	Input UpdateProjectEnvironmentInput `json:"input"`
}

// GetInput returns __updateProjectEnvironmentInput.Input, and is useful for accessing the field via an interface.
func (v *__updateProjectEnvironmentInput) GetInput() UpdateProjectEnvironmentInput { return v.Input }

// __updateProjectEnvironmentVariablesInput is used internally by genqlient
type __updateProjectEnvironmentVariablesInput struct {
	Input UpdateProjectV2Input `json:"input"`
}

// GetInput returns __updateProjectEnvironmentVariablesInput.Input, and is useful for accessing the field via an interface.
func (v *__updateProjectEnvironmentVariablesInput) GetInput() UpdateProjectV2Input { return v.Input }

// __updateProjectSettingsInput is used internally by genqlient
type __updateProjectSettingsInput struct {
	Input UpdateProjectInput `json:"input"`
}

// GetInput returns __updateProjectSettingsInput.Input, and is useful for accessing the field via an interface.
func (v *__updateProjectSettingsInput) GetInput() UpdateProjectInput { return v.Input }

// __updateProjectV2Input is used internally by genqlient
type __updateProjectV2Input struct {
	Input UpdateProjectV2Input `json:"input"`
}

// GetInput returns __updateProjectV2Input.Input, and is useful for accessing the field via an interface.
func (v *__updateProjectV2Input) GetInput() UpdateProjectV2Input { return v.Input }

// __updateProjectV3Input is used internally by genqlient
type __updateProjectV3Input struct {
	ProjectID uuid.UUID            `json:"projectID"`
	Input     UpdateProjectV3Input `json:"input"`
}

// GetProjectID returns __updateProjectV3Input.ProjectID, and is useful for accessing the field via an interface.
func (v *__updateProjectV3Input) GetProjectID() uuid.UUID { return v.ProjectID }

// GetInput returns __updateProjectV3Input.Input, and is useful for accessing the field via an interface.
func (v *__updateProjectV3Input) GetInput() UpdateProjectV3Input { return v.Input }

// __updateRepoPipelineLinkInput is used internally by genqlient
type __updateRepoPipelineLinkInput struct {
	Input UpdateRepoPipelineLinkInput `json:"input"`
}

// GetInput returns __updateRepoPipelineLinkInput.Input, and is useful for accessing the field via an interface.
func (v *__updateRepoPipelineLinkInput) GetInput() UpdateRepoPipelineLinkInput { return v.Input }

// __updateResourceAlphaInput is used internally by genqlient
type __updateResourceAlphaInput struct {
	Id    uuid.UUID                `json:"id"`
	Input UpdateResourceAlphaInput `json:"input"`
}

// GetId returns __updateResourceAlphaInput.Id, and is useful for accessing the field via an interface.
func (v *__updateResourceAlphaInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __updateResourceAlphaInput.Input, and is useful for accessing the field via an interface.
func (v *__updateResourceAlphaInput) GetInput() UpdateResourceAlphaInput { return v.Input }

// __updateSlackWebhookIntegrationInput is used internally by genqlient
type __updateSlackWebhookIntegrationInput struct {
	Input UpdateWebhookIntegrationInput `json:"input"`
}

// GetInput returns __updateSlackWebhookIntegrationInput.Input, and is useful for accessing the field via an interface.
func (v *__updateSlackWebhookIntegrationInput) GetInput() UpdateWebhookIntegrationInput {
	return v.Input
}

// __updateTeamInput is used internally by genqlient
type __updateTeamInput struct {
	Input UpdateTeamInput `json:"input"`
}

// GetInput returns __updateTeamInput.Input, and is useful for accessing the field via an interface.
func (v *__updateTeamInput) GetInput() UpdateTeamInput { return v.Input }

// __updateUserInput is used internally by genqlient
type __updateUserInput struct {
	Input UpdateUserInput `json:"input"`
}

// GetInput returns __updateUserInput.Input, and is useful for accessing the field via an interface.
func (v *__updateUserInput) GetInput() UpdateUserInput { return v.Input }

// __updateVultrAccountInput is used internally by genqlient
type __updateVultrAccountInput struct {
	Input UpdateVultrAccountInput `json:"input"`
}

// GetInput returns __updateVultrAccountInput.Input, and is useful for accessing the field via an interface.
func (v *__updateVultrAccountInput) GetInput() UpdateVultrAccountInput { return v.Input }

// __userAPIKeysInput is used internally by genqlient
type __userAPIKeysInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userAPIKeysInput.Id, and is useful for accessing the field via an interface.
func (v *__userAPIKeysInput) GetId() uuid.UUID { return v.Id }

// __userAWSAccountsInput is used internally by genqlient
type __userAWSAccountsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userAWSAccountsInput.Id, and is useful for accessing the field via an interface.
func (v *__userAWSAccountsInput) GetId() uuid.UUID { return v.Id }

// __userAWSAccountsWithCQInput is used internally by genqlient
type __userAWSAccountsWithCQInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userAWSAccountsWithCQInput.Id, and is useful for accessing the field via an interface.
func (v *__userAWSAccountsWithCQInput) GetId() uuid.UUID { return v.Id }

// __userAwsAccountConnectedInput is used internally by genqlient
type __userAwsAccountConnectedInput struct {
	Id           uuid.UUID `json:"id"`
	AwsAccountId uuid.UUID `json:"awsAccountId"`
}

// GetId returns __userAwsAccountConnectedInput.Id, and is useful for accessing the field via an interface.
func (v *__userAwsAccountConnectedInput) GetId() uuid.UUID { return v.Id }

// GetAwsAccountId returns __userAwsAccountConnectedInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *__userAwsAccountConnectedInput) GetAwsAccountId() uuid.UUID { return v.AwsAccountId }

// __userAwsResourcesInput is used internally by genqlient
type __userAwsResourcesInput struct {
	UserId                 uuid.UUID              `json:"userId"`
	AwsResourceSearchInput AwsResourceSearchInput `json:"awsResourceSearchInput"`
	AwsId                  uuid.UUID              `json:"awsId"`
}

// GetUserId returns __userAwsResourcesInput.UserId, and is useful for accessing the field via an interface.
func (v *__userAwsResourcesInput) GetUserId() uuid.UUID { return v.UserId }

// GetAwsResourceSearchInput returns __userAwsResourcesInput.AwsResourceSearchInput, and is useful for accessing the field via an interface.
func (v *__userAwsResourcesInput) GetAwsResourceSearchInput() AwsResourceSearchInput {
	return v.AwsResourceSearchInput
}

// GetAwsId returns __userAwsResourcesInput.AwsId, and is useful for accessing the field via an interface.
func (v *__userAwsResourcesInput) GetAwsId() uuid.UUID { return v.AwsId }

// __userBalanceInput is used internally by genqlient
type __userBalanceInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userBalanceInput.Id, and is useful for accessing the field via an interface.
func (v *__userBalanceInput) GetId() uuid.UUID { return v.Id }

// __userBasicProjectsInput is used internally by genqlient
type __userBasicProjectsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userBasicProjectsInput.Id, and is useful for accessing the field via an interface.
func (v *__userBasicProjectsInput) GetId() uuid.UUID { return v.Id }

// __userBasicReposInput is used internally by genqlient
type __userBasicReposInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userBasicReposInput.Id, and is useful for accessing the field via an interface.
func (v *__userBasicReposInput) GetId() uuid.UUID { return v.Id }

// __userBillingInput is used internally by genqlient
type __userBillingInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userBillingInput.Id, and is useful for accessing the field via an interface.
func (v *__userBillingInput) GetId() uuid.UUID { return v.Id }

// __userBillingOverviewInput is used internally by genqlient
type __userBillingOverviewInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userBillingOverviewInput.Id, and is useful for accessing the field via an interface.
func (v *__userBillingOverviewInput) GetId() uuid.UUID { return v.Id }

// __userBranchResourcesInput is used internally by genqlient
type __userBranchResourcesInput struct {
	RepoId uuid.UUID `json:"repoId"`
	Branch *string   `json:"branch"`
}

// GetRepoId returns __userBranchResourcesInput.RepoId, and is useful for accessing the field via an interface.
func (v *__userBranchResourcesInput) GetRepoId() uuid.UUID { return v.RepoId }

// GetBranch returns __userBranchResourcesInput.Branch, and is useful for accessing the field via an interface.
func (v *__userBranchResourcesInput) GetBranch() *string { return v.Branch }

// __userCloudsInput is used internally by genqlient
type __userCloudsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userCloudsInput.Id, and is useful for accessing the field via an interface.
func (v *__userCloudsInput) GetId() uuid.UUID { return v.Id }

// __userClustersInput is used internally by genqlient
type __userClustersInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userClustersInput.Id, and is useful for accessing the field via an interface.
func (v *__userClustersInput) GetId() uuid.UUID { return v.Id }

// __userContainerRegistriesInput is used internally by genqlient
type __userContainerRegistriesInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userContainerRegistriesInput.Id, and is useful for accessing the field via an interface.
func (v *__userContainerRegistriesInput) GetId() uuid.UUID { return v.Id }

// __userCoreWeaveAccountsInput is used internally by genqlient
type __userCoreWeaveAccountsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userCoreWeaveAccountsInput.Id, and is useful for accessing the field via an interface.
func (v *__userCoreWeaveAccountsInput) GetId() uuid.UUID { return v.Id }

// __userCrispAuthInput is used internally by genqlient
type __userCrispAuthInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userCrispAuthInput.Id, and is useful for accessing the field via an interface.
func (v *__userCrispAuthInput) GetId() uuid.UUID { return v.Id }

// __userDOAccountsInput is used internally by genqlient
type __userDOAccountsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userDOAccountsInput.Id, and is useful for accessing the field via an interface.
func (v *__userDOAccountsInput) GetId() uuid.UUID { return v.Id }

// __userDeployTargetsInput is used internally by genqlient
type __userDeployTargetsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userDeployTargetsInput.Id, and is useful for accessing the field via an interface.
func (v *__userDeployTargetsInput) GetId() uuid.UUID { return v.Id }

// __userDeploymentInput is used internally by genqlient
type __userDeploymentInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userDeploymentInput.Id, and is useful for accessing the field via an interface.
func (v *__userDeploymentInput) GetId() uuid.UUID { return v.Id }

// __userDeploymentMetricInput is used internally by genqlient
type __userDeploymentMetricInput struct {
	DeploymentID   uuid.UUID           `json:"deploymentID"`
	DeploymentUUID uuid.UUID           `json:"deploymentUUID"`
	QueryOptions   *MetricQueryOptions `json:"queryOptions"`
}

// GetDeploymentID returns __userDeploymentMetricInput.DeploymentID, and is useful for accessing the field via an interface.
func (v *__userDeploymentMetricInput) GetDeploymentID() uuid.UUID { return v.DeploymentID }

// GetDeploymentUUID returns __userDeploymentMetricInput.DeploymentUUID, and is useful for accessing the field via an interface.
func (v *__userDeploymentMetricInput) GetDeploymentUUID() uuid.UUID { return v.DeploymentUUID }

// GetQueryOptions returns __userDeploymentMetricInput.QueryOptions, and is useful for accessing the field via an interface.
func (v *__userDeploymentMetricInput) GetQueryOptions() *MetricQueryOptions { return v.QueryOptions }

// __userEphemeralContainersInput is used internally by genqlient
type __userEphemeralContainersInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userEphemeralContainersInput.Id, and is useful for accessing the field via an interface.
func (v *__userEphemeralContainersInput) GetId() uuid.UUID { return v.Id }

// __userGCPAccountsInput is used internally by genqlient
type __userGCPAccountsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userGCPAccountsInput.Id, and is useful for accessing the field via an interface.
func (v *__userGCPAccountsInput) GetId() uuid.UUID { return v.Id }

// __userGithubRepoInput is used internally by genqlient
type __userGithubRepoInput struct {
	InstallationId uuid.UUID `json:"installationId"`
	Owner          string    `json:"owner"`
	Repo           string    `json:"repo"`
}

// GetInstallationId returns __userGithubRepoInput.InstallationId, and is useful for accessing the field via an interface.
func (v *__userGithubRepoInput) GetInstallationId() uuid.UUID { return v.InstallationId }

// GetOwner returns __userGithubRepoInput.Owner, and is useful for accessing the field via an interface.
func (v *__userGithubRepoInput) GetOwner() string { return v.Owner }

// GetRepo returns __userGithubRepoInput.Repo, and is useful for accessing the field via an interface.
func (v *__userGithubRepoInput) GetRepo() string { return v.Repo }

// __userGithubRepoServerlessInput is used internally by genqlient
type __userGithubRepoServerlessInput struct {
	InstallationId uuid.UUID `json:"installationId"`
	Owner          string    `json:"owner"`
	Repo           string    `json:"repo"`
}

// GetInstallationId returns __userGithubRepoServerlessInput.InstallationId, and is useful for accessing the field via an interface.
func (v *__userGithubRepoServerlessInput) GetInstallationId() uuid.UUID { return v.InstallationId }

// GetOwner returns __userGithubRepoServerlessInput.Owner, and is useful for accessing the field via an interface.
func (v *__userGithubRepoServerlessInput) GetOwner() string { return v.Owner }

// GetRepo returns __userGithubRepoServerlessInput.Repo, and is useful for accessing the field via an interface.
func (v *__userGithubRepoServerlessInput) GetRepo() string { return v.Repo }

// __userInput is used internally by genqlient
type __userInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userInput.Id, and is useful for accessing the field via an interface.
func (v *__userInput) GetId() uuid.UUID { return v.Id }

// __userIntegrationsInput is used internally by genqlient
type __userIntegrationsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userIntegrationsInput.Id, and is useful for accessing the field via an interface.
func (v *__userIntegrationsInput) GetId() uuid.UUID { return v.Id }

// __userJobInput is used internally by genqlient
type __userJobInput struct {
	JobID uuid.UUID `json:"jobID"`
}

// GetJobID returns __userJobInput.JobID, and is useful for accessing the field via an interface.
func (v *__userJobInput) GetJobID() uuid.UUID { return v.JobID }

// __userLinodeAccountsInput is used internally by genqlient
type __userLinodeAccountsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userLinodeAccountsInput.Id, and is useful for accessing the field via an interface.
func (v *__userLinodeAccountsInput) GetId() uuid.UUID { return v.Id }

// __userPaymentInput is used internally by genqlient
type __userPaymentInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userPaymentInput.Id, and is useful for accessing the field via an interface.
func (v *__userPaymentInput) GetId() uuid.UUID { return v.Id }

// __userProductCatalogInput is used internally by genqlient
type __userProductCatalogInput struct {
	ForUserID uuid.UUID `json:"forUserID"`
}

// GetForUserID returns __userProductCatalogInput.ForUserID, and is useful for accessing the field via an interface.
func (v *__userProductCatalogInput) GetForUserID() uuid.UUID { return v.ForUserID }

// __userProjectV3DeploymentsInput is used internally by genqlient
type __userProjectV3DeploymentsInput struct {
	UserId      uuid.UUID `json:"userId"`
	ProjectName string    `json:"projectName"`
	Page        PageInput `json:"page"`
}

// GetUserId returns __userProjectV3DeploymentsInput.UserId, and is useful for accessing the field via an interface.
func (v *__userProjectV3DeploymentsInput) GetUserId() uuid.UUID { return v.UserId }

// GetProjectName returns __userProjectV3DeploymentsInput.ProjectName, and is useful for accessing the field via an interface.
func (v *__userProjectV3DeploymentsInput) GetProjectName() string { return v.ProjectName }

// GetPage returns __userProjectV3DeploymentsInput.Page, and is useful for accessing the field via an interface.
func (v *__userProjectV3DeploymentsInput) GetPage() PageInput { return v.Page }

// __userProjectV3Input is used internally by genqlient
type __userProjectV3Input struct {
	UserId      uuid.UUID `json:"userId"`
	ProjectName string    `json:"projectName"`
	Page        PageInput `json:"page"`
}

// GetUserId returns __userProjectV3Input.UserId, and is useful for accessing the field via an interface.
func (v *__userProjectV3Input) GetUserId() uuid.UUID { return v.UserId }

// GetProjectName returns __userProjectV3Input.ProjectName, and is useful for accessing the field via an interface.
func (v *__userProjectV3Input) GetProjectName() string { return v.ProjectName }

// GetPage returns __userProjectV3Input.Page, and is useful for accessing the field via an interface.
func (v *__userProjectV3Input) GetPage() PageInput { return v.Page }

// __userProjectsProductionDeploymentsInput is used internally by genqlient
type __userProjectsProductionDeploymentsInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userProjectsProductionDeploymentsInput.Id, and is useful for accessing the field via an interface.
func (v *__userProjectsProductionDeploymentsInput) GetId() uuid.UUID { return v.Id }

// __userRepoBranchesV2Input is used internally by genqlient
type __userRepoBranchesV2Input struct {
	Id         uuid.UUID `json:"id"`
	Branch     *string   `json:"branch"`
	WithBranch bool      `json:"withBranch"`
	After      string    `json:"after"`
	First      int       `json:"first"`
}

// GetId returns __userRepoBranchesV2Input.Id, and is useful for accessing the field via an interface.
func (v *__userRepoBranchesV2Input) GetId() uuid.UUID { return v.Id }

// GetBranch returns __userRepoBranchesV2Input.Branch, and is useful for accessing the field via an interface.
func (v *__userRepoBranchesV2Input) GetBranch() *string { return v.Branch }

// GetWithBranch returns __userRepoBranchesV2Input.WithBranch, and is useful for accessing the field via an interface.
func (v *__userRepoBranchesV2Input) GetWithBranch() bool { return v.WithBranch }

// GetAfter returns __userRepoBranchesV2Input.After, and is useful for accessing the field via an interface.
func (v *__userRepoBranchesV2Input) GetAfter() string { return v.After }

// GetFirst returns __userRepoBranchesV2Input.First, and is useful for accessing the field via an interface.
func (v *__userRepoBranchesV2Input) GetFirst() int { return v.First }

// __userRepoCloudOnboardByPathInput is used internally by genqlient
type __userRepoCloudOnboardByPathInput struct {
	ProjectPath *string    `json:"projectPath"`
	ProjectId   *uuid.UUID `json:"projectId"`
	RepoName    string     `json:"repoName"`
}

// GetProjectPath returns __userRepoCloudOnboardByPathInput.ProjectPath, and is useful for accessing the field via an interface.
func (v *__userRepoCloudOnboardByPathInput) GetProjectPath() *string { return v.ProjectPath }

// GetProjectId returns __userRepoCloudOnboardByPathInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__userRepoCloudOnboardByPathInput) GetProjectId() *uuid.UUID { return v.ProjectId }

// GetRepoName returns __userRepoCloudOnboardByPathInput.RepoName, and is useful for accessing the field via an interface.
func (v *__userRepoCloudOnboardByPathInput) GetRepoName() string { return v.RepoName }

// __userRepoDeploymentsInput is used internally by genqlient
type __userRepoDeploymentsInput struct {
	Id     uuid.UUID `json:"id"`
	Branch *string   `json:"branch"`
}

// GetId returns __userRepoDeploymentsInput.Id, and is useful for accessing the field via an interface.
func (v *__userRepoDeploymentsInput) GetId() uuid.UUID { return v.Id }

// GetBranch returns __userRepoDeploymentsInput.Branch, and is useful for accessing the field via an interface.
func (v *__userRepoDeploymentsInput) GetBranch() *string { return v.Branch }

// __userRepoInput is used internally by genqlient
type __userRepoInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userRepoInput.Id, and is useful for accessing the field via an interface.
func (v *__userRepoInput) GetId() uuid.UUID { return v.Id }

// __userReposInput is used internally by genqlient
type __userReposInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userReposInput.Id, and is useful for accessing the field via an interface.
func (v *__userReposInput) GetId() uuid.UUID { return v.Id }

// __userReposWithDBInput is used internally by genqlient
type __userReposWithDBInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userReposWithDBInput.Id, and is useful for accessing the field via an interface.
func (v *__userReposWithDBInput) GetId() uuid.UUID { return v.Id }

// __userTeamInput is used internally by genqlient
type __userTeamInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userTeamInput.Id, and is useful for accessing the field via an interface.
func (v *__userTeamInput) GetId() uuid.UUID { return v.Id }

// __userTeamMemberInput is used internally by genqlient
type __userTeamMemberInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userTeamMemberInput.Id, and is useful for accessing the field via an interface.
func (v *__userTeamMemberInput) GetId() uuid.UUID { return v.Id }

// abortBlueprintDriverWorkflowResponse is returned by abortBlueprintDriverWorkflow on success.
type abortBlueprintDriverWorkflowResponse struct {
	AbortBlueprintDriverWorkflow *uuid.UUID `json:"abortBlueprintDriverWorkflow"`
}

// GetAbortBlueprintDriverWorkflow returns abortBlueprintDriverWorkflowResponse.AbortBlueprintDriverWorkflow, and is useful for accessing the field via an interface.
func (v *abortBlueprintDriverWorkflowResponse) GetAbortBlueprintDriverWorkflow() *uuid.UUID {
	return v.AbortBlueprintDriverWorkflow
}

// abortBuildAbortBuildRepo includes the requested fields of the GraphQL type Repo.
type abortBuildAbortBuildRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns abortBuildAbortBuildRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns abortBuildAbortBuildRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns abortBuildAbortBuildRepo.Manifest, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetManifest() *RepoDetailManifest { return v.RepoDetail.Manifest }

// GetAppID returns abortBuildAbortBuildRepo.AppID, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns abortBuildAbortBuildRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns abortBuildAbortBuildRepo.KappID, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns abortBuildAbortBuildRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns abortBuildAbortBuildRepo.Project, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetProject() *RepoDetailProject { return v.RepoDetail.Project }

// GetProductionDeployment returns abortBuildAbortBuildRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns abortBuildAbortBuildRepo.Namespace, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns abortBuildAbortBuildRepo.Envs, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetEnvs() []RepoDetailEnvsEnvVar { return v.RepoDetail.Envs }

// GetCollaborators returns abortBuildAbortBuildRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns abortBuildAbortBuildRepo.Volumes, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns abortBuildAbortBuildRepo.Replication, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns abortBuildAbortBuildRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDeployTarget() *DeployTarget { return v.RepoDetail.DeployTarget }

// GetCluster returns abortBuildAbortBuildRepo.Cluster, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetCluster() *RepoDetailCluster { return v.RepoDetail.Cluster }

// GetAwsAccount returns abortBuildAbortBuildRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns abortBuildAbortBuildRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns abortBuildAbortBuildRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns abortBuildAbortBuildRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns abortBuildAbortBuildRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns abortBuildAbortBuildRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns abortBuildAbortBuildRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetManualDeploy() *bool { return v.RepoDetail.ManualDeploy }

// GetDeployStrategy returns abortBuildAbortBuildRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns abortBuildAbortBuildRepo.Free, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns abortBuildAbortBuildRepo.Cpu, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns abortBuildAbortBuildRepo.Memory, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns abortBuildAbortBuildRepo.Gpu, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetGpu() *RepoDetailGpuGPUSpec { return v.RepoDetail.Gpu }

// GetTpu returns abortBuildAbortBuildRepo.Tpu, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetTpu() *RepoDetailTpuTPUSpec { return v.RepoDetail.Tpu }

// GetEphemeralStorage returns abortBuildAbortBuildRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns abortBuildAbortBuildRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns abortBuildAbortBuildRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns abortBuildAbortBuildRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns abortBuildAbortBuildRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns abortBuildAbortBuildRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns abortBuildAbortBuildRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns abortBuildAbortBuildRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns abortBuildAbortBuildRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns abortBuildAbortBuildRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetHelmValues() *string { return v.RepoDetail.HelmValues }

// GetTerraformVersion returns abortBuildAbortBuildRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns abortBuildAbortBuildRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns abortBuildAbortBuildRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns abortBuildAbortBuildRepo.DeployService, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDeployService() *bool { return v.RepoDetail.DeployService }

// GetDeployJob returns abortBuildAbortBuildRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns abortBuildAbortBuildRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetPreStopSleep() *int { return v.RepoDetail.PreStopSleep }

// GetTerminationGracePeriodSeconds returns abortBuildAbortBuildRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns abortBuildAbortBuildRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns abortBuildAbortBuildRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns abortBuildAbortBuildRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns abortBuildAbortBuildRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns abortBuildAbortBuildRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDatabaseVersion() *string { return v.RepoDetail.DatabaseVersion }

// GetDatabaseEnvs returns abortBuildAbortBuildRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns abortBuildAbortBuildRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns abortBuildAbortBuildRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns abortBuildAbortBuildRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns abortBuildAbortBuildRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetAutoRollback() *bool { return v.RepoDetail.AutoRollback }

// GetCanDeploy returns abortBuildAbortBuildRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns abortBuildAbortBuildRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns abortBuildAbortBuildRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetAwsIamRole() *string { return v.RepoDetail.AwsIamRole }

// GetGcpServiceAccount returns abortBuildAbortBuildRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns abortBuildAbortBuildRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns abortBuildAbortBuildRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns abortBuildAbortBuildRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns abortBuildAbortBuildRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns abortBuildAbortBuildRepo.Id, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetId() uuid.UUID { return v.RepoDetail.RepoCommon.Id }

// GetPath returns abortBuildAbortBuildRepo.Path, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns abortBuildAbortBuildRepo.Name, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns abortBuildAbortBuildRepo.Enabled, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetEnabled() bool { return v.RepoDetail.RepoCommon.Enabled }

// GetSource returns abortBuildAbortBuildRepo.Source, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns abortBuildAbortBuildRepo.DeployType, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns abortBuildAbortBuildRepo.Image, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetImage() *string { return v.RepoDetail.RepoCommon.Image }

// GetUpdatedAt returns abortBuildAbortBuildRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetUpdatedAt() time.Time { return v.RepoDetail.RepoCommon.UpdatedAt }

// GetDisableReason returns abortBuildAbortBuildRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns abortBuildAbortBuildRepo.Owner, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns abortBuildAbortBuildRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns abortBuildAbortBuildRepo.Cdns, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns abortBuildAbortBuildRepo.Ports, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns abortBuildAbortBuildRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns abortBuildAbortBuildRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetStaticIP() *bool { return v.RepoDetail.RepoNetwork.StaticIP }

// GetBuildMethod returns abortBuildAbortBuildRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns abortBuildAbortBuildRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns abortBuildAbortBuildRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns abortBuildAbortBuildRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns abortBuildAbortBuildRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns abortBuildAbortBuildRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns abortBuildAbortBuildRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *abortBuildAbortBuildRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *abortBuildAbortBuildRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*abortBuildAbortBuildRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.abortBuildAbortBuildRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalabortBuildAbortBuildRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *abortBuildAbortBuildRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *abortBuildAbortBuildRepo) __premarshalJSON() (*__premarshalabortBuildAbortBuildRepo, error) {
	var retval __premarshalabortBuildAbortBuildRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// abortBuildResponse is returned by abortBuild on success.
type abortBuildResponse struct {
	AbortBuild abortBuildAbortBuildRepo `json:"abortBuild"`
}

// GetAbortBuild returns abortBuildResponse.AbortBuild, and is useful for accessing the field via an interface.
func (v *abortBuildResponse) GetAbortBuild() abortBuildAbortBuildRepo { return v.AbortBuild }

// acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam includes the requested fields of the GraphQL type Team.
type acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam struct {
	Id         uuid.UUID `json:"id"`
	TeamCommon `json:"-"`
}

// GetId returns acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam.Id, and is useful for accessing the field via an interface.
func (v *acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam) GetId() uuid.UUID { return v.Id }

// GetPlan returns acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam.Plan, and is useful for accessing the field via an interface.
func (v *acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam) GetPlan() TeamCommonPlan {
	return v.TeamCommon.Plan
}

// GetUser returns acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam.User, and is useful for accessing the field via an interface.
func (v *acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam) GetUser() TeamCommonUser {
	return v.TeamCommon.User
}

func (v *acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalacceptTeamMemberInvitationAcceptTeamMemberInvitationTeam struct {
	Id uuid.UUID `json:"id"`

	Plan TeamCommonPlan `json:"plan"`

	User TeamCommonUser `json:"user"`
}

func (v *acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam) __premarshalJSON() (*__premarshalacceptTeamMemberInvitationAcceptTeamMemberInvitationTeam, error) {
	var retval __premarshalacceptTeamMemberInvitationAcceptTeamMemberInvitationTeam

	retval.Id = v.Id
	retval.Plan = v.TeamCommon.Plan
	retval.User = v.TeamCommon.User
	return &retval, nil
}

// acceptTeamMemberInvitationResponse is returned by acceptTeamMemberInvitation on success.
type acceptTeamMemberInvitationResponse struct {
	AcceptTeamMemberInvitation acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam `json:"acceptTeamMemberInvitation"`
}

// GetAcceptTeamMemberInvitation returns acceptTeamMemberInvitationResponse.AcceptTeamMemberInvitation, and is useful for accessing the field via an interface.
func (v *acceptTeamMemberInvitationResponse) GetAcceptTeamMemberInvitation() acceptTeamMemberInvitationAcceptTeamMemberInvitationTeam {
	return v.AcceptTeamMemberInvitation
}

// addAWSAccountAddAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type addAWSAccountAddAWSAccount struct {
	Id               uuid.UUID `json:"id"`
	AWSAccountDetail `json:"-"`
}

// GetId returns addAWSAccountAddAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *addAWSAccountAddAWSAccount) GetId() uuid.UUID { return v.Id }

// GetName returns addAWSAccountAddAWSAccount.Name, and is useful for accessing the field via an interface.
func (v *addAWSAccountAddAWSAccount) GetName() string { return v.AWSAccountDetail.Name }

// GetState returns addAWSAccountAddAWSAccount.State, and is useful for accessing the field via an interface.
func (v *addAWSAccountAddAWSAccount) GetState() AWSAccountState { return v.AWSAccountDetail.State }

// GetAccountID returns addAWSAccountAddAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *addAWSAccountAddAWSAccount) GetAccountID() *string { return v.AWSAccountDetail.AccountID }

// GetRoleARN returns addAWSAccountAddAWSAccount.RoleARN, and is useful for accessing the field via an interface.
func (v *addAWSAccountAddAWSAccount) GetRoleARN() *string { return v.AWSAccountDetail.RoleARN }

// GetCloudFormationURL returns addAWSAccountAddAWSAccount.CloudFormationURL, and is useful for accessing the field via an interface.
func (v *addAWSAccountAddAWSAccount) GetCloudFormationURL() string {
	return v.AWSAccountDetail.CloudFormationURL
}

// GetConnected returns addAWSAccountAddAWSAccount.Connected, and is useful for accessing the field via an interface.
func (v *addAWSAccountAddAWSAccount) GetConnected() *bool { return v.AWSAccountDetail.Connected }

func (v *addAWSAccountAddAWSAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addAWSAccountAddAWSAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.addAWSAccountAddAWSAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AWSAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaladdAWSAccountAddAWSAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State AWSAccountState `json:"state"`

	AccountID *string `json:"accountID"`

	RoleARN *string `json:"roleARN"`

	CloudFormationURL string `json:"cloudFormationURL"`

	Connected *bool `json:"connected"`
}

func (v *addAWSAccountAddAWSAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addAWSAccountAddAWSAccount) __premarshalJSON() (*__premarshaladdAWSAccountAddAWSAccount, error) {
	var retval __premarshaladdAWSAccountAddAWSAccount

	retval.Id = v.Id
	retval.Name = v.AWSAccountDetail.Name
	retval.State = v.AWSAccountDetail.State
	retval.AccountID = v.AWSAccountDetail.AccountID
	retval.RoleARN = v.AWSAccountDetail.RoleARN
	retval.CloudFormationURL = v.AWSAccountDetail.CloudFormationURL
	retval.Connected = v.AWSAccountDetail.Connected
	return &retval, nil
}

// addAWSAccountResponse is returned by addAWSAccount on success.
type addAWSAccountResponse struct {
	AddAWSAccount addAWSAccountAddAWSAccount `json:"addAWSAccount"`
}

// GetAddAWSAccount returns addAWSAccountResponse.AddAWSAccount, and is useful for accessing the field via an interface.
func (v *addAWSAccountResponse) GetAddAWSAccount() addAWSAccountAddAWSAccount { return v.AddAWSAccount }

// addAzureAccountAddAzureAccount includes the requested fields of the GraphQL type AzureAccount.
type addAzureAccountAddAzureAccount struct {
	Id                 uuid.UUID `json:"id"`
	AzureAccountDetail `json:"-"`
}

// GetId returns addAzureAccountAddAzureAccount.Id, and is useful for accessing the field via an interface.
func (v *addAzureAccountAddAzureAccount) GetId() uuid.UUID { return v.Id }

// GetName returns addAzureAccountAddAzureAccount.Name, and is useful for accessing the field via an interface.
func (v *addAzureAccountAddAzureAccount) GetName() string { return v.AzureAccountDetail.Name }

// GetState returns addAzureAccountAddAzureAccount.State, and is useful for accessing the field via an interface.
func (v *addAzureAccountAddAzureAccount) GetState() CloudAccountState {
	return v.AzureAccountDetail.State
}

// GetConnected returns addAzureAccountAddAzureAccount.Connected, and is useful for accessing the field via an interface.
func (v *addAzureAccountAddAzureAccount) GetConnected() *bool { return v.AzureAccountDetail.Connected }

// GetSubscriptionID returns addAzureAccountAddAzureAccount.SubscriptionID, and is useful for accessing the field via an interface.
func (v *addAzureAccountAddAzureAccount) GetSubscriptionID() *string {
	return v.AzureAccountDetail.SubscriptionID
}

// GetTenantID returns addAzureAccountAddAzureAccount.TenantID, and is useful for accessing the field via an interface.
func (v *addAzureAccountAddAzureAccount) GetTenantID() *string { return v.AzureAccountDetail.TenantID }

// GetClientID returns addAzureAccountAddAzureAccount.ClientID, and is useful for accessing the field via an interface.
func (v *addAzureAccountAddAzureAccount) GetClientID() *string { return v.AzureAccountDetail.ClientID }

func (v *addAzureAccountAddAzureAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addAzureAccountAddAzureAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.addAzureAccountAddAzureAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AzureAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaladdAzureAccountAddAzureAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	Connected *bool `json:"connected"`

	SubscriptionID *string `json:"subscriptionID"`

	TenantID *string `json:"tenantID"`

	ClientID *string `json:"clientID"`
}

func (v *addAzureAccountAddAzureAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addAzureAccountAddAzureAccount) __premarshalJSON() (*__premarshaladdAzureAccountAddAzureAccount, error) {
	var retval __premarshaladdAzureAccountAddAzureAccount

	retval.Id = v.Id
	retval.Name = v.AzureAccountDetail.Name
	retval.State = v.AzureAccountDetail.State
	retval.Connected = v.AzureAccountDetail.Connected
	retval.SubscriptionID = v.AzureAccountDetail.SubscriptionID
	retval.TenantID = v.AzureAccountDetail.TenantID
	retval.ClientID = v.AzureAccountDetail.ClientID
	return &retval, nil
}

// addAzureAccountResponse is returned by addAzureAccount on success.
type addAzureAccountResponse struct {
	AddAzureAccount addAzureAccountAddAzureAccount `json:"addAzureAccount"`
}

// GetAddAzureAccount returns addAzureAccountResponse.AddAzureAccount, and is useful for accessing the field via an interface.
func (v *addAzureAccountResponse) GetAddAzureAccount() addAzureAccountAddAzureAccount {
	return v.AddAzureAccount
}

// addCDNAddCDN includes the requested fields of the GraphQL type CDN.
type addCDNAddCDN struct {
	Id        uuid.UUID `json:"id"`
	CDNDetail `json:"-"`
}

// GetId returns addCDNAddCDN.Id, and is useful for accessing the field via an interface.
func (v *addCDNAddCDN) GetId() uuid.UUID { return v.Id }

// GetDomains returns addCDNAddCDN.Domains, and is useful for accessing the field via an interface.
func (v *addCDNAddCDN) GetDomains() []CDNDetailDomainsCDNDomain { return v.CDNDetail.Domains }

// GetEndpoint returns addCDNAddCDN.Endpoint, and is useful for accessing the field via an interface.
func (v *addCDNAddCDN) GetEndpoint() *string { return v.CDNDetail.Endpoint }

// GetState returns addCDNAddCDN.State, and is useful for accessing the field via an interface.
func (v *addCDNAddCDN) GetState() string { return v.CDNDetail.State }

// GetCertificate returns addCDNAddCDN.Certificate, and is useful for accessing the field via an interface.
func (v *addCDNAddCDN) GetCertificate() *CDNDetailCertificate { return v.CDNDetail.Certificate }

func (v *addCDNAddCDN) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addCDNAddCDN
		graphql.NoUnmarshalJSON
	}
	firstPass.addCDNAddCDN = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CDNDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaladdCDNAddCDN struct {
	Id uuid.UUID `json:"id"`

	Domains []CDNDetailDomainsCDNDomain `json:"domains"`

	Endpoint *string `json:"endpoint"`

	State string `json:"state"`

	Certificate *CDNDetailCertificate `json:"certificate"`
}

func (v *addCDNAddCDN) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addCDNAddCDN) __premarshalJSON() (*__premarshaladdCDNAddCDN, error) {
	var retval __premarshaladdCDNAddCDN

	retval.Id = v.Id
	retval.Domains = v.CDNDetail.Domains
	retval.Endpoint = v.CDNDetail.Endpoint
	retval.State = v.CDNDetail.State
	retval.Certificate = v.CDNDetail.Certificate
	return &retval, nil
}

// addCDNResponse is returned by addCDN on success.
type addCDNResponse struct {
	AddCDN addCDNAddCDN `json:"addCDN"`
}

// GetAddCDN returns addCDNResponse.AddCDN, and is useful for accessing the field via an interface.
func (v *addCDNResponse) GetAddCDN() addCDNAddCDN { return v.AddCDN }

// addClusterAddCluster includes the requested fields of the GraphQL type Cluster.
type addClusterAddCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns addClusterAddCluster.Id, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetId() uuid.UUID { return v.Id }

// GetName returns addClusterAddCluster.Name, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns addClusterAddCluster.Region, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetRegion() *string { return v.ClusterDetail.Region }

// GetState returns addClusterAddCluster.State, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetState() ClusterState { return v.ClusterDetail.State }

// GetStatus returns addClusterAddCluster.Status, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetStatus() *ClusterStatus { return v.ClusterDetail.Status }

// GetConnected returns addClusterAddCluster.Connected, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetConnected() *bool { return v.ClusterDetail.Connected }

// GetDomain returns addClusterAddCluster.Domain, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetDomain() *string { return v.ClusterDetail.Domain }

// GetIsExternal returns addClusterAddCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetIsExternal() *bool { return v.ClusterDetail.IsExternal }

// GetIsEjected returns addClusterAddCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetIsEjected() *bool { return v.ClusterDetail.IsEjected }

// GetComponents returns addClusterAddCluster.Components, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns addClusterAddCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns addClusterAddCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns addClusterAddCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns addClusterAddCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns addClusterAddCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns addClusterAddCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns addClusterAddCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns addClusterAddCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns addClusterAddCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetIngressIP() *string { return v.ClusterDetail.IngressIP }

// GetIngressDNS returns addClusterAddCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetIngressDNS() *string { return v.ClusterDetail.IngressDNS }

// GetClusterProvider returns addClusterAddCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns addClusterAddCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns addClusterAddCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns addClusterAddCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns addClusterAddCluster.Grafana, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetGrafana() *ClusterDetailGrafana { return v.ClusterDetail.Grafana }

// GetContainerRegistry returns addClusterAddCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns addClusterAddCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns addClusterAddCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns addClusterAddCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetUpdatedAt() time.Time { return v.ClusterDetail.UpdatedAt }

// GetCreatedAt returns addClusterAddCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetCreatedAt() time.Time { return v.ClusterDetail.CreatedAt }

// GetProjects returns addClusterAddCluster.Projects, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns addClusterAddCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns addClusterAddCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *addClusterAddCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *addClusterAddCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addClusterAddCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.addClusterAddCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaladdClusterAddCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *addClusterAddCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addClusterAddCluster) __premarshalJSON() (*__premarshaladdClusterAddCluster, error) {
	var retval __premarshaladdClusterAddCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal addClusterAddCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// addClusterResponse is returned by addCluster on success.
type addClusterResponse struct {
	AddCluster addClusterAddCluster `json:"addCluster"`
}

// GetAddCluster returns addClusterResponse.AddCluster, and is useful for accessing the field via an interface.
func (v *addClusterResponse) GetAddCluster() addClusterAddCluster { return v.AddCluster }

// addContainerRegistryAddContainerRegistry includes the requested fields of the GraphQL type ContainerRegistry.
type addContainerRegistryAddContainerRegistry struct {
	Id       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Registry string    `json:"registry"`
	Username *string   `json:"username"`
}

// GetId returns addContainerRegistryAddContainerRegistry.Id, and is useful for accessing the field via an interface.
func (v *addContainerRegistryAddContainerRegistry) GetId() uuid.UUID { return v.Id }

// GetName returns addContainerRegistryAddContainerRegistry.Name, and is useful for accessing the field via an interface.
func (v *addContainerRegistryAddContainerRegistry) GetName() string { return v.Name }

// GetRegistry returns addContainerRegistryAddContainerRegistry.Registry, and is useful for accessing the field via an interface.
func (v *addContainerRegistryAddContainerRegistry) GetRegistry() string { return v.Registry }

// GetUsername returns addContainerRegistryAddContainerRegistry.Username, and is useful for accessing the field via an interface.
func (v *addContainerRegistryAddContainerRegistry) GetUsername() *string { return v.Username }

// addContainerRegistryResponse is returned by addContainerRegistry on success.
type addContainerRegistryResponse struct {
	AddContainerRegistry addContainerRegistryAddContainerRegistry `json:"addContainerRegistry"`
}

// GetAddContainerRegistry returns addContainerRegistryResponse.AddContainerRegistry, and is useful for accessing the field via an interface.
func (v *addContainerRegistryResponse) GetAddContainerRegistry() addContainerRegistryAddContainerRegistry {
	return v.AddContainerRegistry
}

// addCoreWeaveAccountAddCoreWeaveAccount includes the requested fields of the GraphQL type CoreWeaveAccount.
type addCoreWeaveAccountAddCoreWeaveAccount struct {
	Id              uuid.UUID `json:"id"`
	CWAccountDetail `json:"-"`
}

// GetId returns addCoreWeaveAccountAddCoreWeaveAccount.Id, and is useful for accessing the field via an interface.
func (v *addCoreWeaveAccountAddCoreWeaveAccount) GetId() uuid.UUID { return v.Id }

// GetName returns addCoreWeaveAccountAddCoreWeaveAccount.Name, and is useful for accessing the field via an interface.
func (v *addCoreWeaveAccountAddCoreWeaveAccount) GetName() string { return v.CWAccountDetail.Name }

// GetState returns addCoreWeaveAccountAddCoreWeaveAccount.State, and is useful for accessing the field via an interface.
func (v *addCoreWeaveAccountAddCoreWeaveAccount) GetState() CloudAccountState {
	return v.CWAccountDetail.State
}

// GetNamespace returns addCoreWeaveAccountAddCoreWeaveAccount.Namespace, and is useful for accessing the field via an interface.
func (v *addCoreWeaveAccountAddCoreWeaveAccount) GetNamespace() *string {
	return v.CWAccountDetail.Namespace
}

// GetConnected returns addCoreWeaveAccountAddCoreWeaveAccount.Connected, and is useful for accessing the field via an interface.
func (v *addCoreWeaveAccountAddCoreWeaveAccount) GetConnected() *bool {
	return v.CWAccountDetail.Connected
}

func (v *addCoreWeaveAccountAddCoreWeaveAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addCoreWeaveAccountAddCoreWeaveAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.addCoreWeaveAccountAddCoreWeaveAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CWAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaladdCoreWeaveAccountAddCoreWeaveAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	Namespace *string `json:"namespace"`

	Connected *bool `json:"connected"`
}

func (v *addCoreWeaveAccountAddCoreWeaveAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addCoreWeaveAccountAddCoreWeaveAccount) __premarshalJSON() (*__premarshaladdCoreWeaveAccountAddCoreWeaveAccount, error) {
	var retval __premarshaladdCoreWeaveAccountAddCoreWeaveAccount

	retval.Id = v.Id
	retval.Name = v.CWAccountDetail.Name
	retval.State = v.CWAccountDetail.State
	retval.Namespace = v.CWAccountDetail.Namespace
	retval.Connected = v.CWAccountDetail.Connected
	return &retval, nil
}

// addCoreWeaveAccountResponse is returned by addCoreWeaveAccount on success.
type addCoreWeaveAccountResponse struct {
	AddCoreWeaveAccount addCoreWeaveAccountAddCoreWeaveAccount `json:"addCoreWeaveAccount"`
}

// GetAddCoreWeaveAccount returns addCoreWeaveAccountResponse.AddCoreWeaveAccount, and is useful for accessing the field via an interface.
func (v *addCoreWeaveAccountResponse) GetAddCoreWeaveAccount() addCoreWeaveAccountAddCoreWeaveAccount {
	return v.AddCoreWeaveAccount
}

// addDOAccountAddDOAccount includes the requested fields of the GraphQL type DOAccount.
type addDOAccountAddDOAccount struct {
	Id              uuid.UUID `json:"id"`
	DOAccountDetail `json:"-"`
}

// GetId returns addDOAccountAddDOAccount.Id, and is useful for accessing the field via an interface.
func (v *addDOAccountAddDOAccount) GetId() uuid.UUID { return v.Id }

// GetName returns addDOAccountAddDOAccount.Name, and is useful for accessing the field via an interface.
func (v *addDOAccountAddDOAccount) GetName() string { return v.DOAccountDetail.Name }

// GetState returns addDOAccountAddDOAccount.State, and is useful for accessing the field via an interface.
func (v *addDOAccountAddDOAccount) GetState() DOAccountState { return v.DOAccountDetail.State }

// GetAccessTokenPrefix returns addDOAccountAddDOAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *addDOAccountAddDOAccount) GetAccessTokenPrefix() *string {
	return v.DOAccountDetail.AccessTokenPrefix
}

// GetDefaultProject returns addDOAccountAddDOAccount.DefaultProject, and is useful for accessing the field via an interface.
func (v *addDOAccountAddDOAccount) GetDefaultProject() *string {
	return v.DOAccountDetail.DefaultProject
}

// GetConnected returns addDOAccountAddDOAccount.Connected, and is useful for accessing the field via an interface.
func (v *addDOAccountAddDOAccount) GetConnected() *bool { return v.DOAccountDetail.Connected }

func (v *addDOAccountAddDOAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addDOAccountAddDOAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.addDOAccountAddDOAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DOAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaladdDOAccountAddDOAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State DOAccountState `json:"state"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	DefaultProject *string `json:"defaultProject"`

	Connected *bool `json:"connected"`
}

func (v *addDOAccountAddDOAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addDOAccountAddDOAccount) __premarshalJSON() (*__premarshaladdDOAccountAddDOAccount, error) {
	var retval __premarshaladdDOAccountAddDOAccount

	retval.Id = v.Id
	retval.Name = v.DOAccountDetail.Name
	retval.State = v.DOAccountDetail.State
	retval.AccessTokenPrefix = v.DOAccountDetail.AccessTokenPrefix
	retval.DefaultProject = v.DOAccountDetail.DefaultProject
	retval.Connected = v.DOAccountDetail.Connected
	return &retval, nil
}

// addDOAccountResponse is returned by addDOAccount on success.
type addDOAccountResponse struct {
	AddDOAccount addDOAccountAddDOAccount `json:"addDOAccount"`
}

// GetAddDOAccount returns addDOAccountResponse.AddDOAccount, and is useful for accessing the field via an interface.
func (v *addDOAccountResponse) GetAddDOAccount() addDOAccountAddDOAccount { return v.AddDOAccount }

// addGCPAccountAddGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type addGCPAccountAddGCPAccount struct {
	Id               uuid.UUID `json:"id"`
	GCPAccountDetail `json:"-"`
}

// GetId returns addGCPAccountAddGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *addGCPAccountAddGCPAccount) GetId() uuid.UUID { return v.Id }

// GetName returns addGCPAccountAddGCPAccount.Name, and is useful for accessing the field via an interface.
func (v *addGCPAccountAddGCPAccount) GetName() string { return v.GCPAccountDetail.Name }

// GetState returns addGCPAccountAddGCPAccount.State, and is useful for accessing the field via an interface.
func (v *addGCPAccountAddGCPAccount) GetState() GCPAccountState { return v.GCPAccountDetail.State }

// GetProjectID returns addGCPAccountAddGCPAccount.ProjectID, and is useful for accessing the field via an interface.
func (v *addGCPAccountAddGCPAccount) GetProjectID() *string { return v.GCPAccountDetail.ProjectID }

// GetClientEmail returns addGCPAccountAddGCPAccount.ClientEmail, and is useful for accessing the field via an interface.
func (v *addGCPAccountAddGCPAccount) GetClientEmail() *string { return v.GCPAccountDetail.ClientEmail }

// GetConnected returns addGCPAccountAddGCPAccount.Connected, and is useful for accessing the field via an interface.
func (v *addGCPAccountAddGCPAccount) GetConnected() *bool { return v.GCPAccountDetail.Connected }

// GetError returns addGCPAccountAddGCPAccount.Error, and is useful for accessing the field via an interface.
func (v *addGCPAccountAddGCPAccount) GetError() *string { return v.GCPAccountDetail.Error }

func (v *addGCPAccountAddGCPAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addGCPAccountAddGCPAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.addGCPAccountAddGCPAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GCPAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaladdGCPAccountAddGCPAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State GCPAccountState `json:"state"`

	ProjectID *string `json:"projectID"`

	ClientEmail *string `json:"clientEmail"`

	Connected *bool `json:"connected"`

	Error *string `json:"error"`
}

func (v *addGCPAccountAddGCPAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addGCPAccountAddGCPAccount) __premarshalJSON() (*__premarshaladdGCPAccountAddGCPAccount, error) {
	var retval __premarshaladdGCPAccountAddGCPAccount

	retval.Id = v.Id
	retval.Name = v.GCPAccountDetail.Name
	retval.State = v.GCPAccountDetail.State
	retval.ProjectID = v.GCPAccountDetail.ProjectID
	retval.ClientEmail = v.GCPAccountDetail.ClientEmail
	retval.Connected = v.GCPAccountDetail.Connected
	retval.Error = v.GCPAccountDetail.Error
	return &retval, nil
}

// addGCPAccountResponse is returned by addGCPAccount on success.
type addGCPAccountResponse struct {
	AddGCPAccount addGCPAccountAddGCPAccount `json:"addGCPAccount"`
}

// GetAddGCPAccount returns addGCPAccountResponse.AddGCPAccount, and is useful for accessing the field via an interface.
func (v *addGCPAccountResponse) GetAddGCPAccount() addGCPAccountAddGCPAccount { return v.AddGCPAccount }

// addLinodeAccountAddLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type addLinodeAccountAddLinodeAccount struct {
	Id                  uuid.UUID `json:"id"`
	LinodeAccountDetail `json:"-"`
}

// GetId returns addLinodeAccountAddLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *addLinodeAccountAddLinodeAccount) GetId() uuid.UUID { return v.Id }

// GetName returns addLinodeAccountAddLinodeAccount.Name, and is useful for accessing the field via an interface.
func (v *addLinodeAccountAddLinodeAccount) GetName() string { return v.LinodeAccountDetail.Name }

// GetState returns addLinodeAccountAddLinodeAccount.State, and is useful for accessing the field via an interface.
func (v *addLinodeAccountAddLinodeAccount) GetState() CloudAccountState {
	return v.LinodeAccountDetail.State
}

// GetAccessTokenPrefix returns addLinodeAccountAddLinodeAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *addLinodeAccountAddLinodeAccount) GetAccessTokenPrefix() *string {
	return v.LinodeAccountDetail.AccessTokenPrefix
}

// GetConnected returns addLinodeAccountAddLinodeAccount.Connected, and is useful for accessing the field via an interface.
func (v *addLinodeAccountAddLinodeAccount) GetConnected() *bool {
	return v.LinodeAccountDetail.Connected
}

func (v *addLinodeAccountAddLinodeAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addLinodeAccountAddLinodeAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.addLinodeAccountAddLinodeAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.LinodeAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaladdLinodeAccountAddLinodeAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	Connected *bool `json:"connected"`
}

func (v *addLinodeAccountAddLinodeAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addLinodeAccountAddLinodeAccount) __premarshalJSON() (*__premarshaladdLinodeAccountAddLinodeAccount, error) {
	var retval __premarshaladdLinodeAccountAddLinodeAccount

	retval.Id = v.Id
	retval.Name = v.LinodeAccountDetail.Name
	retval.State = v.LinodeAccountDetail.State
	retval.AccessTokenPrefix = v.LinodeAccountDetail.AccessTokenPrefix
	retval.Connected = v.LinodeAccountDetail.Connected
	return &retval, nil
}

// addLinodeAccountResponse is returned by addLinodeAccount on success.
type addLinodeAccountResponse struct {
	AddLinodeAccount addLinodeAccountAddLinodeAccount `json:"addLinodeAccount"`
}

// GetAddLinodeAccount returns addLinodeAccountResponse.AddLinodeAccount, and is useful for accessing the field via an interface.
func (v *addLinodeAccountResponse) GetAddLinodeAccount() addLinodeAccountAddLinodeAccount {
	return v.AddLinodeAccount
}

// addProjectCollaboratorAddProjectCollaboratorRepo includes the requested fields of the GraphQL type Repo.
type addProjectCollaboratorAddProjectCollaboratorRepo struct {
	// - v0.RepoID
	Id            uuid.UUID                                                                          `json:"id"`
	Collaborators []addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator `json:"collaborators"`
}

// GetId returns addProjectCollaboratorAddProjectCollaboratorRepo.Id, and is useful for accessing the field via an interface.
func (v *addProjectCollaboratorAddProjectCollaboratorRepo) GetId() uuid.UUID { return v.Id }

// GetCollaborators returns addProjectCollaboratorAddProjectCollaboratorRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *addProjectCollaboratorAddProjectCollaboratorRepo) GetCollaborators() []addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator {
	return v.Collaborators
}

// addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator includes the requested fields of the GraphQL type ProjectCollaborator.
type addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator struct {
	CollaboratorCommon `json:"-"`
}

// GetId returns addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator.Id, and is useful for accessing the field via an interface.
func (v *addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator) GetId() uuid.UUID {
	return v.CollaboratorCommon.Id
}

// GetUser returns addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator.User, and is useful for accessing the field via an interface.
func (v *addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator) GetUser() CollaboratorCommonUser {
	return v.CollaboratorCommon.User
}

// GetRole returns addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator.Role, and is useful for accessing the field via an interface.
func (v *addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator) GetRole() ProjectCollaboratorRole {
	return v.CollaboratorCommon.Role
}

func (v *addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator
		graphql.NoUnmarshalJSON
	}
	firstPass.addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CollaboratorCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaladdProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator struct {
	Id uuid.UUID `json:"id"`

	User CollaboratorCommonUser `json:"user"`

	Role ProjectCollaboratorRole `json:"role"`
}

func (v *addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator) __premarshalJSON() (*__premarshaladdProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator, error) {
	var retval __premarshaladdProjectCollaboratorAddProjectCollaboratorRepoCollaboratorsProjectCollaborator

	retval.Id = v.CollaboratorCommon.Id
	retval.User = v.CollaboratorCommon.User
	retval.Role = v.CollaboratorCommon.Role
	return &retval, nil
}

// addProjectCollaboratorResponse is returned by addProjectCollaborator on success.
type addProjectCollaboratorResponse struct {
	AddProjectCollaborator addProjectCollaboratorAddProjectCollaboratorRepo `json:"addProjectCollaborator"`
}

// GetAddProjectCollaborator returns addProjectCollaboratorResponse.AddProjectCollaborator, and is useful for accessing the field via an interface.
func (v *addProjectCollaboratorResponse) GetAddProjectCollaborator() addProjectCollaboratorAddProjectCollaboratorRepo {
	return v.AddProjectCollaborator
}

// addRepoCustomDomainAddRepoCustomDomainRepo includes the requested fields of the GraphQL type Repo.
type addRepoCustomDomainAddRepoCustomDomainRepo struct {
	// - v0.RepoID
	Id             uuid.UUID                                                  `json:"id"`
	ClusterDomains []addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains `json:"clusterDomains"`
}

// GetId returns addRepoCustomDomainAddRepoCustomDomainRepo.Id, and is useful for accessing the field via an interface.
func (v *addRepoCustomDomainAddRepoCustomDomainRepo) GetId() uuid.UUID { return v.Id }

// GetClusterDomains returns addRepoCustomDomainAddRepoCustomDomainRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *addRepoCustomDomainAddRepoCustomDomainRepo) GetClusterDomains() []addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains {
	return v.ClusterDomains
}

// addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains includes the requested fields of the GraphQL type ClusterDomains.
type addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains struct {
	Id                   uuid.UUID `json:"id"`
	ClusterDomainsDetail `json:"-"`
}

// GetId returns addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains.Id, and is useful for accessing the field via an interface.
func (v *addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains) GetId() uuid.UUID { return v.Id }

// GetCluster returns addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains.Cluster, and is useful for accessing the field via an interface.
func (v *addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains) GetCluster() ClusterDomainsDetailCluster {
	return v.ClusterDomainsDetail.Cluster
}

// GetDomains returns addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains.Domains, and is useful for accessing the field via an interface.
func (v *addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains) GetDomains() []ClusterDomainsDetailDomainsCustomDomain {
	return v.ClusterDomainsDetail.Domains
}

func (v *addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains
		graphql.NoUnmarshalJSON
	}
	firstPass.addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDomainsDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaladdRepoCustomDomainAddRepoCustomDomainRepoClusterDomains struct {
	Id uuid.UUID `json:"id"`

	Cluster ClusterDomainsDetailCluster `json:"cluster"`

	Domains []ClusterDomainsDetailDomainsCustomDomain `json:"domains"`
}

func (v *addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addRepoCustomDomainAddRepoCustomDomainRepoClusterDomains) __premarshalJSON() (*__premarshaladdRepoCustomDomainAddRepoCustomDomainRepoClusterDomains, error) {
	var retval __premarshaladdRepoCustomDomainAddRepoCustomDomainRepoClusterDomains

	retval.Id = v.Id
	retval.Cluster = v.ClusterDomainsDetail.Cluster
	retval.Domains = v.ClusterDomainsDetail.Domains
	return &retval, nil
}

// addRepoCustomDomainResponse is returned by addRepoCustomDomain on success.
type addRepoCustomDomainResponse struct {
	AddRepoCustomDomain addRepoCustomDomainAddRepoCustomDomainRepo `json:"addRepoCustomDomain"`
}

// GetAddRepoCustomDomain returns addRepoCustomDomainResponse.AddRepoCustomDomain, and is useful for accessing the field via an interface.
func (v *addRepoCustomDomainResponse) GetAddRepoCustomDomain() addRepoCustomDomainAddRepoCustomDomainRepo {
	return v.AddRepoCustomDomain
}

// addTeamMemberAddTeamMemberTeam includes the requested fields of the GraphQL type Team.
type addTeamMemberAddTeamMemberTeam struct {
	TeamCommon `json:"-"`
	Members    []addTeamMemberAddTeamMemberTeamMembersUserTeamEdge `json:"members"`
	User       addTeamMemberAddTeamMemberTeamUser                  `json:"user"`
}

// GetMembers returns addTeamMemberAddTeamMemberTeam.Members, and is useful for accessing the field via an interface.
func (v *addTeamMemberAddTeamMemberTeam) GetMembers() []addTeamMemberAddTeamMemberTeamMembersUserTeamEdge {
	return v.Members
}

// GetUser returns addTeamMemberAddTeamMemberTeam.User, and is useful for accessing the field via an interface.
func (v *addTeamMemberAddTeamMemberTeam) GetUser() addTeamMemberAddTeamMemberTeamUser { return v.User }

// GetId returns addTeamMemberAddTeamMemberTeam.Id, and is useful for accessing the field via an interface.
func (v *addTeamMemberAddTeamMemberTeam) GetId() uuid.UUID { return v.TeamCommon.Id }

// GetPlan returns addTeamMemberAddTeamMemberTeam.Plan, and is useful for accessing the field via an interface.
func (v *addTeamMemberAddTeamMemberTeam) GetPlan() TeamCommonPlan { return v.TeamCommon.Plan }

func (v *addTeamMemberAddTeamMemberTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addTeamMemberAddTeamMemberTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.addTeamMemberAddTeamMemberTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaladdTeamMemberAddTeamMemberTeam struct {
	Members []addTeamMemberAddTeamMemberTeamMembersUserTeamEdge `json:"members"`

	User addTeamMemberAddTeamMemberTeamUser `json:"user"`

	Id uuid.UUID `json:"id"`

	Plan TeamCommonPlan `json:"plan"`
}

func (v *addTeamMemberAddTeamMemberTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addTeamMemberAddTeamMemberTeam) __premarshalJSON() (*__premarshaladdTeamMemberAddTeamMemberTeam, error) {
	var retval __premarshaladdTeamMemberAddTeamMemberTeam

	retval.Members = v.Members
	retval.User = v.User
	retval.Id = v.TeamCommon.Id
	retval.Plan = v.TeamCommon.Plan
	return &retval, nil
}

// addTeamMemberAddTeamMemberTeamMembersUserTeamEdge includes the requested fields of the GraphQL type UserTeamEdge.
type addTeamMemberAddTeamMemberTeamMembersUserTeamEdge struct {
	User addTeamMemberAddTeamMemberTeamMembersUserTeamEdgeUser `json:"user"`
	Role TeamMemberRole                                        `json:"role"`
}

// GetUser returns addTeamMemberAddTeamMemberTeamMembersUserTeamEdge.User, and is useful for accessing the field via an interface.
func (v *addTeamMemberAddTeamMemberTeamMembersUserTeamEdge) GetUser() addTeamMemberAddTeamMemberTeamMembersUserTeamEdgeUser {
	return v.User
}

// GetRole returns addTeamMemberAddTeamMemberTeamMembersUserTeamEdge.Role, and is useful for accessing the field via an interface.
func (v *addTeamMemberAddTeamMemberTeamMembersUserTeamEdge) GetRole() TeamMemberRole { return v.Role }

// addTeamMemberAddTeamMemberTeamMembersUserTeamEdgeUser includes the requested fields of the GraphQL type User.
type addTeamMemberAddTeamMemberTeamMembersUserTeamEdgeUser struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns addTeamMemberAddTeamMemberTeamMembersUserTeamEdgeUser.Id, and is useful for accessing the field via an interface.
func (v *addTeamMemberAddTeamMemberTeamMembersUserTeamEdgeUser) GetId() uuid.UUID { return v.Id }

// GetName returns addTeamMemberAddTeamMemberTeamMembersUserTeamEdgeUser.Name, and is useful for accessing the field via an interface.
func (v *addTeamMemberAddTeamMemberTeamMembersUserTeamEdgeUser) GetName() string { return v.Name }

// addTeamMemberAddTeamMemberTeamUser includes the requested fields of the GraphQL type User.
type addTeamMemberAddTeamMemberTeamUser struct {
	Id uuid.UUID `json:"id"`
	// Billing Overview only exists for users with subscriptions, i.e. a team
	BillingOverview *addTeamMemberAddTeamMemberTeamUserBillingOverview `json:"billingOverview"`
}

// GetId returns addTeamMemberAddTeamMemberTeamUser.Id, and is useful for accessing the field via an interface.
func (v *addTeamMemberAddTeamMemberTeamUser) GetId() uuid.UUID { return v.Id }

// GetBillingOverview returns addTeamMemberAddTeamMemberTeamUser.BillingOverview, and is useful for accessing the field via an interface.
func (v *addTeamMemberAddTeamMemberTeamUser) GetBillingOverview() *addTeamMemberAddTeamMemberTeamUserBillingOverview {
	return v.BillingOverview
}

// addTeamMemberAddTeamMemberTeamUserBillingOverview includes the requested fields of the GraphQL type BillingOverview.
type addTeamMemberAddTeamMemberTeamUserBillingOverview struct {
	BillingOverviewDetail `json:"-"`
}

// GetCurrentProducts returns addTeamMemberAddTeamMemberTeamUserBillingOverview.CurrentProducts, and is useful for accessing the field via an interface.
func (v *addTeamMemberAddTeamMemberTeamUserBillingOverview) GetCurrentProducts() []BillingOverviewDetailCurrentProductsProduct {
	return v.BillingOverviewDetail.CurrentProducts
}

// GetExternalLinks returns addTeamMemberAddTeamMemberTeamUserBillingOverview.ExternalLinks, and is useful for accessing the field via an interface.
func (v *addTeamMemberAddTeamMemberTeamUserBillingOverview) GetExternalLinks() *BillingOverviewDetailExternalLinksExternalBillingProviderLinks {
	return v.BillingOverviewDetail.ExternalLinks
}

// GetSubscriptionUsageAllowed returns addTeamMemberAddTeamMemberTeamUserBillingOverview.SubscriptionUsageAllowed, and is useful for accessing the field via an interface.
func (v *addTeamMemberAddTeamMemberTeamUserBillingOverview) GetSubscriptionUsageAllowed() BillingOverviewDetailSubscriptionUsageAllowed {
	return v.BillingOverviewDetail.SubscriptionUsageAllowed
}

func (v *addTeamMemberAddTeamMemberTeamUserBillingOverview) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addTeamMemberAddTeamMemberTeamUserBillingOverview
		graphql.NoUnmarshalJSON
	}
	firstPass.addTeamMemberAddTeamMemberTeamUserBillingOverview = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BillingOverviewDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaladdTeamMemberAddTeamMemberTeamUserBillingOverview struct {
	CurrentProducts []json.RawMessage `json:"currentProducts"`

	ExternalLinks *BillingOverviewDetailExternalLinksExternalBillingProviderLinks `json:"externalLinks"`

	SubscriptionUsageAllowed BillingOverviewDetailSubscriptionUsageAllowed `json:"subscriptionUsageAllowed"`
}

func (v *addTeamMemberAddTeamMemberTeamUserBillingOverview) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addTeamMemberAddTeamMemberTeamUserBillingOverview) __premarshalJSON() (*__premarshaladdTeamMemberAddTeamMemberTeamUserBillingOverview, error) {
	var retval __premarshaladdTeamMemberAddTeamMemberTeamUserBillingOverview

	{

		dst := &retval.CurrentProducts
		src := v.BillingOverviewDetail.CurrentProducts
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalBillingOverviewDetailCurrentProductsProduct(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal addTeamMemberAddTeamMemberTeamUserBillingOverview.BillingOverviewDetail.CurrentProducts: %w", err)
			}
		}
	}
	retval.ExternalLinks = v.BillingOverviewDetail.ExternalLinks
	retval.SubscriptionUsageAllowed = v.BillingOverviewDetail.SubscriptionUsageAllowed
	return &retval, nil
}

// addTeamMemberResponse is returned by addTeamMember on success.
type addTeamMemberResponse struct {
	AddTeamMember addTeamMemberAddTeamMemberTeam `json:"addTeamMember"`
}

// GetAddTeamMember returns addTeamMemberResponse.AddTeamMember, and is useful for accessing the field via an interface.
func (v *addTeamMemberResponse) GetAddTeamMember() addTeamMemberAddTeamMemberTeam {
	return v.AddTeamMember
}

// addVultrAccountAddVultrAccount includes the requested fields of the GraphQL type VultrAccount.
type addVultrAccountAddVultrAccount struct {
	Id                 uuid.UUID `json:"id"`
	VultrAccountDetail `json:"-"`
}

// GetId returns addVultrAccountAddVultrAccount.Id, and is useful for accessing the field via an interface.
func (v *addVultrAccountAddVultrAccount) GetId() uuid.UUID { return v.Id }

// GetName returns addVultrAccountAddVultrAccount.Name, and is useful for accessing the field via an interface.
func (v *addVultrAccountAddVultrAccount) GetName() string { return v.VultrAccountDetail.Name }

// GetState returns addVultrAccountAddVultrAccount.State, and is useful for accessing the field via an interface.
func (v *addVultrAccountAddVultrAccount) GetState() CloudAccountState {
	return v.VultrAccountDetail.State
}

// GetConnected returns addVultrAccountAddVultrAccount.Connected, and is useful for accessing the field via an interface.
func (v *addVultrAccountAddVultrAccount) GetConnected() *bool { return v.VultrAccountDetail.Connected }

func (v *addVultrAccountAddVultrAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addVultrAccountAddVultrAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.addVultrAccountAddVultrAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.VultrAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaladdVultrAccountAddVultrAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	Connected *bool `json:"connected"`
}

func (v *addVultrAccountAddVultrAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addVultrAccountAddVultrAccount) __premarshalJSON() (*__premarshaladdVultrAccountAddVultrAccount, error) {
	var retval __premarshaladdVultrAccountAddVultrAccount

	retval.Id = v.Id
	retval.Name = v.VultrAccountDetail.Name
	retval.State = v.VultrAccountDetail.State
	retval.Connected = v.VultrAccountDetail.Connected
	return &retval, nil
}

// addVultrAccountResponse is returned by addVultrAccount on success.
type addVultrAccountResponse struct {
	AddVultrAccount addVultrAccountAddVultrAccount `json:"addVultrAccount"`
}

// GetAddVultrAccount returns addVultrAccountResponse.AddVultrAccount, and is useful for accessing the field via an interface.
func (v *addVultrAccountResponse) GetAddVultrAccount() addVultrAccountAddVultrAccount {
	return v.AddVultrAccount
}

// approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow includes the requested fields of the GraphQL type BlueprintDriverWorkflow.
// The GraphQL type's documentation follows.
//
// CAUTION: Experimental!
//
// Provides a similar interface to the ProjectV3Workflow type.
type approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow struct {
	Id                            uuid.UUID `json:"id"`
	BlueprintDriverWorkflowDetail `json:"-"`
}

// GetId returns approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow.Id, and is useful for accessing the field via an interface.
func (v *approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow) GetId() uuid.UUID { return v.Id }

// GetStatus returns approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow.Status, and is useful for accessing the field via an interface.
func (v *approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow) GetStatus() ProjectV3WorkflowStatus {
	return v.BlueprintDriverWorkflowDetail.Status
}

// GetSteps returns approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow.Steps, and is useful for accessing the field via an interface.
func (v *approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow) GetSteps() []BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep {
	return v.BlueprintDriverWorkflowDetail.Steps
}

// GetCreatedAt returns approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow.CreatedAt, and is useful for accessing the field via an interface.
func (v *approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow) GetCreatedAt() time.Time {
	return v.BlueprintDriverWorkflowDetail.CreatedAt
}

// GetUpdatedAt returns approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow.UpdatedAt, and is useful for accessing the field via an interface.
func (v *approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow) GetUpdatedAt() time.Time {
	return v.BlueprintDriverWorkflowDetail.UpdatedAt
}

func (v *approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow
		graphql.NoUnmarshalJSON
	}
	firstPass.approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintDriverWorkflowDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalapproveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow struct {
	Id uuid.UUID `json:"id"`

	Status ProjectV3WorkflowStatus `json:"status"`

	Steps []BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep `json:"steps"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow) __premarshalJSON() (*__premarshalapproveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow, error) {
	var retval __premarshalapproveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow

	retval.Id = v.Id
	retval.Status = v.BlueprintDriverWorkflowDetail.Status
	retval.Steps = v.BlueprintDriverWorkflowDetail.Steps
	retval.CreatedAt = v.BlueprintDriverWorkflowDetail.CreatedAt
	retval.UpdatedAt = v.BlueprintDriverWorkflowDetail.UpdatedAt
	return &retval, nil
}

// approveBlueprintDriverWorkflowResponse is returned by approveBlueprintDriverWorkflow on success.
type approveBlueprintDriverWorkflowResponse struct {
	ApproveBlueprintDriverWorkflow *approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow `json:"approveBlueprintDriverWorkflow"`
}

// GetApproveBlueprintDriverWorkflow returns approveBlueprintDriverWorkflowResponse.ApproveBlueprintDriverWorkflow, and is useful for accessing the field via an interface.
func (v *approveBlueprintDriverWorkflowResponse) GetApproveBlueprintDriverWorkflow() *approveBlueprintDriverWorkflowApproveBlueprintDriverWorkflow {
	return v.ApproveBlueprintDriverWorkflow
}

// awsPolicyJsonResponse is returned by awsPolicyJson on success.
type awsPolicyJsonResponse struct {
	User awsPolicyJsonUser `json:"user"`
}

// GetUser returns awsPolicyJsonResponse.User, and is useful for accessing the field via an interface.
func (v *awsPolicyJsonResponse) GetUser() awsPolicyJsonUser { return v.User }

// awsPolicyJsonUser includes the requested fields of the GraphQL type User.
type awsPolicyJsonUser struct {
	AwsAccount *awsPolicyJsonUserAwsAccountAWSAccount `json:"awsAccount"`
}

// GetAwsAccount returns awsPolicyJsonUser.AwsAccount, and is useful for accessing the field via an interface.
func (v *awsPolicyJsonUser) GetAwsAccount() *awsPolicyJsonUserAwsAccountAWSAccount {
	return v.AwsAccount
}

// awsPolicyJsonUserAwsAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type awsPolicyJsonUserAwsAccountAWSAccount struct {
	AwsPolicyJson *awsPolicyJsonUserAwsAccountAWSAccountAwsPolicyJson `json:"awsPolicyJson"`
}

// GetAwsPolicyJson returns awsPolicyJsonUserAwsAccountAWSAccount.AwsPolicyJson, and is useful for accessing the field via an interface.
func (v *awsPolicyJsonUserAwsAccountAWSAccount) GetAwsPolicyJson() *awsPolicyJsonUserAwsAccountAWSAccountAwsPolicyJson {
	return v.AwsPolicyJson
}

// awsPolicyJsonUserAwsAccountAWSAccountAwsPolicyJson includes the requested fields of the GraphQL type AwsPolicyJson.
type awsPolicyJsonUserAwsAccountAWSAccountAwsPolicyJson struct {
	AwsPolicyJson string `json:"awsPolicyJson"`
}

// GetAwsPolicyJson returns awsPolicyJsonUserAwsAccountAWSAccountAwsPolicyJson.AwsPolicyJson, and is useful for accessing the field via an interface.
func (v *awsPolicyJsonUserAwsAccountAWSAccountAwsPolicyJson) GetAwsPolicyJson() string {
	return v.AwsPolicyJson
}

// blueprintCurrentUser includes the requested fields of the GraphQL type User.
type blueprintCurrentUser struct {
	Id          uuid.UUID                                                 `json:"id"`
	Permissions *blueprintCurrentUserPermissionsUserPermissionsConnection `json:"permissions"`
}

// GetId returns blueprintCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *blueprintCurrentUser) GetId() uuid.UUID { return v.Id }

// GetPermissions returns blueprintCurrentUser.Permissions, and is useful for accessing the field via an interface.
func (v *blueprintCurrentUser) GetPermissions() *blueprintCurrentUserPermissionsUserPermissionsConnection {
	return v.Permissions
}

// blueprintCurrentUserPermissionsUserPermissionsConnection includes the requested fields of the GraphQL type UserPermissionsConnection.
type blueprintCurrentUserPermissionsUserPermissionsConnection struct {
	User *blueprintCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection `json:"user"`
}

// GetUser returns blueprintCurrentUserPermissionsUserPermissionsConnection.User, and is useful for accessing the field via an interface.
func (v *blueprintCurrentUserPermissionsUserPermissionsConnection) GetUser() *blueprintCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection {
	return v.User
}

// blueprintCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection includes the requested fields of the GraphQL type UserPermissionsUserConnection.
type blueprintCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection struct {
	Mutations []string `json:"mutations"`
}

// GetMutations returns blueprintCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection.Mutations, and is useful for accessing the field via an interface.
func (v *blueprintCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection) GetMutations() []string {
	return v.Mutations
}

// blueprintDriverWorkflowResponse is returned by blueprintDriverWorkflow on success.
type blueprintDriverWorkflowResponse struct {
	User blueprintDriverWorkflowUser `json:"user"`
}

// GetUser returns blueprintDriverWorkflowResponse.User, and is useful for accessing the field via an interface.
func (v *blueprintDriverWorkflowResponse) GetUser() blueprintDriverWorkflowUser { return v.User }

// blueprintDriverWorkflowUser includes the requested fields of the GraphQL type User.
type blueprintDriverWorkflowUser struct {
	BlueprintDriverWorkflow *blueprintDriverWorkflowUserBlueprintDriverWorkflow `json:"blueprintDriverWorkflow"`
}

// GetBlueprintDriverWorkflow returns blueprintDriverWorkflowUser.BlueprintDriverWorkflow, and is useful for accessing the field via an interface.
func (v *blueprintDriverWorkflowUser) GetBlueprintDriverWorkflow() *blueprintDriverWorkflowUserBlueprintDriverWorkflow {
	return v.BlueprintDriverWorkflow
}

// blueprintDriverWorkflowUserBlueprintDriverWorkflow includes the requested fields of the GraphQL type BlueprintDriverWorkflow.
// The GraphQL type's documentation follows.
//
// CAUTION: Experimental!
//
// Provides a similar interface to the ProjectV3Workflow type.
type blueprintDriverWorkflowUserBlueprintDriverWorkflow struct {
	BlueprintDriverWorkflowDetail `json:"-"`
}

// GetId returns blueprintDriverWorkflowUserBlueprintDriverWorkflow.Id, and is useful for accessing the field via an interface.
func (v *blueprintDriverWorkflowUserBlueprintDriverWorkflow) GetId() uuid.UUID {
	return v.BlueprintDriverWorkflowDetail.Id
}

// GetStatus returns blueprintDriverWorkflowUserBlueprintDriverWorkflow.Status, and is useful for accessing the field via an interface.
func (v *blueprintDriverWorkflowUserBlueprintDriverWorkflow) GetStatus() ProjectV3WorkflowStatus {
	return v.BlueprintDriverWorkflowDetail.Status
}

// GetSteps returns blueprintDriverWorkflowUserBlueprintDriverWorkflow.Steps, and is useful for accessing the field via an interface.
func (v *blueprintDriverWorkflowUserBlueprintDriverWorkflow) GetSteps() []BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep {
	return v.BlueprintDriverWorkflowDetail.Steps
}

// GetCreatedAt returns blueprintDriverWorkflowUserBlueprintDriverWorkflow.CreatedAt, and is useful for accessing the field via an interface.
func (v *blueprintDriverWorkflowUserBlueprintDriverWorkflow) GetCreatedAt() time.Time {
	return v.BlueprintDriverWorkflowDetail.CreatedAt
}

// GetUpdatedAt returns blueprintDriverWorkflowUserBlueprintDriverWorkflow.UpdatedAt, and is useful for accessing the field via an interface.
func (v *blueprintDriverWorkflowUserBlueprintDriverWorkflow) GetUpdatedAt() time.Time {
	return v.BlueprintDriverWorkflowDetail.UpdatedAt
}

func (v *blueprintDriverWorkflowUserBlueprintDriverWorkflow) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*blueprintDriverWorkflowUserBlueprintDriverWorkflow
		graphql.NoUnmarshalJSON
	}
	firstPass.blueprintDriverWorkflowUserBlueprintDriverWorkflow = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintDriverWorkflowDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalblueprintDriverWorkflowUserBlueprintDriverWorkflow struct {
	Id uuid.UUID `json:"id"`

	Status ProjectV3WorkflowStatus `json:"status"`

	Steps []BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep `json:"steps"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *blueprintDriverWorkflowUserBlueprintDriverWorkflow) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *blueprintDriverWorkflowUserBlueprintDriverWorkflow) __premarshalJSON() (*__premarshalblueprintDriverWorkflowUserBlueprintDriverWorkflow, error) {
	var retval __premarshalblueprintDriverWorkflowUserBlueprintDriverWorkflow

	retval.Id = v.BlueprintDriverWorkflowDetail.Id
	retval.Status = v.BlueprintDriverWorkflowDetail.Status
	retval.Steps = v.BlueprintDriverWorkflowDetail.Steps
	retval.CreatedAt = v.BlueprintDriverWorkflowDetail.CreatedAt
	retval.UpdatedAt = v.BlueprintDriverWorkflowDetail.UpdatedAt
	return &retval, nil
}

// blueprintResponse is returned by blueprint on success.
type blueprintResponse struct {
	CurrentUser blueprintCurrentUser `json:"currentUser"`
	User        blueprintUser        `json:"user"`
}

// GetCurrentUser returns blueprintResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *blueprintResponse) GetCurrentUser() blueprintCurrentUser { return v.CurrentUser }

// GetUser returns blueprintResponse.User, and is useful for accessing the field via an interface.
func (v *blueprintResponse) GetUser() blueprintUser { return v.User }

// blueprintUser includes the requested fields of the GraphQL type User.
type blueprintUser struct {
	Id        uuid.UUID               `json:"id"`
	Login     string                  `json:"login"`
	Blueprint *blueprintUserBlueprint `json:"blueprint"`
}

// GetId returns blueprintUser.Id, and is useful for accessing the field via an interface.
func (v *blueprintUser) GetId() uuid.UUID { return v.Id }

// GetLogin returns blueprintUser.Login, and is useful for accessing the field via an interface.
func (v *blueprintUser) GetLogin() string { return v.Login }

// GetBlueprint returns blueprintUser.Blueprint, and is useful for accessing the field via an interface.
func (v *blueprintUser) GetBlueprint() *blueprintUserBlueprint { return v.Blueprint }

// blueprintUserBlueprint includes the requested fields of the GraphQL type Blueprint.
type blueprintUserBlueprint struct {
	BlueprintList `json:"-"`
}

// GetId returns blueprintUserBlueprint.Id, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetId() uuid.UUID { return v.BlueprintList.Id }

// GetDescription returns blueprintUserBlueprint.Description, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetDescription() *string { return v.BlueprintList.Description }

// GetDisplayName returns blueprintUserBlueprint.DisplayName, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetDisplayName() string { return v.BlueprintList.DisplayName }

// GetIsOfficial returns blueprintUserBlueprint.IsOfficial, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetIsOfficial() *bool { return v.BlueprintList.IsOfficial }

// GetLogoUrl returns blueprintUserBlueprint.LogoUrl, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetLogoUrl() *string { return v.BlueprintList.LogoUrl }

// GetEnabled returns blueprintUserBlueprint.Enabled, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetEnabled() *bool { return v.BlueprintList.Enabled }

// GetPublished returns blueprintUserBlueprint.Published, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetPublished() bool { return v.BlueprintList.Published }

// GetProjectCount returns blueprintUserBlueprint.ProjectCount, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetProjectCount() int { return v.BlueprintList.ProjectCount }

// GetRichInputSchema returns blueprintUserBlueprint.RichInputSchema, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetRichInputSchema() *string { return v.BlueprintList.RichInputSchema }

// GetAllowedCloudProviders returns blueprintUserBlueprint.AllowedCloudProviders, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetAllowedCloudProviders() []CloudProvider {
	return v.BlueprintList.AllowedCloudProviders
}

// GetSlug returns blueprintUserBlueprint.Slug, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetSlug() string { return v.BlueprintList.Slug }

// GetTags returns blueprintUserBlueprint.Tags, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetTags() []string { return v.BlueprintList.Tags }

// GetType returns blueprintUserBlueprint.Type, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetType() BlueprintType { return v.BlueprintList.Type }

// GetConfiguration returns blueprintUserBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetConfiguration() *BlueprintListConfigurationBlueprintConfiguration {
	return v.BlueprintList.Configuration
}

// GetOwner returns blueprintUserBlueprint.Owner, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetOwner() *BlueprintListOwnerBlueprintOwner {
	return v.BlueprintList.Owner
}

// GetVariables returns blueprintUserBlueprint.Variables, and is useful for accessing the field via an interface.
func (v *blueprintUserBlueprint) GetVariables() []BlueprintListVariablesBlueprintVariableSpec {
	return v.BlueprintList.Variables
}

func (v *blueprintUserBlueprint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*blueprintUserBlueprint
		graphql.NoUnmarshalJSON
	}
	firstPass.blueprintUserBlueprint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalblueprintUserBlueprint struct {
	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	DisplayName string `json:"displayName"`

	IsOfficial *bool `json:"isOfficial"`

	LogoUrl *string `json:"logoUrl"`

	Enabled *bool `json:"enabled"`

	Published bool `json:"published"`

	ProjectCount int `json:"projectCount"`

	RichInputSchema *string `json:"richInputSchema"`

	AllowedCloudProviders []CloudProvider `json:"allowedCloudProviders"`

	Slug string `json:"slug"`

	Tags []string `json:"tags"`

	Type BlueprintType `json:"type"`

	Configuration json.RawMessage `json:"configuration"`

	Owner *BlueprintListOwnerBlueprintOwner `json:"owner"`

	Variables []BlueprintListVariablesBlueprintVariableSpec `json:"variables"`
}

func (v *blueprintUserBlueprint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *blueprintUserBlueprint) __premarshalJSON() (*__premarshalblueprintUserBlueprint, error) {
	var retval __premarshalblueprintUserBlueprint

	retval.Id = v.BlueprintList.Id
	retval.Description = v.BlueprintList.Description
	retval.DisplayName = v.BlueprintList.DisplayName
	retval.IsOfficial = v.BlueprintList.IsOfficial
	retval.LogoUrl = v.BlueprintList.LogoUrl
	retval.Enabled = v.BlueprintList.Enabled
	retval.Published = v.BlueprintList.Published
	retval.ProjectCount = v.BlueprintList.ProjectCount
	retval.RichInputSchema = v.BlueprintList.RichInputSchema
	retval.AllowedCloudProviders = v.BlueprintList.AllowedCloudProviders
	retval.Slug = v.BlueprintList.Slug
	retval.Tags = v.BlueprintList.Tags
	retval.Type = v.BlueprintList.Type
	{

		dst := &retval.Configuration
		src := v.BlueprintList.Configuration
		if src != nil {
			var err error
			*dst, err = __marshalBlueprintListConfigurationBlueprintConfiguration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal blueprintUserBlueprint.BlueprintList.Configuration: %w", err)
			}
		}
	}
	retval.Owner = v.BlueprintList.Owner
	retval.Variables = v.BlueprintList.Variables
	return &retval, nil
}

// blueprintWithProjectsCurrentUser includes the requested fields of the GraphQL type User.
type blueprintWithProjectsCurrentUser struct {
	Id          uuid.UUID                                                             `json:"id"`
	Permissions *blueprintWithProjectsCurrentUserPermissionsUserPermissionsConnection `json:"permissions"`
}

// GetId returns blueprintWithProjectsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetPermissions returns blueprintWithProjectsCurrentUser.Permissions, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsCurrentUser) GetPermissions() *blueprintWithProjectsCurrentUserPermissionsUserPermissionsConnection {
	return v.Permissions
}

// blueprintWithProjectsCurrentUserPermissionsUserPermissionsConnection includes the requested fields of the GraphQL type UserPermissionsConnection.
type blueprintWithProjectsCurrentUserPermissionsUserPermissionsConnection struct {
	User *blueprintWithProjectsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection `json:"user"`
}

// GetUser returns blueprintWithProjectsCurrentUserPermissionsUserPermissionsConnection.User, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsCurrentUserPermissionsUserPermissionsConnection) GetUser() *blueprintWithProjectsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection {
	return v.User
}

// blueprintWithProjectsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection includes the requested fields of the GraphQL type UserPermissionsUserConnection.
type blueprintWithProjectsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection struct {
	Mutations []string `json:"mutations"`
}

// GetMutations returns blueprintWithProjectsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection.Mutations, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection) GetMutations() []string {
	return v.Mutations
}

// blueprintWithProjectsResponse is returned by blueprintWithProjects on success.
type blueprintWithProjectsResponse struct {
	CurrentUser blueprintWithProjectsCurrentUser `json:"currentUser"`
	User        blueprintWithProjectsUser        `json:"user"`
}

// GetCurrentUser returns blueprintWithProjectsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsResponse) GetCurrentUser() blueprintWithProjectsCurrentUser {
	return v.CurrentUser
}

// GetUser returns blueprintWithProjectsResponse.User, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsResponse) GetUser() blueprintWithProjectsUser { return v.User }

// blueprintWithProjectsUser includes the requested fields of the GraphQL type User.
type blueprintWithProjectsUser struct {
	Id                uuid.UUID                                                             `json:"id"`
	Login             string                                                                `json:"login"`
	Blueprint         *blueprintWithProjectsUserBlueprint                                   `json:"blueprint"`
	ProjectV3Adapters *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
}

// GetId returns blueprintWithProjectsUser.Id, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUser) GetId() uuid.UUID { return v.Id }

// GetLogin returns blueprintWithProjectsUser.Login, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUser) GetLogin() string { return v.Login }

// GetBlueprint returns blueprintWithProjectsUser.Blueprint, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUser) GetBlueprint() *blueprintWithProjectsUserBlueprint {
	return v.Blueprint
}

// GetProjectV3Adapters returns blueprintWithProjectsUser.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUser) GetProjectV3Adapters() *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// blueprintWithProjectsUserBlueprint includes the requested fields of the GraphQL type Blueprint.
type blueprintWithProjectsUserBlueprint struct {
	BlueprintList `json:"-"`
}

// GetId returns blueprintWithProjectsUserBlueprint.Id, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetId() uuid.UUID { return v.BlueprintList.Id }

// GetDescription returns blueprintWithProjectsUserBlueprint.Description, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetDescription() *string {
	return v.BlueprintList.Description
}

// GetDisplayName returns blueprintWithProjectsUserBlueprint.DisplayName, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetDisplayName() string {
	return v.BlueprintList.DisplayName
}

// GetIsOfficial returns blueprintWithProjectsUserBlueprint.IsOfficial, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetIsOfficial() *bool { return v.BlueprintList.IsOfficial }

// GetLogoUrl returns blueprintWithProjectsUserBlueprint.LogoUrl, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetLogoUrl() *string { return v.BlueprintList.LogoUrl }

// GetEnabled returns blueprintWithProjectsUserBlueprint.Enabled, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetEnabled() *bool { return v.BlueprintList.Enabled }

// GetPublished returns blueprintWithProjectsUserBlueprint.Published, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetPublished() bool { return v.BlueprintList.Published }

// GetProjectCount returns blueprintWithProjectsUserBlueprint.ProjectCount, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetProjectCount() int {
	return v.BlueprintList.ProjectCount
}

// GetRichInputSchema returns blueprintWithProjectsUserBlueprint.RichInputSchema, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetRichInputSchema() *string {
	return v.BlueprintList.RichInputSchema
}

// GetAllowedCloudProviders returns blueprintWithProjectsUserBlueprint.AllowedCloudProviders, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetAllowedCloudProviders() []CloudProvider {
	return v.BlueprintList.AllowedCloudProviders
}

// GetSlug returns blueprintWithProjectsUserBlueprint.Slug, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetSlug() string { return v.BlueprintList.Slug }

// GetTags returns blueprintWithProjectsUserBlueprint.Tags, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetTags() []string { return v.BlueprintList.Tags }

// GetType returns blueprintWithProjectsUserBlueprint.Type, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetType() BlueprintType { return v.BlueprintList.Type }

// GetConfiguration returns blueprintWithProjectsUserBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetConfiguration() *BlueprintListConfigurationBlueprintConfiguration {
	return v.BlueprintList.Configuration
}

// GetOwner returns blueprintWithProjectsUserBlueprint.Owner, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetOwner() *BlueprintListOwnerBlueprintOwner {
	return v.BlueprintList.Owner
}

// GetVariables returns blueprintWithProjectsUserBlueprint.Variables, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserBlueprint) GetVariables() []BlueprintListVariablesBlueprintVariableSpec {
	return v.BlueprintList.Variables
}

func (v *blueprintWithProjectsUserBlueprint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*blueprintWithProjectsUserBlueprint
		graphql.NoUnmarshalJSON
	}
	firstPass.blueprintWithProjectsUserBlueprint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalblueprintWithProjectsUserBlueprint struct {
	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	DisplayName string `json:"displayName"`

	IsOfficial *bool `json:"isOfficial"`

	LogoUrl *string `json:"logoUrl"`

	Enabled *bool `json:"enabled"`

	Published bool `json:"published"`

	ProjectCount int `json:"projectCount"`

	RichInputSchema *string `json:"richInputSchema"`

	AllowedCloudProviders []CloudProvider `json:"allowedCloudProviders"`

	Slug string `json:"slug"`

	Tags []string `json:"tags"`

	Type BlueprintType `json:"type"`

	Configuration json.RawMessage `json:"configuration"`

	Owner *BlueprintListOwnerBlueprintOwner `json:"owner"`

	Variables []BlueprintListVariablesBlueprintVariableSpec `json:"variables"`
}

func (v *blueprintWithProjectsUserBlueprint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *blueprintWithProjectsUserBlueprint) __premarshalJSON() (*__premarshalblueprintWithProjectsUserBlueprint, error) {
	var retval __premarshalblueprintWithProjectsUserBlueprint

	retval.Id = v.BlueprintList.Id
	retval.Description = v.BlueprintList.Description
	retval.DisplayName = v.BlueprintList.DisplayName
	retval.IsOfficial = v.BlueprintList.IsOfficial
	retval.LogoUrl = v.BlueprintList.LogoUrl
	retval.Enabled = v.BlueprintList.Enabled
	retval.Published = v.BlueprintList.Published
	retval.ProjectCount = v.BlueprintList.ProjectCount
	retval.RichInputSchema = v.BlueprintList.RichInputSchema
	retval.AllowedCloudProviders = v.BlueprintList.AllowedCloudProviders
	retval.Slug = v.BlueprintList.Slug
	retval.Tags = v.BlueprintList.Tags
	retval.Type = v.BlueprintList.Type
	{

		dst := &retval.Configuration
		src := v.BlueprintList.Configuration
		if src != nil {
			var err error
			*dst, err = __marshalBlueprintListConfigurationBlueprintConfiguration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal blueprintWithProjectsUserBlueprint.BlueprintList.Configuration: %w", err)
			}
		}
	}
	retval.Owner = v.BlueprintList.Owner
	retval.Variables = v.BlueprintList.Variables
	return &retval, nil
}

// blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnection struct {
	TotalCount int                                                                                         `json:"totalCount"`
	Nodes      []blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter `json:"nodes"`
}

// GetTotalCount returns blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter {
	return v.Nodes
}

// blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter includes the requested fields of the GraphQL type ProjectV3Adapter.
type blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter struct {
	BridgeProjectV3List `json:"-"`
}

// GetName returns blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Name, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetName() string {
	return v.BridgeProjectV3List.Name
}

// GetId returns blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Id, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetId() uuid.UUID {
	return v.BridgeProjectV3List.Id
}

// GetStatus returns blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Status, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetStatus() *ProjectV3AdapterStatus {
	return v.BridgeProjectV3List.Status
}

// GetIsDeployV2 returns blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.IsDeployV2, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetIsDeployV2() bool {
	return v.BridgeProjectV3List.IsDeployV2
}

// GetProjectV3 returns blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.ProjectV3, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetProjectV3() *BridgeProjectV3ListProjectV3 {
	return v.BridgeProjectV3List.ProjectV3
}

// GetRepo returns blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Repo, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetRepo() *BridgeProjectV3ListRepo {
	return v.BridgeProjectV3List.Repo
}

// GetProject returns blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Project, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetProject() *BridgeProjectV3ListProject {
	return v.BridgeProjectV3List.Project
}

// GetProjectEnvironment returns blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetProjectEnvironment() *BridgeProjectV3ListProjectEnvironment {
	return v.BridgeProjectV3List.ProjectEnvironment
}

// GetUpdatedAt returns blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetUpdatedAt() time.Time {
	return v.BridgeProjectV3List.UpdatedAt
}

func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter
		graphql.NoUnmarshalJSON
	}
	firstPass.blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BridgeProjectV3List)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalblueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter struct {
	Name string `json:"name"`

	Id uuid.UUID `json:"id"`

	Status *ProjectV3AdapterStatus `json:"status"`

	IsDeployV2 bool `json:"isDeployV2"`

	ProjectV3 *BridgeProjectV3ListProjectV3 `json:"projectV3"`

	Repo *BridgeProjectV3ListRepo `json:"repo"`

	Project *BridgeProjectV3ListProject `json:"project"`

	ProjectEnvironment *BridgeProjectV3ListProjectEnvironment `json:"projectEnvironment"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *blueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) __premarshalJSON() (*__premarshalblueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter, error) {
	var retval __premarshalblueprintWithProjectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter

	retval.Name = v.BridgeProjectV3List.Name
	retval.Id = v.BridgeProjectV3List.Id
	retval.Status = v.BridgeProjectV3List.Status
	retval.IsDeployV2 = v.BridgeProjectV3List.IsDeployV2
	retval.ProjectV3 = v.BridgeProjectV3List.ProjectV3
	retval.Repo = v.BridgeProjectV3List.Repo
	retval.Project = v.BridgeProjectV3List.Project
	retval.ProjectEnvironment = v.BridgeProjectV3List.ProjectEnvironment
	retval.UpdatedAt = v.BridgeProjectV3List.UpdatedAt
	return &retval, nil
}

// blueprintsCurrentUser includes the requested fields of the GraphQL type User.
type blueprintsCurrentUser struct {
	Id          uuid.UUID                                                  `json:"id"`
	Permissions *blueprintsCurrentUserPermissionsUserPermissionsConnection `json:"permissions"`
}

// GetId returns blueprintsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *blueprintsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetPermissions returns blueprintsCurrentUser.Permissions, and is useful for accessing the field via an interface.
func (v *blueprintsCurrentUser) GetPermissions() *blueprintsCurrentUserPermissionsUserPermissionsConnection {
	return v.Permissions
}

// blueprintsCurrentUserPermissionsUserPermissionsConnection includes the requested fields of the GraphQL type UserPermissionsConnection.
type blueprintsCurrentUserPermissionsUserPermissionsConnection struct {
	User *blueprintsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection `json:"user"`
}

// GetUser returns blueprintsCurrentUserPermissionsUserPermissionsConnection.User, and is useful for accessing the field via an interface.
func (v *blueprintsCurrentUserPermissionsUserPermissionsConnection) GetUser() *blueprintsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection {
	return v.User
}

// blueprintsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection includes the requested fields of the GraphQL type UserPermissionsUserConnection.
type blueprintsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection struct {
	Mutations []string `json:"mutations"`
}

// GetMutations returns blueprintsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection.Mutations, and is useful for accessing the field via an interface.
func (v *blueprintsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection) GetMutations() []string {
	return v.Mutations
}

// blueprintsResponse is returned by blueprints on success.
type blueprintsResponse struct {
	CurrentUser blueprintsCurrentUser `json:"currentUser"`
	User        blueprintsUser        `json:"user"`
}

// GetCurrentUser returns blueprintsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *blueprintsResponse) GetCurrentUser() blueprintsCurrentUser { return v.CurrentUser }

// GetUser returns blueprintsResponse.User, and is useful for accessing the field via an interface.
func (v *blueprintsResponse) GetUser() blueprintsUser { return v.User }

// blueprintsUser includes the requested fields of the GraphQL type User.
type blueprintsUser struct {
	Id         uuid.UUID                                    `json:"id"`
	Blueprints *blueprintsUserBlueprintsBlueprintConnection `json:"blueprints"`
}

// GetId returns blueprintsUser.Id, and is useful for accessing the field via an interface.
func (v *blueprintsUser) GetId() uuid.UUID { return v.Id }

// GetBlueprints returns blueprintsUser.Blueprints, and is useful for accessing the field via an interface.
func (v *blueprintsUser) GetBlueprints() *blueprintsUserBlueprintsBlueprintConnection {
	return v.Blueprints
}

// blueprintsUserBlueprintsBlueprintConnection includes the requested fields of the GraphQL type BlueprintConnection.
type blueprintsUserBlueprintsBlueprintConnection struct {
	TotalCount int                                                         `json:"totalCount"`
	PageInfo   blueprintsUserBlueprintsBlueprintConnectionPageInfo         `json:"pageInfo"`
	Nodes      []blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint `json:"nodes"`
}

// GetTotalCount returns blueprintsUserBlueprintsBlueprintConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnection) GetTotalCount() int { return v.TotalCount }

// GetPageInfo returns blueprintsUserBlueprintsBlueprintConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnection) GetPageInfo() blueprintsUserBlueprintsBlueprintConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns blueprintsUserBlueprintsBlueprintConnection.Nodes, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnection) GetNodes() []blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint {
	return v.Nodes
}

// blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint includes the requested fields of the GraphQL type Blueprint.
type blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint struct {
	BlueprintList `json:"-"`
}

// GetId returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.Id, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetId() uuid.UUID {
	return v.BlueprintList.Id
}

// GetDescription returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.Description, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetDescription() *string {
	return v.BlueprintList.Description
}

// GetDisplayName returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.DisplayName, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetDisplayName() string {
	return v.BlueprintList.DisplayName
}

// GetIsOfficial returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.IsOfficial, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetIsOfficial() *bool {
	return v.BlueprintList.IsOfficial
}

// GetLogoUrl returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.LogoUrl, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetLogoUrl() *string {
	return v.BlueprintList.LogoUrl
}

// GetEnabled returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.Enabled, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetEnabled() *bool {
	return v.BlueprintList.Enabled
}

// GetPublished returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.Published, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetPublished() bool {
	return v.BlueprintList.Published
}

// GetProjectCount returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.ProjectCount, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetProjectCount() int {
	return v.BlueprintList.ProjectCount
}

// GetRichInputSchema returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.RichInputSchema, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetRichInputSchema() *string {
	return v.BlueprintList.RichInputSchema
}

// GetAllowedCloudProviders returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.AllowedCloudProviders, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetAllowedCloudProviders() []CloudProvider {
	return v.BlueprintList.AllowedCloudProviders
}

// GetSlug returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.Slug, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetSlug() string {
	return v.BlueprintList.Slug
}

// GetTags returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.Tags, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetTags() []string {
	return v.BlueprintList.Tags
}

// GetType returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.Type, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetType() BlueprintType {
	return v.BlueprintList.Type
}

// GetConfiguration returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetConfiguration() *BlueprintListConfigurationBlueprintConfiguration {
	return v.BlueprintList.Configuration
}

// GetOwner returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.Owner, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetOwner() *BlueprintListOwnerBlueprintOwner {
	return v.BlueprintList.Owner
}

// GetVariables returns blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.Variables, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) GetVariables() []BlueprintListVariablesBlueprintVariableSpec {
	return v.BlueprintList.Variables
}

func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint
		graphql.NoUnmarshalJSON
	}
	firstPass.blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalblueprintsUserBlueprintsBlueprintConnectionNodesBlueprint struct {
	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	DisplayName string `json:"displayName"`

	IsOfficial *bool `json:"isOfficial"`

	LogoUrl *string `json:"logoUrl"`

	Enabled *bool `json:"enabled"`

	Published bool `json:"published"`

	ProjectCount int `json:"projectCount"`

	RichInputSchema *string `json:"richInputSchema"`

	AllowedCloudProviders []CloudProvider `json:"allowedCloudProviders"`

	Slug string `json:"slug"`

	Tags []string `json:"tags"`

	Type BlueprintType `json:"type"`

	Configuration json.RawMessage `json:"configuration"`

	Owner *BlueprintListOwnerBlueprintOwner `json:"owner"`

	Variables []BlueprintListVariablesBlueprintVariableSpec `json:"variables"`
}

func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint) __premarshalJSON() (*__premarshalblueprintsUserBlueprintsBlueprintConnectionNodesBlueprint, error) {
	var retval __premarshalblueprintsUserBlueprintsBlueprintConnectionNodesBlueprint

	retval.Id = v.BlueprintList.Id
	retval.Description = v.BlueprintList.Description
	retval.DisplayName = v.BlueprintList.DisplayName
	retval.IsOfficial = v.BlueprintList.IsOfficial
	retval.LogoUrl = v.BlueprintList.LogoUrl
	retval.Enabled = v.BlueprintList.Enabled
	retval.Published = v.BlueprintList.Published
	retval.ProjectCount = v.BlueprintList.ProjectCount
	retval.RichInputSchema = v.BlueprintList.RichInputSchema
	retval.AllowedCloudProviders = v.BlueprintList.AllowedCloudProviders
	retval.Slug = v.BlueprintList.Slug
	retval.Tags = v.BlueprintList.Tags
	retval.Type = v.BlueprintList.Type
	{

		dst := &retval.Configuration
		src := v.BlueprintList.Configuration
		if src != nil {
			var err error
			*dst, err = __marshalBlueprintListConfigurationBlueprintConfiguration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal blueprintsUserBlueprintsBlueprintConnectionNodesBlueprint.BlueprintList.Configuration: %w", err)
			}
		}
	}
	retval.Owner = v.BlueprintList.Owner
	retval.Variables = v.BlueprintList.Variables
	return &retval, nil
}

// blueprintsUserBlueprintsBlueprintConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type blueprintsUserBlueprintsBlueprintConnectionPageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns blueprintsUserBlueprintsBlueprintConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetEndCursor returns blueprintsUserBlueprintsBlueprintConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns blueprintsUserBlueprintsBlueprintConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetHasPreviousPage returns blueprintsUserBlueprintsBlueprintConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *blueprintsUserBlueprintsBlueprintConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// buildRepoBuildRepo includes the requested fields of the GraphQL type Repo.
type buildRepoBuildRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns buildRepoBuildRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns buildRepoBuildRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns buildRepoBuildRepo.Manifest, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetManifest() *RepoDetailManifest { return v.RepoDetail.Manifest }

// GetAppID returns buildRepoBuildRepo.AppID, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns buildRepoBuildRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns buildRepoBuildRepo.KappID, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns buildRepoBuildRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns buildRepoBuildRepo.Project, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetProject() *RepoDetailProject { return v.RepoDetail.Project }

// GetProductionDeployment returns buildRepoBuildRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns buildRepoBuildRepo.Namespace, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns buildRepoBuildRepo.Envs, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetEnvs() []RepoDetailEnvsEnvVar { return v.RepoDetail.Envs }

// GetCollaborators returns buildRepoBuildRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns buildRepoBuildRepo.Volumes, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetVolumes() []RepoDetailVolumesVolumeSpec { return v.RepoDetail.Volumes }

// GetReplication returns buildRepoBuildRepo.Replication, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns buildRepoBuildRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDeployTarget() *DeployTarget { return v.RepoDetail.DeployTarget }

// GetCluster returns buildRepoBuildRepo.Cluster, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetCluster() *RepoDetailCluster { return v.RepoDetail.Cluster }

// GetAwsAccount returns buildRepoBuildRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns buildRepoBuildRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns buildRepoBuildRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetLogShipper() *RepoDetailLogShipper { return v.RepoDetail.LogShipper }

// GetReadinessProbe returns buildRepoBuildRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns buildRepoBuildRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns buildRepoBuildRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns buildRepoBuildRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetManualDeploy() *bool { return v.RepoDetail.ManualDeploy }

// GetDeployStrategy returns buildRepoBuildRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDeployStrategy() *DeployStrategy { return v.RepoDetail.DeployStrategy }

// GetFree returns buildRepoBuildRepo.Free, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns buildRepoBuildRepo.Cpu, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns buildRepoBuildRepo.Memory, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns buildRepoBuildRepo.Gpu, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetGpu() *RepoDetailGpuGPUSpec { return v.RepoDetail.Gpu }

// GetTpu returns buildRepoBuildRepo.Tpu, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetTpu() *RepoDetailTpuTPUSpec { return v.RepoDetail.Tpu }

// GetEphemeralStorage returns buildRepoBuildRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetEphemeralStorage() *float64 { return v.RepoDetail.EphemeralStorage }

// GetDedicated returns buildRepoBuildRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns buildRepoBuildRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns buildRepoBuildRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns buildRepoBuildRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetProductionBranch() *string { return v.RepoDetail.ProductionBranch }

// GetBranchResources returns buildRepoBuildRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns buildRepoBuildRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns buildRepoBuildRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetServerlessRegion() *string { return v.RepoDetail.ServerlessRegion }

// GetPrometheusScrape returns buildRepoBuildRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns buildRepoBuildRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetHelmValues() *string { return v.RepoDetail.HelmValues }

// GetTerraformVersion returns buildRepoBuildRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetTerraformVersion() *string { return v.RepoDetail.TerraformVersion }

// GetTerraformVariables returns buildRepoBuildRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetTerraformVariables() *string { return v.RepoDetail.TerraformVariables }

// GetJobRuns returns buildRepoBuildRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns buildRepoBuildRepo.DeployService, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDeployService() *bool { return v.RepoDetail.DeployService }

// GetDeployJob returns buildRepoBuildRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns buildRepoBuildRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetPreStopSleep() *int { return v.RepoDetail.PreStopSleep }

// GetTerminationGracePeriodSeconds returns buildRepoBuildRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns buildRepoBuildRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetAutoscaling() *RepoDetailAutoscaling { return v.RepoDetail.Autoscaling }

// GetContainerRegistry returns buildRepoBuildRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns buildRepoBuildRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns buildRepoBuildRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns buildRepoBuildRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDatabaseVersion() *string { return v.RepoDetail.DatabaseVersion }

// GetDatabaseEnvs returns buildRepoBuildRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns buildRepoBuildRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns buildRepoBuildRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns buildRepoBuildRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns buildRepoBuildRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetAutoRollback() *bool { return v.RepoDetail.AutoRollback }

// GetCanDeploy returns buildRepoBuildRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns buildRepoBuildRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns buildRepoBuildRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetAwsIamRole() *string { return v.RepoDetail.AwsIamRole }

// GetGcpServiceAccount returns buildRepoBuildRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetGcpServiceAccount() *string { return v.RepoDetail.GcpServiceAccount }

// GetDatadogApmEnabled returns buildRepoBuildRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDatadogApmEnabled() *bool { return v.RepoDetail.DatadogApmEnabled }

// GetProjectEnvironment returns buildRepoBuildRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns buildRepoBuildRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns buildRepoBuildRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDeployTimeoutSeconds() *int { return v.RepoDetail.DeployTimeoutSeconds }

// GetId returns buildRepoBuildRepo.Id, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetId() uuid.UUID { return v.RepoDetail.RepoCommon.Id }

// GetPath returns buildRepoBuildRepo.Path, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns buildRepoBuildRepo.Name, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns buildRepoBuildRepo.Enabled, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetEnabled() bool { return v.RepoDetail.RepoCommon.Enabled }

// GetSource returns buildRepoBuildRepo.Source, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns buildRepoBuildRepo.DeployType, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDeployType() *DeployType { return v.RepoDetail.RepoCommon.DeployType }

// GetImage returns buildRepoBuildRepo.Image, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetImage() *string { return v.RepoDetail.RepoCommon.Image }

// GetUpdatedAt returns buildRepoBuildRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetUpdatedAt() time.Time { return v.RepoDetail.RepoCommon.UpdatedAt }

// GetDisableReason returns buildRepoBuildRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns buildRepoBuildRepo.Owner, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetOwner() RepoCommonOwnerUser { return v.RepoDetail.RepoCommon.Owner }

// GetClusterDomains returns buildRepoBuildRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns buildRepoBuildRepo.Cdns, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetCdns() []RepoNetworkCdnsCDN { return v.RepoDetail.RepoNetwork.Cdns }

// GetPorts returns buildRepoBuildRepo.Ports, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetPorts() []RepoNetworkPortsPort { return v.RepoDetail.RepoNetwork.Ports }

// GetHostNetwork returns buildRepoBuildRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetHostNetwork() *bool { return v.RepoDetail.RepoNetwork.HostNetwork }

// GetStaticIP returns buildRepoBuildRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetStaticIP() *bool { return v.RepoDetail.RepoNetwork.StaticIP }

// GetBuildMethod returns buildRepoBuildRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns buildRepoBuildRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns buildRepoBuildRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns buildRepoBuildRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetNoBuildCache() *bool { return v.RepoDetail.RepoBuild.NoBuildCache }

// GetGitSubmodules returns buildRepoBuildRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns buildRepoBuildRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns buildRepoBuildRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *buildRepoBuildRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *buildRepoBuildRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*buildRepoBuildRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.buildRepoBuildRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalbuildRepoBuildRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *buildRepoBuildRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *buildRepoBuildRepo) __premarshalJSON() (*__premarshalbuildRepoBuildRepo, error) {
	var retval __premarshalbuildRepoBuildRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// buildRepoResponse is returned by buildRepo on success.
type buildRepoResponse struct {
	BuildRepo buildRepoBuildRepo `json:"buildRepo"`
}

// GetBuildRepo returns buildRepoResponse.BuildRepo, and is useful for accessing the field via an interface.
func (v *buildRepoResponse) GetBuildRepo() buildRepoBuildRepo { return v.BuildRepo }

// buildTemplatesCurrentUser includes the requested fields of the GraphQL type User.
type buildTemplatesCurrentUser struct {
	Id         uuid.UUID                            `json:"id"`
	Deployment *buildTemplatesCurrentUserDeployment `json:"deployment"`
}

// GetId returns buildTemplatesCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *buildTemplatesCurrentUser) GetId() uuid.UUID { return v.Id }

// GetDeployment returns buildTemplatesCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *buildTemplatesCurrentUser) GetDeployment() *buildTemplatesCurrentUserDeployment {
	return v.Deployment
}

// buildTemplatesCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type buildTemplatesCurrentUserDeployment struct {
	Id         uuid.UUID                                      `json:"id"`
	BuildStage *buildTemplatesCurrentUserDeploymentBuildStage `json:"buildStage"`
}

// GetId returns buildTemplatesCurrentUserDeployment.Id, and is useful for accessing the field via an interface.
func (v *buildTemplatesCurrentUserDeployment) GetId() uuid.UUID { return v.Id }

// GetBuildStage returns buildTemplatesCurrentUserDeployment.BuildStage, and is useful for accessing the field via an interface.
func (v *buildTemplatesCurrentUserDeployment) GetBuildStage() *buildTemplatesCurrentUserDeploymentBuildStage {
	return v.BuildStage
}

// buildTemplatesCurrentUserDeploymentBuildStage includes the requested fields of the GraphQL type BuildStage.
type buildTemplatesCurrentUserDeploymentBuildStage struct {
	BuildTemplates []buildTemplatesCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate `json:"buildTemplates"`
}

// GetBuildTemplates returns buildTemplatesCurrentUserDeploymentBuildStage.BuildTemplates, and is useful for accessing the field via an interface.
func (v *buildTemplatesCurrentUserDeploymentBuildStage) GetBuildTemplates() []buildTemplatesCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate {
	return v.BuildTemplates
}

// buildTemplatesCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate includes the requested fields of the GraphQL type BuildTemplate.
type buildTemplatesCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate struct {
	Type   BuildTemplateType `json:"type"`
	Output *string           `json:"output"`
}

// GetType returns buildTemplatesCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate.Type, and is useful for accessing the field via an interface.
func (v *buildTemplatesCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate) GetType() BuildTemplateType {
	return v.Type
}

// GetOutput returns buildTemplatesCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate.Output, and is useful for accessing the field via an interface.
func (v *buildTemplatesCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate) GetOutput() *string {
	return v.Output
}

// buildTemplatesExistCurrentUser includes the requested fields of the GraphQL type User.
type buildTemplatesExistCurrentUser struct {
	Id         uuid.UUID                                 `json:"id"`
	Deployment *buildTemplatesExistCurrentUserDeployment `json:"deployment"`
}

// GetId returns buildTemplatesExistCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *buildTemplatesExistCurrentUser) GetId() uuid.UUID { return v.Id }

// GetDeployment returns buildTemplatesExistCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *buildTemplatesExistCurrentUser) GetDeployment() *buildTemplatesExistCurrentUserDeployment {
	return v.Deployment
}

// buildTemplatesExistCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type buildTemplatesExistCurrentUserDeployment struct {
	Id         uuid.UUID                                           `json:"id"`
	BuildStage *buildTemplatesExistCurrentUserDeploymentBuildStage `json:"buildStage"`
}

// GetId returns buildTemplatesExistCurrentUserDeployment.Id, and is useful for accessing the field via an interface.
func (v *buildTemplatesExistCurrentUserDeployment) GetId() uuid.UUID { return v.Id }

// GetBuildStage returns buildTemplatesExistCurrentUserDeployment.BuildStage, and is useful for accessing the field via an interface.
func (v *buildTemplatesExistCurrentUserDeployment) GetBuildStage() *buildTemplatesExistCurrentUserDeploymentBuildStage {
	return v.BuildStage
}

// buildTemplatesExistCurrentUserDeploymentBuildStage includes the requested fields of the GraphQL type BuildStage.
type buildTemplatesExistCurrentUserDeploymentBuildStage struct {
	BuildTemplates []buildTemplatesExistCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate `json:"buildTemplates"`
}

// GetBuildTemplates returns buildTemplatesExistCurrentUserDeploymentBuildStage.BuildTemplates, and is useful for accessing the field via an interface.
func (v *buildTemplatesExistCurrentUserDeploymentBuildStage) GetBuildTemplates() []buildTemplatesExistCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate {
	return v.BuildTemplates
}

// buildTemplatesExistCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate includes the requested fields of the GraphQL type BuildTemplate.
type buildTemplatesExistCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate struct {
	Type BuildTemplateType `json:"type"`
}

// GetType returns buildTemplatesExistCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate.Type, and is useful for accessing the field via an interface.
func (v *buildTemplatesExistCurrentUserDeploymentBuildStageBuildTemplatesBuildTemplate) GetType() BuildTemplateType {
	return v.Type
}

// buildTemplatesExistResponse is returned by buildTemplatesExist on success.
type buildTemplatesExistResponse struct {
	CurrentUser buildTemplatesExistCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns buildTemplatesExistResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *buildTemplatesExistResponse) GetCurrentUser() buildTemplatesExistCurrentUser {
	return v.CurrentUser
}

// buildTemplatesResponse is returned by buildTemplates on success.
type buildTemplatesResponse struct {
	CurrentUser buildTemplatesCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns buildTemplatesResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *buildTemplatesResponse) GetCurrentUser() buildTemplatesCurrentUser { return v.CurrentUser }

// checkProjectNameResponse is returned by checkProjectName on success.
type checkProjectNameResponse struct {
	User checkProjectNameUser `json:"user"`
}

// GetUser returns checkProjectNameResponse.User, and is useful for accessing the field via an interface.
func (v *checkProjectNameResponse) GetUser() checkProjectNameUser { return v.User }

// checkProjectNameUser includes the requested fields of the GraphQL type User.
type checkProjectNameUser struct {
	Id               uuid.UUID `json:"id"`
	CheckProjectName bool      `json:"checkProjectName"`
}

// GetId returns checkProjectNameUser.Id, and is useful for accessing the field via an interface.
func (v *checkProjectNameUser) GetId() uuid.UUID { return v.Id }

// GetCheckProjectName returns checkProjectNameUser.CheckProjectName, and is useful for accessing the field via an interface.
func (v *checkProjectNameUser) GetCheckProjectName() bool { return v.CheckProjectName }

// cloudDetailsAwsResponse is returned by cloudDetailsAws on success.
type cloudDetailsAwsResponse struct {
	User cloudDetailsAwsUser `json:"user"`
}

// GetUser returns cloudDetailsAwsResponse.User, and is useful for accessing the field via an interface.
func (v *cloudDetailsAwsResponse) GetUser() cloudDetailsAwsUser { return v.User }

// cloudDetailsAwsUser includes the requested fields of the GraphQL type User.
type cloudDetailsAwsUser struct {
	Id         uuid.UUID                                `json:"id"`
	AwsAccount *cloudDetailsAwsUserAwsAccountAWSAccount `json:"awsAccount"`
}

// GetId returns cloudDetailsAwsUser.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsAwsUser) GetId() uuid.UUID { return v.Id }

// GetAwsAccount returns cloudDetailsAwsUser.AwsAccount, and is useful for accessing the field via an interface.
func (v *cloudDetailsAwsUser) GetAwsAccount() *cloudDetailsAwsUserAwsAccountAWSAccount {
	return v.AwsAccount
}

// cloudDetailsAwsUserAwsAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type cloudDetailsAwsUserAwsAccountAWSAccount struct {
	Id               uuid.UUID `json:"id"`
	AWSAccountDetail `json:"-"`
}

// GetId returns cloudDetailsAwsUserAwsAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsAwsUserAwsAccountAWSAccount) GetId() uuid.UUID { return v.Id }

// GetName returns cloudDetailsAwsUserAwsAccountAWSAccount.Name, and is useful for accessing the field via an interface.
func (v *cloudDetailsAwsUserAwsAccountAWSAccount) GetName() string { return v.AWSAccountDetail.Name }

// GetState returns cloudDetailsAwsUserAwsAccountAWSAccount.State, and is useful for accessing the field via an interface.
func (v *cloudDetailsAwsUserAwsAccountAWSAccount) GetState() AWSAccountState {
	return v.AWSAccountDetail.State
}

// GetAccountID returns cloudDetailsAwsUserAwsAccountAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *cloudDetailsAwsUserAwsAccountAWSAccount) GetAccountID() *string {
	return v.AWSAccountDetail.AccountID
}

// GetRoleARN returns cloudDetailsAwsUserAwsAccountAWSAccount.RoleARN, and is useful for accessing the field via an interface.
func (v *cloudDetailsAwsUserAwsAccountAWSAccount) GetRoleARN() *string {
	return v.AWSAccountDetail.RoleARN
}

// GetCloudFormationURL returns cloudDetailsAwsUserAwsAccountAWSAccount.CloudFormationURL, and is useful for accessing the field via an interface.
func (v *cloudDetailsAwsUserAwsAccountAWSAccount) GetCloudFormationURL() string {
	return v.AWSAccountDetail.CloudFormationURL
}

// GetConnected returns cloudDetailsAwsUserAwsAccountAWSAccount.Connected, and is useful for accessing the field via an interface.
func (v *cloudDetailsAwsUserAwsAccountAWSAccount) GetConnected() *bool {
	return v.AWSAccountDetail.Connected
}

func (v *cloudDetailsAwsUserAwsAccountAWSAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudDetailsAwsUserAwsAccountAWSAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudDetailsAwsUserAwsAccountAWSAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AWSAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudDetailsAwsUserAwsAccountAWSAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State AWSAccountState `json:"state"`

	AccountID *string `json:"accountID"`

	RoleARN *string `json:"roleARN"`

	CloudFormationURL string `json:"cloudFormationURL"`

	Connected *bool `json:"connected"`
}

func (v *cloudDetailsAwsUserAwsAccountAWSAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudDetailsAwsUserAwsAccountAWSAccount) __premarshalJSON() (*__premarshalcloudDetailsAwsUserAwsAccountAWSAccount, error) {
	var retval __premarshalcloudDetailsAwsUserAwsAccountAWSAccount

	retval.Id = v.Id
	retval.Name = v.AWSAccountDetail.Name
	retval.State = v.AWSAccountDetail.State
	retval.AccountID = v.AWSAccountDetail.AccountID
	retval.RoleARN = v.AWSAccountDetail.RoleARN
	retval.CloudFormationURL = v.AWSAccountDetail.CloudFormationURL
	retval.Connected = v.AWSAccountDetail.Connected
	return &retval, nil
}

// cloudDetailsAzureResponse is returned by cloudDetailsAzure on success.
type cloudDetailsAzureResponse struct {
	User cloudDetailsAzureUser `json:"user"`
}

// GetUser returns cloudDetailsAzureResponse.User, and is useful for accessing the field via an interface.
func (v *cloudDetailsAzureResponse) GetUser() cloudDetailsAzureUser { return v.User }

// cloudDetailsAzureUser includes the requested fields of the GraphQL type User.
type cloudDetailsAzureUser struct {
	Id           uuid.UUID                          `json:"id"`
	AzureAccount *cloudDetailsAzureUserAzureAccount `json:"azureAccount"`
}

// GetId returns cloudDetailsAzureUser.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsAzureUser) GetId() uuid.UUID { return v.Id }

// GetAzureAccount returns cloudDetailsAzureUser.AzureAccount, and is useful for accessing the field via an interface.
func (v *cloudDetailsAzureUser) GetAzureAccount() *cloudDetailsAzureUserAzureAccount {
	return v.AzureAccount
}

// cloudDetailsAzureUserAzureAccount includes the requested fields of the GraphQL type AzureAccount.
type cloudDetailsAzureUserAzureAccount struct {
	Id                 uuid.UUID `json:"id"`
	AzureAccountDetail `json:"-"`
}

// GetId returns cloudDetailsAzureUserAzureAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsAzureUserAzureAccount) GetId() uuid.UUID { return v.Id }

// GetName returns cloudDetailsAzureUserAzureAccount.Name, and is useful for accessing the field via an interface.
func (v *cloudDetailsAzureUserAzureAccount) GetName() string { return v.AzureAccountDetail.Name }

// GetState returns cloudDetailsAzureUserAzureAccount.State, and is useful for accessing the field via an interface.
func (v *cloudDetailsAzureUserAzureAccount) GetState() CloudAccountState {
	return v.AzureAccountDetail.State
}

// GetConnected returns cloudDetailsAzureUserAzureAccount.Connected, and is useful for accessing the field via an interface.
func (v *cloudDetailsAzureUserAzureAccount) GetConnected() *bool {
	return v.AzureAccountDetail.Connected
}

// GetSubscriptionID returns cloudDetailsAzureUserAzureAccount.SubscriptionID, and is useful for accessing the field via an interface.
func (v *cloudDetailsAzureUserAzureAccount) GetSubscriptionID() *string {
	return v.AzureAccountDetail.SubscriptionID
}

// GetTenantID returns cloudDetailsAzureUserAzureAccount.TenantID, and is useful for accessing the field via an interface.
func (v *cloudDetailsAzureUserAzureAccount) GetTenantID() *string {
	return v.AzureAccountDetail.TenantID
}

// GetClientID returns cloudDetailsAzureUserAzureAccount.ClientID, and is useful for accessing the field via an interface.
func (v *cloudDetailsAzureUserAzureAccount) GetClientID() *string {
	return v.AzureAccountDetail.ClientID
}

func (v *cloudDetailsAzureUserAzureAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudDetailsAzureUserAzureAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudDetailsAzureUserAzureAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AzureAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudDetailsAzureUserAzureAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	Connected *bool `json:"connected"`

	SubscriptionID *string `json:"subscriptionID"`

	TenantID *string `json:"tenantID"`

	ClientID *string `json:"clientID"`
}

func (v *cloudDetailsAzureUserAzureAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudDetailsAzureUserAzureAccount) __premarshalJSON() (*__premarshalcloudDetailsAzureUserAzureAccount, error) {
	var retval __premarshalcloudDetailsAzureUserAzureAccount

	retval.Id = v.Id
	retval.Name = v.AzureAccountDetail.Name
	retval.State = v.AzureAccountDetail.State
	retval.Connected = v.AzureAccountDetail.Connected
	retval.SubscriptionID = v.AzureAccountDetail.SubscriptionID
	retval.TenantID = v.AzureAccountDetail.TenantID
	retval.ClientID = v.AzureAccountDetail.ClientID
	return &retval, nil
}

// cloudDetailsCoreweaveResponse is returned by cloudDetailsCoreweave on success.
type cloudDetailsCoreweaveResponse struct {
	User cloudDetailsCoreweaveUser `json:"user"`
}

// GetUser returns cloudDetailsCoreweaveResponse.User, and is useful for accessing the field via an interface.
func (v *cloudDetailsCoreweaveResponse) GetUser() cloudDetailsCoreweaveUser { return v.User }

// cloudDetailsCoreweaveUser includes the requested fields of the GraphQL type User.
type cloudDetailsCoreweaveUser struct {
	Id               uuid.UUID                                                  `json:"id"`
	CoreweaveAccount *cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount `json:"coreweaveAccount"`
}

// GetId returns cloudDetailsCoreweaveUser.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsCoreweaveUser) GetId() uuid.UUID { return v.Id }

// GetCoreweaveAccount returns cloudDetailsCoreweaveUser.CoreweaveAccount, and is useful for accessing the field via an interface.
func (v *cloudDetailsCoreweaveUser) GetCoreweaveAccount() *cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount {
	return v.CoreweaveAccount
}

// cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount includes the requested fields of the GraphQL type CoreWeaveAccount.
type cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount struct {
	Id              uuid.UUID `json:"id"`
	CWAccountDetail `json:"-"`
}

// GetId returns cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount) GetId() uuid.UUID { return v.Id }

// GetName returns cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount.Name, and is useful for accessing the field via an interface.
func (v *cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount) GetName() string {
	return v.CWAccountDetail.Name
}

// GetState returns cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount.State, and is useful for accessing the field via an interface.
func (v *cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount) GetState() CloudAccountState {
	return v.CWAccountDetail.State
}

// GetNamespace returns cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount.Namespace, and is useful for accessing the field via an interface.
func (v *cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount) GetNamespace() *string {
	return v.CWAccountDetail.Namespace
}

// GetConnected returns cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount.Connected, and is useful for accessing the field via an interface.
func (v *cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount) GetConnected() *bool {
	return v.CWAccountDetail.Connected
}

func (v *cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CWAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	Namespace *string `json:"namespace"`

	Connected *bool `json:"connected"`
}

func (v *cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount) __premarshalJSON() (*__premarshalcloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount, error) {
	var retval __premarshalcloudDetailsCoreweaveUserCoreweaveAccountCoreWeaveAccount

	retval.Id = v.Id
	retval.Name = v.CWAccountDetail.Name
	retval.State = v.CWAccountDetail.State
	retval.Namespace = v.CWAccountDetail.Namespace
	retval.Connected = v.CWAccountDetail.Connected
	return &retval, nil
}

// cloudDetailsDoResponse is returned by cloudDetailsDo on success.
type cloudDetailsDoResponse struct {
	User cloudDetailsDoUser `json:"user"`
}

// GetUser returns cloudDetailsDoResponse.User, and is useful for accessing the field via an interface.
func (v *cloudDetailsDoResponse) GetUser() cloudDetailsDoUser { return v.User }

// cloudDetailsDoUser includes the requested fields of the GraphQL type User.
type cloudDetailsDoUser struct {
	Id        uuid.UUID                             `json:"id"`
	DoAccount *cloudDetailsDoUserDoAccountDOAccount `json:"doAccount"`
}

// GetId returns cloudDetailsDoUser.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsDoUser) GetId() uuid.UUID { return v.Id }

// GetDoAccount returns cloudDetailsDoUser.DoAccount, and is useful for accessing the field via an interface.
func (v *cloudDetailsDoUser) GetDoAccount() *cloudDetailsDoUserDoAccountDOAccount { return v.DoAccount }

// cloudDetailsDoUserDoAccountDOAccount includes the requested fields of the GraphQL type DOAccount.
type cloudDetailsDoUserDoAccountDOAccount struct {
	Id              uuid.UUID `json:"id"`
	DOAccountDetail `json:"-"`
}

// GetId returns cloudDetailsDoUserDoAccountDOAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsDoUserDoAccountDOAccount) GetId() uuid.UUID { return v.Id }

// GetName returns cloudDetailsDoUserDoAccountDOAccount.Name, and is useful for accessing the field via an interface.
func (v *cloudDetailsDoUserDoAccountDOAccount) GetName() string { return v.DOAccountDetail.Name }

// GetState returns cloudDetailsDoUserDoAccountDOAccount.State, and is useful for accessing the field via an interface.
func (v *cloudDetailsDoUserDoAccountDOAccount) GetState() DOAccountState {
	return v.DOAccountDetail.State
}

// GetAccessTokenPrefix returns cloudDetailsDoUserDoAccountDOAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *cloudDetailsDoUserDoAccountDOAccount) GetAccessTokenPrefix() *string {
	return v.DOAccountDetail.AccessTokenPrefix
}

// GetDefaultProject returns cloudDetailsDoUserDoAccountDOAccount.DefaultProject, and is useful for accessing the field via an interface.
func (v *cloudDetailsDoUserDoAccountDOAccount) GetDefaultProject() *string {
	return v.DOAccountDetail.DefaultProject
}

// GetConnected returns cloudDetailsDoUserDoAccountDOAccount.Connected, and is useful for accessing the field via an interface.
func (v *cloudDetailsDoUserDoAccountDOAccount) GetConnected() *bool {
	return v.DOAccountDetail.Connected
}

func (v *cloudDetailsDoUserDoAccountDOAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudDetailsDoUserDoAccountDOAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudDetailsDoUserDoAccountDOAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DOAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudDetailsDoUserDoAccountDOAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State DOAccountState `json:"state"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	DefaultProject *string `json:"defaultProject"`

	Connected *bool `json:"connected"`
}

func (v *cloudDetailsDoUserDoAccountDOAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudDetailsDoUserDoAccountDOAccount) __premarshalJSON() (*__premarshalcloudDetailsDoUserDoAccountDOAccount, error) {
	var retval __premarshalcloudDetailsDoUserDoAccountDOAccount

	retval.Id = v.Id
	retval.Name = v.DOAccountDetail.Name
	retval.State = v.DOAccountDetail.State
	retval.AccessTokenPrefix = v.DOAccountDetail.AccessTokenPrefix
	retval.DefaultProject = v.DOAccountDetail.DefaultProject
	retval.Connected = v.DOAccountDetail.Connected
	return &retval, nil
}

// cloudDetailsGcpResponse is returned by cloudDetailsGcp on success.
type cloudDetailsGcpResponse struct {
	User cloudDetailsGcpUser `json:"user"`
}

// GetUser returns cloudDetailsGcpResponse.User, and is useful for accessing the field via an interface.
func (v *cloudDetailsGcpResponse) GetUser() cloudDetailsGcpUser { return v.User }

// cloudDetailsGcpUser includes the requested fields of the GraphQL type User.
type cloudDetailsGcpUser struct {
	Id         uuid.UUID                                `json:"id"`
	GcpAccount *cloudDetailsGcpUserGcpAccountGCPAccount `json:"gcpAccount"`
}

// GetId returns cloudDetailsGcpUser.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsGcpUser) GetId() uuid.UUID { return v.Id }

// GetGcpAccount returns cloudDetailsGcpUser.GcpAccount, and is useful for accessing the field via an interface.
func (v *cloudDetailsGcpUser) GetGcpAccount() *cloudDetailsGcpUserGcpAccountGCPAccount {
	return v.GcpAccount
}

// cloudDetailsGcpUserGcpAccountGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type cloudDetailsGcpUserGcpAccountGCPAccount struct {
	Id               uuid.UUID `json:"id"`
	GCPAccountDetail `json:"-"`
}

// GetId returns cloudDetailsGcpUserGcpAccountGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsGcpUserGcpAccountGCPAccount) GetId() uuid.UUID { return v.Id }

// GetName returns cloudDetailsGcpUserGcpAccountGCPAccount.Name, and is useful for accessing the field via an interface.
func (v *cloudDetailsGcpUserGcpAccountGCPAccount) GetName() string { return v.GCPAccountDetail.Name }

// GetState returns cloudDetailsGcpUserGcpAccountGCPAccount.State, and is useful for accessing the field via an interface.
func (v *cloudDetailsGcpUserGcpAccountGCPAccount) GetState() GCPAccountState {
	return v.GCPAccountDetail.State
}

// GetProjectID returns cloudDetailsGcpUserGcpAccountGCPAccount.ProjectID, and is useful for accessing the field via an interface.
func (v *cloudDetailsGcpUserGcpAccountGCPAccount) GetProjectID() *string {
	return v.GCPAccountDetail.ProjectID
}

// GetClientEmail returns cloudDetailsGcpUserGcpAccountGCPAccount.ClientEmail, and is useful for accessing the field via an interface.
func (v *cloudDetailsGcpUserGcpAccountGCPAccount) GetClientEmail() *string {
	return v.GCPAccountDetail.ClientEmail
}

// GetConnected returns cloudDetailsGcpUserGcpAccountGCPAccount.Connected, and is useful for accessing the field via an interface.
func (v *cloudDetailsGcpUserGcpAccountGCPAccount) GetConnected() *bool {
	return v.GCPAccountDetail.Connected
}

// GetError returns cloudDetailsGcpUserGcpAccountGCPAccount.Error, and is useful for accessing the field via an interface.
func (v *cloudDetailsGcpUserGcpAccountGCPAccount) GetError() *string { return v.GCPAccountDetail.Error }

func (v *cloudDetailsGcpUserGcpAccountGCPAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudDetailsGcpUserGcpAccountGCPAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudDetailsGcpUserGcpAccountGCPAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GCPAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudDetailsGcpUserGcpAccountGCPAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State GCPAccountState `json:"state"`

	ProjectID *string `json:"projectID"`

	ClientEmail *string `json:"clientEmail"`

	Connected *bool `json:"connected"`

	Error *string `json:"error"`
}

func (v *cloudDetailsGcpUserGcpAccountGCPAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudDetailsGcpUserGcpAccountGCPAccount) __premarshalJSON() (*__premarshalcloudDetailsGcpUserGcpAccountGCPAccount, error) {
	var retval __premarshalcloudDetailsGcpUserGcpAccountGCPAccount

	retval.Id = v.Id
	retval.Name = v.GCPAccountDetail.Name
	retval.State = v.GCPAccountDetail.State
	retval.ProjectID = v.GCPAccountDetail.ProjectID
	retval.ClientEmail = v.GCPAccountDetail.ClientEmail
	retval.Connected = v.GCPAccountDetail.Connected
	retval.Error = v.GCPAccountDetail.Error
	return &retval, nil
}

// cloudDetailsLinodeResponse is returned by cloudDetailsLinode on success.
type cloudDetailsLinodeResponse struct {
	User cloudDetailsLinodeUser `json:"user"`
}

// GetUser returns cloudDetailsLinodeResponse.User, and is useful for accessing the field via an interface.
func (v *cloudDetailsLinodeResponse) GetUser() cloudDetailsLinodeUser { return v.User }

// cloudDetailsLinodeUser includes the requested fields of the GraphQL type User.
type cloudDetailsLinodeUser struct {
	Id            uuid.UUID                            `json:"id"`
	LinodeAccount *cloudDetailsLinodeUserLinodeAccount `json:"linodeAccount"`
}

// GetId returns cloudDetailsLinodeUser.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsLinodeUser) GetId() uuid.UUID { return v.Id }

// GetLinodeAccount returns cloudDetailsLinodeUser.LinodeAccount, and is useful for accessing the field via an interface.
func (v *cloudDetailsLinodeUser) GetLinodeAccount() *cloudDetailsLinodeUserLinodeAccount {
	return v.LinodeAccount
}

// cloudDetailsLinodeUserLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type cloudDetailsLinodeUserLinodeAccount struct {
	Id                  uuid.UUID `json:"id"`
	LinodeAccountDetail `json:"-"`
}

// GetId returns cloudDetailsLinodeUserLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsLinodeUserLinodeAccount) GetId() uuid.UUID { return v.Id }

// GetName returns cloudDetailsLinodeUserLinodeAccount.Name, and is useful for accessing the field via an interface.
func (v *cloudDetailsLinodeUserLinodeAccount) GetName() string { return v.LinodeAccountDetail.Name }

// GetState returns cloudDetailsLinodeUserLinodeAccount.State, and is useful for accessing the field via an interface.
func (v *cloudDetailsLinodeUserLinodeAccount) GetState() CloudAccountState {
	return v.LinodeAccountDetail.State
}

// GetAccessTokenPrefix returns cloudDetailsLinodeUserLinodeAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *cloudDetailsLinodeUserLinodeAccount) GetAccessTokenPrefix() *string {
	return v.LinodeAccountDetail.AccessTokenPrefix
}

// GetConnected returns cloudDetailsLinodeUserLinodeAccount.Connected, and is useful for accessing the field via an interface.
func (v *cloudDetailsLinodeUserLinodeAccount) GetConnected() *bool {
	return v.LinodeAccountDetail.Connected
}

func (v *cloudDetailsLinodeUserLinodeAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudDetailsLinodeUserLinodeAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudDetailsLinodeUserLinodeAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.LinodeAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudDetailsLinodeUserLinodeAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	Connected *bool `json:"connected"`
}

func (v *cloudDetailsLinodeUserLinodeAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudDetailsLinodeUserLinodeAccount) __premarshalJSON() (*__premarshalcloudDetailsLinodeUserLinodeAccount, error) {
	var retval __premarshalcloudDetailsLinodeUserLinodeAccount

	retval.Id = v.Id
	retval.Name = v.LinodeAccountDetail.Name
	retval.State = v.LinodeAccountDetail.State
	retval.AccessTokenPrefix = v.LinodeAccountDetail.AccessTokenPrefix
	retval.Connected = v.LinodeAccountDetail.Connected
	return &retval, nil
}

// cloudDetailsVultrResponse is returned by cloudDetailsVultr on success.
type cloudDetailsVultrResponse struct {
	User cloudDetailsVultrUser `json:"user"`
}

// GetUser returns cloudDetailsVultrResponse.User, and is useful for accessing the field via an interface.
func (v *cloudDetailsVultrResponse) GetUser() cloudDetailsVultrUser { return v.User }

// cloudDetailsVultrUser includes the requested fields of the GraphQL type User.
type cloudDetailsVultrUser struct {
	Id           uuid.UUID                          `json:"id"`
	VultrAccount *cloudDetailsVultrUserVultrAccount `json:"vultrAccount"`
}

// GetId returns cloudDetailsVultrUser.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsVultrUser) GetId() uuid.UUID { return v.Id }

// GetVultrAccount returns cloudDetailsVultrUser.VultrAccount, and is useful for accessing the field via an interface.
func (v *cloudDetailsVultrUser) GetVultrAccount() *cloudDetailsVultrUserVultrAccount {
	return v.VultrAccount
}

// cloudDetailsVultrUserVultrAccount includes the requested fields of the GraphQL type VultrAccount.
type cloudDetailsVultrUserVultrAccount struct {
	Id                 uuid.UUID `json:"id"`
	VultrAccountDetail `json:"-"`
}

// GetId returns cloudDetailsVultrUserVultrAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudDetailsVultrUserVultrAccount) GetId() uuid.UUID { return v.Id }

// GetName returns cloudDetailsVultrUserVultrAccount.Name, and is useful for accessing the field via an interface.
func (v *cloudDetailsVultrUserVultrAccount) GetName() string { return v.VultrAccountDetail.Name }

// GetState returns cloudDetailsVultrUserVultrAccount.State, and is useful for accessing the field via an interface.
func (v *cloudDetailsVultrUserVultrAccount) GetState() CloudAccountState {
	return v.VultrAccountDetail.State
}

// GetConnected returns cloudDetailsVultrUserVultrAccount.Connected, and is useful for accessing the field via an interface.
func (v *cloudDetailsVultrUserVultrAccount) GetConnected() *bool {
	return v.VultrAccountDetail.Connected
}

func (v *cloudDetailsVultrUserVultrAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudDetailsVultrUserVultrAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudDetailsVultrUserVultrAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.VultrAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudDetailsVultrUserVultrAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	Connected *bool `json:"connected"`
}

func (v *cloudDetailsVultrUserVultrAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudDetailsVultrUserVultrAccount) __premarshalJSON() (*__premarshalcloudDetailsVultrUserVultrAccount, error) {
	var retval __premarshalcloudDetailsVultrUserVultrAccount

	retval.Id = v.Id
	retval.Name = v.VultrAccountDetail.Name
	retval.State = v.VultrAccountDetail.State
	retval.Connected = v.VultrAccountDetail.Connected
	return &retval, nil
}

// clusterCertIssuersResponse is returned by clusterCertIssuers on success.
type clusterCertIssuersResponse struct {
	User clusterCertIssuersUser `json:"user"`
}

// GetUser returns clusterCertIssuersResponse.User, and is useful for accessing the field via an interface.
func (v *clusterCertIssuersResponse) GetUser() clusterCertIssuersUser { return v.User }

// clusterCertIssuersUser includes the requested fields of the GraphQL type User.
type clusterCertIssuersUser struct {
	Id      uuid.UUID                      `json:"id"`
	Cluster *clusterCertIssuersUserCluster `json:"cluster"`
	Repo    *clusterCertIssuersUserRepo    `json:"repo"`
}

// GetId returns clusterCertIssuersUser.Id, and is useful for accessing the field via an interface.
func (v *clusterCertIssuersUser) GetId() uuid.UUID { return v.Id }

// GetCluster returns clusterCertIssuersUser.Cluster, and is useful for accessing the field via an interface.
func (v *clusterCertIssuersUser) GetCluster() *clusterCertIssuersUserCluster { return v.Cluster }

// GetRepo returns clusterCertIssuersUser.Repo, and is useful for accessing the field via an interface.
func (v *clusterCertIssuersUser) GetRepo() *clusterCertIssuersUserRepo { return v.Repo }

// clusterCertIssuersUserCluster includes the requested fields of the GraphQL type Cluster.
type clusterCertIssuersUserCluster struct {
	Id             uuid.UUID `json:"id"`
	Name           string    `json:"name"`
	ClusterIssuers []string  `json:"clusterIssuers"`
}

// GetId returns clusterCertIssuersUserCluster.Id, and is useful for accessing the field via an interface.
func (v *clusterCertIssuersUserCluster) GetId() uuid.UUID { return v.Id }

// GetName returns clusterCertIssuersUserCluster.Name, and is useful for accessing the field via an interface.
func (v *clusterCertIssuersUserCluster) GetName() string { return v.Name }

// GetClusterIssuers returns clusterCertIssuersUserCluster.ClusterIssuers, and is useful for accessing the field via an interface.
func (v *clusterCertIssuersUserCluster) GetClusterIssuers() []string { return v.ClusterIssuers }

// clusterCertIssuersUserRepo includes the requested fields of the GraphQL type Repo.
type clusterCertIssuersUserRepo struct {
	// - v0.RepoID
	Id                uuid.UUID `json:"id"`
	Name              string    `json:"name"`
	ClusterIssuerName *string   `json:"clusterIssuerName"`
}

// GetId returns clusterCertIssuersUserRepo.Id, and is useful for accessing the field via an interface.
func (v *clusterCertIssuersUserRepo) GetId() uuid.UUID { return v.Id }

// GetName returns clusterCertIssuersUserRepo.Name, and is useful for accessing the field via an interface.
func (v *clusterCertIssuersUserRepo) GetName() string { return v.Name }

// GetClusterIssuerName returns clusterCertIssuersUserRepo.ClusterIssuerName, and is useful for accessing the field via an interface.
func (v *clusterCertIssuersUserRepo) GetClusterIssuerName() *string { return v.ClusterIssuerName }

// clusterCommonResponse is returned by clusterCommon on success.
type clusterCommonResponse struct {
	User clusterCommonUser `json:"user"`
}

// GetUser returns clusterCommonResponse.User, and is useful for accessing the field via an interface.
func (v *clusterCommonResponse) GetUser() clusterCommonUser { return v.User }

// clusterCommonUser includes the requested fields of the GraphQL type User.
type clusterCommonUser struct {
	Id      uuid.UUID                 `json:"id"`
	Cluster *clusterCommonUserCluster `json:"cluster"`
}

// GetId returns clusterCommonUser.Id, and is useful for accessing the field via an interface.
func (v *clusterCommonUser) GetId() uuid.UUID { return v.Id }

// GetCluster returns clusterCommonUser.Cluster, and is useful for accessing the field via an interface.
func (v *clusterCommonUser) GetCluster() *clusterCommonUserCluster { return v.Cluster }

// clusterCommonUserCluster includes the requested fields of the GraphQL type Cluster.
type clusterCommonUserCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterCommon `json:"-"`
}

// GetId returns clusterCommonUserCluster.Id, and is useful for accessing the field via an interface.
func (v *clusterCommonUserCluster) GetId() uuid.UUID { return v.Id }

// GetName returns clusterCommonUserCluster.Name, and is useful for accessing the field via an interface.
func (v *clusterCommonUserCluster) GetName() string { return v.ClusterCommon.Name }

// GetRegion returns clusterCommonUserCluster.Region, and is useful for accessing the field via an interface.
func (v *clusterCommonUserCluster) GetRegion() *string { return v.ClusterCommon.Region }

// GetState returns clusterCommonUserCluster.State, and is useful for accessing the field via an interface.
func (v *clusterCommonUserCluster) GetState() ClusterState { return v.ClusterCommon.State }

// GetStatus returns clusterCommonUserCluster.Status, and is useful for accessing the field via an interface.
func (v *clusterCommonUserCluster) GetStatus() *ClusterStatus { return v.ClusterCommon.Status }

// GetConnected returns clusterCommonUserCluster.Connected, and is useful for accessing the field via an interface.
func (v *clusterCommonUserCluster) GetConnected() *bool { return v.ClusterCommon.Connected }

// GetDomain returns clusterCommonUserCluster.Domain, and is useful for accessing the field via an interface.
func (v *clusterCommonUserCluster) GetDomain() *string { return v.ClusterCommon.Domain }

// GetIsExternal returns clusterCommonUserCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *clusterCommonUserCluster) GetIsExternal() *bool { return v.ClusterCommon.IsExternal }

// GetClusterProvider returns clusterCommonUserCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *clusterCommonUserCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterCommon.ClusterProvider
}

// GetCloudProvider returns clusterCommonUserCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *clusterCommonUserCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterCommon.CloudProvider
}

func (v *clusterCommonUserCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*clusterCommonUserCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.clusterCommonUserCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalclusterCommonUserCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`
}

func (v *clusterCommonUserCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *clusterCommonUserCluster) __premarshalJSON() (*__premarshalclusterCommonUserCluster, error) {
	var retval __premarshalclusterCommonUserCluster

	retval.Id = v.Id
	retval.Name = v.ClusterCommon.Name
	retval.Region = v.ClusterCommon.Region
	retval.State = v.ClusterCommon.State
	retval.Status = v.ClusterCommon.Status
	retval.Connected = v.ClusterCommon.Connected
	retval.Domain = v.ClusterCommon.Domain
	retval.IsExternal = v.ClusterCommon.IsExternal
	retval.ClusterProvider = v.ClusterCommon.ClusterProvider
	retval.CloudProvider = v.ClusterCommon.CloudProvider
	return &retval, nil
}

// clusterDeployLogsResponse is returned by clusterDeployLogs on success.
type clusterDeployLogsResponse struct {
	User clusterDeployLogsUser `json:"user"`
}

// GetUser returns clusterDeployLogsResponse.User, and is useful for accessing the field via an interface.
func (v *clusterDeployLogsResponse) GetUser() clusterDeployLogsUser { return v.User }

// clusterDeployLogsUser includes the requested fields of the GraphQL type User.
type clusterDeployLogsUser struct {
	Id      uuid.UUID                     `json:"id"`
	Cluster *clusterDeployLogsUserCluster `json:"cluster"`
}

// GetId returns clusterDeployLogsUser.Id, and is useful for accessing the field via an interface.
func (v *clusterDeployLogsUser) GetId() uuid.UUID { return v.Id }

// GetCluster returns clusterDeployLogsUser.Cluster, and is useful for accessing the field via an interface.
func (v *clusterDeployLogsUser) GetCluster() *clusterDeployLogsUserCluster { return v.Cluster }

// clusterDeployLogsUserCluster includes the requested fields of the GraphQL type Cluster.
type clusterDeployLogsUserCluster struct {
	Id        uuid.UUID                                    `json:"id"`
	DeployJob *clusterDeployLogsUserClusterDeployJobJobRun `json:"deployJob"`
}

// GetId returns clusterDeployLogsUserCluster.Id, and is useful for accessing the field via an interface.
func (v *clusterDeployLogsUserCluster) GetId() uuid.UUID { return v.Id }

// GetDeployJob returns clusterDeployLogsUserCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *clusterDeployLogsUserCluster) GetDeployJob() *clusterDeployLogsUserClusterDeployJobJobRun {
	return v.DeployJob
}

// clusterDeployLogsUserClusterDeployJobJobRun includes the requested fields of the GraphQL type JobRun.
type clusterDeployLogsUserClusterDeployJobJobRun struct {
	Id   uuid.UUID                                        `json:"id"`
	Logs *clusterDeployLogsUserClusterDeployJobJobRunLogs `json:"logs"`
}

// GetId returns clusterDeployLogsUserClusterDeployJobJobRun.Id, and is useful for accessing the field via an interface.
func (v *clusterDeployLogsUserClusterDeployJobJobRun) GetId() uuid.UUID { return v.Id }

// GetLogs returns clusterDeployLogsUserClusterDeployJobJobRun.Logs, and is useful for accessing the field via an interface.
func (v *clusterDeployLogsUserClusterDeployJobJobRun) GetLogs() *clusterDeployLogsUserClusterDeployJobJobRunLogs {
	return v.Logs
}

// clusterDeployLogsUserClusterDeployJobJobRunLogs includes the requested fields of the GraphQL type Logs.
type clusterDeployLogsUserClusterDeployJobJobRunLogs struct {
	Id      uuid.UUID                                                        `json:"id"`
	Cursor  *string                                                          `json:"cursor"`
	Entries []clusterDeployLogsUserClusterDeployJobJobRunLogsEntriesLogEntry `json:"entries"`
}

// GetId returns clusterDeployLogsUserClusterDeployJobJobRunLogs.Id, and is useful for accessing the field via an interface.
func (v *clusterDeployLogsUserClusterDeployJobJobRunLogs) GetId() uuid.UUID { return v.Id }

// GetCursor returns clusterDeployLogsUserClusterDeployJobJobRunLogs.Cursor, and is useful for accessing the field via an interface.
func (v *clusterDeployLogsUserClusterDeployJobJobRunLogs) GetCursor() *string { return v.Cursor }

// GetEntries returns clusterDeployLogsUserClusterDeployJobJobRunLogs.Entries, and is useful for accessing the field via an interface.
func (v *clusterDeployLogsUserClusterDeployJobJobRunLogs) GetEntries() []clusterDeployLogsUserClusterDeployJobJobRunLogsEntriesLogEntry {
	return v.Entries
}

// clusterDeployLogsUserClusterDeployJobJobRunLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type clusterDeployLogsUserClusterDeployJobJobRunLogsEntriesLogEntry struct {
	Text      string     `json:"text"`
	Timestamp *time.Time `json:"timestamp"`
}

// GetText returns clusterDeployLogsUserClusterDeployJobJobRunLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *clusterDeployLogsUserClusterDeployJobJobRunLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// GetTimestamp returns clusterDeployLogsUserClusterDeployJobJobRunLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *clusterDeployLogsUserClusterDeployJobJobRunLogsEntriesLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// clusterDetailsResponse is returned by clusterDetails on success.
type clusterDetailsResponse struct {
	User clusterDetailsUser `json:"user"`
}

// GetUser returns clusterDetailsResponse.User, and is useful for accessing the field via an interface.
func (v *clusterDetailsResponse) GetUser() clusterDetailsUser { return v.User }

// clusterDetailsUser includes the requested fields of the GraphQL type User.
type clusterDetailsUser struct {
	Id                      uuid.UUID                  `json:"id"`
	Cluster                 *clusterDetailsUserCluster `json:"cluster"`
	UserClouds              `json:"-"`
	UserContainerRegistries `json:"-"`
}

// GetId returns clusterDetailsUser.Id, and is useful for accessing the field via an interface.
func (v *clusterDetailsUser) GetId() uuid.UUID { return v.Id }

// GetCluster returns clusterDetailsUser.Cluster, and is useful for accessing the field via an interface.
func (v *clusterDetailsUser) GetCluster() *clusterDetailsUserCluster { return v.Cluster }

// GetAwsAccounts returns clusterDetailsUser.AwsAccounts, and is useful for accessing the field via an interface.
func (v *clusterDetailsUser) GetAwsAccounts() []UserCloudsAwsAccountsAWSAccount {
	return v.UserClouds.AwsAccounts
}

// GetGcpAccounts returns clusterDetailsUser.GcpAccounts, and is useful for accessing the field via an interface.
func (v *clusterDetailsUser) GetGcpAccounts() []UserCloudsGcpAccountsGCPAccount {
	return v.UserClouds.GcpAccounts
}

// GetDoAccounts returns clusterDetailsUser.DoAccounts, and is useful for accessing the field via an interface.
func (v *clusterDetailsUser) GetDoAccounts() []UserCloudsDoAccountsDOAccount {
	return v.UserClouds.DoAccounts
}

// GetCoreweaveAccounts returns clusterDetailsUser.CoreweaveAccounts, and is useful for accessing the field via an interface.
func (v *clusterDetailsUser) GetCoreweaveAccounts() []UserCloudsCoreweaveAccountsCoreWeaveAccount {
	return v.UserClouds.CoreweaveAccounts
}

// GetLinodeAccounts returns clusterDetailsUser.LinodeAccounts, and is useful for accessing the field via an interface.
func (v *clusterDetailsUser) GetLinodeAccounts() []UserCloudsLinodeAccountsLinodeAccount {
	return v.UserClouds.LinodeAccounts
}

// GetVultrAccounts returns clusterDetailsUser.VultrAccounts, and is useful for accessing the field via an interface.
func (v *clusterDetailsUser) GetVultrAccounts() []UserCloudsVultrAccountsVultrAccount {
	return v.UserClouds.VultrAccounts
}

// GetAzureAccounts returns clusterDetailsUser.AzureAccounts, and is useful for accessing the field via an interface.
func (v *clusterDetailsUser) GetAzureAccounts() []UserCloudsAzureAccountsAzureAccount {
	return v.UserClouds.AzureAccounts
}

// GetContainerRegistries returns clusterDetailsUser.ContainerRegistries, and is useful for accessing the field via an interface.
func (v *clusterDetailsUser) GetContainerRegistries() []UserContainerRegistriesContainerRegistriesContainerRegistry {
	return v.UserContainerRegistries.ContainerRegistries
}

func (v *clusterDetailsUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*clusterDetailsUser
		graphql.NoUnmarshalJSON
	}
	firstPass.clusterDetailsUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserClouds)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.UserContainerRegistries)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalclusterDetailsUser struct {
	Id uuid.UUID `json:"id"`

	Cluster *clusterDetailsUserCluster `json:"cluster"`

	AwsAccounts []UserCloudsAwsAccountsAWSAccount `json:"awsAccounts"`

	GcpAccounts []UserCloudsGcpAccountsGCPAccount `json:"gcpAccounts"`

	DoAccounts []UserCloudsDoAccountsDOAccount `json:"doAccounts"`

	CoreweaveAccounts []UserCloudsCoreweaveAccountsCoreWeaveAccount `json:"coreweaveAccounts"`

	LinodeAccounts []UserCloudsLinodeAccountsLinodeAccount `json:"linodeAccounts"`

	VultrAccounts []UserCloudsVultrAccountsVultrAccount `json:"vultrAccounts"`

	AzureAccounts []UserCloudsAzureAccountsAzureAccount `json:"azureAccounts"`

	ContainerRegistries []UserContainerRegistriesContainerRegistriesContainerRegistry `json:"containerRegistries"`
}

func (v *clusterDetailsUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *clusterDetailsUser) __premarshalJSON() (*__premarshalclusterDetailsUser, error) {
	var retval __premarshalclusterDetailsUser

	retval.Id = v.Id
	retval.Cluster = v.Cluster
	retval.AwsAccounts = v.UserClouds.AwsAccounts
	retval.GcpAccounts = v.UserClouds.GcpAccounts
	retval.DoAccounts = v.UserClouds.DoAccounts
	retval.CoreweaveAccounts = v.UserClouds.CoreweaveAccounts
	retval.LinodeAccounts = v.UserClouds.LinodeAccounts
	retval.VultrAccounts = v.UserClouds.VultrAccounts
	retval.AzureAccounts = v.UserClouds.AzureAccounts
	retval.ContainerRegistries = v.UserContainerRegistries.ContainerRegistries
	return &retval, nil
}

// clusterDetailsUserCluster includes the requested fields of the GraphQL type Cluster.
type clusterDetailsUserCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns clusterDetailsUserCluster.Id, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetId() uuid.UUID { return v.Id }

// GetName returns clusterDetailsUserCluster.Name, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns clusterDetailsUserCluster.Region, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetRegion() *string { return v.ClusterDetail.Region }

// GetState returns clusterDetailsUserCluster.State, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetState() ClusterState { return v.ClusterDetail.State }

// GetStatus returns clusterDetailsUserCluster.Status, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetStatus() *ClusterStatus { return v.ClusterDetail.Status }

// GetConnected returns clusterDetailsUserCluster.Connected, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetConnected() *bool { return v.ClusterDetail.Connected }

// GetDomain returns clusterDetailsUserCluster.Domain, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetDomain() *string { return v.ClusterDetail.Domain }

// GetIsExternal returns clusterDetailsUserCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetIsExternal() *bool { return v.ClusterDetail.IsExternal }

// GetIsEjected returns clusterDetailsUserCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetIsEjected() *bool { return v.ClusterDetail.IsEjected }

// GetComponents returns clusterDetailsUserCluster.Components, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns clusterDetailsUserCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns clusterDetailsUserCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns clusterDetailsUserCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns clusterDetailsUserCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns clusterDetailsUserCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns clusterDetailsUserCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns clusterDetailsUserCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns clusterDetailsUserCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns clusterDetailsUserCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetIngressIP() *string { return v.ClusterDetail.IngressIP }

// GetIngressDNS returns clusterDetailsUserCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetIngressDNS() *string { return v.ClusterDetail.IngressDNS }

// GetClusterProvider returns clusterDetailsUserCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns clusterDetailsUserCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns clusterDetailsUserCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns clusterDetailsUserCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns clusterDetailsUserCluster.Grafana, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns clusterDetailsUserCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns clusterDetailsUserCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns clusterDetailsUserCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns clusterDetailsUserCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetUpdatedAt() time.Time { return v.ClusterDetail.UpdatedAt }

// GetCreatedAt returns clusterDetailsUserCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetCreatedAt() time.Time { return v.ClusterDetail.CreatedAt }

// GetProjects returns clusterDetailsUserCluster.Projects, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns clusterDetailsUserCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns clusterDetailsUserCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *clusterDetailsUserCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *clusterDetailsUserCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*clusterDetailsUserCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.clusterDetailsUserCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalclusterDetailsUserCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *clusterDetailsUserCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *clusterDetailsUserCluster) __premarshalJSON() (*__premarshalclusterDetailsUserCluster, error) {
	var retval __premarshalclusterDetailsUserCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal clusterDetailsUserCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// clusterDomainResponse is returned by clusterDomain on success.
type clusterDomainResponse struct {
	User clusterDomainUser `json:"user"`
}

// GetUser returns clusterDomainResponse.User, and is useful for accessing the field via an interface.
func (v *clusterDomainResponse) GetUser() clusterDomainUser { return v.User }

// clusterDomainUser includes the requested fields of the GraphQL type User.
type clusterDomainUser struct {
	Id      uuid.UUID                 `json:"id"`
	Cluster *clusterDomainUserCluster `json:"cluster"`
}

// GetId returns clusterDomainUser.Id, and is useful for accessing the field via an interface.
func (v *clusterDomainUser) GetId() uuid.UUID { return v.Id }

// GetCluster returns clusterDomainUser.Cluster, and is useful for accessing the field via an interface.
func (v *clusterDomainUser) GetCluster() *clusterDomainUserCluster { return v.Cluster }

// clusterDomainUserCluster includes the requested fields of the GraphQL type Cluster.
type clusterDomainUserCluster struct {
	Id     uuid.UUID `json:"id"`
	Domain *string   `json:"domain"`
}

// GetId returns clusterDomainUserCluster.Id, and is useful for accessing the field via an interface.
func (v *clusterDomainUserCluster) GetId() uuid.UUID { return v.Id }

// GetDomain returns clusterDomainUserCluster.Domain, and is useful for accessing the field via an interface.
func (v *clusterDomainUserCluster) GetDomain() *string { return v.Domain }

// clusterKubeconfigResponse is returned by clusterKubeconfig on success.
type clusterKubeconfigResponse struct {
	User clusterKubeconfigUser `json:"user"`
}

// GetUser returns clusterKubeconfigResponse.User, and is useful for accessing the field via an interface.
func (v *clusterKubeconfigResponse) GetUser() clusterKubeconfigUser { return v.User }

// clusterKubeconfigUser includes the requested fields of the GraphQL type User.
type clusterKubeconfigUser struct {
	Id      uuid.UUID                     `json:"id"`
	Cluster *clusterKubeconfigUserCluster `json:"cluster"`
}

// GetId returns clusterKubeconfigUser.Id, and is useful for accessing the field via an interface.
func (v *clusterKubeconfigUser) GetId() uuid.UUID { return v.Id }

// GetCluster returns clusterKubeconfigUser.Cluster, and is useful for accessing the field via an interface.
func (v *clusterKubeconfigUser) GetCluster() *clusterKubeconfigUserCluster { return v.Cluster }

// clusterKubeconfigUserCluster includes the requested fields of the GraphQL type Cluster.
type clusterKubeconfigUserCluster struct {
	Id         uuid.UUID `json:"id"`
	Name       string    `json:"name"`
	Kubeconfig *string   `json:"kubeconfig"`
}

// GetId returns clusterKubeconfigUserCluster.Id, and is useful for accessing the field via an interface.
func (v *clusterKubeconfigUserCluster) GetId() uuid.UUID { return v.Id }

// GetName returns clusterKubeconfigUserCluster.Name, and is useful for accessing the field via an interface.
func (v *clusterKubeconfigUserCluster) GetName() string { return v.Name }

// GetKubeconfig returns clusterKubeconfigUserCluster.Kubeconfig, and is useful for accessing the field via an interface.
func (v *clusterKubeconfigUserCluster) GetKubeconfig() *string { return v.Kubeconfig }

// clusterNameResponse is returned by clusterName on success.
type clusterNameResponse struct {
	User clusterNameUser `json:"user"`
}

// GetUser returns clusterNameResponse.User, and is useful for accessing the field via an interface.
func (v *clusterNameResponse) GetUser() clusterNameUser { return v.User }

// clusterNameUser includes the requested fields of the GraphQL type User.
type clusterNameUser struct {
	Id      uuid.UUID               `json:"id"`
	Cluster *clusterNameUserCluster `json:"cluster"`
}

// GetId returns clusterNameUser.Id, and is useful for accessing the field via an interface.
func (v *clusterNameUser) GetId() uuid.UUID { return v.Id }

// GetCluster returns clusterNameUser.Cluster, and is useful for accessing the field via an interface.
func (v *clusterNameUser) GetCluster() *clusterNameUserCluster { return v.Cluster }

// clusterNameUserCluster includes the requested fields of the GraphQL type Cluster.
type clusterNameUserCluster struct {
	Id            uuid.UUID      `json:"id"`
	CloudProvider *CloudProvider `json:"cloudProvider"`
	Name          string         `json:"name"`
}

// GetId returns clusterNameUserCluster.Id, and is useful for accessing the field via an interface.
func (v *clusterNameUserCluster) GetId() uuid.UUID { return v.Id }

// GetCloudProvider returns clusterNameUserCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *clusterNameUserCluster) GetCloudProvider() *CloudProvider { return v.CloudProvider }

// GetName returns clusterNameUserCluster.Name, and is useful for accessing the field via an interface.
func (v *clusterNameUserCluster) GetName() string { return v.Name }

// clusterProvisionTargetsResponse is returned by clusterProvisionTargets on success.
type clusterProvisionTargetsResponse struct {
	User clusterProvisionTargetsUser `json:"user"`
}

// GetUser returns clusterProvisionTargetsResponse.User, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsResponse) GetUser() clusterProvisionTargetsUser { return v.User }

// clusterProvisionTargetsUser includes the requested fields of the GraphQL type User.
type clusterProvisionTargetsUser struct {
	Id             uuid.UUID                                                `json:"id"`
	AwsAccounts    []clusterProvisionTargetsUserAwsAccountsAWSAccount       `json:"awsAccounts"`
	GcpAccounts    []clusterProvisionTargetsUserGcpAccountsGCPAccount       `json:"gcpAccounts"`
	DoAccounts     []clusterProvisionTargetsUserDoAccountsDOAccount         `json:"doAccounts"`
	LinodeAccounts []clusterProvisionTargetsUserLinodeAccountsLinodeAccount `json:"linodeAccounts"`
	AzureAccounts  []clusterProvisionTargetsUserAzureAccountsAzureAccount   `json:"azureAccounts"`
	VultrAccounts  []clusterProvisionTargetsUserVultrAccountsVultrAccount   `json:"vultrAccounts"`
}

// GetId returns clusterProvisionTargetsUser.Id, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUser) GetId() uuid.UUID { return v.Id }

// GetAwsAccounts returns clusterProvisionTargetsUser.AwsAccounts, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUser) GetAwsAccounts() []clusterProvisionTargetsUserAwsAccountsAWSAccount {
	return v.AwsAccounts
}

// GetGcpAccounts returns clusterProvisionTargetsUser.GcpAccounts, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUser) GetGcpAccounts() []clusterProvisionTargetsUserGcpAccountsGCPAccount {
	return v.GcpAccounts
}

// GetDoAccounts returns clusterProvisionTargetsUser.DoAccounts, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUser) GetDoAccounts() []clusterProvisionTargetsUserDoAccountsDOAccount {
	return v.DoAccounts
}

// GetLinodeAccounts returns clusterProvisionTargetsUser.LinodeAccounts, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUser) GetLinodeAccounts() []clusterProvisionTargetsUserLinodeAccountsLinodeAccount {
	return v.LinodeAccounts
}

// GetAzureAccounts returns clusterProvisionTargetsUser.AzureAccounts, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUser) GetAzureAccounts() []clusterProvisionTargetsUserAzureAccountsAzureAccount {
	return v.AzureAccounts
}

// GetVultrAccounts returns clusterProvisionTargetsUser.VultrAccounts, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUser) GetVultrAccounts() []clusterProvisionTargetsUserVultrAccountsVultrAccount {
	return v.VultrAccounts
}

// clusterProvisionTargetsUserAwsAccountsAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type clusterProvisionTargetsUserAwsAccountsAWSAccount struct {
	Id               uuid.UUID `json:"id"`
	AWSAccountDetail `json:"-"`
}

// GetId returns clusterProvisionTargetsUserAwsAccountsAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAwsAccountsAWSAccount) GetId() uuid.UUID { return v.Id }

// GetName returns clusterProvisionTargetsUserAwsAccountsAWSAccount.Name, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAwsAccountsAWSAccount) GetName() string {
	return v.AWSAccountDetail.Name
}

// GetState returns clusterProvisionTargetsUserAwsAccountsAWSAccount.State, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAwsAccountsAWSAccount) GetState() AWSAccountState {
	return v.AWSAccountDetail.State
}

// GetAccountID returns clusterProvisionTargetsUserAwsAccountsAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAwsAccountsAWSAccount) GetAccountID() *string {
	return v.AWSAccountDetail.AccountID
}

// GetRoleARN returns clusterProvisionTargetsUserAwsAccountsAWSAccount.RoleARN, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAwsAccountsAWSAccount) GetRoleARN() *string {
	return v.AWSAccountDetail.RoleARN
}

// GetCloudFormationURL returns clusterProvisionTargetsUserAwsAccountsAWSAccount.CloudFormationURL, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAwsAccountsAWSAccount) GetCloudFormationURL() string {
	return v.AWSAccountDetail.CloudFormationURL
}

// GetConnected returns clusterProvisionTargetsUserAwsAccountsAWSAccount.Connected, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAwsAccountsAWSAccount) GetConnected() *bool {
	return v.AWSAccountDetail.Connected
}

func (v *clusterProvisionTargetsUserAwsAccountsAWSAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*clusterProvisionTargetsUserAwsAccountsAWSAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.clusterProvisionTargetsUserAwsAccountsAWSAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AWSAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalclusterProvisionTargetsUserAwsAccountsAWSAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State AWSAccountState `json:"state"`

	AccountID *string `json:"accountID"`

	RoleARN *string `json:"roleARN"`

	CloudFormationURL string `json:"cloudFormationURL"`

	Connected *bool `json:"connected"`
}

func (v *clusterProvisionTargetsUserAwsAccountsAWSAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *clusterProvisionTargetsUserAwsAccountsAWSAccount) __premarshalJSON() (*__premarshalclusterProvisionTargetsUserAwsAccountsAWSAccount, error) {
	var retval __premarshalclusterProvisionTargetsUserAwsAccountsAWSAccount

	retval.Id = v.Id
	retval.Name = v.AWSAccountDetail.Name
	retval.State = v.AWSAccountDetail.State
	retval.AccountID = v.AWSAccountDetail.AccountID
	retval.RoleARN = v.AWSAccountDetail.RoleARN
	retval.CloudFormationURL = v.AWSAccountDetail.CloudFormationURL
	retval.Connected = v.AWSAccountDetail.Connected
	return &retval, nil
}

// clusterProvisionTargetsUserAzureAccountsAzureAccount includes the requested fields of the GraphQL type AzureAccount.
type clusterProvisionTargetsUserAzureAccountsAzureAccount struct {
	Id                 uuid.UUID `json:"id"`
	AzureAccountDetail `json:"-"`
}

// GetId returns clusterProvisionTargetsUserAzureAccountsAzureAccount.Id, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAzureAccountsAzureAccount) GetId() uuid.UUID { return v.Id }

// GetName returns clusterProvisionTargetsUserAzureAccountsAzureAccount.Name, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAzureAccountsAzureAccount) GetName() string {
	return v.AzureAccountDetail.Name
}

// GetState returns clusterProvisionTargetsUserAzureAccountsAzureAccount.State, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAzureAccountsAzureAccount) GetState() CloudAccountState {
	return v.AzureAccountDetail.State
}

// GetConnected returns clusterProvisionTargetsUserAzureAccountsAzureAccount.Connected, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAzureAccountsAzureAccount) GetConnected() *bool {
	return v.AzureAccountDetail.Connected
}

// GetSubscriptionID returns clusterProvisionTargetsUserAzureAccountsAzureAccount.SubscriptionID, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAzureAccountsAzureAccount) GetSubscriptionID() *string {
	return v.AzureAccountDetail.SubscriptionID
}

// GetTenantID returns clusterProvisionTargetsUserAzureAccountsAzureAccount.TenantID, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAzureAccountsAzureAccount) GetTenantID() *string {
	return v.AzureAccountDetail.TenantID
}

// GetClientID returns clusterProvisionTargetsUserAzureAccountsAzureAccount.ClientID, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserAzureAccountsAzureAccount) GetClientID() *string {
	return v.AzureAccountDetail.ClientID
}

func (v *clusterProvisionTargetsUserAzureAccountsAzureAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*clusterProvisionTargetsUserAzureAccountsAzureAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.clusterProvisionTargetsUserAzureAccountsAzureAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AzureAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalclusterProvisionTargetsUserAzureAccountsAzureAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	Connected *bool `json:"connected"`

	SubscriptionID *string `json:"subscriptionID"`

	TenantID *string `json:"tenantID"`

	ClientID *string `json:"clientID"`
}

func (v *clusterProvisionTargetsUserAzureAccountsAzureAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *clusterProvisionTargetsUserAzureAccountsAzureAccount) __premarshalJSON() (*__premarshalclusterProvisionTargetsUserAzureAccountsAzureAccount, error) {
	var retval __premarshalclusterProvisionTargetsUserAzureAccountsAzureAccount

	retval.Id = v.Id
	retval.Name = v.AzureAccountDetail.Name
	retval.State = v.AzureAccountDetail.State
	retval.Connected = v.AzureAccountDetail.Connected
	retval.SubscriptionID = v.AzureAccountDetail.SubscriptionID
	retval.TenantID = v.AzureAccountDetail.TenantID
	retval.ClientID = v.AzureAccountDetail.ClientID
	return &retval, nil
}

// clusterProvisionTargetsUserDoAccountsDOAccount includes the requested fields of the GraphQL type DOAccount.
type clusterProvisionTargetsUserDoAccountsDOAccount struct {
	Id              uuid.UUID `json:"id"`
	DOAccountDetail `json:"-"`
}

// GetId returns clusterProvisionTargetsUserDoAccountsDOAccount.Id, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserDoAccountsDOAccount) GetId() uuid.UUID { return v.Id }

// GetName returns clusterProvisionTargetsUserDoAccountsDOAccount.Name, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserDoAccountsDOAccount) GetName() string {
	return v.DOAccountDetail.Name
}

// GetState returns clusterProvisionTargetsUserDoAccountsDOAccount.State, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserDoAccountsDOAccount) GetState() DOAccountState {
	return v.DOAccountDetail.State
}

// GetAccessTokenPrefix returns clusterProvisionTargetsUserDoAccountsDOAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserDoAccountsDOAccount) GetAccessTokenPrefix() *string {
	return v.DOAccountDetail.AccessTokenPrefix
}

// GetDefaultProject returns clusterProvisionTargetsUserDoAccountsDOAccount.DefaultProject, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserDoAccountsDOAccount) GetDefaultProject() *string {
	return v.DOAccountDetail.DefaultProject
}

// GetConnected returns clusterProvisionTargetsUserDoAccountsDOAccount.Connected, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserDoAccountsDOAccount) GetConnected() *bool {
	return v.DOAccountDetail.Connected
}

func (v *clusterProvisionTargetsUserDoAccountsDOAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*clusterProvisionTargetsUserDoAccountsDOAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.clusterProvisionTargetsUserDoAccountsDOAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DOAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalclusterProvisionTargetsUserDoAccountsDOAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State DOAccountState `json:"state"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	DefaultProject *string `json:"defaultProject"`

	Connected *bool `json:"connected"`
}

func (v *clusterProvisionTargetsUserDoAccountsDOAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *clusterProvisionTargetsUserDoAccountsDOAccount) __premarshalJSON() (*__premarshalclusterProvisionTargetsUserDoAccountsDOAccount, error) {
	var retval __premarshalclusterProvisionTargetsUserDoAccountsDOAccount

	retval.Id = v.Id
	retval.Name = v.DOAccountDetail.Name
	retval.State = v.DOAccountDetail.State
	retval.AccessTokenPrefix = v.DOAccountDetail.AccessTokenPrefix
	retval.DefaultProject = v.DOAccountDetail.DefaultProject
	retval.Connected = v.DOAccountDetail.Connected
	return &retval, nil
}

// clusterProvisionTargetsUserGcpAccountsGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type clusterProvisionTargetsUserGcpAccountsGCPAccount struct {
	Id               uuid.UUID `json:"id"`
	GCPAccountDetail `json:"-"`
}

// GetId returns clusterProvisionTargetsUserGcpAccountsGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserGcpAccountsGCPAccount) GetId() uuid.UUID { return v.Id }

// GetName returns clusterProvisionTargetsUserGcpAccountsGCPAccount.Name, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserGcpAccountsGCPAccount) GetName() string {
	return v.GCPAccountDetail.Name
}

// GetState returns clusterProvisionTargetsUserGcpAccountsGCPAccount.State, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserGcpAccountsGCPAccount) GetState() GCPAccountState {
	return v.GCPAccountDetail.State
}

// GetProjectID returns clusterProvisionTargetsUserGcpAccountsGCPAccount.ProjectID, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserGcpAccountsGCPAccount) GetProjectID() *string {
	return v.GCPAccountDetail.ProjectID
}

// GetClientEmail returns clusterProvisionTargetsUserGcpAccountsGCPAccount.ClientEmail, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserGcpAccountsGCPAccount) GetClientEmail() *string {
	return v.GCPAccountDetail.ClientEmail
}

// GetConnected returns clusterProvisionTargetsUserGcpAccountsGCPAccount.Connected, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserGcpAccountsGCPAccount) GetConnected() *bool {
	return v.GCPAccountDetail.Connected
}

// GetError returns clusterProvisionTargetsUserGcpAccountsGCPAccount.Error, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserGcpAccountsGCPAccount) GetError() *string {
	return v.GCPAccountDetail.Error
}

func (v *clusterProvisionTargetsUserGcpAccountsGCPAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*clusterProvisionTargetsUserGcpAccountsGCPAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.clusterProvisionTargetsUserGcpAccountsGCPAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GCPAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalclusterProvisionTargetsUserGcpAccountsGCPAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State GCPAccountState `json:"state"`

	ProjectID *string `json:"projectID"`

	ClientEmail *string `json:"clientEmail"`

	Connected *bool `json:"connected"`

	Error *string `json:"error"`
}

func (v *clusterProvisionTargetsUserGcpAccountsGCPAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *clusterProvisionTargetsUserGcpAccountsGCPAccount) __premarshalJSON() (*__premarshalclusterProvisionTargetsUserGcpAccountsGCPAccount, error) {
	var retval __premarshalclusterProvisionTargetsUserGcpAccountsGCPAccount

	retval.Id = v.Id
	retval.Name = v.GCPAccountDetail.Name
	retval.State = v.GCPAccountDetail.State
	retval.ProjectID = v.GCPAccountDetail.ProjectID
	retval.ClientEmail = v.GCPAccountDetail.ClientEmail
	retval.Connected = v.GCPAccountDetail.Connected
	retval.Error = v.GCPAccountDetail.Error
	return &retval, nil
}

// clusterProvisionTargetsUserLinodeAccountsLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type clusterProvisionTargetsUserLinodeAccountsLinodeAccount struct {
	Id                  uuid.UUID `json:"id"`
	LinodeAccountDetail `json:"-"`
}

// GetId returns clusterProvisionTargetsUserLinodeAccountsLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserLinodeAccountsLinodeAccount) GetId() uuid.UUID { return v.Id }

// GetName returns clusterProvisionTargetsUserLinodeAccountsLinodeAccount.Name, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserLinodeAccountsLinodeAccount) GetName() string {
	return v.LinodeAccountDetail.Name
}

// GetState returns clusterProvisionTargetsUserLinodeAccountsLinodeAccount.State, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserLinodeAccountsLinodeAccount) GetState() CloudAccountState {
	return v.LinodeAccountDetail.State
}

// GetAccessTokenPrefix returns clusterProvisionTargetsUserLinodeAccountsLinodeAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserLinodeAccountsLinodeAccount) GetAccessTokenPrefix() *string {
	return v.LinodeAccountDetail.AccessTokenPrefix
}

// GetConnected returns clusterProvisionTargetsUserLinodeAccountsLinodeAccount.Connected, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserLinodeAccountsLinodeAccount) GetConnected() *bool {
	return v.LinodeAccountDetail.Connected
}

func (v *clusterProvisionTargetsUserLinodeAccountsLinodeAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*clusterProvisionTargetsUserLinodeAccountsLinodeAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.clusterProvisionTargetsUserLinodeAccountsLinodeAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.LinodeAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalclusterProvisionTargetsUserLinodeAccountsLinodeAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	Connected *bool `json:"connected"`
}

func (v *clusterProvisionTargetsUserLinodeAccountsLinodeAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *clusterProvisionTargetsUserLinodeAccountsLinodeAccount) __premarshalJSON() (*__premarshalclusterProvisionTargetsUserLinodeAccountsLinodeAccount, error) {
	var retval __premarshalclusterProvisionTargetsUserLinodeAccountsLinodeAccount

	retval.Id = v.Id
	retval.Name = v.LinodeAccountDetail.Name
	retval.State = v.LinodeAccountDetail.State
	retval.AccessTokenPrefix = v.LinodeAccountDetail.AccessTokenPrefix
	retval.Connected = v.LinodeAccountDetail.Connected
	return &retval, nil
}

// clusterProvisionTargetsUserVultrAccountsVultrAccount includes the requested fields of the GraphQL type VultrAccount.
type clusterProvisionTargetsUserVultrAccountsVultrAccount struct {
	Id                 uuid.UUID `json:"id"`
	VultrAccountDetail `json:"-"`
}

// GetId returns clusterProvisionTargetsUserVultrAccountsVultrAccount.Id, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserVultrAccountsVultrAccount) GetId() uuid.UUID { return v.Id }

// GetName returns clusterProvisionTargetsUserVultrAccountsVultrAccount.Name, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserVultrAccountsVultrAccount) GetName() string {
	return v.VultrAccountDetail.Name
}

// GetState returns clusterProvisionTargetsUserVultrAccountsVultrAccount.State, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserVultrAccountsVultrAccount) GetState() CloudAccountState {
	return v.VultrAccountDetail.State
}

// GetConnected returns clusterProvisionTargetsUserVultrAccountsVultrAccount.Connected, and is useful for accessing the field via an interface.
func (v *clusterProvisionTargetsUserVultrAccountsVultrAccount) GetConnected() *bool {
	return v.VultrAccountDetail.Connected
}

func (v *clusterProvisionTargetsUserVultrAccountsVultrAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*clusterProvisionTargetsUserVultrAccountsVultrAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.clusterProvisionTargetsUserVultrAccountsVultrAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.VultrAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalclusterProvisionTargetsUserVultrAccountsVultrAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	Connected *bool `json:"connected"`
}

func (v *clusterProvisionTargetsUserVultrAccountsVultrAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *clusterProvisionTargetsUserVultrAccountsVultrAccount) __premarshalJSON() (*__premarshalclusterProvisionTargetsUserVultrAccountsVultrAccount, error) {
	var retval __premarshalclusterProvisionTargetsUserVultrAccountsVultrAccount

	retval.Id = v.Id
	retval.Name = v.VultrAccountDetail.Name
	retval.State = v.VultrAccountDetail.State
	retval.Connected = v.VultrAccountDetail.Connected
	return &retval, nil
}

// clustersCustomDomainsResponse is returned by clustersCustomDomains on success.
type clustersCustomDomainsResponse struct {
	User clustersCustomDomainsUser `json:"user"`
}

// GetUser returns clustersCustomDomainsResponse.User, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsResponse) GetUser() clustersCustomDomainsUser { return v.User }

// clustersCustomDomainsUser includes the requested fields of the GraphQL type User.
type clustersCustomDomainsUser struct {
	Id       uuid.UUID                                  `json:"id"`
	Clusters []clustersCustomDomainsUserClustersCluster `json:"clusters"`
}

// GetId returns clustersCustomDomainsUser.Id, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUser) GetId() uuid.UUID { return v.Id }

// GetClusters returns clustersCustomDomainsUser.Clusters, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUser) GetClusters() []clustersCustomDomainsUserClustersCluster {
	return v.Clusters
}

// clustersCustomDomainsUserClustersCluster includes the requested fields of the GraphQL type Cluster.
type clustersCustomDomainsUserClustersCluster struct {
	Id             uuid.UUID                                                                  `json:"id"`
	CustomDomains  []clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomain `json:"customDomains"`
	ClusterSummary `json:"-"`
}

// GetId returns clustersCustomDomainsUserClustersCluster.Id, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersCluster) GetId() uuid.UUID { return v.Id }

// GetCustomDomains returns clustersCustomDomainsUserClustersCluster.CustomDomains, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersCluster) GetCustomDomains() []clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomain {
	return v.CustomDomains
}

// GetName returns clustersCustomDomainsUserClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersCluster) GetName() string { return v.ClusterSummary.Name }

// GetAwsAccount returns clustersCustomDomainsUserClustersCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersCluster) GetAwsAccount() *ClusterSummaryAwsAccountAWSAccount {
	return v.ClusterSummary.AwsAccount
}

// GetGcpAccount returns clustersCustomDomainsUserClustersCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersCluster) GetGcpAccount() *ClusterSummaryGcpAccountGCPAccount {
	return v.ClusterSummary.GcpAccount
}

// GetDoAccount returns clustersCustomDomainsUserClustersCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersCluster) GetDoAccount() *ClusterSummaryDoAccountDOAccount {
	return v.ClusterSummary.DoAccount
}

// GetCwAccount returns clustersCustomDomainsUserClustersCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersCluster) GetCwAccount() *ClusterSummaryCwAccountCoreWeaveAccount {
	return v.ClusterSummary.CwAccount
}

// GetLinodeAccount returns clustersCustomDomainsUserClustersCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersCluster) GetLinodeAccount() *ClusterSummaryLinodeAccount {
	return v.ClusterSummary.LinodeAccount
}

// GetVultrAccount returns clustersCustomDomainsUserClustersCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersCluster) GetVultrAccount() *ClusterSummaryVultrAccount {
	return v.ClusterSummary.VultrAccount
}

// GetAzureAccount returns clustersCustomDomainsUserClustersCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersCluster) GetAzureAccount() *ClusterSummaryAzureAccount {
	return v.ClusterSummary.AzureAccount
}

func (v *clustersCustomDomainsUserClustersCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*clustersCustomDomainsUserClustersCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.clustersCustomDomainsUserClustersCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterSummary)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalclustersCustomDomainsUserClustersCluster struct {
	Id uuid.UUID `json:"id"`

	CustomDomains []clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomain `json:"customDomains"`

	Name string `json:"name"`

	AwsAccount *ClusterSummaryAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterSummaryGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterSummaryDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterSummaryCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterSummaryLinodeAccount `json:"linodeAccount"`

	VultrAccount *ClusterSummaryVultrAccount `json:"vultrAccount"`

	AzureAccount *ClusterSummaryAzureAccount `json:"azureAccount"`
}

func (v *clustersCustomDomainsUserClustersCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *clustersCustomDomainsUserClustersCluster) __premarshalJSON() (*__premarshalclustersCustomDomainsUserClustersCluster, error) {
	var retval __premarshalclustersCustomDomainsUserClustersCluster

	retval.Id = v.Id
	retval.CustomDomains = v.CustomDomains
	retval.Name = v.ClusterSummary.Name
	retval.AwsAccount = v.ClusterSummary.AwsAccount
	retval.GcpAccount = v.ClusterSummary.GcpAccount
	retval.DoAccount = v.ClusterSummary.DoAccount
	retval.CwAccount = v.ClusterSummary.CwAccount
	retval.LinodeAccount = v.ClusterSummary.LinodeAccount
	retval.VultrAccount = v.ClusterSummary.VultrAccount
	retval.AzureAccount = v.ClusterSummary.AzureAccount
	return &retval, nil
}

// clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomain includes the requested fields of the GraphQL type ClusterCustomDomain.
type clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomain struct {
	Id           uuid.UUID                                                                             `json:"id"`
	CustomDomain *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomain `json:"customDomain"`
	Repo         *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo         `json:"repo"`
}

// GetId returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomain.Id, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomain) GetId() uuid.UUID {
	return v.Id
}

// GetCustomDomain returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomain.CustomDomain, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomain) GetCustomDomain() *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomain {
	return v.CustomDomain
}

// GetRepo returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomain.Repo, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomain) GetRepo() *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo {
	return v.Repo
}

// clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomain includes the requested fields of the GraphQL type CustomDomain.
type clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomain struct {
	Id         uuid.UUID                                                                                                   `json:"id"`
	Domain     string                                                                                                      `json:"domain"`
	SyncDomain *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomainSyncDomainCustomDomain `json:"syncDomain"`
}

// GetId returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomain.Id, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomain) GetId() uuid.UUID {
	return v.Id
}

// GetDomain returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomain.Domain, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomain) GetDomain() string {
	return v.Domain
}

// GetSyncDomain returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomain.SyncDomain, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomain) GetSyncDomain() *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomainSyncDomainCustomDomain {
	return v.SyncDomain
}

// clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomainSyncDomainCustomDomain includes the requested fields of the GraphQL type CustomDomain.
type clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomainSyncDomainCustomDomain struct {
	Id     uuid.UUID `json:"id"`
	Domain string    `json:"domain"`
}

// GetId returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomainSyncDomainCustomDomain.Id, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomainSyncDomainCustomDomain) GetId() uuid.UUID {
	return v.Id
}

// GetDomain returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomainSyncDomainCustomDomain.Domain, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainCustomDomainSyncDomainCustomDomain) GetDomain() string {
	return v.Domain
}

// clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo includes the requested fields of the GraphQL type Repo.
type clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo struct {
	RepoCommon `json:"-"`
}

// GetId returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Id, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetId() uuid.UUID {
	return v.RepoCommon.Id
}

// GetPath returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Path, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetPath() string {
	return v.RepoCommon.Path
}

// GetName returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Name, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetName() string {
	return v.RepoCommon.Name
}

// GetEnabled returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Enabled, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetEnabled() bool {
	return v.RepoCommon.Enabled
}

// GetSource returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Source, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoCommon.Source
}

// GetDeployTarget returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetDeployTarget() *DeployTarget {
	return v.RepoCommon.DeployTarget
}

// GetDeployType returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.DeployType, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetDeployType() *DeployType {
	return v.RepoCommon.DeployType
}

// GetDeployService returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.DeployService, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetDeployService() *bool {
	return v.RepoCommon.DeployService
}

// GetDeployJob returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetDeployJob() *bool {
	return v.RepoCommon.DeployJob
}

// GetAwsAccount returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Image, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetImage() *string {
	return v.RepoCommon.Image
}

// GetCpu returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Cpu, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetCpu() *string {
	return v.RepoCommon.Cpu
}

// GetMemory returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Memory, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetMemory() *string {
	return v.RepoCommon.Memory
}

// GetGpu returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Gpu, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoCommon.Gpu
}

// GetTpu returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Tpu, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoCommon.Tpu
}

// GetUpdatedAt returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetUpdatedAt() time.Time {
	return v.RepoCommon.UpdatedAt
}

// GetDisableReason returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetDisableReason() *DisableReason {
	return v.RepoCommon.DisableReason
}

// GetCluster returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Cluster, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetCluster() *RepoCommonCluster {
	return v.RepoCommon.Cluster
}

// GetDatabaseProvider returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCommon.Autoscaling
}

// GetOwner returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Owner, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoCommon.Owner
}

// GetProject returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.Project, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetProject() *RepoCommonProject {
	return v.RepoCommon.Project
}

// GetProjectEnvironment returns clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalclustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo struct {
	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *clustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo) __premarshalJSON() (*__premarshalclustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo, error) {
	var retval __premarshalclustersCustomDomainsUserClustersClusterCustomDomainsClusterCustomDomainRepo

	retval.Id = v.RepoCommon.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment includes the requested fields of the GraphQL type Deployment.
type combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment struct {
	Id                  uuid.UUID                                                                          `json:"id"`
	AwsLinks            *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentAwsLinksAWSLinks           `json:"awsLinks"`
	CPUUtilization      []combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentCPUUtilizationMetric      `json:"CPUUtilization"`
	DatabaseConnections []combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentDatabaseConnectionsMetric `json:"DatabaseConnections"`
	FreeStorageSpace    []combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeStorageSpaceMetric    `json:"FreeStorageSpace"`
	FreeableMemory      []combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeableMemoryMetric      `json:"FreeableMemory"`
	ReadLatency         []combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentReadLatencyMetric         `json:"ReadLatency"`
	WriteLatency        []combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentWriteLatencyMetric        `json:"WriteLatency"`
}

// GetId returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment.Id, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment) GetId() uuid.UUID { return v.Id }

// GetAwsLinks returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment.AwsLinks, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment) GetAwsLinks() *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentAwsLinksAWSLinks {
	return v.AwsLinks
}

// GetCPUUtilization returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment.CPUUtilization, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment) GetCPUUtilization() []combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentCPUUtilizationMetric {
	return v.CPUUtilization
}

// GetDatabaseConnections returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment.DatabaseConnections, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment) GetDatabaseConnections() []combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentDatabaseConnectionsMetric {
	return v.DatabaseConnections
}

// GetFreeStorageSpace returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment.FreeStorageSpace, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment) GetFreeStorageSpace() []combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeStorageSpaceMetric {
	return v.FreeStorageSpace
}

// GetFreeableMemory returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment.FreeableMemory, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment) GetFreeableMemory() []combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeableMemoryMetric {
	return v.FreeableMemory
}

// GetReadLatency returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment.ReadLatency, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment) GetReadLatency() []combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentReadLatencyMetric {
	return v.ReadLatency
}

// GetWriteLatency returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment.WriteLatency, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment) GetWriteLatency() []combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentWriteLatencyMetric {
	return v.WriteLatency
}

// combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentAwsLinksAWSLinks includes the requested fields of the GraphQL type AWSLinks.
type combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentAwsLinksAWSLinks struct {
	CloudwatchMetrics *string `json:"cloudwatchMetrics"`
}

// GetCloudwatchMetrics returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentAwsLinksAWSLinks.CloudwatchMetrics, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentAwsLinksAWSLinks) GetCloudwatchMetrics() *string {
	return v.CloudwatchMetrics
}

// combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentCPUUtilizationMetric includes the requested fields of the GraphQL type Metric.
type combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentCPUUtilizationMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentCPUUtilizationMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentCPUUtilizationMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentCPUUtilizationMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentCPUUtilizationMetric) GetValue() *float64 {
	return v.Value
}

// combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentDatabaseConnectionsMetric includes the requested fields of the GraphQL type Metric.
type combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentDatabaseConnectionsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentDatabaseConnectionsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentDatabaseConnectionsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentDatabaseConnectionsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentDatabaseConnectionsMetric) GetValue() *float64 {
	return v.Value
}

// combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeStorageSpaceMetric includes the requested fields of the GraphQL type Metric.
type combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeStorageSpaceMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeStorageSpaceMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeStorageSpaceMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeStorageSpaceMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeStorageSpaceMetric) GetValue() *float64 {
	return v.Value
}

// combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeableMemoryMetric includes the requested fields of the GraphQL type Metric.
type combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeableMemoryMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeableMemoryMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeableMemoryMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeableMemoryMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentFreeableMemoryMetric) GetValue() *float64 {
	return v.Value
}

// combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentReadLatencyMetric includes the requested fields of the GraphQL type Metric.
type combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentReadLatencyMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentReadLatencyMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentReadLatencyMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentReadLatencyMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentReadLatencyMetric) GetValue() *float64 {
	return v.Value
}

// combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentWriteLatencyMetric includes the requested fields of the GraphQL type Metric.
type combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentWriteLatencyMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentWriteLatencyMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentWriteLatencyMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentWriteLatencyMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeploymentWriteLatencyMetric) GetValue() *float64 {
	return v.Value
}

// combinedAwsRdsMetricsUpdatedResponse is returned by combinedAwsRdsMetricsUpdated on success.
type combinedAwsRdsMetricsUpdatedResponse struct {
	DeploymentUpdated combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment `json:"deploymentUpdated"`
}

// GetDeploymentUpdated returns combinedAwsRdsMetricsUpdatedResponse.DeploymentUpdated, and is useful for accessing the field via an interface.
func (v *combinedAwsRdsMetricsUpdatedResponse) GetDeploymentUpdated() combinedAwsRdsMetricsUpdatedDeploymentUpdatedDeployment {
	return v.DeploymentUpdated
}

// combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment includes the requested fields of the GraphQL type Deployment.
type combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment struct {
	Id              uuid.UUID                                                                                       `json:"id"`
	GcpLinks        *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentGcpLinksGCPLinks       `json:"gcpLinks"`
	ExecutionCount  []combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentExecutionCountMetric  `json:"executionCount"`
	Duration        []combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric        `json:"duration"`
	MemoryUsage     []combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryUsageMetric     `json:"memoryUsage"`
	ActiveInstances []combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentActiveInstancesMetric `json:"activeInstances"`
}

// GetId returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment.Id, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetId() uuid.UUID {
	return v.Id
}

// GetGcpLinks returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment.GcpLinks, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetGcpLinks() *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentGcpLinksGCPLinks {
	return v.GcpLinks
}

// GetExecutionCount returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment.ExecutionCount, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetExecutionCount() []combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentExecutionCountMetric {
	return v.ExecutionCount
}

// GetDuration returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment.Duration, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetDuration() []combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric {
	return v.Duration
}

// GetMemoryUsage returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment.MemoryUsage, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetMemoryUsage() []combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryUsageMetric {
	return v.MemoryUsage
}

// GetActiveInstances returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment.ActiveInstances, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetActiveInstances() []combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentActiveInstancesMetric {
	return v.ActiveInstances
}

// combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentActiveInstancesMetric includes the requested fields of the GraphQL type Metric.
type combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentActiveInstancesMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentActiveInstancesMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentActiveInstancesMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentActiveInstancesMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentActiveInstancesMetric) GetValue() *float64 {
	return v.Value
}

// combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric includes the requested fields of the GraphQL type Metric.
type combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric) GetValue() *float64 {
	return v.Value
}

// combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentExecutionCountMetric includes the requested fields of the GraphQL type Metric.
type combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentExecutionCountMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentExecutionCountMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentExecutionCountMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentExecutionCountMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentExecutionCountMetric) GetValue() *float64 {
	return v.Value
}

// combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentGcpLinksGCPLinks includes the requested fields of the GraphQL type GCPLinks.
type combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentGcpLinksGCPLinks struct {
	CloudMonitoring *string `json:"cloudMonitoring"`
}

// GetCloudMonitoring returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentGcpLinksGCPLinks.CloudMonitoring, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentGcpLinksGCPLinks) GetCloudMonitoring() *string {
	return v.CloudMonitoring
}

// combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryUsageMetric includes the requested fields of the GraphQL type Metric.
type combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryUsageMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryUsageMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryUsageMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryUsageMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryUsageMetric) GetValue() *float64 {
	return v.Value
}

// combinedCloudFunctionDeploymentMetricsUpdatedResponse is returned by combinedCloudFunctionDeploymentMetricsUpdated on success.
type combinedCloudFunctionDeploymentMetricsUpdatedResponse struct {
	DeploymentUpdated combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment `json:"deploymentUpdated"`
}

// GetDeploymentUpdated returns combinedCloudFunctionDeploymentMetricsUpdatedResponse.DeploymentUpdated, and is useful for accessing the field via an interface.
func (v *combinedCloudFunctionDeploymentMetricsUpdatedResponse) GetDeploymentUpdated() combinedCloudFunctionDeploymentMetricsUpdatedDeploymentUpdatedDeployment {
	return v.DeploymentUpdated
}

// combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment includes the requested fields of the GraphQL type Deployment.
type combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment struct {
	Id                  uuid.UUID                                                                            `json:"id"`
	GcpLinks            *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentGcpLinksGCPLinks           `json:"gcpLinks"`
	Request_count       []combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentRequest_countMetric       `json:"request_count"`
	Instance_count      []combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentInstance_countMetric      `json:"instance_count"`
	Cpu_utilizations    []combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentCpu_utilizationsMetric    `json:"cpu_utilizations"`
	Memory_utilizations []combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentMemory_utilizationsMetric `json:"memory_utilizations"`
}

// GetId returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment.Id, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment) GetId() uuid.UUID { return v.Id }

// GetGcpLinks returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment.GcpLinks, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment) GetGcpLinks() *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentGcpLinksGCPLinks {
	return v.GcpLinks
}

// GetRequest_count returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment.Request_count, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment) GetRequest_count() []combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentRequest_countMetric {
	return v.Request_count
}

// GetInstance_count returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment.Instance_count, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment) GetInstance_count() []combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentInstance_countMetric {
	return v.Instance_count
}

// GetCpu_utilizations returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment.Cpu_utilizations, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment) GetCpu_utilizations() []combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentCpu_utilizationsMetric {
	return v.Cpu_utilizations
}

// GetMemory_utilizations returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment.Memory_utilizations, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment) GetMemory_utilizations() []combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentMemory_utilizationsMetric {
	return v.Memory_utilizations
}

// combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentCpu_utilizationsMetric includes the requested fields of the GraphQL type Metric.
type combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentCpu_utilizationsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentCpu_utilizationsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentCpu_utilizationsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentCpu_utilizationsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentCpu_utilizationsMetric) GetValue() *float64 {
	return v.Value
}

// combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentGcpLinksGCPLinks includes the requested fields of the GraphQL type GCPLinks.
type combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentGcpLinksGCPLinks struct {
	CloudMonitoring *string `json:"cloudMonitoring"`
}

// GetCloudMonitoring returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentGcpLinksGCPLinks.CloudMonitoring, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentGcpLinksGCPLinks) GetCloudMonitoring() *string {
	return v.CloudMonitoring
}

// combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentInstance_countMetric includes the requested fields of the GraphQL type Metric.
type combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentInstance_countMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentInstance_countMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentInstance_countMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentInstance_countMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentInstance_countMetric) GetValue() *float64 {
	return v.Value
}

// combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentMemory_utilizationsMetric includes the requested fields of the GraphQL type Metric.
type combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentMemory_utilizationsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentMemory_utilizationsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentMemory_utilizationsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentMemory_utilizationsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentMemory_utilizationsMetric) GetValue() *float64 {
	return v.Value
}

// combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentRequest_countMetric includes the requested fields of the GraphQL type Metric.
type combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentRequest_countMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentRequest_countMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentRequest_countMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentRequest_countMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedDeploymentUpdatedDeploymentRequest_countMetric) GetValue() *float64 {
	return v.Value
}

// combinedCloudRunMetricsUpdatedResponse is returned by combinedCloudRunMetricsUpdated on success.
type combinedCloudRunMetricsUpdatedResponse struct {
	DeploymentUpdated combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment `json:"deploymentUpdated"`
}

// GetDeploymentUpdated returns combinedCloudRunMetricsUpdatedResponse.DeploymentUpdated, and is useful for accessing the field via an interface.
func (v *combinedCloudRunMetricsUpdatedResponse) GetDeploymentUpdated() combinedCloudRunMetricsUpdatedDeploymentUpdatedDeployment {
	return v.DeploymentUpdated
}

// combinedDeploymentMetricsCurrentUser includes the requested fields of the GraphQL type User.
type combinedDeploymentMetricsCurrentUser struct {
	Id   uuid.UUID                                 `json:"id"`
	Repo *combinedDeploymentMetricsCurrentUserRepo `json:"repo"`
}

// GetId returns combinedDeploymentMetricsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetRepo returns combinedDeploymentMetricsCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUser) GetRepo() *combinedDeploymentMetricsCurrentUserRepo {
	return v.Repo
}

// combinedDeploymentMetricsCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type combinedDeploymentMetricsCurrentUserRepo struct {
	// - v0.RepoID
	Id         uuid.UUID                                           `json:"id"`
	Deployment *combinedDeploymentMetricsCurrentUserRepoDeployment `json:"deployment"`
}

// GetId returns combinedDeploymentMetricsCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetDeployment returns combinedDeploymentMetricsCurrentUserRepo.Deployment, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepo) GetDeployment() *combinedDeploymentMetricsCurrentUserRepoDeployment {
	return v.Deployment
}

// combinedDeploymentMetricsCurrentUserRepoDeployment includes the requested fields of the GraphQL type Deployment.
type combinedDeploymentMetricsCurrentUserRepoDeployment struct {
	Id             uuid.UUID                                                                `json:"id"`
	CpuMetrics     []combinedDeploymentMetricsCurrentUserRepoDeploymentCpuMetricsMetric     `json:"cpuMetrics"`
	MemoryMetrics  []combinedDeploymentMetricsCurrentUserRepoDeploymentMemoryMetricsMetric  `json:"memoryMetrics"`
	NetworkMetrics []combinedDeploymentMetricsCurrentUserRepoDeploymentNetworkMetricsMetric `json:"networkMetrics"`
	DiskMetrics    []combinedDeploymentMetricsCurrentUserRepoDeploymentDiskMetricsMetric    `json:"diskMetrics"`
}

// GetId returns combinedDeploymentMetricsCurrentUserRepoDeployment.Id, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepoDeployment) GetId() uuid.UUID { return v.Id }

// GetCpuMetrics returns combinedDeploymentMetricsCurrentUserRepoDeployment.CpuMetrics, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepoDeployment) GetCpuMetrics() []combinedDeploymentMetricsCurrentUserRepoDeploymentCpuMetricsMetric {
	return v.CpuMetrics
}

// GetMemoryMetrics returns combinedDeploymentMetricsCurrentUserRepoDeployment.MemoryMetrics, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepoDeployment) GetMemoryMetrics() []combinedDeploymentMetricsCurrentUserRepoDeploymentMemoryMetricsMetric {
	return v.MemoryMetrics
}

// GetNetworkMetrics returns combinedDeploymentMetricsCurrentUserRepoDeployment.NetworkMetrics, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepoDeployment) GetNetworkMetrics() []combinedDeploymentMetricsCurrentUserRepoDeploymentNetworkMetricsMetric {
	return v.NetworkMetrics
}

// GetDiskMetrics returns combinedDeploymentMetricsCurrentUserRepoDeployment.DiskMetrics, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepoDeployment) GetDiskMetrics() []combinedDeploymentMetricsCurrentUserRepoDeploymentDiskMetricsMetric {
	return v.DiskMetrics
}

// combinedDeploymentMetricsCurrentUserRepoDeploymentCpuMetricsMetric includes the requested fields of the GraphQL type Metric.
type combinedDeploymentMetricsCurrentUserRepoDeploymentCpuMetricsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedDeploymentMetricsCurrentUserRepoDeploymentCpuMetricsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepoDeploymentCpuMetricsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedDeploymentMetricsCurrentUserRepoDeploymentCpuMetricsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepoDeploymentCpuMetricsMetric) GetValue() *float64 {
	return v.Value
}

// combinedDeploymentMetricsCurrentUserRepoDeploymentDiskMetricsMetric includes the requested fields of the GraphQL type Metric.
type combinedDeploymentMetricsCurrentUserRepoDeploymentDiskMetricsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedDeploymentMetricsCurrentUserRepoDeploymentDiskMetricsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepoDeploymentDiskMetricsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedDeploymentMetricsCurrentUserRepoDeploymentDiskMetricsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepoDeploymentDiskMetricsMetric) GetValue() *float64 {
	return v.Value
}

// combinedDeploymentMetricsCurrentUserRepoDeploymentMemoryMetricsMetric includes the requested fields of the GraphQL type Metric.
type combinedDeploymentMetricsCurrentUserRepoDeploymentMemoryMetricsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedDeploymentMetricsCurrentUserRepoDeploymentMemoryMetricsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepoDeploymentMemoryMetricsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedDeploymentMetricsCurrentUserRepoDeploymentMemoryMetricsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepoDeploymentMemoryMetricsMetric) GetValue() *float64 {
	return v.Value
}

// combinedDeploymentMetricsCurrentUserRepoDeploymentNetworkMetricsMetric includes the requested fields of the GraphQL type Metric.
type combinedDeploymentMetricsCurrentUserRepoDeploymentNetworkMetricsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedDeploymentMetricsCurrentUserRepoDeploymentNetworkMetricsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepoDeploymentNetworkMetricsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedDeploymentMetricsCurrentUserRepoDeploymentNetworkMetricsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsCurrentUserRepoDeploymentNetworkMetricsMetric) GetValue() *float64 {
	return v.Value
}

// combinedDeploymentMetricsResponse is returned by combinedDeploymentMetrics on success.
type combinedDeploymentMetricsResponse struct {
	CurrentUser combinedDeploymentMetricsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns combinedDeploymentMetricsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsResponse) GetCurrentUser() combinedDeploymentMetricsCurrentUser {
	return v.CurrentUser
}

// combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment includes the requested fields of the GraphQL type Deployment.
type combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment struct {
	Id             uuid.UUID                                                                         `json:"id"`
	CpuMetrics     []combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentCpuMetricsMetric     `json:"cpuMetrics"`
	MemoryMetrics  []combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryMetricsMetric  `json:"memoryMetrics"`
	NetworkMetrics []combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentNetworkMetricsMetric `json:"networkMetrics"`
	DiskMetrics    []combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDiskMetricsMetric    `json:"diskMetrics"`
}

// GetId returns combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment.Id, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetId() uuid.UUID { return v.Id }

// GetCpuMetrics returns combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment.CpuMetrics, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetCpuMetrics() []combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentCpuMetricsMetric {
	return v.CpuMetrics
}

// GetMemoryMetrics returns combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment.MemoryMetrics, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetMemoryMetrics() []combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryMetricsMetric {
	return v.MemoryMetrics
}

// GetNetworkMetrics returns combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment.NetworkMetrics, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetNetworkMetrics() []combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentNetworkMetricsMetric {
	return v.NetworkMetrics
}

// GetDiskMetrics returns combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment.DiskMetrics, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetDiskMetrics() []combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDiskMetricsMetric {
	return v.DiskMetrics
}

// combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentCpuMetricsMetric includes the requested fields of the GraphQL type Metric.
type combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentCpuMetricsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentCpuMetricsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentCpuMetricsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentCpuMetricsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentCpuMetricsMetric) GetValue() *float64 {
	return v.Value
}

// combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDiskMetricsMetric includes the requested fields of the GraphQL type Metric.
type combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDiskMetricsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDiskMetricsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDiskMetricsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDiskMetricsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDiskMetricsMetric) GetValue() *float64 {
	return v.Value
}

// combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryMetricsMetric includes the requested fields of the GraphQL type Metric.
type combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryMetricsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryMetricsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryMetricsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryMetricsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentMemoryMetricsMetric) GetValue() *float64 {
	return v.Value
}

// combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentNetworkMetricsMetric includes the requested fields of the GraphQL type Metric.
type combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentNetworkMetricsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentNetworkMetricsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentNetworkMetricsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentNetworkMetricsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedDeploymentUpdatedDeploymentNetworkMetricsMetric) GetValue() *float64 {
	return v.Value
}

// combinedDeploymentMetricsUpdatedResponse is returned by combinedDeploymentMetricsUpdated on success.
type combinedDeploymentMetricsUpdatedResponse struct {
	DeploymentUpdated combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment `json:"deploymentUpdated"`
}

// GetDeploymentUpdated returns combinedDeploymentMetricsUpdatedResponse.DeploymentUpdated, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedResponse) GetDeploymentUpdated() combinedDeploymentMetricsUpdatedDeploymentUpdatedDeployment {
	return v.DeploymentUpdated
}

// combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment includes the requested fields of the GraphQL type Deployment.
type combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment struct {
	Id             uuid.UUID                                                                                 `json:"id"`
	CpuMetrics     []combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream     `json:"cpuMetrics"`
	MemoryMetrics  []combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream  `json:"memoryMetrics"`
	NetworkMetrics []combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream `json:"networkMetrics"`
	DiskMetrics    []combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream    `json:"diskMetrics"`
}

// GetId returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment.Id, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment) GetId() uuid.UUID {
	return v.Id
}

// GetCpuMetrics returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment.CpuMetrics, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment) GetCpuMetrics() []combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream {
	return v.CpuMetrics
}

// GetMemoryMetrics returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment.MemoryMetrics, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment) GetMemoryMetrics() []combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream {
	return v.MemoryMetrics
}

// GetNetworkMetrics returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment.NetworkMetrics, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment) GetNetworkMetrics() []combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream {
	return v.NetworkMetrics
}

// GetDiskMetrics returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment.DiskMetrics, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment) GetDiskMetrics() []combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream {
	return v.DiskMetrics
}

// combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream includes the requested fields of the GraphQL type MetricStream.
type combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream struct {
	MetricStream `json:"-"`
}

// GetType returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream.Type, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream) GetType() *MetricType {
	return v.MetricStream.Type
}

// GetQuery returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream.Query, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream) GetQuery() string {
	return v.MetricStream.Query
}

// GetLabels returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream.Labels, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream) GetLabels() []MetricStreamLabelsMetricStreamLabel {
	return v.MetricStream.Labels
}

// GetEntries returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream.Entries, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream) GetEntries() []MetricStreamEntriesMetricEntry {
	return v.MetricStream.Entries
}

func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream
		graphql.NoUnmarshalJSON
	}
	firstPass.combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricStream)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcombinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream struct {
	Type *MetricType `json:"type"`

	Query string `json:"query"`

	Labels []MetricStreamLabelsMetricStreamLabel `json:"labels"`

	Entries []MetricStreamEntriesMetricEntry `json:"entries"`
}

func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream) __premarshalJSON() (*__premarshalcombinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream, error) {
	var retval __premarshalcombinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentCpuMetricsMetricStream

	retval.Type = v.MetricStream.Type
	retval.Query = v.MetricStream.Query
	retval.Labels = v.MetricStream.Labels
	retval.Entries = v.MetricStream.Entries
	return &retval, nil
}

// combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream includes the requested fields of the GraphQL type MetricStream.
type combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream struct {
	MetricStream `json:"-"`
}

// GetType returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream.Type, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream) GetType() *MetricType {
	return v.MetricStream.Type
}

// GetQuery returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream.Query, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream) GetQuery() string {
	return v.MetricStream.Query
}

// GetLabels returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream.Labels, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream) GetLabels() []MetricStreamLabelsMetricStreamLabel {
	return v.MetricStream.Labels
}

// GetEntries returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream.Entries, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream) GetEntries() []MetricStreamEntriesMetricEntry {
	return v.MetricStream.Entries
}

func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream
		graphql.NoUnmarshalJSON
	}
	firstPass.combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricStream)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcombinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream struct {
	Type *MetricType `json:"type"`

	Query string `json:"query"`

	Labels []MetricStreamLabelsMetricStreamLabel `json:"labels"`

	Entries []MetricStreamEntriesMetricEntry `json:"entries"`
}

func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream) __premarshalJSON() (*__premarshalcombinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream, error) {
	var retval __premarshalcombinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentDiskMetricsMetricStream

	retval.Type = v.MetricStream.Type
	retval.Query = v.MetricStream.Query
	retval.Labels = v.MetricStream.Labels
	retval.Entries = v.MetricStream.Entries
	return &retval, nil
}

// combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream includes the requested fields of the GraphQL type MetricStream.
type combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream struct {
	MetricStream `json:"-"`
}

// GetType returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream.Type, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream) GetType() *MetricType {
	return v.MetricStream.Type
}

// GetQuery returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream.Query, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream) GetQuery() string {
	return v.MetricStream.Query
}

// GetLabels returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream.Labels, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream) GetLabels() []MetricStreamLabelsMetricStreamLabel {
	return v.MetricStream.Labels
}

// GetEntries returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream.Entries, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream) GetEntries() []MetricStreamEntriesMetricEntry {
	return v.MetricStream.Entries
}

func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream
		graphql.NoUnmarshalJSON
	}
	firstPass.combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricStream)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcombinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream struct {
	Type *MetricType `json:"type"`

	Query string `json:"query"`

	Labels []MetricStreamLabelsMetricStreamLabel `json:"labels"`

	Entries []MetricStreamEntriesMetricEntry `json:"entries"`
}

func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream) __premarshalJSON() (*__premarshalcombinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream, error) {
	var retval __premarshalcombinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentMemoryMetricsMetricStream

	retval.Type = v.MetricStream.Type
	retval.Query = v.MetricStream.Query
	retval.Labels = v.MetricStream.Labels
	retval.Entries = v.MetricStream.Entries
	return &retval, nil
}

// combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream includes the requested fields of the GraphQL type MetricStream.
type combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream struct {
	MetricStream `json:"-"`
}

// GetType returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream.Type, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream) GetType() *MetricType {
	return v.MetricStream.Type
}

// GetQuery returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream.Query, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream) GetQuery() string {
	return v.MetricStream.Query
}

// GetLabels returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream.Labels, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream) GetLabels() []MetricStreamLabelsMetricStreamLabel {
	return v.MetricStream.Labels
}

// GetEntries returns combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream.Entries, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream) GetEntries() []MetricStreamEntriesMetricEntry {
	return v.MetricStream.Entries
}

func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream
		graphql.NoUnmarshalJSON
	}
	firstPass.combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricStream)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcombinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream struct {
	Type *MetricType `json:"type"`

	Query string `json:"query"`

	Labels []MetricStreamLabelsMetricStreamLabel `json:"labels"`

	Entries []MetricStreamEntriesMetricEntry `json:"entries"`
}

func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream) __premarshalJSON() (*__premarshalcombinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream, error) {
	var retval __premarshalcombinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeploymentNetworkMetricsMetricStream

	retval.Type = v.MetricStream.Type
	retval.Query = v.MetricStream.Query
	retval.Labels = v.MetricStream.Labels
	retval.Entries = v.MetricStream.Entries
	return &retval, nil
}

// combinedDeploymentMetricsUpdatedV2Response is returned by combinedDeploymentMetricsUpdatedV2 on success.
type combinedDeploymentMetricsUpdatedV2Response struct {
	DeploymentUpdated combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment `json:"deploymentUpdated"`
}

// GetDeploymentUpdated returns combinedDeploymentMetricsUpdatedV2Response.DeploymentUpdated, and is useful for accessing the field via an interface.
func (v *combinedDeploymentMetricsUpdatedV2Response) GetDeploymentUpdated() combinedDeploymentMetricsUpdatedV2DeploymentUpdatedDeployment {
	return v.DeploymentUpdated
}

// combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment includes the requested fields of the GraphQL type Deployment.
type combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment struct {
	Id                   uuid.UUID                                                                                     `json:"id"`
	AwsLinks             *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentAwsLinksAWSLinks            `json:"awsLinks"`
	Invocations          []combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentInvocationsMetric          `json:"invocations"`
	Errors               []combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentErrorsMetric               `json:"errors"`
	Duration             []combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric             `json:"duration"`
	ConcurrentExecutions []combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentConcurrentExecutionsMetric `json:"concurrentExecutions"`
}

// GetId returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment.Id, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetId() uuid.UUID {
	return v.Id
}

// GetAwsLinks returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment.AwsLinks, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetAwsLinks() *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentAwsLinksAWSLinks {
	return v.AwsLinks
}

// GetInvocations returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment.Invocations, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetInvocations() []combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentInvocationsMetric {
	return v.Invocations
}

// GetErrors returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment.Errors, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetErrors() []combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentErrorsMetric {
	return v.Errors
}

// GetDuration returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment.Duration, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetDuration() []combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric {
	return v.Duration
}

// GetConcurrentExecutions returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment.ConcurrentExecutions, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment) GetConcurrentExecutions() []combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentConcurrentExecutionsMetric {
	return v.ConcurrentExecutions
}

// combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentAwsLinksAWSLinks includes the requested fields of the GraphQL type AWSLinks.
type combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentAwsLinksAWSLinks struct {
	CloudwatchMetrics *string `json:"cloudwatchMetrics"`
}

// GetCloudwatchMetrics returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentAwsLinksAWSLinks.CloudwatchMetrics, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentAwsLinksAWSLinks) GetCloudwatchMetrics() *string {
	return v.CloudwatchMetrics
}

// combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentConcurrentExecutionsMetric includes the requested fields of the GraphQL type Metric.
type combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentConcurrentExecutionsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentConcurrentExecutionsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentConcurrentExecutionsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentConcurrentExecutionsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentConcurrentExecutionsMetric) GetValue() *float64 {
	return v.Value
}

// combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric includes the requested fields of the GraphQL type Metric.
type combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentDurationMetric) GetValue() *float64 {
	return v.Value
}

// combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentErrorsMetric includes the requested fields of the GraphQL type Metric.
type combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentErrorsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentErrorsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentErrorsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentErrorsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentErrorsMetric) GetValue() *float64 {
	return v.Value
}

// combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentInvocationsMetric includes the requested fields of the GraphQL type Metric.
type combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentInvocationsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentInvocationsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentInvocationsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentInvocationsMetric.Value, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeploymentInvocationsMetric) GetValue() *float64 {
	return v.Value
}

// combinedLambdaDeploymentMetricsUpdatedResponse is returned by combinedLambdaDeploymentMetricsUpdated on success.
type combinedLambdaDeploymentMetricsUpdatedResponse struct {
	DeploymentUpdated combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment `json:"deploymentUpdated"`
}

// GetDeploymentUpdated returns combinedLambdaDeploymentMetricsUpdatedResponse.DeploymentUpdated, and is useful for accessing the field via an interface.
func (v *combinedLambdaDeploymentMetricsUpdatedResponse) GetDeploymentUpdated() combinedLambdaDeploymentMetricsUpdatedDeploymentUpdatedDeployment {
	return v.DeploymentUpdated
}

// copyEnvVarsCopyEnvVarsRepo includes the requested fields of the GraphQL type Repo.
type copyEnvVarsCopyEnvVarsRepo struct {
	// - v0.RepoID
	Id   uuid.UUID                              `json:"id"`
	Envs []copyEnvVarsCopyEnvVarsRepoEnvsEnvVar `json:"envs"`
}

// GetId returns copyEnvVarsCopyEnvVarsRepo.Id, and is useful for accessing the field via an interface.
func (v *copyEnvVarsCopyEnvVarsRepo) GetId() uuid.UUID { return v.Id }

// GetEnvs returns copyEnvVarsCopyEnvVarsRepo.Envs, and is useful for accessing the field via an interface.
func (v *copyEnvVarsCopyEnvVarsRepo) GetEnvs() []copyEnvVarsCopyEnvVarsRepoEnvsEnvVar { return v.Envs }

// copyEnvVarsCopyEnvVarsRepoEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type copyEnvVarsCopyEnvVarsRepoEnvsEnvVar struct {
	Id      uuid.UUID `json:"id"`
	Name    string    `json:"name"`
	Value   string    `json:"value"`
	Visible bool      `json:"visible"`
	Sealed  bool      `json:"sealed"`
}

// GetId returns copyEnvVarsCopyEnvVarsRepoEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *copyEnvVarsCopyEnvVarsRepoEnvsEnvVar) GetId() uuid.UUID { return v.Id }

// GetName returns copyEnvVarsCopyEnvVarsRepoEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *copyEnvVarsCopyEnvVarsRepoEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns copyEnvVarsCopyEnvVarsRepoEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *copyEnvVarsCopyEnvVarsRepoEnvsEnvVar) GetValue() string { return v.Value }

// GetVisible returns copyEnvVarsCopyEnvVarsRepoEnvsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *copyEnvVarsCopyEnvVarsRepoEnvsEnvVar) GetVisible() bool { return v.Visible }

// GetSealed returns copyEnvVarsCopyEnvVarsRepoEnvsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *copyEnvVarsCopyEnvVarsRepoEnvsEnvVar) GetSealed() bool { return v.Sealed }

// copyEnvVarsResponse is returned by copyEnvVars on success.
type copyEnvVarsResponse struct {
	CopyEnvVars *copyEnvVarsCopyEnvVarsRepo `json:"copyEnvVars"`
}

// GetCopyEnvVars returns copyEnvVarsResponse.CopyEnvVars, and is useful for accessing the field via an interface.
func (v *copyEnvVarsResponse) GetCopyEnvVars() *copyEnvVarsCopyEnvVarsRepo { return v.CopyEnvVars }

// createAPIKeyCreateAPIKey includes the requested fields of the GraphQL type APIKey.
type createAPIKeyCreateAPIKey struct {
	Id          uuid.UUID `json:"id"`
	Token       string    `json:"token"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
}

// GetId returns createAPIKeyCreateAPIKey.Id, and is useful for accessing the field via an interface.
func (v *createAPIKeyCreateAPIKey) GetId() uuid.UUID { return v.Id }

// GetToken returns createAPIKeyCreateAPIKey.Token, and is useful for accessing the field via an interface.
func (v *createAPIKeyCreateAPIKey) GetToken() string { return v.Token }

// GetName returns createAPIKeyCreateAPIKey.Name, and is useful for accessing the field via an interface.
func (v *createAPIKeyCreateAPIKey) GetName() string { return v.Name }

// GetDescription returns createAPIKeyCreateAPIKey.Description, and is useful for accessing the field via an interface.
func (v *createAPIKeyCreateAPIKey) GetDescription() string { return v.Description }

// GetCreatedAt returns createAPIKeyCreateAPIKey.CreatedAt, and is useful for accessing the field via an interface.
func (v *createAPIKeyCreateAPIKey) GetCreatedAt() time.Time { return v.CreatedAt }

// createAPIKeyResponse is returned by createAPIKey on success.
type createAPIKeyResponse struct {
	CreateAPIKey createAPIKeyCreateAPIKey `json:"createAPIKey"`
}

// GetCreateAPIKey returns createAPIKeyResponse.CreateAPIKey, and is useful for accessing the field via an interface.
func (v *createAPIKeyResponse) GetCreateAPIKey() createAPIKeyCreateAPIKey { return v.CreateAPIKey }

// createBitbucketIntegrationCreateBitbucketIntegration includes the requested fields of the GraphQL type BitbucketIntegration.
type createBitbucketIntegrationCreateBitbucketIntegration struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns createBitbucketIntegrationCreateBitbucketIntegration.Id, and is useful for accessing the field via an interface.
func (v *createBitbucketIntegrationCreateBitbucketIntegration) GetId() uuid.UUID { return v.Id }

// createBitbucketIntegrationResponse is returned by createBitbucketIntegration on success.
type createBitbucketIntegrationResponse struct {
	CreateBitbucketIntegration createBitbucketIntegrationCreateBitbucketIntegration `json:"createBitbucketIntegration"`
}

// GetCreateBitbucketIntegration returns createBitbucketIntegrationResponse.CreateBitbucketIntegration, and is useful for accessing the field via an interface.
func (v *createBitbucketIntegrationResponse) GetCreateBitbucketIntegration() createBitbucketIntegrationCreateBitbucketIntegration {
	return v.CreateBitbucketIntegration
}

// createBlueprintCreateBlueprint includes the requested fields of the GraphQL type Blueprint.
type createBlueprintCreateBlueprint struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns createBlueprintCreateBlueprint.Id, and is useful for accessing the field via an interface.
func (v *createBlueprintCreateBlueprint) GetId() uuid.UUID { return v.Id }

// createBlueprintDriverWorkflowResponse is returned by createBlueprintDriverWorkflow on success.
type createBlueprintDriverWorkflowResponse struct {
	// CAUTION: Experimental!
	//
	// Submits a driver workflow to the workflow queue.
	// Driver workflows are immutable: steps cannot be added after a workflow has been submitted.
	// - projectID: v0.ProjectV3ID
	SubmitBlueprintDriverWorkflow *createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow `json:"submitBlueprintDriverWorkflow"`
}

// GetSubmitBlueprintDriverWorkflow returns createBlueprintDriverWorkflowResponse.SubmitBlueprintDriverWorkflow, and is useful for accessing the field via an interface.
func (v *createBlueprintDriverWorkflowResponse) GetSubmitBlueprintDriverWorkflow() *createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow {
	return v.SubmitBlueprintDriverWorkflow
}

// createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow includes the requested fields of the GraphQL type BlueprintDriverWorkflow.
// The GraphQL type's documentation follows.
//
// CAUTION: Experimental!
//
// Provides a similar interface to the ProjectV3Workflow type.
type createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow struct {
	Id                            uuid.UUID `json:"id"`
	BlueprintDriverWorkflowDetail `json:"-"`
}

// GetId returns createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow.Id, and is useful for accessing the field via an interface.
func (v *createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow) GetId() uuid.UUID { return v.Id }

// GetStatus returns createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow.Status, and is useful for accessing the field via an interface.
func (v *createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow) GetStatus() ProjectV3WorkflowStatus {
	return v.BlueprintDriverWorkflowDetail.Status
}

// GetSteps returns createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow.Steps, and is useful for accessing the field via an interface.
func (v *createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow) GetSteps() []BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep {
	return v.BlueprintDriverWorkflowDetail.Steps
}

// GetCreatedAt returns createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow.CreatedAt, and is useful for accessing the field via an interface.
func (v *createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow) GetCreatedAt() time.Time {
	return v.BlueprintDriverWorkflowDetail.CreatedAt
}

// GetUpdatedAt returns createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow) GetUpdatedAt() time.Time {
	return v.BlueprintDriverWorkflowDetail.UpdatedAt
}

func (v *createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow
		graphql.NoUnmarshalJSON
	}
	firstPass.createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintDriverWorkflowDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow struct {
	Id uuid.UUID `json:"id"`

	Status ProjectV3WorkflowStatus `json:"status"`

	Steps []BlueprintDriverWorkflowDetailStepsBlueprintDriverWorkflowStep `json:"steps"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow) __premarshalJSON() (*__premarshalcreateBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow, error) {
	var retval __premarshalcreateBlueprintDriverWorkflowSubmitBlueprintDriverWorkflow

	retval.Id = v.Id
	retval.Status = v.BlueprintDriverWorkflowDetail.Status
	retval.Steps = v.BlueprintDriverWorkflowDetail.Steps
	retval.CreatedAt = v.BlueprintDriverWorkflowDetail.CreatedAt
	retval.UpdatedAt = v.BlueprintDriverWorkflowDetail.UpdatedAt
	return &retval, nil
}

// createBlueprintResponse is returned by createBlueprint on success.
type createBlueprintResponse struct {
	CreateBlueprint createBlueprintCreateBlueprint `json:"createBlueprint"`
}

// GetCreateBlueprint returns createBlueprintResponse.CreateBlueprint, and is useful for accessing the field via an interface.
func (v *createBlueprintResponse) GetCreateBlueprint() createBlueprintCreateBlueprint {
	return v.CreateBlueprint
}

// createBranchResponse is returned by createBranch on success.
type createBranchResponse struct {
	UpdateBranch createBranchUpdateBranchRepoBranchV2 `json:"updateBranch"`
}

// GetUpdateBranch returns createBranchResponse.UpdateBranch, and is useful for accessing the field via an interface.
func (v *createBranchResponse) GetUpdateBranch() createBranchUpdateBranchRepoBranchV2 {
	return v.UpdateBranch
}

// createBranchUpdateBranchRepoBranchV2 includes the requested fields of the GraphQL type RepoBranchV2.
type createBranchUpdateBranchRepoBranchV2 struct {
	Id           uuid.UUID `json:"id"`
	BranchCommon `json:"-"`
}

// GetId returns createBranchUpdateBranchRepoBranchV2.Id, and is useful for accessing the field via an interface.
func (v *createBranchUpdateBranchRepoBranchV2) GetId() uuid.UUID { return v.Id }

// GetName returns createBranchUpdateBranchRepoBranchV2.Name, and is useful for accessing the field via an interface.
func (v *createBranchUpdateBranchRepoBranchV2) GetName() string { return v.BranchCommon.Name }

// GetCreatedAt returns createBranchUpdateBranchRepoBranchV2.CreatedAt, and is useful for accessing the field via an interface.
func (v *createBranchUpdateBranchRepoBranchV2) GetCreatedAt() time.Time {
	return v.BranchCommon.CreatedAt
}

// GetUpdatedAt returns createBranchUpdateBranchRepoBranchV2.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createBranchUpdateBranchRepoBranchV2) GetUpdatedAt() time.Time {
	return v.BranchCommon.UpdatedAt
}

// GetState returns createBranchUpdateBranchRepoBranchV2.State, and is useful for accessing the field via an interface.
func (v *createBranchUpdateBranchRepoBranchV2) GetState() *string { return v.BranchCommon.State }

// GetEndpoints returns createBranchUpdateBranchRepoBranchV2.Endpoints, and is useful for accessing the field via an interface.
func (v *createBranchUpdateBranchRepoBranchV2) GetEndpoints() []string {
	return v.BranchCommon.Endpoints
}

// GetLatestDeployment returns createBranchUpdateBranchRepoBranchV2.LatestDeployment, and is useful for accessing the field via an interface.
func (v *createBranchUpdateBranchRepoBranchV2) GetLatestDeployment() *BranchCommonLatestDeployment {
	return v.BranchCommon.LatestDeployment
}

func (v *createBranchUpdateBranchRepoBranchV2) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createBranchUpdateBranchRepoBranchV2
		graphql.NoUnmarshalJSON
	}
	firstPass.createBranchUpdateBranchRepoBranchV2 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BranchCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateBranchUpdateBranchRepoBranchV2 struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	State *string `json:"state"`

	Endpoints []string `json:"endpoints"`

	LatestDeployment *BranchCommonLatestDeployment `json:"latestDeployment"`
}

func (v *createBranchUpdateBranchRepoBranchV2) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createBranchUpdateBranchRepoBranchV2) __premarshalJSON() (*__premarshalcreateBranchUpdateBranchRepoBranchV2, error) {
	var retval __premarshalcreateBranchUpdateBranchRepoBranchV2

	retval.Id = v.Id
	retval.Name = v.BranchCommon.Name
	retval.CreatedAt = v.BranchCommon.CreatedAt
	retval.UpdatedAt = v.BranchCommon.UpdatedAt
	retval.State = v.BranchCommon.State
	retval.Endpoints = v.BranchCommon.Endpoints
	retval.LatestDeployment = v.BranchCommon.LatestDeployment
	return &retval, nil
}

// createClusterCreateCluster includes the requested fields of the GraphQL type Cluster.
type createClusterCreateCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns createClusterCreateCluster.Id, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetId() uuid.UUID { return v.Id }

// GetName returns createClusterCreateCluster.Name, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns createClusterCreateCluster.Region, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetRegion() *string { return v.ClusterDetail.Region }

// GetState returns createClusterCreateCluster.State, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetState() ClusterState { return v.ClusterDetail.State }

// GetStatus returns createClusterCreateCluster.Status, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetStatus() *ClusterStatus { return v.ClusterDetail.Status }

// GetConnected returns createClusterCreateCluster.Connected, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetConnected() *bool { return v.ClusterDetail.Connected }

// GetDomain returns createClusterCreateCluster.Domain, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetDomain() *string { return v.ClusterDetail.Domain }

// GetIsExternal returns createClusterCreateCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetIsExternal() *bool { return v.ClusterDetail.IsExternal }

// GetIsEjected returns createClusterCreateCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetIsEjected() *bool { return v.ClusterDetail.IsEjected }

// GetComponents returns createClusterCreateCluster.Components, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns createClusterCreateCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns createClusterCreateCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns createClusterCreateCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns createClusterCreateCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns createClusterCreateCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns createClusterCreateCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns createClusterCreateCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns createClusterCreateCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns createClusterCreateCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetIngressIP() *string { return v.ClusterDetail.IngressIP }

// GetIngressDNS returns createClusterCreateCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetIngressDNS() *string { return v.ClusterDetail.IngressDNS }

// GetClusterProvider returns createClusterCreateCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns createClusterCreateCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns createClusterCreateCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns createClusterCreateCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns createClusterCreateCluster.Grafana, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns createClusterCreateCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns createClusterCreateCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns createClusterCreateCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns createClusterCreateCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetUpdatedAt() time.Time { return v.ClusterDetail.UpdatedAt }

// GetCreatedAt returns createClusterCreateCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetCreatedAt() time.Time { return v.ClusterDetail.CreatedAt }

// GetProjects returns createClusterCreateCluster.Projects, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns createClusterCreateCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns createClusterCreateCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *createClusterCreateCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *createClusterCreateCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createClusterCreateCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.createClusterCreateCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateClusterCreateCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *createClusterCreateCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createClusterCreateCluster) __premarshalJSON() (*__premarshalcreateClusterCreateCluster, error) {
	var retval __premarshalcreateClusterCreateCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal createClusterCreateCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// createClusterResponse is returned by createCluster on success.
type createClusterResponse struct {
	CreateCluster createClusterCreateCluster `json:"createCluster"`
}

// GetCreateCluster returns createClusterResponse.CreateCluster, and is useful for accessing the field via an interface.
func (v *createClusterResponse) GetCreateCluster() createClusterCreateCluster { return v.CreateCluster }

// createDatabaseCreateDatabaseRepo includes the requested fields of the GraphQL type Repo.
type createDatabaseCreateDatabaseRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns createDatabaseCreateDatabaseRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns createDatabaseCreateDatabaseRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns createDatabaseCreateDatabaseRepo.Manifest, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns createDatabaseCreateDatabaseRepo.AppID, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns createDatabaseCreateDatabaseRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns createDatabaseCreateDatabaseRepo.KappID, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns createDatabaseCreateDatabaseRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns createDatabaseCreateDatabaseRepo.Project, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns createDatabaseCreateDatabaseRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns createDatabaseCreateDatabaseRepo.Namespace, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns createDatabaseCreateDatabaseRepo.Envs, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetEnvs() []RepoDetailEnvsEnvVar { return v.RepoDetail.Envs }

// GetCollaborators returns createDatabaseCreateDatabaseRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns createDatabaseCreateDatabaseRepo.Volumes, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns createDatabaseCreateDatabaseRepo.Replication, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns createDatabaseCreateDatabaseRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns createDatabaseCreateDatabaseRepo.Cluster, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns createDatabaseCreateDatabaseRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns createDatabaseCreateDatabaseRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns createDatabaseCreateDatabaseRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns createDatabaseCreateDatabaseRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns createDatabaseCreateDatabaseRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns createDatabaseCreateDatabaseRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns createDatabaseCreateDatabaseRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetManualDeploy() *bool { return v.RepoDetail.ManualDeploy }

// GetDeployStrategy returns createDatabaseCreateDatabaseRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns createDatabaseCreateDatabaseRepo.Free, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns createDatabaseCreateDatabaseRepo.Cpu, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns createDatabaseCreateDatabaseRepo.Memory, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns createDatabaseCreateDatabaseRepo.Gpu, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetGpu() *RepoDetailGpuGPUSpec { return v.RepoDetail.Gpu }

// GetTpu returns createDatabaseCreateDatabaseRepo.Tpu, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetTpu() *RepoDetailTpuTPUSpec { return v.RepoDetail.Tpu }

// GetEphemeralStorage returns createDatabaseCreateDatabaseRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns createDatabaseCreateDatabaseRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns createDatabaseCreateDatabaseRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns createDatabaseCreateDatabaseRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns createDatabaseCreateDatabaseRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns createDatabaseCreateDatabaseRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns createDatabaseCreateDatabaseRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns createDatabaseCreateDatabaseRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns createDatabaseCreateDatabaseRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns createDatabaseCreateDatabaseRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetHelmValues() *string { return v.RepoDetail.HelmValues }

// GetTerraformVersion returns createDatabaseCreateDatabaseRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns createDatabaseCreateDatabaseRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns createDatabaseCreateDatabaseRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns createDatabaseCreateDatabaseRepo.DeployService, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns createDatabaseCreateDatabaseRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns createDatabaseCreateDatabaseRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetPreStopSleep() *int { return v.RepoDetail.PreStopSleep }

// GetTerminationGracePeriodSeconds returns createDatabaseCreateDatabaseRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns createDatabaseCreateDatabaseRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns createDatabaseCreateDatabaseRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns createDatabaseCreateDatabaseRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns createDatabaseCreateDatabaseRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns createDatabaseCreateDatabaseRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns createDatabaseCreateDatabaseRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns createDatabaseCreateDatabaseRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns createDatabaseCreateDatabaseRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns createDatabaseCreateDatabaseRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns createDatabaseCreateDatabaseRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetAutoRollback() *bool { return v.RepoDetail.AutoRollback }

// GetCanDeploy returns createDatabaseCreateDatabaseRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns createDatabaseCreateDatabaseRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns createDatabaseCreateDatabaseRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetAwsIamRole() *string { return v.RepoDetail.AwsIamRole }

// GetGcpServiceAccount returns createDatabaseCreateDatabaseRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns createDatabaseCreateDatabaseRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns createDatabaseCreateDatabaseRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns createDatabaseCreateDatabaseRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns createDatabaseCreateDatabaseRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns createDatabaseCreateDatabaseRepo.Id, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetId() uuid.UUID { return v.RepoDetail.RepoCommon.Id }

// GetPath returns createDatabaseCreateDatabaseRepo.Path, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns createDatabaseCreateDatabaseRepo.Name, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns createDatabaseCreateDatabaseRepo.Enabled, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetEnabled() bool { return v.RepoDetail.RepoCommon.Enabled }

// GetSource returns createDatabaseCreateDatabaseRepo.Source, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns createDatabaseCreateDatabaseRepo.DeployType, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns createDatabaseCreateDatabaseRepo.Image, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetImage() *string { return v.RepoDetail.RepoCommon.Image }

// GetUpdatedAt returns createDatabaseCreateDatabaseRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns createDatabaseCreateDatabaseRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns createDatabaseCreateDatabaseRepo.Owner, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns createDatabaseCreateDatabaseRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns createDatabaseCreateDatabaseRepo.Cdns, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns createDatabaseCreateDatabaseRepo.Ports, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns createDatabaseCreateDatabaseRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns createDatabaseCreateDatabaseRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns createDatabaseCreateDatabaseRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns createDatabaseCreateDatabaseRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns createDatabaseCreateDatabaseRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns createDatabaseCreateDatabaseRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns createDatabaseCreateDatabaseRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns createDatabaseCreateDatabaseRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns createDatabaseCreateDatabaseRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *createDatabaseCreateDatabaseRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *createDatabaseCreateDatabaseRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createDatabaseCreateDatabaseRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.createDatabaseCreateDatabaseRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateDatabaseCreateDatabaseRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *createDatabaseCreateDatabaseRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createDatabaseCreateDatabaseRepo) __premarshalJSON() (*__premarshalcreateDatabaseCreateDatabaseRepo, error) {
	var retval __premarshalcreateDatabaseCreateDatabaseRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// createDatabaseResponse is returned by createDatabase on success.
type createDatabaseResponse struct {
	CreateDatabase createDatabaseCreateDatabaseRepo `json:"createDatabase"`
}

// GetCreateDatabase returns createDatabaseResponse.CreateDatabase, and is useful for accessing the field via an interface.
func (v *createDatabaseResponse) GetCreateDatabase() createDatabaseCreateDatabaseRepo {
	return v.CreateDatabase
}

// createDatadogIntegrationCreateDatadogIntegration includes the requested fields of the GraphQL type DatadogIntegration.
type createDatadogIntegrationCreateDatadogIntegration struct {
	Id                                  uuid.UUID `json:"id"`
	IntegrationCommonDatadogIntegration `json:"-"`
	ApiKey                              *string `json:"apiKey"`
}

// GetId returns createDatadogIntegrationCreateDatadogIntegration.Id, and is useful for accessing the field via an interface.
func (v *createDatadogIntegrationCreateDatadogIntegration) GetId() uuid.UUID { return v.Id }

// GetApiKey returns createDatadogIntegrationCreateDatadogIntegration.ApiKey, and is useful for accessing the field via an interface.
func (v *createDatadogIntegrationCreateDatadogIntegration) GetApiKey() *string { return v.ApiKey }

// GetType returns createDatadogIntegrationCreateDatadogIntegration.Type, and is useful for accessing the field via an interface.
func (v *createDatadogIntegrationCreateDatadogIntegration) GetType() IntegrationType {
	return v.IntegrationCommonDatadogIntegration.Type
}

// GetName returns createDatadogIntegrationCreateDatadogIntegration.Name, and is useful for accessing the field via an interface.
func (v *createDatadogIntegrationCreateDatadogIntegration) GetName() string {
	return v.IntegrationCommonDatadogIntegration.Name
}

// GetDescription returns createDatadogIntegrationCreateDatadogIntegration.Description, and is useful for accessing the field via an interface.
func (v *createDatadogIntegrationCreateDatadogIntegration) GetDescription() string {
	return v.IntegrationCommonDatadogIntegration.Description
}

// GetImage returns createDatadogIntegrationCreateDatadogIntegration.Image, and is useful for accessing the field via an interface.
func (v *createDatadogIntegrationCreateDatadogIntegration) GetImage() string {
	return v.IntegrationCommonDatadogIntegration.Image
}

// GetCreatedAt returns createDatadogIntegrationCreateDatadogIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *createDatadogIntegrationCreateDatadogIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonDatadogIntegration.CreatedAt
}

// GetUpdatedAt returns createDatadogIntegrationCreateDatadogIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createDatadogIntegrationCreateDatadogIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonDatadogIntegration.UpdatedAt
}

func (v *createDatadogIntegrationCreateDatadogIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createDatadogIntegrationCreateDatadogIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.createDatadogIntegrationCreateDatadogIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonDatadogIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateDatadogIntegrationCreateDatadogIntegration struct {
	Id uuid.UUID `json:"id"`

	ApiKey *string `json:"apiKey"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *createDatadogIntegrationCreateDatadogIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createDatadogIntegrationCreateDatadogIntegration) __premarshalJSON() (*__premarshalcreateDatadogIntegrationCreateDatadogIntegration, error) {
	var retval __premarshalcreateDatadogIntegrationCreateDatadogIntegration

	retval.Id = v.Id
	retval.ApiKey = v.ApiKey
	retval.Type = v.IntegrationCommonDatadogIntegration.Type
	retval.Name = v.IntegrationCommonDatadogIntegration.Name
	retval.Description = v.IntegrationCommonDatadogIntegration.Description
	retval.Image = v.IntegrationCommonDatadogIntegration.Image
	retval.CreatedAt = v.IntegrationCommonDatadogIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonDatadogIntegration.UpdatedAt
	return &retval, nil
}

// createDatadogIntegrationResponse is returned by createDatadogIntegration on success.
type createDatadogIntegrationResponse struct {
	CreateDatadogIntegration createDatadogIntegrationCreateDatadogIntegration `json:"createDatadogIntegration"`
}

// GetCreateDatadogIntegration returns createDatadogIntegrationResponse.CreateDatadogIntegration, and is useful for accessing the field via an interface.
func (v *createDatadogIntegrationResponse) GetCreateDatadogIntegration() createDatadogIntegrationCreateDatadogIntegration {
	return v.CreateDatadogIntegration
}

// createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration includes the requested fields of the GraphQL type DiscordWebhookIntegration.
type createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration struct {
	Id                                         uuid.UUID `json:"id"`
	IntegrationCommonDiscordWebhookIntegration `json:"-"`
	Url                                        *string `json:"url"`
}

// GetId returns createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration.Id, and is useful for accessing the field via an interface.
func (v *createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration) GetId() uuid.UUID {
	return v.Id
}

// GetUrl returns createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration.Url, and is useful for accessing the field via an interface.
func (v *createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration) GetUrl() *string {
	return v.Url
}

// GetType returns createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration.Type, and is useful for accessing the field via an interface.
func (v *createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration) GetType() IntegrationType {
	return v.IntegrationCommonDiscordWebhookIntegration.Type
}

// GetName returns createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration.Name, and is useful for accessing the field via an interface.
func (v *createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration) GetName() string {
	return v.IntegrationCommonDiscordWebhookIntegration.Name
}

// GetDescription returns createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration.Description, and is useful for accessing the field via an interface.
func (v *createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration) GetDescription() string {
	return v.IntegrationCommonDiscordWebhookIntegration.Description
}

// GetImage returns createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration.Image, and is useful for accessing the field via an interface.
func (v *createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration) GetImage() string {
	return v.IntegrationCommonDiscordWebhookIntegration.Image
}

// GetCreatedAt returns createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonDiscordWebhookIntegration.CreatedAt
}

// GetUpdatedAt returns createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonDiscordWebhookIntegration.UpdatedAt
}

func (v *createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonDiscordWebhookIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration struct {
	Id uuid.UUID `json:"id"`

	Url *string `json:"url"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration) __premarshalJSON() (*__premarshalcreateDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration, error) {
	var retval __premarshalcreateDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration

	retval.Id = v.Id
	retval.Url = v.Url
	retval.Type = v.IntegrationCommonDiscordWebhookIntegration.Type
	retval.Name = v.IntegrationCommonDiscordWebhookIntegration.Name
	retval.Description = v.IntegrationCommonDiscordWebhookIntegration.Description
	retval.Image = v.IntegrationCommonDiscordWebhookIntegration.Image
	retval.CreatedAt = v.IntegrationCommonDiscordWebhookIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonDiscordWebhookIntegration.UpdatedAt
	return &retval, nil
}

// createDiscordWebhookIntegrationResponse is returned by createDiscordWebhookIntegration on success.
type createDiscordWebhookIntegrationResponse struct {
	// Always creates a new discord webhook integration.
	CreateDiscordWebhookIntegrationV2 createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration `json:"createDiscordWebhookIntegrationV2"`
}

// GetCreateDiscordWebhookIntegrationV2 returns createDiscordWebhookIntegrationResponse.CreateDiscordWebhookIntegrationV2, and is useful for accessing the field via an interface.
func (v *createDiscordWebhookIntegrationResponse) GetCreateDiscordWebhookIntegrationV2() createDiscordWebhookIntegrationCreateDiscordWebhookIntegrationV2DiscordWebhookIntegration {
	return v.CreateDiscordWebhookIntegrationV2
}

// createEmailIntegrationCreateEmailIntegration includes the requested fields of the GraphQL type EmailIntegration.
type createEmailIntegrationCreateEmailIntegration struct {
	Id                                uuid.UUID `json:"id"`
	IntegrationCommonEmailIntegration `json:"-"`
	EmailAddress                      string `json:"emailAddress"`
	// An email integration must be confirmed by the recipient before it can be considered active.
	Activated *bool `json:"activated"`
}

// GetId returns createEmailIntegrationCreateEmailIntegration.Id, and is useful for accessing the field via an interface.
func (v *createEmailIntegrationCreateEmailIntegration) GetId() uuid.UUID { return v.Id }

// GetEmailAddress returns createEmailIntegrationCreateEmailIntegration.EmailAddress, and is useful for accessing the field via an interface.
func (v *createEmailIntegrationCreateEmailIntegration) GetEmailAddress() string {
	return v.EmailAddress
}

// GetActivated returns createEmailIntegrationCreateEmailIntegration.Activated, and is useful for accessing the field via an interface.
func (v *createEmailIntegrationCreateEmailIntegration) GetActivated() *bool { return v.Activated }

// GetType returns createEmailIntegrationCreateEmailIntegration.Type, and is useful for accessing the field via an interface.
func (v *createEmailIntegrationCreateEmailIntegration) GetType() IntegrationType {
	return v.IntegrationCommonEmailIntegration.Type
}

// GetName returns createEmailIntegrationCreateEmailIntegration.Name, and is useful for accessing the field via an interface.
func (v *createEmailIntegrationCreateEmailIntegration) GetName() string {
	return v.IntegrationCommonEmailIntegration.Name
}

// GetDescription returns createEmailIntegrationCreateEmailIntegration.Description, and is useful for accessing the field via an interface.
func (v *createEmailIntegrationCreateEmailIntegration) GetDescription() string {
	return v.IntegrationCommonEmailIntegration.Description
}

// GetImage returns createEmailIntegrationCreateEmailIntegration.Image, and is useful for accessing the field via an interface.
func (v *createEmailIntegrationCreateEmailIntegration) GetImage() string {
	return v.IntegrationCommonEmailIntegration.Image
}

// GetCreatedAt returns createEmailIntegrationCreateEmailIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *createEmailIntegrationCreateEmailIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonEmailIntegration.CreatedAt
}

// GetUpdatedAt returns createEmailIntegrationCreateEmailIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createEmailIntegrationCreateEmailIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonEmailIntegration.UpdatedAt
}

func (v *createEmailIntegrationCreateEmailIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createEmailIntegrationCreateEmailIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.createEmailIntegrationCreateEmailIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonEmailIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateEmailIntegrationCreateEmailIntegration struct {
	Id uuid.UUID `json:"id"`

	EmailAddress string `json:"emailAddress"`

	Activated *bool `json:"activated"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *createEmailIntegrationCreateEmailIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createEmailIntegrationCreateEmailIntegration) __premarshalJSON() (*__premarshalcreateEmailIntegrationCreateEmailIntegration, error) {
	var retval __premarshalcreateEmailIntegrationCreateEmailIntegration

	retval.Id = v.Id
	retval.EmailAddress = v.EmailAddress
	retval.Activated = v.Activated
	retval.Type = v.IntegrationCommonEmailIntegration.Type
	retval.Name = v.IntegrationCommonEmailIntegration.Name
	retval.Description = v.IntegrationCommonEmailIntegration.Description
	retval.Image = v.IntegrationCommonEmailIntegration.Image
	retval.CreatedAt = v.IntegrationCommonEmailIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonEmailIntegration.UpdatedAt
	return &retval, nil
}

// createEmailIntegrationResponse is returned by createEmailIntegration on success.
type createEmailIntegrationResponse struct {
	CreateEmailIntegration createEmailIntegrationCreateEmailIntegration `json:"createEmailIntegration"`
}

// GetCreateEmailIntegration returns createEmailIntegrationResponse.CreateEmailIntegration, and is useful for accessing the field via an interface.
func (v *createEmailIntegrationResponse) GetCreateEmailIntegration() createEmailIntegrationCreateEmailIntegration {
	return v.CreateEmailIntegration
}

// createEphemeralContainerCreateEphemeralContainer includes the requested fields of the GraphQL type EphemeralContainer.
type createEphemeralContainerCreateEphemeralContainer struct {
	Name  string `json:"name"`
	Image string `json:"image"`
}

// GetName returns createEphemeralContainerCreateEphemeralContainer.Name, and is useful for accessing the field via an interface.
func (v *createEphemeralContainerCreateEphemeralContainer) GetName() string { return v.Name }

// GetImage returns createEphemeralContainerCreateEphemeralContainer.Image, and is useful for accessing the field via an interface.
func (v *createEphemeralContainerCreateEphemeralContainer) GetImage() string { return v.Image }

// createEphemeralContainerResponse is returned by createEphemeralContainer on success.
type createEphemeralContainerResponse struct {
	CreateEphemeralContainer createEphemeralContainerCreateEphemeralContainer `json:"createEphemeralContainer"`
}

// GetCreateEphemeralContainer returns createEphemeralContainerResponse.CreateEphemeralContainer, and is useful for accessing the field via an interface.
func (v *createEphemeralContainerResponse) GetCreateEphemeralContainer() createEphemeralContainerCreateEphemeralContainer {
	return v.CreateEphemeralContainer
}

// createGitlabIntegrationCreateGitlabIntegration includes the requested fields of the GraphQL type GitlabIntegration.
type createGitlabIntegrationCreateGitlabIntegration struct {
	Id                                 uuid.UUID `json:"id"`
	IntegrationCommonGitlabIntegration `json:"-"`
	AccessTokenPrefix                  *string `json:"accessTokenPrefix"`
	WebhookUrl                         string  `json:"webhookUrl"`
	WebhookToken                       string  `json:"webhookToken"`
}

// GetId returns createGitlabIntegrationCreateGitlabIntegration.Id, and is useful for accessing the field via an interface.
func (v *createGitlabIntegrationCreateGitlabIntegration) GetId() uuid.UUID { return v.Id }

// GetAccessTokenPrefix returns createGitlabIntegrationCreateGitlabIntegration.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *createGitlabIntegrationCreateGitlabIntegration) GetAccessTokenPrefix() *string {
	return v.AccessTokenPrefix
}

// GetWebhookUrl returns createGitlabIntegrationCreateGitlabIntegration.WebhookUrl, and is useful for accessing the field via an interface.
func (v *createGitlabIntegrationCreateGitlabIntegration) GetWebhookUrl() string { return v.WebhookUrl }

// GetWebhookToken returns createGitlabIntegrationCreateGitlabIntegration.WebhookToken, and is useful for accessing the field via an interface.
func (v *createGitlabIntegrationCreateGitlabIntegration) GetWebhookToken() string {
	return v.WebhookToken
}

// GetType returns createGitlabIntegrationCreateGitlabIntegration.Type, and is useful for accessing the field via an interface.
func (v *createGitlabIntegrationCreateGitlabIntegration) GetType() IntegrationType {
	return v.IntegrationCommonGitlabIntegration.Type
}

// GetName returns createGitlabIntegrationCreateGitlabIntegration.Name, and is useful for accessing the field via an interface.
func (v *createGitlabIntegrationCreateGitlabIntegration) GetName() string {
	return v.IntegrationCommonGitlabIntegration.Name
}

// GetDescription returns createGitlabIntegrationCreateGitlabIntegration.Description, and is useful for accessing the field via an interface.
func (v *createGitlabIntegrationCreateGitlabIntegration) GetDescription() string {
	return v.IntegrationCommonGitlabIntegration.Description
}

// GetImage returns createGitlabIntegrationCreateGitlabIntegration.Image, and is useful for accessing the field via an interface.
func (v *createGitlabIntegrationCreateGitlabIntegration) GetImage() string {
	return v.IntegrationCommonGitlabIntegration.Image
}

// GetCreatedAt returns createGitlabIntegrationCreateGitlabIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *createGitlabIntegrationCreateGitlabIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonGitlabIntegration.CreatedAt
}

// GetUpdatedAt returns createGitlabIntegrationCreateGitlabIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createGitlabIntegrationCreateGitlabIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonGitlabIntegration.UpdatedAt
}

func (v *createGitlabIntegrationCreateGitlabIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createGitlabIntegrationCreateGitlabIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.createGitlabIntegrationCreateGitlabIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonGitlabIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateGitlabIntegrationCreateGitlabIntegration struct {
	Id uuid.UUID `json:"id"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	WebhookUrl string `json:"webhookUrl"`

	WebhookToken string `json:"webhookToken"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *createGitlabIntegrationCreateGitlabIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createGitlabIntegrationCreateGitlabIntegration) __premarshalJSON() (*__premarshalcreateGitlabIntegrationCreateGitlabIntegration, error) {
	var retval __premarshalcreateGitlabIntegrationCreateGitlabIntegration

	retval.Id = v.Id
	retval.AccessTokenPrefix = v.AccessTokenPrefix
	retval.WebhookUrl = v.WebhookUrl
	retval.WebhookToken = v.WebhookToken
	retval.Type = v.IntegrationCommonGitlabIntegration.Type
	retval.Name = v.IntegrationCommonGitlabIntegration.Name
	retval.Description = v.IntegrationCommonGitlabIntegration.Description
	retval.Image = v.IntegrationCommonGitlabIntegration.Image
	retval.CreatedAt = v.IntegrationCommonGitlabIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonGitlabIntegration.UpdatedAt
	return &retval, nil
}

// createGitlabIntegrationResponse is returned by createGitlabIntegration on success.
type createGitlabIntegrationResponse struct {
	CreateGitlabIntegration createGitlabIntegrationCreateGitlabIntegration `json:"createGitlabIntegration"`
}

// GetCreateGitlabIntegration returns createGitlabIntegrationResponse.CreateGitlabIntegration, and is useful for accessing the field via an interface.
func (v *createGitlabIntegrationResponse) GetCreateGitlabIntegration() createGitlabIntegrationCreateGitlabIntegration {
	return v.CreateGitlabIntegration
}

// createProjectCreateProjectRepo includes the requested fields of the GraphQL type Repo.
type createProjectCreateProjectRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns createProjectCreateProjectRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns createProjectCreateProjectRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns createProjectCreateProjectRepo.Manifest, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns createProjectCreateProjectRepo.AppID, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns createProjectCreateProjectRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns createProjectCreateProjectRepo.KappID, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns createProjectCreateProjectRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns createProjectCreateProjectRepo.Project, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetProject() *RepoDetailProject { return v.RepoDetail.Project }

// GetProductionDeployment returns createProjectCreateProjectRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns createProjectCreateProjectRepo.Namespace, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns createProjectCreateProjectRepo.Envs, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetEnvs() []RepoDetailEnvsEnvVar { return v.RepoDetail.Envs }

// GetCollaborators returns createProjectCreateProjectRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns createProjectCreateProjectRepo.Volumes, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns createProjectCreateProjectRepo.Replication, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns createProjectCreateProjectRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns createProjectCreateProjectRepo.Cluster, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetCluster() *RepoDetailCluster { return v.RepoDetail.Cluster }

// GetAwsAccount returns createProjectCreateProjectRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns createProjectCreateProjectRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns createProjectCreateProjectRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns createProjectCreateProjectRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns createProjectCreateProjectRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns createProjectCreateProjectRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns createProjectCreateProjectRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetManualDeploy() *bool { return v.RepoDetail.ManualDeploy }

// GetDeployStrategy returns createProjectCreateProjectRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns createProjectCreateProjectRepo.Free, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns createProjectCreateProjectRepo.Cpu, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns createProjectCreateProjectRepo.Memory, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns createProjectCreateProjectRepo.Gpu, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetGpu() *RepoDetailGpuGPUSpec { return v.RepoDetail.Gpu }

// GetTpu returns createProjectCreateProjectRepo.Tpu, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetTpu() *RepoDetailTpuTPUSpec { return v.RepoDetail.Tpu }

// GetEphemeralStorage returns createProjectCreateProjectRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns createProjectCreateProjectRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns createProjectCreateProjectRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns createProjectCreateProjectRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns createProjectCreateProjectRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns createProjectCreateProjectRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns createProjectCreateProjectRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns createProjectCreateProjectRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns createProjectCreateProjectRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns createProjectCreateProjectRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetHelmValues() *string { return v.RepoDetail.HelmValues }

// GetTerraformVersion returns createProjectCreateProjectRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns createProjectCreateProjectRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns createProjectCreateProjectRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns createProjectCreateProjectRepo.DeployService, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDeployService() *bool { return v.RepoDetail.DeployService }

// GetDeployJob returns createProjectCreateProjectRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns createProjectCreateProjectRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetPreStopSleep() *int { return v.RepoDetail.PreStopSleep }

// GetTerminationGracePeriodSeconds returns createProjectCreateProjectRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns createProjectCreateProjectRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns createProjectCreateProjectRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns createProjectCreateProjectRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns createProjectCreateProjectRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns createProjectCreateProjectRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns createProjectCreateProjectRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns createProjectCreateProjectRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns createProjectCreateProjectRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns createProjectCreateProjectRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns createProjectCreateProjectRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetAutoRollback() *bool { return v.RepoDetail.AutoRollback }

// GetCanDeploy returns createProjectCreateProjectRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns createProjectCreateProjectRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns createProjectCreateProjectRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetAwsIamRole() *string { return v.RepoDetail.AwsIamRole }

// GetGcpServiceAccount returns createProjectCreateProjectRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns createProjectCreateProjectRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns createProjectCreateProjectRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns createProjectCreateProjectRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns createProjectCreateProjectRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns createProjectCreateProjectRepo.Id, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetId() uuid.UUID { return v.RepoDetail.RepoCommon.Id }

// GetPath returns createProjectCreateProjectRepo.Path, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns createProjectCreateProjectRepo.Name, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns createProjectCreateProjectRepo.Enabled, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetEnabled() bool { return v.RepoDetail.RepoCommon.Enabled }

// GetSource returns createProjectCreateProjectRepo.Source, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns createProjectCreateProjectRepo.DeployType, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns createProjectCreateProjectRepo.Image, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetImage() *string { return v.RepoDetail.RepoCommon.Image }

// GetUpdatedAt returns createProjectCreateProjectRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns createProjectCreateProjectRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns createProjectCreateProjectRepo.Owner, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns createProjectCreateProjectRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns createProjectCreateProjectRepo.Cdns, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns createProjectCreateProjectRepo.Ports, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns createProjectCreateProjectRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns createProjectCreateProjectRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns createProjectCreateProjectRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns createProjectCreateProjectRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns createProjectCreateProjectRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns createProjectCreateProjectRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns createProjectCreateProjectRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns createProjectCreateProjectRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns createProjectCreateProjectRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *createProjectCreateProjectRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createProjectCreateProjectRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.createProjectCreateProjectRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateProjectCreateProjectRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *createProjectCreateProjectRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createProjectCreateProjectRepo) __premarshalJSON() (*__premarshalcreateProjectCreateProjectRepo, error) {
	var retval __premarshalcreateProjectCreateProjectRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// createProjectDockerCreateProjectDockerRepo includes the requested fields of the GraphQL type Repo.
type createProjectDockerCreateProjectDockerRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns createProjectDockerCreateProjectDockerRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns createProjectDockerCreateProjectDockerRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns createProjectDockerCreateProjectDockerRepo.Manifest, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns createProjectDockerCreateProjectDockerRepo.AppID, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns createProjectDockerCreateProjectDockerRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns createProjectDockerCreateProjectDockerRepo.KappID, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns createProjectDockerCreateProjectDockerRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns createProjectDockerCreateProjectDockerRepo.Project, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns createProjectDockerCreateProjectDockerRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns createProjectDockerCreateProjectDockerRepo.Namespace, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetNamespace() *string {
	return v.RepoDetail.Namespace
}

// GetEnvs returns createProjectDockerCreateProjectDockerRepo.Envs, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetEnvs() []RepoDetailEnvsEnvVar {
	return v.RepoDetail.Envs
}

// GetCollaborators returns createProjectDockerCreateProjectDockerRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns createProjectDockerCreateProjectDockerRepo.Volumes, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns createProjectDockerCreateProjectDockerRepo.Replication, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns createProjectDockerCreateProjectDockerRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns createProjectDockerCreateProjectDockerRepo.Cluster, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns createProjectDockerCreateProjectDockerRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns createProjectDockerCreateProjectDockerRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns createProjectDockerCreateProjectDockerRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns createProjectDockerCreateProjectDockerRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns createProjectDockerCreateProjectDockerRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns createProjectDockerCreateProjectDockerRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns createProjectDockerCreateProjectDockerRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetManualDeploy() *bool {
	return v.RepoDetail.ManualDeploy
}

// GetDeployStrategy returns createProjectDockerCreateProjectDockerRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns createProjectDockerCreateProjectDockerRepo.Free, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns createProjectDockerCreateProjectDockerRepo.Cpu, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns createProjectDockerCreateProjectDockerRepo.Memory, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns createProjectDockerCreateProjectDockerRepo.Gpu, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetGpu() *RepoDetailGpuGPUSpec {
	return v.RepoDetail.Gpu
}

// GetTpu returns createProjectDockerCreateProjectDockerRepo.Tpu, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetTpu() *RepoDetailTpuTPUSpec {
	return v.RepoDetail.Tpu
}

// GetEphemeralStorage returns createProjectDockerCreateProjectDockerRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns createProjectDockerCreateProjectDockerRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDedicated() *bool {
	return v.RepoDetail.Dedicated
}

// GetGithubIntegration returns createProjectDockerCreateProjectDockerRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns createProjectDockerCreateProjectDockerRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns createProjectDockerCreateProjectDockerRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns createProjectDockerCreateProjectDockerRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns createProjectDockerCreateProjectDockerRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns createProjectDockerCreateProjectDockerRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns createProjectDockerCreateProjectDockerRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns createProjectDockerCreateProjectDockerRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetHelmValues() *string {
	return v.RepoDetail.HelmValues
}

// GetTerraformVersion returns createProjectDockerCreateProjectDockerRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns createProjectDockerCreateProjectDockerRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns createProjectDockerCreateProjectDockerRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns createProjectDockerCreateProjectDockerRepo.DeployService, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns createProjectDockerCreateProjectDockerRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDeployJob() *bool {
	return v.RepoDetail.DeployJob
}

// GetPreStopSleep returns createProjectDockerCreateProjectDockerRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetPreStopSleep() *int {
	return v.RepoDetail.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns createProjectDockerCreateProjectDockerRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns createProjectDockerCreateProjectDockerRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns createProjectDockerCreateProjectDockerRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns createProjectDockerCreateProjectDockerRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns createProjectDockerCreateProjectDockerRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns createProjectDockerCreateProjectDockerRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns createProjectDockerCreateProjectDockerRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns createProjectDockerCreateProjectDockerRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns createProjectDockerCreateProjectDockerRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns createProjectDockerCreateProjectDockerRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetAutoRetry() *bool {
	return v.RepoDetail.AutoRetry
}

// GetAutoRollback returns createProjectDockerCreateProjectDockerRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetAutoRollback() *bool {
	return v.RepoDetail.AutoRollback
}

// GetCanDeploy returns createProjectDockerCreateProjectDockerRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetCanDeploy() *bool {
	return v.RepoDetail.CanDeploy
}

// GetPipelineCluster returns createProjectDockerCreateProjectDockerRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns createProjectDockerCreateProjectDockerRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetAwsIamRole() *string {
	return v.RepoDetail.AwsIamRole
}

// GetGcpServiceAccount returns createProjectDockerCreateProjectDockerRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns createProjectDockerCreateProjectDockerRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns createProjectDockerCreateProjectDockerRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns createProjectDockerCreateProjectDockerRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns createProjectDockerCreateProjectDockerRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns createProjectDockerCreateProjectDockerRepo.Id, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetId() uuid.UUID {
	return v.RepoDetail.RepoCommon.Id
}

// GetPath returns createProjectDockerCreateProjectDockerRepo.Path, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetPath() string {
	return v.RepoDetail.RepoCommon.Path
}

// GetName returns createProjectDockerCreateProjectDockerRepo.Name, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetName() string {
	return v.RepoDetail.RepoCommon.Name
}

// GetEnabled returns createProjectDockerCreateProjectDockerRepo.Enabled, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetEnabled() bool {
	return v.RepoDetail.RepoCommon.Enabled
}

// GetSource returns createProjectDockerCreateProjectDockerRepo.Source, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns createProjectDockerCreateProjectDockerRepo.DeployType, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns createProjectDockerCreateProjectDockerRepo.Image, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetImage() *string {
	return v.RepoDetail.RepoCommon.Image
}

// GetUpdatedAt returns createProjectDockerCreateProjectDockerRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns createProjectDockerCreateProjectDockerRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns createProjectDockerCreateProjectDockerRepo.Owner, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns createProjectDockerCreateProjectDockerRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns createProjectDockerCreateProjectDockerRepo.Cdns, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns createProjectDockerCreateProjectDockerRepo.Ports, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns createProjectDockerCreateProjectDockerRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns createProjectDockerCreateProjectDockerRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns createProjectDockerCreateProjectDockerRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns createProjectDockerCreateProjectDockerRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns createProjectDockerCreateProjectDockerRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns createProjectDockerCreateProjectDockerRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns createProjectDockerCreateProjectDockerRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns createProjectDockerCreateProjectDockerRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns createProjectDockerCreateProjectDockerRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *createProjectDockerCreateProjectDockerRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *createProjectDockerCreateProjectDockerRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createProjectDockerCreateProjectDockerRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.createProjectDockerCreateProjectDockerRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateProjectDockerCreateProjectDockerRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *createProjectDockerCreateProjectDockerRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createProjectDockerCreateProjectDockerRepo) __premarshalJSON() (*__premarshalcreateProjectDockerCreateProjectDockerRepo, error) {
	var retval __premarshalcreateProjectDockerCreateProjectDockerRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// createProjectDockerResponse is returned by createProjectDocker on success.
type createProjectDockerResponse struct {
	CreateProjectDocker createProjectDockerCreateProjectDockerRepo `json:"createProjectDocker"`
}

// GetCreateProjectDocker returns createProjectDockerResponse.CreateProjectDocker, and is useful for accessing the field via an interface.
func (v *createProjectDockerResponse) GetCreateProjectDocker() createProjectDockerCreateProjectDockerRepo {
	return v.CreateProjectDocker
}

// createProjectEnvironmentCreateProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type createProjectEnvironmentCreateProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns createProjectEnvironmentCreateProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *createProjectEnvironmentCreateProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns createProjectEnvironmentCreateProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *createProjectEnvironmentCreateProjectEnvironment) GetName() string { return v.Name }

// createProjectEnvironmentResponse is returned by createProjectEnvironment on success.
type createProjectEnvironmentResponse struct {
	CreateProjectEnvironment createProjectEnvironmentCreateProjectEnvironment `json:"createProjectEnvironment"`
}

// GetCreateProjectEnvironment returns createProjectEnvironmentResponse.CreateProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createProjectEnvironmentResponse) GetCreateProjectEnvironment() createProjectEnvironmentCreateProjectEnvironment {
	return v.CreateProjectEnvironment
}

// createProjectGitCreateProjectGitRepo includes the requested fields of the GraphQL type Repo.
type createProjectGitCreateProjectGitRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns createProjectGitCreateProjectGitRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns createProjectGitCreateProjectGitRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns createProjectGitCreateProjectGitRepo.Manifest, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns createProjectGitCreateProjectGitRepo.AppID, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns createProjectGitCreateProjectGitRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns createProjectGitCreateProjectGitRepo.KappID, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns createProjectGitCreateProjectGitRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns createProjectGitCreateProjectGitRepo.Project, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns createProjectGitCreateProjectGitRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns createProjectGitCreateProjectGitRepo.Namespace, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns createProjectGitCreateProjectGitRepo.Envs, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetEnvs() []RepoDetailEnvsEnvVar {
	return v.RepoDetail.Envs
}

// GetCollaborators returns createProjectGitCreateProjectGitRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns createProjectGitCreateProjectGitRepo.Volumes, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns createProjectGitCreateProjectGitRepo.Replication, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns createProjectGitCreateProjectGitRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns createProjectGitCreateProjectGitRepo.Cluster, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns createProjectGitCreateProjectGitRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns createProjectGitCreateProjectGitRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns createProjectGitCreateProjectGitRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns createProjectGitCreateProjectGitRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns createProjectGitCreateProjectGitRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns createProjectGitCreateProjectGitRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns createProjectGitCreateProjectGitRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetManualDeploy() *bool {
	return v.RepoDetail.ManualDeploy
}

// GetDeployStrategy returns createProjectGitCreateProjectGitRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns createProjectGitCreateProjectGitRepo.Free, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns createProjectGitCreateProjectGitRepo.Cpu, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns createProjectGitCreateProjectGitRepo.Memory, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns createProjectGitCreateProjectGitRepo.Gpu, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetGpu() *RepoDetailGpuGPUSpec {
	return v.RepoDetail.Gpu
}

// GetTpu returns createProjectGitCreateProjectGitRepo.Tpu, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetTpu() *RepoDetailTpuTPUSpec {
	return v.RepoDetail.Tpu
}

// GetEphemeralStorage returns createProjectGitCreateProjectGitRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns createProjectGitCreateProjectGitRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns createProjectGitCreateProjectGitRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns createProjectGitCreateProjectGitRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns createProjectGitCreateProjectGitRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns createProjectGitCreateProjectGitRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns createProjectGitCreateProjectGitRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns createProjectGitCreateProjectGitRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns createProjectGitCreateProjectGitRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns createProjectGitCreateProjectGitRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetHelmValues() *string {
	return v.RepoDetail.HelmValues
}

// GetTerraformVersion returns createProjectGitCreateProjectGitRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns createProjectGitCreateProjectGitRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns createProjectGitCreateProjectGitRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns createProjectGitCreateProjectGitRepo.DeployService, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns createProjectGitCreateProjectGitRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns createProjectGitCreateProjectGitRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetPreStopSleep() *int {
	return v.RepoDetail.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns createProjectGitCreateProjectGitRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns createProjectGitCreateProjectGitRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns createProjectGitCreateProjectGitRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns createProjectGitCreateProjectGitRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns createProjectGitCreateProjectGitRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns createProjectGitCreateProjectGitRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns createProjectGitCreateProjectGitRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns createProjectGitCreateProjectGitRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns createProjectGitCreateProjectGitRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns createProjectGitCreateProjectGitRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns createProjectGitCreateProjectGitRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetAutoRollback() *bool {
	return v.RepoDetail.AutoRollback
}

// GetCanDeploy returns createProjectGitCreateProjectGitRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns createProjectGitCreateProjectGitRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns createProjectGitCreateProjectGitRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetAwsIamRole() *string {
	return v.RepoDetail.AwsIamRole
}

// GetGcpServiceAccount returns createProjectGitCreateProjectGitRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns createProjectGitCreateProjectGitRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns createProjectGitCreateProjectGitRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns createProjectGitCreateProjectGitRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns createProjectGitCreateProjectGitRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns createProjectGitCreateProjectGitRepo.Id, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetId() uuid.UUID { return v.RepoDetail.RepoCommon.Id }

// GetPath returns createProjectGitCreateProjectGitRepo.Path, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns createProjectGitCreateProjectGitRepo.Name, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns createProjectGitCreateProjectGitRepo.Enabled, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetEnabled() bool {
	return v.RepoDetail.RepoCommon.Enabled
}

// GetSource returns createProjectGitCreateProjectGitRepo.Source, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns createProjectGitCreateProjectGitRepo.DeployType, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns createProjectGitCreateProjectGitRepo.Image, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetImage() *string {
	return v.RepoDetail.RepoCommon.Image
}

// GetUpdatedAt returns createProjectGitCreateProjectGitRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns createProjectGitCreateProjectGitRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns createProjectGitCreateProjectGitRepo.Owner, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns createProjectGitCreateProjectGitRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns createProjectGitCreateProjectGitRepo.Cdns, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns createProjectGitCreateProjectGitRepo.Ports, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns createProjectGitCreateProjectGitRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns createProjectGitCreateProjectGitRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns createProjectGitCreateProjectGitRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns createProjectGitCreateProjectGitRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns createProjectGitCreateProjectGitRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns createProjectGitCreateProjectGitRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns createProjectGitCreateProjectGitRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns createProjectGitCreateProjectGitRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns createProjectGitCreateProjectGitRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *createProjectGitCreateProjectGitRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *createProjectGitCreateProjectGitRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createProjectGitCreateProjectGitRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.createProjectGitCreateProjectGitRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateProjectGitCreateProjectGitRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *createProjectGitCreateProjectGitRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createProjectGitCreateProjectGitRepo) __premarshalJSON() (*__premarshalcreateProjectGitCreateProjectGitRepo, error) {
	var retval __premarshalcreateProjectGitCreateProjectGitRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// createProjectGitResponse is returned by createProjectGit on success.
type createProjectGitResponse struct {
	CreateProjectGit createProjectGitCreateProjectGitRepo `json:"createProjectGit"`
}

// GetCreateProjectGit returns createProjectGitResponse.CreateProjectGit, and is useful for accessing the field via an interface.
func (v *createProjectGitResponse) GetCreateProjectGit() createProjectGitCreateProjectGitRepo {
	return v.CreateProjectGit
}

// createProjectHelmCreateProjectHelmRepo includes the requested fields of the GraphQL type Repo.
type createProjectHelmCreateProjectHelmRepo struct {
	// - v0.RepoID
	Id         uuid.UUID `json:"id"`
	RepoCommon `json:"-"`
}

// GetId returns createProjectHelmCreateProjectHelmRepo.Id, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetId() uuid.UUID { return v.Id }

// GetPath returns createProjectHelmCreateProjectHelmRepo.Path, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetPath() string { return v.RepoCommon.Path }

// GetName returns createProjectHelmCreateProjectHelmRepo.Name, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetName() string { return v.RepoCommon.Name }

// GetEnabled returns createProjectHelmCreateProjectHelmRepo.Enabled, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetEnabled() bool { return v.RepoCommon.Enabled }

// GetSource returns createProjectHelmCreateProjectHelmRepo.Source, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoCommon.Source
}

// GetDeployTarget returns createProjectHelmCreateProjectHelmRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetDeployTarget() *DeployTarget {
	return v.RepoCommon.DeployTarget
}

// GetDeployType returns createProjectHelmCreateProjectHelmRepo.DeployType, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetDeployType() *DeployType {
	return v.RepoCommon.DeployType
}

// GetDeployService returns createProjectHelmCreateProjectHelmRepo.DeployService, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetDeployService() *bool {
	return v.RepoCommon.DeployService
}

// GetDeployJob returns createProjectHelmCreateProjectHelmRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetDeployJob() *bool { return v.RepoCommon.DeployJob }

// GetAwsAccount returns createProjectHelmCreateProjectHelmRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns createProjectHelmCreateProjectHelmRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns createProjectHelmCreateProjectHelmRepo.Image, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetImage() *string { return v.RepoCommon.Image }

// GetCpu returns createProjectHelmCreateProjectHelmRepo.Cpu, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetCpu() *string { return v.RepoCommon.Cpu }

// GetMemory returns createProjectHelmCreateProjectHelmRepo.Memory, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetMemory() *string { return v.RepoCommon.Memory }

// GetGpu returns createProjectHelmCreateProjectHelmRepo.Gpu, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoCommon.Gpu
}

// GetTpu returns createProjectHelmCreateProjectHelmRepo.Tpu, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoCommon.Tpu
}

// GetUpdatedAt returns createProjectHelmCreateProjectHelmRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetUpdatedAt() time.Time {
	return v.RepoCommon.UpdatedAt
}

// GetDisableReason returns createProjectHelmCreateProjectHelmRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetDisableReason() *DisableReason {
	return v.RepoCommon.DisableReason
}

// GetCluster returns createProjectHelmCreateProjectHelmRepo.Cluster, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetCluster() *RepoCommonCluster {
	return v.RepoCommon.Cluster
}

// GetDatabaseProvider returns createProjectHelmCreateProjectHelmRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns createProjectHelmCreateProjectHelmRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns createProjectHelmCreateProjectHelmRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCommon.Autoscaling
}

// GetOwner returns createProjectHelmCreateProjectHelmRepo.Owner, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoCommon.Owner
}

// GetProject returns createProjectHelmCreateProjectHelmRepo.Project, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetProject() *RepoCommonProject {
	return v.RepoCommon.Project
}

// GetProjectEnvironment returns createProjectHelmCreateProjectHelmRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createProjectHelmCreateProjectHelmRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *createProjectHelmCreateProjectHelmRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createProjectHelmCreateProjectHelmRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.createProjectHelmCreateProjectHelmRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateProjectHelmCreateProjectHelmRepo struct {
	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *createProjectHelmCreateProjectHelmRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createProjectHelmCreateProjectHelmRepo) __premarshalJSON() (*__premarshalcreateProjectHelmCreateProjectHelmRepo, error) {
	var retval __premarshalcreateProjectHelmCreateProjectHelmRepo

	retval.Id = v.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// createProjectHelmResponse is returned by createProjectHelm on success.
type createProjectHelmResponse struct {
	CreateProjectHelm createProjectHelmCreateProjectHelmRepo `json:"createProjectHelm"`
}

// GetCreateProjectHelm returns createProjectHelmResponse.CreateProjectHelm, and is useful for accessing the field via an interface.
func (v *createProjectHelmResponse) GetCreateProjectHelm() createProjectHelmCreateProjectHelmRepo {
	return v.CreateProjectHelm
}

// createProjectManifestCreateManifestAppRepo includes the requested fields of the GraphQL type Repo.
type createProjectManifestCreateManifestAppRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns createProjectManifestCreateManifestAppRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns createProjectManifestCreateManifestAppRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns createProjectManifestCreateManifestAppRepo.Manifest, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns createProjectManifestCreateManifestAppRepo.AppID, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns createProjectManifestCreateManifestAppRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns createProjectManifestCreateManifestAppRepo.KappID, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns createProjectManifestCreateManifestAppRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns createProjectManifestCreateManifestAppRepo.Project, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns createProjectManifestCreateManifestAppRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns createProjectManifestCreateManifestAppRepo.Namespace, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetNamespace() *string {
	return v.RepoDetail.Namespace
}

// GetEnvs returns createProjectManifestCreateManifestAppRepo.Envs, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetEnvs() []RepoDetailEnvsEnvVar {
	return v.RepoDetail.Envs
}

// GetCollaborators returns createProjectManifestCreateManifestAppRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns createProjectManifestCreateManifestAppRepo.Volumes, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns createProjectManifestCreateManifestAppRepo.Replication, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns createProjectManifestCreateManifestAppRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns createProjectManifestCreateManifestAppRepo.Cluster, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns createProjectManifestCreateManifestAppRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns createProjectManifestCreateManifestAppRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns createProjectManifestCreateManifestAppRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns createProjectManifestCreateManifestAppRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns createProjectManifestCreateManifestAppRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns createProjectManifestCreateManifestAppRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns createProjectManifestCreateManifestAppRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetManualDeploy() *bool {
	return v.RepoDetail.ManualDeploy
}

// GetDeployStrategy returns createProjectManifestCreateManifestAppRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns createProjectManifestCreateManifestAppRepo.Free, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns createProjectManifestCreateManifestAppRepo.Cpu, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns createProjectManifestCreateManifestAppRepo.Memory, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns createProjectManifestCreateManifestAppRepo.Gpu, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetGpu() *RepoDetailGpuGPUSpec {
	return v.RepoDetail.Gpu
}

// GetTpu returns createProjectManifestCreateManifestAppRepo.Tpu, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetTpu() *RepoDetailTpuTPUSpec {
	return v.RepoDetail.Tpu
}

// GetEphemeralStorage returns createProjectManifestCreateManifestAppRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns createProjectManifestCreateManifestAppRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDedicated() *bool {
	return v.RepoDetail.Dedicated
}

// GetGithubIntegration returns createProjectManifestCreateManifestAppRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns createProjectManifestCreateManifestAppRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns createProjectManifestCreateManifestAppRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns createProjectManifestCreateManifestAppRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns createProjectManifestCreateManifestAppRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns createProjectManifestCreateManifestAppRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns createProjectManifestCreateManifestAppRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns createProjectManifestCreateManifestAppRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetHelmValues() *string {
	return v.RepoDetail.HelmValues
}

// GetTerraformVersion returns createProjectManifestCreateManifestAppRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns createProjectManifestCreateManifestAppRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns createProjectManifestCreateManifestAppRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns createProjectManifestCreateManifestAppRepo.DeployService, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns createProjectManifestCreateManifestAppRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDeployJob() *bool {
	return v.RepoDetail.DeployJob
}

// GetPreStopSleep returns createProjectManifestCreateManifestAppRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetPreStopSleep() *int {
	return v.RepoDetail.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns createProjectManifestCreateManifestAppRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns createProjectManifestCreateManifestAppRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns createProjectManifestCreateManifestAppRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns createProjectManifestCreateManifestAppRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns createProjectManifestCreateManifestAppRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns createProjectManifestCreateManifestAppRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns createProjectManifestCreateManifestAppRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns createProjectManifestCreateManifestAppRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns createProjectManifestCreateManifestAppRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns createProjectManifestCreateManifestAppRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetAutoRetry() *bool {
	return v.RepoDetail.AutoRetry
}

// GetAutoRollback returns createProjectManifestCreateManifestAppRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetAutoRollback() *bool {
	return v.RepoDetail.AutoRollback
}

// GetCanDeploy returns createProjectManifestCreateManifestAppRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetCanDeploy() *bool {
	return v.RepoDetail.CanDeploy
}

// GetPipelineCluster returns createProjectManifestCreateManifestAppRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns createProjectManifestCreateManifestAppRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetAwsIamRole() *string {
	return v.RepoDetail.AwsIamRole
}

// GetGcpServiceAccount returns createProjectManifestCreateManifestAppRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns createProjectManifestCreateManifestAppRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns createProjectManifestCreateManifestAppRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns createProjectManifestCreateManifestAppRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns createProjectManifestCreateManifestAppRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns createProjectManifestCreateManifestAppRepo.Id, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetId() uuid.UUID {
	return v.RepoDetail.RepoCommon.Id
}

// GetPath returns createProjectManifestCreateManifestAppRepo.Path, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetPath() string {
	return v.RepoDetail.RepoCommon.Path
}

// GetName returns createProjectManifestCreateManifestAppRepo.Name, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetName() string {
	return v.RepoDetail.RepoCommon.Name
}

// GetEnabled returns createProjectManifestCreateManifestAppRepo.Enabled, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetEnabled() bool {
	return v.RepoDetail.RepoCommon.Enabled
}

// GetSource returns createProjectManifestCreateManifestAppRepo.Source, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns createProjectManifestCreateManifestAppRepo.DeployType, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns createProjectManifestCreateManifestAppRepo.Image, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetImage() *string {
	return v.RepoDetail.RepoCommon.Image
}

// GetUpdatedAt returns createProjectManifestCreateManifestAppRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns createProjectManifestCreateManifestAppRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns createProjectManifestCreateManifestAppRepo.Owner, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns createProjectManifestCreateManifestAppRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns createProjectManifestCreateManifestAppRepo.Cdns, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns createProjectManifestCreateManifestAppRepo.Ports, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns createProjectManifestCreateManifestAppRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns createProjectManifestCreateManifestAppRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns createProjectManifestCreateManifestAppRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns createProjectManifestCreateManifestAppRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns createProjectManifestCreateManifestAppRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns createProjectManifestCreateManifestAppRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns createProjectManifestCreateManifestAppRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns createProjectManifestCreateManifestAppRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns createProjectManifestCreateManifestAppRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *createProjectManifestCreateManifestAppRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *createProjectManifestCreateManifestAppRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createProjectManifestCreateManifestAppRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.createProjectManifestCreateManifestAppRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateProjectManifestCreateManifestAppRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *createProjectManifestCreateManifestAppRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createProjectManifestCreateManifestAppRepo) __premarshalJSON() (*__premarshalcreateProjectManifestCreateManifestAppRepo, error) {
	var retval __premarshalcreateProjectManifestCreateManifestAppRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// createProjectManifestResponse is returned by createProjectManifest on success.
type createProjectManifestResponse struct {
	CreateManifestApp createProjectManifestCreateManifestAppRepo `json:"createManifestApp"`
}

// GetCreateManifestApp returns createProjectManifestResponse.CreateManifestApp, and is useful for accessing the field via an interface.
func (v *createProjectManifestResponse) GetCreateManifestApp() createProjectManifestCreateManifestAppRepo {
	return v.CreateManifestApp
}

// createProjectResponse is returned by createProject on success.
type createProjectResponse struct {
	CreateProject createProjectCreateProjectRepo `json:"createProject"`
}

// GetCreateProject returns createProjectResponse.CreateProject, and is useful for accessing the field via an interface.
func (v *createProjectResponse) GetCreateProject() createProjectCreateProjectRepo {
	return v.CreateProject
}

// createProjectTerraformCreateProjectTerraformRepo includes the requested fields of the GraphQL type Repo.
type createProjectTerraformCreateProjectTerraformRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns createProjectTerraformCreateProjectTerraformRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns createProjectTerraformCreateProjectTerraformRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns createProjectTerraformCreateProjectTerraformRepo.Manifest, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns createProjectTerraformCreateProjectTerraformRepo.AppID, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetAppID() *string {
	return v.RepoDetail.AppID
}

// GetDefaultIngressDomain returns createProjectTerraformCreateProjectTerraformRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns createProjectTerraformCreateProjectTerraformRepo.KappID, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetKappID() *string {
	return v.RepoDetail.KappID
}

// GetUseHumanReadableKubernetesName returns createProjectTerraformCreateProjectTerraformRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns createProjectTerraformCreateProjectTerraformRepo.Project, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns createProjectTerraformCreateProjectTerraformRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns createProjectTerraformCreateProjectTerraformRepo.Namespace, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetNamespace() *string {
	return v.RepoDetail.Namespace
}

// GetEnvs returns createProjectTerraformCreateProjectTerraformRepo.Envs, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetEnvs() []RepoDetailEnvsEnvVar {
	return v.RepoDetail.Envs
}

// GetCollaborators returns createProjectTerraformCreateProjectTerraformRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns createProjectTerraformCreateProjectTerraformRepo.Volumes, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns createProjectTerraformCreateProjectTerraformRepo.Replication, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns createProjectTerraformCreateProjectTerraformRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns createProjectTerraformCreateProjectTerraformRepo.Cluster, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns createProjectTerraformCreateProjectTerraformRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns createProjectTerraformCreateProjectTerraformRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns createProjectTerraformCreateProjectTerraformRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns createProjectTerraformCreateProjectTerraformRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns createProjectTerraformCreateProjectTerraformRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns createProjectTerraformCreateProjectTerraformRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns createProjectTerraformCreateProjectTerraformRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetManualDeploy() *bool {
	return v.RepoDetail.ManualDeploy
}

// GetDeployStrategy returns createProjectTerraformCreateProjectTerraformRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns createProjectTerraformCreateProjectTerraformRepo.Free, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns createProjectTerraformCreateProjectTerraformRepo.Cpu, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns createProjectTerraformCreateProjectTerraformRepo.Memory, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetMemory() *string {
	return v.RepoDetail.Memory
}

// GetGpu returns createProjectTerraformCreateProjectTerraformRepo.Gpu, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetGpu() *RepoDetailGpuGPUSpec {
	return v.RepoDetail.Gpu
}

// GetTpu returns createProjectTerraformCreateProjectTerraformRepo.Tpu, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetTpu() *RepoDetailTpuTPUSpec {
	return v.RepoDetail.Tpu
}

// GetEphemeralStorage returns createProjectTerraformCreateProjectTerraformRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns createProjectTerraformCreateProjectTerraformRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDedicated() *bool {
	return v.RepoDetail.Dedicated
}

// GetGithubIntegration returns createProjectTerraformCreateProjectTerraformRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns createProjectTerraformCreateProjectTerraformRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns createProjectTerraformCreateProjectTerraformRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns createProjectTerraformCreateProjectTerraformRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns createProjectTerraformCreateProjectTerraformRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns createProjectTerraformCreateProjectTerraformRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns createProjectTerraformCreateProjectTerraformRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns createProjectTerraformCreateProjectTerraformRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetHelmValues() *string {
	return v.RepoDetail.HelmValues
}

// GetTerraformVersion returns createProjectTerraformCreateProjectTerraformRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns createProjectTerraformCreateProjectTerraformRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns createProjectTerraformCreateProjectTerraformRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns createProjectTerraformCreateProjectTerraformRepo.DeployService, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns createProjectTerraformCreateProjectTerraformRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDeployJob() *bool {
	return v.RepoDetail.DeployJob
}

// GetPreStopSleep returns createProjectTerraformCreateProjectTerraformRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetPreStopSleep() *int {
	return v.RepoDetail.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns createProjectTerraformCreateProjectTerraformRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns createProjectTerraformCreateProjectTerraformRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns createProjectTerraformCreateProjectTerraformRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns createProjectTerraformCreateProjectTerraformRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns createProjectTerraformCreateProjectTerraformRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns createProjectTerraformCreateProjectTerraformRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns createProjectTerraformCreateProjectTerraformRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns createProjectTerraformCreateProjectTerraformRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns createProjectTerraformCreateProjectTerraformRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns createProjectTerraformCreateProjectTerraformRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetAutoRetry() *bool {
	return v.RepoDetail.AutoRetry
}

// GetAutoRollback returns createProjectTerraformCreateProjectTerraformRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetAutoRollback() *bool {
	return v.RepoDetail.AutoRollback
}

// GetCanDeploy returns createProjectTerraformCreateProjectTerraformRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetCanDeploy() *bool {
	return v.RepoDetail.CanDeploy
}

// GetPipelineCluster returns createProjectTerraformCreateProjectTerraformRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns createProjectTerraformCreateProjectTerraformRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetAwsIamRole() *string {
	return v.RepoDetail.AwsIamRole
}

// GetGcpServiceAccount returns createProjectTerraformCreateProjectTerraformRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns createProjectTerraformCreateProjectTerraformRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns createProjectTerraformCreateProjectTerraformRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns createProjectTerraformCreateProjectTerraformRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns createProjectTerraformCreateProjectTerraformRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns createProjectTerraformCreateProjectTerraformRepo.Id, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetId() uuid.UUID {
	return v.RepoDetail.RepoCommon.Id
}

// GetPath returns createProjectTerraformCreateProjectTerraformRepo.Path, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetPath() string {
	return v.RepoDetail.RepoCommon.Path
}

// GetName returns createProjectTerraformCreateProjectTerraformRepo.Name, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetName() string {
	return v.RepoDetail.RepoCommon.Name
}

// GetEnabled returns createProjectTerraformCreateProjectTerraformRepo.Enabled, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetEnabled() bool {
	return v.RepoDetail.RepoCommon.Enabled
}

// GetSource returns createProjectTerraformCreateProjectTerraformRepo.Source, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns createProjectTerraformCreateProjectTerraformRepo.DeployType, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns createProjectTerraformCreateProjectTerraformRepo.Image, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetImage() *string {
	return v.RepoDetail.RepoCommon.Image
}

// GetUpdatedAt returns createProjectTerraformCreateProjectTerraformRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns createProjectTerraformCreateProjectTerraformRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns createProjectTerraformCreateProjectTerraformRepo.Owner, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns createProjectTerraformCreateProjectTerraformRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns createProjectTerraformCreateProjectTerraformRepo.Cdns, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns createProjectTerraformCreateProjectTerraformRepo.Ports, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns createProjectTerraformCreateProjectTerraformRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns createProjectTerraformCreateProjectTerraformRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns createProjectTerraformCreateProjectTerraformRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns createProjectTerraformCreateProjectTerraformRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns createProjectTerraformCreateProjectTerraformRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns createProjectTerraformCreateProjectTerraformRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns createProjectTerraformCreateProjectTerraformRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns createProjectTerraformCreateProjectTerraformRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns createProjectTerraformCreateProjectTerraformRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *createProjectTerraformCreateProjectTerraformRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *createProjectTerraformCreateProjectTerraformRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createProjectTerraformCreateProjectTerraformRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.createProjectTerraformCreateProjectTerraformRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateProjectTerraformCreateProjectTerraformRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *createProjectTerraformCreateProjectTerraformRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createProjectTerraformCreateProjectTerraformRepo) __premarshalJSON() (*__premarshalcreateProjectTerraformCreateProjectTerraformRepo, error) {
	var retval __premarshalcreateProjectTerraformCreateProjectTerraformRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// createProjectTerraformResponse is returned by createProjectTerraform on success.
type createProjectTerraformResponse struct {
	CreateProjectTerraform createProjectTerraformCreateProjectTerraformRepo `json:"createProjectTerraform"`
}

// GetCreateProjectTerraform returns createProjectTerraformResponse.CreateProjectTerraform, and is useful for accessing the field via an interface.
func (v *createProjectTerraformResponse) GetCreateProjectTerraform() createProjectTerraformCreateProjectTerraformRepo {
	return v.CreateProjectTerraform
}

// createProjectV3CreateProjectV3 includes the requested fields of the GraphQL type ProjectV3.
type createProjectV3CreateProjectV3 struct {
	ProjectV3Detail `json:"-"`
}

// GetId returns createProjectV3CreateProjectV3.Id, and is useful for accessing the field via an interface.
func (v *createProjectV3CreateProjectV3) GetId() uuid.UUID { return v.ProjectV3Detail.Id }

// GetRequirePlanApproval returns createProjectV3CreateProjectV3.RequirePlanApproval, and is useful for accessing the field via an interface.
func (v *createProjectV3CreateProjectV3) GetRequirePlanApproval() bool {
	return v.ProjectV3Detail.RequirePlanApproval
}

// GetName returns createProjectV3CreateProjectV3.Name, and is useful for accessing the field via an interface.
func (v *createProjectV3CreateProjectV3) GetName() string { return v.ProjectV3Detail.Name }

// GetBlueprintID returns createProjectV3CreateProjectV3.BlueprintID, and is useful for accessing the field via an interface.
func (v *createProjectV3CreateProjectV3) GetBlueprintID() uuid.UUID {
	return v.ProjectV3Detail.BlueprintID
}

// GetBlueprintConfiguration returns createProjectV3CreateProjectV3.BlueprintConfiguration, and is useful for accessing the field via an interface.
func (v *createProjectV3CreateProjectV3) GetBlueprintConfiguration() *ProjectV3DetailBlueprintConfiguration {
	return v.ProjectV3Detail.BlueprintConfiguration
}

// GetConfiguration returns createProjectV3CreateProjectV3.Configuration, and is useful for accessing the field via an interface.
func (v *createProjectV3CreateProjectV3) GetConfiguration() *ProjectV3DetailConfigurationProjectV3Configuration {
	return v.ProjectV3Detail.Configuration
}

// GetVariables returns createProjectV3CreateProjectV3.Variables, and is useful for accessing the field via an interface.
func (v *createProjectV3CreateProjectV3) GetVariables() []ProjectV3DetailVariablesBlueprintVariable {
	return v.ProjectV3Detail.Variables
}

// GetDriverWorkflows returns createProjectV3CreateProjectV3.DriverWorkflows, and is useful for accessing the field via an interface.
func (v *createProjectV3CreateProjectV3) GetDriverWorkflows() []ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow {
	return v.ProjectV3Detail.DriverWorkflows
}

func (v *createProjectV3CreateProjectV3) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createProjectV3CreateProjectV3
		graphql.NoUnmarshalJSON
	}
	firstPass.createProjectV3CreateProjectV3 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3Detail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateProjectV3CreateProjectV3 struct {
	Id uuid.UUID `json:"id"`

	RequirePlanApproval bool `json:"requirePlanApproval"`

	Name string `json:"name"`

	BlueprintID uuid.UUID `json:"blueprintID"`

	BlueprintConfiguration json.RawMessage `json:"blueprintConfiguration"`

	Configuration json.RawMessage `json:"configuration"`

	Variables []json.RawMessage `json:"variables"`

	DriverWorkflows []ProjectV3DetailDriverWorkflowsBlueprintDriverWorkflow `json:"driverWorkflows"`
}

func (v *createProjectV3CreateProjectV3) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createProjectV3CreateProjectV3) __premarshalJSON() (*__premarshalcreateProjectV3CreateProjectV3, error) {
	var retval __premarshalcreateProjectV3CreateProjectV3

	retval.Id = v.ProjectV3Detail.Id
	retval.RequirePlanApproval = v.ProjectV3Detail.RequirePlanApproval
	retval.Name = v.ProjectV3Detail.Name
	retval.BlueprintID = v.ProjectV3Detail.BlueprintID
	{

		dst := &retval.BlueprintConfiguration
		src := v.ProjectV3Detail.BlueprintConfiguration
		if src != nil {
			var err error
			*dst, err = __marshalProjectV3DetailBlueprintConfiguration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal createProjectV3CreateProjectV3.ProjectV3Detail.BlueprintConfiguration: %w", err)
			}
		}
	}
	{

		dst := &retval.Configuration
		src := v.ProjectV3Detail.Configuration
		if src != nil {
			var err error
			*dst, err = __marshalProjectV3DetailConfigurationProjectV3Configuration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal createProjectV3CreateProjectV3.ProjectV3Detail.Configuration: %w", err)
			}
		}
	}
	{

		dst := &retval.Variables
		src := v.ProjectV3Detail.Variables
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalProjectV3DetailVariablesBlueprintVariable(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal createProjectV3CreateProjectV3.ProjectV3Detail.Variables: %w", err)
			}
		}
	}
	retval.DriverWorkflows = v.ProjectV3Detail.DriverWorkflows
	return &retval, nil
}

// createProjectV3Response is returned by createProjectV3 on success.
type createProjectV3Response struct {
	CreateProjectV3 createProjectV3CreateProjectV3 `json:"createProjectV3"`
}

// GetCreateProjectV3 returns createProjectV3Response.CreateProjectV3, and is useful for accessing the field via an interface.
func (v *createProjectV3Response) GetCreateProjectV3() createProjectV3CreateProjectV3 {
	return v.CreateProjectV3
}

// createProjectsFromTemplateCreateProjectsFromTemplateRepo includes the requested fields of the GraphQL type Repo.
type createProjectsFromTemplateCreateProjectsFromTemplateRepo struct {
	// - v0.RepoID
	Id         uuid.UUID `json:"id"`
	RepoCommon `json:"-"`
}

// GetId returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Id, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetId() uuid.UUID { return v.Id }

// GetPath returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Path, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetPath() string {
	return v.RepoCommon.Path
}

// GetName returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Name, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetName() string {
	return v.RepoCommon.Name
}

// GetEnabled returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Enabled, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetEnabled() bool {
	return v.RepoCommon.Enabled
}

// GetSource returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Source, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoCommon.Source
}

// GetDeployTarget returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetDeployTarget() *DeployTarget {
	return v.RepoCommon.DeployTarget
}

// GetDeployType returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.DeployType, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetDeployType() *DeployType {
	return v.RepoCommon.DeployType
}

// GetDeployService returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.DeployService, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetDeployService() *bool {
	return v.RepoCommon.DeployService
}

// GetDeployJob returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetDeployJob() *bool {
	return v.RepoCommon.DeployJob
}

// GetAwsAccount returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Image, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetImage() *string {
	return v.RepoCommon.Image
}

// GetCpu returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Cpu, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetCpu() *string {
	return v.RepoCommon.Cpu
}

// GetMemory returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Memory, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetMemory() *string {
	return v.RepoCommon.Memory
}

// GetGpu returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Gpu, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoCommon.Gpu
}

// GetTpu returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Tpu, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoCommon.Tpu
}

// GetUpdatedAt returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetUpdatedAt() time.Time {
	return v.RepoCommon.UpdatedAt
}

// GetDisableReason returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetDisableReason() *DisableReason {
	return v.RepoCommon.DisableReason
}

// GetCluster returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Cluster, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetCluster() *RepoCommonCluster {
	return v.RepoCommon.Cluster
}

// GetDatabaseProvider returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCommon.Autoscaling
}

// GetOwner returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Owner, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoCommon.Owner
}

// GetProject returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.Project, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetProject() *RepoCommonProject {
	return v.RepoCommon.Project
}

// GetProjectEnvironment returns createProjectsFromTemplateCreateProjectsFromTemplateRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createProjectsFromTemplateCreateProjectsFromTemplateRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.createProjectsFromTemplateCreateProjectsFromTemplateRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateProjectsFromTemplateCreateProjectsFromTemplateRepo struct {
	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createProjectsFromTemplateCreateProjectsFromTemplateRepo) __premarshalJSON() (*__premarshalcreateProjectsFromTemplateCreateProjectsFromTemplateRepo, error) {
	var retval __premarshalcreateProjectsFromTemplateCreateProjectsFromTemplateRepo

	retval.Id = v.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// createProjectsFromTemplateResponse is returned by createProjectsFromTemplate on success.
type createProjectsFromTemplateResponse struct {
	CreateProjectsFromTemplate []createProjectsFromTemplateCreateProjectsFromTemplateRepo `json:"createProjectsFromTemplate"`
}

// GetCreateProjectsFromTemplate returns createProjectsFromTemplateResponse.CreateProjectsFromTemplate, and is useful for accessing the field via an interface.
func (v *createProjectsFromTemplateResponse) GetCreateProjectsFromTemplate() []createProjectsFromTemplateCreateProjectsFromTemplateRepo {
	return v.CreateProjectsFromTemplate
}

// createRepoPipelineLinkCreateRepoPipelineLink includes the requested fields of the GraphQL type RepoPipelineLink.
type createRepoPipelineLinkCreateRepoPipelineLink struct {
	RepoPipelineLinkDetail `json:"-"`
}

// GetId returns createRepoPipelineLinkCreateRepoPipelineLink.Id, and is useful for accessing the field via an interface.
func (v *createRepoPipelineLinkCreateRepoPipelineLink) GetId() uuid.UUID {
	return v.RepoPipelineLinkDetail.Id
}

// GetSource returns createRepoPipelineLinkCreateRepoPipelineLink.Source, and is useful for accessing the field via an interface.
func (v *createRepoPipelineLinkCreateRepoPipelineLink) GetSource() RepoPipelineLinkDetailSourceRepo {
	return v.RepoPipelineLinkDetail.Source
}

// GetSourceEvent returns createRepoPipelineLinkCreateRepoPipelineLink.SourceEvent, and is useful for accessing the field via an interface.
func (v *createRepoPipelineLinkCreateRepoPipelineLink) GetSourceEvent() RepoEvent {
	return v.RepoPipelineLinkDetail.SourceEvent
}

// GetTargetGroup returns createRepoPipelineLinkCreateRepoPipelineLink.TargetGroup, and is useful for accessing the field via an interface.
func (v *createRepoPipelineLinkCreateRepoPipelineLink) GetTargetGroup() RepoPipelineLinkDetailTargetGroupRepoGroup {
	return v.RepoPipelineLinkDetail.TargetGroup
}

// GetTargetAction returns createRepoPipelineLinkCreateRepoPipelineLink.TargetAction, and is useful for accessing the field via an interface.
func (v *createRepoPipelineLinkCreateRepoPipelineLink) GetTargetAction() RepoAction {
	return v.RepoPipelineLinkDetail.TargetAction
}

func (v *createRepoPipelineLinkCreateRepoPipelineLink) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createRepoPipelineLinkCreateRepoPipelineLink
		graphql.NoUnmarshalJSON
	}
	firstPass.createRepoPipelineLinkCreateRepoPipelineLink = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoPipelineLinkDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateRepoPipelineLinkCreateRepoPipelineLink struct {
	Id uuid.UUID `json:"id"`

	Source RepoPipelineLinkDetailSourceRepo `json:"source"`

	SourceEvent RepoEvent `json:"sourceEvent"`

	TargetGroup RepoPipelineLinkDetailTargetGroupRepoGroup `json:"targetGroup"`

	TargetAction RepoAction `json:"targetAction"`
}

func (v *createRepoPipelineLinkCreateRepoPipelineLink) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createRepoPipelineLinkCreateRepoPipelineLink) __premarshalJSON() (*__premarshalcreateRepoPipelineLinkCreateRepoPipelineLink, error) {
	var retval __premarshalcreateRepoPipelineLinkCreateRepoPipelineLink

	retval.Id = v.RepoPipelineLinkDetail.Id
	retval.Source = v.RepoPipelineLinkDetail.Source
	retval.SourceEvent = v.RepoPipelineLinkDetail.SourceEvent
	retval.TargetGroup = v.RepoPipelineLinkDetail.TargetGroup
	retval.TargetAction = v.RepoPipelineLinkDetail.TargetAction
	return &retval, nil
}

// createRepoPipelineLinkResponse is returned by createRepoPipelineLink on success.
type createRepoPipelineLinkResponse struct {
	CreateRepoPipelineLink createRepoPipelineLinkCreateRepoPipelineLink `json:"createRepoPipelineLink"`
}

// GetCreateRepoPipelineLink returns createRepoPipelineLinkResponse.CreateRepoPipelineLink, and is useful for accessing the field via an interface.
func (v *createRepoPipelineLinkResponse) GetCreateRepoPipelineLink() createRepoPipelineLinkCreateRepoPipelineLink {
	return v.CreateRepoPipelineLink
}

// createResourceAlphaCreateResourceAlphaRepo includes the requested fields of the GraphQL type Repo.
type createResourceAlphaCreateResourceAlphaRepo struct {
	Name               string                                                        `json:"name"`
	Project            *createResourceAlphaCreateResourceAlphaRepoProject            `json:"project"`
	ProjectEnvironment *createResourceAlphaCreateResourceAlphaRepoProjectEnvironment `json:"projectEnvironment"`
}

// GetName returns createResourceAlphaCreateResourceAlphaRepo.Name, and is useful for accessing the field via an interface.
func (v *createResourceAlphaCreateResourceAlphaRepo) GetName() string { return v.Name }

// GetProject returns createResourceAlphaCreateResourceAlphaRepo.Project, and is useful for accessing the field via an interface.
func (v *createResourceAlphaCreateResourceAlphaRepo) GetProject() *createResourceAlphaCreateResourceAlphaRepoProject {
	return v.Project
}

// GetProjectEnvironment returns createResourceAlphaCreateResourceAlphaRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *createResourceAlphaCreateResourceAlphaRepo) GetProjectEnvironment() *createResourceAlphaCreateResourceAlphaRepoProjectEnvironment {
	return v.ProjectEnvironment
}

// createResourceAlphaCreateResourceAlphaRepoProject includes the requested fields of the GraphQL type Project.
type createResourceAlphaCreateResourceAlphaRepoProject struct {
	Name string `json:"name"`
}

// GetName returns createResourceAlphaCreateResourceAlphaRepoProject.Name, and is useful for accessing the field via an interface.
func (v *createResourceAlphaCreateResourceAlphaRepoProject) GetName() string { return v.Name }

// createResourceAlphaCreateResourceAlphaRepoProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type createResourceAlphaCreateResourceAlphaRepoProjectEnvironment struct {
	Name string `json:"name"`
}

// GetName returns createResourceAlphaCreateResourceAlphaRepoProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *createResourceAlphaCreateResourceAlphaRepoProjectEnvironment) GetName() string {
	return v.Name
}

// createResourceAlphaResponse is returned by createResourceAlpha on success.
type createResourceAlphaResponse struct {
	CreateResourceAlpha createResourceAlphaCreateResourceAlphaRepo `json:"createResourceAlpha"`
}

// GetCreateResourceAlpha returns createResourceAlphaResponse.CreateResourceAlpha, and is useful for accessing the field via an interface.
func (v *createResourceAlphaResponse) GetCreateResourceAlpha() createResourceAlphaCreateResourceAlphaRepo {
	return v.CreateResourceAlpha
}

// createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration includes the requested fields of the GraphQL type SlackWebhookIntegration.
type createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration struct {
	Id                                       uuid.UUID `json:"id"`
	IntegrationCommonSlackWebhookIntegration `json:"-"`
	Url                                      *string `json:"url"`
}

// GetId returns createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration.Id, and is useful for accessing the field via an interface.
func (v *createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration) GetId() uuid.UUID {
	return v.Id
}

// GetUrl returns createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration.Url, and is useful for accessing the field via an interface.
func (v *createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration) GetUrl() *string {
	return v.Url
}

// GetType returns createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration.Type, and is useful for accessing the field via an interface.
func (v *createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration) GetType() IntegrationType {
	return v.IntegrationCommonSlackWebhookIntegration.Type
}

// GetName returns createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration.Name, and is useful for accessing the field via an interface.
func (v *createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration) GetName() string {
	return v.IntegrationCommonSlackWebhookIntegration.Name
}

// GetDescription returns createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration.Description, and is useful for accessing the field via an interface.
func (v *createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration) GetDescription() string {
	return v.IntegrationCommonSlackWebhookIntegration.Description
}

// GetImage returns createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration.Image, and is useful for accessing the field via an interface.
func (v *createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration) GetImage() string {
	return v.IntegrationCommonSlackWebhookIntegration.Image
}

// GetCreatedAt returns createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonSlackWebhookIntegration.CreatedAt
}

// GetUpdatedAt returns createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonSlackWebhookIntegration.UpdatedAt
}

func (v *createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonSlackWebhookIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration struct {
	Id uuid.UUID `json:"id"`

	Url *string `json:"url"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration) __premarshalJSON() (*__premarshalcreateSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration, error) {
	var retval __premarshalcreateSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration

	retval.Id = v.Id
	retval.Url = v.Url
	retval.Type = v.IntegrationCommonSlackWebhookIntegration.Type
	retval.Name = v.IntegrationCommonSlackWebhookIntegration.Name
	retval.Description = v.IntegrationCommonSlackWebhookIntegration.Description
	retval.Image = v.IntegrationCommonSlackWebhookIntegration.Image
	retval.CreatedAt = v.IntegrationCommonSlackWebhookIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonSlackWebhookIntegration.UpdatedAt
	return &retval, nil
}

// createSlackWebhookIntegrationResponse is returned by createSlackWebhookIntegration on success.
type createSlackWebhookIntegrationResponse struct {
	// Always creates a new slack webhook integration.
	CreateSlackWebhookIntegrationV2 createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration `json:"createSlackWebhookIntegrationV2"`
}

// GetCreateSlackWebhookIntegrationV2 returns createSlackWebhookIntegrationResponse.CreateSlackWebhookIntegrationV2, and is useful for accessing the field via an interface.
func (v *createSlackWebhookIntegrationResponse) GetCreateSlackWebhookIntegrationV2() createSlackWebhookIntegrationCreateSlackWebhookIntegrationV2SlackWebhookIntegration {
	return v.CreateSlackWebhookIntegrationV2
}

// createTeamCreateTeam includes the requested fields of the GraphQL type Team.
type createTeamCreateTeam struct {
	TeamCommon `json:"-"`
}

// GetId returns createTeamCreateTeam.Id, and is useful for accessing the field via an interface.
func (v *createTeamCreateTeam) GetId() uuid.UUID { return v.TeamCommon.Id }

// GetPlan returns createTeamCreateTeam.Plan, and is useful for accessing the field via an interface.
func (v *createTeamCreateTeam) GetPlan() TeamCommonPlan { return v.TeamCommon.Plan }

// GetUser returns createTeamCreateTeam.User, and is useful for accessing the field via an interface.
func (v *createTeamCreateTeam) GetUser() TeamCommonUser { return v.TeamCommon.User }

func (v *createTeamCreateTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createTeamCreateTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.createTeamCreateTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateTeamCreateTeam struct {
	Id uuid.UUID `json:"id"`

	Plan TeamCommonPlan `json:"plan"`

	User TeamCommonUser `json:"user"`
}

func (v *createTeamCreateTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createTeamCreateTeam) __premarshalJSON() (*__premarshalcreateTeamCreateTeam, error) {
	var retval __premarshalcreateTeamCreateTeam

	retval.Id = v.TeamCommon.Id
	retval.Plan = v.TeamCommon.Plan
	retval.User = v.TeamCommon.User
	return &retval, nil
}

// createTeamResponse is returned by createTeam on success.
type createTeamResponse struct {
	CreateTeam createTeamCreateTeam `json:"createTeam"`
}

// GetCreateTeam returns createTeamResponse.CreateTeam, and is useful for accessing the field via an interface.
func (v *createTeamResponse) GetCreateTeam() createTeamCreateTeam { return v.CreateTeam }

// currentUsageMetricsCurrentUser includes the requested fields of the GraphQL type User.
type currentUsageMetricsCurrentUser struct {
	Permissions *currentUsageMetricsCurrentUserPermissionsUserPermissionsConnection `json:"permissions"`
	Team        *currentUsageMetricsCurrentUserTeam                                 `json:"team"`
}

// GetPermissions returns currentUsageMetricsCurrentUser.Permissions, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsCurrentUser) GetPermissions() *currentUsageMetricsCurrentUserPermissionsUserPermissionsConnection {
	return v.Permissions
}

// GetTeam returns currentUsageMetricsCurrentUser.Team, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsCurrentUser) GetTeam() *currentUsageMetricsCurrentUserTeam { return v.Team }

// currentUsageMetricsCurrentUserPermissionsUserPermissionsConnection includes the requested fields of the GraphQL type UserPermissionsConnection.
type currentUsageMetricsCurrentUserPermissionsUserPermissionsConnection struct {
	User *currentUsageMetricsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection `json:"user"`
}

// GetUser returns currentUsageMetricsCurrentUserPermissionsUserPermissionsConnection.User, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsCurrentUserPermissionsUserPermissionsConnection) GetUser() *currentUsageMetricsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection {
	return v.User
}

// currentUsageMetricsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection includes the requested fields of the GraphQL type UserPermissionsUserConnection.
type currentUsageMetricsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection struct {
	Mutations []string `json:"mutations"`
}

// GetMutations returns currentUsageMetricsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection.Mutations, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsCurrentUserPermissionsUserPermissionsConnectionUserUserPermissionsUserConnection) GetMutations() []string {
	return v.Mutations
}

// currentUsageMetricsCurrentUserTeam includes the requested fields of the GraphQL type Team.
type currentUsageMetricsCurrentUserTeam struct {
	Id         uuid.UUID `json:"id"`
	TeamMember `json:"-"`
}

// GetId returns currentUsageMetricsCurrentUserTeam.Id, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsCurrentUserTeam) GetId() uuid.UUID { return v.Id }

// GetMembers returns currentUsageMetricsCurrentUserTeam.Members, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsCurrentUserTeam) GetMembers() []TeamMemberMembersUserTeamEdge {
	return v.TeamMember.Members
}

// GetMemberInvitations returns currentUsageMetricsCurrentUserTeam.MemberInvitations, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsCurrentUserTeam) GetMemberInvitations() []TeamMemberMemberInvitationsTeamMemberInvitation {
	return v.TeamMember.MemberInvitations
}

func (v *currentUsageMetricsCurrentUserTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*currentUsageMetricsCurrentUserTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.currentUsageMetricsCurrentUserTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamMember)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcurrentUsageMetricsCurrentUserTeam struct {
	Id uuid.UUID `json:"id"`

	Members []TeamMemberMembersUserTeamEdge `json:"members"`

	MemberInvitations []TeamMemberMemberInvitationsTeamMemberInvitation `json:"memberInvitations"`
}

func (v *currentUsageMetricsCurrentUserTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *currentUsageMetricsCurrentUserTeam) __premarshalJSON() (*__premarshalcurrentUsageMetricsCurrentUserTeam, error) {
	var retval __premarshalcurrentUsageMetricsCurrentUserTeam

	retval.Id = v.Id
	retval.Members = v.TeamMember.Members
	retval.MemberInvitations = v.TeamMember.MemberInvitations
	return &retval, nil
}

// currentUsageMetricsResponse is returned by currentUsageMetrics on success.
type currentUsageMetricsResponse struct {
	User        currentUsageMetricsUser        `json:"user"`
	CurrentUser currentUsageMetricsCurrentUser `json:"currentUser"`
}

// GetUser returns currentUsageMetricsResponse.User, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsResponse) GetUser() currentUsageMetricsUser { return v.User }

// GetCurrentUser returns currentUsageMetricsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsResponse) GetCurrentUser() currentUsageMetricsCurrentUser {
	return v.CurrentUser
}

// currentUsageMetricsUser includes the requested fields of the GraphQL type User.
type currentUsageMetricsUser struct {
	Id                uuid.UUID                                                           `json:"id"`
	ProjectV3Adapters *currentUsageMetricsUserProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
	Clusters          []currentUsageMetricsUserClustersCluster                            `json:"clusters"`
	AwsAccounts       []currentUsageMetricsUserAwsAccountsAWSAccount                      `json:"awsAccounts"`
	CoreweaveAccounts []currentUsageMetricsUserCoreweaveAccountsCoreWeaveAccount          `json:"coreweaveAccounts"`
	DoAccounts        []currentUsageMetricsUserDoAccountsDOAccount                        `json:"doAccounts"`
	GcpAccounts       []currentUsageMetricsUserGcpAccountsGCPAccount                      `json:"gcpAccounts"`
	LinodeAccounts    []currentUsageMetricsUserLinodeAccountsLinodeAccount                `json:"linodeAccounts"`
	VultrAccounts     []currentUsageMetricsUserVultrAccountsVultrAccount                  `json:"vultrAccounts"`
	Blueprints        *currentUsageMetricsUserBlueprintsBlueprintConnection               `json:"blueprints"`
}

// GetId returns currentUsageMetricsUser.Id, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUser) GetId() uuid.UUID { return v.Id }

// GetProjectV3Adapters returns currentUsageMetricsUser.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUser) GetProjectV3Adapters() *currentUsageMetricsUserProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// GetClusters returns currentUsageMetricsUser.Clusters, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUser) GetClusters() []currentUsageMetricsUserClustersCluster {
	return v.Clusters
}

// GetAwsAccounts returns currentUsageMetricsUser.AwsAccounts, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUser) GetAwsAccounts() []currentUsageMetricsUserAwsAccountsAWSAccount {
	return v.AwsAccounts
}

// GetCoreweaveAccounts returns currentUsageMetricsUser.CoreweaveAccounts, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUser) GetCoreweaveAccounts() []currentUsageMetricsUserCoreweaveAccountsCoreWeaveAccount {
	return v.CoreweaveAccounts
}

// GetDoAccounts returns currentUsageMetricsUser.DoAccounts, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUser) GetDoAccounts() []currentUsageMetricsUserDoAccountsDOAccount {
	return v.DoAccounts
}

// GetGcpAccounts returns currentUsageMetricsUser.GcpAccounts, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUser) GetGcpAccounts() []currentUsageMetricsUserGcpAccountsGCPAccount {
	return v.GcpAccounts
}

// GetLinodeAccounts returns currentUsageMetricsUser.LinodeAccounts, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUser) GetLinodeAccounts() []currentUsageMetricsUserLinodeAccountsLinodeAccount {
	return v.LinodeAccounts
}

// GetVultrAccounts returns currentUsageMetricsUser.VultrAccounts, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUser) GetVultrAccounts() []currentUsageMetricsUserVultrAccountsVultrAccount {
	return v.VultrAccounts
}

// GetBlueprints returns currentUsageMetricsUser.Blueprints, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUser) GetBlueprints() *currentUsageMetricsUserBlueprintsBlueprintConnection {
	return v.Blueprints
}

// currentUsageMetricsUserAwsAccountsAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type currentUsageMetricsUserAwsAccountsAWSAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns currentUsageMetricsUserAwsAccountsAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserAwsAccountsAWSAccount) GetId() uuid.UUID { return v.Id }

// currentUsageMetricsUserBlueprintsBlueprintConnection includes the requested fields of the GraphQL type BlueprintConnection.
type currentUsageMetricsUserBlueprintsBlueprintConnection struct {
	TotalCount int                                                                  `json:"totalCount"`
	Nodes      []currentUsageMetricsUserBlueprintsBlueprintConnectionNodesBlueprint `json:"nodes"`
}

// GetTotalCount returns currentUsageMetricsUserBlueprintsBlueprintConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserBlueprintsBlueprintConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns currentUsageMetricsUserBlueprintsBlueprintConnection.Nodes, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserBlueprintsBlueprintConnection) GetNodes() []currentUsageMetricsUserBlueprintsBlueprintConnectionNodesBlueprint {
	return v.Nodes
}

// currentUsageMetricsUserBlueprintsBlueprintConnectionNodesBlueprint includes the requested fields of the GraphQL type Blueprint.
type currentUsageMetricsUserBlueprintsBlueprintConnectionNodesBlueprint struct {
	Owner *currentUsageMetricsUserBlueprintsBlueprintConnectionNodesBlueprintOwner `json:"owner"`
}

// GetOwner returns currentUsageMetricsUserBlueprintsBlueprintConnectionNodesBlueprint.Owner, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserBlueprintsBlueprintConnectionNodesBlueprint) GetOwner() *currentUsageMetricsUserBlueprintsBlueprintConnectionNodesBlueprintOwner {
	return v.Owner
}

// currentUsageMetricsUserBlueprintsBlueprintConnectionNodesBlueprintOwner includes the requested fields of the GraphQL type BlueprintOwner.
type currentUsageMetricsUserBlueprintsBlueprintConnectionNodesBlueprintOwner struct {
	Login string `json:"login"`
}

// GetLogin returns currentUsageMetricsUserBlueprintsBlueprintConnectionNodesBlueprintOwner.Login, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserBlueprintsBlueprintConnectionNodesBlueprintOwner) GetLogin() string {
	return v.Login
}

// currentUsageMetricsUserClustersCluster includes the requested fields of the GraphQL type Cluster.
type currentUsageMetricsUserClustersCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns currentUsageMetricsUserClustersCluster.Id, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetId() uuid.UUID { return v.Id }

// GetName returns currentUsageMetricsUserClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns currentUsageMetricsUserClustersCluster.Region, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetRegion() *string { return v.ClusterDetail.Region }

// GetState returns currentUsageMetricsUserClustersCluster.State, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetState() ClusterState {
	return v.ClusterDetail.State
}

// GetStatus returns currentUsageMetricsUserClustersCluster.Status, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetStatus() *ClusterStatus {
	return v.ClusterDetail.Status
}

// GetConnected returns currentUsageMetricsUserClustersCluster.Connected, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetConnected() *bool {
	return v.ClusterDetail.Connected
}

// GetDomain returns currentUsageMetricsUserClustersCluster.Domain, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetDomain() *string { return v.ClusterDetail.Domain }

// GetIsExternal returns currentUsageMetricsUserClustersCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetIsExternal() *bool {
	return v.ClusterDetail.IsExternal
}

// GetIsEjected returns currentUsageMetricsUserClustersCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetIsEjected() *bool {
	return v.ClusterDetail.IsEjected
}

// GetComponents returns currentUsageMetricsUserClustersCluster.Components, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns currentUsageMetricsUserClustersCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns currentUsageMetricsUserClustersCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns currentUsageMetricsUserClustersCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns currentUsageMetricsUserClustersCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns currentUsageMetricsUserClustersCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns currentUsageMetricsUserClustersCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns currentUsageMetricsUserClustersCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns currentUsageMetricsUserClustersCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns currentUsageMetricsUserClustersCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetIngressIP() *string {
	return v.ClusterDetail.IngressIP
}

// GetIngressDNS returns currentUsageMetricsUserClustersCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetIngressDNS() *string {
	return v.ClusterDetail.IngressDNS
}

// GetClusterProvider returns currentUsageMetricsUserClustersCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns currentUsageMetricsUserClustersCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns currentUsageMetricsUserClustersCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns currentUsageMetricsUserClustersCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns currentUsageMetricsUserClustersCluster.Grafana, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns currentUsageMetricsUserClustersCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns currentUsageMetricsUserClustersCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns currentUsageMetricsUserClustersCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns currentUsageMetricsUserClustersCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetail.UpdatedAt
}

// GetCreatedAt returns currentUsageMetricsUserClustersCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetCreatedAt() time.Time {
	return v.ClusterDetail.CreatedAt
}

// GetProjects returns currentUsageMetricsUserClustersCluster.Projects, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns currentUsageMetricsUserClustersCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns currentUsageMetricsUserClustersCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserClustersCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *currentUsageMetricsUserClustersCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*currentUsageMetricsUserClustersCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.currentUsageMetricsUserClustersCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcurrentUsageMetricsUserClustersCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *currentUsageMetricsUserClustersCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *currentUsageMetricsUserClustersCluster) __premarshalJSON() (*__premarshalcurrentUsageMetricsUserClustersCluster, error) {
	var retval __premarshalcurrentUsageMetricsUserClustersCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal currentUsageMetricsUserClustersCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// currentUsageMetricsUserCoreweaveAccountsCoreWeaveAccount includes the requested fields of the GraphQL type CoreWeaveAccount.
type currentUsageMetricsUserCoreweaveAccountsCoreWeaveAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns currentUsageMetricsUserCoreweaveAccountsCoreWeaveAccount.Id, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserCoreweaveAccountsCoreWeaveAccount) GetId() uuid.UUID { return v.Id }

// currentUsageMetricsUserDoAccountsDOAccount includes the requested fields of the GraphQL type DOAccount.
type currentUsageMetricsUserDoAccountsDOAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns currentUsageMetricsUserDoAccountsDOAccount.Id, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserDoAccountsDOAccount) GetId() uuid.UUID { return v.Id }

// currentUsageMetricsUserGcpAccountsGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type currentUsageMetricsUserGcpAccountsGCPAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns currentUsageMetricsUserGcpAccountsGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserGcpAccountsGCPAccount) GetId() uuid.UUID { return v.Id }

// currentUsageMetricsUserLinodeAccountsLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type currentUsageMetricsUserLinodeAccountsLinodeAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns currentUsageMetricsUserLinodeAccountsLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserLinodeAccountsLinodeAccount) GetId() uuid.UUID { return v.Id }

// currentUsageMetricsUserProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type currentUsageMetricsUserProjectV3AdaptersProjectV3AdapterConnection struct {
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns currentUsageMetricsUserProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.TotalCount
}

// currentUsageMetricsUserVultrAccountsVultrAccount includes the requested fields of the GraphQL type VultrAccount.
type currentUsageMetricsUserVultrAccountsVultrAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns currentUsageMetricsUserVultrAccountsVultrAccount.Id, and is useful for accessing the field via an interface.
func (v *currentUsageMetricsUserVultrAccountsVultrAccount) GetId() uuid.UUID { return v.Id }

// currentUserCurrentUser includes the requested fields of the GraphQL type User.
type currentUserCurrentUser struct {
	Id         uuid.UUID `json:"id"`
	UserDetail `json:"-"`
}

// GetId returns currentUserCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetId() uuid.UUID { return v.Id }

// GetHasZeetCloud returns currentUserCurrentUser.HasZeetCloud, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetHasZeetCloud() *bool { return v.UserDetail.HasZeetCloud }

// GetHasOnboarded returns currentUserCurrentUser.HasOnboarded, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetHasOnboarded() *bool { return v.UserDetail.HasOnboarded }

// GetCanDeploy returns currentUserCurrentUser.CanDeploy, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetCanDeploy() *bool { return v.UserDetail.CanDeploy }

// GetEmail returns currentUserCurrentUser.Email, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetEmail() *string { return v.UserDetail.UserCommon.Email }

// GetCreatedAt returns currentUserCurrentUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetCreatedAt() *time.Time { return v.UserDetail.UserCommon.CreatedAt }

// GetFreeTrialEndsAt returns currentUserCurrentUser.FreeTrialEndsAt, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetFreeTrialEndsAt() *time.Time {
	return v.UserDetail.UserCommon.FreeTrialEndsAt
}

// GetHasPaymentMethod returns currentUserCurrentUser.HasPaymentMethod, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetHasPaymentMethod() *bool {
	return v.UserDetail.UserCommon.HasPaymentMethod
}

// GetPaymentError returns currentUserCurrentUser.PaymentError, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetPaymentError() *string {
	return v.UserDetail.UserCommon.PaymentError
}

// GetPaymentAuthorizationError returns currentUserCurrentUser.PaymentAuthorizationError, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetPaymentAuthorizationError() *string {
	return v.UserDetail.UserCommon.PaymentAuthorizationError
}

// GetAdvanced returns currentUserCurrentUser.Advanced, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetAdvanced() *bool { return v.UserDetail.UserCommon.Advanced }

// GetName returns currentUserCurrentUser.Name, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetName() string {
	return v.UserDetail.UserCommon.UserPublicCommon.Name
}

// GetLogin returns currentUserCurrentUser.Login, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetLogin() string {
	return v.UserDetail.UserCommon.UserPublicCommon.Login
}

// GetAvatar returns currentUserCurrentUser.Avatar, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetAvatar() *string {
	return v.UserDetail.UserCommon.UserPublicCommon.Avatar
}

// GetIsTeam returns currentUserCurrentUser.IsTeam, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetIsTeam() *bool {
	return v.UserDetail.UserCommon.UserPublicCommon.IsTeam
}

func (v *currentUserCurrentUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*currentUserCurrentUser
		graphql.NoUnmarshalJSON
	}
	firstPass.currentUserCurrentUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcurrentUserCurrentUser struct {
	Id uuid.UUID `json:"id"`

	HasZeetCloud *bool `json:"hasZeetCloud"`

	HasOnboarded *bool `json:"hasOnboarded"`

	CanDeploy *bool `json:"canDeploy"`

	Email *string `json:"email"`

	CreatedAt *time.Time `json:"createdAt"`

	FreeTrialEndsAt *time.Time `json:"freeTrialEndsAt"`

	HasPaymentMethod *bool `json:"hasPaymentMethod"`

	PaymentError *string `json:"paymentError"`

	PaymentAuthorizationError *string `json:"paymentAuthorizationError"`

	Advanced *bool `json:"advanced"`

	Name string `json:"name"`

	Login string `json:"login"`

	Avatar *string `json:"avatar"`

	IsTeam *bool `json:"isTeam"`
}

func (v *currentUserCurrentUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *currentUserCurrentUser) __premarshalJSON() (*__premarshalcurrentUserCurrentUser, error) {
	var retval __premarshalcurrentUserCurrentUser

	retval.Id = v.Id
	retval.HasZeetCloud = v.UserDetail.HasZeetCloud
	retval.HasOnboarded = v.UserDetail.HasOnboarded
	retval.CanDeploy = v.UserDetail.CanDeploy
	retval.Email = v.UserDetail.UserCommon.Email
	retval.CreatedAt = v.UserDetail.UserCommon.CreatedAt
	retval.FreeTrialEndsAt = v.UserDetail.UserCommon.FreeTrialEndsAt
	retval.HasPaymentMethod = v.UserDetail.UserCommon.HasPaymentMethod
	retval.PaymentError = v.UserDetail.UserCommon.PaymentError
	retval.PaymentAuthorizationError = v.UserDetail.UserCommon.PaymentAuthorizationError
	retval.Advanced = v.UserDetail.UserCommon.Advanced
	retval.Name = v.UserDetail.UserCommon.UserPublicCommon.Name
	retval.Login = v.UserDetail.UserCommon.UserPublicCommon.Login
	retval.Avatar = v.UserDetail.UserCommon.UserPublicCommon.Avatar
	retval.IsTeam = v.UserDetail.UserCommon.UserPublicCommon.IsTeam
	return &retval, nil
}

// currentUserResponse is returned by currentUser on success.
type currentUserResponse struct {
	CurrentUser currentUserCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns currentUserResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *currentUserResponse) GetCurrentUser() currentUserCurrentUser { return v.CurrentUser }

// deleteAPIKeyResponse is returned by deleteAPIKey on success.
type deleteAPIKeyResponse struct {
	DeleteAPIKey bool `json:"deleteAPIKey"`
}

// GetDeleteAPIKey returns deleteAPIKeyResponse.DeleteAPIKey, and is useful for accessing the field via an interface.
func (v *deleteAPIKeyResponse) GetDeleteAPIKey() bool { return v.DeleteAPIKey }

// deleteBlueprintResponse is returned by deleteBlueprint on success.
type deleteBlueprintResponse struct {
	DeleteBlueprint bool `json:"deleteBlueprint"`
}

// GetDeleteBlueprint returns deleteBlueprintResponse.DeleteBlueprint, and is useful for accessing the field via an interface.
func (v *deleteBlueprintResponse) GetDeleteBlueprint() bool { return v.DeleteBlueprint }

// deleteClusterResponse is returned by deleteCluster on success.
type deleteClusterResponse struct {
	DeleteCluster bool `json:"deleteCluster"`
}

// GetDeleteCluster returns deleteClusterResponse.DeleteCluster, and is useful for accessing the field via an interface.
func (v *deleteClusterResponse) GetDeleteCluster() bool { return v.DeleteCluster }

// deleteIntegrationResponse is returned by deleteIntegration on success.
type deleteIntegrationResponse struct {
	RemoveUserIntegration bool `json:"removeUserIntegration"`
}

// GetRemoveUserIntegration returns deleteIntegrationResponse.RemoveUserIntegration, and is useful for accessing the field via an interface.
func (v *deleteIntegrationResponse) GetRemoveUserIntegration() bool { return v.RemoveUserIntegration }

// deleteProjectBranchResponse is returned by deleteProjectBranch on success.
type deleteProjectBranchResponse struct {
	// - id: v0.RepoID
	DeleteProjectBranch bool `json:"deleteProjectBranch"`
}

// GetDeleteProjectBranch returns deleteProjectBranchResponse.DeleteProjectBranch, and is useful for accessing the field via an interface.
func (v *deleteProjectBranchResponse) GetDeleteProjectBranch() bool { return v.DeleteProjectBranch }

// deleteProjectEnvironmentResponse is returned by deleteProjectEnvironment on success.
type deleteProjectEnvironmentResponse struct {
	DeleteProjectEnvironment bool `json:"deleteProjectEnvironment"`
}

// GetDeleteProjectEnvironment returns deleteProjectEnvironmentResponse.DeleteProjectEnvironment, and is useful for accessing the field via an interface.
func (v *deleteProjectEnvironmentResponse) GetDeleteProjectEnvironment() bool {
	return v.DeleteProjectEnvironment
}

// deleteProjectResponse is returned by deleteProject on success.
type deleteProjectResponse struct {
	DeleteRepo bool `json:"deleteRepo"`
}

// GetDeleteRepo returns deleteProjectResponse.DeleteRepo, and is useful for accessing the field via an interface.
func (v *deleteProjectResponse) GetDeleteRepo() bool { return v.DeleteRepo }

// deleteProjectV2Response is returned by deleteProjectV2 on success.
type deleteProjectV2Response struct {
	DeleteProjectV2 bool `json:"deleteProjectV2"`
}

// GetDeleteProjectV2 returns deleteProjectV2Response.DeleteProjectV2, and is useful for accessing the field via an interface.
func (v *deleteProjectV2Response) GetDeleteProjectV2() bool { return v.DeleteProjectV2 }

// deleteProjectV3Response is returned by deleteProjectV3 on success.
type deleteProjectV3Response struct {
	// - id: v0.ProjectV3ID
	DeleteProjectV3 bool `json:"deleteProjectV3"`
}

// GetDeleteProjectV3 returns deleteProjectV3Response.DeleteProjectV3, and is useful for accessing the field via an interface.
func (v *deleteProjectV3Response) GetDeleteProjectV3() bool { return v.DeleteProjectV3 }

// deleteRepoPipelineLinkResponse is returned by deleteRepoPipelineLink on success.
type deleteRepoPipelineLinkResponse struct {
	DeleteRepoPipelineLink *bool `json:"deleteRepoPipelineLink"`
}

// GetDeleteRepoPipelineLink returns deleteRepoPipelineLinkResponse.DeleteRepoPipelineLink, and is useful for accessing the field via an interface.
func (v *deleteRepoPipelineLinkResponse) GetDeleteRepoPipelineLink() *bool {
	return v.DeleteRepoPipelineLink
}

// deleteTeamMemberInvitationResponse is returned by deleteTeamMemberInvitation on success.
type deleteTeamMemberInvitationResponse struct {
	DeleteTeamMemberInvitation bool `json:"deleteTeamMemberInvitation"`
}

// GetDeleteTeamMemberInvitation returns deleteTeamMemberInvitationResponse.DeleteTeamMemberInvitation, and is useful for accessing the field via an interface.
func (v *deleteTeamMemberInvitationResponse) GetDeleteTeamMemberInvitation() bool {
	return v.DeleteTeamMemberInvitation
}

// deleteTeamResponse is returned by deleteTeam on success.
type deleteTeamResponse struct {
	DeleteTeam bool `json:"deleteTeam"`
}

// GetDeleteTeam returns deleteTeamResponse.DeleteTeam, and is useful for accessing the field via an interface.
func (v *deleteTeamResponse) GetDeleteTeam() bool { return v.DeleteTeam }

// deleteUserResponse is returned by deleteUser on success.
type deleteUserResponse struct {
	DeleteUser bool `json:"deleteUser"`
}

// GetDeleteUser returns deleteUserResponse.DeleteUser, and is useful for accessing the field via an interface.
func (v *deleteUserResponse) GetDeleteUser() bool { return v.DeleteUser }

// deployRepoBranchDeployRepoBranchRepo includes the requested fields of the GraphQL type Repo.
type deployRepoBranchDeployRepoBranchRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns deployRepoBranchDeployRepoBranchRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns deployRepoBranchDeployRepoBranchRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns deployRepoBranchDeployRepoBranchRepo.Manifest, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns deployRepoBranchDeployRepoBranchRepo.AppID, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns deployRepoBranchDeployRepoBranchRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns deployRepoBranchDeployRepoBranchRepo.KappID, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns deployRepoBranchDeployRepoBranchRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns deployRepoBranchDeployRepoBranchRepo.Project, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns deployRepoBranchDeployRepoBranchRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns deployRepoBranchDeployRepoBranchRepo.Namespace, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns deployRepoBranchDeployRepoBranchRepo.Envs, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetEnvs() []RepoDetailEnvsEnvVar {
	return v.RepoDetail.Envs
}

// GetCollaborators returns deployRepoBranchDeployRepoBranchRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns deployRepoBranchDeployRepoBranchRepo.Volumes, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns deployRepoBranchDeployRepoBranchRepo.Replication, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns deployRepoBranchDeployRepoBranchRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns deployRepoBranchDeployRepoBranchRepo.Cluster, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns deployRepoBranchDeployRepoBranchRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns deployRepoBranchDeployRepoBranchRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns deployRepoBranchDeployRepoBranchRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns deployRepoBranchDeployRepoBranchRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns deployRepoBranchDeployRepoBranchRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns deployRepoBranchDeployRepoBranchRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns deployRepoBranchDeployRepoBranchRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetManualDeploy() *bool {
	return v.RepoDetail.ManualDeploy
}

// GetDeployStrategy returns deployRepoBranchDeployRepoBranchRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns deployRepoBranchDeployRepoBranchRepo.Free, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns deployRepoBranchDeployRepoBranchRepo.Cpu, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns deployRepoBranchDeployRepoBranchRepo.Memory, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns deployRepoBranchDeployRepoBranchRepo.Gpu, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetGpu() *RepoDetailGpuGPUSpec {
	return v.RepoDetail.Gpu
}

// GetTpu returns deployRepoBranchDeployRepoBranchRepo.Tpu, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetTpu() *RepoDetailTpuTPUSpec {
	return v.RepoDetail.Tpu
}

// GetEphemeralStorage returns deployRepoBranchDeployRepoBranchRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns deployRepoBranchDeployRepoBranchRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns deployRepoBranchDeployRepoBranchRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns deployRepoBranchDeployRepoBranchRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns deployRepoBranchDeployRepoBranchRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns deployRepoBranchDeployRepoBranchRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns deployRepoBranchDeployRepoBranchRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns deployRepoBranchDeployRepoBranchRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns deployRepoBranchDeployRepoBranchRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns deployRepoBranchDeployRepoBranchRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetHelmValues() *string {
	return v.RepoDetail.HelmValues
}

// GetTerraformVersion returns deployRepoBranchDeployRepoBranchRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns deployRepoBranchDeployRepoBranchRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns deployRepoBranchDeployRepoBranchRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns deployRepoBranchDeployRepoBranchRepo.DeployService, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns deployRepoBranchDeployRepoBranchRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns deployRepoBranchDeployRepoBranchRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetPreStopSleep() *int {
	return v.RepoDetail.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns deployRepoBranchDeployRepoBranchRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns deployRepoBranchDeployRepoBranchRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns deployRepoBranchDeployRepoBranchRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns deployRepoBranchDeployRepoBranchRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns deployRepoBranchDeployRepoBranchRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns deployRepoBranchDeployRepoBranchRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns deployRepoBranchDeployRepoBranchRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns deployRepoBranchDeployRepoBranchRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns deployRepoBranchDeployRepoBranchRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns deployRepoBranchDeployRepoBranchRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns deployRepoBranchDeployRepoBranchRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetAutoRollback() *bool {
	return v.RepoDetail.AutoRollback
}

// GetCanDeploy returns deployRepoBranchDeployRepoBranchRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns deployRepoBranchDeployRepoBranchRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns deployRepoBranchDeployRepoBranchRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetAwsIamRole() *string {
	return v.RepoDetail.AwsIamRole
}

// GetGcpServiceAccount returns deployRepoBranchDeployRepoBranchRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns deployRepoBranchDeployRepoBranchRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns deployRepoBranchDeployRepoBranchRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns deployRepoBranchDeployRepoBranchRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns deployRepoBranchDeployRepoBranchRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns deployRepoBranchDeployRepoBranchRepo.Id, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetId() uuid.UUID { return v.RepoDetail.RepoCommon.Id }

// GetPath returns deployRepoBranchDeployRepoBranchRepo.Path, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns deployRepoBranchDeployRepoBranchRepo.Name, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns deployRepoBranchDeployRepoBranchRepo.Enabled, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetEnabled() bool {
	return v.RepoDetail.RepoCommon.Enabled
}

// GetSource returns deployRepoBranchDeployRepoBranchRepo.Source, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns deployRepoBranchDeployRepoBranchRepo.DeployType, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns deployRepoBranchDeployRepoBranchRepo.Image, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetImage() *string {
	return v.RepoDetail.RepoCommon.Image
}

// GetUpdatedAt returns deployRepoBranchDeployRepoBranchRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns deployRepoBranchDeployRepoBranchRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns deployRepoBranchDeployRepoBranchRepo.Owner, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns deployRepoBranchDeployRepoBranchRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns deployRepoBranchDeployRepoBranchRepo.Cdns, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns deployRepoBranchDeployRepoBranchRepo.Ports, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns deployRepoBranchDeployRepoBranchRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns deployRepoBranchDeployRepoBranchRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns deployRepoBranchDeployRepoBranchRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns deployRepoBranchDeployRepoBranchRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns deployRepoBranchDeployRepoBranchRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns deployRepoBranchDeployRepoBranchRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns deployRepoBranchDeployRepoBranchRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns deployRepoBranchDeployRepoBranchRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns deployRepoBranchDeployRepoBranchRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *deployRepoBranchDeployRepoBranchRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *deployRepoBranchDeployRepoBranchRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*deployRepoBranchDeployRepoBranchRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.deployRepoBranchDeployRepoBranchRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldeployRepoBranchDeployRepoBranchRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *deployRepoBranchDeployRepoBranchRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *deployRepoBranchDeployRepoBranchRepo) __premarshalJSON() (*__premarshaldeployRepoBranchDeployRepoBranchRepo, error) {
	var retval __premarshaldeployRepoBranchDeployRepoBranchRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// deployRepoBranchResponse is returned by deployRepoBranch on success.
type deployRepoBranchResponse struct {
	DeployRepoBranch deployRepoBranchDeployRepoBranchRepo `json:"deployRepoBranch"`
}

// GetDeployRepoBranch returns deployRepoBranchResponse.DeployRepoBranch, and is useful for accessing the field via an interface.
func (v *deployRepoBranchResponse) GetDeployRepoBranch() deployRepoBranchDeployRepoBranchRepo {
	return v.DeployRepoBranch
}

// deployTemplatesCurrentUser includes the requested fields of the GraphQL type User.
type deployTemplatesCurrentUser struct {
	Id         uuid.UUID                             `json:"id"`
	Deployment *deployTemplatesCurrentUserDeployment `json:"deployment"`
}

// GetId returns deployTemplatesCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *deployTemplatesCurrentUser) GetId() uuid.UUID { return v.Id }

// GetDeployment returns deployTemplatesCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *deployTemplatesCurrentUser) GetDeployment() *deployTemplatesCurrentUserDeployment {
	return v.Deployment
}

// deployTemplatesCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type deployTemplatesCurrentUserDeployment struct {
	Id              uuid.UUID                                                            `json:"id"`
	DeployTemplates []*deployTemplatesCurrentUserDeploymentDeployTemplatesDeployTemplate `json:"deployTemplates"`
}

// GetId returns deployTemplatesCurrentUserDeployment.Id, and is useful for accessing the field via an interface.
func (v *deployTemplatesCurrentUserDeployment) GetId() uuid.UUID { return v.Id }

// GetDeployTemplates returns deployTemplatesCurrentUserDeployment.DeployTemplates, and is useful for accessing the field via an interface.
func (v *deployTemplatesCurrentUserDeployment) GetDeployTemplates() []*deployTemplatesCurrentUserDeploymentDeployTemplatesDeployTemplate {
	return v.DeployTemplates
}

// deployTemplatesCurrentUserDeploymentDeployTemplatesDeployTemplate includes the requested fields of the GraphQL type DeployTemplate.
type deployTemplatesCurrentUserDeploymentDeployTemplatesDeployTemplate struct {
	Output *string            `json:"output"`
	Type   DeployTemplateType `json:"type"`
}

// GetOutput returns deployTemplatesCurrentUserDeploymentDeployTemplatesDeployTemplate.Output, and is useful for accessing the field via an interface.
func (v *deployTemplatesCurrentUserDeploymentDeployTemplatesDeployTemplate) GetOutput() *string {
	return v.Output
}

// GetType returns deployTemplatesCurrentUserDeploymentDeployTemplatesDeployTemplate.Type, and is useful for accessing the field via an interface.
func (v *deployTemplatesCurrentUserDeploymentDeployTemplatesDeployTemplate) GetType() DeployTemplateType {
	return v.Type
}

// deployTemplatesExistCurrentUser includes the requested fields of the GraphQL type User.
type deployTemplatesExistCurrentUser struct {
	Id         uuid.UUID                                  `json:"id"`
	Deployment *deployTemplatesExistCurrentUserDeployment `json:"deployment"`
}

// GetId returns deployTemplatesExistCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *deployTemplatesExistCurrentUser) GetId() uuid.UUID { return v.Id }

// GetDeployment returns deployTemplatesExistCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *deployTemplatesExistCurrentUser) GetDeployment() *deployTemplatesExistCurrentUserDeployment {
	return v.Deployment
}

// deployTemplatesExistCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type deployTemplatesExistCurrentUserDeployment struct {
	Id              uuid.UUID                                                                 `json:"id"`
	DeployTemplates []*deployTemplatesExistCurrentUserDeploymentDeployTemplatesDeployTemplate `json:"deployTemplates"`
}

// GetId returns deployTemplatesExistCurrentUserDeployment.Id, and is useful for accessing the field via an interface.
func (v *deployTemplatesExistCurrentUserDeployment) GetId() uuid.UUID { return v.Id }

// GetDeployTemplates returns deployTemplatesExistCurrentUserDeployment.DeployTemplates, and is useful for accessing the field via an interface.
func (v *deployTemplatesExistCurrentUserDeployment) GetDeployTemplates() []*deployTemplatesExistCurrentUserDeploymentDeployTemplatesDeployTemplate {
	return v.DeployTemplates
}

// deployTemplatesExistCurrentUserDeploymentDeployTemplatesDeployTemplate includes the requested fields of the GraphQL type DeployTemplate.
type deployTemplatesExistCurrentUserDeploymentDeployTemplatesDeployTemplate struct {
	Type DeployTemplateType `json:"type"`
}

// GetType returns deployTemplatesExistCurrentUserDeploymentDeployTemplatesDeployTemplate.Type, and is useful for accessing the field via an interface.
func (v *deployTemplatesExistCurrentUserDeploymentDeployTemplatesDeployTemplate) GetType() DeployTemplateType {
	return v.Type
}

// deployTemplatesExistResponse is returned by deployTemplatesExist on success.
type deployTemplatesExistResponse struct {
	CurrentUser deployTemplatesExistCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns deployTemplatesExistResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *deployTemplatesExistResponse) GetCurrentUser() deployTemplatesExistCurrentUser {
	return v.CurrentUser
}

// deployTemplatesResponse is returned by deployTemplates on success.
type deployTemplatesResponse struct {
	CurrentUser deployTemplatesCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns deployTemplatesResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *deployTemplatesResponse) GetCurrentUser() deployTemplatesCurrentUser { return v.CurrentUser }

// deploymentAlertCurrentUser includes the requested fields of the GraphQL type User.
type deploymentAlertCurrentUser struct {
	Id         uuid.UUID                             `json:"id"`
	Deployment *deploymentAlertCurrentUserDeployment `json:"deployment"`
}

// GetId returns deploymentAlertCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *deploymentAlertCurrentUser) GetId() uuid.UUID { return v.Id }

// GetDeployment returns deploymentAlertCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *deploymentAlertCurrentUser) GetDeployment() *deploymentAlertCurrentUserDeployment {
	return v.Deployment
}

// deploymentAlertCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type deploymentAlertCurrentUserDeployment struct {
	Alert *deploymentAlertCurrentUserDeploymentAlert `json:"-"`
}

// GetAlert returns deploymentAlertCurrentUserDeployment.Alert, and is useful for accessing the field via an interface.
func (v *deploymentAlertCurrentUserDeployment) GetAlert() *deploymentAlertCurrentUserDeploymentAlert {
	return v.Alert
}

func (v *deploymentAlertCurrentUserDeployment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*deploymentAlertCurrentUserDeployment
		Alert json.RawMessage `json:"alert"`
		graphql.NoUnmarshalJSON
	}
	firstPass.deploymentAlertCurrentUserDeployment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Alert
		src := firstPass.Alert
		if len(src) != 0 && string(src) != "null" {
			*dst = new(deploymentAlertCurrentUserDeploymentAlert)
			err = __unmarshaldeploymentAlertCurrentUserDeploymentAlert(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal deploymentAlertCurrentUserDeployment.Alert: %w", err)
			}
		}
	}
	return nil
}

type __premarshaldeploymentAlertCurrentUserDeployment struct {
	Alert json.RawMessage `json:"alert"`
}

func (v *deploymentAlertCurrentUserDeployment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *deploymentAlertCurrentUserDeployment) __premarshalJSON() (*__premarshaldeploymentAlertCurrentUserDeployment, error) {
	var retval __premarshaldeploymentAlertCurrentUserDeployment

	{

		dst := &retval.Alert
		src := v.Alert
		if src != nil {
			var err error
			*dst, err = __marshaldeploymentAlertCurrentUserDeploymentAlert(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal deploymentAlertCurrentUserDeployment.Alert: %w", err)
			}
		}
	}
	return &retval, nil
}

// deploymentAlertCurrentUserDeploymentAlert includes the requested fields of the GraphQL interface DeploymentAlert.
//
// deploymentAlertCurrentUserDeploymentAlert is implemented by the following types:
// deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert
type deploymentAlertCurrentUserDeploymentAlert interface {
	implementsGraphQLInterfacedeploymentAlertCurrentUserDeploymentAlert()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	DeploymentAlertDetail
}

func (v *deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert) implementsGraphQLInterfacedeploymentAlertCurrentUserDeploymentAlert() {
}
func (v *deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert) implementsGraphQLInterfaceDeploymentAlertDetail() {
}

func __unmarshaldeploymentAlertCurrentUserDeploymentAlert(b []byte, v *deploymentAlertCurrentUserDeploymentAlert) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DeploymentPodCrashAlert":
		*v = new(deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DeploymentAlert.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for deploymentAlertCurrentUserDeploymentAlert: "%v"`, tn.TypeName)
	}
}

func __marshaldeploymentAlertCurrentUserDeploymentAlert(v *deploymentAlertCurrentUserDeploymentAlert) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert:
		typename = "DeploymentPodCrashAlert"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldeploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for deploymentAlertCurrentUserDeploymentAlert: "%T"`, v)
	}
}

// deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert includes the requested fields of the GraphQL type DeploymentPodCrashAlert.
type deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert struct {
	Typename                                     *string `json:"__typename"`
	DeploymentAlertDetailDeploymentPodCrashAlert `json:"-"`
}

// GetTypename returns deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert.Typename, and is useful for accessing the field via an interface.
func (v *deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert) GetTypename() *string {
	return v.Typename
}

// GetCreatedAt returns deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert.CreatedAt, and is useful for accessing the field via an interface.
func (v *deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert) GetCreatedAt() time.Time {
	return v.DeploymentAlertDetailDeploymentPodCrashAlert.CreatedAt
}

// GetResolvedAt returns deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert.ResolvedAt, and is useful for accessing the field via an interface.
func (v *deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert) GetResolvedAt() *time.Time {
	return v.DeploymentAlertDetailDeploymentPodCrashAlert.ResolvedAt
}

// GetNamespace returns deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert.Namespace, and is useful for accessing the field via an interface.
func (v *deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert) GetNamespace() *string {
	return v.DeploymentAlertDetailDeploymentPodCrashAlert.Namespace
}

// GetPodName returns deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert.PodName, and is useful for accessing the field via an interface.
func (v *deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert) GetPodName() *string {
	return v.DeploymentAlertDetailDeploymentPodCrashAlert.PodName
}

// GetPreviousPodLogs returns deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert.PreviousPodLogs, and is useful for accessing the field via an interface.
func (v *deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert) GetPreviousPodLogs() *DeploymentAlertDetailPreviousPodLogs {
	return v.DeploymentAlertDetailDeploymentPodCrashAlert.PreviousPodLogs
}

func (v *deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert
		graphql.NoUnmarshalJSON
	}
	firstPass.deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentAlertDetailDeploymentPodCrashAlert)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldeploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert struct {
	Typename *string `json:"__typename"`

	CreatedAt time.Time `json:"createdAt"`

	ResolvedAt *time.Time `json:"resolvedAt"`

	Namespace *string `json:"namespace"`

	PodName *string `json:"podName"`

	PreviousPodLogs *DeploymentAlertDetailPreviousPodLogs `json:"previousPodLogs"`
}

func (v *deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *deploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert) __premarshalJSON() (*__premarshaldeploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert, error) {
	var retval __premarshaldeploymentAlertCurrentUserDeploymentAlertDeploymentPodCrashAlert

	retval.Typename = v.Typename
	retval.CreatedAt = v.DeploymentAlertDetailDeploymentPodCrashAlert.CreatedAt
	retval.ResolvedAt = v.DeploymentAlertDetailDeploymentPodCrashAlert.ResolvedAt
	retval.Namespace = v.DeploymentAlertDetailDeploymentPodCrashAlert.Namespace
	retval.PodName = v.DeploymentAlertDetailDeploymentPodCrashAlert.PodName
	retval.PreviousPodLogs = v.DeploymentAlertDetailDeploymentPodCrashAlert.PreviousPodLogs
	return &retval, nil
}

// deploymentAlertResponse is returned by deploymentAlert on success.
type deploymentAlertResponse struct {
	CurrentUser deploymentAlertCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns deploymentAlertResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *deploymentAlertResponse) GetCurrentUser() deploymentAlertCurrentUser { return v.CurrentUser }

// deploymentBuildLogsAddedDeploymentBuildLogsAddedLogEntry includes the requested fields of the GraphQL type LogEntry.
type deploymentBuildLogsAddedDeploymentBuildLogsAddedLogEntry struct {
	Text      string     `json:"text"`
	Timestamp *time.Time `json:"timestamp"`
}

// GetText returns deploymentBuildLogsAddedDeploymentBuildLogsAddedLogEntry.Text, and is useful for accessing the field via an interface.
func (v *deploymentBuildLogsAddedDeploymentBuildLogsAddedLogEntry) GetText() string { return v.Text }

// GetTimestamp returns deploymentBuildLogsAddedDeploymentBuildLogsAddedLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *deploymentBuildLogsAddedDeploymentBuildLogsAddedLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// deploymentBuildLogsAddedResponse is returned by deploymentBuildLogsAdded on success.
type deploymentBuildLogsAddedResponse struct {
	DeploymentBuildLogsAdded deploymentBuildLogsAddedDeploymentBuildLogsAddedLogEntry `json:"deploymentBuildLogsAdded"`
}

// GetDeploymentBuildLogsAdded returns deploymentBuildLogsAddedResponse.DeploymentBuildLogsAdded, and is useful for accessing the field via an interface.
func (v *deploymentBuildLogsAddedResponse) GetDeploymentBuildLogsAdded() deploymentBuildLogsAddedDeploymentBuildLogsAddedLogEntry {
	return v.DeploymentBuildLogsAdded
}

// deploymentBuildLogsCurrentUser includes the requested fields of the GraphQL type User.
type deploymentBuildLogsCurrentUser struct {
	Id         uuid.UUID                                 `json:"id"`
	Deployment *deploymentBuildLogsCurrentUserDeployment `json:"deployment"`
}

// GetId returns deploymentBuildLogsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *deploymentBuildLogsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetDeployment returns deploymentBuildLogsCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *deploymentBuildLogsCurrentUser) GetDeployment() *deploymentBuildLogsCurrentUserDeployment {
	return v.Deployment
}

// deploymentBuildLogsCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type deploymentBuildLogsCurrentUserDeployment struct {
	Id                  uuid.UUID `json:"id"`
	DeploymentBuildLogs `json:"-"`
}

// GetId returns deploymentBuildLogsCurrentUserDeployment.Id, and is useful for accessing the field via an interface.
func (v *deploymentBuildLogsCurrentUserDeployment) GetId() uuid.UUID { return v.Id }

// GetBuild returns deploymentBuildLogsCurrentUserDeployment.Build, and is useful for accessing the field via an interface.
func (v *deploymentBuildLogsCurrentUserDeployment) GetBuild() *DeploymentBuildLogsBuild {
	return v.DeploymentBuildLogs.Build
}

func (v *deploymentBuildLogsCurrentUserDeployment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*deploymentBuildLogsCurrentUserDeployment
		graphql.NoUnmarshalJSON
	}
	firstPass.deploymentBuildLogsCurrentUserDeployment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentBuildLogs)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldeploymentBuildLogsCurrentUserDeployment struct {
	Id uuid.UUID `json:"id"`

	Build *DeploymentBuildLogsBuild `json:"build"`
}

func (v *deploymentBuildLogsCurrentUserDeployment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *deploymentBuildLogsCurrentUserDeployment) __premarshalJSON() (*__premarshaldeploymentBuildLogsCurrentUserDeployment, error) {
	var retval __premarshaldeploymentBuildLogsCurrentUserDeployment

	retval.Id = v.Id
	retval.Build = v.DeploymentBuildLogs.Build
	return &retval, nil
}

// deploymentBuildLogsResponse is returned by deploymentBuildLogs on success.
type deploymentBuildLogsResponse struct {
	CurrentUser deploymentBuildLogsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns deploymentBuildLogsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *deploymentBuildLogsResponse) GetCurrentUser() deploymentBuildLogsCurrentUser {
	return v.CurrentUser
}

// deploymentBuildMetricsDeploymentUpdatedDeployment includes the requested fields of the GraphQL type Deployment.
type deploymentBuildMetricsDeploymentUpdatedDeployment struct {
	Id    uuid.UUID                                               `json:"id"`
	Build *deploymentBuildMetricsDeploymentUpdatedDeploymentBuild `json:"build"`
}

// GetId returns deploymentBuildMetricsDeploymentUpdatedDeployment.Id, and is useful for accessing the field via an interface.
func (v *deploymentBuildMetricsDeploymentUpdatedDeployment) GetId() uuid.UUID { return v.Id }

// GetBuild returns deploymentBuildMetricsDeploymentUpdatedDeployment.Build, and is useful for accessing the field via an interface.
func (v *deploymentBuildMetricsDeploymentUpdatedDeployment) GetBuild() *deploymentBuildMetricsDeploymentUpdatedDeploymentBuild {
	return v.Build
}

// deploymentBuildMetricsDeploymentUpdatedDeploymentBuild includes the requested fields of the GraphQL type Build.
type deploymentBuildMetricsDeploymentUpdatedDeploymentBuild struct {
	Id            uuid.UUID                                                                   `json:"id"`
	CpuMetrics    []deploymentBuildMetricsDeploymentUpdatedDeploymentBuildCpuMetricsMetric    `json:"cpuMetrics"`
	MemoryMetrics []deploymentBuildMetricsDeploymentUpdatedDeploymentBuildMemoryMetricsMetric `json:"memoryMetrics"`
}

// GetId returns deploymentBuildMetricsDeploymentUpdatedDeploymentBuild.Id, and is useful for accessing the field via an interface.
func (v *deploymentBuildMetricsDeploymentUpdatedDeploymentBuild) GetId() uuid.UUID { return v.Id }

// GetCpuMetrics returns deploymentBuildMetricsDeploymentUpdatedDeploymentBuild.CpuMetrics, and is useful for accessing the field via an interface.
func (v *deploymentBuildMetricsDeploymentUpdatedDeploymentBuild) GetCpuMetrics() []deploymentBuildMetricsDeploymentUpdatedDeploymentBuildCpuMetricsMetric {
	return v.CpuMetrics
}

// GetMemoryMetrics returns deploymentBuildMetricsDeploymentUpdatedDeploymentBuild.MemoryMetrics, and is useful for accessing the field via an interface.
func (v *deploymentBuildMetricsDeploymentUpdatedDeploymentBuild) GetMemoryMetrics() []deploymentBuildMetricsDeploymentUpdatedDeploymentBuildMemoryMetricsMetric {
	return v.MemoryMetrics
}

// deploymentBuildMetricsDeploymentUpdatedDeploymentBuildCpuMetricsMetric includes the requested fields of the GraphQL type Metric.
type deploymentBuildMetricsDeploymentUpdatedDeploymentBuildCpuMetricsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns deploymentBuildMetricsDeploymentUpdatedDeploymentBuildCpuMetricsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *deploymentBuildMetricsDeploymentUpdatedDeploymentBuildCpuMetricsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns deploymentBuildMetricsDeploymentUpdatedDeploymentBuildCpuMetricsMetric.Value, and is useful for accessing the field via an interface.
func (v *deploymentBuildMetricsDeploymentUpdatedDeploymentBuildCpuMetricsMetric) GetValue() *float64 {
	return v.Value
}

// deploymentBuildMetricsDeploymentUpdatedDeploymentBuildMemoryMetricsMetric includes the requested fields of the GraphQL type Metric.
type deploymentBuildMetricsDeploymentUpdatedDeploymentBuildMemoryMetricsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns deploymentBuildMetricsDeploymentUpdatedDeploymentBuildMemoryMetricsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *deploymentBuildMetricsDeploymentUpdatedDeploymentBuildMemoryMetricsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns deploymentBuildMetricsDeploymentUpdatedDeploymentBuildMemoryMetricsMetric.Value, and is useful for accessing the field via an interface.
func (v *deploymentBuildMetricsDeploymentUpdatedDeploymentBuildMemoryMetricsMetric) GetValue() *float64 {
	return v.Value
}

// deploymentBuildMetricsResponse is returned by deploymentBuildMetrics on success.
type deploymentBuildMetricsResponse struct {
	DeploymentUpdated deploymentBuildMetricsDeploymentUpdatedDeployment `json:"deploymentUpdated"`
}

// GetDeploymentUpdated returns deploymentBuildMetricsResponse.DeploymentUpdated, and is useful for accessing the field via an interface.
func (v *deploymentBuildMetricsResponse) GetDeploymentUpdated() deploymentBuildMetricsDeploymentUpdatedDeployment {
	return v.DeploymentUpdated
}

// deploymentDeployLogsCurrentUser includes the requested fields of the GraphQL type User.
type deploymentDeployLogsCurrentUser struct {
	Id         uuid.UUID                                  `json:"id"`
	Deployment *deploymentDeployLogsCurrentUserDeployment `json:"deployment"`
}

// GetId returns deploymentDeployLogsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *deploymentDeployLogsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetDeployment returns deploymentDeployLogsCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *deploymentDeployLogsCurrentUser) GetDeployment() *deploymentDeployLogsCurrentUserDeployment {
	return v.Deployment
}

// deploymentDeployLogsCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type deploymentDeployLogsCurrentUserDeployment struct {
	Id          uuid.UUID                                                          `json:"id"`
	DeployStage *deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStage `json:"deployStage"`
}

// GetId returns deploymentDeployLogsCurrentUserDeployment.Id, and is useful for accessing the field via an interface.
func (v *deploymentDeployLogsCurrentUserDeployment) GetId() uuid.UUID { return v.Id }

// GetDeployStage returns deploymentDeployLogsCurrentUserDeployment.DeployStage, and is useful for accessing the field via an interface.
func (v *deploymentDeployLogsCurrentUserDeployment) GetDeployStage() *deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStage {
	return v.DeployStage
}

// deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStage includes the requested fields of the GraphQL type PipelineStage.
type deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStage struct {
	Id   uuid.UUID                                                              `json:"id"`
	Logs *deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogs `json:"logs"`
}

// GetId returns deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStage.Id, and is useful for accessing the field via an interface.
func (v *deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStage) GetId() uuid.UUID {
	return v.Id
}

// GetLogs returns deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStage.Logs, and is useful for accessing the field via an interface.
func (v *deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStage) GetLogs() *deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogs {
	return v.Logs
}

// deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogs includes the requested fields of the GraphQL type Logs.
type deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogs struct {
	Id        uuid.UUID                                                                              `json:"id"`
	Completed bool                                                                                   `json:"completed"`
	Expired   bool                                                                                   `json:"expired"`
	Entries   []deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogsEntriesLogEntry `json:"entries"`
}

// GetId returns deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogs.Id, and is useful for accessing the field via an interface.
func (v *deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogs) GetId() uuid.UUID {
	return v.Id
}

// GetCompleted returns deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogs.Completed, and is useful for accessing the field via an interface.
func (v *deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogs) GetCompleted() bool {
	return v.Completed
}

// GetExpired returns deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogs.Expired, and is useful for accessing the field via an interface.
func (v *deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogs) GetExpired() bool {
	return v.Expired
}

// GetEntries returns deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogs.Entries, and is useful for accessing the field via an interface.
func (v *deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogs) GetEntries() []deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogsEntriesLogEntry {
	return v.Entries
}

// deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogsEntriesLogEntry struct {
	Timestamp *time.Time `json:"timestamp"`
	Text      string     `json:"text"`
}

// GetTimestamp returns deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogsEntriesLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// GetText returns deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *deploymentDeployLogsCurrentUserDeploymentDeployStagePipelineStageLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// deploymentDeployLogsResponse is returned by deploymentDeployLogs on success.
type deploymentDeployLogsResponse struct {
	CurrentUser deploymentDeployLogsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns deploymentDeployLogsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *deploymentDeployLogsResponse) GetCurrentUser() deploymentDeployLogsCurrentUser {
	return v.CurrentUser
}

// deploymentLogsCurrentUser includes the requested fields of the GraphQL type User.
type deploymentLogsCurrentUser struct {
	Id   uuid.UUID                      `json:"id"`
	Repo *deploymentLogsCurrentUserRepo `json:"repo"`
}

// GetId returns deploymentLogsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetRepo returns deploymentLogsCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUser) GetRepo() *deploymentLogsCurrentUserRepo { return v.Repo }

// deploymentLogsCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type deploymentLogsCurrentUserRepo struct {
	// - v0.RepoID
	Id         uuid.UUID                                `json:"id"`
	Deployment *deploymentLogsCurrentUserRepoDeployment `json:"deployment"`
}

// GetId returns deploymentLogsCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetDeployment returns deploymentLogsCurrentUserRepo.Deployment, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepo) GetDeployment() *deploymentLogsCurrentUserRepoDeployment {
	return v.Deployment
}

// deploymentLogsCurrentUserRepoDeployment includes the requested fields of the GraphQL type Deployment.
type deploymentLogsCurrentUserRepoDeployment struct {
	Id       uuid.UUID                                                 `json:"id"`
	Logs     []deploymentLogsCurrentUserRepoDeploymentLogsLogEntry     `json:"logs"`
	LogsV2   *deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogs `json:"logsV2"`
	AwsLinks *deploymentLogsCurrentUserRepoDeploymentAwsLinksAWSLinks  `json:"awsLinks"`
	GcpLinks *deploymentLogsCurrentUserRepoDeploymentGcpLinksGCPLinks  `json:"gcpLinks"`
}

// GetId returns deploymentLogsCurrentUserRepoDeployment.Id, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeployment) GetId() uuid.UUID { return v.Id }

// GetLogs returns deploymentLogsCurrentUserRepoDeployment.Logs, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeployment) GetLogs() []deploymentLogsCurrentUserRepoDeploymentLogsLogEntry {
	return v.Logs
}

// GetLogsV2 returns deploymentLogsCurrentUserRepoDeployment.LogsV2, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeployment) GetLogsV2() *deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogs {
	return v.LogsV2
}

// GetAwsLinks returns deploymentLogsCurrentUserRepoDeployment.AwsLinks, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeployment) GetAwsLinks() *deploymentLogsCurrentUserRepoDeploymentAwsLinksAWSLinks {
	return v.AwsLinks
}

// GetGcpLinks returns deploymentLogsCurrentUserRepoDeployment.GcpLinks, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeployment) GetGcpLinks() *deploymentLogsCurrentUserRepoDeploymentGcpLinksGCPLinks {
	return v.GcpLinks
}

// deploymentLogsCurrentUserRepoDeploymentAwsLinksAWSLinks includes the requested fields of the GraphQL type AWSLinks.
type deploymentLogsCurrentUserRepoDeploymentAwsLinksAWSLinks struct {
	CloudwatchLogs *string `json:"cloudwatchLogs"`
}

// GetCloudwatchLogs returns deploymentLogsCurrentUserRepoDeploymentAwsLinksAWSLinks.CloudwatchLogs, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeploymentAwsLinksAWSLinks) GetCloudwatchLogs() *string {
	return v.CloudwatchLogs
}

// deploymentLogsCurrentUserRepoDeploymentGcpLinksGCPLinks includes the requested fields of the GraphQL type GCPLinks.
type deploymentLogsCurrentUserRepoDeploymentGcpLinksGCPLinks struct {
	CloudLogging *string `json:"cloudLogging"`
}

// GetCloudLogging returns deploymentLogsCurrentUserRepoDeploymentGcpLinksGCPLinks.CloudLogging, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeploymentGcpLinksGCPLinks) GetCloudLogging() *string {
	return v.CloudLogging
}

// deploymentLogsCurrentUserRepoDeploymentLogsLogEntry includes the requested fields of the GraphQL type LogEntry.
type deploymentLogsCurrentUserRepoDeploymentLogsLogEntry struct {
	Timestamp *time.Time `json:"timestamp"`
	Text      string     `json:"text"`
}

// GetTimestamp returns deploymentLogsCurrentUserRepoDeploymentLogsLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeploymentLogsLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// GetText returns deploymentLogsCurrentUserRepoDeploymentLogsLogEntry.Text, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeploymentLogsLogEntry) GetText() string { return v.Text }

// deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogs includes the requested fields of the GraphQL type ComplexLogs.
type deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogs struct {
	Previous []deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsPreviousLogEntry `json:"previous"`
	Current  []deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsCurrentLogEntry  `json:"current"`
}

// GetPrevious returns deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogs.Previous, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogs) GetPrevious() []deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsPreviousLogEntry {
	return v.Previous
}

// GetCurrent returns deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogs.Current, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogs) GetCurrent() []deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsCurrentLogEntry {
	return v.Current
}

// deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsCurrentLogEntry includes the requested fields of the GraphQL type LogEntry.
type deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsCurrentLogEntry struct {
	Timestamp *time.Time `json:"timestamp"`
	Text      string     `json:"text"`
}

// GetTimestamp returns deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsCurrentLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsCurrentLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// GetText returns deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsCurrentLogEntry.Text, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsCurrentLogEntry) GetText() string {
	return v.Text
}

// deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsPreviousLogEntry includes the requested fields of the GraphQL type LogEntry.
type deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsPreviousLogEntry struct {
	Timestamp *time.Time `json:"timestamp"`
	Text      string     `json:"text"`
}

// GetTimestamp returns deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsPreviousLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsPreviousLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// GetText returns deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsPreviousLogEntry.Text, and is useful for accessing the field via an interface.
func (v *deploymentLogsCurrentUserRepoDeploymentLogsV2ComplexLogsPreviousLogEntry) GetText() string {
	return v.Text
}

// deploymentLogsResponse is returned by deploymentLogs on success.
type deploymentLogsResponse struct {
	CurrentUser deploymentLogsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns deploymentLogsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *deploymentLogsResponse) GetCurrentUser() deploymentLogsCurrentUser { return v.CurrentUser }

// deploymentMetricsCurrentUser includes the requested fields of the GraphQL type User.
type deploymentMetricsCurrentUser struct {
	Id   uuid.UUID                         `json:"id"`
	Repo *deploymentMetricsCurrentUserRepo `json:"repo"`
}

// GetId returns deploymentMetricsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *deploymentMetricsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetRepo returns deploymentMetricsCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *deploymentMetricsCurrentUser) GetRepo() *deploymentMetricsCurrentUserRepo { return v.Repo }

// deploymentMetricsCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type deploymentMetricsCurrentUserRepo struct {
	// - v0.RepoID
	Id         uuid.UUID                                   `json:"id"`
	Deployment *deploymentMetricsCurrentUserRepoDeployment `json:"deployment"`
}

// GetId returns deploymentMetricsCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *deploymentMetricsCurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetDeployment returns deploymentMetricsCurrentUserRepo.Deployment, and is useful for accessing the field via an interface.
func (v *deploymentMetricsCurrentUserRepo) GetDeployment() *deploymentMetricsCurrentUserRepoDeployment {
	return v.Deployment
}

// deploymentMetricsCurrentUserRepoDeployment includes the requested fields of the GraphQL type Deployment.
type deploymentMetricsCurrentUserRepoDeployment struct {
	Id      uuid.UUID                                                 `json:"id"`
	Metrics []deploymentMetricsCurrentUserRepoDeploymentMetricsMetric `json:"metrics"`
}

// GetId returns deploymentMetricsCurrentUserRepoDeployment.Id, and is useful for accessing the field via an interface.
func (v *deploymentMetricsCurrentUserRepoDeployment) GetId() uuid.UUID { return v.Id }

// GetMetrics returns deploymentMetricsCurrentUserRepoDeployment.Metrics, and is useful for accessing the field via an interface.
func (v *deploymentMetricsCurrentUserRepoDeployment) GetMetrics() []deploymentMetricsCurrentUserRepoDeploymentMetricsMetric {
	return v.Metrics
}

// deploymentMetricsCurrentUserRepoDeploymentMetricsMetric includes the requested fields of the GraphQL type Metric.
type deploymentMetricsCurrentUserRepoDeploymentMetricsMetric struct {
	Timestamp time.Time `json:"timestamp"`
	Value     *float64  `json:"value"`
}

// GetTimestamp returns deploymentMetricsCurrentUserRepoDeploymentMetricsMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *deploymentMetricsCurrentUserRepoDeploymentMetricsMetric) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetValue returns deploymentMetricsCurrentUserRepoDeploymentMetricsMetric.Value, and is useful for accessing the field via an interface.
func (v *deploymentMetricsCurrentUserRepoDeploymentMetricsMetric) GetValue() *float64 { return v.Value }

// deploymentMetricsResponse is returned by deploymentMetrics on success.
type deploymentMetricsResponse struct {
	CurrentUser deploymentMetricsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns deploymentMetricsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *deploymentMetricsResponse) GetCurrentUser() deploymentMetricsCurrentUser {
	return v.CurrentUser
}

// deploymentReleaseLogsCurrentUser includes the requested fields of the GraphQL type User.
type deploymentReleaseLogsCurrentUser struct {
	Id         uuid.UUID                                   `json:"id"`
	Deployment *deploymentReleaseLogsCurrentUserDeployment `json:"deployment"`
}

// GetId returns deploymentReleaseLogsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *deploymentReleaseLogsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetDeployment returns deploymentReleaseLogsCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *deploymentReleaseLogsCurrentUser) GetDeployment() *deploymentReleaseLogsCurrentUserDeployment {
	return v.Deployment
}

// deploymentReleaseLogsCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type deploymentReleaseLogsCurrentUserDeployment struct {
	Id           uuid.UUID                                                            `json:"id"`
	ReleaseStage *deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStage `json:"releaseStage"`
}

// GetId returns deploymentReleaseLogsCurrentUserDeployment.Id, and is useful for accessing the field via an interface.
func (v *deploymentReleaseLogsCurrentUserDeployment) GetId() uuid.UUID { return v.Id }

// GetReleaseStage returns deploymentReleaseLogsCurrentUserDeployment.ReleaseStage, and is useful for accessing the field via an interface.
func (v *deploymentReleaseLogsCurrentUserDeployment) GetReleaseStage() *deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStage {
	return v.ReleaseStage
}

// deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStage includes the requested fields of the GraphQL type PipelineStage.
type deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStage struct {
	Id   uuid.UUID                                                                `json:"id"`
	Logs *deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogs `json:"logs"`
}

// GetId returns deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStage.Id, and is useful for accessing the field via an interface.
func (v *deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStage) GetId() uuid.UUID {
	return v.Id
}

// GetLogs returns deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStage.Logs, and is useful for accessing the field via an interface.
func (v *deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStage) GetLogs() *deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogs {
	return v.Logs
}

// deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogs includes the requested fields of the GraphQL type Logs.
type deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogs struct {
	Id        uuid.UUID                                                                                `json:"id"`
	Completed bool                                                                                     `json:"completed"`
	Expired   bool                                                                                     `json:"expired"`
	Entries   []deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogsEntriesLogEntry `json:"entries"`
}

// GetId returns deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogs.Id, and is useful for accessing the field via an interface.
func (v *deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogs) GetId() uuid.UUID {
	return v.Id
}

// GetCompleted returns deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogs.Completed, and is useful for accessing the field via an interface.
func (v *deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogs) GetCompleted() bool {
	return v.Completed
}

// GetExpired returns deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogs.Expired, and is useful for accessing the field via an interface.
func (v *deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogs) GetExpired() bool {
	return v.Expired
}

// GetEntries returns deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogs.Entries, and is useful for accessing the field via an interface.
func (v *deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogs) GetEntries() []deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogsEntriesLogEntry {
	return v.Entries
}

// deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogsEntriesLogEntry struct {
	Timestamp *time.Time `json:"timestamp"`
	Text      string     `json:"text"`
}

// GetTimestamp returns deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogsEntriesLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// GetText returns deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *deploymentReleaseLogsCurrentUserDeploymentReleaseStagePipelineStageLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// deploymentReleaseLogsResponse is returned by deploymentReleaseLogs on success.
type deploymentReleaseLogsResponse struct {
	CurrentUser deploymentReleaseLogsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns deploymentReleaseLogsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *deploymentReleaseLogsResponse) GetCurrentUser() deploymentReleaseLogsCurrentUser {
	return v.CurrentUser
}

// deploymentUpdatedDeploymentUpdatedDeployment includes the requested fields of the GraphQL type Deployment.
type deploymentUpdatedDeploymentUpdatedDeployment struct {
	Id        uuid.UUID                                          `json:"id"`
	Status    DeploymentStatus                                   `json:"status"`
	Endpoints []string                                           `json:"endpoints"`
	Build     *deploymentUpdatedDeploymentUpdatedDeploymentBuild `json:"build"`
}

// GetId returns deploymentUpdatedDeploymentUpdatedDeployment.Id, and is useful for accessing the field via an interface.
func (v *deploymentUpdatedDeploymentUpdatedDeployment) GetId() uuid.UUID { return v.Id }

// GetStatus returns deploymentUpdatedDeploymentUpdatedDeployment.Status, and is useful for accessing the field via an interface.
func (v *deploymentUpdatedDeploymentUpdatedDeployment) GetStatus() DeploymentStatus { return v.Status }

// GetEndpoints returns deploymentUpdatedDeploymentUpdatedDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *deploymentUpdatedDeploymentUpdatedDeployment) GetEndpoints() []string { return v.Endpoints }

// GetBuild returns deploymentUpdatedDeploymentUpdatedDeployment.Build, and is useful for accessing the field via an interface.
func (v *deploymentUpdatedDeploymentUpdatedDeployment) GetBuild() *deploymentUpdatedDeploymentUpdatedDeploymentBuild {
	return v.Build
}

// deploymentUpdatedDeploymentUpdatedDeploymentBuild includes the requested fields of the GraphQL type Build.
type deploymentUpdatedDeploymentUpdatedDeploymentBuild struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns deploymentUpdatedDeploymentUpdatedDeploymentBuild.Id, and is useful for accessing the field via an interface.
func (v *deploymentUpdatedDeploymentUpdatedDeploymentBuild) GetId() uuid.UUID { return v.Id }

// deploymentUpdatedResponse is returned by deploymentUpdated on success.
type deploymentUpdatedResponse struct {
	DeploymentUpdated deploymentUpdatedDeploymentUpdatedDeployment `json:"deploymentUpdated"`
}

// GetDeploymentUpdated returns deploymentUpdatedResponse.DeploymentUpdated, and is useful for accessing the field via an interface.
func (v *deploymentUpdatedResponse) GetDeploymentUpdated() deploymentUpdatedDeploymentUpdatedDeployment {
	return v.DeploymentUpdated
}

// disableProjectDisableRepo includes the requested fields of the GraphQL type Repo.
type disableProjectDisableRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns disableProjectDisableRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns disableProjectDisableRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns disableProjectDisableRepo.Manifest, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetManifest() *RepoDetailManifest { return v.RepoDetail.Manifest }

// GetAppID returns disableProjectDisableRepo.AppID, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns disableProjectDisableRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns disableProjectDisableRepo.KappID, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns disableProjectDisableRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns disableProjectDisableRepo.Project, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetProject() *RepoDetailProject { return v.RepoDetail.Project }

// GetProductionDeployment returns disableProjectDisableRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns disableProjectDisableRepo.Namespace, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns disableProjectDisableRepo.Envs, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetEnvs() []RepoDetailEnvsEnvVar { return v.RepoDetail.Envs }

// GetCollaborators returns disableProjectDisableRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns disableProjectDisableRepo.Volumes, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns disableProjectDisableRepo.Replication, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns disableProjectDisableRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDeployTarget() *DeployTarget { return v.RepoDetail.DeployTarget }

// GetCluster returns disableProjectDisableRepo.Cluster, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetCluster() *RepoDetailCluster { return v.RepoDetail.Cluster }

// GetAwsAccount returns disableProjectDisableRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns disableProjectDisableRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns disableProjectDisableRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns disableProjectDisableRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns disableProjectDisableRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns disableProjectDisableRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns disableProjectDisableRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetManualDeploy() *bool { return v.RepoDetail.ManualDeploy }

// GetDeployStrategy returns disableProjectDisableRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns disableProjectDisableRepo.Free, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns disableProjectDisableRepo.Cpu, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns disableProjectDisableRepo.Memory, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns disableProjectDisableRepo.Gpu, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetGpu() *RepoDetailGpuGPUSpec { return v.RepoDetail.Gpu }

// GetTpu returns disableProjectDisableRepo.Tpu, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetTpu() *RepoDetailTpuTPUSpec { return v.RepoDetail.Tpu }

// GetEphemeralStorage returns disableProjectDisableRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns disableProjectDisableRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns disableProjectDisableRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns disableProjectDisableRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns disableProjectDisableRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns disableProjectDisableRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns disableProjectDisableRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns disableProjectDisableRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns disableProjectDisableRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns disableProjectDisableRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetHelmValues() *string { return v.RepoDetail.HelmValues }

// GetTerraformVersion returns disableProjectDisableRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns disableProjectDisableRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns disableProjectDisableRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns disableProjectDisableRepo.DeployService, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDeployService() *bool { return v.RepoDetail.DeployService }

// GetDeployJob returns disableProjectDisableRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns disableProjectDisableRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetPreStopSleep() *int { return v.RepoDetail.PreStopSleep }

// GetTerminationGracePeriodSeconds returns disableProjectDisableRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns disableProjectDisableRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns disableProjectDisableRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns disableProjectDisableRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns disableProjectDisableRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns disableProjectDisableRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDatabaseVersion() *string { return v.RepoDetail.DatabaseVersion }

// GetDatabaseEnvs returns disableProjectDisableRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns disableProjectDisableRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns disableProjectDisableRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns disableProjectDisableRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns disableProjectDisableRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetAutoRollback() *bool { return v.RepoDetail.AutoRollback }

// GetCanDeploy returns disableProjectDisableRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns disableProjectDisableRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns disableProjectDisableRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetAwsIamRole() *string { return v.RepoDetail.AwsIamRole }

// GetGcpServiceAccount returns disableProjectDisableRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns disableProjectDisableRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns disableProjectDisableRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns disableProjectDisableRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns disableProjectDisableRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns disableProjectDisableRepo.Id, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetId() uuid.UUID { return v.RepoDetail.RepoCommon.Id }

// GetPath returns disableProjectDisableRepo.Path, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns disableProjectDisableRepo.Name, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns disableProjectDisableRepo.Enabled, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetEnabled() bool { return v.RepoDetail.RepoCommon.Enabled }

// GetSource returns disableProjectDisableRepo.Source, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns disableProjectDisableRepo.DeployType, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns disableProjectDisableRepo.Image, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetImage() *string { return v.RepoDetail.RepoCommon.Image }

// GetUpdatedAt returns disableProjectDisableRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns disableProjectDisableRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns disableProjectDisableRepo.Owner, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns disableProjectDisableRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns disableProjectDisableRepo.Cdns, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns disableProjectDisableRepo.Ports, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns disableProjectDisableRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns disableProjectDisableRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetStaticIP() *bool { return v.RepoDetail.RepoNetwork.StaticIP }

// GetBuildMethod returns disableProjectDisableRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns disableProjectDisableRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns disableProjectDisableRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns disableProjectDisableRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns disableProjectDisableRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns disableProjectDisableRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns disableProjectDisableRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *disableProjectDisableRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *disableProjectDisableRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*disableProjectDisableRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.disableProjectDisableRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldisableProjectDisableRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *disableProjectDisableRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *disableProjectDisableRepo) __premarshalJSON() (*__premarshaldisableProjectDisableRepo, error) {
	var retval __premarshaldisableProjectDisableRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// disableProjectResponse is returned by disableProject on success.
type disableProjectResponse struct {
	DisableRepo disableProjectDisableRepo `json:"disableRepo"`
}

// GetDisableRepo returns disableProjectResponse.DisableRepo, and is useful for accessing the field via an interface.
func (v *disableProjectResponse) GetDisableRepo() disableProjectDisableRepo { return v.DisableRepo }

// dockerInfoCurrentUser includes the requested fields of the GraphQL type User.
type dockerInfoCurrentUser struct {
	Id               uuid.UUID                              `json:"id"`
	DockerRepository *dockerInfoCurrentUserDockerRepository `json:"dockerRepository"`
}

// GetId returns dockerInfoCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *dockerInfoCurrentUser) GetId() uuid.UUID { return v.Id }

// GetDockerRepository returns dockerInfoCurrentUser.DockerRepository, and is useful for accessing the field via an interface.
func (v *dockerInfoCurrentUser) GetDockerRepository() *dockerInfoCurrentUserDockerRepository {
	return v.DockerRepository
}

// dockerInfoCurrentUserDockerRepository includes the requested fields of the GraphQL type DockerRepository.
type dockerInfoCurrentUserDockerRepository struct {
	Id      uuid.UUID                                                `json:"id"`
	Name    string                                                   `json:"name"`
	Url     string                                                   `json:"url"`
	Ports   []dockerInfoCurrentUserDockerRepositoryPortsPort         `json:"ports"`
	Volumes []dockerInfoCurrentUserDockerRepositoryVolumesVolumeSpec `json:"volumes"`
}

// GetId returns dockerInfoCurrentUserDockerRepository.Id, and is useful for accessing the field via an interface.
func (v *dockerInfoCurrentUserDockerRepository) GetId() uuid.UUID { return v.Id }

// GetName returns dockerInfoCurrentUserDockerRepository.Name, and is useful for accessing the field via an interface.
func (v *dockerInfoCurrentUserDockerRepository) GetName() string { return v.Name }

// GetUrl returns dockerInfoCurrentUserDockerRepository.Url, and is useful for accessing the field via an interface.
func (v *dockerInfoCurrentUserDockerRepository) GetUrl() string { return v.Url }

// GetPorts returns dockerInfoCurrentUserDockerRepository.Ports, and is useful for accessing the field via an interface.
func (v *dockerInfoCurrentUserDockerRepository) GetPorts() []dockerInfoCurrentUserDockerRepositoryPortsPort {
	return v.Ports
}

// GetVolumes returns dockerInfoCurrentUserDockerRepository.Volumes, and is useful for accessing the field via an interface.
func (v *dockerInfoCurrentUserDockerRepository) GetVolumes() []dockerInfoCurrentUserDockerRepositoryVolumesVolumeSpec {
	return v.Volumes
}

// dockerInfoCurrentUserDockerRepositoryPortsPort includes the requested fields of the GraphQL type Port.
type dockerInfoCurrentUserDockerRepositoryPortsPort struct {
	Port     string `json:"port"`
	Protocol string `json:"protocol"`
	Public   bool   `json:"public"`
	Https    bool   `json:"https"`
}

// GetPort returns dockerInfoCurrentUserDockerRepositoryPortsPort.Port, and is useful for accessing the field via an interface.
func (v *dockerInfoCurrentUserDockerRepositoryPortsPort) GetPort() string { return v.Port }

// GetProtocol returns dockerInfoCurrentUserDockerRepositoryPortsPort.Protocol, and is useful for accessing the field via an interface.
func (v *dockerInfoCurrentUserDockerRepositoryPortsPort) GetProtocol() string { return v.Protocol }

// GetPublic returns dockerInfoCurrentUserDockerRepositoryPortsPort.Public, and is useful for accessing the field via an interface.
func (v *dockerInfoCurrentUserDockerRepositoryPortsPort) GetPublic() bool { return v.Public }

// GetHttps returns dockerInfoCurrentUserDockerRepositoryPortsPort.Https, and is useful for accessing the field via an interface.
func (v *dockerInfoCurrentUserDockerRepositoryPortsPort) GetHttps() bool { return v.Https }

// dockerInfoCurrentUserDockerRepositoryVolumesVolumeSpec includes the requested fields of the GraphQL type VolumeSpec.
type dockerInfoCurrentUserDockerRepositoryVolumesVolumeSpec struct {
	MountPath string `json:"mountPath"`
	Size      int    `json:"size"`
}

// GetMountPath returns dockerInfoCurrentUserDockerRepositoryVolumesVolumeSpec.MountPath, and is useful for accessing the field via an interface.
func (v *dockerInfoCurrentUserDockerRepositoryVolumesVolumeSpec) GetMountPath() string {
	return v.MountPath
}

// GetSize returns dockerInfoCurrentUserDockerRepositoryVolumesVolumeSpec.Size, and is useful for accessing the field via an interface.
func (v *dockerInfoCurrentUserDockerRepositoryVolumesVolumeSpec) GetSize() int { return v.Size }

// dockerInfoResponse is returned by dockerInfo on success.
type dockerInfoResponse struct {
	CurrentUser dockerInfoCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns dockerInfoResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *dockerInfoResponse) GetCurrentUser() dockerInfoCurrentUser { return v.CurrentUser }

// dockerRepositoryPortsDockerRepository includes the requested fields of the GraphQL type DockerRepository.
type dockerRepositoryPortsDockerRepository struct {
	Id    uuid.UUID                                        `json:"id"`
	Ports []dockerRepositoryPortsDockerRepositoryPortsPort `json:"ports"`
}

// GetId returns dockerRepositoryPortsDockerRepository.Id, and is useful for accessing the field via an interface.
func (v *dockerRepositoryPortsDockerRepository) GetId() uuid.UUID { return v.Id }

// GetPorts returns dockerRepositoryPortsDockerRepository.Ports, and is useful for accessing the field via an interface.
func (v *dockerRepositoryPortsDockerRepository) GetPorts() []dockerRepositoryPortsDockerRepositoryPortsPort {
	return v.Ports
}

// dockerRepositoryPortsDockerRepositoryPortsPort includes the requested fields of the GraphQL type Port.
type dockerRepositoryPortsDockerRepositoryPortsPort struct {
	Port     string `json:"port"`
	Protocol string `json:"protocol"`
	Public   bool   `json:"public"`
	Https    bool   `json:"https"`
}

// GetPort returns dockerRepositoryPortsDockerRepositoryPortsPort.Port, and is useful for accessing the field via an interface.
func (v *dockerRepositoryPortsDockerRepositoryPortsPort) GetPort() string { return v.Port }

// GetProtocol returns dockerRepositoryPortsDockerRepositoryPortsPort.Protocol, and is useful for accessing the field via an interface.
func (v *dockerRepositoryPortsDockerRepositoryPortsPort) GetProtocol() string { return v.Protocol }

// GetPublic returns dockerRepositoryPortsDockerRepositoryPortsPort.Public, and is useful for accessing the field via an interface.
func (v *dockerRepositoryPortsDockerRepositoryPortsPort) GetPublic() bool { return v.Public }

// GetHttps returns dockerRepositoryPortsDockerRepositoryPortsPort.Https, and is useful for accessing the field via an interface.
func (v *dockerRepositoryPortsDockerRepositoryPortsPort) GetHttps() bool { return v.Https }

// dockerRepositoryPortsResponse is returned by dockerRepositoryPorts on success.
type dockerRepositoryPortsResponse struct {
	DockerRepository *dockerRepositoryPortsDockerRepository `json:"dockerRepository"`
}

// GetDockerRepository returns dockerRepositoryPortsResponse.DockerRepository, and is useful for accessing the field via an interface.
func (v *dockerRepositoryPortsResponse) GetDockerRepository() *dockerRepositoryPortsDockerRepository {
	return v.DockerRepository
}

// duplicateBlueprintDuplicateBlueprint includes the requested fields of the GraphQL type Blueprint.
type duplicateBlueprintDuplicateBlueprint struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns duplicateBlueprintDuplicateBlueprint.Id, and is useful for accessing the field via an interface.
func (v *duplicateBlueprintDuplicateBlueprint) GetId() uuid.UUID { return v.Id }

// duplicateBlueprintResponse is returned by duplicateBlueprint on success.
type duplicateBlueprintResponse struct {
	DuplicateBlueprint duplicateBlueprintDuplicateBlueprint `json:"duplicateBlueprint"`
}

// GetDuplicateBlueprint returns duplicateBlueprintResponse.DuplicateBlueprint, and is useful for accessing the field via an interface.
func (v *duplicateBlueprintResponse) GetDuplicateBlueprint() duplicateBlueprintDuplicateBlueprint {
	return v.DuplicateBlueprint
}

// duplicateProjectV3DuplicateProjectV3 includes the requested fields of the GraphQL type ProjectV3.
type duplicateProjectV3DuplicateProjectV3 struct {
	// - v0.ProjectV3ID
	Id                 uuid.UUID                                               `json:"id"`
	Name               string                                                  `json:"name"`
	Project            *duplicateProjectV3DuplicateProjectV3Project            `json:"project"`
	ProjectEnvironment *duplicateProjectV3DuplicateProjectV3ProjectEnvironment `json:"projectEnvironment"`
}

// GetId returns duplicateProjectV3DuplicateProjectV3.Id, and is useful for accessing the field via an interface.
func (v *duplicateProjectV3DuplicateProjectV3) GetId() uuid.UUID { return v.Id }

// GetName returns duplicateProjectV3DuplicateProjectV3.Name, and is useful for accessing the field via an interface.
func (v *duplicateProjectV3DuplicateProjectV3) GetName() string { return v.Name }

// GetProject returns duplicateProjectV3DuplicateProjectV3.Project, and is useful for accessing the field via an interface.
func (v *duplicateProjectV3DuplicateProjectV3) GetProject() *duplicateProjectV3DuplicateProjectV3Project {
	return v.Project
}

// GetProjectEnvironment returns duplicateProjectV3DuplicateProjectV3.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *duplicateProjectV3DuplicateProjectV3) GetProjectEnvironment() *duplicateProjectV3DuplicateProjectV3ProjectEnvironment {
	return v.ProjectEnvironment
}

// duplicateProjectV3DuplicateProjectV3Project includes the requested fields of the GraphQL type Project.
type duplicateProjectV3DuplicateProjectV3Project struct {
	Name string `json:"name"`
}

// GetName returns duplicateProjectV3DuplicateProjectV3Project.Name, and is useful for accessing the field via an interface.
func (v *duplicateProjectV3DuplicateProjectV3Project) GetName() string { return v.Name }

// duplicateProjectV3DuplicateProjectV3ProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type duplicateProjectV3DuplicateProjectV3ProjectEnvironment struct {
	Name string `json:"name"`
}

// GetName returns duplicateProjectV3DuplicateProjectV3ProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *duplicateProjectV3DuplicateProjectV3ProjectEnvironment) GetName() string { return v.Name }

// duplicateProjectV3Response is returned by duplicateProjectV3 on success.
type duplicateProjectV3Response struct {
	DuplicateProjectV3 duplicateProjectV3DuplicateProjectV3 `json:"duplicateProjectV3"`
}

// GetDuplicateProjectV3 returns duplicateProjectV3Response.DuplicateProjectV3, and is useful for accessing the field via an interface.
func (v *duplicateProjectV3Response) GetDuplicateProjectV3() duplicateProjectV3DuplicateProjectV3 {
	return v.DuplicateProjectV3
}

// enableProjectEnableRepo includes the requested fields of the GraphQL type Repo.
type enableProjectEnableRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns enableProjectEnableRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns enableProjectEnableRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns enableProjectEnableRepo.Manifest, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetManifest() *RepoDetailManifest { return v.RepoDetail.Manifest }

// GetAppID returns enableProjectEnableRepo.AppID, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns enableProjectEnableRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns enableProjectEnableRepo.KappID, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns enableProjectEnableRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns enableProjectEnableRepo.Project, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetProject() *RepoDetailProject { return v.RepoDetail.Project }

// GetProductionDeployment returns enableProjectEnableRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns enableProjectEnableRepo.Namespace, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns enableProjectEnableRepo.Envs, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetEnvs() []RepoDetailEnvsEnvVar { return v.RepoDetail.Envs }

// GetCollaborators returns enableProjectEnableRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns enableProjectEnableRepo.Volumes, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns enableProjectEnableRepo.Replication, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns enableProjectEnableRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDeployTarget() *DeployTarget { return v.RepoDetail.DeployTarget }

// GetCluster returns enableProjectEnableRepo.Cluster, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetCluster() *RepoDetailCluster { return v.RepoDetail.Cluster }

// GetAwsAccount returns enableProjectEnableRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns enableProjectEnableRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns enableProjectEnableRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns enableProjectEnableRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns enableProjectEnableRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns enableProjectEnableRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns enableProjectEnableRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetManualDeploy() *bool { return v.RepoDetail.ManualDeploy }

// GetDeployStrategy returns enableProjectEnableRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns enableProjectEnableRepo.Free, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns enableProjectEnableRepo.Cpu, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns enableProjectEnableRepo.Memory, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns enableProjectEnableRepo.Gpu, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetGpu() *RepoDetailGpuGPUSpec { return v.RepoDetail.Gpu }

// GetTpu returns enableProjectEnableRepo.Tpu, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetTpu() *RepoDetailTpuTPUSpec { return v.RepoDetail.Tpu }

// GetEphemeralStorage returns enableProjectEnableRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns enableProjectEnableRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns enableProjectEnableRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns enableProjectEnableRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns enableProjectEnableRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetProductionBranch() *string { return v.RepoDetail.ProductionBranch }

// GetBranchResources returns enableProjectEnableRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns enableProjectEnableRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns enableProjectEnableRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetServerlessRegion() *string { return v.RepoDetail.ServerlessRegion }

// GetPrometheusScrape returns enableProjectEnableRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns enableProjectEnableRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetHelmValues() *string { return v.RepoDetail.HelmValues }

// GetTerraformVersion returns enableProjectEnableRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetTerraformVersion() *string { return v.RepoDetail.TerraformVersion }

// GetTerraformVariables returns enableProjectEnableRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns enableProjectEnableRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns enableProjectEnableRepo.DeployService, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDeployService() *bool { return v.RepoDetail.DeployService }

// GetDeployJob returns enableProjectEnableRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns enableProjectEnableRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetPreStopSleep() *int { return v.RepoDetail.PreStopSleep }

// GetTerminationGracePeriodSeconds returns enableProjectEnableRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns enableProjectEnableRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns enableProjectEnableRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns enableProjectEnableRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns enableProjectEnableRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns enableProjectEnableRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDatabaseVersion() *string { return v.RepoDetail.DatabaseVersion }

// GetDatabaseEnvs returns enableProjectEnableRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns enableProjectEnableRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns enableProjectEnableRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns enableProjectEnableRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns enableProjectEnableRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetAutoRollback() *bool { return v.RepoDetail.AutoRollback }

// GetCanDeploy returns enableProjectEnableRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns enableProjectEnableRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns enableProjectEnableRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetAwsIamRole() *string { return v.RepoDetail.AwsIamRole }

// GetGcpServiceAccount returns enableProjectEnableRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns enableProjectEnableRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDatadogApmEnabled() *bool { return v.RepoDetail.DatadogApmEnabled }

// GetProjectEnvironment returns enableProjectEnableRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns enableProjectEnableRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns enableProjectEnableRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns enableProjectEnableRepo.Id, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetId() uuid.UUID { return v.RepoDetail.RepoCommon.Id }

// GetPath returns enableProjectEnableRepo.Path, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns enableProjectEnableRepo.Name, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns enableProjectEnableRepo.Enabled, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetEnabled() bool { return v.RepoDetail.RepoCommon.Enabled }

// GetSource returns enableProjectEnableRepo.Source, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns enableProjectEnableRepo.DeployType, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns enableProjectEnableRepo.Image, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetImage() *string { return v.RepoDetail.RepoCommon.Image }

// GetUpdatedAt returns enableProjectEnableRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetUpdatedAt() time.Time { return v.RepoDetail.RepoCommon.UpdatedAt }

// GetDisableReason returns enableProjectEnableRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns enableProjectEnableRepo.Owner, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns enableProjectEnableRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns enableProjectEnableRepo.Cdns, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns enableProjectEnableRepo.Ports, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns enableProjectEnableRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetHostNetwork() *bool { return v.RepoDetail.RepoNetwork.HostNetwork }

// GetStaticIP returns enableProjectEnableRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetStaticIP() *bool { return v.RepoDetail.RepoNetwork.StaticIP }

// GetBuildMethod returns enableProjectEnableRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns enableProjectEnableRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns enableProjectEnableRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns enableProjectEnableRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetNoBuildCache() *bool { return v.RepoDetail.RepoBuild.NoBuildCache }

// GetGitSubmodules returns enableProjectEnableRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns enableProjectEnableRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns enableProjectEnableRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *enableProjectEnableRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *enableProjectEnableRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*enableProjectEnableRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.enableProjectEnableRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalenableProjectEnableRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *enableProjectEnableRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *enableProjectEnableRepo) __premarshalJSON() (*__premarshalenableProjectEnableRepo, error) {
	var retval __premarshalenableProjectEnableRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// enableProjectResponse is returned by enableProject on success.
type enableProjectResponse struct {
	EnableRepo enableProjectEnableRepo `json:"enableRepo"`
}

// GetEnableRepo returns enableProjectResponse.EnableRepo, and is useful for accessing the field via an interface.
func (v *enableProjectResponse) GetEnableRepo() enableProjectEnableRepo { return v.EnableRepo }

// ensureCloudqueryEnabledResponse is returned by ensureCloudqueryEnabled on success.
type ensureCloudqueryEnabledResponse struct {
	EnsureCloudqueryEnabled bool `json:"ensureCloudqueryEnabled"`
}

// GetEnsureCloudqueryEnabled returns ensureCloudqueryEnabledResponse.EnsureCloudqueryEnabled, and is useful for accessing the field via an interface.
func (v *ensureCloudqueryEnabledResponse) GetEnsureCloudqueryEnabled() bool {
	return v.EnsureCloudqueryEnabled
}

// environmentEnvironmentVariablesProject includes the requested fields of the GraphQL type Project.
type environmentEnvironmentVariablesProject struct {
	// - v0.ProjectID or v1.GroupID
	Id   uuid.UUID                                          `json:"id"`
	Envs []environmentEnvironmentVariablesProjectEnvsEnvVar `json:"envs"`
	// - id: v0.EnvironmentID or v1.SubGroupID
	Environment environmentEnvironmentVariablesProjectEnvironment `json:"environment"`
}

// GetId returns environmentEnvironmentVariablesProject.Id, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProject) GetId() uuid.UUID { return v.Id }

// GetEnvs returns environmentEnvironmentVariablesProject.Envs, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProject) GetEnvs() []environmentEnvironmentVariablesProjectEnvsEnvVar {
	return v.Envs
}

// GetEnvironment returns environmentEnvironmentVariablesProject.Environment, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProject) GetEnvironment() environmentEnvironmentVariablesProjectEnvironment {
	return v.Environment
}

// environmentEnvironmentVariablesProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type environmentEnvironmentVariablesProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id   uuid.UUID                                                     `json:"id"`
	Envs []environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar `json:"envs"`
}

// GetId returns environmentEnvironmentVariablesProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetEnvs returns environmentEnvironmentVariablesProjectEnvironment.Envs, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvironment) GetEnvs() []environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar {
	return v.Envs
}

// environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar struct {
	EnvVarDetail `json:"-"`
}

// GetId returns environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar) GetId() uuid.UUID {
	return v.EnvVarDetail.Id
}

// GetName returns environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar) GetName() string {
	return v.EnvVarDetail.Name
}

// GetValue returns environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar) GetValue() string {
	return v.EnvVarDetail.Value
}

// GetVisible returns environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar) GetVisible() bool {
	return v.EnvVarDetail.Visible
}

// GetSealed returns environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar) GetSealed() bool {
	return v.EnvVarDetail.Sealed
}

// GetSource returns environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar.Source, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar) GetSource() *EnvVarDetailSourceEnvVarSource {
	return v.EnvVarDetail.Source
}

func (v *environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar
		graphql.NoUnmarshalJSON
	}
	firstPass.environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvVarDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalenvironmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Value string `json:"value"`

	Visible bool `json:"visible"`

	Sealed bool `json:"sealed"`

	Source *EnvVarDetailSourceEnvVarSource `json:"source"`
}

func (v *environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *environmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar) __premarshalJSON() (*__premarshalenvironmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar, error) {
	var retval __premarshalenvironmentEnvironmentVariablesProjectEnvironmentEnvsEnvVar

	retval.Id = v.EnvVarDetail.Id
	retval.Name = v.EnvVarDetail.Name
	retval.Value = v.EnvVarDetail.Value
	retval.Visible = v.EnvVarDetail.Visible
	retval.Sealed = v.EnvVarDetail.Sealed
	retval.Source = v.EnvVarDetail.Source
	return &retval, nil
}

// environmentEnvironmentVariablesProjectEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type environmentEnvironmentVariablesProjectEnvsEnvVar struct {
	EnvVarDetail `json:"-"`
}

// GetId returns environmentEnvironmentVariablesProjectEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvsEnvVar) GetId() uuid.UUID {
	return v.EnvVarDetail.Id
}

// GetName returns environmentEnvironmentVariablesProjectEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvsEnvVar) GetName() string {
	return v.EnvVarDetail.Name
}

// GetValue returns environmentEnvironmentVariablesProjectEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvsEnvVar) GetValue() string {
	return v.EnvVarDetail.Value
}

// GetVisible returns environmentEnvironmentVariablesProjectEnvsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvsEnvVar) GetVisible() bool {
	return v.EnvVarDetail.Visible
}

// GetSealed returns environmentEnvironmentVariablesProjectEnvsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvsEnvVar) GetSealed() bool {
	return v.EnvVarDetail.Sealed
}

// GetSource returns environmentEnvironmentVariablesProjectEnvsEnvVar.Source, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesProjectEnvsEnvVar) GetSource() *EnvVarDetailSourceEnvVarSource {
	return v.EnvVarDetail.Source
}

func (v *environmentEnvironmentVariablesProjectEnvsEnvVar) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*environmentEnvironmentVariablesProjectEnvsEnvVar
		graphql.NoUnmarshalJSON
	}
	firstPass.environmentEnvironmentVariablesProjectEnvsEnvVar = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvVarDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalenvironmentEnvironmentVariablesProjectEnvsEnvVar struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Value string `json:"value"`

	Visible bool `json:"visible"`

	Sealed bool `json:"sealed"`

	Source *EnvVarDetailSourceEnvVarSource `json:"source"`
}

func (v *environmentEnvironmentVariablesProjectEnvsEnvVar) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *environmentEnvironmentVariablesProjectEnvsEnvVar) __premarshalJSON() (*__premarshalenvironmentEnvironmentVariablesProjectEnvsEnvVar, error) {
	var retval __premarshalenvironmentEnvironmentVariablesProjectEnvsEnvVar

	retval.Id = v.EnvVarDetail.Id
	retval.Name = v.EnvVarDetail.Name
	retval.Value = v.EnvVarDetail.Value
	retval.Visible = v.EnvVarDetail.Visible
	retval.Sealed = v.EnvVarDetail.Sealed
	retval.Source = v.EnvVarDetail.Source
	return &retval, nil
}

// environmentEnvironmentVariablesResponse is returned by environmentEnvironmentVariables on success.
type environmentEnvironmentVariablesResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *environmentEnvironmentVariablesProject `json:"project"`
}

// GetProject returns environmentEnvironmentVariablesResponse.Project, and is useful for accessing the field via an interface.
func (v *environmentEnvironmentVariablesResponse) GetProject() *environmentEnvironmentVariablesProject {
	return v.Project
}

// freeQuotaResponse is returned by freeQuota on success.
type freeQuotaResponse struct {
	User freeQuotaUser `json:"user"`
}

// GetUser returns freeQuotaResponse.User, and is useful for accessing the field via an interface.
func (v *freeQuotaResponse) GetUser() freeQuotaUser { return v.User }

// freeQuotaUser includes the requested fields of the GraphQL type User.
type freeQuotaUser struct {
	Id        uuid.UUID `json:"id"`
	FreeQuota *int      `json:"freeQuota"`
}

// GetId returns freeQuotaUser.Id, and is useful for accessing the field via an interface.
func (v *freeQuotaUser) GetId() uuid.UUID { return v.Id }

// GetFreeQuota returns freeQuotaUser.FreeQuota, and is useful for accessing the field via an interface.
func (v *freeQuotaUser) GetFreeQuota() *int { return v.FreeQuota }

// freeTierEligibleCheckPriceCheckPriceOutput includes the requested fields of the GraphQL type CheckPriceOutput.
type freeTierEligibleCheckPriceCheckPriceOutput struct {
	CanBeFreeTier bool `json:"canBeFreeTier"`
}

// GetCanBeFreeTier returns freeTierEligibleCheckPriceCheckPriceOutput.CanBeFreeTier, and is useful for accessing the field via an interface.
func (v *freeTierEligibleCheckPriceCheckPriceOutput) GetCanBeFreeTier() bool { return v.CanBeFreeTier }

// freeTierEligibleCurrentUser includes the requested fields of the GraphQL type User.
type freeTierEligibleCurrentUser struct {
	Id        uuid.UUID `json:"id"`
	FreeQuota *int      `json:"freeQuota"`
}

// GetId returns freeTierEligibleCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *freeTierEligibleCurrentUser) GetId() uuid.UUID { return v.Id }

// GetFreeQuota returns freeTierEligibleCurrentUser.FreeQuota, and is useful for accessing the field via an interface.
func (v *freeTierEligibleCurrentUser) GetFreeQuota() *int { return v.FreeQuota }

// freeTierEligibleResponse is returned by freeTierEligible on success.
type freeTierEligibleResponse struct {
	CheckPrice  freeTierEligibleCheckPriceCheckPriceOutput `json:"checkPrice"`
	CurrentUser freeTierEligibleCurrentUser                `json:"currentUser"`
}

// GetCheckPrice returns freeTierEligibleResponse.CheckPrice, and is useful for accessing the field via an interface.
func (v *freeTierEligibleResponse) GetCheckPrice() freeTierEligibleCheckPriceCheckPriceOutput {
	return v.CheckPrice
}

// GetCurrentUser returns freeTierEligibleResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *freeTierEligibleResponse) GetCurrentUser() freeTierEligibleCurrentUser { return v.CurrentUser }

// generateDownloadableLogLinkResponse is returned by generateDownloadableLogLink on success.
type generateDownloadableLogLinkResponse struct {
	GenerateDownloadableLogLink string `json:"generateDownloadableLogLink"`
}

// GetGenerateDownloadableLogLink returns generateDownloadableLogLinkResponse.GenerateDownloadableLogLink, and is useful for accessing the field via an interface.
func (v *generateDownloadableLogLinkResponse) GetGenerateDownloadableLogLink() string {
	return v.GenerateDownloadableLogLink
}

// getPriceTotalCheckPriceCheckPriceOutput includes the requested fields of the GraphQL type CheckPriceOutput.
type getPriceTotalCheckPriceCheckPriceOutput struct {
	Total    getPriceTotalCheckPriceCheckPriceOutputTotalPriceComponent    `json:"total"`
	SubTotal getPriceTotalCheckPriceCheckPriceOutputSubTotalPriceComponent `json:"subTotal"`
}

// GetTotal returns getPriceTotalCheckPriceCheckPriceOutput.Total, and is useful for accessing the field via an interface.
func (v *getPriceTotalCheckPriceCheckPriceOutput) GetTotal() getPriceTotalCheckPriceCheckPriceOutputTotalPriceComponent {
	return v.Total
}

// GetSubTotal returns getPriceTotalCheckPriceCheckPriceOutput.SubTotal, and is useful for accessing the field via an interface.
func (v *getPriceTotalCheckPriceCheckPriceOutput) GetSubTotal() getPriceTotalCheckPriceCheckPriceOutputSubTotalPriceComponent {
	return v.SubTotal
}

// getPriceTotalCheckPriceCheckPriceOutputSubTotalPriceComponent includes the requested fields of the GraphQL type PriceComponent.
type getPriceTotalCheckPriceCheckPriceOutputSubTotalPriceComponent struct {
	Explanation string `json:"explanation"`
	Cost        int    `json:"cost"`
}

// GetExplanation returns getPriceTotalCheckPriceCheckPriceOutputSubTotalPriceComponent.Explanation, and is useful for accessing the field via an interface.
func (v *getPriceTotalCheckPriceCheckPriceOutputSubTotalPriceComponent) GetExplanation() string {
	return v.Explanation
}

// GetCost returns getPriceTotalCheckPriceCheckPriceOutputSubTotalPriceComponent.Cost, and is useful for accessing the field via an interface.
func (v *getPriceTotalCheckPriceCheckPriceOutputSubTotalPriceComponent) GetCost() int { return v.Cost }

// getPriceTotalCheckPriceCheckPriceOutputTotalPriceComponent includes the requested fields of the GraphQL type PriceComponent.
type getPriceTotalCheckPriceCheckPriceOutputTotalPriceComponent struct {
	Explanation string `json:"explanation"`
	Cost        int    `json:"cost"`
}

// GetExplanation returns getPriceTotalCheckPriceCheckPriceOutputTotalPriceComponent.Explanation, and is useful for accessing the field via an interface.
func (v *getPriceTotalCheckPriceCheckPriceOutputTotalPriceComponent) GetExplanation() string {
	return v.Explanation
}

// GetCost returns getPriceTotalCheckPriceCheckPriceOutputTotalPriceComponent.Cost, and is useful for accessing the field via an interface.
func (v *getPriceTotalCheckPriceCheckPriceOutputTotalPriceComponent) GetCost() int { return v.Cost }

// getPriceTotalResponse is returned by getPriceTotal on success.
type getPriceTotalResponse struct {
	CheckPrice getPriceTotalCheckPriceCheckPriceOutput `json:"checkPrice"`
}

// GetCheckPrice returns getPriceTotalResponse.CheckPrice, and is useful for accessing the field via an interface.
func (v *getPriceTotalResponse) GetCheckPrice() getPriceTotalCheckPriceCheckPriceOutput {
	return v.CheckPrice
}

// githubRepoPortCurrentUser includes the requested fields of the GraphQL type User.
type githubRepoPortCurrentUser struct {
	Id               uuid.UUID                                                  `json:"id"`
	GithubRepository *githubRepoPortCurrentUserGithubRepositoryGitHubRepository `json:"githubRepository"`
}

// GetId returns githubRepoPortCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *githubRepoPortCurrentUser) GetId() uuid.UUID { return v.Id }

// GetGithubRepository returns githubRepoPortCurrentUser.GithubRepository, and is useful for accessing the field via an interface.
func (v *githubRepoPortCurrentUser) GetGithubRepository() *githubRepoPortCurrentUserGithubRepositoryGitHubRepository {
	return v.GithubRepository
}

// githubRepoPortCurrentUserGithubRepositoryGitHubRepository includes the requested fields of the GraphQL type GitHubRepository.
type githubRepoPortCurrentUserGithubRepositoryGitHubRepository struct {
	Id    uuid.UUID                                                            `json:"id"`
	Ports []githubRepoPortCurrentUserGithubRepositoryGitHubRepositoryPortsPort `json:"ports"`
}

// GetId returns githubRepoPortCurrentUserGithubRepositoryGitHubRepository.Id, and is useful for accessing the field via an interface.
func (v *githubRepoPortCurrentUserGithubRepositoryGitHubRepository) GetId() uuid.UUID { return v.Id }

// GetPorts returns githubRepoPortCurrentUserGithubRepositoryGitHubRepository.Ports, and is useful for accessing the field via an interface.
func (v *githubRepoPortCurrentUserGithubRepositoryGitHubRepository) GetPorts() []githubRepoPortCurrentUserGithubRepositoryGitHubRepositoryPortsPort {
	return v.Ports
}

// githubRepoPortCurrentUserGithubRepositoryGitHubRepositoryPortsPort includes the requested fields of the GraphQL type Port.
type githubRepoPortCurrentUserGithubRepositoryGitHubRepositoryPortsPort struct {
	Https    bool   `json:"https"`
	Port     string `json:"port"`
	Protocol string `json:"protocol"`
	Public   bool   `json:"public"`
}

// GetHttps returns githubRepoPortCurrentUserGithubRepositoryGitHubRepositoryPortsPort.Https, and is useful for accessing the field via an interface.
func (v *githubRepoPortCurrentUserGithubRepositoryGitHubRepositoryPortsPort) GetHttps() bool {
	return v.Https
}

// GetPort returns githubRepoPortCurrentUserGithubRepositoryGitHubRepositoryPortsPort.Port, and is useful for accessing the field via an interface.
func (v *githubRepoPortCurrentUserGithubRepositoryGitHubRepositoryPortsPort) GetPort() string {
	return v.Port
}

// GetProtocol returns githubRepoPortCurrentUserGithubRepositoryGitHubRepositoryPortsPort.Protocol, and is useful for accessing the field via an interface.
func (v *githubRepoPortCurrentUserGithubRepositoryGitHubRepositoryPortsPort) GetProtocol() string {
	return v.Protocol
}

// GetPublic returns githubRepoPortCurrentUserGithubRepositoryGitHubRepositoryPortsPort.Public, and is useful for accessing the field via an interface.
func (v *githubRepoPortCurrentUserGithubRepositoryGitHubRepositoryPortsPort) GetPublic() bool {
	return v.Public
}

// githubRepoPortResponse is returned by githubRepoPort on success.
type githubRepoPortResponse struct {
	CurrentUser githubRepoPortCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns githubRepoPortResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *githubRepoPortResponse) GetCurrentUser() githubRepoPortCurrentUser { return v.CurrentUser }

// helmChartHelmRepository includes the requested fields of the GraphQL type HelmRepository.
type helmChartHelmRepository struct {
	Id    string                                `json:"id"`
	Chart helmChartHelmRepositoryChartHelmChart `json:"chart"`
}

// GetId returns helmChartHelmRepository.Id, and is useful for accessing the field via an interface.
func (v *helmChartHelmRepository) GetId() string { return v.Id }

// GetChart returns helmChartHelmRepository.Chart, and is useful for accessing the field via an interface.
func (v *helmChartHelmRepository) GetChart() helmChartHelmRepositoryChartHelmChart { return v.Chart }

// helmChartHelmRepositoryChartHelmChart includes the requested fields of the GraphQL type HelmChart.
type helmChartHelmRepositoryChartHelmChart struct {
	Id         string `json:"id"`
	HelmCommon `json:"-"`
}

// GetId returns helmChartHelmRepositoryChartHelmChart.Id, and is useful for accessing the field via an interface.
func (v *helmChartHelmRepositoryChartHelmChart) GetId() string { return v.Id }

// GetName returns helmChartHelmRepositoryChartHelmChart.Name, and is useful for accessing the field via an interface.
func (v *helmChartHelmRepositoryChartHelmChart) GetName() *string { return v.HelmCommon.Name }

// GetDescription returns helmChartHelmRepositoryChartHelmChart.Description, and is useful for accessing the field via an interface.
func (v *helmChartHelmRepositoryChartHelmChart) GetDescription() *string {
	return v.HelmCommon.Description
}

// GetLogoImage returns helmChartHelmRepositoryChartHelmChart.LogoImage, and is useful for accessing the field via an interface.
func (v *helmChartHelmRepositoryChartHelmChart) GetLogoImage() *string { return v.HelmCommon.LogoImage }

// GetVersion returns helmChartHelmRepositoryChartHelmChart.Version, and is useful for accessing the field via an interface.
func (v *helmChartHelmRepositoryChartHelmChart) GetVersion() *string { return v.HelmCommon.Version }

// GetApp_version returns helmChartHelmRepositoryChartHelmChart.App_version, and is useful for accessing the field via an interface.
func (v *helmChartHelmRepositoryChartHelmChart) GetApp_version() *string {
	return v.HelmCommon.App_version
}

// GetRepository returns helmChartHelmRepositoryChartHelmChart.Repository, and is useful for accessing the field via an interface.
func (v *helmChartHelmRepositoryChartHelmChart) GetRepository() HelmCommonRepositoryHelmRepository {
	return v.HelmCommon.Repository
}

func (v *helmChartHelmRepositoryChartHelmChart) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*helmChartHelmRepositoryChartHelmChart
		graphql.NoUnmarshalJSON
	}
	firstPass.helmChartHelmRepositoryChartHelmChart = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.HelmCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalhelmChartHelmRepositoryChartHelmChart struct {
	Id string `json:"id"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	LogoImage *string `json:"logoImage"`

	Version *string `json:"version"`

	App_version *string `json:"app_version"`

	Repository HelmCommonRepositoryHelmRepository `json:"repository"`
}

func (v *helmChartHelmRepositoryChartHelmChart) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *helmChartHelmRepositoryChartHelmChart) __premarshalJSON() (*__premarshalhelmChartHelmRepositoryChartHelmChart, error) {
	var retval __premarshalhelmChartHelmRepositoryChartHelmChart

	retval.Id = v.Id
	retval.Name = v.HelmCommon.Name
	retval.Description = v.HelmCommon.Description
	retval.LogoImage = v.HelmCommon.LogoImage
	retval.Version = v.HelmCommon.Version
	retval.App_version = v.HelmCommon.App_version
	retval.Repository = v.HelmCommon.Repository
	return &retval, nil
}

// helmChartResponse is returned by helmChart on success.
type helmChartResponse struct {
	HelmRepository helmChartHelmRepository `json:"helmRepository"`
}

// GetHelmRepository returns helmChartResponse.HelmRepository, and is useful for accessing the field via an interface.
func (v *helmChartResponse) GetHelmRepository() helmChartHelmRepository { return v.HelmRepository }

// inviteTeamMemberInviteTeamMemberTeamMemberInvitation includes the requested fields of the GraphQL type TeamMemberInvitation.
type inviteTeamMemberInviteTeamMemberTeamMemberInvitation struct {
	Id         uuid.UUID `json:"id"`
	TeamInvite `json:"-"`
}

// GetId returns inviteTeamMemberInviteTeamMemberTeamMemberInvitation.Id, and is useful for accessing the field via an interface.
func (v *inviteTeamMemberInviteTeamMemberTeamMemberInvitation) GetId() uuid.UUID { return v.Id }

// GetRole returns inviteTeamMemberInviteTeamMemberTeamMemberInvitation.Role, and is useful for accessing the field via an interface.
func (v *inviteTeamMemberInviteTeamMemberTeamMemberInvitation) GetRole() TeamMemberRole {
	return v.TeamInvite.Role
}

// GetLink returns inviteTeamMemberInviteTeamMemberTeamMemberInvitation.Link, and is useful for accessing the field via an interface.
func (v *inviteTeamMemberInviteTeamMemberTeamMemberInvitation) GetLink() string {
	return v.TeamInvite.Link
}

// GetEmail returns inviteTeamMemberInviteTeamMemberTeamMemberInvitation.Email, and is useful for accessing the field via an interface.
func (v *inviteTeamMemberInviteTeamMemberTeamMemberInvitation) GetEmail() *string {
	return v.TeamInvite.Email
}

// GetExpiresAt returns inviteTeamMemberInviteTeamMemberTeamMemberInvitation.ExpiresAt, and is useful for accessing the field via an interface.
func (v *inviteTeamMemberInviteTeamMemberTeamMemberInvitation) GetExpiresAt() *time.Time {
	return v.TeamInvite.ExpiresAt
}

// GetCreatedAt returns inviteTeamMemberInviteTeamMemberTeamMemberInvitation.CreatedAt, and is useful for accessing the field via an interface.
func (v *inviteTeamMemberInviteTeamMemberTeamMemberInvitation) GetCreatedAt() time.Time {
	return v.TeamInvite.CreatedAt
}

func (v *inviteTeamMemberInviteTeamMemberTeamMemberInvitation) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*inviteTeamMemberInviteTeamMemberTeamMemberInvitation
		graphql.NoUnmarshalJSON
	}
	firstPass.inviteTeamMemberInviteTeamMemberTeamMemberInvitation = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamInvite)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalinviteTeamMemberInviteTeamMemberTeamMemberInvitation struct {
	Id uuid.UUID `json:"id"`

	Role TeamMemberRole `json:"role"`

	Link string `json:"link"`

	Email *string `json:"email"`

	ExpiresAt *time.Time `json:"expiresAt"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *inviteTeamMemberInviteTeamMemberTeamMemberInvitation) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *inviteTeamMemberInviteTeamMemberTeamMemberInvitation) __premarshalJSON() (*__premarshalinviteTeamMemberInviteTeamMemberTeamMemberInvitation, error) {
	var retval __premarshalinviteTeamMemberInviteTeamMemberTeamMemberInvitation

	retval.Id = v.Id
	retval.Role = v.TeamInvite.Role
	retval.Link = v.TeamInvite.Link
	retval.Email = v.TeamInvite.Email
	retval.ExpiresAt = v.TeamInvite.ExpiresAt
	retval.CreatedAt = v.TeamInvite.CreatedAt
	return &retval, nil
}

// inviteTeamMemberResponse is returned by inviteTeamMember on success.
type inviteTeamMemberResponse struct {
	InviteTeamMember inviteTeamMemberInviteTeamMemberTeamMemberInvitation `json:"inviteTeamMember"`
}

// GetInviteTeamMember returns inviteTeamMemberResponse.InviteTeamMember, and is useful for accessing the field via an interface.
func (v *inviteTeamMemberResponse) GetInviteTeamMember() inviteTeamMemberInviteTeamMemberTeamMemberInvitation {
	return v.InviteTeamMember
}

// lambdaCloudRunBlueprintsBlueprintsMarketplace includes the requested fields of the GraphQL type BlueprintsMarketplace.
type lambdaCloudRunBlueprintsBlueprintsMarketplace struct {
	LambdaBlueprint   *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint   `json:"lambdaBlueprint"`
	CloudRunBlueprint *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint `json:"cloudRunBlueprint"`
}

// GetLambdaBlueprint returns lambdaCloudRunBlueprintsBlueprintsMarketplace.LambdaBlueprint, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplace) GetLambdaBlueprint() *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint {
	return v.LambdaBlueprint
}

// GetCloudRunBlueprint returns lambdaCloudRunBlueprintsBlueprintsMarketplace.CloudRunBlueprint, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplace) GetCloudRunBlueprint() *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint {
	return v.CloudRunBlueprint
}

// lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint includes the requested fields of the GraphQL type Blueprint.
type lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint struct {
	BlueprintList `json:"-"`
}

// GetId returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.Id, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetId() uuid.UUID {
	return v.BlueprintList.Id
}

// GetDescription returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.Description, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetDescription() *string {
	return v.BlueprintList.Description
}

// GetDisplayName returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.DisplayName, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetDisplayName() string {
	return v.BlueprintList.DisplayName
}

// GetIsOfficial returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.IsOfficial, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetIsOfficial() *bool {
	return v.BlueprintList.IsOfficial
}

// GetLogoUrl returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.LogoUrl, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetLogoUrl() *string {
	return v.BlueprintList.LogoUrl
}

// GetEnabled returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.Enabled, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetEnabled() *bool {
	return v.BlueprintList.Enabled
}

// GetPublished returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.Published, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetPublished() bool {
	return v.BlueprintList.Published
}

// GetProjectCount returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.ProjectCount, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetProjectCount() int {
	return v.BlueprintList.ProjectCount
}

// GetRichInputSchema returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.RichInputSchema, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetRichInputSchema() *string {
	return v.BlueprintList.RichInputSchema
}

// GetAllowedCloudProviders returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.AllowedCloudProviders, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetAllowedCloudProviders() []CloudProvider {
	return v.BlueprintList.AllowedCloudProviders
}

// GetSlug returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.Slug, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetSlug() string {
	return v.BlueprintList.Slug
}

// GetTags returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.Tags, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetTags() []string {
	return v.BlueprintList.Tags
}

// GetType returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.Type, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetType() BlueprintType {
	return v.BlueprintList.Type
}

// GetConfiguration returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetConfiguration() *BlueprintListConfigurationBlueprintConfiguration {
	return v.BlueprintList.Configuration
}

// GetOwner returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.Owner, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetOwner() *BlueprintListOwnerBlueprintOwner {
	return v.BlueprintList.Owner
}

// GetVariables returns lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.Variables, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) GetVariables() []BlueprintListVariablesBlueprintVariableSpec {
	return v.BlueprintList.Variables
}

func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint
		graphql.NoUnmarshalJSON
	}
	firstPass.lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint struct {
	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	DisplayName string `json:"displayName"`

	IsOfficial *bool `json:"isOfficial"`

	LogoUrl *string `json:"logoUrl"`

	Enabled *bool `json:"enabled"`

	Published bool `json:"published"`

	ProjectCount int `json:"projectCount"`

	RichInputSchema *string `json:"richInputSchema"`

	AllowedCloudProviders []CloudProvider `json:"allowedCloudProviders"`

	Slug string `json:"slug"`

	Tags []string `json:"tags"`

	Type BlueprintType `json:"type"`

	Configuration json.RawMessage `json:"configuration"`

	Owner *BlueprintListOwnerBlueprintOwner `json:"owner"`

	Variables []BlueprintListVariablesBlueprintVariableSpec `json:"variables"`
}

func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint) __premarshalJSON() (*__premarshallambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint, error) {
	var retval __premarshallambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint

	retval.Id = v.BlueprintList.Id
	retval.Description = v.BlueprintList.Description
	retval.DisplayName = v.BlueprintList.DisplayName
	retval.IsOfficial = v.BlueprintList.IsOfficial
	retval.LogoUrl = v.BlueprintList.LogoUrl
	retval.Enabled = v.BlueprintList.Enabled
	retval.Published = v.BlueprintList.Published
	retval.ProjectCount = v.BlueprintList.ProjectCount
	retval.RichInputSchema = v.BlueprintList.RichInputSchema
	retval.AllowedCloudProviders = v.BlueprintList.AllowedCloudProviders
	retval.Slug = v.BlueprintList.Slug
	retval.Tags = v.BlueprintList.Tags
	retval.Type = v.BlueprintList.Type
	{

		dst := &retval.Configuration
		src := v.BlueprintList.Configuration
		if src != nil {
			var err error
			*dst, err = __marshalBlueprintListConfigurationBlueprintConfiguration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal lambdaCloudRunBlueprintsBlueprintsMarketplaceCloudRunBlueprint.BlueprintList.Configuration: %w", err)
			}
		}
	}
	retval.Owner = v.BlueprintList.Owner
	retval.Variables = v.BlueprintList.Variables
	return &retval, nil
}

// lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint includes the requested fields of the GraphQL type Blueprint.
type lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint struct {
	BlueprintList `json:"-"`
}

// GetId returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.Id, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetId() uuid.UUID {
	return v.BlueprintList.Id
}

// GetDescription returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.Description, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetDescription() *string {
	return v.BlueprintList.Description
}

// GetDisplayName returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.DisplayName, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetDisplayName() string {
	return v.BlueprintList.DisplayName
}

// GetIsOfficial returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.IsOfficial, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetIsOfficial() *bool {
	return v.BlueprintList.IsOfficial
}

// GetLogoUrl returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.LogoUrl, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetLogoUrl() *string {
	return v.BlueprintList.LogoUrl
}

// GetEnabled returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.Enabled, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetEnabled() *bool {
	return v.BlueprintList.Enabled
}

// GetPublished returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.Published, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetPublished() bool {
	return v.BlueprintList.Published
}

// GetProjectCount returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.ProjectCount, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetProjectCount() int {
	return v.BlueprintList.ProjectCount
}

// GetRichInputSchema returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.RichInputSchema, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetRichInputSchema() *string {
	return v.BlueprintList.RichInputSchema
}

// GetAllowedCloudProviders returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.AllowedCloudProviders, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetAllowedCloudProviders() []CloudProvider {
	return v.BlueprintList.AllowedCloudProviders
}

// GetSlug returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.Slug, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetSlug() string {
	return v.BlueprintList.Slug
}

// GetTags returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.Tags, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetTags() []string {
	return v.BlueprintList.Tags
}

// GetType returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.Type, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetType() BlueprintType {
	return v.BlueprintList.Type
}

// GetConfiguration returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetConfiguration() *BlueprintListConfigurationBlueprintConfiguration {
	return v.BlueprintList.Configuration
}

// GetOwner returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.Owner, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetOwner() *BlueprintListOwnerBlueprintOwner {
	return v.BlueprintList.Owner
}

// GetVariables returns lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.Variables, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) GetVariables() []BlueprintListVariablesBlueprintVariableSpec {
	return v.BlueprintList.Variables
}

func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint
		graphql.NoUnmarshalJSON
	}
	firstPass.lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint struct {
	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	DisplayName string `json:"displayName"`

	IsOfficial *bool `json:"isOfficial"`

	LogoUrl *string `json:"logoUrl"`

	Enabled *bool `json:"enabled"`

	Published bool `json:"published"`

	ProjectCount int `json:"projectCount"`

	RichInputSchema *string `json:"richInputSchema"`

	AllowedCloudProviders []CloudProvider `json:"allowedCloudProviders"`

	Slug string `json:"slug"`

	Tags []string `json:"tags"`

	Type BlueprintType `json:"type"`

	Configuration json.RawMessage `json:"configuration"`

	Owner *BlueprintListOwnerBlueprintOwner `json:"owner"`

	Variables []BlueprintListVariablesBlueprintVariableSpec `json:"variables"`
}

func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint) __premarshalJSON() (*__premarshallambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint, error) {
	var retval __premarshallambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint

	retval.Id = v.BlueprintList.Id
	retval.Description = v.BlueprintList.Description
	retval.DisplayName = v.BlueprintList.DisplayName
	retval.IsOfficial = v.BlueprintList.IsOfficial
	retval.LogoUrl = v.BlueprintList.LogoUrl
	retval.Enabled = v.BlueprintList.Enabled
	retval.Published = v.BlueprintList.Published
	retval.ProjectCount = v.BlueprintList.ProjectCount
	retval.RichInputSchema = v.BlueprintList.RichInputSchema
	retval.AllowedCloudProviders = v.BlueprintList.AllowedCloudProviders
	retval.Slug = v.BlueprintList.Slug
	retval.Tags = v.BlueprintList.Tags
	retval.Type = v.BlueprintList.Type
	{

		dst := &retval.Configuration
		src := v.BlueprintList.Configuration
		if src != nil {
			var err error
			*dst, err = __marshalBlueprintListConfigurationBlueprintConfiguration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal lambdaCloudRunBlueprintsBlueprintsMarketplaceLambdaBlueprint.BlueprintList.Configuration: %w", err)
			}
		}
	}
	retval.Owner = v.BlueprintList.Owner
	retval.Variables = v.BlueprintList.Variables
	return &retval, nil
}

// lambdaCloudRunBlueprintsResponse is returned by lambdaCloudRunBlueprints on success.
type lambdaCloudRunBlueprintsResponse struct {
	BlueprintsMarketplace *lambdaCloudRunBlueprintsBlueprintsMarketplace `json:"blueprintsMarketplace"`
}

// GetBlueprintsMarketplace returns lambdaCloudRunBlueprintsResponse.BlueprintsMarketplace, and is useful for accessing the field via an interface.
func (v *lambdaCloudRunBlueprintsResponse) GetBlueprintsMarketplace() *lambdaCloudRunBlueprintsBlueprintsMarketplace {
	return v.BlueprintsMarketplace
}

// linkDatabaseLinkDatabaseRepo includes the requested fields of the GraphQL type Repo.
type linkDatabaseLinkDatabaseRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns linkDatabaseLinkDatabaseRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns linkDatabaseLinkDatabaseRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns linkDatabaseLinkDatabaseRepo.Manifest, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns linkDatabaseLinkDatabaseRepo.AppID, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns linkDatabaseLinkDatabaseRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns linkDatabaseLinkDatabaseRepo.KappID, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns linkDatabaseLinkDatabaseRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns linkDatabaseLinkDatabaseRepo.Project, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetProject() *RepoDetailProject { return v.RepoDetail.Project }

// GetProductionDeployment returns linkDatabaseLinkDatabaseRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns linkDatabaseLinkDatabaseRepo.Namespace, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns linkDatabaseLinkDatabaseRepo.Envs, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetEnvs() []RepoDetailEnvsEnvVar { return v.RepoDetail.Envs }

// GetCollaborators returns linkDatabaseLinkDatabaseRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns linkDatabaseLinkDatabaseRepo.Volumes, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns linkDatabaseLinkDatabaseRepo.Replication, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns linkDatabaseLinkDatabaseRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns linkDatabaseLinkDatabaseRepo.Cluster, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetCluster() *RepoDetailCluster { return v.RepoDetail.Cluster }

// GetAwsAccount returns linkDatabaseLinkDatabaseRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns linkDatabaseLinkDatabaseRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns linkDatabaseLinkDatabaseRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns linkDatabaseLinkDatabaseRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns linkDatabaseLinkDatabaseRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns linkDatabaseLinkDatabaseRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns linkDatabaseLinkDatabaseRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetManualDeploy() *bool { return v.RepoDetail.ManualDeploy }

// GetDeployStrategy returns linkDatabaseLinkDatabaseRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns linkDatabaseLinkDatabaseRepo.Free, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns linkDatabaseLinkDatabaseRepo.Cpu, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns linkDatabaseLinkDatabaseRepo.Memory, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns linkDatabaseLinkDatabaseRepo.Gpu, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetGpu() *RepoDetailGpuGPUSpec { return v.RepoDetail.Gpu }

// GetTpu returns linkDatabaseLinkDatabaseRepo.Tpu, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetTpu() *RepoDetailTpuTPUSpec { return v.RepoDetail.Tpu }

// GetEphemeralStorage returns linkDatabaseLinkDatabaseRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns linkDatabaseLinkDatabaseRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns linkDatabaseLinkDatabaseRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns linkDatabaseLinkDatabaseRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns linkDatabaseLinkDatabaseRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns linkDatabaseLinkDatabaseRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns linkDatabaseLinkDatabaseRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns linkDatabaseLinkDatabaseRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns linkDatabaseLinkDatabaseRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns linkDatabaseLinkDatabaseRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetHelmValues() *string { return v.RepoDetail.HelmValues }

// GetTerraformVersion returns linkDatabaseLinkDatabaseRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns linkDatabaseLinkDatabaseRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns linkDatabaseLinkDatabaseRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns linkDatabaseLinkDatabaseRepo.DeployService, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDeployService() *bool { return v.RepoDetail.DeployService }

// GetDeployJob returns linkDatabaseLinkDatabaseRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns linkDatabaseLinkDatabaseRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetPreStopSleep() *int { return v.RepoDetail.PreStopSleep }

// GetTerminationGracePeriodSeconds returns linkDatabaseLinkDatabaseRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns linkDatabaseLinkDatabaseRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns linkDatabaseLinkDatabaseRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns linkDatabaseLinkDatabaseRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns linkDatabaseLinkDatabaseRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns linkDatabaseLinkDatabaseRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns linkDatabaseLinkDatabaseRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns linkDatabaseLinkDatabaseRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns linkDatabaseLinkDatabaseRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns linkDatabaseLinkDatabaseRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns linkDatabaseLinkDatabaseRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetAutoRollback() *bool { return v.RepoDetail.AutoRollback }

// GetCanDeploy returns linkDatabaseLinkDatabaseRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns linkDatabaseLinkDatabaseRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns linkDatabaseLinkDatabaseRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetAwsIamRole() *string { return v.RepoDetail.AwsIamRole }

// GetGcpServiceAccount returns linkDatabaseLinkDatabaseRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns linkDatabaseLinkDatabaseRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns linkDatabaseLinkDatabaseRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns linkDatabaseLinkDatabaseRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns linkDatabaseLinkDatabaseRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns linkDatabaseLinkDatabaseRepo.Id, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetId() uuid.UUID { return v.RepoDetail.RepoCommon.Id }

// GetPath returns linkDatabaseLinkDatabaseRepo.Path, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns linkDatabaseLinkDatabaseRepo.Name, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns linkDatabaseLinkDatabaseRepo.Enabled, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetEnabled() bool { return v.RepoDetail.RepoCommon.Enabled }

// GetSource returns linkDatabaseLinkDatabaseRepo.Source, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns linkDatabaseLinkDatabaseRepo.DeployType, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns linkDatabaseLinkDatabaseRepo.Image, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetImage() *string { return v.RepoDetail.RepoCommon.Image }

// GetUpdatedAt returns linkDatabaseLinkDatabaseRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns linkDatabaseLinkDatabaseRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns linkDatabaseLinkDatabaseRepo.Owner, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns linkDatabaseLinkDatabaseRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns linkDatabaseLinkDatabaseRepo.Cdns, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns linkDatabaseLinkDatabaseRepo.Ports, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns linkDatabaseLinkDatabaseRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns linkDatabaseLinkDatabaseRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetStaticIP() *bool { return v.RepoDetail.RepoNetwork.StaticIP }

// GetBuildMethod returns linkDatabaseLinkDatabaseRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns linkDatabaseLinkDatabaseRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns linkDatabaseLinkDatabaseRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns linkDatabaseLinkDatabaseRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns linkDatabaseLinkDatabaseRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns linkDatabaseLinkDatabaseRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns linkDatabaseLinkDatabaseRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *linkDatabaseLinkDatabaseRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *linkDatabaseLinkDatabaseRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*linkDatabaseLinkDatabaseRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.linkDatabaseLinkDatabaseRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshallinkDatabaseLinkDatabaseRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *linkDatabaseLinkDatabaseRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *linkDatabaseLinkDatabaseRepo) __premarshalJSON() (*__premarshallinkDatabaseLinkDatabaseRepo, error) {
	var retval __premarshallinkDatabaseLinkDatabaseRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// linkDatabaseResponse is returned by linkDatabase on success.
type linkDatabaseResponse struct {
	LinkDatabase linkDatabaseLinkDatabaseRepo `json:"linkDatabase"`
}

// GetLinkDatabase returns linkDatabaseResponse.LinkDatabase, and is useful for accessing the field via an interface.
func (v *linkDatabaseResponse) GetLinkDatabase() linkDatabaseLinkDatabaseRepo { return v.LinkDatabase }

// loggedOutDockerInfoDockerRepository includes the requested fields of the GraphQL type DockerRepository.
type loggedOutDockerInfoDockerRepository struct {
	Id      uuid.UUID                                              `json:"id"`
	Name    string                                                 `json:"name"`
	Url     string                                                 `json:"url"`
	Ports   []loggedOutDockerInfoDockerRepositoryPortsPort         `json:"ports"`
	Volumes []loggedOutDockerInfoDockerRepositoryVolumesVolumeSpec `json:"volumes"`
}

// GetId returns loggedOutDockerInfoDockerRepository.Id, and is useful for accessing the field via an interface.
func (v *loggedOutDockerInfoDockerRepository) GetId() uuid.UUID { return v.Id }

// GetName returns loggedOutDockerInfoDockerRepository.Name, and is useful for accessing the field via an interface.
func (v *loggedOutDockerInfoDockerRepository) GetName() string { return v.Name }

// GetUrl returns loggedOutDockerInfoDockerRepository.Url, and is useful for accessing the field via an interface.
func (v *loggedOutDockerInfoDockerRepository) GetUrl() string { return v.Url }

// GetPorts returns loggedOutDockerInfoDockerRepository.Ports, and is useful for accessing the field via an interface.
func (v *loggedOutDockerInfoDockerRepository) GetPorts() []loggedOutDockerInfoDockerRepositoryPortsPort {
	return v.Ports
}

// GetVolumes returns loggedOutDockerInfoDockerRepository.Volumes, and is useful for accessing the field via an interface.
func (v *loggedOutDockerInfoDockerRepository) GetVolumes() []loggedOutDockerInfoDockerRepositoryVolumesVolumeSpec {
	return v.Volumes
}

// loggedOutDockerInfoDockerRepositoryPortsPort includes the requested fields of the GraphQL type Port.
type loggedOutDockerInfoDockerRepositoryPortsPort struct {
	Port     string `json:"port"`
	Protocol string `json:"protocol"`
	Public   bool   `json:"public"`
	Https    bool   `json:"https"`
}

// GetPort returns loggedOutDockerInfoDockerRepositoryPortsPort.Port, and is useful for accessing the field via an interface.
func (v *loggedOutDockerInfoDockerRepositoryPortsPort) GetPort() string { return v.Port }

// GetProtocol returns loggedOutDockerInfoDockerRepositoryPortsPort.Protocol, and is useful for accessing the field via an interface.
func (v *loggedOutDockerInfoDockerRepositoryPortsPort) GetProtocol() string { return v.Protocol }

// GetPublic returns loggedOutDockerInfoDockerRepositoryPortsPort.Public, and is useful for accessing the field via an interface.
func (v *loggedOutDockerInfoDockerRepositoryPortsPort) GetPublic() bool { return v.Public }

// GetHttps returns loggedOutDockerInfoDockerRepositoryPortsPort.Https, and is useful for accessing the field via an interface.
func (v *loggedOutDockerInfoDockerRepositoryPortsPort) GetHttps() bool { return v.Https }

// loggedOutDockerInfoDockerRepositoryVolumesVolumeSpec includes the requested fields of the GraphQL type VolumeSpec.
type loggedOutDockerInfoDockerRepositoryVolumesVolumeSpec struct {
	MountPath string `json:"mountPath"`
	Size      int    `json:"size"`
}

// GetMountPath returns loggedOutDockerInfoDockerRepositoryVolumesVolumeSpec.MountPath, and is useful for accessing the field via an interface.
func (v *loggedOutDockerInfoDockerRepositoryVolumesVolumeSpec) GetMountPath() string {
	return v.MountPath
}

// GetSize returns loggedOutDockerInfoDockerRepositoryVolumesVolumeSpec.Size, and is useful for accessing the field via an interface.
func (v *loggedOutDockerInfoDockerRepositoryVolumesVolumeSpec) GetSize() int { return v.Size }

// loggedOutDockerInfoResponse is returned by loggedOutDockerInfo on success.
type loggedOutDockerInfoResponse struct {
	DockerRepository *loggedOutDockerInfoDockerRepository `json:"dockerRepository"`
}

// GetDockerRepository returns loggedOutDockerInfoResponse.DockerRepository, and is useful for accessing the field via an interface.
func (v *loggedOutDockerInfoResponse) GetDockerRepository() *loggedOutDockerInfoDockerRepository {
	return v.DockerRepository
}

// marketplaceBlueprintBlueprintsMarketplace includes the requested fields of the GraphQL type BlueprintsMarketplace.
type marketplaceBlueprintBlueprintsMarketplace struct {
	Blueprint *marketplaceBlueprintBlueprintsMarketplaceBlueprint `json:"blueprint"`
}

// GetBlueprint returns marketplaceBlueprintBlueprintsMarketplace.Blueprint, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplace) GetBlueprint() *marketplaceBlueprintBlueprintsMarketplaceBlueprint {
	return v.Blueprint
}

// marketplaceBlueprintBlueprintsMarketplaceBlueprint includes the requested fields of the GraphQL type Blueprint.
type marketplaceBlueprintBlueprintsMarketplaceBlueprint struct {
	BlueprintList `json:"-"`
}

// GetId returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.Id, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetId() uuid.UUID {
	return v.BlueprintList.Id
}

// GetDescription returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.Description, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetDescription() *string {
	return v.BlueprintList.Description
}

// GetDisplayName returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.DisplayName, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetDisplayName() string {
	return v.BlueprintList.DisplayName
}

// GetIsOfficial returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.IsOfficial, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetIsOfficial() *bool {
	return v.BlueprintList.IsOfficial
}

// GetLogoUrl returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.LogoUrl, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetLogoUrl() *string {
	return v.BlueprintList.LogoUrl
}

// GetEnabled returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.Enabled, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetEnabled() *bool {
	return v.BlueprintList.Enabled
}

// GetPublished returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.Published, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetPublished() bool {
	return v.BlueprintList.Published
}

// GetProjectCount returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.ProjectCount, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetProjectCount() int {
	return v.BlueprintList.ProjectCount
}

// GetRichInputSchema returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.RichInputSchema, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetRichInputSchema() *string {
	return v.BlueprintList.RichInputSchema
}

// GetAllowedCloudProviders returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.AllowedCloudProviders, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetAllowedCloudProviders() []CloudProvider {
	return v.BlueprintList.AllowedCloudProviders
}

// GetSlug returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.Slug, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetSlug() string {
	return v.BlueprintList.Slug
}

// GetTags returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.Tags, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetTags() []string {
	return v.BlueprintList.Tags
}

// GetType returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.Type, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetType() BlueprintType {
	return v.BlueprintList.Type
}

// GetConfiguration returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetConfiguration() *BlueprintListConfigurationBlueprintConfiguration {
	return v.BlueprintList.Configuration
}

// GetOwner returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.Owner, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetOwner() *BlueprintListOwnerBlueprintOwner {
	return v.BlueprintList.Owner
}

// GetVariables returns marketplaceBlueprintBlueprintsMarketplaceBlueprint.Variables, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) GetVariables() []BlueprintListVariablesBlueprintVariableSpec {
	return v.BlueprintList.Variables
}

func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*marketplaceBlueprintBlueprintsMarketplaceBlueprint
		graphql.NoUnmarshalJSON
	}
	firstPass.marketplaceBlueprintBlueprintsMarketplaceBlueprint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmarketplaceBlueprintBlueprintsMarketplaceBlueprint struct {
	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	DisplayName string `json:"displayName"`

	IsOfficial *bool `json:"isOfficial"`

	LogoUrl *string `json:"logoUrl"`

	Enabled *bool `json:"enabled"`

	Published bool `json:"published"`

	ProjectCount int `json:"projectCount"`

	RichInputSchema *string `json:"richInputSchema"`

	AllowedCloudProviders []CloudProvider `json:"allowedCloudProviders"`

	Slug string `json:"slug"`

	Tags []string `json:"tags"`

	Type BlueprintType `json:"type"`

	Configuration json.RawMessage `json:"configuration"`

	Owner *BlueprintListOwnerBlueprintOwner `json:"owner"`

	Variables []BlueprintListVariablesBlueprintVariableSpec `json:"variables"`
}

func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *marketplaceBlueprintBlueprintsMarketplaceBlueprint) __premarshalJSON() (*__premarshalmarketplaceBlueprintBlueprintsMarketplaceBlueprint, error) {
	var retval __premarshalmarketplaceBlueprintBlueprintsMarketplaceBlueprint

	retval.Id = v.BlueprintList.Id
	retval.Description = v.BlueprintList.Description
	retval.DisplayName = v.BlueprintList.DisplayName
	retval.IsOfficial = v.BlueprintList.IsOfficial
	retval.LogoUrl = v.BlueprintList.LogoUrl
	retval.Enabled = v.BlueprintList.Enabled
	retval.Published = v.BlueprintList.Published
	retval.ProjectCount = v.BlueprintList.ProjectCount
	retval.RichInputSchema = v.BlueprintList.RichInputSchema
	retval.AllowedCloudProviders = v.BlueprintList.AllowedCloudProviders
	retval.Slug = v.BlueprintList.Slug
	retval.Tags = v.BlueprintList.Tags
	retval.Type = v.BlueprintList.Type
	{

		dst := &retval.Configuration
		src := v.BlueprintList.Configuration
		if src != nil {
			var err error
			*dst, err = __marshalBlueprintListConfigurationBlueprintConfiguration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal marketplaceBlueprintBlueprintsMarketplaceBlueprint.BlueprintList.Configuration: %w", err)
			}
		}
	}
	retval.Owner = v.BlueprintList.Owner
	retval.Variables = v.BlueprintList.Variables
	return &retval, nil
}

// marketplaceBlueprintMetadataBlueprintsMarketplace includes the requested fields of the GraphQL type BlueprintsMarketplace.
type marketplaceBlueprintMetadataBlueprintsMarketplace struct {
	BlueprintMetadata *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata `json:"blueprintMetadata"`
}

// GetBlueprintMetadata returns marketplaceBlueprintMetadataBlueprintsMarketplace.BlueprintMetadata, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplace) GetBlueprintMetadata() *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata {
	return v.BlueprintMetadata
}

// marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata includes the requested fields of the GraphQL type BlueprintMetadata.
type marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata struct {
	BlueprintMetadataList `json:"-"`
}

// GetId returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.Id, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetId() uuid.UUID {
	return v.BlueprintMetadataList.Id
}

// GetSlug returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.Slug, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetSlug() string {
	return v.BlueprintMetadataList.Slug
}

// GetName returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.Name, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetName() string {
	return v.BlueprintMetadataList.Name
}

// GetDisplayName returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.DisplayName, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetDisplayName() string {
	return v.BlueprintMetadataList.DisplayName
}

// GetType returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.Type, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetType() BlueprintType {
	return v.BlueprintMetadataList.Type
}

// GetDescription returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.Description, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetDescription() *string {
	return v.BlueprintMetadataList.Description
}

// GetTags returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.Tags, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetTags() []string {
	return v.BlueprintMetadataList.Tags
}

// GetLogoUrl returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.LogoUrl, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetLogoUrl() *string {
	return v.BlueprintMetadataList.LogoUrl
}

// GetMetatags returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.Metatags, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetMetatags() []*BlueprintMetadataListMetatagsBlueprintMetadataMetaTag {
	return v.BlueprintMetadataList.Metatags
}

// GetVersion returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.Version, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetVersion() *string {
	return v.BlueprintMetadataList.Version
}

// GetVersions returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.Versions, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetVersions() []BlueprintMetadataListVersionsBlueprintMetadataVersion {
	return v.BlueprintMetadataList.Versions
}

// GetLatestVersion returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.LatestVersion, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetLatestVersion() *string {
	return v.BlueprintMetadataList.LatestVersion
}

// GetAvailableVersions returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.AvailableVersions, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetAvailableVersions() []string {
	return v.BlueprintMetadataList.AvailableVersions
}

// GetApplicationVersion returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.ApplicationVersion, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetApplicationVersion() *string {
	return v.BlueprintMetadataList.ApplicationVersion
}

// GetOrganizationName returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.OrganizationName, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetOrganizationName() *string {
	return v.BlueprintMetadataList.OrganizationName
}

// GetOrganizationDisplayName returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.OrganizationDisplayName, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetOrganizationDisplayName() *string {
	return v.BlueprintMetadataList.OrganizationDisplayName
}

// GetCreatedAt returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.CreatedAt, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetCreatedAt() *time.Time {
	return v.BlueprintMetadataList.CreatedAt
}

// GetUpdatedAt returns marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata.UpdatedAt, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) GetUpdatedAt() *time.Time {
	return v.BlueprintMetadataList.UpdatedAt
}

func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintMetadataList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmarketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata struct {
	Id uuid.UUID `json:"id"`

	Slug string `json:"slug"`

	Name string `json:"name"`

	DisplayName string `json:"displayName"`

	Type BlueprintType `json:"type"`

	Description *string `json:"description"`

	Tags []string `json:"tags"`

	LogoUrl *string `json:"logoUrl"`

	Metatags []*BlueprintMetadataListMetatagsBlueprintMetadataMetaTag `json:"metatags"`

	Version *string `json:"version"`

	Versions []BlueprintMetadataListVersionsBlueprintMetadataVersion `json:"versions"`

	LatestVersion *string `json:"latestVersion"`

	AvailableVersions []string `json:"availableVersions"`

	ApplicationVersion *string `json:"applicationVersion"`

	OrganizationName *string `json:"organizationName"`

	OrganizationDisplayName *string `json:"organizationDisplayName"`

	CreatedAt *time.Time `json:"createdAt"`

	UpdatedAt *time.Time `json:"updatedAt"`
}

func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *marketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata) __premarshalJSON() (*__premarshalmarketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata, error) {
	var retval __premarshalmarketplaceBlueprintMetadataBlueprintsMarketplaceBlueprintMetadata

	retval.Id = v.BlueprintMetadataList.Id
	retval.Slug = v.BlueprintMetadataList.Slug
	retval.Name = v.BlueprintMetadataList.Name
	retval.DisplayName = v.BlueprintMetadataList.DisplayName
	retval.Type = v.BlueprintMetadataList.Type
	retval.Description = v.BlueprintMetadataList.Description
	retval.Tags = v.BlueprintMetadataList.Tags
	retval.LogoUrl = v.BlueprintMetadataList.LogoUrl
	retval.Metatags = v.BlueprintMetadataList.Metatags
	retval.Version = v.BlueprintMetadataList.Version
	retval.Versions = v.BlueprintMetadataList.Versions
	retval.LatestVersion = v.BlueprintMetadataList.LatestVersion
	retval.AvailableVersions = v.BlueprintMetadataList.AvailableVersions
	retval.ApplicationVersion = v.BlueprintMetadataList.ApplicationVersion
	retval.OrganizationName = v.BlueprintMetadataList.OrganizationName
	retval.OrganizationDisplayName = v.BlueprintMetadataList.OrganizationDisplayName
	retval.CreatedAt = v.BlueprintMetadataList.CreatedAt
	retval.UpdatedAt = v.BlueprintMetadataList.UpdatedAt
	return &retval, nil
}

// marketplaceBlueprintMetadataListBlueprintsMarketplace includes the requested fields of the GraphQL type BlueprintsMarketplace.
type marketplaceBlueprintMetadataListBlueprintsMarketplace struct {
	BlueprintMetadataList *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnection `json:"blueprintMetadataList"`
}

// GetBlueprintMetadataList returns marketplaceBlueprintMetadataListBlueprintsMarketplace.BlueprintMetadataList, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplace) GetBlueprintMetadataList() *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnection {
	return v.BlueprintMetadataList
}

// marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnection includes the requested fields of the GraphQL type BlueprintMetadataConnection.
type marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnection struct {
	TotalCount int                                                                                                                           `json:"totalCount"`
	PageInfo   marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionPageInfo                 `json:"pageInfo"`
	Nodes      []marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata `json:"nodes"`
}

// GetTotalCount returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetPageInfo returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnection) GetPageInfo() marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnection.Nodes, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnection) GetNodes() []marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata {
	return v.Nodes
}

// marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata includes the requested fields of the GraphQL type BlueprintMetadata.
type marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata struct {
	BlueprintMetadataList `json:"-"`
}

// GetId returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.Id, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetId() uuid.UUID {
	return v.BlueprintMetadataList.Id
}

// GetSlug returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.Slug, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetSlug() string {
	return v.BlueprintMetadataList.Slug
}

// GetName returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.Name, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetName() string {
	return v.BlueprintMetadataList.Name
}

// GetDisplayName returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.DisplayName, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetDisplayName() string {
	return v.BlueprintMetadataList.DisplayName
}

// GetType returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.Type, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetType() BlueprintType {
	return v.BlueprintMetadataList.Type
}

// GetDescription returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.Description, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetDescription() *string {
	return v.BlueprintMetadataList.Description
}

// GetTags returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.Tags, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetTags() []string {
	return v.BlueprintMetadataList.Tags
}

// GetLogoUrl returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.LogoUrl, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetLogoUrl() *string {
	return v.BlueprintMetadataList.LogoUrl
}

// GetMetatags returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.Metatags, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetMetatags() []*BlueprintMetadataListMetatagsBlueprintMetadataMetaTag {
	return v.BlueprintMetadataList.Metatags
}

// GetVersion returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.Version, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetVersion() *string {
	return v.BlueprintMetadataList.Version
}

// GetVersions returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.Versions, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetVersions() []BlueprintMetadataListVersionsBlueprintMetadataVersion {
	return v.BlueprintMetadataList.Versions
}

// GetLatestVersion returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.LatestVersion, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetLatestVersion() *string {
	return v.BlueprintMetadataList.LatestVersion
}

// GetAvailableVersions returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.AvailableVersions, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetAvailableVersions() []string {
	return v.BlueprintMetadataList.AvailableVersions
}

// GetApplicationVersion returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.ApplicationVersion, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetApplicationVersion() *string {
	return v.BlueprintMetadataList.ApplicationVersion
}

// GetOrganizationName returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.OrganizationName, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetOrganizationName() *string {
	return v.BlueprintMetadataList.OrganizationName
}

// GetOrganizationDisplayName returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.OrganizationDisplayName, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetOrganizationDisplayName() *string {
	return v.BlueprintMetadataList.OrganizationDisplayName
}

// GetCreatedAt returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.CreatedAt, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetCreatedAt() *time.Time {
	return v.BlueprintMetadataList.CreatedAt
}

// GetUpdatedAt returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata.UpdatedAt, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) GetUpdatedAt() *time.Time {
	return v.BlueprintMetadataList.UpdatedAt
}

func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata
		graphql.NoUnmarshalJSON
	}
	firstPass.marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintMetadataList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmarketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata struct {
	Id uuid.UUID `json:"id"`

	Slug string `json:"slug"`

	Name string `json:"name"`

	DisplayName string `json:"displayName"`

	Type BlueprintType `json:"type"`

	Description *string `json:"description"`

	Tags []string `json:"tags"`

	LogoUrl *string `json:"logoUrl"`

	Metatags []*BlueprintMetadataListMetatagsBlueprintMetadataMetaTag `json:"metatags"`

	Version *string `json:"version"`

	Versions []BlueprintMetadataListVersionsBlueprintMetadataVersion `json:"versions"`

	LatestVersion *string `json:"latestVersion"`

	AvailableVersions []string `json:"availableVersions"`

	ApplicationVersion *string `json:"applicationVersion"`

	OrganizationName *string `json:"organizationName"`

	OrganizationDisplayName *string `json:"organizationDisplayName"`

	CreatedAt *time.Time `json:"createdAt"`

	UpdatedAt *time.Time `json:"updatedAt"`
}

func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata) __premarshalJSON() (*__premarshalmarketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata, error) {
	var retval __premarshalmarketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionNodesBlueprintMetadata

	retval.Id = v.BlueprintMetadataList.Id
	retval.Slug = v.BlueprintMetadataList.Slug
	retval.Name = v.BlueprintMetadataList.Name
	retval.DisplayName = v.BlueprintMetadataList.DisplayName
	retval.Type = v.BlueprintMetadataList.Type
	retval.Description = v.BlueprintMetadataList.Description
	retval.Tags = v.BlueprintMetadataList.Tags
	retval.LogoUrl = v.BlueprintMetadataList.LogoUrl
	retval.Metatags = v.BlueprintMetadataList.Metatags
	retval.Version = v.BlueprintMetadataList.Version
	retval.Versions = v.BlueprintMetadataList.Versions
	retval.LatestVersion = v.BlueprintMetadataList.LatestVersion
	retval.AvailableVersions = v.BlueprintMetadataList.AvailableVersions
	retval.ApplicationVersion = v.BlueprintMetadataList.ApplicationVersion
	retval.OrganizationName = v.BlueprintMetadataList.OrganizationName
	retval.OrganizationDisplayName = v.BlueprintMetadataList.OrganizationDisplayName
	retval.CreatedAt = v.BlueprintMetadataList.CreatedAt
	retval.UpdatedAt = v.BlueprintMetadataList.UpdatedAt
	return &retval, nil
}

// marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionPageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetEndCursor returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetHasPreviousPage returns marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListBlueprintsMarketplaceBlueprintMetadataListBlueprintMetadataConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// marketplaceBlueprintMetadataListResponse is returned by marketplaceBlueprintMetadataList on success.
type marketplaceBlueprintMetadataListResponse struct {
	BlueprintsMarketplace *marketplaceBlueprintMetadataListBlueprintsMarketplace `json:"blueprintsMarketplace"`
}

// GetBlueprintsMarketplace returns marketplaceBlueprintMetadataListResponse.BlueprintsMarketplace, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataListResponse) GetBlueprintsMarketplace() *marketplaceBlueprintMetadataListBlueprintsMarketplace {
	return v.BlueprintsMarketplace
}

// marketplaceBlueprintMetadataResponse is returned by marketplaceBlueprintMetadata on success.
type marketplaceBlueprintMetadataResponse struct {
	BlueprintsMarketplace *marketplaceBlueprintMetadataBlueprintsMarketplace `json:"blueprintsMarketplace"`
}

// GetBlueprintsMarketplace returns marketplaceBlueprintMetadataResponse.BlueprintsMarketplace, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintMetadataResponse) GetBlueprintsMarketplace() *marketplaceBlueprintMetadataBlueprintsMarketplace {
	return v.BlueprintsMarketplace
}

// marketplaceBlueprintResponse is returned by marketplaceBlueprint on success.
type marketplaceBlueprintResponse struct {
	BlueprintsMarketplace *marketplaceBlueprintBlueprintsMarketplace `json:"blueprintsMarketplace"`
}

// GetBlueprintsMarketplace returns marketplaceBlueprintResponse.BlueprintsMarketplace, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintResponse) GetBlueprintsMarketplace() *marketplaceBlueprintBlueprintsMarketplace {
	return v.BlueprintsMarketplace
}

// marketplaceBlueprintsBlueprintsMarketplace includes the requested fields of the GraphQL type BlueprintsMarketplace.
type marketplaceBlueprintsBlueprintsMarketplace struct {
	Blueprints *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnection `json:"blueprints"`
}

// GetBlueprints returns marketplaceBlueprintsBlueprintsMarketplace.Blueprints, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplace) GetBlueprints() *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnection {
	return v.Blueprints
}

// marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnection includes the requested fields of the GraphQL type BlueprintConnection.
type marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnection struct {
	Nodes []marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint `json:"nodes"`
}

// GetNodes returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnection.Nodes, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnection) GetNodes() []marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint {
	return v.Nodes
}

// marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint includes the requested fields of the GraphQL type Blueprint.
type marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint struct {
	BlueprintList `json:"-"`
}

// GetId returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.Id, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetId() uuid.UUID {
	return v.BlueprintList.Id
}

// GetDescription returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.Description, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetDescription() *string {
	return v.BlueprintList.Description
}

// GetDisplayName returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.DisplayName, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetDisplayName() string {
	return v.BlueprintList.DisplayName
}

// GetIsOfficial returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.IsOfficial, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetIsOfficial() *bool {
	return v.BlueprintList.IsOfficial
}

// GetLogoUrl returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.LogoUrl, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetLogoUrl() *string {
	return v.BlueprintList.LogoUrl
}

// GetEnabled returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.Enabled, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetEnabled() *bool {
	return v.BlueprintList.Enabled
}

// GetPublished returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.Published, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetPublished() bool {
	return v.BlueprintList.Published
}

// GetProjectCount returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.ProjectCount, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetProjectCount() int {
	return v.BlueprintList.ProjectCount
}

// GetRichInputSchema returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.RichInputSchema, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetRichInputSchema() *string {
	return v.BlueprintList.RichInputSchema
}

// GetAllowedCloudProviders returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.AllowedCloudProviders, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetAllowedCloudProviders() []CloudProvider {
	return v.BlueprintList.AllowedCloudProviders
}

// GetSlug returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.Slug, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetSlug() string {
	return v.BlueprintList.Slug
}

// GetTags returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.Tags, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetTags() []string {
	return v.BlueprintList.Tags
}

// GetType returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.Type, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetType() BlueprintType {
	return v.BlueprintList.Type
}

// GetConfiguration returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetConfiguration() *BlueprintListConfigurationBlueprintConfiguration {
	return v.BlueprintList.Configuration
}

// GetOwner returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.Owner, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetOwner() *BlueprintListOwnerBlueprintOwner {
	return v.BlueprintList.Owner
}

// GetVariables returns marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.Variables, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) GetVariables() []BlueprintListVariablesBlueprintVariableSpec {
	return v.BlueprintList.Variables
}

func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint
		graphql.NoUnmarshalJSON
	}
	firstPass.marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmarketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint struct {
	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	DisplayName string `json:"displayName"`

	IsOfficial *bool `json:"isOfficial"`

	LogoUrl *string `json:"logoUrl"`

	Enabled *bool `json:"enabled"`

	Published bool `json:"published"`

	ProjectCount int `json:"projectCount"`

	RichInputSchema *string `json:"richInputSchema"`

	AllowedCloudProviders []CloudProvider `json:"allowedCloudProviders"`

	Slug string `json:"slug"`

	Tags []string `json:"tags"`

	Type BlueprintType `json:"type"`

	Configuration json.RawMessage `json:"configuration"`

	Owner *BlueprintListOwnerBlueprintOwner `json:"owner"`

	Variables []BlueprintListVariablesBlueprintVariableSpec `json:"variables"`
}

func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint) __premarshalJSON() (*__premarshalmarketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint, error) {
	var retval __premarshalmarketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint

	retval.Id = v.BlueprintList.Id
	retval.Description = v.BlueprintList.Description
	retval.DisplayName = v.BlueprintList.DisplayName
	retval.IsOfficial = v.BlueprintList.IsOfficial
	retval.LogoUrl = v.BlueprintList.LogoUrl
	retval.Enabled = v.BlueprintList.Enabled
	retval.Published = v.BlueprintList.Published
	retval.ProjectCount = v.BlueprintList.ProjectCount
	retval.RichInputSchema = v.BlueprintList.RichInputSchema
	retval.AllowedCloudProviders = v.BlueprintList.AllowedCloudProviders
	retval.Slug = v.BlueprintList.Slug
	retval.Tags = v.BlueprintList.Tags
	retval.Type = v.BlueprintList.Type
	{

		dst := &retval.Configuration
		src := v.BlueprintList.Configuration
		if src != nil {
			var err error
			*dst, err = __marshalBlueprintListConfigurationBlueprintConfiguration(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal marketplaceBlueprintsBlueprintsMarketplaceBlueprintsBlueprintConnectionNodesBlueprint.BlueprintList.Configuration: %w", err)
			}
		}
	}
	retval.Owner = v.BlueprintList.Owner
	retval.Variables = v.BlueprintList.Variables
	return &retval, nil
}

// marketplaceBlueprintsResponse is returned by marketplaceBlueprints on success.
type marketplaceBlueprintsResponse struct {
	BlueprintsMarketplace *marketplaceBlueprintsBlueprintsMarketplace `json:"blueprintsMarketplace"`
}

// GetBlueprintsMarketplace returns marketplaceBlueprintsResponse.BlueprintsMarketplace, and is useful for accessing the field via an interface.
func (v *marketplaceBlueprintsResponse) GetBlueprintsMarketplace() *marketplaceBlueprintsBlueprintsMarketplace {
	return v.BlueprintsMarketplace
}

// maybeCreateBlueprintFromMetadataMaybeCreateBlueprintFromMetadataBlueprint includes the requested fields of the GraphQL type Blueprint.
type maybeCreateBlueprintFromMetadataMaybeCreateBlueprintFromMetadataBlueprint struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns maybeCreateBlueprintFromMetadataMaybeCreateBlueprintFromMetadataBlueprint.Id, and is useful for accessing the field via an interface.
func (v *maybeCreateBlueprintFromMetadataMaybeCreateBlueprintFromMetadataBlueprint) GetId() uuid.UUID {
	return v.Id
}

// maybeCreateBlueprintFromMetadataResponse is returned by maybeCreateBlueprintFromMetadata on success.
type maybeCreateBlueprintFromMetadataResponse struct {
	MaybeCreateBlueprintFromMetadata maybeCreateBlueprintFromMetadataMaybeCreateBlueprintFromMetadataBlueprint `json:"maybeCreateBlueprintFromMetadata"`
}

// GetMaybeCreateBlueprintFromMetadata returns maybeCreateBlueprintFromMetadataResponse.MaybeCreateBlueprintFromMetadata, and is useful for accessing the field via an interface.
func (v *maybeCreateBlueprintFromMetadataResponse) GetMaybeCreateBlueprintFromMetadata() maybeCreateBlueprintFromMetadataMaybeCreateBlueprintFromMetadataBlueprint {
	return v.MaybeCreateBlueprintFromMetadata
}

// monthlyCostForServicesResponse is returned by monthlyCostForServices on success.
type monthlyCostForServicesResponse struct {
	WithoutCredit []monthlyCostForServicesWithoutCreditCost `json:"withoutCredit"`
	WithCredit    []monthlyCostForServicesWithCreditCost    `json:"withCredit"`
}

// GetWithoutCredit returns monthlyCostForServicesResponse.WithoutCredit, and is useful for accessing the field via an interface.
func (v *monthlyCostForServicesResponse) GetWithoutCredit() []monthlyCostForServicesWithoutCreditCost {
	return v.WithoutCredit
}

// GetWithCredit returns monthlyCostForServicesResponse.WithCredit, and is useful for accessing the field via an interface.
func (v *monthlyCostForServicesResponse) GetWithCredit() []monthlyCostForServicesWithCreditCost {
	return v.WithCredit
}

// monthlyCostForServicesWithCreditCost includes the requested fields of the GraphQL type Cost.
type monthlyCostForServicesWithCreditCost struct {
	Service             *string  `json:"service"`
	UnblendedCostAmount *float64 `json:"unblendedCostAmount"`
	UnblendedCostUnit   *string  `json:"unblendedCostUnit"`
	PeriodStart         *string  `json:"periodStart"`
	PeriodEnd           *string  `json:"periodEnd"`
}

// GetService returns monthlyCostForServicesWithCreditCost.Service, and is useful for accessing the field via an interface.
func (v *monthlyCostForServicesWithCreditCost) GetService() *string { return v.Service }

// GetUnblendedCostAmount returns monthlyCostForServicesWithCreditCost.UnblendedCostAmount, and is useful for accessing the field via an interface.
func (v *monthlyCostForServicesWithCreditCost) GetUnblendedCostAmount() *float64 {
	return v.UnblendedCostAmount
}

// GetUnblendedCostUnit returns monthlyCostForServicesWithCreditCost.UnblendedCostUnit, and is useful for accessing the field via an interface.
func (v *monthlyCostForServicesWithCreditCost) GetUnblendedCostUnit() *string {
	return v.UnblendedCostUnit
}

// GetPeriodStart returns monthlyCostForServicesWithCreditCost.PeriodStart, and is useful for accessing the field via an interface.
func (v *monthlyCostForServicesWithCreditCost) GetPeriodStart() *string { return v.PeriodStart }

// GetPeriodEnd returns monthlyCostForServicesWithCreditCost.PeriodEnd, and is useful for accessing the field via an interface.
func (v *monthlyCostForServicesWithCreditCost) GetPeriodEnd() *string { return v.PeriodEnd }

// monthlyCostForServicesWithoutCreditCost includes the requested fields of the GraphQL type Cost.
type monthlyCostForServicesWithoutCreditCost struct {
	Service             *string  `json:"service"`
	UnblendedCostAmount *float64 `json:"unblendedCostAmount"`
	UnblendedCostUnit   *string  `json:"unblendedCostUnit"`
	PeriodStart         *string  `json:"periodStart"`
	PeriodEnd           *string  `json:"periodEnd"`
}

// GetService returns monthlyCostForServicesWithoutCreditCost.Service, and is useful for accessing the field via an interface.
func (v *monthlyCostForServicesWithoutCreditCost) GetService() *string { return v.Service }

// GetUnblendedCostAmount returns monthlyCostForServicesWithoutCreditCost.UnblendedCostAmount, and is useful for accessing the field via an interface.
func (v *monthlyCostForServicesWithoutCreditCost) GetUnblendedCostAmount() *float64 {
	return v.UnblendedCostAmount
}

// GetUnblendedCostUnit returns monthlyCostForServicesWithoutCreditCost.UnblendedCostUnit, and is useful for accessing the field via an interface.
func (v *monthlyCostForServicesWithoutCreditCost) GetUnblendedCostUnit() *string {
	return v.UnblendedCostUnit
}

// GetPeriodStart returns monthlyCostForServicesWithoutCreditCost.PeriodStart, and is useful for accessing the field via an interface.
func (v *monthlyCostForServicesWithoutCreditCost) GetPeriodStart() *string { return v.PeriodStart }

// GetPeriodEnd returns monthlyCostForServicesWithoutCreditCost.PeriodEnd, and is useful for accessing the field via an interface.
func (v *monthlyCostForServicesWithoutCreditCost) GetPeriodEnd() *string { return v.PeriodEnd }

// moveRepoMoveRepoToProjectEnvironmentRepo includes the requested fields of the GraphQL type Repo.
type moveRepoMoveRepoToProjectEnvironmentRepo struct {
	RepoDetail         `json:"-"`
	ProjectEnvironment *moveRepoMoveRepoToProjectEnvironmentRepoProjectEnvironment `json:"projectEnvironment"`
}

// GetProjectEnvironment returns moveRepoMoveRepoToProjectEnvironmentRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetProjectEnvironment() *moveRepoMoveRepoToProjectEnvironmentRepoProjectEnvironment {
	return v.ProjectEnvironment
}

// GetSecretMounts returns moveRepoMoveRepoToProjectEnvironmentRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns moveRepoMoveRepoToProjectEnvironmentRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns moveRepoMoveRepoToProjectEnvironmentRepo.Manifest, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns moveRepoMoveRepoToProjectEnvironmentRepo.AppID, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns moveRepoMoveRepoToProjectEnvironmentRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns moveRepoMoveRepoToProjectEnvironmentRepo.KappID, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns moveRepoMoveRepoToProjectEnvironmentRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns moveRepoMoveRepoToProjectEnvironmentRepo.Project, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns moveRepoMoveRepoToProjectEnvironmentRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns moveRepoMoveRepoToProjectEnvironmentRepo.Namespace, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetNamespace() *string {
	return v.RepoDetail.Namespace
}

// GetEnvs returns moveRepoMoveRepoToProjectEnvironmentRepo.Envs, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetEnvs() []RepoDetailEnvsEnvVar {
	return v.RepoDetail.Envs
}

// GetCollaborators returns moveRepoMoveRepoToProjectEnvironmentRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns moveRepoMoveRepoToProjectEnvironmentRepo.Volumes, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns moveRepoMoveRepoToProjectEnvironmentRepo.Replication, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns moveRepoMoveRepoToProjectEnvironmentRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns moveRepoMoveRepoToProjectEnvironmentRepo.Cluster, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns moveRepoMoveRepoToProjectEnvironmentRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns moveRepoMoveRepoToProjectEnvironmentRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns moveRepoMoveRepoToProjectEnvironmentRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns moveRepoMoveRepoToProjectEnvironmentRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns moveRepoMoveRepoToProjectEnvironmentRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns moveRepoMoveRepoToProjectEnvironmentRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns moveRepoMoveRepoToProjectEnvironmentRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetManualDeploy() *bool {
	return v.RepoDetail.ManualDeploy
}

// GetDeployStrategy returns moveRepoMoveRepoToProjectEnvironmentRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns moveRepoMoveRepoToProjectEnvironmentRepo.Free, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns moveRepoMoveRepoToProjectEnvironmentRepo.Cpu, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns moveRepoMoveRepoToProjectEnvironmentRepo.Memory, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns moveRepoMoveRepoToProjectEnvironmentRepo.Gpu, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetGpu() *RepoDetailGpuGPUSpec {
	return v.RepoDetail.Gpu
}

// GetTpu returns moveRepoMoveRepoToProjectEnvironmentRepo.Tpu, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetTpu() *RepoDetailTpuTPUSpec {
	return v.RepoDetail.Tpu
}

// GetEphemeralStorage returns moveRepoMoveRepoToProjectEnvironmentRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns moveRepoMoveRepoToProjectEnvironmentRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDedicated() *bool {
	return v.RepoDetail.Dedicated
}

// GetGithubIntegration returns moveRepoMoveRepoToProjectEnvironmentRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns moveRepoMoveRepoToProjectEnvironmentRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns moveRepoMoveRepoToProjectEnvironmentRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns moveRepoMoveRepoToProjectEnvironmentRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns moveRepoMoveRepoToProjectEnvironmentRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns moveRepoMoveRepoToProjectEnvironmentRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns moveRepoMoveRepoToProjectEnvironmentRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns moveRepoMoveRepoToProjectEnvironmentRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetHelmValues() *string {
	return v.RepoDetail.HelmValues
}

// GetTerraformVersion returns moveRepoMoveRepoToProjectEnvironmentRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns moveRepoMoveRepoToProjectEnvironmentRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns moveRepoMoveRepoToProjectEnvironmentRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns moveRepoMoveRepoToProjectEnvironmentRepo.DeployService, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns moveRepoMoveRepoToProjectEnvironmentRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDeployJob() *bool {
	return v.RepoDetail.DeployJob
}

// GetPreStopSleep returns moveRepoMoveRepoToProjectEnvironmentRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetPreStopSleep() *int {
	return v.RepoDetail.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns moveRepoMoveRepoToProjectEnvironmentRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns moveRepoMoveRepoToProjectEnvironmentRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns moveRepoMoveRepoToProjectEnvironmentRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns moveRepoMoveRepoToProjectEnvironmentRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns moveRepoMoveRepoToProjectEnvironmentRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns moveRepoMoveRepoToProjectEnvironmentRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns moveRepoMoveRepoToProjectEnvironmentRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns moveRepoMoveRepoToProjectEnvironmentRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns moveRepoMoveRepoToProjectEnvironmentRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns moveRepoMoveRepoToProjectEnvironmentRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetAutoRetry() *bool {
	return v.RepoDetail.AutoRetry
}

// GetAutoRollback returns moveRepoMoveRepoToProjectEnvironmentRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetAutoRollback() *bool {
	return v.RepoDetail.AutoRollback
}

// GetCanDeploy returns moveRepoMoveRepoToProjectEnvironmentRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetCanDeploy() *bool {
	return v.RepoDetail.CanDeploy
}

// GetPipelineCluster returns moveRepoMoveRepoToProjectEnvironmentRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns moveRepoMoveRepoToProjectEnvironmentRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetAwsIamRole() *string {
	return v.RepoDetail.AwsIamRole
}

// GetGcpServiceAccount returns moveRepoMoveRepoToProjectEnvironmentRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns moveRepoMoveRepoToProjectEnvironmentRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetPipelineLinks returns moveRepoMoveRepoToProjectEnvironmentRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns moveRepoMoveRepoToProjectEnvironmentRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns moveRepoMoveRepoToProjectEnvironmentRepo.Id, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetId() uuid.UUID {
	return v.RepoDetail.RepoCommon.Id
}

// GetPath returns moveRepoMoveRepoToProjectEnvironmentRepo.Path, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetPath() string {
	return v.RepoDetail.RepoCommon.Path
}

// GetName returns moveRepoMoveRepoToProjectEnvironmentRepo.Name, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetName() string {
	return v.RepoDetail.RepoCommon.Name
}

// GetEnabled returns moveRepoMoveRepoToProjectEnvironmentRepo.Enabled, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetEnabled() bool {
	return v.RepoDetail.RepoCommon.Enabled
}

// GetSource returns moveRepoMoveRepoToProjectEnvironmentRepo.Source, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns moveRepoMoveRepoToProjectEnvironmentRepo.DeployType, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns moveRepoMoveRepoToProjectEnvironmentRepo.Image, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetImage() *string {
	return v.RepoDetail.RepoCommon.Image
}

// GetUpdatedAt returns moveRepoMoveRepoToProjectEnvironmentRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns moveRepoMoveRepoToProjectEnvironmentRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns moveRepoMoveRepoToProjectEnvironmentRepo.Owner, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns moveRepoMoveRepoToProjectEnvironmentRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns moveRepoMoveRepoToProjectEnvironmentRepo.Cdns, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns moveRepoMoveRepoToProjectEnvironmentRepo.Ports, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns moveRepoMoveRepoToProjectEnvironmentRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns moveRepoMoveRepoToProjectEnvironmentRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns moveRepoMoveRepoToProjectEnvironmentRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns moveRepoMoveRepoToProjectEnvironmentRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns moveRepoMoveRepoToProjectEnvironmentRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns moveRepoMoveRepoToProjectEnvironmentRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns moveRepoMoveRepoToProjectEnvironmentRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns moveRepoMoveRepoToProjectEnvironmentRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns moveRepoMoveRepoToProjectEnvironmentRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *moveRepoMoveRepoToProjectEnvironmentRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*moveRepoMoveRepoToProjectEnvironmentRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.moveRepoMoveRepoToProjectEnvironmentRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmoveRepoMoveRepoToProjectEnvironmentRepo struct {
	ProjectEnvironment *moveRepoMoveRepoToProjectEnvironmentRepoProjectEnvironment `json:"projectEnvironment"`

	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *moveRepoMoveRepoToProjectEnvironmentRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *moveRepoMoveRepoToProjectEnvironmentRepo) __premarshalJSON() (*__premarshalmoveRepoMoveRepoToProjectEnvironmentRepo, error) {
	var retval __premarshalmoveRepoMoveRepoToProjectEnvironmentRepo

	retval.ProjectEnvironment = v.ProjectEnvironment
	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// moveRepoMoveRepoToProjectEnvironmentRepoProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type moveRepoMoveRepoToProjectEnvironmentRepoProjectEnvironment struct {
	Name string `json:"name"`
}

// GetName returns moveRepoMoveRepoToProjectEnvironmentRepoProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *moveRepoMoveRepoToProjectEnvironmentRepoProjectEnvironment) GetName() string { return v.Name }

// moveRepoResponse is returned by moveRepo on success.
type moveRepoResponse struct {
	MoveRepoToProjectEnvironment moveRepoMoveRepoToProjectEnvironmentRepo `json:"moveRepoToProjectEnvironment"`
}

// GetMoveRepoToProjectEnvironment returns moveRepoResponse.MoveRepoToProjectEnvironment, and is useful for accessing the field via an interface.
func (v *moveRepoResponse) GetMoveRepoToProjectEnvironment() moveRepoMoveRepoToProjectEnvironmentRepo {
	return v.MoveRepoToProjectEnvironment
}

// moveRepoTargetsResponse is returned by moveRepoTargets on success.
type moveRepoTargetsResponse struct {
	User moveRepoTargetsUser `json:"user"`
}

// GetUser returns moveRepoTargetsResponse.User, and is useful for accessing the field via an interface.
func (v *moveRepoTargetsResponse) GetUser() moveRepoTargetsUser { return v.User }

// moveRepoTargetsUser includes the requested fields of the GraphQL type User.
type moveRepoTargetsUser struct {
	Id       uuid.UUID                                    `json:"id"`
	Projects moveRepoTargetsUserProjectsProjectConnection `json:"projects"`
}

// GetId returns moveRepoTargetsUser.Id, and is useful for accessing the field via an interface.
func (v *moveRepoTargetsUser) GetId() uuid.UUID { return v.Id }

// GetProjects returns moveRepoTargetsUser.Projects, and is useful for accessing the field via an interface.
func (v *moveRepoTargetsUser) GetProjects() moveRepoTargetsUserProjectsProjectConnection {
	return v.Projects
}

// moveRepoTargetsUserProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type moveRepoTargetsUserProjectsProjectConnection struct {
	Nodes []moveRepoTargetsUserProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetNodes returns moveRepoTargetsUserProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *moveRepoTargetsUserProjectsProjectConnection) GetNodes() []moveRepoTargetsUserProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// moveRepoTargetsUserProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type moveRepoTargetsUserProjectsProjectConnectionNodesProject struct {
	// - v0.ProjectID or v1.GroupID
	Id           uuid.UUID                                                                                `json:"id"`
	Name         string                                                                                   `json:"name"`
	Environments []moveRepoTargetsUserProjectsProjectConnectionNodesProjectEnvironmentsProjectEnvironment `json:"environments"`
}

// GetId returns moveRepoTargetsUserProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *moveRepoTargetsUserProjectsProjectConnectionNodesProject) GetId() uuid.UUID { return v.Id }

// GetName returns moveRepoTargetsUserProjectsProjectConnectionNodesProject.Name, and is useful for accessing the field via an interface.
func (v *moveRepoTargetsUserProjectsProjectConnectionNodesProject) GetName() string { return v.Name }

// GetEnvironments returns moveRepoTargetsUserProjectsProjectConnectionNodesProject.Environments, and is useful for accessing the field via an interface.
func (v *moveRepoTargetsUserProjectsProjectConnectionNodesProject) GetEnvironments() []moveRepoTargetsUserProjectsProjectConnectionNodesProjectEnvironmentsProjectEnvironment {
	return v.Environments
}

// moveRepoTargetsUserProjectsProjectConnectionNodesProjectEnvironmentsProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type moveRepoTargetsUserProjectsProjectConnectionNodesProjectEnvironmentsProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns moveRepoTargetsUserProjectsProjectConnectionNodesProjectEnvironmentsProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *moveRepoTargetsUserProjectsProjectConnectionNodesProjectEnvironmentsProjectEnvironment) GetId() uuid.UUID {
	return v.Id
}

// GetName returns moveRepoTargetsUserProjectsProjectConnectionNodesProjectEnvironmentsProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *moveRepoTargetsUserProjectsProjectConnectionNodesProjectEnvironmentsProjectEnvironment) GetName() string {
	return v.Name
}

// newTeamMemberSuggestionsCurrentUser includes the requested fields of the GraphQL type User.
type newTeamMemberSuggestionsCurrentUser struct {
	Id    uuid.UUID                                      `json:"id"`
	Repos []newTeamMemberSuggestionsCurrentUserReposRepo `json:"repos"`
}

// GetId returns newTeamMemberSuggestionsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *newTeamMemberSuggestionsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetRepos returns newTeamMemberSuggestionsCurrentUser.Repos, and is useful for accessing the field via an interface.
func (v *newTeamMemberSuggestionsCurrentUser) GetRepos() []newTeamMemberSuggestionsCurrentUserReposRepo {
	return v.Repos
}

// newTeamMemberSuggestionsCurrentUserReposRepo includes the requested fields of the GraphQL type Repo.
type newTeamMemberSuggestionsCurrentUserReposRepo struct {
	// - v0.RepoID
	Id            uuid.UUID                                                                      `json:"id"`
	Collaborators []newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator `json:"collaborators"`
}

// GetId returns newTeamMemberSuggestionsCurrentUserReposRepo.Id, and is useful for accessing the field via an interface.
func (v *newTeamMemberSuggestionsCurrentUserReposRepo) GetId() uuid.UUID { return v.Id }

// GetCollaborators returns newTeamMemberSuggestionsCurrentUserReposRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *newTeamMemberSuggestionsCurrentUserReposRepo) GetCollaborators() []newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator {
	return v.Collaborators
}

// newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator includes the requested fields of the GraphQL type ProjectCollaborator.
type newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator struct {
	Id   uuid.UUID                                                                        `json:"id"`
	User newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser `json:"user"`
	Role ProjectCollaboratorRole                                                          `json:"role"`
}

// GetId returns newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator.Id, and is useful for accessing the field via an interface.
func (v *newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator) GetId() uuid.UUID {
	return v.Id
}

// GetUser returns newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator.User, and is useful for accessing the field via an interface.
func (v *newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator) GetUser() newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser {
	return v.User
}

// GetRole returns newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator.Role, and is useful for accessing the field via an interface.
func (v *newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator) GetRole() ProjectCollaboratorRole {
	return v.Role
}

// newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser includes the requested fields of the GraphQL type User.
type newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser struct {
	UserPublicCommon `json:"-"`
}

// GetId returns newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser.Id, and is useful for accessing the field via an interface.
func (v *newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser) GetId() uuid.UUID {
	return v.UserPublicCommon.Id
}

// GetName returns newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser.Name, and is useful for accessing the field via an interface.
func (v *newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser) GetName() string {
	return v.UserPublicCommon.Name
}

// GetLogin returns newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser.Login, and is useful for accessing the field via an interface.
func (v *newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser) GetLogin() string {
	return v.UserPublicCommon.Login
}

// GetAvatar returns newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser.Avatar, and is useful for accessing the field via an interface.
func (v *newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser) GetAvatar() *string {
	return v.UserPublicCommon.Avatar
}

// GetIsTeam returns newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser.IsTeam, and is useful for accessing the field via an interface.
func (v *newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser) GetIsTeam() *bool {
	return v.UserPublicCommon.IsTeam
}

func (v *newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser
		graphql.NoUnmarshalJSON
	}
	firstPass.newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserPublicCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalnewTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Login string `json:"login"`

	Avatar *string `json:"avatar"`

	IsTeam *bool `json:"isTeam"`
}

func (v *newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *newTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser) __premarshalJSON() (*__premarshalnewTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser, error) {
	var retval __premarshalnewTeamMemberSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser

	retval.Id = v.UserPublicCommon.Id
	retval.Name = v.UserPublicCommon.Name
	retval.Login = v.UserPublicCommon.Login
	retval.Avatar = v.UserPublicCommon.Avatar
	retval.IsTeam = v.UserPublicCommon.IsTeam
	return &retval, nil
}

// newTeamMemberSuggestionsResponse is returned by newTeamMemberSuggestions on success.
type newTeamMemberSuggestionsResponse struct {
	CurrentUser newTeamMemberSuggestionsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns newTeamMemberSuggestionsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *newTeamMemberSuggestionsResponse) GetCurrentUser() newTeamMemberSuggestionsCurrentUser {
	return v.CurrentUser
}

// newTeamProjectSuggestionsCurrentUser includes the requested fields of the GraphQL type User.
type newTeamProjectSuggestionsCurrentUser struct {
	Id    uuid.UUID                                       `json:"id"`
	Repos []newTeamProjectSuggestionsCurrentUserReposRepo `json:"repos"`
}

// GetId returns newTeamProjectSuggestionsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetRepos returns newTeamProjectSuggestionsCurrentUser.Repos, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUser) GetRepos() []newTeamProjectSuggestionsCurrentUserReposRepo {
	return v.Repos
}

// newTeamProjectSuggestionsCurrentUserReposRepo includes the requested fields of the GraphQL type Repo.
type newTeamProjectSuggestionsCurrentUserReposRepo struct {
	RepoCommon    `json:"-"`
	Volumes       []newTeamProjectSuggestionsCurrentUserReposRepoVolumesVolumeSpec                `json:"volumes"`
	Collaborators []newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator `json:"collaborators"`
}

// GetVolumes returns newTeamProjectSuggestionsCurrentUserReposRepo.Volumes, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetVolumes() []newTeamProjectSuggestionsCurrentUserReposRepoVolumesVolumeSpec {
	return v.Volumes
}

// GetCollaborators returns newTeamProjectSuggestionsCurrentUserReposRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetCollaborators() []newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator {
	return v.Collaborators
}

// GetId returns newTeamProjectSuggestionsCurrentUserReposRepo.Id, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetId() uuid.UUID { return v.RepoCommon.Id }

// GetPath returns newTeamProjectSuggestionsCurrentUserReposRepo.Path, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetPath() string { return v.RepoCommon.Path }

// GetName returns newTeamProjectSuggestionsCurrentUserReposRepo.Name, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetName() string { return v.RepoCommon.Name }

// GetEnabled returns newTeamProjectSuggestionsCurrentUserReposRepo.Enabled, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetEnabled() bool {
	return v.RepoCommon.Enabled
}

// GetSource returns newTeamProjectSuggestionsCurrentUserReposRepo.Source, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoCommon.Source
}

// GetDeployTarget returns newTeamProjectSuggestionsCurrentUserReposRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetDeployTarget() *DeployTarget {
	return v.RepoCommon.DeployTarget
}

// GetDeployType returns newTeamProjectSuggestionsCurrentUserReposRepo.DeployType, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetDeployType() *DeployType {
	return v.RepoCommon.DeployType
}

// GetDeployService returns newTeamProjectSuggestionsCurrentUserReposRepo.DeployService, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetDeployService() *bool {
	return v.RepoCommon.DeployService
}

// GetDeployJob returns newTeamProjectSuggestionsCurrentUserReposRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetDeployJob() *bool {
	return v.RepoCommon.DeployJob
}

// GetAwsAccount returns newTeamProjectSuggestionsCurrentUserReposRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns newTeamProjectSuggestionsCurrentUserReposRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns newTeamProjectSuggestionsCurrentUserReposRepo.Image, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetImage() *string { return v.RepoCommon.Image }

// GetCpu returns newTeamProjectSuggestionsCurrentUserReposRepo.Cpu, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetCpu() *string { return v.RepoCommon.Cpu }

// GetMemory returns newTeamProjectSuggestionsCurrentUserReposRepo.Memory, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetMemory() *string {
	return v.RepoCommon.Memory
}

// GetGpu returns newTeamProjectSuggestionsCurrentUserReposRepo.Gpu, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoCommon.Gpu
}

// GetTpu returns newTeamProjectSuggestionsCurrentUserReposRepo.Tpu, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoCommon.Tpu
}

// GetUpdatedAt returns newTeamProjectSuggestionsCurrentUserReposRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetUpdatedAt() time.Time {
	return v.RepoCommon.UpdatedAt
}

// GetDisableReason returns newTeamProjectSuggestionsCurrentUserReposRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetDisableReason() *DisableReason {
	return v.RepoCommon.DisableReason
}

// GetCluster returns newTeamProjectSuggestionsCurrentUserReposRepo.Cluster, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetCluster() *RepoCommonCluster {
	return v.RepoCommon.Cluster
}

// GetDatabaseProvider returns newTeamProjectSuggestionsCurrentUserReposRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns newTeamProjectSuggestionsCurrentUserReposRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns newTeamProjectSuggestionsCurrentUserReposRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCommon.Autoscaling
}

// GetOwner returns newTeamProjectSuggestionsCurrentUserReposRepo.Owner, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoCommon.Owner
}

// GetProject returns newTeamProjectSuggestionsCurrentUserReposRepo.Project, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetProject() *RepoCommonProject {
	return v.RepoCommon.Project
}

// GetProjectEnvironment returns newTeamProjectSuggestionsCurrentUserReposRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *newTeamProjectSuggestionsCurrentUserReposRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*newTeamProjectSuggestionsCurrentUserReposRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.newTeamProjectSuggestionsCurrentUserReposRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalnewTeamProjectSuggestionsCurrentUserReposRepo struct {
	Volumes []newTeamProjectSuggestionsCurrentUserReposRepoVolumesVolumeSpec `json:"volumes"`

	Collaborators []newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator `json:"collaborators"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *newTeamProjectSuggestionsCurrentUserReposRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *newTeamProjectSuggestionsCurrentUserReposRepo) __premarshalJSON() (*__premarshalnewTeamProjectSuggestionsCurrentUserReposRepo, error) {
	var retval __premarshalnewTeamProjectSuggestionsCurrentUserReposRepo

	retval.Volumes = v.Volumes
	retval.Collaborators = v.Collaborators
	retval.Id = v.RepoCommon.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator includes the requested fields of the GraphQL type ProjectCollaborator.
type newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator struct {
	Id   uuid.UUID                                                                         `json:"id"`
	User newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser `json:"user"`
	Role ProjectCollaboratorRole                                                           `json:"role"`
}

// GetId returns newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator.Id, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator) GetId() uuid.UUID {
	return v.Id
}

// GetUser returns newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator.User, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator) GetUser() newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser {
	return v.User
}

// GetRole returns newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator.Role, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaborator) GetRole() ProjectCollaboratorRole {
	return v.Role
}

// newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser includes the requested fields of the GraphQL type User.
type newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser.Id, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser) GetId() uuid.UUID {
	return v.Id
}

// GetName returns newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser.Name, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepoCollaboratorsProjectCollaboratorUser) GetName() string {
	return v.Name
}

// newTeamProjectSuggestionsCurrentUserReposRepoVolumesVolumeSpec includes the requested fields of the GraphQL type VolumeSpec.
type newTeamProjectSuggestionsCurrentUserReposRepoVolumesVolumeSpec struct {
	MountPath string `json:"mountPath"`
	Size      int    `json:"size"`
}

// GetMountPath returns newTeamProjectSuggestionsCurrentUserReposRepoVolumesVolumeSpec.MountPath, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepoVolumesVolumeSpec) GetMountPath() string {
	return v.MountPath
}

// GetSize returns newTeamProjectSuggestionsCurrentUserReposRepoVolumesVolumeSpec.Size, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsCurrentUserReposRepoVolumesVolumeSpec) GetSize() int { return v.Size }

// newTeamProjectSuggestionsResponse is returned by newTeamProjectSuggestions on success.
type newTeamProjectSuggestionsResponse struct {
	CurrentUser newTeamProjectSuggestionsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns newTeamProjectSuggestionsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *newTeamProjectSuggestionsResponse) GetCurrentUser() newTeamProjectSuggestionsCurrentUser {
	return v.CurrentUser
}

// paginatedRepoDeploymentsForProjectEnvironmentProject includes the requested fields of the GraphQL type Project.
type paginatedRepoDeploymentsForProjectEnvironmentProject struct {
	// - v0.ProjectID or v1.GroupID
	Id uuid.UUID `json:"id"`
	// - id: v0.EnvironmentID or v1.SubGroupID
	Environment paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironment `json:"environment"`
}

// GetId returns paginatedRepoDeploymentsForProjectEnvironmentProject.Id, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProject) GetId() uuid.UUID { return v.Id }

// GetEnvironment returns paginatedRepoDeploymentsForProjectEnvironmentProject.Environment, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProject) GetEnvironment() paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironment {
	return v.Environment
}

// paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id             uuid.UUID                                                                     `json:"id"`
	Name           string                                                                        `json:"name"`
	Overview       []*paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentOverview    `json:"overview"`
	RepoConnection paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnection `json:"repoConnection"`
}

// GetId returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironment) GetId() uuid.UUID {
	return v.Id
}

// GetName returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironment) GetName() string {
	return v.Name
}

// GetOverview returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironment.Overview, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironment) GetOverview() []*paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentOverview {
	return v.Overview
}

// GetRepoConnection returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironment.RepoConnection, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironment) GetRepoConnection() paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnection {
	return v.RepoConnection
}

// paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentOverview includes the requested fields of the GraphQL type EnvironmentOverview.
type paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentOverview struct {
	DeploymentStatus *DeploymentStatus `json:"deploymentStatus"`
	Count            *int              `json:"count"`
}

// GetDeploymentStatus returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentOverview.DeploymentStatus, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentOverview) GetDeploymentStatus() *DeploymentStatus {
	return v.DeploymentStatus
}

// GetCount returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentOverview.Count, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentOverview) GetCount() *int {
	return v.Count
}

// paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnection includes the requested fields of the GraphQL type RepoConnection.
type paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnection struct {
	TotalCount int                                                                                      `json:"totalCount"`
	Nodes      []paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo `json:"nodes"`
	PageInfo   paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo    `json:"pageInfo"`
}

// GetTotalCount returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnection.Nodes, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnection) GetNodes() []paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo {
	return v.Nodes
}

// GetPageInfo returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnection) GetPageInfo() paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo {
	return v.PageInfo
}

// paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo includes the requested fields of the GraphQL type Repo.
type paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo struct {
	// - v0.RepoID
	Id                   uuid.UUID                                                                                                   `json:"id"`
	ProductionDeployment *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment `json:"productionDeployment"`
}

// GetId returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Id, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetId() uuid.UUID {
	return v.Id
}

// GetProductionDeployment returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetProductionDeployment() *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment {
	return v.ProductionDeployment
}

// paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment includes the requested fields of the GraphQL type Deployment.
type paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment struct {
	Id               uuid.UUID `json:"id"`
	DeploymentCommon `json:"-"`
}

// GetId returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment.Id, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) GetId() uuid.UUID {
	return v.Id
}

// GetDescription returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment.Description, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) GetDescription() *string {
	return v.DeploymentCommon.Description
}

// GetVersion returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment.Version, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) GetVersion() string {
	return v.DeploymentCommon.Version
}

// GetStatus returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment.Status, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) GetStatus() DeploymentStatus {
	return v.DeploymentCommon.Status
}

// GetBranch returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment.Branch, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) GetBranch() *string {
	return v.DeploymentCommon.Branch
}

// GetEndpoints returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) GetEndpoints() []string {
	return v.DeploymentCommon.Endpoints
}

// GetPrivateEndpoint returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) GetPrivateEndpoint() *string {
	return v.DeploymentCommon.PrivateEndpoint
}

// GetErrorMessage returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment.ErrorMessage, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) GetErrorMessage() *string {
	return v.DeploymentCommon.ErrorMessage
}

// GetDeployStatus returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment.DeployStatus, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) GetDeployStatus() *DeploymentCommonDeployStatus {
	return v.DeploymentCommon.DeployStatus
}

// GetBuild returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment.Build, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) GetBuild() *DeploymentCommonBuild {
	return v.DeploymentCommon.Build
}

// GetAlternativeImages returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment.AlternativeImages, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) GetAlternativeImages() []DeploymentCommonAlternativeImagesAlternativeImage {
	return v.DeploymentCommon.AlternativeImages
}

// GetUpdatedAt returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) GetUpdatedAt() time.Time {
	return v.DeploymentCommon.UpdatedAt
}

// GetCreatedAt returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment.CreatedAt, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) GetCreatedAt() time.Time {
	return v.DeploymentCommon.CreatedAt
}

func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment
		graphql.NoUnmarshalJSON
	}
	firstPass.paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpaginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment struct {
	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	Version string `json:"version"`

	Status DeploymentStatus `json:"status"`

	Branch *string `json:"branch"`

	Endpoints []string `json:"endpoints"`

	PrivateEndpoint *string `json:"privateEndpoint"`

	ErrorMessage *string `json:"errorMessage"`

	DeployStatus *DeploymentCommonDeployStatus `json:"deployStatus"`

	Build *DeploymentCommonBuild `json:"build"`

	AlternativeImages []DeploymentCommonAlternativeImagesAlternativeImage `json:"alternativeImages"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment) __premarshalJSON() (*__premarshalpaginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment, error) {
	var retval __premarshalpaginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepoProductionDeployment

	retval.Id = v.Id
	retval.Description = v.DeploymentCommon.Description
	retval.Version = v.DeploymentCommon.Version
	retval.Status = v.DeploymentCommon.Status
	retval.Branch = v.DeploymentCommon.Branch
	retval.Endpoints = v.DeploymentCommon.Endpoints
	retval.PrivateEndpoint = v.DeploymentCommon.PrivateEndpoint
	retval.ErrorMessage = v.DeploymentCommon.ErrorMessage
	retval.DeployStatus = v.DeploymentCommon.DeployStatus
	retval.Build = v.DeploymentCommon.Build
	retval.AlternativeImages = v.DeploymentCommon.AlternativeImages
	retval.UpdatedAt = v.DeploymentCommon.UpdatedAt
	retval.CreatedAt = v.DeploymentCommon.CreatedAt
	return &retval, nil
}

// paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetEndCursor returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetHasPreviousPage returns paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// paginatedRepoDeploymentsForProjectEnvironmentResponse is returned by paginatedRepoDeploymentsForProjectEnvironment on success.
type paginatedRepoDeploymentsForProjectEnvironmentResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *paginatedRepoDeploymentsForProjectEnvironmentProject `json:"project"`
}

// GetProject returns paginatedRepoDeploymentsForProjectEnvironmentResponse.Project, and is useful for accessing the field via an interface.
func (v *paginatedRepoDeploymentsForProjectEnvironmentResponse) GetProject() *paginatedRepoDeploymentsForProjectEnvironmentProject {
	return v.Project
}

// paginatedReposForProjectEnvironmentProject includes the requested fields of the GraphQL type Project.
type paginatedReposForProjectEnvironmentProject struct {
	// - v0.ProjectID or v1.GroupID
	Id uuid.UUID `json:"id"`
	// - id: v0.EnvironmentID or v1.SubGroupID
	Environment paginatedReposForProjectEnvironmentProjectEnvironment `json:"environment"`
}

// GetId returns paginatedReposForProjectEnvironmentProject.Id, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProject) GetId() uuid.UUID { return v.Id }

// GetEnvironment returns paginatedReposForProjectEnvironmentProject.Environment, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProject) GetEnvironment() paginatedReposForProjectEnvironmentProjectEnvironment {
	return v.Environment
}

// paginatedReposForProjectEnvironmentProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type paginatedReposForProjectEnvironmentProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id             uuid.UUID                                                           `json:"id"`
	Name           string                                                              `json:"name"`
	Overview       []*paginatedReposForProjectEnvironmentProjectEnvironmentOverview    `json:"overview"`
	RepoConnection paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnection `json:"repoConnection"`
}

// GetId returns paginatedReposForProjectEnvironmentProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns paginatedReposForProjectEnvironmentProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironment) GetName() string { return v.Name }

// GetOverview returns paginatedReposForProjectEnvironmentProjectEnvironment.Overview, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironment) GetOverview() []*paginatedReposForProjectEnvironmentProjectEnvironmentOverview {
	return v.Overview
}

// GetRepoConnection returns paginatedReposForProjectEnvironmentProjectEnvironment.RepoConnection, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironment) GetRepoConnection() paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnection {
	return v.RepoConnection
}

// paginatedReposForProjectEnvironmentProjectEnvironmentOverview includes the requested fields of the GraphQL type EnvironmentOverview.
type paginatedReposForProjectEnvironmentProjectEnvironmentOverview struct {
	DeploymentStatus *DeploymentStatus `json:"deploymentStatus"`
	Count            *int              `json:"count"`
}

// GetDeploymentStatus returns paginatedReposForProjectEnvironmentProjectEnvironmentOverview.DeploymentStatus, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentOverview) GetDeploymentStatus() *DeploymentStatus {
	return v.DeploymentStatus
}

// GetCount returns paginatedReposForProjectEnvironmentProjectEnvironmentOverview.Count, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentOverview) GetCount() *int {
	return v.Count
}

// paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnection includes the requested fields of the GraphQL type RepoConnection.
type paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnection struct {
	TotalCount int                                                                            `json:"totalCount"`
	Nodes      []paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo `json:"nodes"`
	PageInfo   paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo    `json:"pageInfo"`
}

// GetTotalCount returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnection.Nodes, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnection) GetNodes() []paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo {
	return v.Nodes
}

// GetPageInfo returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnection) GetPageInfo() paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo {
	return v.PageInfo
}

// paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo includes the requested fields of the GraphQL type Repo.
type paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo struct {
	RepoCommon `json:"-"`
}

// GetId returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Id, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetId() uuid.UUID {
	return v.RepoCommon.Id
}

// GetPath returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Path, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetPath() string {
	return v.RepoCommon.Path
}

// GetName returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Name, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetName() string {
	return v.RepoCommon.Name
}

// GetEnabled returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Enabled, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetEnabled() bool {
	return v.RepoCommon.Enabled
}

// GetSource returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Source, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoCommon.Source
}

// GetDeployTarget returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetDeployTarget() *DeployTarget {
	return v.RepoCommon.DeployTarget
}

// GetDeployType returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.DeployType, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetDeployType() *DeployType {
	return v.RepoCommon.DeployType
}

// GetDeployService returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.DeployService, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetDeployService() *bool {
	return v.RepoCommon.DeployService
}

// GetDeployJob returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetDeployJob() *bool {
	return v.RepoCommon.DeployJob
}

// GetAwsAccount returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommon.AwsAccount
}

// GetGcpAccount returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommon.GcpAccount
}

// GetImage returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Image, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetImage() *string {
	return v.RepoCommon.Image
}

// GetCpu returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Cpu, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetCpu() *string {
	return v.RepoCommon.Cpu
}

// GetMemory returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Memory, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetMemory() *string {
	return v.RepoCommon.Memory
}

// GetGpu returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Gpu, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoCommon.Gpu
}

// GetTpu returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Tpu, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoCommon.Tpu
}

// GetUpdatedAt returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetUpdatedAt() time.Time {
	return v.RepoCommon.UpdatedAt
}

// GetDisableReason returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetDisableReason() *DisableReason {
	return v.RepoCommon.DisableReason
}

// GetCluster returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Cluster, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetCluster() *RepoCommonCluster {
	return v.RepoCommon.Cluster
}

// GetDatabaseProvider returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCommon.Autoscaling
}

// GetOwner returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Owner, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoCommon.Owner
}

// GetProject returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.Project, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetProject() *RepoCommonProject {
	return v.RepoCommon.Project
}

// GetProjectEnvironment returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommon.ProjectEnvironment
}

func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpaginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo struct {
	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo) __premarshalJSON() (*__premarshalpaginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo, error) {
	var retval __premarshalpaginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionNodesRepo

	retval.Id = v.RepoCommon.Id
	retval.Path = v.RepoCommon.Path
	retval.Name = v.RepoCommon.Name
	retval.Enabled = v.RepoCommon.Enabled
	retval.Source = v.RepoCommon.Source
	retval.DeployTarget = v.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommon.DeployType
	retval.DeployService = v.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommon.GcpAccount
	retval.Image = v.RepoCommon.Image
	retval.Cpu = v.RepoCommon.Cpu
	retval.Memory = v.RepoCommon.Memory
	retval.Gpu = v.RepoCommon.Gpu
	retval.Tpu = v.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommon.Owner
	retval.Project = v.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetEndCursor returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetHasPreviousPage returns paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentProjectEnvironmentRepoConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// paginatedReposForProjectEnvironmentResponse is returned by paginatedReposForProjectEnvironment on success.
type paginatedReposForProjectEnvironmentResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *paginatedReposForProjectEnvironmentProject `json:"project"`
}

// GetProject returns paginatedReposForProjectEnvironmentResponse.Project, and is useful for accessing the field via an interface.
func (v *paginatedReposForProjectEnvironmentResponse) GetProject() *paginatedReposForProjectEnvironmentProject {
	return v.Project
}

// previewSubscriptionProductCatalog includes the requested fields of the GraphQL type ProductCatalog.
type previewSubscriptionProductCatalog struct {
	// Returns a preview of the new invoice that would result from modifying the
	// user's existing subscription based on the subscriptionCart.
	//
	// This query should be checked before attempting purchaseSubscription with the same cart.
	PreviewSubscription previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreview `json:"previewSubscription"`
}

// GetPreviewSubscription returns previewSubscriptionProductCatalog.PreviewSubscription, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalog) GetPreviewSubscription() previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreview {
	return v.PreviewSubscription
}

// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreview includes the requested fields of the GraphQL type SubscriptionPurchasePreview.
// The GraphQL type's documentation follows.
//
// A preview of the desired changes to a subscription.
//
// All fields should be checked for errors: if any errors are returned, a subsequent purchaseSubscription mutation would fail.
type previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreview struct {
	// A short name indicating the payment method on file that will be used for this subscription.
	// If no payment method is on file, this will be null.
	// If no payment method is on file, _and_ one is required to complete the purchase, an error will be returned."
	PaymentMethodName *string                                                                                                         `json:"paymentMethodName"`
	Products          []previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview `json:"products"`
}

// GetPaymentMethodName returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreview.PaymentMethodName, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreview) GetPaymentMethodName() *string {
	return v.PaymentMethodName
}

// GetProducts returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreview.Products, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreview) GetProducts() []previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview {
	return v.Products
}

// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview includes the requested fields of the GraphQL type ProductPurchasePreview.
type previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview struct {
	// The current product on the subscription that is possibly being replaced by newProduct.
	CurrentProduct *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct `json:"-"`
	// The product that will replace currentProduct, or currentProduct if no change is being made.
	NewProduct *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct `json:"-"`
	// The status of newProduct relative to the currentProduct (i.e. downgrade/no change/upgrade)
	NewProductStatus *CatalogProductStatus `json:"newProductStatus"`
	// The section name that the products in this preview would appear under in the product catalog.
	SectionName string `json:"sectionName"`
}

// GetCurrentProduct returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview.CurrentProduct, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview) GetCurrentProduct() *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct {
	return v.CurrentProduct
}

// GetNewProduct returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview.NewProduct, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview) GetNewProduct() *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct {
	return v.NewProduct
}

// GetNewProductStatus returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview.NewProductStatus, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview) GetNewProductStatus() *CatalogProductStatus {
	return v.NewProductStatus
}

// GetSectionName returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview.SectionName, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview) GetSectionName() string {
	return v.SectionName
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview
		CurrentProduct json.RawMessage `json:"currentProduct"`
		NewProduct     json.RawMessage `json:"newProduct"`
		graphql.NoUnmarshalJSON
	}
	firstPass.previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CurrentProduct
		src := firstPass.CurrentProduct
		if len(src) != 0 && string(src) != "null" {
			*dst = new(previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct)
			err = __unmarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview.CurrentProduct: %w", err)
			}
		}
	}

	{
		dst := &v.NewProduct
		src := firstPass.NewProduct
		if len(src) != 0 && string(src) != "null" {
			*dst = new(previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct)
			err = __unmarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview.NewProduct: %w", err)
			}
		}
	}
	return nil
}

type __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview struct {
	CurrentProduct json.RawMessage `json:"currentProduct"`

	NewProduct json.RawMessage `json:"newProduct"`

	NewProductStatus *CatalogProductStatus `json:"newProductStatus"`

	SectionName string `json:"sectionName"`
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview) __premarshalJSON() (*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview, error) {
	var retval __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview

	{

		dst := &retval.CurrentProduct
		src := v.CurrentProduct
		if src != nil {
			var err error
			*dst, err = __marshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview.CurrentProduct: %w", err)
			}
		}
	}
	{

		dst := &retval.NewProduct
		src := v.NewProduct
		if src != nil {
			var err error
			*dst, err = __marshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreview.NewProduct: %w", err)
			}
		}
	}
	retval.NewProductStatus = v.NewProductStatus
	retval.SectionName = v.SectionName
	return &retval, nil
}

// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct includes the requested fields of the GraphQL interface Product.
//
// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct is implemented by the following types:
// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess
// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2
// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack
// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier
type previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct interface {
	implementsGraphQLInterfacepreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	ProductDetail
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess) implementsGraphQLInterfacepreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess) implementsGraphQLInterfaceProductDetail() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2) implementsGraphQLInterfacepreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2) implementsGraphQLInterfaceProductDetail() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack) implementsGraphQLInterfacepreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack) implementsGraphQLInterfaceProductDetail() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier) implementsGraphQLInterfacepreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier) implementsGraphQLInterfaceProductDetail() {
}

func __unmarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct(b []byte, v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ApiAccess":
		*v = new(previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess)
		return json.Unmarshal(b, *v)
	case "PlanTierV2":
		*v = new(previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2)
		return json.Unmarshal(b, *v)
	case "ProjectPack":
		*v = new(previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack)
		return json.Unmarshal(b, *v)
	case "SupportTier":
		*v = new(previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Product.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct: "%v"`, tn.TypeName)
	}
}

func __marshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct(v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess:
		typename = "ApiAccess"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess
		}{typename, premarshaled}
		return json.Marshal(result)
	case *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2:
		typename = "PlanTierV2"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2
		}{typename, premarshaled}
		return json.Marshal(result)
	case *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack:
		typename = "ProjectPack"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack
		}{typename, premarshaled}
		return json.Marshal(result)
	case *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier:
		typename = "SupportTier"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProduct: "%T"`, v)
	}
}

// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess includes the requested fields of the GraphQL type ApiAccess.
type previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess struct {
	Typename               *string `json:"__typename"`
	ProductDetailApiAccess `json:"-"`
}

// GetTypename returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess.Typename, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailApiAccess.ProductTypeMetadata
}

// GetName returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess.Name, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess) GetName() *string {
	return v.ProductDetailApiAccess.Name
}

// GetDescription returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess.Description, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess) GetDescription() *string {
	return v.ProductDetailApiAccess.Description
}

// GetSku returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess.Sku, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess) GetSku() uuid.UUID {
	return v.ProductDetailApiAccess.Sku
}

// GetDisplayPrice returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess.DisplayPrice, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess) GetDisplayPrice() *string {
	return v.ProductDetailApiAccess.DisplayPrice
}

// GetUsage returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess.Usage, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess) GetUsage() []ProductDetailUsage {
	return v.ProductDetailApiAccess.Usage
}

// GetBenefits returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess.Benefits, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess) GetBenefits() []string {
	return v.ProductDetailApiAccess.Benefits
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess
		graphql.NoUnmarshalJSON
	}
	firstPass.previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailApiAccess)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess) __premarshalJSON() (*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess, error) {
	var retval __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductApiAccess

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailApiAccess.ProductTypeMetadata
	retval.Name = v.ProductDetailApiAccess.Name
	retval.Description = v.ProductDetailApiAccess.Description
	retval.Sku = v.ProductDetailApiAccess.Sku
	retval.DisplayPrice = v.ProductDetailApiAccess.DisplayPrice
	retval.Usage = v.ProductDetailApiAccess.Usage
	retval.Benefits = v.ProductDetailApiAccess.Benefits
	return &retval, nil
}

// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2 includes the requested fields of the GraphQL type PlanTierV2.
type previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2 struct {
	Typename                *string `json:"__typename"`
	ProductDetailPlanTierV2 `json:"-"`
}

// GetTypename returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2.Typename, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailPlanTierV2.ProductTypeMetadata
}

// GetName returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2.Name, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2) GetName() *string {
	return v.ProductDetailPlanTierV2.Name
}

// GetDescription returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2.Description, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2) GetDescription() *string {
	return v.ProductDetailPlanTierV2.Description
}

// GetSku returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2.Sku, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2) GetSku() uuid.UUID {
	return v.ProductDetailPlanTierV2.Sku
}

// GetDisplayPrice returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2.DisplayPrice, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2) GetDisplayPrice() *string {
	return v.ProductDetailPlanTierV2.DisplayPrice
}

// GetUsage returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2.Usage, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2) GetUsage() []ProductDetailUsage {
	return v.ProductDetailPlanTierV2.Usage
}

// GetBenefits returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2.Benefits, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2) GetBenefits() []string {
	return v.ProductDetailPlanTierV2.Benefits
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2
		graphql.NoUnmarshalJSON
	}
	firstPass.previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailPlanTierV2)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2 struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2) __premarshalJSON() (*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2, error) {
	var retval __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductPlanTierV2

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailPlanTierV2.ProductTypeMetadata
	retval.Name = v.ProductDetailPlanTierV2.Name
	retval.Description = v.ProductDetailPlanTierV2.Description
	retval.Sku = v.ProductDetailPlanTierV2.Sku
	retval.DisplayPrice = v.ProductDetailPlanTierV2.DisplayPrice
	retval.Usage = v.ProductDetailPlanTierV2.Usage
	retval.Benefits = v.ProductDetailPlanTierV2.Benefits
	return &retval, nil
}

// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack includes the requested fields of the GraphQL type ProjectPack.
type previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack struct {
	Typename                 *string `json:"__typename"`
	ProductDetailProjectPack `json:"-"`
}

// GetTypename returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack.Typename, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailProjectPack.ProductTypeMetadata
}

// GetName returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack.Name, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack) GetName() *string {
	return v.ProductDetailProjectPack.Name
}

// GetDescription returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack.Description, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack) GetDescription() *string {
	return v.ProductDetailProjectPack.Description
}

// GetSku returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack.Sku, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack) GetSku() uuid.UUID {
	return v.ProductDetailProjectPack.Sku
}

// GetDisplayPrice returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack.DisplayPrice, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack) GetDisplayPrice() *string {
	return v.ProductDetailProjectPack.DisplayPrice
}

// GetUsage returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack.Usage, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack) GetUsage() []ProductDetailUsage {
	return v.ProductDetailProjectPack.Usage
}

// GetBenefits returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack.Benefits, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack) GetBenefits() []string {
	return v.ProductDetailProjectPack.Benefits
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack
		graphql.NoUnmarshalJSON
	}
	firstPass.previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailProjectPack)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack) __premarshalJSON() (*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack, error) {
	var retval __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductProjectPack

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailProjectPack.ProductTypeMetadata
	retval.Name = v.ProductDetailProjectPack.Name
	retval.Description = v.ProductDetailProjectPack.Description
	retval.Sku = v.ProductDetailProjectPack.Sku
	retval.DisplayPrice = v.ProductDetailProjectPack.DisplayPrice
	retval.Usage = v.ProductDetailProjectPack.Usage
	retval.Benefits = v.ProductDetailProjectPack.Benefits
	return &retval, nil
}

// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier includes the requested fields of the GraphQL type SupportTier.
type previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier struct {
	Typename                 *string `json:"__typename"`
	ProductDetailSupportTier `json:"-"`
}

// GetTypename returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier.Typename, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailSupportTier.ProductTypeMetadata
}

// GetName returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier.Name, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier) GetName() *string {
	return v.ProductDetailSupportTier.Name
}

// GetDescription returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier.Description, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier) GetDescription() *string {
	return v.ProductDetailSupportTier.Description
}

// GetSku returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier.Sku, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier) GetSku() uuid.UUID {
	return v.ProductDetailSupportTier.Sku
}

// GetDisplayPrice returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier.DisplayPrice, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier) GetDisplayPrice() *string {
	return v.ProductDetailSupportTier.DisplayPrice
}

// GetUsage returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier.Usage, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier) GetUsage() []ProductDetailUsage {
	return v.ProductDetailSupportTier.Usage
}

// GetBenefits returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier.Benefits, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier) GetBenefits() []string {
	return v.ProductDetailSupportTier.Benefits
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier
		graphql.NoUnmarshalJSON
	}
	firstPass.previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailSupportTier)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier) __premarshalJSON() (*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier, error) {
	var retval __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewCurrentProductSupportTier

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailSupportTier.ProductTypeMetadata
	retval.Name = v.ProductDetailSupportTier.Name
	retval.Description = v.ProductDetailSupportTier.Description
	retval.Sku = v.ProductDetailSupportTier.Sku
	retval.DisplayPrice = v.ProductDetailSupportTier.DisplayPrice
	retval.Usage = v.ProductDetailSupportTier.Usage
	retval.Benefits = v.ProductDetailSupportTier.Benefits
	return &retval, nil
}

// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct includes the requested fields of the GraphQL interface Product.
//
// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct is implemented by the following types:
// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess
// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2
// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack
// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier
type previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct interface {
	implementsGraphQLInterfacepreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	ProductDetail
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess) implementsGraphQLInterfacepreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess) implementsGraphQLInterfaceProductDetail() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2) implementsGraphQLInterfacepreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2) implementsGraphQLInterfaceProductDetail() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack) implementsGraphQLInterfacepreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack) implementsGraphQLInterfaceProductDetail() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier) implementsGraphQLInterfacepreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct() {
}
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier) implementsGraphQLInterfaceProductDetail() {
}

func __unmarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct(b []byte, v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ApiAccess":
		*v = new(previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess)
		return json.Unmarshal(b, *v)
	case "PlanTierV2":
		*v = new(previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2)
		return json.Unmarshal(b, *v)
	case "ProjectPack":
		*v = new(previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack)
		return json.Unmarshal(b, *v)
	case "SupportTier":
		*v = new(previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Product.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct: "%v"`, tn.TypeName)
	}
}

func __marshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct(v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess:
		typename = "ApiAccess"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess
		}{typename, premarshaled}
		return json.Marshal(result)
	case *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2:
		typename = "PlanTierV2"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2
		}{typename, premarshaled}
		return json.Marshal(result)
	case *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack:
		typename = "ProjectPack"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack
		}{typename, premarshaled}
		return json.Marshal(result)
	case *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier:
		typename = "SupportTier"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProduct: "%T"`, v)
	}
}

// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess includes the requested fields of the GraphQL type ApiAccess.
type previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess struct {
	Typename               *string `json:"__typename"`
	ProductDetailApiAccess `json:"-"`
}

// GetTypename returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess.Typename, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailApiAccess.ProductTypeMetadata
}

// GetName returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess.Name, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess) GetName() *string {
	return v.ProductDetailApiAccess.Name
}

// GetDescription returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess.Description, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess) GetDescription() *string {
	return v.ProductDetailApiAccess.Description
}

// GetSku returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess.Sku, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess) GetSku() uuid.UUID {
	return v.ProductDetailApiAccess.Sku
}

// GetDisplayPrice returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess.DisplayPrice, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess) GetDisplayPrice() *string {
	return v.ProductDetailApiAccess.DisplayPrice
}

// GetUsage returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess.Usage, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess) GetUsage() []ProductDetailUsage {
	return v.ProductDetailApiAccess.Usage
}

// GetBenefits returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess.Benefits, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess) GetBenefits() []string {
	return v.ProductDetailApiAccess.Benefits
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess
		graphql.NoUnmarshalJSON
	}
	firstPass.previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailApiAccess)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess) __premarshalJSON() (*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess, error) {
	var retval __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductApiAccess

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailApiAccess.ProductTypeMetadata
	retval.Name = v.ProductDetailApiAccess.Name
	retval.Description = v.ProductDetailApiAccess.Description
	retval.Sku = v.ProductDetailApiAccess.Sku
	retval.DisplayPrice = v.ProductDetailApiAccess.DisplayPrice
	retval.Usage = v.ProductDetailApiAccess.Usage
	retval.Benefits = v.ProductDetailApiAccess.Benefits
	return &retval, nil
}

// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2 includes the requested fields of the GraphQL type PlanTierV2.
type previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2 struct {
	Typename                *string `json:"__typename"`
	ProductDetailPlanTierV2 `json:"-"`
}

// GetTypename returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2.Typename, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailPlanTierV2.ProductTypeMetadata
}

// GetName returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2.Name, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2) GetName() *string {
	return v.ProductDetailPlanTierV2.Name
}

// GetDescription returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2.Description, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2) GetDescription() *string {
	return v.ProductDetailPlanTierV2.Description
}

// GetSku returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2.Sku, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2) GetSku() uuid.UUID {
	return v.ProductDetailPlanTierV2.Sku
}

// GetDisplayPrice returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2.DisplayPrice, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2) GetDisplayPrice() *string {
	return v.ProductDetailPlanTierV2.DisplayPrice
}

// GetUsage returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2.Usage, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2) GetUsage() []ProductDetailUsage {
	return v.ProductDetailPlanTierV2.Usage
}

// GetBenefits returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2.Benefits, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2) GetBenefits() []string {
	return v.ProductDetailPlanTierV2.Benefits
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2
		graphql.NoUnmarshalJSON
	}
	firstPass.previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailPlanTierV2)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2 struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2) __premarshalJSON() (*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2, error) {
	var retval __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductPlanTierV2

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailPlanTierV2.ProductTypeMetadata
	retval.Name = v.ProductDetailPlanTierV2.Name
	retval.Description = v.ProductDetailPlanTierV2.Description
	retval.Sku = v.ProductDetailPlanTierV2.Sku
	retval.DisplayPrice = v.ProductDetailPlanTierV2.DisplayPrice
	retval.Usage = v.ProductDetailPlanTierV2.Usage
	retval.Benefits = v.ProductDetailPlanTierV2.Benefits
	return &retval, nil
}

// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack includes the requested fields of the GraphQL type ProjectPack.
type previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack struct {
	Typename                 *string `json:"__typename"`
	ProductDetailProjectPack `json:"-"`
}

// GetTypename returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack.Typename, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailProjectPack.ProductTypeMetadata
}

// GetName returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack.Name, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack) GetName() *string {
	return v.ProductDetailProjectPack.Name
}

// GetDescription returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack.Description, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack) GetDescription() *string {
	return v.ProductDetailProjectPack.Description
}

// GetSku returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack.Sku, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack) GetSku() uuid.UUID {
	return v.ProductDetailProjectPack.Sku
}

// GetDisplayPrice returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack.DisplayPrice, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack) GetDisplayPrice() *string {
	return v.ProductDetailProjectPack.DisplayPrice
}

// GetUsage returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack.Usage, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack) GetUsage() []ProductDetailUsage {
	return v.ProductDetailProjectPack.Usage
}

// GetBenefits returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack.Benefits, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack) GetBenefits() []string {
	return v.ProductDetailProjectPack.Benefits
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack
		graphql.NoUnmarshalJSON
	}
	firstPass.previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailProjectPack)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack) __premarshalJSON() (*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack, error) {
	var retval __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductProjectPack

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailProjectPack.ProductTypeMetadata
	retval.Name = v.ProductDetailProjectPack.Name
	retval.Description = v.ProductDetailProjectPack.Description
	retval.Sku = v.ProductDetailProjectPack.Sku
	retval.DisplayPrice = v.ProductDetailProjectPack.DisplayPrice
	retval.Usage = v.ProductDetailProjectPack.Usage
	retval.Benefits = v.ProductDetailProjectPack.Benefits
	return &retval, nil
}

// previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier includes the requested fields of the GraphQL type SupportTier.
type previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier struct {
	Typename                 *string `json:"__typename"`
	ProductDetailSupportTier `json:"-"`
}

// GetTypename returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier.Typename, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailSupportTier.ProductTypeMetadata
}

// GetName returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier.Name, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier) GetName() *string {
	return v.ProductDetailSupportTier.Name
}

// GetDescription returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier.Description, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier) GetDescription() *string {
	return v.ProductDetailSupportTier.Description
}

// GetSku returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier.Sku, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier) GetSku() uuid.UUID {
	return v.ProductDetailSupportTier.Sku
}

// GetDisplayPrice returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier.DisplayPrice, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier) GetDisplayPrice() *string {
	return v.ProductDetailSupportTier.DisplayPrice
}

// GetUsage returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier.Usage, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier) GetUsage() []ProductDetailUsage {
	return v.ProductDetailSupportTier.Usage
}

// GetBenefits returns previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier.Benefits, and is useful for accessing the field via an interface.
func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier) GetBenefits() []string {
	return v.ProductDetailSupportTier.Benefits
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier
		graphql.NoUnmarshalJSON
	}
	firstPass.previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailSupportTier)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *previewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier) __premarshalJSON() (*__premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier, error) {
	var retval __premarshalpreviewSubscriptionProductCatalogPreviewSubscriptionSubscriptionPurchasePreviewProductsProductPurchasePreviewNewProductSupportTier

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailSupportTier.ProductTypeMetadata
	retval.Name = v.ProductDetailSupportTier.Name
	retval.Description = v.ProductDetailSupportTier.Description
	retval.Sku = v.ProductDetailSupportTier.Sku
	retval.DisplayPrice = v.ProductDetailSupportTier.DisplayPrice
	retval.Usage = v.ProductDetailSupportTier.Usage
	retval.Benefits = v.ProductDetailSupportTier.Benefits
	return &retval, nil
}

// previewSubscriptionResponse is returned by previewSubscription on success.
type previewSubscriptionResponse struct {
	ProductCatalog previewSubscriptionProductCatalog `json:"productCatalog"`
}

// GetProductCatalog returns previewSubscriptionResponse.ProductCatalog, and is useful for accessing the field via an interface.
func (v *previewSubscriptionResponse) GetProductCatalog() previewSubscriptionProductCatalog {
	return v.ProductCatalog
}

// projectActiveBranchesCountCurrentUser includes the requested fields of the GraphQL type User.
type projectActiveBranchesCountCurrentUser struct {
	Repo *projectActiveBranchesCountCurrentUserRepo `json:"repo"`
}

// GetRepo returns projectActiveBranchesCountCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *projectActiveBranchesCountCurrentUser) GetRepo() *projectActiveBranchesCountCurrentUserRepo {
	return v.Repo
}

// projectActiveBranchesCountCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type projectActiveBranchesCountCurrentUserRepo struct {
	// - v0.RepoID
	Id         uuid.UUID                                                                `json:"id"`
	BranchesV2 *projectActiveBranchesCountCurrentUserRepoBranchesV2RepoBranchConnection `json:"branchesV2"`
}

// GetId returns projectActiveBranchesCountCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *projectActiveBranchesCountCurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetBranchesV2 returns projectActiveBranchesCountCurrentUserRepo.BranchesV2, and is useful for accessing the field via an interface.
func (v *projectActiveBranchesCountCurrentUserRepo) GetBranchesV2() *projectActiveBranchesCountCurrentUserRepoBranchesV2RepoBranchConnection {
	return v.BranchesV2
}

// projectActiveBranchesCountCurrentUserRepoBranchesV2RepoBranchConnection includes the requested fields of the GraphQL type RepoBranchConnection.
type projectActiveBranchesCountCurrentUserRepoBranchesV2RepoBranchConnection struct {
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns projectActiveBranchesCountCurrentUserRepoBranchesV2RepoBranchConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *projectActiveBranchesCountCurrentUserRepoBranchesV2RepoBranchConnection) GetTotalCount() int {
	return v.TotalCount
}

// projectActiveBranchesCountResponse is returned by projectActiveBranchesCount on success.
type projectActiveBranchesCountResponse struct {
	CurrentUser projectActiveBranchesCountCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns projectActiveBranchesCountResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *projectActiveBranchesCountResponse) GetCurrentUser() projectActiveBranchesCountCurrentUser {
	return v.CurrentUser
}

// projectBranchesCurrentUser includes the requested fields of the GraphQL type User.
type projectBranchesCurrentUser struct {
	Repo *projectBranchesCurrentUserRepo `json:"repo"`
}

// GetRepo returns projectBranchesCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUser) GetRepo() *projectBranchesCurrentUserRepo { return v.Repo }

// projectBranchesCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type projectBranchesCurrentUserRepo struct {
	// - v0.RepoID
	Id                 uuid.UUID                                                     `json:"id"`
	ProductionBranchV2 *projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2 `json:"productionBranchV2"`
	BranchesV2         *projectBranchesCurrentUserRepoBranchesV2RepoBranchConnection `json:"branchesV2"`
}

// GetId returns projectBranchesCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetProductionBranchV2 returns projectBranchesCurrentUserRepo.ProductionBranchV2, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepo) GetProductionBranchV2() *projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2 {
	return v.ProductionBranchV2
}

// GetBranchesV2 returns projectBranchesCurrentUserRepo.BranchesV2, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepo) GetBranchesV2() *projectBranchesCurrentUserRepoBranchesV2RepoBranchConnection {
	return v.BranchesV2
}

// projectBranchesCurrentUserRepoBranchesV2RepoBranchConnection includes the requested fields of the GraphQL type RepoBranchConnection.
type projectBranchesCurrentUserRepoBranchesV2RepoBranchConnection struct {
	Nodes []projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2 `json:"nodes"`
}

// GetNodes returns projectBranchesCurrentUserRepoBranchesV2RepoBranchConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoBranchesV2RepoBranchConnection) GetNodes() []projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2 {
	return v.Nodes
}

// projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2 includes the requested fields of the GraphQL type RepoBranchV2.
type projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2 struct {
	BranchCommon `json:"-"`
}

// GetId returns projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2.Id, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2) GetId() uuid.UUID {
	return v.BranchCommon.Id
}

// GetName returns projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2.Name, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2) GetName() string {
	return v.BranchCommon.Name
}

// GetCreatedAt returns projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2.CreatedAt, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2) GetCreatedAt() time.Time {
	return v.BranchCommon.CreatedAt
}

// GetUpdatedAt returns projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2.UpdatedAt, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2) GetUpdatedAt() time.Time {
	return v.BranchCommon.UpdatedAt
}

// GetState returns projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2.State, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2) GetState() *string {
	return v.BranchCommon.State
}

// GetEndpoints returns projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2.Endpoints, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2) GetEndpoints() []string {
	return v.BranchCommon.Endpoints
}

// GetLatestDeployment returns projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2.LatestDeployment, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2) GetLatestDeployment() *BranchCommonLatestDeployment {
	return v.BranchCommon.LatestDeployment
}

func (v *projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2
		graphql.NoUnmarshalJSON
	}
	firstPass.projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BranchCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2 struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	State *string `json:"state"`

	Endpoints []string `json:"endpoints"`

	LatestDeployment *BranchCommonLatestDeployment `json:"latestDeployment"`
}

func (v *projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2) __premarshalJSON() (*__premarshalprojectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2, error) {
	var retval __premarshalprojectBranchesCurrentUserRepoBranchesV2RepoBranchConnectionNodesRepoBranchV2

	retval.Id = v.BranchCommon.Id
	retval.Name = v.BranchCommon.Name
	retval.CreatedAt = v.BranchCommon.CreatedAt
	retval.UpdatedAt = v.BranchCommon.UpdatedAt
	retval.State = v.BranchCommon.State
	retval.Endpoints = v.BranchCommon.Endpoints
	retval.LatestDeployment = v.BranchCommon.LatestDeployment
	return &retval, nil
}

// projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2 includes the requested fields of the GraphQL type RepoBranchV2.
type projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2 struct {
	BranchCommon `json:"-"`
}

// GetId returns projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2.Id, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2) GetId() uuid.UUID {
	return v.BranchCommon.Id
}

// GetName returns projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2.Name, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2) GetName() string {
	return v.BranchCommon.Name
}

// GetCreatedAt returns projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2.CreatedAt, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2) GetCreatedAt() time.Time {
	return v.BranchCommon.CreatedAt
}

// GetUpdatedAt returns projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2.UpdatedAt, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2) GetUpdatedAt() time.Time {
	return v.BranchCommon.UpdatedAt
}

// GetState returns projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2.State, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2) GetState() *string {
	return v.BranchCommon.State
}

// GetEndpoints returns projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2.Endpoints, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2) GetEndpoints() []string {
	return v.BranchCommon.Endpoints
}

// GetLatestDeployment returns projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2.LatestDeployment, and is useful for accessing the field via an interface.
func (v *projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2) GetLatestDeployment() *BranchCommonLatestDeployment {
	return v.BranchCommon.LatestDeployment
}

func (v *projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2
		graphql.NoUnmarshalJSON
	}
	firstPass.projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BranchCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2 struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	State *string `json:"state"`

	Endpoints []string `json:"endpoints"`

	LatestDeployment *BranchCommonLatestDeployment `json:"latestDeployment"`
}

func (v *projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2) __premarshalJSON() (*__premarshalprojectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2, error) {
	var retval __premarshalprojectBranchesCurrentUserRepoProductionBranchV2RepoBranchV2

	retval.Id = v.BranchCommon.Id
	retval.Name = v.BranchCommon.Name
	retval.CreatedAt = v.BranchCommon.CreatedAt
	retval.UpdatedAt = v.BranchCommon.UpdatedAt
	retval.State = v.BranchCommon.State
	retval.Endpoints = v.BranchCommon.Endpoints
	retval.LatestDeployment = v.BranchCommon.LatestDeployment
	return &retval, nil
}

// projectBranchesResponse is returned by projectBranches on success.
type projectBranchesResponse struct {
	CurrentUser projectBranchesCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns projectBranchesResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *projectBranchesResponse) GetCurrentUser() projectBranchesCurrentUser { return v.CurrentUser }

// projectByIdProject includes the requested fields of the GraphQL type Project.
type projectByIdProject struct {
	ProjectBasic `json:"-"`
}

// GetId returns projectByIdProject.Id, and is useful for accessing the field via an interface.
func (v *projectByIdProject) GetId() uuid.UUID { return v.ProjectBasic.Id }

// GetName returns projectByIdProject.Name, and is useful for accessing the field via an interface.
func (v *projectByIdProject) GetName() string { return v.ProjectBasic.Name }

// GetOwner returns projectByIdProject.Owner, and is useful for accessing the field via an interface.
func (v *projectByIdProject) GetOwner() ProjectBasicOwnerUser { return v.ProjectBasic.Owner }

func (v *projectByIdProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectByIdProject
		graphql.NoUnmarshalJSON
	}
	firstPass.projectByIdProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectByIdProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Owner ProjectBasicOwnerUser `json:"owner"`
}

func (v *projectByIdProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectByIdProject) __premarshalJSON() (*__premarshalprojectByIdProject, error) {
	var retval __premarshalprojectByIdProject

	retval.Id = v.ProjectBasic.Id
	retval.Name = v.ProjectBasic.Name
	retval.Owner = v.ProjectBasic.Owner
	return &retval, nil
}

// projectByIdResponse is returned by projectById on success.
type projectByIdResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *projectByIdProject `json:"project"`
}

// GetProject returns projectByIdResponse.Project, and is useful for accessing the field via an interface.
func (v *projectByIdResponse) GetProject() *projectByIdProject { return v.Project }

// projectCountResponse is returned by projectCount on success.
type projectCountResponse struct {
	User projectCountUser `json:"user"`
}

// GetUser returns projectCountResponse.User, and is useful for accessing the field via an interface.
func (v *projectCountResponse) GetUser() projectCountUser { return v.User }

// projectCountUser includes the requested fields of the GraphQL type User.
type projectCountUser struct {
	Id                uuid.UUID                                                    `json:"id"`
	ProjectV3Adapters *projectCountUserProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
}

// GetId returns projectCountUser.Id, and is useful for accessing the field via an interface.
func (v *projectCountUser) GetId() uuid.UUID { return v.Id }

// GetProjectV3Adapters returns projectCountUser.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *projectCountUser) GetProjectV3Adapters() *projectCountUserProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// projectCountUserProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type projectCountUserProjectV3AdaptersProjectV3AdapterConnection struct {
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns projectCountUserProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *projectCountUserProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.TotalCount
}

// projectEnvironmentByIdProject includes the requested fields of the GraphQL type Project.
type projectEnvironmentByIdProject struct {
	// - v0.ProjectID or v1.GroupID
	Id uuid.UUID `json:"id"`
	// - id: v0.EnvironmentID or v1.SubGroupID
	Environment projectEnvironmentByIdProjectEnvironment `json:"environment"`
}

// GetId returns projectEnvironmentByIdProject.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentByIdProject) GetId() uuid.UUID { return v.Id }

// GetEnvironment returns projectEnvironmentByIdProject.Environment, and is useful for accessing the field via an interface.
func (v *projectEnvironmentByIdProject) GetEnvironment() projectEnvironmentByIdProjectEnvironment {
	return v.Environment
}

// projectEnvironmentByIdProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type projectEnvironmentByIdProjectEnvironment struct {
	ProjectEnvironmentBasic `json:"-"`
}

// GetId returns projectEnvironmentByIdProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentByIdProjectEnvironment) GetId() uuid.UUID {
	return v.ProjectEnvironmentBasic.Id
}

// GetName returns projectEnvironmentByIdProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *projectEnvironmentByIdProjectEnvironment) GetName() string {
	return v.ProjectEnvironmentBasic.Name
}

func (v *projectEnvironmentByIdProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectEnvironmentByIdProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.projectEnvironmentByIdProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectEnvironmentBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectEnvironmentByIdProjectEnvironment struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *projectEnvironmentByIdProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectEnvironmentByIdProjectEnvironment) __premarshalJSON() (*__premarshalprojectEnvironmentByIdProjectEnvironment, error) {
	var retval __premarshalprojectEnvironmentByIdProjectEnvironment

	retval.Id = v.ProjectEnvironmentBasic.Id
	retval.Name = v.ProjectEnvironmentBasic.Name
	return &retval, nil
}

// projectEnvironmentByIdResponse is returned by projectEnvironmentById on success.
type projectEnvironmentByIdResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *projectEnvironmentByIdProject `json:"project"`
}

// GetProject returns projectEnvironmentByIdResponse.Project, and is useful for accessing the field via an interface.
func (v *projectEnvironmentByIdResponse) GetProject() *projectEnvironmentByIdProject {
	return v.Project
}

// projectEnvironmentProject includes the requested fields of the GraphQL type Project.
type projectEnvironmentProject struct {
	// - v0.ProjectID or v1.GroupID
	Id uuid.UUID `json:"id"`
	// - id: v0.EnvironmentID or v1.SubGroupID
	Environment projectEnvironmentProjectEnvironment `json:"environment"`
}

// GetId returns projectEnvironmentProject.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentProject) GetId() uuid.UUID { return v.Id }

// GetEnvironment returns projectEnvironmentProject.Environment, and is useful for accessing the field via an interface.
func (v *projectEnvironmentProject) GetEnvironment() projectEnvironmentProjectEnvironment {
	return v.Environment
}

// projectEnvironmentProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type projectEnvironmentProjectEnvironment struct {
	ProjectEnvironmentBasic `json:"-"`
}

// GetId returns projectEnvironmentProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentProjectEnvironment) GetId() uuid.UUID { return v.ProjectEnvironmentBasic.Id }

// GetName returns projectEnvironmentProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *projectEnvironmentProjectEnvironment) GetName() string {
	return v.ProjectEnvironmentBasic.Name
}

func (v *projectEnvironmentProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectEnvironmentProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.projectEnvironmentProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectEnvironmentBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectEnvironmentProjectEnvironment struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *projectEnvironmentProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectEnvironmentProjectEnvironment) __premarshalJSON() (*__premarshalprojectEnvironmentProjectEnvironment, error) {
	var retval __premarshalprojectEnvironmentProjectEnvironment

	retval.Id = v.ProjectEnvironmentBasic.Id
	retval.Name = v.ProjectEnvironmentBasic.Name
	return &retval, nil
}

// projectEnvironmentResponse is returned by projectEnvironment on success.
type projectEnvironmentResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *projectEnvironmentProject `json:"project"`
}

// GetProject returns projectEnvironmentResponse.Project, and is useful for accessing the field via an interface.
func (v *projectEnvironmentResponse) GetProject() *projectEnvironmentProject { return v.Project }

// projectEnvironmentVariablesProject includes the requested fields of the GraphQL type Project.
type projectEnvironmentVariablesProject struct {
	// - v0.ProjectID or v1.GroupID
	Id   uuid.UUID                                      `json:"id"`
	Envs []projectEnvironmentVariablesProjectEnvsEnvVar `json:"envs"`
}

// GetId returns projectEnvironmentVariablesProject.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentVariablesProject) GetId() uuid.UUID { return v.Id }

// GetEnvs returns projectEnvironmentVariablesProject.Envs, and is useful for accessing the field via an interface.
func (v *projectEnvironmentVariablesProject) GetEnvs() []projectEnvironmentVariablesProjectEnvsEnvVar {
	return v.Envs
}

// projectEnvironmentVariablesProjectEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type projectEnvironmentVariablesProjectEnvsEnvVar struct {
	EnvVarDetail `json:"-"`
}

// GetId returns projectEnvironmentVariablesProjectEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentVariablesProjectEnvsEnvVar) GetId() uuid.UUID { return v.EnvVarDetail.Id }

// GetName returns projectEnvironmentVariablesProjectEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *projectEnvironmentVariablesProjectEnvsEnvVar) GetName() string { return v.EnvVarDetail.Name }

// GetValue returns projectEnvironmentVariablesProjectEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *projectEnvironmentVariablesProjectEnvsEnvVar) GetValue() string { return v.EnvVarDetail.Value }

// GetVisible returns projectEnvironmentVariablesProjectEnvsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *projectEnvironmentVariablesProjectEnvsEnvVar) GetVisible() bool {
	return v.EnvVarDetail.Visible
}

// GetSealed returns projectEnvironmentVariablesProjectEnvsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *projectEnvironmentVariablesProjectEnvsEnvVar) GetSealed() bool { return v.EnvVarDetail.Sealed }

// GetSource returns projectEnvironmentVariablesProjectEnvsEnvVar.Source, and is useful for accessing the field via an interface.
func (v *projectEnvironmentVariablesProjectEnvsEnvVar) GetSource() *EnvVarDetailSourceEnvVarSource {
	return v.EnvVarDetail.Source
}

func (v *projectEnvironmentVariablesProjectEnvsEnvVar) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectEnvironmentVariablesProjectEnvsEnvVar
		graphql.NoUnmarshalJSON
	}
	firstPass.projectEnvironmentVariablesProjectEnvsEnvVar = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvVarDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectEnvironmentVariablesProjectEnvsEnvVar struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Value string `json:"value"`

	Visible bool `json:"visible"`

	Sealed bool `json:"sealed"`

	Source *EnvVarDetailSourceEnvVarSource `json:"source"`
}

func (v *projectEnvironmentVariablesProjectEnvsEnvVar) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectEnvironmentVariablesProjectEnvsEnvVar) __premarshalJSON() (*__premarshalprojectEnvironmentVariablesProjectEnvsEnvVar, error) {
	var retval __premarshalprojectEnvironmentVariablesProjectEnvsEnvVar

	retval.Id = v.EnvVarDetail.Id
	retval.Name = v.EnvVarDetail.Name
	retval.Value = v.EnvVarDetail.Value
	retval.Visible = v.EnvVarDetail.Visible
	retval.Sealed = v.EnvVarDetail.Sealed
	retval.Source = v.EnvVarDetail.Source
	return &retval, nil
}

// projectEnvironmentVariablesResponse is returned by projectEnvironmentVariables on success.
type projectEnvironmentVariablesResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *projectEnvironmentVariablesProject `json:"project"`
}

// GetProject returns projectEnvironmentVariablesResponse.Project, and is useful for accessing the field via an interface.
func (v *projectEnvironmentVariablesResponse) GetProject() *projectEnvironmentVariablesProject {
	return v.Project
}

// projectEnvironmentsAndRepoCountProject includes the requested fields of the GraphQL type Project.
type projectEnvironmentsAndRepoCountProject struct {
	// - v0.ProjectID or v1.GroupID
	Id           uuid.UUID                                                              `json:"id"`
	Environments []projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment `json:"environments"`
}

// GetId returns projectEnvironmentsAndRepoCountProject.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsAndRepoCountProject) GetId() uuid.UUID { return v.Id }

// GetEnvironments returns projectEnvironmentsAndRepoCountProject.Environments, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsAndRepoCountProject) GetEnvironments() []projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment {
	return v.Environments
}

// projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment struct {
	RepoConnection          projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironmentRepoConnection `json:"repoConnection"`
	ProjectEnvironmentBasic `json:"-"`
}

// GetRepoConnection returns projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment.RepoConnection, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment) GetRepoConnection() projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironmentRepoConnection {
	return v.RepoConnection
}

// GetId returns projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment) GetId() uuid.UUID {
	return v.ProjectEnvironmentBasic.Id
}

// GetName returns projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment) GetName() string {
	return v.ProjectEnvironmentBasic.Name
}

func (v *projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectEnvironmentBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment struct {
	RepoConnection projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironmentRepoConnection `json:"repoConnection"`

	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment) __premarshalJSON() (*__premarshalprojectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment, error) {
	var retval __premarshalprojectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironment

	retval.RepoConnection = v.RepoConnection
	retval.Id = v.ProjectEnvironmentBasic.Id
	retval.Name = v.ProjectEnvironmentBasic.Name
	return &retval, nil
}

// projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironmentRepoConnection includes the requested fields of the GraphQL type RepoConnection.
type projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironmentRepoConnection struct {
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironmentRepoConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsAndRepoCountProjectEnvironmentsProjectEnvironmentRepoConnection) GetTotalCount() int {
	return v.TotalCount
}

// projectEnvironmentsAndRepoCountResponse is returned by projectEnvironmentsAndRepoCount on success.
type projectEnvironmentsAndRepoCountResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *projectEnvironmentsAndRepoCountProject `json:"project"`
}

// GetProject returns projectEnvironmentsAndRepoCountResponse.Project, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsAndRepoCountResponse) GetProject() *projectEnvironmentsAndRepoCountProject {
	return v.Project
}

// projectEnvironmentsBasicProject includes the requested fields of the GraphQL type Project.
type projectEnvironmentsBasicProject struct {
	// - v0.ProjectID or v1.GroupID
	Id           uuid.UUID                                                       `json:"id"`
	Environments []projectEnvironmentsBasicProjectEnvironmentsProjectEnvironment `json:"environments"`
}

// GetId returns projectEnvironmentsBasicProject.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsBasicProject) GetId() uuid.UUID { return v.Id }

// GetEnvironments returns projectEnvironmentsBasicProject.Environments, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsBasicProject) GetEnvironments() []projectEnvironmentsBasicProjectEnvironmentsProjectEnvironment {
	return v.Environments
}

// projectEnvironmentsBasicProjectEnvironmentsProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type projectEnvironmentsBasicProjectEnvironmentsProjectEnvironment struct {
	ProjectEnvironmentBasic `json:"-"`
}

// GetId returns projectEnvironmentsBasicProjectEnvironmentsProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsBasicProjectEnvironmentsProjectEnvironment) GetId() uuid.UUID {
	return v.ProjectEnvironmentBasic.Id
}

// GetName returns projectEnvironmentsBasicProjectEnvironmentsProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsBasicProjectEnvironmentsProjectEnvironment) GetName() string {
	return v.ProjectEnvironmentBasic.Name
}

func (v *projectEnvironmentsBasicProjectEnvironmentsProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectEnvironmentsBasicProjectEnvironmentsProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.projectEnvironmentsBasicProjectEnvironmentsProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectEnvironmentBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectEnvironmentsBasicProjectEnvironmentsProjectEnvironment struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *projectEnvironmentsBasicProjectEnvironmentsProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectEnvironmentsBasicProjectEnvironmentsProjectEnvironment) __premarshalJSON() (*__premarshalprojectEnvironmentsBasicProjectEnvironmentsProjectEnvironment, error) {
	var retval __premarshalprojectEnvironmentsBasicProjectEnvironmentsProjectEnvironment

	retval.Id = v.ProjectEnvironmentBasic.Id
	retval.Name = v.ProjectEnvironmentBasic.Name
	return &retval, nil
}

// projectEnvironmentsBasicResponse is returned by projectEnvironmentsBasic on success.
type projectEnvironmentsBasicResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *projectEnvironmentsBasicProject `json:"project"`
}

// GetProject returns projectEnvironmentsBasicResponse.Project, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsBasicResponse) GetProject() *projectEnvironmentsBasicProject {
	return v.Project
}

// projectEnvironmentsByIdProject includes the requested fields of the GraphQL type Project.
type projectEnvironmentsByIdProject struct {
	// - v0.ProjectID or v1.GroupID
	Id           uuid.UUID                                                      `json:"id"`
	Environments []projectEnvironmentsByIdProjectEnvironmentsProjectEnvironment `json:"environments"`
}

// GetId returns projectEnvironmentsByIdProject.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsByIdProject) GetId() uuid.UUID { return v.Id }

// GetEnvironments returns projectEnvironmentsByIdProject.Environments, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsByIdProject) GetEnvironments() []projectEnvironmentsByIdProjectEnvironmentsProjectEnvironment {
	return v.Environments
}

// projectEnvironmentsByIdProjectEnvironmentsProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type projectEnvironmentsByIdProjectEnvironmentsProjectEnvironment struct {
	ProjectEnvironmentBasic `json:"-"`
}

// GetId returns projectEnvironmentsByIdProjectEnvironmentsProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsByIdProjectEnvironmentsProjectEnvironment) GetId() uuid.UUID {
	return v.ProjectEnvironmentBasic.Id
}

// GetName returns projectEnvironmentsByIdProjectEnvironmentsProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsByIdProjectEnvironmentsProjectEnvironment) GetName() string {
	return v.ProjectEnvironmentBasic.Name
}

func (v *projectEnvironmentsByIdProjectEnvironmentsProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectEnvironmentsByIdProjectEnvironmentsProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.projectEnvironmentsByIdProjectEnvironmentsProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectEnvironmentBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectEnvironmentsByIdProjectEnvironmentsProjectEnvironment struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *projectEnvironmentsByIdProjectEnvironmentsProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectEnvironmentsByIdProjectEnvironmentsProjectEnvironment) __premarshalJSON() (*__premarshalprojectEnvironmentsByIdProjectEnvironmentsProjectEnvironment, error) {
	var retval __premarshalprojectEnvironmentsByIdProjectEnvironmentsProjectEnvironment

	retval.Id = v.ProjectEnvironmentBasic.Id
	retval.Name = v.ProjectEnvironmentBasic.Name
	return &retval, nil
}

// projectEnvironmentsByIdResponse is returned by projectEnvironmentsById on success.
type projectEnvironmentsByIdResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *projectEnvironmentsByIdProject `json:"project"`
}

// GetProject returns projectEnvironmentsByIdResponse.Project, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsByIdResponse) GetProject() *projectEnvironmentsByIdProject {
	return v.Project
}

// projectEnvironmentsProject includes the requested fields of the GraphQL type Project.
type projectEnvironmentsProject struct {
	// - v0.ProjectID or v1.GroupID
	Id           uuid.UUID                                                  `json:"id"`
	Environments []projectEnvironmentsProjectEnvironmentsProjectEnvironment `json:"environments"`
}

// GetId returns projectEnvironmentsProject.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsProject) GetId() uuid.UUID { return v.Id }

// GetEnvironments returns projectEnvironmentsProject.Environments, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsProject) GetEnvironments() []projectEnvironmentsProjectEnvironmentsProjectEnvironment {
	return v.Environments
}

// projectEnvironmentsProjectEnvironmentsProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type projectEnvironmentsProjectEnvironmentsProjectEnvironment struct {
	ProjectEnvironmentListItem `json:"-"`
}

// GetUpdatedAt returns projectEnvironmentsProjectEnvironmentsProjectEnvironment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsProjectEnvironmentsProjectEnvironment) GetUpdatedAt() time.Time {
	return v.ProjectEnvironmentListItem.UpdatedAt
}

// GetProjectV3Adapters returns projectEnvironmentsProjectEnvironmentsProjectEnvironment.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsProjectEnvironmentsProjectEnvironment) GetProjectV3Adapters() *ProjectEnvironmentListItemProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectEnvironmentListItem.ProjectV3Adapters
}

// GetId returns projectEnvironmentsProjectEnvironmentsProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsProjectEnvironmentsProjectEnvironment) GetId() uuid.UUID {
	return v.ProjectEnvironmentListItem.ProjectEnvironmentBasic.Id
}

// GetName returns projectEnvironmentsProjectEnvironmentsProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsProjectEnvironmentsProjectEnvironment) GetName() string {
	return v.ProjectEnvironmentListItem.ProjectEnvironmentBasic.Name
}

func (v *projectEnvironmentsProjectEnvironmentsProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectEnvironmentsProjectEnvironmentsProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.projectEnvironmentsProjectEnvironmentsProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectEnvironmentListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectEnvironmentsProjectEnvironmentsProjectEnvironment struct {
	UpdatedAt time.Time `json:"updatedAt"`

	ProjectV3Adapters *ProjectEnvironmentListItemProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *projectEnvironmentsProjectEnvironmentsProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectEnvironmentsProjectEnvironmentsProjectEnvironment) __premarshalJSON() (*__premarshalprojectEnvironmentsProjectEnvironmentsProjectEnvironment, error) {
	var retval __premarshalprojectEnvironmentsProjectEnvironmentsProjectEnvironment

	retval.UpdatedAt = v.ProjectEnvironmentListItem.UpdatedAt
	retval.ProjectV3Adapters = v.ProjectEnvironmentListItem.ProjectV3Adapters
	retval.Id = v.ProjectEnvironmentListItem.ProjectEnvironmentBasic.Id
	retval.Name = v.ProjectEnvironmentListItem.ProjectEnvironmentBasic.Name
	return &retval, nil
}

// projectEnvironmentsResponse is returned by projectEnvironments on success.
type projectEnvironmentsResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *projectEnvironmentsProject `json:"project"`
}

// GetProject returns projectEnvironmentsResponse.Project, and is useful for accessing the field via an interface.
func (v *projectEnvironmentsResponse) GetProject() *projectEnvironmentsProject { return v.Project }

// projectHelmChartCurrentUser includes the requested fields of the GraphQL type User.
type projectHelmChartCurrentUser struct {
	Id   uuid.UUID                        `json:"id"`
	Repo *projectHelmChartCurrentUserRepo `json:"repo"`
}

// GetId returns projectHelmChartCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *projectHelmChartCurrentUser) GetId() uuid.UUID { return v.Id }

// GetRepo returns projectHelmChartCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *projectHelmChartCurrentUser) GetRepo() *projectHelmChartCurrentUserRepo { return v.Repo }

// projectHelmChartCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type projectHelmChartCurrentUserRepo struct {
	// - v0.RepoID
	Id        uuid.UUID                                 `json:"id"`
	HelmChart *projectHelmChartCurrentUserRepoHelmChart `json:"helmChart"`
}

// GetId returns projectHelmChartCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *projectHelmChartCurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetHelmChart returns projectHelmChartCurrentUserRepo.HelmChart, and is useful for accessing the field via an interface.
func (v *projectHelmChartCurrentUserRepo) GetHelmChart() *projectHelmChartCurrentUserRepoHelmChart {
	return v.HelmChart
}

// projectHelmChartCurrentUserRepoHelmChart includes the requested fields of the GraphQL type HelmChart.
type projectHelmChartCurrentUserRepoHelmChart struct {
	Id         string `json:"id"`
	HelmCommon `json:"-"`
}

// GetId returns projectHelmChartCurrentUserRepoHelmChart.Id, and is useful for accessing the field via an interface.
func (v *projectHelmChartCurrentUserRepoHelmChart) GetId() string { return v.Id }

// GetName returns projectHelmChartCurrentUserRepoHelmChart.Name, and is useful for accessing the field via an interface.
func (v *projectHelmChartCurrentUserRepoHelmChart) GetName() *string { return v.HelmCommon.Name }

// GetDescription returns projectHelmChartCurrentUserRepoHelmChart.Description, and is useful for accessing the field via an interface.
func (v *projectHelmChartCurrentUserRepoHelmChart) GetDescription() *string {
	return v.HelmCommon.Description
}

// GetLogoImage returns projectHelmChartCurrentUserRepoHelmChart.LogoImage, and is useful for accessing the field via an interface.
func (v *projectHelmChartCurrentUserRepoHelmChart) GetLogoImage() *string {
	return v.HelmCommon.LogoImage
}

// GetVersion returns projectHelmChartCurrentUserRepoHelmChart.Version, and is useful for accessing the field via an interface.
func (v *projectHelmChartCurrentUserRepoHelmChart) GetVersion() *string { return v.HelmCommon.Version }

// GetApp_version returns projectHelmChartCurrentUserRepoHelmChart.App_version, and is useful for accessing the field via an interface.
func (v *projectHelmChartCurrentUserRepoHelmChart) GetApp_version() *string {
	return v.HelmCommon.App_version
}

// GetRepository returns projectHelmChartCurrentUserRepoHelmChart.Repository, and is useful for accessing the field via an interface.
func (v *projectHelmChartCurrentUserRepoHelmChart) GetRepository() HelmCommonRepositoryHelmRepository {
	return v.HelmCommon.Repository
}

func (v *projectHelmChartCurrentUserRepoHelmChart) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectHelmChartCurrentUserRepoHelmChart
		graphql.NoUnmarshalJSON
	}
	firstPass.projectHelmChartCurrentUserRepoHelmChart = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.HelmCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectHelmChartCurrentUserRepoHelmChart struct {
	Id string `json:"id"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	LogoImage *string `json:"logoImage"`

	Version *string `json:"version"`

	App_version *string `json:"app_version"`

	Repository HelmCommonRepositoryHelmRepository `json:"repository"`
}

func (v *projectHelmChartCurrentUserRepoHelmChart) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectHelmChartCurrentUserRepoHelmChart) __premarshalJSON() (*__premarshalprojectHelmChartCurrentUserRepoHelmChart, error) {
	var retval __premarshalprojectHelmChartCurrentUserRepoHelmChart

	retval.Id = v.Id
	retval.Name = v.HelmCommon.Name
	retval.Description = v.HelmCommon.Description
	retval.LogoImage = v.HelmCommon.LogoImage
	retval.Version = v.HelmCommon.Version
	retval.App_version = v.HelmCommon.App_version
	retval.Repository = v.HelmCommon.Repository
	return &retval, nil
}

// projectHelmChartResponse is returned by projectHelmChart on success.
type projectHelmChartResponse struct {
	CurrentUser projectHelmChartCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns projectHelmChartResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *projectHelmChartResponse) GetCurrentUser() projectHelmChartCurrentUser { return v.CurrentUser }

// projectJobCurrentUser includes the requested fields of the GraphQL type User.
type projectJobCurrentUser struct {
	Repo *projectJobCurrentUserRepo `json:"repo"`
}

// GetRepo returns projectJobCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUser) GetRepo() *projectJobCurrentUserRepo { return v.Repo }

// projectJobCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type projectJobCurrentUserRepo struct {
	// - v0.RepoID
	Id     uuid.UUID                       `json:"id"`
	JobRun projectJobCurrentUserRepoJobRun `json:"jobRun"`
}

// GetId returns projectJobCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetJobRun returns projectJobCurrentUserRepo.JobRun, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepo) GetJobRun() projectJobCurrentUserRepoJobRun { return v.JobRun }

// projectJobCurrentUserRepoJobRun includes the requested fields of the GraphQL type JobRun.
type projectJobCurrentUserRepoJobRun struct {
	Id         uuid.UUID                                  `json:"id"`
	Deployment *projectJobCurrentUserRepoJobRunDeployment `json:"deployment"`
	JobCommon  `json:"-"`
	Logs       *projectJobCurrentUserRepoJobRunLogs `json:"logs"`
}

// GetId returns projectJobCurrentUserRepoJobRun.Id, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRun) GetId() uuid.UUID { return v.Id }

// GetDeployment returns projectJobCurrentUserRepoJobRun.Deployment, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRun) GetDeployment() *projectJobCurrentUserRepoJobRunDeployment {
	return v.Deployment
}

// GetLogs returns projectJobCurrentUserRepoJobRun.Logs, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRun) GetLogs() *projectJobCurrentUserRepoJobRunLogs {
	return v.Logs
}

// GetState returns projectJobCurrentUserRepoJobRun.State, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRun) GetState() JobRunState { return v.JobCommon.State }

// GetBuild returns projectJobCurrentUserRepoJobRun.Build, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRun) GetBuild() *JobCommonBuild { return v.JobCommon.Build }

// GetCommand returns projectJobCurrentUserRepoJobRun.Command, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRun) GetCommand() string { return v.JobCommon.Command }

// GetExitCode returns projectJobCurrentUserRepoJobRun.ExitCode, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRun) GetExitCode() *int { return v.JobCommon.ExitCode }

// GetCreatedAt returns projectJobCurrentUserRepoJobRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRun) GetCreatedAt() *time.Time { return v.JobCommon.CreatedAt }

func (v *projectJobCurrentUserRepoJobRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectJobCurrentUserRepoJobRun
		graphql.NoUnmarshalJSON
	}
	firstPass.projectJobCurrentUserRepoJobRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectJobCurrentUserRepoJobRun struct {
	Id uuid.UUID `json:"id"`

	Deployment *projectJobCurrentUserRepoJobRunDeployment `json:"deployment"`

	Logs *projectJobCurrentUserRepoJobRunLogs `json:"logs"`

	State JobRunState `json:"state"`

	Build *JobCommonBuild `json:"build"`

	Command string `json:"command"`

	ExitCode *int `json:"exitCode"`

	CreatedAt *time.Time `json:"createdAt"`
}

func (v *projectJobCurrentUserRepoJobRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectJobCurrentUserRepoJobRun) __premarshalJSON() (*__premarshalprojectJobCurrentUserRepoJobRun, error) {
	var retval __premarshalprojectJobCurrentUserRepoJobRun

	retval.Id = v.Id
	retval.Deployment = v.Deployment
	retval.Logs = v.Logs
	retval.State = v.JobCommon.State
	retval.Build = v.JobCommon.Build
	retval.Command = v.JobCommon.Command
	retval.ExitCode = v.JobCommon.ExitCode
	retval.CreatedAt = v.JobCommon.CreatedAt
	return &retval, nil
}

// projectJobCurrentUserRepoJobRunDeployment includes the requested fields of the GraphQL type Deployment.
type projectJobCurrentUserRepoJobRunDeployment struct {
	Id     uuid.UUID `json:"id"`
	Branch *string   `json:"branch"`
}

// GetId returns projectJobCurrentUserRepoJobRunDeployment.Id, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRunDeployment) GetId() uuid.UUID { return v.Id }

// GetBranch returns projectJobCurrentUserRepoJobRunDeployment.Branch, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRunDeployment) GetBranch() *string { return v.Branch }

// projectJobCurrentUserRepoJobRunLogs includes the requested fields of the GraphQL type Logs.
type projectJobCurrentUserRepoJobRunLogs struct {
	Id        uuid.UUID                                            `json:"id"`
	Completed bool                                                 `json:"completed"`
	Expired   bool                                                 `json:"expired"`
	Entries   []projectJobCurrentUserRepoJobRunLogsEntriesLogEntry `json:"entries"`
}

// GetId returns projectJobCurrentUserRepoJobRunLogs.Id, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRunLogs) GetId() uuid.UUID { return v.Id }

// GetCompleted returns projectJobCurrentUserRepoJobRunLogs.Completed, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRunLogs) GetCompleted() bool { return v.Completed }

// GetExpired returns projectJobCurrentUserRepoJobRunLogs.Expired, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRunLogs) GetExpired() bool { return v.Expired }

// GetEntries returns projectJobCurrentUserRepoJobRunLogs.Entries, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRunLogs) GetEntries() []projectJobCurrentUserRepoJobRunLogsEntriesLogEntry {
	return v.Entries
}

// projectJobCurrentUserRepoJobRunLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type projectJobCurrentUserRepoJobRunLogsEntriesLogEntry struct {
	Timestamp *time.Time `json:"timestamp"`
	Text      string     `json:"text"`
}

// GetTimestamp returns projectJobCurrentUserRepoJobRunLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRunLogsEntriesLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// GetText returns projectJobCurrentUserRepoJobRunLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *projectJobCurrentUserRepoJobRunLogsEntriesLogEntry) GetText() string { return v.Text }

// projectJobResponse is returned by projectJob on success.
type projectJobResponse struct {
	CurrentUser projectJobCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns projectJobResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *projectJobResponse) GetCurrentUser() projectJobCurrentUser { return v.CurrentUser }

// projectJobsCurrentUser includes the requested fields of the GraphQL type User.
type projectJobsCurrentUser struct {
	Repo *projectJobsCurrentUserRepo `json:"repo"`
}

// GetRepo returns projectJobsCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *projectJobsCurrentUser) GetRepo() *projectJobsCurrentUserRepo { return v.Repo }

// projectJobsCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type projectJobsCurrentUserRepo struct {
	// - v0.RepoID
	Id      uuid.UUID                                          `json:"id"`
	JobRuns *projectJobsCurrentUserRepoJobRunsJobRunConnection `json:"jobRuns"`
}

// GetId returns projectJobsCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *projectJobsCurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetJobRuns returns projectJobsCurrentUserRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *projectJobsCurrentUserRepo) GetJobRuns() *projectJobsCurrentUserRepoJobRunsJobRunConnection {
	return v.JobRuns
}

// projectJobsCurrentUserRepoJobRunsJobRunConnection includes the requested fields of the GraphQL type JobRunConnection.
type projectJobsCurrentUserRepoJobRunsJobRunConnection struct {
	TotalCount int                                                            `json:"totalCount"`
	Nodes      []projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun `json:"nodes"`
}

// GetTotalCount returns projectJobsCurrentUserRepoJobRunsJobRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *projectJobsCurrentUserRepoJobRunsJobRunConnection) GetTotalCount() int { return v.TotalCount }

// GetNodes returns projectJobsCurrentUserRepoJobRunsJobRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectJobsCurrentUserRepoJobRunsJobRunConnection) GetNodes() []projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun {
	return v.Nodes
}

// projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun includes the requested fields of the GraphQL type JobRun.
type projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun struct {
	Id        uuid.UUID `json:"id"`
	JobCommon `json:"-"`
}

// GetId returns projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun.Id, and is useful for accessing the field via an interface.
func (v *projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun) GetId() uuid.UUID { return v.Id }

// GetState returns projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun.State, and is useful for accessing the field via an interface.
func (v *projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun) GetState() JobRunState {
	return v.JobCommon.State
}

// GetBuild returns projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun.Build, and is useful for accessing the field via an interface.
func (v *projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun) GetBuild() *JobCommonBuild {
	return v.JobCommon.Build
}

// GetCommand returns projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun.Command, and is useful for accessing the field via an interface.
func (v *projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun) GetCommand() string {
	return v.JobCommon.Command
}

// GetExitCode returns projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun.ExitCode, and is useful for accessing the field via an interface.
func (v *projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun) GetExitCode() *int {
	return v.JobCommon.ExitCode
}

// GetCreatedAt returns projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun) GetCreatedAt() *time.Time {
	return v.JobCommon.CreatedAt
}

func (v *projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun
		graphql.NoUnmarshalJSON
	}
	firstPass.projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun struct {
	Id uuid.UUID `json:"id"`

	State JobRunState `json:"state"`

	Build *JobCommonBuild `json:"build"`

	Command string `json:"command"`

	ExitCode *int `json:"exitCode"`

	CreatedAt *time.Time `json:"createdAt"`
}

func (v *projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun) __premarshalJSON() (*__premarshalprojectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun, error) {
	var retval __premarshalprojectJobsCurrentUserRepoJobRunsJobRunConnectionNodesJobRun

	retval.Id = v.Id
	retval.State = v.JobCommon.State
	retval.Build = v.JobCommon.Build
	retval.Command = v.JobCommon.Command
	retval.ExitCode = v.JobCommon.ExitCode
	retval.CreatedAt = v.JobCommon.CreatedAt
	return &retval, nil
}

// projectJobsResponse is returned by projectJobs on success.
type projectJobsResponse struct {
	CurrentUser projectJobsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns projectJobsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *projectJobsResponse) GetCurrentUser() projectJobsCurrentUser { return v.CurrentUser }

// projectProject includes the requested fields of the GraphQL type Project.
type projectProject struct {
	ProjectContext `json:"-"`
}

// GetId returns projectProject.Id, and is useful for accessing the field via an interface.
func (v *projectProject) GetId() uuid.UUID { return v.ProjectContext.Id }

// GetName returns projectProject.Name, and is useful for accessing the field via an interface.
func (v *projectProject) GetName() string { return v.ProjectContext.Name }

// GetIsMultiRepo returns projectProject.IsMultiRepo, and is useful for accessing the field via an interface.
func (v *projectProject) GetIsMultiRepo() bool { return v.ProjectContext.IsMultiRepo }

// GetDefaultEnvironment returns projectProject.DefaultEnvironment, and is useful for accessing the field via an interface.
func (v *projectProject) GetDefaultEnvironment() ProjectContextDefaultEnvironmentProjectEnvironment {
	return v.ProjectContext.DefaultEnvironment
}

// GetOwner returns projectProject.Owner, and is useful for accessing the field via an interface.
func (v *projectProject) GetOwner() ProjectContextOwnerUser { return v.ProjectContext.Owner }

// GetCreatedAt returns projectProject.CreatedAt, and is useful for accessing the field via an interface.
func (v *projectProject) GetCreatedAt() time.Time { return v.ProjectContext.CreatedAt }

// GetUpdatedAt returns projectProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *projectProject) GetUpdatedAt() time.Time { return v.ProjectContext.UpdatedAt }

func (v *projectProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectProject
		graphql.NoUnmarshalJSON
	}
	firstPass.projectProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectContext)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	IsMultiRepo bool `json:"isMultiRepo"`

	DefaultEnvironment ProjectContextDefaultEnvironmentProjectEnvironment `json:"defaultEnvironment"`

	Owner ProjectContextOwnerUser `json:"owner"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *projectProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectProject) __premarshalJSON() (*__premarshalprojectProject, error) {
	var retval __premarshalprojectProject

	retval.Id = v.ProjectContext.Id
	retval.Name = v.ProjectContext.Name
	retval.IsMultiRepo = v.ProjectContext.IsMultiRepo
	retval.DefaultEnvironment = v.ProjectContext.DefaultEnvironment
	retval.Owner = v.ProjectContext.Owner
	retval.CreatedAt = v.ProjectContext.CreatedAt
	retval.UpdatedAt = v.ProjectContext.UpdatedAt
	return &retval, nil
}

// projectResponse is returned by project on success.
type projectResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *projectProject `json:"project"`
}

// GetProject returns projectResponse.Project, and is useful for accessing the field via an interface.
func (v *projectResponse) GetProject() *projectProject { return v.Project }

// projectV3Response is returned by projectV3 on success.
type projectV3Response struct {
	User projectV3User `json:"user"`
}

// GetUser returns projectV3Response.User, and is useful for accessing the field via an interface.
func (v *projectV3Response) GetUser() projectV3User { return v.User }

// projectV3User includes the requested fields of the GraphQL type User.
type projectV3User struct {
	ProjectV3Adapters *projectV3UserProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
}

// GetProjectV3Adapters returns projectV3User.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *projectV3User) GetProjectV3Adapters() *projectV3UserProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// projectV3UserProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type projectV3UserProjectV3AdaptersProjectV3AdapterConnection struct {
	TotalCount int                                                                             `json:"totalCount"`
	Nodes      []projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter `json:"nodes"`
}

// GetTotalCount returns projectV3UserProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *projectV3UserProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns projectV3UserProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectV3UserProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter {
	return v.Nodes
}

// projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter includes the requested fields of the GraphQL type ProjectV3Adapter.
type projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter struct {
	ProjectV3AdapterDetail `json:"-"`
}

// GetName returns projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Name, and is useful for accessing the field via an interface.
func (v *projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetName() string {
	return v.ProjectV3AdapterDetail.Name
}

// GetId returns projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Id, and is useful for accessing the field via an interface.
func (v *projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetId() uuid.UUID {
	return v.ProjectV3AdapterDetail.Id
}

// GetStatus returns projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Status, and is useful for accessing the field via an interface.
func (v *projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetStatus() *ProjectV3AdapterStatus {
	return v.ProjectV3AdapterDetail.Status
}

// GetIsDeployV2 returns projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.IsDeployV2, and is useful for accessing the field via an interface.
func (v *projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetIsDeployV2() bool {
	return v.ProjectV3AdapterDetail.IsDeployV2
}

// GetRepo returns projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Repo, and is useful for accessing the field via an interface.
func (v *projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetRepo() *ProjectV3AdapterDetailRepo {
	return v.ProjectV3AdapterDetail.Repo
}

// GetProjectV3 returns projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.ProjectV3, and is useful for accessing the field via an interface.
func (v *projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetProjectV3() *ProjectV3AdapterDetailProjectV3 {
	return v.ProjectV3AdapterDetail.ProjectV3
}

// GetProject returns projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Project, and is useful for accessing the field via an interface.
func (v *projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetProject() *ProjectV3AdapterDetailProject {
	return v.ProjectV3AdapterDetail.Project
}

// GetProjectEnvironment returns projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetProjectEnvironment() *ProjectV3AdapterDetailProjectEnvironment {
	return v.ProjectV3AdapterDetail.ProjectEnvironment
}

func (v *projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter
		graphql.NoUnmarshalJSON
	}
	firstPass.projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3AdapterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter struct {
	Name string `json:"name"`

	Id uuid.UUID `json:"id"`

	Status *ProjectV3AdapterStatus `json:"status"`

	IsDeployV2 bool `json:"isDeployV2"`

	Repo *ProjectV3AdapterDetailRepo `json:"repo"`

	ProjectV3 *ProjectV3AdapterDetailProjectV3 `json:"projectV3"`

	Project *ProjectV3AdapterDetailProject `json:"project"`

	ProjectEnvironment *ProjectV3AdapterDetailProjectEnvironment `json:"projectEnvironment"`
}

func (v *projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) __premarshalJSON() (*__premarshalprojectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter, error) {
	var retval __premarshalprojectV3UserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter

	retval.Name = v.ProjectV3AdapterDetail.Name
	retval.Id = v.ProjectV3AdapterDetail.Id
	retval.Status = v.ProjectV3AdapterDetail.Status
	retval.IsDeployV2 = v.ProjectV3AdapterDetail.IsDeployV2
	retval.Repo = v.ProjectV3AdapterDetail.Repo
	retval.ProjectV3 = v.ProjectV3AdapterDetail.ProjectV3
	retval.Project = v.ProjectV3AdapterDetail.Project
	retval.ProjectEnvironment = v.ProjectV3AdapterDetail.ProjectEnvironment
	return &retval, nil
}

// projectV3sForEnvironmentProductionDeploymentsResponse is returned by projectV3sForEnvironmentProductionDeployments on success.
type projectV3sForEnvironmentProductionDeploymentsResponse struct {
	User projectV3sForEnvironmentProductionDeploymentsUser `json:"user"`
}

// GetUser returns projectV3sForEnvironmentProductionDeploymentsResponse.User, and is useful for accessing the field via an interface.
func (v *projectV3sForEnvironmentProductionDeploymentsResponse) GetUser() projectV3sForEnvironmentProductionDeploymentsUser {
	return v.User
}

// projectV3sForEnvironmentProductionDeploymentsUser includes the requested fields of the GraphQL type User.
type projectV3sForEnvironmentProductionDeploymentsUser struct {
	ProjectV3Adapters *projectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
}

// GetProjectV3Adapters returns projectV3sForEnvironmentProductionDeploymentsUser.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *projectV3sForEnvironmentProductionDeploymentsUser) GetProjectV3Adapters() *projectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// projectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type projectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection struct {
	ProjectV3ProductionDeploymentConnection `json:"-"`
}

// GetNodes returns projectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []ProjectV3ProductionDeploymentConnectionNodesProjectV3Adapter {
	return v.ProjectV3ProductionDeploymentConnection.Nodes
}

func (v *projectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.projectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3ProductionDeploymentConnection)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection struct {
	Nodes []ProjectV3ProductionDeploymentConnectionNodesProjectV3Adapter `json:"nodes"`
}

func (v *projectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection) __premarshalJSON() (*__premarshalprojectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection, error) {
	var retval __premarshalprojectV3sForEnvironmentProductionDeploymentsUserProjectV3AdaptersProjectV3AdapterConnection

	retval.Nodes = v.ProjectV3ProductionDeploymentConnection.Nodes
	return &retval, nil
}

// projectV3sForEnvironmentResponse is returned by projectV3sForEnvironment on success.
type projectV3sForEnvironmentResponse struct {
	User projectV3sForEnvironmentUser `json:"user"`
}

// GetUser returns projectV3sForEnvironmentResponse.User, and is useful for accessing the field via an interface.
func (v *projectV3sForEnvironmentResponse) GetUser() projectV3sForEnvironmentUser { return v.User }

// projectV3sForEnvironmentUser includes the requested fields of the GraphQL type User.
type projectV3sForEnvironmentUser struct {
	ProjectV3Adapters *projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
}

// GetProjectV3Adapters returns projectV3sForEnvironmentUser.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *projectV3sForEnvironmentUser) GetProjectV3Adapters() *projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection struct {
	TotalCount                  int `json:"totalCount"`
	ProjectV3ListItemConnection `json:"-"`
	PageInfo                    projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo `json:"pageInfo"`
}

// GetTotalCount returns projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetPageInfo returns projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection) GetPageInfo() projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []ProjectV3ListItemConnectionNodesProjectV3Adapter {
	return v.ProjectV3ListItemConnection.Nodes
}

func (v *projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3ListItemConnection)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection struct {
	TotalCount int `json:"totalCount"`

	PageInfo projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo `json:"pageInfo"`

	Nodes []ProjectV3ListItemConnectionNodesProjectV3Adapter `json:"nodes"`
}

func (v *projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection) __premarshalJSON() (*__premarshalprojectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection, error) {
	var retval __premarshalprojectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnection

	retval.TotalCount = v.TotalCount
	retval.PageInfo = v.PageInfo
	retval.Nodes = v.ProjectV3ListItemConnection.Nodes
	return &retval, nil
}

// projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetEndCursor returns projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetHasPreviousPage returns projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *projectV3sForEnvironmentUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// projectsResponse is returned by projects on success.
type projectsResponse struct {
	User projectsUser `json:"user"`
}

// GetUser returns projectsResponse.User, and is useful for accessing the field via an interface.
func (v *projectsResponse) GetUser() projectsUser { return v.User }

// projectsUser includes the requested fields of the GraphQL type User.
type projectsUser struct {
	Id                uuid.UUID                                                `json:"id"`
	ProjectV3Adapters *projectsUserProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
	Projects          projectsUserProjectsProjectConnection                    `json:"projects"`
}

// GetId returns projectsUser.Id, and is useful for accessing the field via an interface.
func (v *projectsUser) GetId() uuid.UUID { return v.Id }

// GetProjectV3Adapters returns projectsUser.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *projectsUser) GetProjectV3Adapters() *projectsUserProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// GetProjects returns projectsUser.Projects, and is useful for accessing the field via an interface.
func (v *projectsUser) GetProjects() projectsUserProjectsProjectConnection { return v.Projects }

// projectsUserProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type projectsUserProjectV3AdaptersProjectV3AdapterConnection struct {
	Nodes []projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter `json:"nodes"`
}

// GetNodes returns projectsUserProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectsUserProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter {
	return v.Nodes
}

// projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter includes the requested fields of the GraphQL type ProjectV3Adapter.
type projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter struct {
	ProjectListItem `json:"-"`
}

// GetId returns projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Id, and is useful for accessing the field via an interface.
func (v *projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetId() uuid.UUID {
	return v.ProjectListItem.Id
}

// GetName returns projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Name, and is useful for accessing the field via an interface.
func (v *projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetName() string {
	return v.ProjectListItem.Name
}

// GetRepo returns projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Repo, and is useful for accessing the field via an interface.
func (v *projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetRepo() *ProjectListItemRepo {
	return v.ProjectListItem.Repo
}

// GetProject returns projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Project, and is useful for accessing the field via an interface.
func (v *projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetProject() *ProjectListItemProject {
	return v.ProjectListItem.Project
}

// GetProjectEnvironment returns projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetProjectEnvironment() *ProjectListItemProjectEnvironment {
	return v.ProjectListItem.ProjectEnvironment
}

// GetCreatedAt returns projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.CreatedAt, and is useful for accessing the field via an interface.
func (v *projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetCreatedAt() time.Time {
	return v.ProjectListItem.CreatedAt
}

// GetUpdatedAt returns projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.UpdatedAt, and is useful for accessing the field via an interface.
func (v *projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetUpdatedAt() time.Time {
	return v.ProjectListItem.UpdatedAt
}

func (v *projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter
		graphql.NoUnmarshalJSON
	}
	firstPass.projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Repo *ProjectListItemRepo `json:"repo"`

	Project *ProjectListItemProject `json:"project"`

	ProjectEnvironment *ProjectListItemProjectEnvironment `json:"projectEnvironment"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) __premarshalJSON() (*__premarshalprojectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter, error) {
	var retval __premarshalprojectsUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter

	retval.Id = v.ProjectListItem.Id
	retval.Name = v.ProjectListItem.Name
	retval.Repo = v.ProjectListItem.Repo
	retval.Project = v.ProjectListItem.Project
	retval.ProjectEnvironment = v.ProjectListItem.ProjectEnvironment
	retval.CreatedAt = v.ProjectListItem.CreatedAt
	retval.UpdatedAt = v.ProjectListItem.UpdatedAt
	return &retval, nil
}

// projectsUserProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type projectsUserProjectsProjectConnection struct {
	Nodes []projectsUserProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetNodes returns projectsUserProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectsUserProjectsProjectConnection) GetNodes() []projectsUserProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// projectsUserProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type projectsUserProjectsProjectConnectionNodesProject struct {
	GroupListItem `json:"-"`
}

// GetId returns projectsUserProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *projectsUserProjectsProjectConnectionNodesProject) GetId() uuid.UUID {
	return v.GroupListItem.Id
}

// GetName returns projectsUserProjectsProjectConnectionNodesProject.Name, and is useful for accessing the field via an interface.
func (v *projectsUserProjectsProjectConnectionNodesProject) GetName() string {
	return v.GroupListItem.Name
}

// GetUpdatedAt returns projectsUserProjectsProjectConnectionNodesProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *projectsUserProjectsProjectConnectionNodesProject) GetUpdatedAt() time.Time {
	return v.GroupListItem.UpdatedAt
}

// GetEnvironments returns projectsUserProjectsProjectConnectionNodesProject.Environments, and is useful for accessing the field via an interface.
func (v *projectsUserProjectsProjectConnectionNodesProject) GetEnvironments() []GroupListItemEnvironmentsProjectEnvironment {
	return v.GroupListItem.Environments
}

func (v *projectsUserProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectsUserProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.projectsUserProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GroupListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectsUserProjectsProjectConnectionNodesProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	UpdatedAt time.Time `json:"updatedAt"`

	Environments []GroupListItemEnvironmentsProjectEnvironment `json:"environments"`
}

func (v *projectsUserProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectsUserProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalprojectsUserProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalprojectsUserProjectsProjectConnectionNodesProject

	retval.Id = v.GroupListItem.Id
	retval.Name = v.GroupListItem.Name
	retval.UpdatedAt = v.GroupListItem.UpdatedAt
	retval.Environments = v.GroupListItem.Environments
	return &retval, nil
}

// projectsWithRepoResponse is returned by projectsWithRepo on success.
type projectsWithRepoResponse struct {
	User projectsWithRepoUser `json:"user"`
}

// GetUser returns projectsWithRepoResponse.User, and is useful for accessing the field via an interface.
func (v *projectsWithRepoResponse) GetUser() projectsWithRepoUser { return v.User }

// projectsWithRepoUser includes the requested fields of the GraphQL type User.
type projectsWithRepoUser struct {
	Id                uuid.UUID                                                        `json:"id"`
	ProjectV3Adapters *projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
}

// GetId returns projectsWithRepoUser.Id, and is useful for accessing the field via an interface.
func (v *projectsWithRepoUser) GetId() uuid.UUID { return v.Id }

// GetProjectV3Adapters returns projectsWithRepoUser.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *projectsWithRepoUser) GetProjectV3Adapters() *projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnection struct {
	Nodes []projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter `json:"nodes"`
}

// GetNodes returns projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter {
	return v.Nodes
}

// projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter includes the requested fields of the GraphQL type ProjectV3Adapter.
type projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter struct {
	ProjectWithRepo `json:"-"`
}

// GetRepo returns projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter.Repo, and is useful for accessing the field via an interface.
func (v *projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) GetRepo() *ProjectWithRepoRepo {
	return v.ProjectWithRepo.Repo
}

func (v *projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter
		graphql.NoUnmarshalJSON
	}
	firstPass.projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithRepo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter struct {
	Repo *ProjectWithRepoRepo `json:"repo"`
}

func (v *projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter) __premarshalJSON() (*__premarshalprojectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter, error) {
	var retval __premarshalprojectsWithRepoUserProjectV3AdaptersProjectV3AdapterConnectionNodesProjectV3Adapter

	retval.Repo = v.ProjectWithRepo.Repo
	return &retval, nil
}

// purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponse includes the requested fields of the GraphQL type SubscriptionPurchaseResponse.
type purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponse struct {
	// The new billing overview with the updated subscription
	Overview purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview `json:"overview"`
}

// GetOverview returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponse.Overview, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponse) GetOverview() purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview {
	return v.Overview
}

// purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview includes the requested fields of the GraphQL type BillingOverview.
type purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview struct {
	CurrentProducts []purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct `json:"-"`
}

// GetCurrentProducts returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview.CurrentProducts, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview) GetCurrentProducts() []purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct {
	return v.CurrentProducts
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview
		CurrentProducts []json.RawMessage `json:"currentProducts"`
		graphql.NoUnmarshalJSON
	}
	firstPass.purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CurrentProducts
		src := firstPass.CurrentProducts
		*dst = make(
			[]purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview.CurrentProducts: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview struct {
	CurrentProducts []json.RawMessage `json:"currentProducts"`
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview) __premarshalJSON() (*__premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview, error) {
	var retval __premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview

	{

		dst := &retval.CurrentProducts
		src := v.CurrentProducts
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverview.CurrentProducts: %w", err)
			}
		}
	}
	return &retval, nil
}

// purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess includes the requested fields of the GraphQL type ApiAccess.
type purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess struct {
	Typename               *string `json:"__typename"`
	ProductDetailApiAccess `json:"-"`
}

// GetTypename returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess.Typename, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailApiAccess.ProductTypeMetadata
}

// GetName returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess.Name, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess) GetName() *string {
	return v.ProductDetailApiAccess.Name
}

// GetDescription returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess.Description, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess) GetDescription() *string {
	return v.ProductDetailApiAccess.Description
}

// GetSku returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess.Sku, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess) GetSku() uuid.UUID {
	return v.ProductDetailApiAccess.Sku
}

// GetDisplayPrice returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess.DisplayPrice, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess) GetDisplayPrice() *string {
	return v.ProductDetailApiAccess.DisplayPrice
}

// GetUsage returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess.Usage, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess) GetUsage() []ProductDetailUsage {
	return v.ProductDetailApiAccess.Usage
}

// GetBenefits returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess.Benefits, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess) GetBenefits() []string {
	return v.ProductDetailApiAccess.Benefits
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess
		graphql.NoUnmarshalJSON
	}
	firstPass.purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailApiAccess)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess) __premarshalJSON() (*__premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess, error) {
	var retval __premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailApiAccess.ProductTypeMetadata
	retval.Name = v.ProductDetailApiAccess.Name
	retval.Description = v.ProductDetailApiAccess.Description
	retval.Sku = v.ProductDetailApiAccess.Sku
	retval.DisplayPrice = v.ProductDetailApiAccess.DisplayPrice
	retval.Usage = v.ProductDetailApiAccess.Usage
	retval.Benefits = v.ProductDetailApiAccess.Benefits
	return &retval, nil
}

// purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2 includes the requested fields of the GraphQL type PlanTierV2.
type purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2 struct {
	Typename                *string `json:"__typename"`
	ProductDetailPlanTierV2 `json:"-"`
}

// GetTypename returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2.Typename, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailPlanTierV2.ProductTypeMetadata
}

// GetName returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2.Name, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2) GetName() *string {
	return v.ProductDetailPlanTierV2.Name
}

// GetDescription returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2.Description, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2) GetDescription() *string {
	return v.ProductDetailPlanTierV2.Description
}

// GetSku returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2.Sku, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2) GetSku() uuid.UUID {
	return v.ProductDetailPlanTierV2.Sku
}

// GetDisplayPrice returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2.DisplayPrice, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2) GetDisplayPrice() *string {
	return v.ProductDetailPlanTierV2.DisplayPrice
}

// GetUsage returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2.Usage, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2) GetUsage() []ProductDetailUsage {
	return v.ProductDetailPlanTierV2.Usage
}

// GetBenefits returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2.Benefits, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2) GetBenefits() []string {
	return v.ProductDetailPlanTierV2.Benefits
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2
		graphql.NoUnmarshalJSON
	}
	firstPass.purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailPlanTierV2)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2 struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2) __premarshalJSON() (*__premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2, error) {
	var retval __premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailPlanTierV2.ProductTypeMetadata
	retval.Name = v.ProductDetailPlanTierV2.Name
	retval.Description = v.ProductDetailPlanTierV2.Description
	retval.Sku = v.ProductDetailPlanTierV2.Sku
	retval.DisplayPrice = v.ProductDetailPlanTierV2.DisplayPrice
	retval.Usage = v.ProductDetailPlanTierV2.Usage
	retval.Benefits = v.ProductDetailPlanTierV2.Benefits
	return &retval, nil
}

// purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct includes the requested fields of the GraphQL interface Product.
//
// purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct is implemented by the following types:
// purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess
// purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2
// purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack
// purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier
type purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct interface {
	implementsGraphQLInterfacepurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	ProductDetail
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess) implementsGraphQLInterfacepurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct() {
}
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess) implementsGraphQLInterfaceProductDetail() {
}
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2) implementsGraphQLInterfacepurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct() {
}
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2) implementsGraphQLInterfaceProductDetail() {
}
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack) implementsGraphQLInterfacepurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct() {
}
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack) implementsGraphQLInterfaceProductDetail() {
}
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier) implementsGraphQLInterfacepurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct() {
}
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier) implementsGraphQLInterfaceProductDetail() {
}

func __unmarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct(b []byte, v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ApiAccess":
		*v = new(purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess)
		return json.Unmarshal(b, *v)
	case "PlanTierV2":
		*v = new(purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2)
		return json.Unmarshal(b, *v)
	case "ProjectPack":
		*v = new(purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack)
		return json.Unmarshal(b, *v)
	case "SupportTier":
		*v = new(purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Product.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct: "%v"`, tn.TypeName)
	}
}

func __marshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct(v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess:
		typename = "ApiAccess"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsApiAccess
		}{typename, premarshaled}
		return json.Marshal(result)
	case *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2:
		typename = "PlanTierV2"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsPlanTierV2
		}{typename, premarshaled}
		return json.Marshal(result)
	case *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack:
		typename = "ProjectPack"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack
		}{typename, premarshaled}
		return json.Marshal(result)
	case *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier:
		typename = "SupportTier"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProduct: "%T"`, v)
	}
}

// purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack includes the requested fields of the GraphQL type ProjectPack.
type purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack struct {
	Typename                 *string `json:"__typename"`
	ProductDetailProjectPack `json:"-"`
}

// GetTypename returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack.Typename, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailProjectPack.ProductTypeMetadata
}

// GetName returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack.Name, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack) GetName() *string {
	return v.ProductDetailProjectPack.Name
}

// GetDescription returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack.Description, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack) GetDescription() *string {
	return v.ProductDetailProjectPack.Description
}

// GetSku returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack.Sku, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack) GetSku() uuid.UUID {
	return v.ProductDetailProjectPack.Sku
}

// GetDisplayPrice returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack.DisplayPrice, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack) GetDisplayPrice() *string {
	return v.ProductDetailProjectPack.DisplayPrice
}

// GetUsage returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack.Usage, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack) GetUsage() []ProductDetailUsage {
	return v.ProductDetailProjectPack.Usage
}

// GetBenefits returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack.Benefits, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack) GetBenefits() []string {
	return v.ProductDetailProjectPack.Benefits
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack
		graphql.NoUnmarshalJSON
	}
	firstPass.purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailProjectPack)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack) __premarshalJSON() (*__premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack, error) {
	var retval __premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsProjectPack

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailProjectPack.ProductTypeMetadata
	retval.Name = v.ProductDetailProjectPack.Name
	retval.Description = v.ProductDetailProjectPack.Description
	retval.Sku = v.ProductDetailProjectPack.Sku
	retval.DisplayPrice = v.ProductDetailProjectPack.DisplayPrice
	retval.Usage = v.ProductDetailProjectPack.Usage
	retval.Benefits = v.ProductDetailProjectPack.Benefits
	return &retval, nil
}

// purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier includes the requested fields of the GraphQL type SupportTier.
type purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier struct {
	Typename                 *string `json:"__typename"`
	ProductDetailSupportTier `json:"-"`
}

// GetTypename returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier.Typename, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier) GetTypename() *string {
	return v.Typename
}

// GetProductTypeMetadata returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier) GetProductTypeMetadata() *ProductDetailProductTypeMetadata {
	return v.ProductDetailSupportTier.ProductTypeMetadata
}

// GetName returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier.Name, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier) GetName() *string {
	return v.ProductDetailSupportTier.Name
}

// GetDescription returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier.Description, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier) GetDescription() *string {
	return v.ProductDetailSupportTier.Description
}

// GetSku returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier.Sku, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier) GetSku() uuid.UUID {
	return v.ProductDetailSupportTier.Sku
}

// GetDisplayPrice returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier.DisplayPrice, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier) GetDisplayPrice() *string {
	return v.ProductDetailSupportTier.DisplayPrice
}

// GetUsage returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier.Usage, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier) GetUsage() []ProductDetailUsage {
	return v.ProductDetailSupportTier.Usage
}

// GetBenefits returns purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier.Benefits, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier) GetBenefits() []string {
	return v.ProductDetailSupportTier.Benefits
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier
		graphql.NoUnmarshalJSON
	}
	firstPass.purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductDetailSupportTier)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier struct {
	Typename *string `json:"__typename"`

	ProductTypeMetadata *ProductDetailProductTypeMetadata `json:"productTypeMetadata"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	Sku uuid.UUID `json:"sku"`

	DisplayPrice *string `json:"displayPrice"`

	Usage []ProductDetailUsage `json:"usage"`

	Benefits []string `json:"benefits"`
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier) __premarshalJSON() (*__premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier, error) {
	var retval __premarshalpurchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponseOverviewBillingOverviewCurrentProductsSupportTier

	retval.Typename = v.Typename
	retval.ProductTypeMetadata = v.ProductDetailSupportTier.ProductTypeMetadata
	retval.Name = v.ProductDetailSupportTier.Name
	retval.Description = v.ProductDetailSupportTier.Description
	retval.Sku = v.ProductDetailSupportTier.Sku
	retval.DisplayPrice = v.ProductDetailSupportTier.DisplayPrice
	retval.Usage = v.ProductDetailSupportTier.Usage
	retval.Benefits = v.ProductDetailSupportTier.Benefits
	return &retval, nil
}

// purchaseSubscriptionResponse is returned by purchaseSubscription on success.
type purchaseSubscriptionResponse struct {
	// Modify the user's subscription using the subscriptionCart, and initiate
	// recurring billing for the user's payment method on file.
	PurchaseSubscription purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponse `json:"purchaseSubscription"`
}

// GetPurchaseSubscription returns purchaseSubscriptionResponse.PurchaseSubscription, and is useful for accessing the field via an interface.
func (v *purchaseSubscriptionResponse) GetPurchaseSubscription() purchaseSubscriptionPurchaseSubscriptionSubscriptionPurchaseResponse {
	return v.PurchaseSubscription
}

// reissueCertReissueCustomDomainCertificateRepo includes the requested fields of the GraphQL type Repo.
type reissueCertReissueCustomDomainCertificateRepo struct {
	// - v0.RepoID
	Id         uuid.UUID `json:"id"`
	RepoDetail `json:"-"`
}

// GetId returns reissueCertReissueCustomDomainCertificateRepo.Id, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetId() uuid.UUID { return v.Id }

// GetSecretMounts returns reissueCertReissueCustomDomainCertificateRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns reissueCertReissueCustomDomainCertificateRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns reissueCertReissueCustomDomainCertificateRepo.Manifest, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns reissueCertReissueCustomDomainCertificateRepo.AppID, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns reissueCertReissueCustomDomainCertificateRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns reissueCertReissueCustomDomainCertificateRepo.KappID, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetKappID() *string {
	return v.RepoDetail.KappID
}

// GetUseHumanReadableKubernetesName returns reissueCertReissueCustomDomainCertificateRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns reissueCertReissueCustomDomainCertificateRepo.Project, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns reissueCertReissueCustomDomainCertificateRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns reissueCertReissueCustomDomainCertificateRepo.Namespace, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetNamespace() *string {
	return v.RepoDetail.Namespace
}

// GetEnvs returns reissueCertReissueCustomDomainCertificateRepo.Envs, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetEnvs() []RepoDetailEnvsEnvVar {
	return v.RepoDetail.Envs
}

// GetCollaborators returns reissueCertReissueCustomDomainCertificateRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns reissueCertReissueCustomDomainCertificateRepo.Volumes, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns reissueCertReissueCustomDomainCertificateRepo.Replication, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns reissueCertReissueCustomDomainCertificateRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns reissueCertReissueCustomDomainCertificateRepo.Cluster, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns reissueCertReissueCustomDomainCertificateRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns reissueCertReissueCustomDomainCertificateRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns reissueCertReissueCustomDomainCertificateRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns reissueCertReissueCustomDomainCertificateRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns reissueCertReissueCustomDomainCertificateRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns reissueCertReissueCustomDomainCertificateRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns reissueCertReissueCustomDomainCertificateRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetManualDeploy() *bool {
	return v.RepoDetail.ManualDeploy
}

// GetDeployStrategy returns reissueCertReissueCustomDomainCertificateRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns reissueCertReissueCustomDomainCertificateRepo.Free, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns reissueCertReissueCustomDomainCertificateRepo.Cpu, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns reissueCertReissueCustomDomainCertificateRepo.Memory, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetMemory() *string {
	return v.RepoDetail.Memory
}

// GetGpu returns reissueCertReissueCustomDomainCertificateRepo.Gpu, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetGpu() *RepoDetailGpuGPUSpec {
	return v.RepoDetail.Gpu
}

// GetTpu returns reissueCertReissueCustomDomainCertificateRepo.Tpu, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetTpu() *RepoDetailTpuTPUSpec {
	return v.RepoDetail.Tpu
}

// GetEphemeralStorage returns reissueCertReissueCustomDomainCertificateRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns reissueCertReissueCustomDomainCertificateRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDedicated() *bool {
	return v.RepoDetail.Dedicated
}

// GetGithubIntegration returns reissueCertReissueCustomDomainCertificateRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns reissueCertReissueCustomDomainCertificateRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns reissueCertReissueCustomDomainCertificateRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns reissueCertReissueCustomDomainCertificateRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns reissueCertReissueCustomDomainCertificateRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns reissueCertReissueCustomDomainCertificateRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns reissueCertReissueCustomDomainCertificateRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns reissueCertReissueCustomDomainCertificateRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetHelmValues() *string {
	return v.RepoDetail.HelmValues
}

// GetTerraformVersion returns reissueCertReissueCustomDomainCertificateRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns reissueCertReissueCustomDomainCertificateRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns reissueCertReissueCustomDomainCertificateRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns reissueCertReissueCustomDomainCertificateRepo.DeployService, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns reissueCertReissueCustomDomainCertificateRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDeployJob() *bool {
	return v.RepoDetail.DeployJob
}

// GetPreStopSleep returns reissueCertReissueCustomDomainCertificateRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetPreStopSleep() *int {
	return v.RepoDetail.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns reissueCertReissueCustomDomainCertificateRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns reissueCertReissueCustomDomainCertificateRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns reissueCertReissueCustomDomainCertificateRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns reissueCertReissueCustomDomainCertificateRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns reissueCertReissueCustomDomainCertificateRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns reissueCertReissueCustomDomainCertificateRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns reissueCertReissueCustomDomainCertificateRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns reissueCertReissueCustomDomainCertificateRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns reissueCertReissueCustomDomainCertificateRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns reissueCertReissueCustomDomainCertificateRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetAutoRetry() *bool {
	return v.RepoDetail.AutoRetry
}

// GetAutoRollback returns reissueCertReissueCustomDomainCertificateRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetAutoRollback() *bool {
	return v.RepoDetail.AutoRollback
}

// GetCanDeploy returns reissueCertReissueCustomDomainCertificateRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetCanDeploy() *bool {
	return v.RepoDetail.CanDeploy
}

// GetPipelineCluster returns reissueCertReissueCustomDomainCertificateRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns reissueCertReissueCustomDomainCertificateRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetAwsIamRole() *string {
	return v.RepoDetail.AwsIamRole
}

// GetGcpServiceAccount returns reissueCertReissueCustomDomainCertificateRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns reissueCertReissueCustomDomainCertificateRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns reissueCertReissueCustomDomainCertificateRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns reissueCertReissueCustomDomainCertificateRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns reissueCertReissueCustomDomainCertificateRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetPath returns reissueCertReissueCustomDomainCertificateRepo.Path, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetPath() string {
	return v.RepoDetail.RepoCommon.Path
}

// GetName returns reissueCertReissueCustomDomainCertificateRepo.Name, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetName() string {
	return v.RepoDetail.RepoCommon.Name
}

// GetEnabled returns reissueCertReissueCustomDomainCertificateRepo.Enabled, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetEnabled() bool {
	return v.RepoDetail.RepoCommon.Enabled
}

// GetSource returns reissueCertReissueCustomDomainCertificateRepo.Source, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns reissueCertReissueCustomDomainCertificateRepo.DeployType, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns reissueCertReissueCustomDomainCertificateRepo.Image, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetImage() *string {
	return v.RepoDetail.RepoCommon.Image
}

// GetUpdatedAt returns reissueCertReissueCustomDomainCertificateRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns reissueCertReissueCustomDomainCertificateRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns reissueCertReissueCustomDomainCertificateRepo.Owner, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns reissueCertReissueCustomDomainCertificateRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns reissueCertReissueCustomDomainCertificateRepo.Cdns, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns reissueCertReissueCustomDomainCertificateRepo.Ports, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns reissueCertReissueCustomDomainCertificateRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns reissueCertReissueCustomDomainCertificateRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns reissueCertReissueCustomDomainCertificateRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns reissueCertReissueCustomDomainCertificateRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns reissueCertReissueCustomDomainCertificateRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns reissueCertReissueCustomDomainCertificateRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns reissueCertReissueCustomDomainCertificateRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns reissueCertReissueCustomDomainCertificateRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns reissueCertReissueCustomDomainCertificateRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *reissueCertReissueCustomDomainCertificateRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *reissueCertReissueCustomDomainCertificateRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*reissueCertReissueCustomDomainCertificateRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.reissueCertReissueCustomDomainCertificateRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalreissueCertReissueCustomDomainCertificateRepo struct {
	Id uuid.UUID `json:"id"`

	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *reissueCertReissueCustomDomainCertificateRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *reissueCertReissueCustomDomainCertificateRepo) __premarshalJSON() (*__premarshalreissueCertReissueCustomDomainCertificateRepo, error) {
	var retval __premarshalreissueCertReissueCustomDomainCertificateRepo

	retval.Id = v.Id
	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// reissueCertResponse is returned by reissueCert on success.
type reissueCertResponse struct {
	ReissueCustomDomainCertificate reissueCertReissueCustomDomainCertificateRepo `json:"reissueCustomDomainCertificate"`
}

// GetReissueCustomDomainCertificate returns reissueCertResponse.ReissueCustomDomainCertificate, and is useful for accessing the field via an interface.
func (v *reissueCertResponse) GetReissueCustomDomainCertificate() reissueCertReissueCustomDomainCertificateRepo {
	return v.ReissueCustomDomainCertificate
}

// removeAWSAccountResponse is returned by removeAWSAccount on success.
type removeAWSAccountResponse struct {
	RemoveAWSAccount bool `json:"removeAWSAccount"`
}

// GetRemoveAWSAccount returns removeAWSAccountResponse.RemoveAWSAccount, and is useful for accessing the field via an interface.
func (v *removeAWSAccountResponse) GetRemoveAWSAccount() bool { return v.RemoveAWSAccount }

// removeAzureAccountResponse is returned by removeAzureAccount on success.
type removeAzureAccountResponse struct {
	RemoveAzureAccount bool `json:"removeAzureAccount"`
}

// GetRemoveAzureAccount returns removeAzureAccountResponse.RemoveAzureAccount, and is useful for accessing the field via an interface.
func (v *removeAzureAccountResponse) GetRemoveAzureAccount() bool { return v.RemoveAzureAccount }

// removeCDNResponse is returned by removeCDN on success.
type removeCDNResponse struct {
	RemoveCDN bool `json:"removeCDN"`
}

// GetRemoveCDN returns removeCDNResponse.RemoveCDN, and is useful for accessing the field via an interface.
func (v *removeCDNResponse) GetRemoveCDN() bool { return v.RemoveCDN }

// removeContainerRegistryResponse is returned by removeContainerRegistry on success.
type removeContainerRegistryResponse struct {
	RemoveContainerRegistry bool `json:"removeContainerRegistry"`
}

// GetRemoveContainerRegistry returns removeContainerRegistryResponse.RemoveContainerRegistry, and is useful for accessing the field via an interface.
func (v *removeContainerRegistryResponse) GetRemoveContainerRegistry() bool {
	return v.RemoveContainerRegistry
}

// removeCoreWeaveAccountResponse is returned by removeCoreWeaveAccount on success.
type removeCoreWeaveAccountResponse struct {
	RemoveCoreWeaveAccount bool `json:"removeCoreWeaveAccount"`
}

// GetRemoveCoreWeaveAccount returns removeCoreWeaveAccountResponse.RemoveCoreWeaveAccount, and is useful for accessing the field via an interface.
func (v *removeCoreWeaveAccountResponse) GetRemoveCoreWeaveAccount() bool {
	return v.RemoveCoreWeaveAccount
}

// removeDOAccountResponse is returned by removeDOAccount on success.
type removeDOAccountResponse struct {
	RemoveDOAccount bool `json:"removeDOAccount"`
}

// GetRemoveDOAccount returns removeDOAccountResponse.RemoveDOAccount, and is useful for accessing the field via an interface.
func (v *removeDOAccountResponse) GetRemoveDOAccount() bool { return v.RemoveDOAccount }

// removeGCPAccountResponse is returned by removeGCPAccount on success.
type removeGCPAccountResponse struct {
	RemoveGCPAccount bool `json:"removeGCPAccount"`
}

// GetRemoveGCPAccount returns removeGCPAccountResponse.RemoveGCPAccount, and is useful for accessing the field via an interface.
func (v *removeGCPAccountResponse) GetRemoveGCPAccount() bool { return v.RemoveGCPAccount }

// removeLinodeAccountResponse is returned by removeLinodeAccount on success.
type removeLinodeAccountResponse struct {
	RemoveLinodeAccount bool `json:"removeLinodeAccount"`
}

// GetRemoveLinodeAccount returns removeLinodeAccountResponse.RemoveLinodeAccount, and is useful for accessing the field via an interface.
func (v *removeLinodeAccountResponse) GetRemoveLinodeAccount() bool { return v.RemoveLinodeAccount }

// removeProbeRemoveProbeRepo includes the requested fields of the GraphQL type Repo.
type removeProbeRemoveProbeRepo struct {
	// - v0.RepoID
	Id         uuid.UUID `json:"id"`
	RepoDetail `json:"-"`
}

// GetId returns removeProbeRemoveProbeRepo.Id, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetId() uuid.UUID { return v.Id }

// GetSecretMounts returns removeProbeRemoveProbeRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns removeProbeRemoveProbeRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns removeProbeRemoveProbeRepo.Manifest, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetManifest() *RepoDetailManifest { return v.RepoDetail.Manifest }

// GetAppID returns removeProbeRemoveProbeRepo.AppID, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns removeProbeRemoveProbeRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns removeProbeRemoveProbeRepo.KappID, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns removeProbeRemoveProbeRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns removeProbeRemoveProbeRepo.Project, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetProject() *RepoDetailProject { return v.RepoDetail.Project }

// GetProductionDeployment returns removeProbeRemoveProbeRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns removeProbeRemoveProbeRepo.Namespace, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns removeProbeRemoveProbeRepo.Envs, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetEnvs() []RepoDetailEnvsEnvVar { return v.RepoDetail.Envs }

// GetCollaborators returns removeProbeRemoveProbeRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns removeProbeRemoveProbeRepo.Volumes, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns removeProbeRemoveProbeRepo.Replication, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns removeProbeRemoveProbeRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns removeProbeRemoveProbeRepo.Cluster, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetCluster() *RepoDetailCluster { return v.RepoDetail.Cluster }

// GetAwsAccount returns removeProbeRemoveProbeRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns removeProbeRemoveProbeRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns removeProbeRemoveProbeRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns removeProbeRemoveProbeRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns removeProbeRemoveProbeRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns removeProbeRemoveProbeRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns removeProbeRemoveProbeRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetManualDeploy() *bool { return v.RepoDetail.ManualDeploy }

// GetDeployStrategy returns removeProbeRemoveProbeRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns removeProbeRemoveProbeRepo.Free, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns removeProbeRemoveProbeRepo.Cpu, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns removeProbeRemoveProbeRepo.Memory, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns removeProbeRemoveProbeRepo.Gpu, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetGpu() *RepoDetailGpuGPUSpec { return v.RepoDetail.Gpu }

// GetTpu returns removeProbeRemoveProbeRepo.Tpu, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetTpu() *RepoDetailTpuTPUSpec { return v.RepoDetail.Tpu }

// GetEphemeralStorage returns removeProbeRemoveProbeRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns removeProbeRemoveProbeRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns removeProbeRemoveProbeRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns removeProbeRemoveProbeRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns removeProbeRemoveProbeRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns removeProbeRemoveProbeRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns removeProbeRemoveProbeRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns removeProbeRemoveProbeRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns removeProbeRemoveProbeRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns removeProbeRemoveProbeRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetHelmValues() *string { return v.RepoDetail.HelmValues }

// GetTerraformVersion returns removeProbeRemoveProbeRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns removeProbeRemoveProbeRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns removeProbeRemoveProbeRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns removeProbeRemoveProbeRepo.DeployService, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDeployService() *bool { return v.RepoDetail.DeployService }

// GetDeployJob returns removeProbeRemoveProbeRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns removeProbeRemoveProbeRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetPreStopSleep() *int { return v.RepoDetail.PreStopSleep }

// GetTerminationGracePeriodSeconds returns removeProbeRemoveProbeRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns removeProbeRemoveProbeRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns removeProbeRemoveProbeRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns removeProbeRemoveProbeRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns removeProbeRemoveProbeRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns removeProbeRemoveProbeRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns removeProbeRemoveProbeRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns removeProbeRemoveProbeRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns removeProbeRemoveProbeRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns removeProbeRemoveProbeRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns removeProbeRemoveProbeRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetAutoRollback() *bool { return v.RepoDetail.AutoRollback }

// GetCanDeploy returns removeProbeRemoveProbeRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns removeProbeRemoveProbeRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns removeProbeRemoveProbeRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetAwsIamRole() *string { return v.RepoDetail.AwsIamRole }

// GetGcpServiceAccount returns removeProbeRemoveProbeRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns removeProbeRemoveProbeRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns removeProbeRemoveProbeRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns removeProbeRemoveProbeRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns removeProbeRemoveProbeRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetPath returns removeProbeRemoveProbeRepo.Path, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns removeProbeRemoveProbeRepo.Name, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns removeProbeRemoveProbeRepo.Enabled, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetEnabled() bool { return v.RepoDetail.RepoCommon.Enabled }

// GetSource returns removeProbeRemoveProbeRepo.Source, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns removeProbeRemoveProbeRepo.DeployType, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns removeProbeRemoveProbeRepo.Image, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetImage() *string { return v.RepoDetail.RepoCommon.Image }

// GetUpdatedAt returns removeProbeRemoveProbeRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns removeProbeRemoveProbeRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns removeProbeRemoveProbeRepo.Owner, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns removeProbeRemoveProbeRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns removeProbeRemoveProbeRepo.Cdns, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns removeProbeRemoveProbeRepo.Ports, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns removeProbeRemoveProbeRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns removeProbeRemoveProbeRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetStaticIP() *bool { return v.RepoDetail.RepoNetwork.StaticIP }

// GetBuildMethod returns removeProbeRemoveProbeRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns removeProbeRemoveProbeRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns removeProbeRemoveProbeRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns removeProbeRemoveProbeRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns removeProbeRemoveProbeRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns removeProbeRemoveProbeRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns removeProbeRemoveProbeRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *removeProbeRemoveProbeRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *removeProbeRemoveProbeRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*removeProbeRemoveProbeRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.removeProbeRemoveProbeRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalremoveProbeRemoveProbeRepo struct {
	Id uuid.UUID `json:"id"`

	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *removeProbeRemoveProbeRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *removeProbeRemoveProbeRepo) __premarshalJSON() (*__premarshalremoveProbeRemoveProbeRepo, error) {
	var retval __premarshalremoveProbeRemoveProbeRepo

	retval.Id = v.Id
	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// removeProbeResponse is returned by removeProbe on success.
type removeProbeResponse struct {
	RemoveProbe removeProbeRemoveProbeRepo `json:"removeProbe"`
}

// GetRemoveProbe returns removeProbeResponse.RemoveProbe, and is useful for accessing the field via an interface.
func (v *removeProbeResponse) GetRemoveProbe() removeProbeRemoveProbeRepo { return v.RemoveProbe }

// removeProjectCollaboratorRemoveProjectCollaboratorRepo includes the requested fields of the GraphQL type Repo.
type removeProjectCollaboratorRemoveProjectCollaboratorRepo struct {
	// - v0.RepoID
	Id            uuid.UUID                                                                                `json:"id"`
	Collaborators []removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator `json:"collaborators"`
}

// GetId returns removeProjectCollaboratorRemoveProjectCollaboratorRepo.Id, and is useful for accessing the field via an interface.
func (v *removeProjectCollaboratorRemoveProjectCollaboratorRepo) GetId() uuid.UUID { return v.Id }

// GetCollaborators returns removeProjectCollaboratorRemoveProjectCollaboratorRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *removeProjectCollaboratorRemoveProjectCollaboratorRepo) GetCollaborators() []removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator {
	return v.Collaborators
}

// removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator includes the requested fields of the GraphQL type ProjectCollaborator.
type removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator struct {
	CollaboratorCommon `json:"-"`
}

// GetId returns removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator.Id, and is useful for accessing the field via an interface.
func (v *removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator) GetId() uuid.UUID {
	return v.CollaboratorCommon.Id
}

// GetUser returns removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator.User, and is useful for accessing the field via an interface.
func (v *removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator) GetUser() CollaboratorCommonUser {
	return v.CollaboratorCommon.User
}

// GetRole returns removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator.Role, and is useful for accessing the field via an interface.
func (v *removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator) GetRole() ProjectCollaboratorRole {
	return v.CollaboratorCommon.Role
}

func (v *removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator
		graphql.NoUnmarshalJSON
	}
	firstPass.removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CollaboratorCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalremoveProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator struct {
	Id uuid.UUID `json:"id"`

	User CollaboratorCommonUser `json:"user"`

	Role ProjectCollaboratorRole `json:"role"`
}

func (v *removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *removeProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator) __premarshalJSON() (*__premarshalremoveProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator, error) {
	var retval __premarshalremoveProjectCollaboratorRemoveProjectCollaboratorRepoCollaboratorsProjectCollaborator

	retval.Id = v.CollaboratorCommon.Id
	retval.User = v.CollaboratorCommon.User
	retval.Role = v.CollaboratorCommon.Role
	return &retval, nil
}

// removeProjectCollaboratorResponse is returned by removeProjectCollaborator on success.
type removeProjectCollaboratorResponse struct {
	RemoveProjectCollaborator removeProjectCollaboratorRemoveProjectCollaboratorRepo `json:"removeProjectCollaborator"`
}

// GetRemoveProjectCollaborator returns removeProjectCollaboratorResponse.RemoveProjectCollaborator, and is useful for accessing the field via an interface.
func (v *removeProjectCollaboratorResponse) GetRemoveProjectCollaborator() removeProjectCollaboratorRemoveProjectCollaboratorRepo {
	return v.RemoveProjectCollaborator
}

// removeProjectLogShipperResponse is returned by removeProjectLogShipper on success.
type removeProjectLogShipperResponse struct {
	// - id: v0.RepoID
	RemoveLogShipper bool `json:"removeLogShipper"`
}

// GetRemoveLogShipper returns removeProjectLogShipperResponse.RemoveLogShipper, and is useful for accessing the field via an interface.
func (v *removeProjectLogShipperResponse) GetRemoveLogShipper() bool { return v.RemoveLogShipper }

// removeRepoCustomDomainRemoveRepoCustomDomainRepo includes the requested fields of the GraphQL type Repo.
type removeRepoCustomDomainRemoveRepoCustomDomainRepo struct {
	// - v0.RepoID
	Id             uuid.UUID                                                        `json:"id"`
	ClusterDomains []removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains `json:"clusterDomains"`
}

// GetId returns removeRepoCustomDomainRemoveRepoCustomDomainRepo.Id, and is useful for accessing the field via an interface.
func (v *removeRepoCustomDomainRemoveRepoCustomDomainRepo) GetId() uuid.UUID { return v.Id }

// GetClusterDomains returns removeRepoCustomDomainRemoveRepoCustomDomainRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *removeRepoCustomDomainRemoveRepoCustomDomainRepo) GetClusterDomains() []removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains {
	return v.ClusterDomains
}

// removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains includes the requested fields of the GraphQL type ClusterDomains.
type removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains struct {
	Id                   uuid.UUID `json:"id"`
	ClusterDomainsDetail `json:"-"`
}

// GetId returns removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains.Id, and is useful for accessing the field via an interface.
func (v *removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains) GetId() uuid.UUID {
	return v.Id
}

// GetCluster returns removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains.Cluster, and is useful for accessing the field via an interface.
func (v *removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains) GetCluster() ClusterDomainsDetailCluster {
	return v.ClusterDomainsDetail.Cluster
}

// GetDomains returns removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains.Domains, and is useful for accessing the field via an interface.
func (v *removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains) GetDomains() []ClusterDomainsDetailDomainsCustomDomain {
	return v.ClusterDomainsDetail.Domains
}

func (v *removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains
		graphql.NoUnmarshalJSON
	}
	firstPass.removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDomainsDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalremoveRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains struct {
	Id uuid.UUID `json:"id"`

	Cluster ClusterDomainsDetailCluster `json:"cluster"`

	Domains []ClusterDomainsDetailDomainsCustomDomain `json:"domains"`
}

func (v *removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *removeRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains) __premarshalJSON() (*__premarshalremoveRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains, error) {
	var retval __premarshalremoveRepoCustomDomainRemoveRepoCustomDomainRepoClusterDomains

	retval.Id = v.Id
	retval.Cluster = v.ClusterDomainsDetail.Cluster
	retval.Domains = v.ClusterDomainsDetail.Domains
	return &retval, nil
}

// removeRepoCustomDomainResponse is returned by removeRepoCustomDomain on success.
type removeRepoCustomDomainResponse struct {
	RemoveRepoCustomDomain removeRepoCustomDomainRemoveRepoCustomDomainRepo `json:"removeRepoCustomDomain"`
}

// GetRemoveRepoCustomDomain returns removeRepoCustomDomainResponse.RemoveRepoCustomDomain, and is useful for accessing the field via an interface.
func (v *removeRepoCustomDomainResponse) GetRemoveRepoCustomDomain() removeRepoCustomDomainRemoveRepoCustomDomainRepo {
	return v.RemoveRepoCustomDomain
}

// removeTeamMemberRemoveTeamMemberTeam includes the requested fields of the GraphQL type Team.
type removeTeamMemberRemoveTeamMemberTeam struct {
	TeamCommon `json:"-"`
}

// GetId returns removeTeamMemberRemoveTeamMemberTeam.Id, and is useful for accessing the field via an interface.
func (v *removeTeamMemberRemoveTeamMemberTeam) GetId() uuid.UUID { return v.TeamCommon.Id }

// GetPlan returns removeTeamMemberRemoveTeamMemberTeam.Plan, and is useful for accessing the field via an interface.
func (v *removeTeamMemberRemoveTeamMemberTeam) GetPlan() TeamCommonPlan { return v.TeamCommon.Plan }

// GetUser returns removeTeamMemberRemoveTeamMemberTeam.User, and is useful for accessing the field via an interface.
func (v *removeTeamMemberRemoveTeamMemberTeam) GetUser() TeamCommonUser { return v.TeamCommon.User }

func (v *removeTeamMemberRemoveTeamMemberTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*removeTeamMemberRemoveTeamMemberTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.removeTeamMemberRemoveTeamMemberTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalremoveTeamMemberRemoveTeamMemberTeam struct {
	Id uuid.UUID `json:"id"`

	Plan TeamCommonPlan `json:"plan"`

	User TeamCommonUser `json:"user"`
}

func (v *removeTeamMemberRemoveTeamMemberTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *removeTeamMemberRemoveTeamMemberTeam) __premarshalJSON() (*__premarshalremoveTeamMemberRemoveTeamMemberTeam, error) {
	var retval __premarshalremoveTeamMemberRemoveTeamMemberTeam

	retval.Id = v.TeamCommon.Id
	retval.Plan = v.TeamCommon.Plan
	retval.User = v.TeamCommon.User
	return &retval, nil
}

// removeTeamMemberResponse is returned by removeTeamMember on success.
type removeTeamMemberResponse struct {
	RemoveTeamMember removeTeamMemberRemoveTeamMemberTeam `json:"removeTeamMember"`
}

// GetRemoveTeamMember returns removeTeamMemberResponse.RemoveTeamMember, and is useful for accessing the field via an interface.
func (v *removeTeamMemberResponse) GetRemoveTeamMember() removeTeamMemberRemoveTeamMemberTeam {
	return v.RemoveTeamMember
}

// removeVultrAccountResponse is returned by removeVultrAccount on success.
type removeVultrAccountResponse struct {
	RemoveVultrAccount bool `json:"removeVultrAccount"`
}

// GetRemoveVultrAccount returns removeVultrAccountResponse.RemoveVultrAccount, and is useful for accessing the field via an interface.
func (v *removeVultrAccountResponse) GetRemoveVultrAccount() bool { return v.RemoveVultrAccount }

// repoBuildSuggestionCurrentUser includes the requested fields of the GraphQL type User.
type repoBuildSuggestionCurrentUser struct {
	Id   uuid.UUID                           `json:"id"`
	Repo *repoBuildSuggestionCurrentUserRepo `json:"repo"`
}

// GetId returns repoBuildSuggestionCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *repoBuildSuggestionCurrentUser) GetId() uuid.UUID { return v.Id }

// GetRepo returns repoBuildSuggestionCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *repoBuildSuggestionCurrentUser) GetRepo() *repoBuildSuggestionCurrentUserRepo { return v.Repo }

// repoBuildSuggestionCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type repoBuildSuggestionCurrentUserRepo struct {
	// - v0.RepoID
	Id                     uuid.UUID                                                             `json:"id"`
	BuildMethodSuggestions []repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod `json:"buildMethodSuggestions"`
}

// GetId returns repoBuildSuggestionCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *repoBuildSuggestionCurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetBuildMethodSuggestions returns repoBuildSuggestionCurrentUserRepo.BuildMethodSuggestions, and is useful for accessing the field via an interface.
func (v *repoBuildSuggestionCurrentUserRepo) GetBuildMethodSuggestions() []repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod {
	return v.BuildMethodSuggestions
}

// repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod includes the requested fields of the GraphQL type BuildMethod.
type repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod struct {
	Name           string    `json:"name"`
	Type           BuildType `json:"type"`
	DockerfilePath *string   `json:"dockerfilePath"`
	BuildCommand   *string   `json:"buildCommand"`
	StaticPath     *string   `json:"staticPath"`
	RunCommand     *string   `json:"runCommand"`
}

// GetName returns repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod.Name, and is useful for accessing the field via an interface.
func (v *repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod) GetName() string {
	return v.Name
}

// GetType returns repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod.Type, and is useful for accessing the field via an interface.
func (v *repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod) GetType() BuildType {
	return v.Type
}

// GetDockerfilePath returns repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod.DockerfilePath, and is useful for accessing the field via an interface.
func (v *repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod) GetDockerfilePath() *string {
	return v.DockerfilePath
}

// GetBuildCommand returns repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod.BuildCommand, and is useful for accessing the field via an interface.
func (v *repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod) GetBuildCommand() *string {
	return v.BuildCommand
}

// GetStaticPath returns repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod.StaticPath, and is useful for accessing the field via an interface.
func (v *repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod) GetStaticPath() *string {
	return v.StaticPath
}

// GetRunCommand returns repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod.RunCommand, and is useful for accessing the field via an interface.
func (v *repoBuildSuggestionCurrentUserRepoBuildMethodSuggestionsBuildMethod) GetRunCommand() *string {
	return v.RunCommand
}

// repoBuildSuggestionResponse is returned by repoBuildSuggestion on success.
type repoBuildSuggestionResponse struct {
	CurrentUser repoBuildSuggestionCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns repoBuildSuggestionResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *repoBuildSuggestionResponse) GetCurrentUser() repoBuildSuggestionCurrentUser {
	return v.CurrentUser
}

// repoCustomizationRepo includes the requested fields of the GraphQL type Repo.
type repoCustomizationRepo struct {
	// - v0.RepoID
	Id                uuid.UUID `json:"id"`
	RepoCustomization `json:"-"`
}

// GetId returns repoCustomizationRepo.Id, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetId() uuid.UUID { return v.Id }

// GetKubernetesCustomization returns repoCustomizationRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetKubernetesCustomization() *RepoCustomizationKubernetesCustomization {
	return v.RepoCustomization.KubernetesCustomization
}

// GetPath returns repoCustomizationRepo.Path, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetPath() string { return v.RepoCustomization.RepoCommon.Path }

// GetName returns repoCustomizationRepo.Name, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetName() string { return v.RepoCustomization.RepoCommon.Name }

// GetEnabled returns repoCustomizationRepo.Enabled, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetEnabled() bool { return v.RepoCustomization.RepoCommon.Enabled }

// GetSource returns repoCustomizationRepo.Source, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoCustomization.RepoCommon.Source
}

// GetDeployTarget returns repoCustomizationRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetDeployTarget() *DeployTarget {
	return v.RepoCustomization.RepoCommon.DeployTarget
}

// GetDeployType returns repoCustomizationRepo.DeployType, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetDeployType() *DeployType {
	return v.RepoCustomization.RepoCommon.DeployType
}

// GetDeployService returns repoCustomizationRepo.DeployService, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetDeployService() *bool {
	return v.RepoCustomization.RepoCommon.DeployService
}

// GetDeployJob returns repoCustomizationRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetDeployJob() *bool { return v.RepoCustomization.RepoCommon.DeployJob }

// GetAwsAccount returns repoCustomizationRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCustomization.RepoCommon.AwsAccount
}

// GetGcpAccount returns repoCustomizationRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCustomization.RepoCommon.GcpAccount
}

// GetImage returns repoCustomizationRepo.Image, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetImage() *string { return v.RepoCustomization.RepoCommon.Image }

// GetCpu returns repoCustomizationRepo.Cpu, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetCpu() *string { return v.RepoCustomization.RepoCommon.Cpu }

// GetMemory returns repoCustomizationRepo.Memory, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetMemory() *string { return v.RepoCustomization.RepoCommon.Memory }

// GetGpu returns repoCustomizationRepo.Gpu, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoCustomization.RepoCommon.Gpu
}

// GetTpu returns repoCustomizationRepo.Tpu, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoCustomization.RepoCommon.Tpu
}

// GetUpdatedAt returns repoCustomizationRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetUpdatedAt() time.Time {
	return v.RepoCustomization.RepoCommon.UpdatedAt
}

// GetDisableReason returns repoCustomizationRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetDisableReason() *DisableReason {
	return v.RepoCustomization.RepoCommon.DisableReason
}

// GetCluster returns repoCustomizationRepo.Cluster, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetCluster() *RepoCommonCluster {
	return v.RepoCustomization.RepoCommon.Cluster
}

// GetDatabaseProvider returns repoCustomizationRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCustomization.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns repoCustomizationRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCustomization.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns repoCustomizationRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCustomization.RepoCommon.Autoscaling
}

// GetOwner returns repoCustomizationRepo.Owner, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoCustomization.RepoCommon.Owner
}

// GetProject returns repoCustomizationRepo.Project, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetProject() *RepoCommonProject {
	return v.RepoCustomization.RepoCommon.Project
}

// GetProjectEnvironment returns repoCustomizationRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *repoCustomizationRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCustomization.RepoCommon.ProjectEnvironment
}

func (v *repoCustomizationRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*repoCustomizationRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.repoCustomizationRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCustomization)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalrepoCustomizationRepo struct {
	Id uuid.UUID `json:"id"`

	KubernetesCustomization *RepoCustomizationKubernetesCustomization `json:"kubernetesCustomization"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *repoCustomizationRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *repoCustomizationRepo) __premarshalJSON() (*__premarshalrepoCustomizationRepo, error) {
	var retval __premarshalrepoCustomizationRepo

	retval.Id = v.Id
	retval.KubernetesCustomization = v.RepoCustomization.KubernetesCustomization
	retval.Path = v.RepoCustomization.RepoCommon.Path
	retval.Name = v.RepoCustomization.RepoCommon.Name
	retval.Enabled = v.RepoCustomization.RepoCommon.Enabled
	retval.Source = v.RepoCustomization.RepoCommon.Source
	retval.DeployTarget = v.RepoCustomization.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCustomization.RepoCommon.DeployType
	retval.DeployService = v.RepoCustomization.RepoCommon.DeployService
	retval.DeployJob = v.RepoCustomization.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCustomization.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCustomization.RepoCommon.GcpAccount
	retval.Image = v.RepoCustomization.RepoCommon.Image
	retval.Cpu = v.RepoCustomization.RepoCommon.Cpu
	retval.Memory = v.RepoCustomization.RepoCommon.Memory
	retval.Gpu = v.RepoCustomization.RepoCommon.Gpu
	retval.Tpu = v.RepoCustomization.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCustomization.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCustomization.RepoCommon.DisableReason
	retval.Cluster = v.RepoCustomization.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoCustomization.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoCustomization.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoCustomization.RepoCommon.Autoscaling
	retval.Owner = v.RepoCustomization.RepoCommon.Owner
	retval.Project = v.RepoCustomization.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCustomization.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// repoCustomizationResponse is returned by repoCustomization on success.
type repoCustomizationResponse struct {
	Repo *repoCustomizationRepo `json:"repo"`
}

// GetRepo returns repoCustomizationResponse.Repo, and is useful for accessing the field via an interface.
func (v *repoCustomizationResponse) GetRepo() *repoCustomizationRepo { return v.Repo }

// repoDeployRevisionsCurrentUser includes the requested fields of the GraphQL type User.
type repoDeployRevisionsCurrentUser struct {
	Id   uuid.UUID                           `json:"id"`
	Repo *repoDeployRevisionsCurrentUserRepo `json:"repo"`
}

// GetId returns repoDeployRevisionsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetRepo returns repoDeployRevisionsCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUser) GetRepo() *repoDeployRevisionsCurrentUserRepo { return v.Repo }

// repoDeployRevisionsCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type repoDeployRevisionsCurrentUserRepo struct {
	// - v0.RepoID
	Id                               uuid.UUID                                                                                               `json:"id"`
	DeploymentConfigurationRevisions repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnection `json:"deploymentConfigurationRevisions"`
}

// GetId returns repoDeployRevisionsCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetDeploymentConfigurationRevisions returns repoDeployRevisionsCurrentUserRepo.DeploymentConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepo) GetDeploymentConfigurationRevisions() repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnection {
	return v.DeploymentConfigurationRevisions
}

// repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnection includes the requested fields of the GraphQL type RepoDeploymentConfigurationConnection.
type repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnection struct {
	PageInfo   repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionPageInfo                           `json:"pageInfo"`
	TotalCount int                                                                                                                                       `json:"totalCount"`
	Nodes      []repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfiguration `json:"nodes"`
}

// GetPageInfo returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnection) GetPageInfo() repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionPageInfo {
	return v.PageInfo
}

// GetTotalCount returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnection) GetNodes() []repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfiguration {
	return v.Nodes
}

// repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfiguration includes the requested fields of the GraphQL type RepoDeploymentConfiguration.
type repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfiguration struct {
	RevisionData     string                                                                                                                                                  `json:"revisionData"`
	RevisionMetadata repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfiguration) GetRevisionData() string {
	return v.RevisionData
}

// GetRevisionMetadata returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfiguration) GetRevisionMetadata() repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata {
	return v.RevisionMetadata
}

// repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata includes the requested fields of the GraphQL type RevisionMetadata.
type repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata struct {
	Id          uuid.UUID                                                                                                                                                            `json:"id"`
	Description string                                                                                                                                                               `json:"description"`
	SequenceId  int                                                                                                                                                                  `json:"sequenceId"`
	CreatedBy   repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadataCreatedByUser `json:"createdBy"`
	CreatedAt   time.Time                                                                                                                                                            `json:"createdAt"`
}

// GetId returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata.Id, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata) GetId() uuid.UUID {
	return v.Id
}

// GetDescription returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata.Description, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata) GetDescription() string {
	return v.Description
}

// GetSequenceId returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata.SequenceId, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata) GetSequenceId() int {
	return v.SequenceId
}

// GetCreatedBy returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata.CreatedBy, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata) GetCreatedBy() repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadataCreatedByUser {
	return v.CreatedBy
}

// GetCreatedAt returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata.CreatedAt, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadata) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadataCreatedByUser includes the requested fields of the GraphQL type User.
type repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadataCreatedByUser struct {
	Id     uuid.UUID `json:"id"`
	Login  string    `json:"login"`
	Name   string    `json:"name"`
	Avatar *string   `json:"avatar"`
}

// GetId returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadataCreatedByUser.Id, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadataCreatedByUser) GetId() uuid.UUID {
	return v.Id
}

// GetLogin returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadataCreatedByUser.Login, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadataCreatedByUser) GetLogin() string {
	return v.Login
}

// GetName returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadataCreatedByUser.Name, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadataCreatedByUser) GetName() string {
	return v.Name
}

// GetAvatar returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadataCreatedByUser.Avatar, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionNodesRepoDeploymentConfigurationRevisionMetadataCreatedByUser) GetAvatar() *string {
	return v.Avatar
}

// repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsCurrentUserRepoDeploymentConfigurationRevisionsRepoDeploymentConfigurationConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// repoDeployRevisionsResponse is returned by repoDeployRevisions on success.
type repoDeployRevisionsResponse struct {
	CurrentUser repoDeployRevisionsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns repoDeployRevisionsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *repoDeployRevisionsResponse) GetCurrentUser() repoDeployRevisionsCurrentUser {
	return v.CurrentUser
}

// repoForProjectEnvironmentProject includes the requested fields of the GraphQL type Project.
type repoForProjectEnvironmentProject struct {
	// - v0.ProjectID or v1.GroupID
	Id uuid.UUID `json:"id"`
	// - id: v0.EnvironmentID or v1.SubGroupID
	Environment repoForProjectEnvironmentProjectEnvironment `json:"environment"`
}

// GetId returns repoForProjectEnvironmentProject.Id, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProject) GetId() uuid.UUID { return v.Id }

// GetEnvironment returns repoForProjectEnvironmentProject.Environment, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProject) GetEnvironment() repoForProjectEnvironmentProjectEnvironment {
	return v.Environment
}

// repoForProjectEnvironmentProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type repoForProjectEnvironmentProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id   uuid.UUID                                        `json:"id"`
	Name string                                           `json:"name"`
	Repo *repoForProjectEnvironmentProjectEnvironmentRepo `json:"repo"`
}

// GetId returns repoForProjectEnvironmentProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns repoForProjectEnvironmentProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironment) GetName() string { return v.Name }

// GetRepo returns repoForProjectEnvironmentProjectEnvironment.Repo, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironment) GetRepo() *repoForProjectEnvironmentProjectEnvironmentRepo {
	return v.Repo
}

// repoForProjectEnvironmentProjectEnvironmentRepo includes the requested fields of the GraphQL type Repo.
type repoForProjectEnvironmentProjectEnvironmentRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns repoForProjectEnvironmentProjectEnvironmentRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns repoForProjectEnvironmentProjectEnvironmentRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns repoForProjectEnvironmentProjectEnvironmentRepo.Manifest, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns repoForProjectEnvironmentProjectEnvironmentRepo.AppID, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetAppID() *string {
	return v.RepoDetail.AppID
}

// GetDefaultIngressDomain returns repoForProjectEnvironmentProjectEnvironmentRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns repoForProjectEnvironmentProjectEnvironmentRepo.KappID, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetKappID() *string {
	return v.RepoDetail.KappID
}

// GetUseHumanReadableKubernetesName returns repoForProjectEnvironmentProjectEnvironmentRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns repoForProjectEnvironmentProjectEnvironmentRepo.Project, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns repoForProjectEnvironmentProjectEnvironmentRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns repoForProjectEnvironmentProjectEnvironmentRepo.Namespace, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetNamespace() *string {
	return v.RepoDetail.Namespace
}

// GetEnvs returns repoForProjectEnvironmentProjectEnvironmentRepo.Envs, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetEnvs() []RepoDetailEnvsEnvVar {
	return v.RepoDetail.Envs
}

// GetCollaborators returns repoForProjectEnvironmentProjectEnvironmentRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns repoForProjectEnvironmentProjectEnvironmentRepo.Volumes, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns repoForProjectEnvironmentProjectEnvironmentRepo.Replication, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns repoForProjectEnvironmentProjectEnvironmentRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns repoForProjectEnvironmentProjectEnvironmentRepo.Cluster, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns repoForProjectEnvironmentProjectEnvironmentRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns repoForProjectEnvironmentProjectEnvironmentRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns repoForProjectEnvironmentProjectEnvironmentRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns repoForProjectEnvironmentProjectEnvironmentRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns repoForProjectEnvironmentProjectEnvironmentRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns repoForProjectEnvironmentProjectEnvironmentRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns repoForProjectEnvironmentProjectEnvironmentRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetManualDeploy() *bool {
	return v.RepoDetail.ManualDeploy
}

// GetDeployStrategy returns repoForProjectEnvironmentProjectEnvironmentRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns repoForProjectEnvironmentProjectEnvironmentRepo.Free, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns repoForProjectEnvironmentProjectEnvironmentRepo.Cpu, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns repoForProjectEnvironmentProjectEnvironmentRepo.Memory, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetMemory() *string {
	return v.RepoDetail.Memory
}

// GetGpu returns repoForProjectEnvironmentProjectEnvironmentRepo.Gpu, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetGpu() *RepoDetailGpuGPUSpec {
	return v.RepoDetail.Gpu
}

// GetTpu returns repoForProjectEnvironmentProjectEnvironmentRepo.Tpu, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetTpu() *RepoDetailTpuTPUSpec {
	return v.RepoDetail.Tpu
}

// GetEphemeralStorage returns repoForProjectEnvironmentProjectEnvironmentRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns repoForProjectEnvironmentProjectEnvironmentRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDedicated() *bool {
	return v.RepoDetail.Dedicated
}

// GetGithubIntegration returns repoForProjectEnvironmentProjectEnvironmentRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns repoForProjectEnvironmentProjectEnvironmentRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns repoForProjectEnvironmentProjectEnvironmentRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns repoForProjectEnvironmentProjectEnvironmentRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns repoForProjectEnvironmentProjectEnvironmentRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns repoForProjectEnvironmentProjectEnvironmentRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns repoForProjectEnvironmentProjectEnvironmentRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns repoForProjectEnvironmentProjectEnvironmentRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetHelmValues() *string {
	return v.RepoDetail.HelmValues
}

// GetTerraformVersion returns repoForProjectEnvironmentProjectEnvironmentRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns repoForProjectEnvironmentProjectEnvironmentRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns repoForProjectEnvironmentProjectEnvironmentRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns repoForProjectEnvironmentProjectEnvironmentRepo.DeployService, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns repoForProjectEnvironmentProjectEnvironmentRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDeployJob() *bool {
	return v.RepoDetail.DeployJob
}

// GetPreStopSleep returns repoForProjectEnvironmentProjectEnvironmentRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetPreStopSleep() *int {
	return v.RepoDetail.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns repoForProjectEnvironmentProjectEnvironmentRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns repoForProjectEnvironmentProjectEnvironmentRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns repoForProjectEnvironmentProjectEnvironmentRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns repoForProjectEnvironmentProjectEnvironmentRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns repoForProjectEnvironmentProjectEnvironmentRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns repoForProjectEnvironmentProjectEnvironmentRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns repoForProjectEnvironmentProjectEnvironmentRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns repoForProjectEnvironmentProjectEnvironmentRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns repoForProjectEnvironmentProjectEnvironmentRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns repoForProjectEnvironmentProjectEnvironmentRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetAutoRetry() *bool {
	return v.RepoDetail.AutoRetry
}

// GetAutoRollback returns repoForProjectEnvironmentProjectEnvironmentRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetAutoRollback() *bool {
	return v.RepoDetail.AutoRollback
}

// GetCanDeploy returns repoForProjectEnvironmentProjectEnvironmentRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetCanDeploy() *bool {
	return v.RepoDetail.CanDeploy
}

// GetPipelineCluster returns repoForProjectEnvironmentProjectEnvironmentRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns repoForProjectEnvironmentProjectEnvironmentRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetAwsIamRole() *string {
	return v.RepoDetail.AwsIamRole
}

// GetGcpServiceAccount returns repoForProjectEnvironmentProjectEnvironmentRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns repoForProjectEnvironmentProjectEnvironmentRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns repoForProjectEnvironmentProjectEnvironmentRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns repoForProjectEnvironmentProjectEnvironmentRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns repoForProjectEnvironmentProjectEnvironmentRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns repoForProjectEnvironmentProjectEnvironmentRepo.Id, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetId() uuid.UUID {
	return v.RepoDetail.RepoCommon.Id
}

// GetPath returns repoForProjectEnvironmentProjectEnvironmentRepo.Path, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetPath() string {
	return v.RepoDetail.RepoCommon.Path
}

// GetName returns repoForProjectEnvironmentProjectEnvironmentRepo.Name, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetName() string {
	return v.RepoDetail.RepoCommon.Name
}

// GetEnabled returns repoForProjectEnvironmentProjectEnvironmentRepo.Enabled, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetEnabled() bool {
	return v.RepoDetail.RepoCommon.Enabled
}

// GetSource returns repoForProjectEnvironmentProjectEnvironmentRepo.Source, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns repoForProjectEnvironmentProjectEnvironmentRepo.DeployType, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns repoForProjectEnvironmentProjectEnvironmentRepo.Image, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetImage() *string {
	return v.RepoDetail.RepoCommon.Image
}

// GetUpdatedAt returns repoForProjectEnvironmentProjectEnvironmentRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns repoForProjectEnvironmentProjectEnvironmentRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns repoForProjectEnvironmentProjectEnvironmentRepo.Owner, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns repoForProjectEnvironmentProjectEnvironmentRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns repoForProjectEnvironmentProjectEnvironmentRepo.Cdns, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns repoForProjectEnvironmentProjectEnvironmentRepo.Ports, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns repoForProjectEnvironmentProjectEnvironmentRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns repoForProjectEnvironmentProjectEnvironmentRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns repoForProjectEnvironmentProjectEnvironmentRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns repoForProjectEnvironmentProjectEnvironmentRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns repoForProjectEnvironmentProjectEnvironmentRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns repoForProjectEnvironmentProjectEnvironmentRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns repoForProjectEnvironmentProjectEnvironmentRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns repoForProjectEnvironmentProjectEnvironmentRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns repoForProjectEnvironmentProjectEnvironmentRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentProjectEnvironmentRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *repoForProjectEnvironmentProjectEnvironmentRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*repoForProjectEnvironmentProjectEnvironmentRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.repoForProjectEnvironmentProjectEnvironmentRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalrepoForProjectEnvironmentProjectEnvironmentRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *repoForProjectEnvironmentProjectEnvironmentRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *repoForProjectEnvironmentProjectEnvironmentRepo) __premarshalJSON() (*__premarshalrepoForProjectEnvironmentProjectEnvironmentRepo, error) {
	var retval __premarshalrepoForProjectEnvironmentProjectEnvironmentRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// repoForProjectEnvironmentResponse is returned by repoForProjectEnvironment on success.
type repoForProjectEnvironmentResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *repoForProjectEnvironmentProject `json:"project"`
}

// GetProject returns repoForProjectEnvironmentResponse.Project, and is useful for accessing the field via an interface.
func (v *repoForProjectEnvironmentResponse) GetProject() *repoForProjectEnvironmentProject {
	return v.Project
}

// repoForProjectProject includes the requested fields of the GraphQL type Project.
type repoForProjectProject struct {
	// - v0.ProjectID or v1.GroupID
	Id   uuid.UUID                  `json:"id"`
	Repo *repoForProjectProjectRepo `json:"repo"`
}

// GetId returns repoForProjectProject.Id, and is useful for accessing the field via an interface.
func (v *repoForProjectProject) GetId() uuid.UUID { return v.Id }

// GetRepo returns repoForProjectProject.Repo, and is useful for accessing the field via an interface.
func (v *repoForProjectProject) GetRepo() *repoForProjectProjectRepo { return v.Repo }

// repoForProjectProjectRepo includes the requested fields of the GraphQL type Repo.
type repoForProjectProjectRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns repoForProjectProjectRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns repoForProjectProjectRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns repoForProjectProjectRepo.Manifest, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetManifest() *RepoDetailManifest { return v.RepoDetail.Manifest }

// GetAppID returns repoForProjectProjectRepo.AppID, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns repoForProjectProjectRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns repoForProjectProjectRepo.KappID, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns repoForProjectProjectRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns repoForProjectProjectRepo.Project, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetProject() *RepoDetailProject { return v.RepoDetail.Project }

// GetProductionDeployment returns repoForProjectProjectRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns repoForProjectProjectRepo.Namespace, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns repoForProjectProjectRepo.Envs, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetEnvs() []RepoDetailEnvsEnvVar { return v.RepoDetail.Envs }

// GetCollaborators returns repoForProjectProjectRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns repoForProjectProjectRepo.Volumes, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns repoForProjectProjectRepo.Replication, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns repoForProjectProjectRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDeployTarget() *DeployTarget { return v.RepoDetail.DeployTarget }

// GetCluster returns repoForProjectProjectRepo.Cluster, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetCluster() *RepoDetailCluster { return v.RepoDetail.Cluster }

// GetAwsAccount returns repoForProjectProjectRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns repoForProjectProjectRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns repoForProjectProjectRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns repoForProjectProjectRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns repoForProjectProjectRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns repoForProjectProjectRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns repoForProjectProjectRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetManualDeploy() *bool { return v.RepoDetail.ManualDeploy }

// GetDeployStrategy returns repoForProjectProjectRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns repoForProjectProjectRepo.Free, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns repoForProjectProjectRepo.Cpu, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns repoForProjectProjectRepo.Memory, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns repoForProjectProjectRepo.Gpu, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetGpu() *RepoDetailGpuGPUSpec { return v.RepoDetail.Gpu }

// GetTpu returns repoForProjectProjectRepo.Tpu, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetTpu() *RepoDetailTpuTPUSpec { return v.RepoDetail.Tpu }

// GetEphemeralStorage returns repoForProjectProjectRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns repoForProjectProjectRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns repoForProjectProjectRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns repoForProjectProjectRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns repoForProjectProjectRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns repoForProjectProjectRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns repoForProjectProjectRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns repoForProjectProjectRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns repoForProjectProjectRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns repoForProjectProjectRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetHelmValues() *string { return v.RepoDetail.HelmValues }

// GetTerraformVersion returns repoForProjectProjectRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns repoForProjectProjectRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns repoForProjectProjectRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns repoForProjectProjectRepo.DeployService, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDeployService() *bool { return v.RepoDetail.DeployService }

// GetDeployJob returns repoForProjectProjectRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns repoForProjectProjectRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetPreStopSleep() *int { return v.RepoDetail.PreStopSleep }

// GetTerminationGracePeriodSeconds returns repoForProjectProjectRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns repoForProjectProjectRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns repoForProjectProjectRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns repoForProjectProjectRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns repoForProjectProjectRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns repoForProjectProjectRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDatabaseVersion() *string { return v.RepoDetail.DatabaseVersion }

// GetDatabaseEnvs returns repoForProjectProjectRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns repoForProjectProjectRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns repoForProjectProjectRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns repoForProjectProjectRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns repoForProjectProjectRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetAutoRollback() *bool { return v.RepoDetail.AutoRollback }

// GetCanDeploy returns repoForProjectProjectRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns repoForProjectProjectRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns repoForProjectProjectRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetAwsIamRole() *string { return v.RepoDetail.AwsIamRole }

// GetGcpServiceAccount returns repoForProjectProjectRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns repoForProjectProjectRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns repoForProjectProjectRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns repoForProjectProjectRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns repoForProjectProjectRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns repoForProjectProjectRepo.Id, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetId() uuid.UUID { return v.RepoDetail.RepoCommon.Id }

// GetPath returns repoForProjectProjectRepo.Path, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns repoForProjectProjectRepo.Name, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns repoForProjectProjectRepo.Enabled, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetEnabled() bool { return v.RepoDetail.RepoCommon.Enabled }

// GetSource returns repoForProjectProjectRepo.Source, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns repoForProjectProjectRepo.DeployType, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns repoForProjectProjectRepo.Image, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetImage() *string { return v.RepoDetail.RepoCommon.Image }

// GetUpdatedAt returns repoForProjectProjectRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns repoForProjectProjectRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns repoForProjectProjectRepo.Owner, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns repoForProjectProjectRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns repoForProjectProjectRepo.Cdns, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns repoForProjectProjectRepo.Ports, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns repoForProjectProjectRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns repoForProjectProjectRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetStaticIP() *bool { return v.RepoDetail.RepoNetwork.StaticIP }

// GetBuildMethod returns repoForProjectProjectRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns repoForProjectProjectRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns repoForProjectProjectRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns repoForProjectProjectRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns repoForProjectProjectRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns repoForProjectProjectRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns repoForProjectProjectRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *repoForProjectProjectRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *repoForProjectProjectRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*repoForProjectProjectRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.repoForProjectProjectRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalrepoForProjectProjectRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *repoForProjectProjectRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *repoForProjectProjectRepo) __premarshalJSON() (*__premarshalrepoForProjectProjectRepo, error) {
	var retval __premarshalrepoForProjectProjectRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// repoForProjectResponse is returned by repoForProject on success.
type repoForProjectResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *repoForProjectProject `json:"project"`
}

// GetProject returns repoForProjectResponse.Project, and is useful for accessing the field via an interface.
func (v *repoForProjectResponse) GetProject() *repoForProjectProject { return v.Project }

// repoNetworkRepo includes the requested fields of the GraphQL type Repo.
type repoNetworkRepo struct {
	// - v0.RepoID
	Id          uuid.UUID `json:"id"`
	RepoNetwork `json:"-"`
}

// GetId returns repoNetworkRepo.Id, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetId() uuid.UUID { return v.Id }

// GetClusterDomains returns repoNetworkRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoNetwork.ClusterDomains
}

// GetCdns returns repoNetworkRepo.Cdns, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetCdns() []RepoNetworkCdnsCDN { return v.RepoNetwork.Cdns }

// GetPorts returns repoNetworkRepo.Ports, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetPorts() []RepoNetworkPortsPort { return v.RepoNetwork.Ports }

// GetHostNetwork returns repoNetworkRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetHostNetwork() *bool { return v.RepoNetwork.HostNetwork }

// GetStaticIP returns repoNetworkRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetStaticIP() *bool { return v.RepoNetwork.StaticIP }

// GetPath returns repoNetworkRepo.Path, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetPath() string { return v.RepoNetwork.RepoCommon.Path }

// GetName returns repoNetworkRepo.Name, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetName() string { return v.RepoNetwork.RepoCommon.Name }

// GetEnabled returns repoNetworkRepo.Enabled, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetEnabled() bool { return v.RepoNetwork.RepoCommon.Enabled }

// GetSource returns repoNetworkRepo.Source, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoNetwork.RepoCommon.Source
}

// GetDeployTarget returns repoNetworkRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetDeployTarget() *DeployTarget {
	return v.RepoNetwork.RepoCommon.DeployTarget
}

// GetDeployType returns repoNetworkRepo.DeployType, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetDeployType() *DeployType { return v.RepoNetwork.RepoCommon.DeployType }

// GetDeployService returns repoNetworkRepo.DeployService, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetDeployService() *bool { return v.RepoNetwork.RepoCommon.DeployService }

// GetDeployJob returns repoNetworkRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetDeployJob() *bool { return v.RepoNetwork.RepoCommon.DeployJob }

// GetAwsAccount returns repoNetworkRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoNetwork.RepoCommon.AwsAccount
}

// GetGcpAccount returns repoNetworkRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoNetwork.RepoCommon.GcpAccount
}

// GetImage returns repoNetworkRepo.Image, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetImage() *string { return v.RepoNetwork.RepoCommon.Image }

// GetCpu returns repoNetworkRepo.Cpu, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetCpu() *string { return v.RepoNetwork.RepoCommon.Cpu }

// GetMemory returns repoNetworkRepo.Memory, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetMemory() *string { return v.RepoNetwork.RepoCommon.Memory }

// GetGpu returns repoNetworkRepo.Gpu, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetGpu() *RepoCommonGpuGPUSpec { return v.RepoNetwork.RepoCommon.Gpu }

// GetTpu returns repoNetworkRepo.Tpu, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetTpu() *RepoCommonTpuTPUSpec { return v.RepoNetwork.RepoCommon.Tpu }

// GetUpdatedAt returns repoNetworkRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetUpdatedAt() time.Time { return v.RepoNetwork.RepoCommon.UpdatedAt }

// GetDisableReason returns repoNetworkRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetDisableReason() *DisableReason {
	return v.RepoNetwork.RepoCommon.DisableReason
}

// GetCluster returns repoNetworkRepo.Cluster, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetCluster() *RepoCommonCluster { return v.RepoNetwork.RepoCommon.Cluster }

// GetDatabaseProvider returns repoNetworkRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoNetwork.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns repoNetworkRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoNetwork.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns repoNetworkRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoNetwork.RepoCommon.Autoscaling
}

// GetOwner returns repoNetworkRepo.Owner, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetOwner() RepoCommonOwnerUser { return v.RepoNetwork.RepoCommon.Owner }

// GetProject returns repoNetworkRepo.Project, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetProject() *RepoCommonProject { return v.RepoNetwork.RepoCommon.Project }

// GetProjectEnvironment returns repoNetworkRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *repoNetworkRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoNetwork.RepoCommon.ProjectEnvironment
}

func (v *repoNetworkRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*repoNetworkRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.repoNetworkRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoNetwork)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalrepoNetworkRepo struct {
	Id uuid.UUID `json:"id"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *repoNetworkRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *repoNetworkRepo) __premarshalJSON() (*__premarshalrepoNetworkRepo, error) {
	var retval __premarshalrepoNetworkRepo

	retval.Id = v.Id
	retval.ClusterDomains = v.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoNetwork.Cdns
	retval.Ports = v.RepoNetwork.Ports
	retval.HostNetwork = v.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoNetwork.StaticIP
	retval.Path = v.RepoNetwork.RepoCommon.Path
	retval.Name = v.RepoNetwork.RepoCommon.Name
	retval.Enabled = v.RepoNetwork.RepoCommon.Enabled
	retval.Source = v.RepoNetwork.RepoCommon.Source
	retval.DeployTarget = v.RepoNetwork.RepoCommon.DeployTarget
	retval.DeployType = v.RepoNetwork.RepoCommon.DeployType
	retval.DeployService = v.RepoNetwork.RepoCommon.DeployService
	retval.DeployJob = v.RepoNetwork.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoNetwork.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoNetwork.RepoCommon.GcpAccount
	retval.Image = v.RepoNetwork.RepoCommon.Image
	retval.Cpu = v.RepoNetwork.RepoCommon.Cpu
	retval.Memory = v.RepoNetwork.RepoCommon.Memory
	retval.Gpu = v.RepoNetwork.RepoCommon.Gpu
	retval.Tpu = v.RepoNetwork.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoNetwork.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoNetwork.RepoCommon.DisableReason
	retval.Cluster = v.RepoNetwork.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoNetwork.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoNetwork.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoNetwork.RepoCommon.Autoscaling
	retval.Owner = v.RepoNetwork.RepoCommon.Owner
	retval.Project = v.RepoNetwork.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoNetwork.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// repoNetworkResponse is returned by repoNetwork on success.
type repoNetworkResponse struct {
	Repo *repoNetworkRepo `json:"repo"`
}

// GetRepo returns repoNetworkResponse.Repo, and is useful for accessing the field via an interface.
func (v *repoNetworkResponse) GetRepo() *repoNetworkRepo { return v.Repo }

// repoPrometheusResponse is returned by repoPrometheus on success.
type repoPrometheusResponse struct {
	User repoPrometheusUser `json:"user"`
}

// GetUser returns repoPrometheusResponse.User, and is useful for accessing the field via an interface.
func (v *repoPrometheusResponse) GetUser() repoPrometheusUser { return v.User }

// repoPrometheusUser includes the requested fields of the GraphQL type User.
type repoPrometheusUser struct {
	Id      uuid.UUID                  `json:"id"`
	Cluster *repoPrometheusUserCluster `json:"cluster"`
	Repo    *repoPrometheusUserRepo    `json:"repo"`
}

// GetId returns repoPrometheusUser.Id, and is useful for accessing the field via an interface.
func (v *repoPrometheusUser) GetId() uuid.UUID { return v.Id }

// GetCluster returns repoPrometheusUser.Cluster, and is useful for accessing the field via an interface.
func (v *repoPrometheusUser) GetCluster() *repoPrometheusUserCluster { return v.Cluster }

// GetRepo returns repoPrometheusUser.Repo, and is useful for accessing the field via an interface.
func (v *repoPrometheusUser) GetRepo() *repoPrometheusUserRepo { return v.Repo }

// repoPrometheusUserCluster includes the requested fields of the GraphQL type Cluster.
type repoPrometheusUserCluster struct {
	Id         uuid.UUID                            `json:"id"`
	Prometheus *repoPrometheusUserClusterPrometheus `json:"prometheus"`
}

// GetId returns repoPrometheusUserCluster.Id, and is useful for accessing the field via an interface.
func (v *repoPrometheusUserCluster) GetId() uuid.UUID { return v.Id }

// GetPrometheus returns repoPrometheusUserCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *repoPrometheusUserCluster) GetPrometheus() *repoPrometheusUserClusterPrometheus {
	return v.Prometheus
}

// repoPrometheusUserClusterPrometheus includes the requested fields of the GraphQL type Prometheus.
type repoPrometheusUserClusterPrometheus struct {
	Url      string  `json:"url"`
	User     *string `json:"user"`
	Password *string `json:"password"`
	Token    *string `json:"token"`
}

// GetUrl returns repoPrometheusUserClusterPrometheus.Url, and is useful for accessing the field via an interface.
func (v *repoPrometheusUserClusterPrometheus) GetUrl() string { return v.Url }

// GetUser returns repoPrometheusUserClusterPrometheus.User, and is useful for accessing the field via an interface.
func (v *repoPrometheusUserClusterPrometheus) GetUser() *string { return v.User }

// GetPassword returns repoPrometheusUserClusterPrometheus.Password, and is useful for accessing the field via an interface.
func (v *repoPrometheusUserClusterPrometheus) GetPassword() *string { return v.Password }

// GetToken returns repoPrometheusUserClusterPrometheus.Token, and is useful for accessing the field via an interface.
func (v *repoPrometheusUserClusterPrometheus) GetToken() *string { return v.Token }

// repoPrometheusUserRepo includes the requested fields of the GraphQL type Repo.
type repoPrometheusUserRepo struct {
	// - v0.RepoID
	Id     uuid.UUID `json:"id"`
	KappID *string   `json:"kappID"`
}

// GetId returns repoPrometheusUserRepo.Id, and is useful for accessing the field via an interface.
func (v *repoPrometheusUserRepo) GetId() uuid.UUID { return v.Id }

// GetKappID returns repoPrometheusUserRepo.KappID, and is useful for accessing the field via an interface.
func (v *repoPrometheusUserRepo) GetKappID() *string { return v.KappID }

// repoRenderIngressSpecPatchRepo includes the requested fields of the GraphQL type Repo.
type repoRenderIngressSpecPatchRepo struct {
	// - v0.RepoID
	Id                 uuid.UUID                                                     `json:"id"`
	ProductionBranchV2 *repoRenderIngressSpecPatchRepoProductionBranchV2RepoBranchV2 `json:"productionBranchV2"`
}

// GetId returns repoRenderIngressSpecPatchRepo.Id, and is useful for accessing the field via an interface.
func (v *repoRenderIngressSpecPatchRepo) GetId() uuid.UUID { return v.Id }

// GetProductionBranchV2 returns repoRenderIngressSpecPatchRepo.ProductionBranchV2, and is useful for accessing the field via an interface.
func (v *repoRenderIngressSpecPatchRepo) GetProductionBranchV2() *repoRenderIngressSpecPatchRepoProductionBranchV2RepoBranchV2 {
	return v.ProductionBranchV2
}

// repoRenderIngressSpecPatchRepoProductionBranchV2RepoBranchV2 includes the requested fields of the GraphQL type RepoBranchV2.
type repoRenderIngressSpecPatchRepoProductionBranchV2RepoBranchV2 struct {
	Id            uuid.UUID `json:"id"`
	RenderIngress *string   `json:"renderIngress"`
}

// GetId returns repoRenderIngressSpecPatchRepoProductionBranchV2RepoBranchV2.Id, and is useful for accessing the field via an interface.
func (v *repoRenderIngressSpecPatchRepoProductionBranchV2RepoBranchV2) GetId() uuid.UUID { return v.Id }

// GetRenderIngress returns repoRenderIngressSpecPatchRepoProductionBranchV2RepoBranchV2.RenderIngress, and is useful for accessing the field via an interface.
func (v *repoRenderIngressSpecPatchRepoProductionBranchV2RepoBranchV2) GetRenderIngress() *string {
	return v.RenderIngress
}

// repoRenderIngressSpecPatchResponse is returned by repoRenderIngressSpecPatch on success.
type repoRenderIngressSpecPatchResponse struct {
	Repo *repoRenderIngressSpecPatchRepo `json:"repo"`
}

// GetRepo returns repoRenderIngressSpecPatchResponse.Repo, and is useful for accessing the field via an interface.
func (v *repoRenderIngressSpecPatchResponse) GetRepo() *repoRenderIngressSpecPatchRepo { return v.Repo }

// repoRenderPodSpecPatchRepo includes the requested fields of the GraphQL type Repo.
type repoRenderPodSpecPatchRepo struct {
	// - v0.RepoID
	Id                 uuid.UUID                                                 `json:"id"`
	ProductionBranchV2 *repoRenderPodSpecPatchRepoProductionBranchV2RepoBranchV2 `json:"productionBranchV2"`
}

// GetId returns repoRenderPodSpecPatchRepo.Id, and is useful for accessing the field via an interface.
func (v *repoRenderPodSpecPatchRepo) GetId() uuid.UUID { return v.Id }

// GetProductionBranchV2 returns repoRenderPodSpecPatchRepo.ProductionBranchV2, and is useful for accessing the field via an interface.
func (v *repoRenderPodSpecPatchRepo) GetProductionBranchV2() *repoRenderPodSpecPatchRepoProductionBranchV2RepoBranchV2 {
	return v.ProductionBranchV2
}

// repoRenderPodSpecPatchRepoProductionBranchV2RepoBranchV2 includes the requested fields of the GraphQL type RepoBranchV2.
type repoRenderPodSpecPatchRepoProductionBranchV2RepoBranchV2 struct {
	Id            uuid.UUID `json:"id"`
	RenderPodSpec *string   `json:"renderPodSpec"`
}

// GetId returns repoRenderPodSpecPatchRepoProductionBranchV2RepoBranchV2.Id, and is useful for accessing the field via an interface.
func (v *repoRenderPodSpecPatchRepoProductionBranchV2RepoBranchV2) GetId() uuid.UUID { return v.Id }

// GetRenderPodSpec returns repoRenderPodSpecPatchRepoProductionBranchV2RepoBranchV2.RenderPodSpec, and is useful for accessing the field via an interface.
func (v *repoRenderPodSpecPatchRepoProductionBranchV2RepoBranchV2) GetRenderPodSpec() *string {
	return v.RenderPodSpec
}

// repoRenderPodSpecPatchResponse is returned by repoRenderPodSpecPatch on success.
type repoRenderPodSpecPatchResponse struct {
	Repo *repoRenderPodSpecPatchRepo `json:"repo"`
}

// GetRepo returns repoRenderPodSpecPatchResponse.Repo, and is useful for accessing the field via an interface.
func (v *repoRenderPodSpecPatchResponse) GetRepo() *repoRenderPodSpecPatchRepo { return v.Repo }

// reposForProjectEnvironmentBasicProject includes the requested fields of the GraphQL type Project.
type reposForProjectEnvironmentBasicProject struct {
	// - v0.ProjectID or v1.GroupID
	Id uuid.UUID `json:"id"`
	// - id: v0.EnvironmentID or v1.SubGroupID
	Environment reposForProjectEnvironmentBasicProjectEnvironment `json:"environment"`
}

// GetId returns reposForProjectEnvironmentBasicProject.Id, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicProject) GetId() uuid.UUID { return v.Id }

// GetEnvironment returns reposForProjectEnvironmentBasicProject.Environment, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicProject) GetEnvironment() reposForProjectEnvironmentBasicProjectEnvironment {
	return v.Environment
}

// reposForProjectEnvironmentBasicProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type reposForProjectEnvironmentBasicProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id    uuid.UUID                                                    `json:"id"`
	Name  string                                                       `json:"name"`
	Repos []reposForProjectEnvironmentBasicProjectEnvironmentReposRepo `json:"repos"`
}

// GetId returns reposForProjectEnvironmentBasicProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns reposForProjectEnvironmentBasicProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicProjectEnvironment) GetName() string { return v.Name }

// GetRepos returns reposForProjectEnvironmentBasicProjectEnvironment.Repos, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicProjectEnvironment) GetRepos() []reposForProjectEnvironmentBasicProjectEnvironmentReposRepo {
	return v.Repos
}

// reposForProjectEnvironmentBasicProjectEnvironmentReposRepo includes the requested fields of the GraphQL type Repo.
type reposForProjectEnvironmentBasicProjectEnvironmentReposRepo struct {
	RepoBasic `json:"-"`
}

// GetId returns reposForProjectEnvironmentBasicProjectEnvironmentReposRepo.Id, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicProjectEnvironmentReposRepo) GetId() uuid.UUID {
	return v.RepoBasic.Id
}

// GetPath returns reposForProjectEnvironmentBasicProjectEnvironmentReposRepo.Path, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicProjectEnvironmentReposRepo) GetPath() string {
	return v.RepoBasic.Path
}

// GetName returns reposForProjectEnvironmentBasicProjectEnvironmentReposRepo.Name, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicProjectEnvironmentReposRepo) GetName() string {
	return v.RepoBasic.Name
}

// GetEnabled returns reposForProjectEnvironmentBasicProjectEnvironmentReposRepo.Enabled, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicProjectEnvironmentReposRepo) GetEnabled() bool {
	return v.RepoBasic.Enabled
}

// GetImage returns reposForProjectEnvironmentBasicProjectEnvironmentReposRepo.Image, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicProjectEnvironmentReposRepo) GetImage() *string {
	return v.RepoBasic.Image
}

// GetOwner returns reposForProjectEnvironmentBasicProjectEnvironmentReposRepo.Owner, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicProjectEnvironmentReposRepo) GetOwner() RepoBasicOwnerUser {
	return v.RepoBasic.Owner
}

// GetProject returns reposForProjectEnvironmentBasicProjectEnvironmentReposRepo.Project, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicProjectEnvironmentReposRepo) GetProject() *RepoBasicProject {
	return v.RepoBasic.Project
}

// GetProjectEnvironment returns reposForProjectEnvironmentBasicProjectEnvironmentReposRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicProjectEnvironmentReposRepo) GetProjectEnvironment() *RepoBasicProjectEnvironment {
	return v.RepoBasic.ProjectEnvironment
}

func (v *reposForProjectEnvironmentBasicProjectEnvironmentReposRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*reposForProjectEnvironmentBasicProjectEnvironmentReposRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.reposForProjectEnvironmentBasicProjectEnvironmentReposRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalreposForProjectEnvironmentBasicProjectEnvironmentReposRepo struct {
	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Image *string `json:"image"`

	Owner RepoBasicOwnerUser `json:"owner"`

	Project *RepoBasicProject `json:"project"`

	ProjectEnvironment *RepoBasicProjectEnvironment `json:"projectEnvironment"`
}

func (v *reposForProjectEnvironmentBasicProjectEnvironmentReposRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *reposForProjectEnvironmentBasicProjectEnvironmentReposRepo) __premarshalJSON() (*__premarshalreposForProjectEnvironmentBasicProjectEnvironmentReposRepo, error) {
	var retval __premarshalreposForProjectEnvironmentBasicProjectEnvironmentReposRepo

	retval.Id = v.RepoBasic.Id
	retval.Path = v.RepoBasic.Path
	retval.Name = v.RepoBasic.Name
	retval.Enabled = v.RepoBasic.Enabled
	retval.Image = v.RepoBasic.Image
	retval.Owner = v.RepoBasic.Owner
	retval.Project = v.RepoBasic.Project
	retval.ProjectEnvironment = v.RepoBasic.ProjectEnvironment
	return &retval, nil
}

// reposForProjectEnvironmentBasicResponse is returned by reposForProjectEnvironmentBasic on success.
type reposForProjectEnvironmentBasicResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *reposForProjectEnvironmentBasicProject `json:"project"`
}

// GetProject returns reposForProjectEnvironmentBasicResponse.Project, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentBasicResponse) GetProject() *reposForProjectEnvironmentBasicProject {
	return v.Project
}

// reposForProjectEnvironmentProject includes the requested fields of the GraphQL type Project.
type reposForProjectEnvironmentProject struct {
	// - v0.ProjectID or v1.GroupID
	Id uuid.UUID `json:"id"`
	// - id: v0.EnvironmentID or v1.SubGroupID
	Environment reposForProjectEnvironmentProjectEnvironment `json:"environment"`
}

// GetId returns reposForProjectEnvironmentProject.Id, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProject) GetId() uuid.UUID { return v.Id }

// GetEnvironment returns reposForProjectEnvironmentProject.Environment, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProject) GetEnvironment() reposForProjectEnvironmentProjectEnvironment {
	return v.Environment
}

// reposForProjectEnvironmentProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type reposForProjectEnvironmentProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id    uuid.UUID                                               `json:"id"`
	Name  string                                                  `json:"name"`
	Repos []reposForProjectEnvironmentProjectEnvironmentReposRepo `json:"repos"`
}

// GetId returns reposForProjectEnvironmentProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns reposForProjectEnvironmentProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironment) GetName() string { return v.Name }

// GetRepos returns reposForProjectEnvironmentProjectEnvironment.Repos, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironment) GetRepos() []reposForProjectEnvironmentProjectEnvironmentReposRepo {
	return v.Repos
}

// reposForProjectEnvironmentProjectEnvironmentReposRepo includes the requested fields of the GraphQL type Repo.
type reposForProjectEnvironmentProjectEnvironmentReposRepo struct {
	RepoListItem `json:"-"`
}

// GetProductionDeployment returns reposForProjectEnvironmentProjectEnvironmentReposRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetProductionDeployment() *RepoListItemProductionDeployment {
	return v.RepoListItem.ProductionDeployment
}

// GetId returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Id, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetId() uuid.UUID {
	return v.RepoListItem.RepoCommon.Id
}

// GetPath returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Path, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetPath() string {
	return v.RepoListItem.RepoCommon.Path
}

// GetName returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Name, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetName() string {
	return v.RepoListItem.RepoCommon.Name
}

// GetEnabled returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Enabled, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetEnabled() bool {
	return v.RepoListItem.RepoCommon.Enabled
}

// GetSource returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Source, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoListItem.RepoCommon.Source
}

// GetDeployTarget returns reposForProjectEnvironmentProjectEnvironmentReposRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetDeployTarget() *DeployTarget {
	return v.RepoListItem.RepoCommon.DeployTarget
}

// GetDeployType returns reposForProjectEnvironmentProjectEnvironmentReposRepo.DeployType, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetDeployType() *DeployType {
	return v.RepoListItem.RepoCommon.DeployType
}

// GetDeployService returns reposForProjectEnvironmentProjectEnvironmentReposRepo.DeployService, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetDeployService() *bool {
	return v.RepoListItem.RepoCommon.DeployService
}

// GetDeployJob returns reposForProjectEnvironmentProjectEnvironmentReposRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetDeployJob() *bool {
	return v.RepoListItem.RepoCommon.DeployJob
}

// GetAwsAccount returns reposForProjectEnvironmentProjectEnvironmentReposRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoListItem.RepoCommon.AwsAccount
}

// GetGcpAccount returns reposForProjectEnvironmentProjectEnvironmentReposRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoListItem.RepoCommon.GcpAccount
}

// GetImage returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Image, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetImage() *string {
	return v.RepoListItem.RepoCommon.Image
}

// GetCpu returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Cpu, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetCpu() *string {
	return v.RepoListItem.RepoCommon.Cpu
}

// GetMemory returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Memory, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetMemory() *string {
	return v.RepoListItem.RepoCommon.Memory
}

// GetGpu returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Gpu, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoListItem.RepoCommon.Gpu
}

// GetTpu returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Tpu, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoListItem.RepoCommon.Tpu
}

// GetUpdatedAt returns reposForProjectEnvironmentProjectEnvironmentReposRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetUpdatedAt() time.Time {
	return v.RepoListItem.RepoCommon.UpdatedAt
}

// GetDisableReason returns reposForProjectEnvironmentProjectEnvironmentReposRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetDisableReason() *DisableReason {
	return v.RepoListItem.RepoCommon.DisableReason
}

// GetCluster returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Cluster, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetCluster() *RepoCommonCluster {
	return v.RepoListItem.RepoCommon.Cluster
}

// GetDatabaseProvider returns reposForProjectEnvironmentProjectEnvironmentReposRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoListItem.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns reposForProjectEnvironmentProjectEnvironmentReposRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoListItem.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoListItem.RepoCommon.Autoscaling
}

// GetOwner returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Owner, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoListItem.RepoCommon.Owner
}

// GetProject returns reposForProjectEnvironmentProjectEnvironmentReposRepo.Project, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetProject() *RepoCommonProject {
	return v.RepoListItem.RepoCommon.Project
}

// GetProjectEnvironment returns reposForProjectEnvironmentProjectEnvironmentReposRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoListItem.RepoCommon.ProjectEnvironment
}

func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*reposForProjectEnvironmentProjectEnvironmentReposRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.reposForProjectEnvironmentProjectEnvironmentReposRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalreposForProjectEnvironmentProjectEnvironmentReposRepo struct {
	ProductionDeployment *RepoListItemProductionDeployment `json:"productionDeployment"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *reposForProjectEnvironmentProjectEnvironmentReposRepo) __premarshalJSON() (*__premarshalreposForProjectEnvironmentProjectEnvironmentReposRepo, error) {
	var retval __premarshalreposForProjectEnvironmentProjectEnvironmentReposRepo

	retval.ProductionDeployment = v.RepoListItem.ProductionDeployment
	retval.Id = v.RepoListItem.RepoCommon.Id
	retval.Path = v.RepoListItem.RepoCommon.Path
	retval.Name = v.RepoListItem.RepoCommon.Name
	retval.Enabled = v.RepoListItem.RepoCommon.Enabled
	retval.Source = v.RepoListItem.RepoCommon.Source
	retval.DeployTarget = v.RepoListItem.RepoCommon.DeployTarget
	retval.DeployType = v.RepoListItem.RepoCommon.DeployType
	retval.DeployService = v.RepoListItem.RepoCommon.DeployService
	retval.DeployJob = v.RepoListItem.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoListItem.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoListItem.RepoCommon.GcpAccount
	retval.Image = v.RepoListItem.RepoCommon.Image
	retval.Cpu = v.RepoListItem.RepoCommon.Cpu
	retval.Memory = v.RepoListItem.RepoCommon.Memory
	retval.Gpu = v.RepoListItem.RepoCommon.Gpu
	retval.Tpu = v.RepoListItem.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoListItem.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoListItem.RepoCommon.DisableReason
	retval.Cluster = v.RepoListItem.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoListItem.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoListItem.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoListItem.RepoCommon.Autoscaling
	retval.Owner = v.RepoListItem.RepoCommon.Owner
	retval.Project = v.RepoListItem.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoListItem.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// reposForProjectEnvironmentResponse is returned by reposForProjectEnvironment on success.
type reposForProjectEnvironmentResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *reposForProjectEnvironmentProject `json:"project"`
}

// GetProject returns reposForProjectEnvironmentResponse.Project, and is useful for accessing the field via an interface.
func (v *reposForProjectEnvironmentResponse) GetProject() *reposForProjectEnvironmentProject {
	return v.Project
}

// reposForProjectProject includes the requested fields of the GraphQL type Project.
type reposForProjectProject struct {
	// - v0.ProjectID or v1.GroupID
	Id    uuid.UUID                         `json:"id"`
	Name  string                            `json:"name"`
	Repos []reposForProjectProjectReposRepo `json:"repos"`
}

// GetId returns reposForProjectProject.Id, and is useful for accessing the field via an interface.
func (v *reposForProjectProject) GetId() uuid.UUID { return v.Id }

// GetName returns reposForProjectProject.Name, and is useful for accessing the field via an interface.
func (v *reposForProjectProject) GetName() string { return v.Name }

// GetRepos returns reposForProjectProject.Repos, and is useful for accessing the field via an interface.
func (v *reposForProjectProject) GetRepos() []reposForProjectProjectReposRepo { return v.Repos }

// reposForProjectProjectReposRepo includes the requested fields of the GraphQL type Repo.
type reposForProjectProjectReposRepo struct {
	RepoListItem `json:"-"`
}

// GetProductionDeployment returns reposForProjectProjectReposRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetProductionDeployment() *RepoListItemProductionDeployment {
	return v.RepoListItem.ProductionDeployment
}

// GetId returns reposForProjectProjectReposRepo.Id, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetId() uuid.UUID { return v.RepoListItem.RepoCommon.Id }

// GetPath returns reposForProjectProjectReposRepo.Path, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetPath() string { return v.RepoListItem.RepoCommon.Path }

// GetName returns reposForProjectProjectReposRepo.Name, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetName() string { return v.RepoListItem.RepoCommon.Name }

// GetEnabled returns reposForProjectProjectReposRepo.Enabled, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetEnabled() bool { return v.RepoListItem.RepoCommon.Enabled }

// GetSource returns reposForProjectProjectReposRepo.Source, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoListItem.RepoCommon.Source
}

// GetDeployTarget returns reposForProjectProjectReposRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetDeployTarget() *DeployTarget {
	return v.RepoListItem.RepoCommon.DeployTarget
}

// GetDeployType returns reposForProjectProjectReposRepo.DeployType, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetDeployType() *DeployType {
	return v.RepoListItem.RepoCommon.DeployType
}

// GetDeployService returns reposForProjectProjectReposRepo.DeployService, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetDeployService() *bool {
	return v.RepoListItem.RepoCommon.DeployService
}

// GetDeployJob returns reposForProjectProjectReposRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetDeployJob() *bool {
	return v.RepoListItem.RepoCommon.DeployJob
}

// GetAwsAccount returns reposForProjectProjectReposRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoListItem.RepoCommon.AwsAccount
}

// GetGcpAccount returns reposForProjectProjectReposRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoListItem.RepoCommon.GcpAccount
}

// GetImage returns reposForProjectProjectReposRepo.Image, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetImage() *string { return v.RepoListItem.RepoCommon.Image }

// GetCpu returns reposForProjectProjectReposRepo.Cpu, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetCpu() *string { return v.RepoListItem.RepoCommon.Cpu }

// GetMemory returns reposForProjectProjectReposRepo.Memory, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetMemory() *string {
	return v.RepoListItem.RepoCommon.Memory
}

// GetGpu returns reposForProjectProjectReposRepo.Gpu, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoListItem.RepoCommon.Gpu
}

// GetTpu returns reposForProjectProjectReposRepo.Tpu, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoListItem.RepoCommon.Tpu
}

// GetUpdatedAt returns reposForProjectProjectReposRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetUpdatedAt() time.Time {
	return v.RepoListItem.RepoCommon.UpdatedAt
}

// GetDisableReason returns reposForProjectProjectReposRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetDisableReason() *DisableReason {
	return v.RepoListItem.RepoCommon.DisableReason
}

// GetCluster returns reposForProjectProjectReposRepo.Cluster, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetCluster() *RepoCommonCluster {
	return v.RepoListItem.RepoCommon.Cluster
}

// GetDatabaseProvider returns reposForProjectProjectReposRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoListItem.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns reposForProjectProjectReposRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoListItem.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns reposForProjectProjectReposRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoListItem.RepoCommon.Autoscaling
}

// GetOwner returns reposForProjectProjectReposRepo.Owner, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoListItem.RepoCommon.Owner
}

// GetProject returns reposForProjectProjectReposRepo.Project, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetProject() *RepoCommonProject {
	return v.RepoListItem.RepoCommon.Project
}

// GetProjectEnvironment returns reposForProjectProjectReposRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *reposForProjectProjectReposRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoListItem.RepoCommon.ProjectEnvironment
}

func (v *reposForProjectProjectReposRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*reposForProjectProjectReposRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.reposForProjectProjectReposRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalreposForProjectProjectReposRepo struct {
	ProductionDeployment *RepoListItemProductionDeployment `json:"productionDeployment"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *reposForProjectProjectReposRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *reposForProjectProjectReposRepo) __premarshalJSON() (*__premarshalreposForProjectProjectReposRepo, error) {
	var retval __premarshalreposForProjectProjectReposRepo

	retval.ProductionDeployment = v.RepoListItem.ProductionDeployment
	retval.Id = v.RepoListItem.RepoCommon.Id
	retval.Path = v.RepoListItem.RepoCommon.Path
	retval.Name = v.RepoListItem.RepoCommon.Name
	retval.Enabled = v.RepoListItem.RepoCommon.Enabled
	retval.Source = v.RepoListItem.RepoCommon.Source
	retval.DeployTarget = v.RepoListItem.RepoCommon.DeployTarget
	retval.DeployType = v.RepoListItem.RepoCommon.DeployType
	retval.DeployService = v.RepoListItem.RepoCommon.DeployService
	retval.DeployJob = v.RepoListItem.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoListItem.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoListItem.RepoCommon.GcpAccount
	retval.Image = v.RepoListItem.RepoCommon.Image
	retval.Cpu = v.RepoListItem.RepoCommon.Cpu
	retval.Memory = v.RepoListItem.RepoCommon.Memory
	retval.Gpu = v.RepoListItem.RepoCommon.Gpu
	retval.Tpu = v.RepoListItem.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoListItem.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoListItem.RepoCommon.DisableReason
	retval.Cluster = v.RepoListItem.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoListItem.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoListItem.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoListItem.RepoCommon.Autoscaling
	retval.Owner = v.RepoListItem.RepoCommon.Owner
	retval.Project = v.RepoListItem.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoListItem.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// reposForProjectResponse is returned by reposForProject on success.
type reposForProjectResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *reposForProjectProject `json:"project"`
}

// GetProject returns reposForProjectResponse.Project, and is useful for accessing the field via an interface.
func (v *reposForProjectResponse) GetProject() *reposForProjectProject { return v.Project }

// resendTeamMemberInvitationResponse is returned by resendTeamMemberInvitation on success.
type resendTeamMemberInvitationResponse struct {
	ResendTeamMemberInvitation bool `json:"resendTeamMemberInvitation"`
}

// GetResendTeamMemberInvitation returns resendTeamMemberInvitationResponse.ResendTeamMemberInvitation, and is useful for accessing the field via an interface.
func (v *resendTeamMemberInvitationResponse) GetResendTeamMemberInvitation() bool {
	return v.ResendTeamMemberInvitation
}

// rollbackToDeploymentResponse is returned by rollbackToDeployment on success.
type rollbackToDeploymentResponse struct {
	// - projectID: v0.RepoID
	RollbackProjectToDeployment rollbackToDeploymentRollbackProjectToDeploymentRepo `json:"rollbackProjectToDeployment"`
}

// GetRollbackProjectToDeployment returns rollbackToDeploymentResponse.RollbackProjectToDeployment, and is useful for accessing the field via an interface.
func (v *rollbackToDeploymentResponse) GetRollbackProjectToDeployment() rollbackToDeploymentRollbackProjectToDeploymentRepo {
	return v.RollbackProjectToDeployment
}

// rollbackToDeploymentRollbackProjectToDeploymentRepo includes the requested fields of the GraphQL type Repo.
type rollbackToDeploymentRollbackProjectToDeploymentRepo struct {
	// - v0.RepoID
	Id                   uuid.UUID                                                                `json:"id"`
	ProductionDeployment *rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeployment `json:"productionDeployment"`
}

// GetId returns rollbackToDeploymentRollbackProjectToDeploymentRepo.Id, and is useful for accessing the field via an interface.
func (v *rollbackToDeploymentRollbackProjectToDeploymentRepo) GetId() uuid.UUID { return v.Id }

// GetProductionDeployment returns rollbackToDeploymentRollbackProjectToDeploymentRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *rollbackToDeploymentRollbackProjectToDeploymentRepo) GetProductionDeployment() *rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeployment {
	return v.ProductionDeployment
}

// rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeployment includes the requested fields of the GraphQL type Deployment.
type rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeployment struct {
	Id           uuid.UUID                                                                            `json:"id"`
	Status       DeploymentStatus                                                                     `json:"status"`
	DeployStatus *rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeploymentDeployStatus `json:"deployStatus"`
}

// GetId returns rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeployment.Id, and is useful for accessing the field via an interface.
func (v *rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeployment) GetId() uuid.UUID {
	return v.Id
}

// GetStatus returns rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeployment.Status, and is useful for accessing the field via an interface.
func (v *rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeployment) GetStatus() DeploymentStatus {
	return v.Status
}

// GetDeployStatus returns rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeployment.DeployStatus, and is useful for accessing the field via an interface.
func (v *rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeployment) GetDeployStatus() *rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeploymentDeployStatus {
	return v.DeployStatus
}

// rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeploymentDeployStatus includes the requested fields of the GraphQL type DeployStatus.
type rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeploymentDeployStatus struct {
	State  string `json:"state"`
	Active bool   `json:"active"`
}

// GetState returns rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeploymentDeployStatus.State, and is useful for accessing the field via an interface.
func (v *rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeploymentDeployStatus) GetState() string {
	return v.State
}

// GetActive returns rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeploymentDeployStatus.Active, and is useful for accessing the field via an interface.
func (v *rollbackToDeploymentRollbackProjectToDeploymentRepoProductionDeploymentDeployStatus) GetActive() bool {
	return v.Active
}

// runJobResponse is returned by runJob on success.
type runJobResponse struct {
	RunJob runJobRunJobJobRun `json:"runJob"`
}

// GetRunJob returns runJobResponse.RunJob, and is useful for accessing the field via an interface.
func (v *runJobResponse) GetRunJob() runJobRunJobJobRun { return v.RunJob }

// runJobRunJobJobRun includes the requested fields of the GraphQL type JobRun.
type runJobRunJobJobRun struct {
	Id        uuid.UUID `json:"id"`
	JobCommon `json:"-"`
}

// GetId returns runJobRunJobJobRun.Id, and is useful for accessing the field via an interface.
func (v *runJobRunJobJobRun) GetId() uuid.UUID { return v.Id }

// GetState returns runJobRunJobJobRun.State, and is useful for accessing the field via an interface.
func (v *runJobRunJobJobRun) GetState() JobRunState { return v.JobCommon.State }

// GetBuild returns runJobRunJobJobRun.Build, and is useful for accessing the field via an interface.
func (v *runJobRunJobJobRun) GetBuild() *JobCommonBuild { return v.JobCommon.Build }

// GetCommand returns runJobRunJobJobRun.Command, and is useful for accessing the field via an interface.
func (v *runJobRunJobJobRun) GetCommand() string { return v.JobCommon.Command }

// GetExitCode returns runJobRunJobJobRun.ExitCode, and is useful for accessing the field via an interface.
func (v *runJobRunJobJobRun) GetExitCode() *int { return v.JobCommon.ExitCode }

// GetCreatedAt returns runJobRunJobJobRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *runJobRunJobJobRun) GetCreatedAt() *time.Time { return v.JobCommon.CreatedAt }

func (v *runJobRunJobJobRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*runJobRunJobJobRun
		graphql.NoUnmarshalJSON
	}
	firstPass.runJobRunJobJobRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalrunJobRunJobJobRun struct {
	Id uuid.UUID `json:"id"`

	State JobRunState `json:"state"`

	Build *JobCommonBuild `json:"build"`

	Command string `json:"command"`

	ExitCode *int `json:"exitCode"`

	CreatedAt *time.Time `json:"createdAt"`
}

func (v *runJobRunJobJobRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *runJobRunJobJobRun) __premarshalJSON() (*__premarshalrunJobRunJobJobRun, error) {
	var retval __premarshalrunJobRunJobJobRun

	retval.Id = v.Id
	retval.State = v.JobCommon.State
	retval.Build = v.JobCommon.Build
	retval.Command = v.JobCommon.Command
	retval.ExitCode = v.JobCommon.ExitCode
	retval.CreatedAt = v.JobCommon.CreatedAt
	return &retval, nil
}

// searchHelmChartsResponse is returned by searchHelmCharts on success.
type searchHelmChartsResponse struct {
	SearchHelmCharts searchHelmChartsSearchHelmChartsHelmChartConnection `json:"searchHelmCharts"`
}

// GetSearchHelmCharts returns searchHelmChartsResponse.SearchHelmCharts, and is useful for accessing the field via an interface.
func (v *searchHelmChartsResponse) GetSearchHelmCharts() searchHelmChartsSearchHelmChartsHelmChartConnection {
	return v.SearchHelmCharts
}

// searchHelmChartsSearchHelmChartsHelmChartConnection includes the requested fields of the GraphQL type HelmChartConnection.
type searchHelmChartsSearchHelmChartsHelmChartConnection struct {
	TotalCount int                                                                 `json:"totalCount"`
	Nodes      []searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart `json:"nodes"`
	PageInfo   searchHelmChartsSearchHelmChartsHelmChartConnectionPageInfo         `json:"pageInfo"`
}

// GetTotalCount returns searchHelmChartsSearchHelmChartsHelmChartConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *searchHelmChartsSearchHelmChartsHelmChartConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns searchHelmChartsSearchHelmChartsHelmChartConnection.Nodes, and is useful for accessing the field via an interface.
func (v *searchHelmChartsSearchHelmChartsHelmChartConnection) GetNodes() []searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart {
	return v.Nodes
}

// GetPageInfo returns searchHelmChartsSearchHelmChartsHelmChartConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *searchHelmChartsSearchHelmChartsHelmChartConnection) GetPageInfo() searchHelmChartsSearchHelmChartsHelmChartConnectionPageInfo {
	return v.PageInfo
}

// searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart includes the requested fields of the GraphQL type HelmChart.
type searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart struct {
	Id         string `json:"id"`
	HelmCommon `json:"-"`
}

// GetId returns searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart.Id, and is useful for accessing the field via an interface.
func (v *searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart) GetId() string {
	return v.Id
}

// GetName returns searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart.Name, and is useful for accessing the field via an interface.
func (v *searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart) GetName() *string {
	return v.HelmCommon.Name
}

// GetDescription returns searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart.Description, and is useful for accessing the field via an interface.
func (v *searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart) GetDescription() *string {
	return v.HelmCommon.Description
}

// GetLogoImage returns searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart.LogoImage, and is useful for accessing the field via an interface.
func (v *searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart) GetLogoImage() *string {
	return v.HelmCommon.LogoImage
}

// GetVersion returns searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart.Version, and is useful for accessing the field via an interface.
func (v *searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart) GetVersion() *string {
	return v.HelmCommon.Version
}

// GetApp_version returns searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart.App_version, and is useful for accessing the field via an interface.
func (v *searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart) GetApp_version() *string {
	return v.HelmCommon.App_version
}

// GetRepository returns searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart.Repository, and is useful for accessing the field via an interface.
func (v *searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart) GetRepository() HelmCommonRepositoryHelmRepository {
	return v.HelmCommon.Repository
}

func (v *searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart
		graphql.NoUnmarshalJSON
	}
	firstPass.searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.HelmCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalsearchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart struct {
	Id string `json:"id"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	LogoImage *string `json:"logoImage"`

	Version *string `json:"version"`

	App_version *string `json:"app_version"`

	Repository HelmCommonRepositoryHelmRepository `json:"repository"`
}

func (v *searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *searchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart) __premarshalJSON() (*__premarshalsearchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart, error) {
	var retval __premarshalsearchHelmChartsSearchHelmChartsHelmChartConnectionNodesHelmChart

	retval.Id = v.Id
	retval.Name = v.HelmCommon.Name
	retval.Description = v.HelmCommon.Description
	retval.LogoImage = v.HelmCommon.LogoImage
	retval.Version = v.HelmCommon.Version
	retval.App_version = v.HelmCommon.App_version
	retval.Repository = v.HelmCommon.Repository
	return &retval, nil
}

// searchHelmChartsSearchHelmChartsHelmChartConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type searchHelmChartsSearchHelmChartsHelmChartConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns searchHelmChartsSearchHelmChartsHelmChartConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *searchHelmChartsSearchHelmChartsHelmChartConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// setPaymentMethodResponse is returned by setPaymentMethod on success.
type setPaymentMethodResponse struct {
	SetPaymentMethod setPaymentMethodSetPaymentMethodUser `json:"setPaymentMethod"`
}

// GetSetPaymentMethod returns setPaymentMethodResponse.SetPaymentMethod, and is useful for accessing the field via an interface.
func (v *setPaymentMethodResponse) GetSetPaymentMethod() setPaymentMethodSetPaymentMethodUser {
	return v.SetPaymentMethod
}

// setPaymentMethodSetPaymentMethodUser includes the requested fields of the GraphQL type User.
type setPaymentMethodSetPaymentMethodUser struct {
	Id               uuid.UUID `json:"id"`
	HasPaymentMethod *bool     `json:"hasPaymentMethod"`
}

// GetId returns setPaymentMethodSetPaymentMethodUser.Id, and is useful for accessing the field via an interface.
func (v *setPaymentMethodSetPaymentMethodUser) GetId() uuid.UUID { return v.Id }

// GetHasPaymentMethod returns setPaymentMethodSetPaymentMethodUser.HasPaymentMethod, and is useful for accessing the field via an interface.
func (v *setPaymentMethodSetPaymentMethodUser) GetHasPaymentMethod() *bool { return v.HasPaymentMethod }

// setRepoEnvsResponse is returned by setRepoEnvs on success.
type setRepoEnvsResponse struct {
	SetRepoEnvs setRepoEnvsSetRepoEnvsRepo `json:"setRepoEnvs"`
}

// GetSetRepoEnvs returns setRepoEnvsResponse.SetRepoEnvs, and is useful for accessing the field via an interface.
func (v *setRepoEnvsResponse) GetSetRepoEnvs() setRepoEnvsSetRepoEnvsRepo { return v.SetRepoEnvs }

// setRepoEnvsSetRepoEnvsRepo includes the requested fields of the GraphQL type Repo.
type setRepoEnvsSetRepoEnvsRepo struct {
	// - v0.RepoID
	Id   uuid.UUID                              `json:"id"`
	Envs []setRepoEnvsSetRepoEnvsRepoEnvsEnvVar `json:"envs"`
}

// GetId returns setRepoEnvsSetRepoEnvsRepo.Id, and is useful for accessing the field via an interface.
func (v *setRepoEnvsSetRepoEnvsRepo) GetId() uuid.UUID { return v.Id }

// GetEnvs returns setRepoEnvsSetRepoEnvsRepo.Envs, and is useful for accessing the field via an interface.
func (v *setRepoEnvsSetRepoEnvsRepo) GetEnvs() []setRepoEnvsSetRepoEnvsRepoEnvsEnvVar { return v.Envs }

// setRepoEnvsSetRepoEnvsRepoEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type setRepoEnvsSetRepoEnvsRepoEnvsEnvVar struct {
	Id      uuid.UUID `json:"id"`
	Name    string    `json:"name"`
	Value   string    `json:"value"`
	Visible bool      `json:"visible"`
	Sealed  bool      `json:"sealed"`
}

// GetId returns setRepoEnvsSetRepoEnvsRepoEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *setRepoEnvsSetRepoEnvsRepoEnvsEnvVar) GetId() uuid.UUID { return v.Id }

// GetName returns setRepoEnvsSetRepoEnvsRepoEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *setRepoEnvsSetRepoEnvsRepoEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns setRepoEnvsSetRepoEnvsRepoEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *setRepoEnvsSetRepoEnvsRepoEnvsEnvVar) GetValue() string { return v.Value }

// GetVisible returns setRepoEnvsSetRepoEnvsRepoEnvsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *setRepoEnvsSetRepoEnvsRepoEnvsEnvVar) GetVisible() bool { return v.Visible }

// GetSealed returns setRepoEnvsSetRepoEnvsRepoEnvsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *setRepoEnvsSetRepoEnvsRepoEnvsEnvVar) GetSealed() bool { return v.Sealed }

// subgroupOverviewProject includes the requested fields of the GraphQL type Project.
type subgroupOverviewProject struct {
	// - v0.ProjectID or v1.GroupID
	Id uuid.UUID `json:"id"`
	// - id: v0.EnvironmentID or v1.SubGroupID
	Environment subgroupOverviewProjectEnvironment `json:"environment"`
}

// GetId returns subgroupOverviewProject.Id, and is useful for accessing the field via an interface.
func (v *subgroupOverviewProject) GetId() uuid.UUID { return v.Id }

// GetEnvironment returns subgroupOverviewProject.Environment, and is useful for accessing the field via an interface.
func (v *subgroupOverviewProject) GetEnvironment() subgroupOverviewProjectEnvironment {
	return v.Environment
}

// subgroupOverviewProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type subgroupOverviewProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id                uuid.UUID                                                                      `json:"id"`
	Name              string                                                                         `json:"name"`
	OverviewV2        []*subgroupOverviewProjectEnvironmentOverviewV2                                `json:"overviewV2"`
	ProjectV3Adapters *subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
}

// GetId returns subgroupOverviewProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *subgroupOverviewProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns subgroupOverviewProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *subgroupOverviewProjectEnvironment) GetName() string { return v.Name }

// GetOverviewV2 returns subgroupOverviewProjectEnvironment.OverviewV2, and is useful for accessing the field via an interface.
func (v *subgroupOverviewProjectEnvironment) GetOverviewV2() []*subgroupOverviewProjectEnvironmentOverviewV2 {
	return v.OverviewV2
}

// GetProjectV3Adapters returns subgroupOverviewProjectEnvironment.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *subgroupOverviewProjectEnvironment) GetProjectV3Adapters() *subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// subgroupOverviewProjectEnvironmentOverviewV2 includes the requested fields of the GraphQL type EnvironmentOverviewV2.
type subgroupOverviewProjectEnvironmentOverviewV2 struct {
	DeploymentStatus ProjectV3AdapterStatus `json:"deploymentStatus"`
	Count            int                    `json:"count"`
}

// GetDeploymentStatus returns subgroupOverviewProjectEnvironmentOverviewV2.DeploymentStatus, and is useful for accessing the field via an interface.
func (v *subgroupOverviewProjectEnvironmentOverviewV2) GetDeploymentStatus() ProjectV3AdapterStatus {
	return v.DeploymentStatus
}

// GetCount returns subgroupOverviewProjectEnvironmentOverviewV2.Count, and is useful for accessing the field via an interface.
func (v *subgroupOverviewProjectEnvironmentOverviewV2) GetCount() int { return v.Count }

// subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection struct {
	ProjectV3AdapterConnectionCommon `json:"-"`
}

// GetPageInfo returns subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection) GetPageInfo() ProjectV3AdapterConnectionCommonPageInfo {
	return v.ProjectV3AdapterConnectionCommon.PageInfo
}

// GetNodes returns subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter {
	return v.ProjectV3AdapterConnectionCommon.Nodes
}

// GetTotalCount returns subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.ProjectV3AdapterConnectionCommon.TotalCount
}

func (v *subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3AdapterConnectionCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalsubgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection struct {
	PageInfo ProjectV3AdapterConnectionCommonPageInfo `json:"pageInfo"`

	Nodes []ProjectV3AdapterConnectionCommonNodesProjectV3Adapter `json:"nodes"`

	TotalCount int `json:"totalCount"`
}

func (v *subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *subgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection) __premarshalJSON() (*__premarshalsubgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection, error) {
	var retval __premarshalsubgroupOverviewProjectEnvironmentProjectV3AdaptersProjectV3AdapterConnection

	retval.PageInfo = v.ProjectV3AdapterConnectionCommon.PageInfo
	retval.Nodes = v.ProjectV3AdapterConnectionCommon.Nodes
	retval.TotalCount = v.ProjectV3AdapterConnectionCommon.TotalCount
	return &retval, nil
}

// subgroupOverviewResponse is returned by subgroupOverview on success.
type subgroupOverviewResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *subgroupOverviewProject `json:"project"`
}

// GetProject returns subgroupOverviewResponse.Project, and is useful for accessing the field via an interface.
func (v *subgroupOverviewResponse) GetProject() *subgroupOverviewProject { return v.Project }

// subscriptionFeatureResponse is returned by subscriptionFeature on success.
type subscriptionFeatureResponse struct {
	User subscriptionFeatureUser `json:"user"`
}

// GetUser returns subscriptionFeatureResponse.User, and is useful for accessing the field via an interface.
func (v *subscriptionFeatureResponse) GetUser() subscriptionFeatureUser { return v.User }

// subscriptionFeatureUser includes the requested fields of the GraphQL type User.
type subscriptionFeatureUser struct {
	Id uuid.UUID `json:"id"`
	// Billing Overview only exists for users with subscriptions, i.e. a team
	BillingOverview *subscriptionFeatureUserBillingOverview `json:"billingOverview"`
}

// GetId returns subscriptionFeatureUser.Id, and is useful for accessing the field via an interface.
func (v *subscriptionFeatureUser) GetId() uuid.UUID { return v.Id }

// GetBillingOverview returns subscriptionFeatureUser.BillingOverview, and is useful for accessing the field via an interface.
func (v *subscriptionFeatureUser) GetBillingOverview() *subscriptionFeatureUserBillingOverview {
	return v.BillingOverview
}

// subscriptionFeatureUserBillingOverview includes the requested fields of the GraphQL type BillingOverview.
type subscriptionFeatureUserBillingOverview struct {
	SubscriptionFeatures subscriptionFeatureUserBillingOverviewSubscriptionFeatures `json:"subscriptionFeatures"`
}

// GetSubscriptionFeatures returns subscriptionFeatureUserBillingOverview.SubscriptionFeatures, and is useful for accessing the field via an interface.
func (v *subscriptionFeatureUserBillingOverview) GetSubscriptionFeatures() subscriptionFeatureUserBillingOverviewSubscriptionFeatures {
	return v.SubscriptionFeatures
}

// subscriptionFeatureUserBillingOverviewSubscriptionFeatures includes the requested fields of the GraphQL type SubscriptionFeatures.
type subscriptionFeatureUserBillingOverviewSubscriptionFeatures struct {
	// Query a specific subscription feature
	ByKey *subscriptionFeatureUserBillingOverviewSubscriptionFeaturesByKeySubscriptionFeature `json:"byKey"`
}

// GetByKey returns subscriptionFeatureUserBillingOverviewSubscriptionFeatures.ByKey, and is useful for accessing the field via an interface.
func (v *subscriptionFeatureUserBillingOverviewSubscriptionFeatures) GetByKey() *subscriptionFeatureUserBillingOverviewSubscriptionFeaturesByKeySubscriptionFeature {
	return v.ByKey
}

// subscriptionFeatureUserBillingOverviewSubscriptionFeaturesByKeySubscriptionFeature includes the requested fields of the GraphQL type SubscriptionFeature.
type subscriptionFeatureUserBillingOverviewSubscriptionFeaturesByKeySubscriptionFeature struct {
	Key     FeatureKey `json:"key"`
	Enabled *bool      `json:"enabled"`
}

// GetKey returns subscriptionFeatureUserBillingOverviewSubscriptionFeaturesByKeySubscriptionFeature.Key, and is useful for accessing the field via an interface.
func (v *subscriptionFeatureUserBillingOverviewSubscriptionFeaturesByKeySubscriptionFeature) GetKey() FeatureKey {
	return v.Key
}

// GetEnabled returns subscriptionFeatureUserBillingOverviewSubscriptionFeaturesByKeySubscriptionFeature.Enabled, and is useful for accessing the field via an interface.
func (v *subscriptionFeatureUserBillingOverviewSubscriptionFeaturesByKeySubscriptionFeature) GetEnabled() *bool {
	return v.Enabled
}

// suggestProjectNameResponse is returned by suggestProjectName on success.
type suggestProjectNameResponse struct {
	User suggestProjectNameUser `json:"user"`
}

// GetUser returns suggestProjectNameResponse.User, and is useful for accessing the field via an interface.
func (v *suggestProjectNameResponse) GetUser() suggestProjectNameUser { return v.User }

// suggestProjectNameUser includes the requested fields of the GraphQL type User.
type suggestProjectNameUser struct {
	Id                 uuid.UUID `json:"id"`
	SuggestProjectName string    `json:"suggestProjectName"`
}

// GetId returns suggestProjectNameUser.Id, and is useful for accessing the field via an interface.
func (v *suggestProjectNameUser) GetId() uuid.UUID { return v.Id }

// GetSuggestProjectName returns suggestProjectNameUser.SuggestProjectName, and is useful for accessing the field via an interface.
func (v *suggestProjectNameUser) GetSuggestProjectName() string { return v.SuggestProjectName }

// suggestTemplateNameResponse is returned by suggestTemplateName on success.
type suggestTemplateNameResponse struct {
	User suggestTemplateNameUser `json:"user"`
}

// GetUser returns suggestTemplateNameResponse.User, and is useful for accessing the field via an interface.
func (v *suggestTemplateNameResponse) GetUser() suggestTemplateNameUser { return v.User }

// suggestTemplateNameUser includes the requested fields of the GraphQL type User.
type suggestTemplateNameUser struct {
	Id                  uuid.UUID `json:"id"`
	SuggestTemplateName string    `json:"suggestTemplateName"`
}

// GetId returns suggestTemplateNameUser.Id, and is useful for accessing the field via an interface.
func (v *suggestTemplateNameUser) GetId() uuid.UUID { return v.Id }

// GetSuggestTemplateName returns suggestTemplateNameUser.SuggestTemplateName, and is useful for accessing the field via an interface.
func (v *suggestTemplateNameUser) GetSuggestTemplateName() string { return v.SuggestTemplateName }

// teamByNameResponse is returned by teamByName on success.
type teamByNameResponse struct {
	Team *teamByNameTeam `json:"team"`
}

// GetTeam returns teamByNameResponse.Team, and is useful for accessing the field via an interface.
func (v *teamByNameResponse) GetTeam() *teamByNameTeam { return v.Team }

// teamByNameTeam includes the requested fields of the GraphQL type Team.
type teamByNameTeam struct {
	Id         uuid.UUID `json:"id"`
	TeamDetail `json:"-"`
}

// GetId returns teamByNameTeam.Id, and is useful for accessing the field via an interface.
func (v *teamByNameTeam) GetId() uuid.UUID { return v.Id }

// GetUser returns teamByNameTeam.User, and is useful for accessing the field via an interface.
func (v *teamByNameTeam) GetUser() TeamDetailUser { return v.TeamDetail.User }

// GetPlan returns teamByNameTeam.Plan, and is useful for accessing the field via an interface.
func (v *teamByNameTeam) GetPlan() TeamCommonPlan { return v.TeamDetail.TeamCommon.Plan }

func (v *teamByNameTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*teamByNameTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.teamByNameTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalteamByNameTeam struct {
	Id uuid.UUID `json:"id"`

	User TeamDetailUser `json:"user"`

	Plan TeamCommonPlan `json:"plan"`
}

func (v *teamByNameTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *teamByNameTeam) __premarshalJSON() (*__premarshalteamByNameTeam, error) {
	var retval __premarshalteamByNameTeam

	retval.Id = v.Id
	retval.User = v.TeamDetail.User
	retval.Plan = v.TeamDetail.TeamCommon.Plan
	return &retval, nil
}

// teamCloudCurrentUser includes the requested fields of the GraphQL type User.
type teamCloudCurrentUser struct {
	Id   uuid.UUID                 `json:"id"`
	Team *teamCloudCurrentUserTeam `json:"team"`
}

// GetId returns teamCloudCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUser) GetId() uuid.UUID { return v.Id }

// GetTeam returns teamCloudCurrentUser.Team, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUser) GetTeam() *teamCloudCurrentUserTeam { return v.Team }

// teamCloudCurrentUserTeam includes the requested fields of the GraphQL type Team.
type teamCloudCurrentUserTeam struct {
	Id          uuid.UUID                                       `json:"id"`
	AwsAccounts []teamCloudCurrentUserTeamAwsAccountsAWSAccount `json:"awsAccounts"`
}

// GetId returns teamCloudCurrentUserTeam.Id, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeam) GetId() uuid.UUID { return v.Id }

// GetAwsAccounts returns teamCloudCurrentUserTeam.AwsAccounts, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeam) GetAwsAccounts() []teamCloudCurrentUserTeamAwsAccountsAWSAccount {
	return v.AwsAccounts
}

// teamCloudCurrentUserTeamAwsAccountsAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type teamCloudCurrentUserTeamAwsAccountsAWSAccount struct {
	IamUsers           []teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUser                     `json:"iamUsers"`
	UserIamConnections []teamCloudCurrentUserTeamAwsAccountsAWSAccountUserIamConnectionsUserIamConnection `json:"userIamConnections"`
	AccountID          *string                                                                            `json:"accountID"`
	Id                 uuid.UUID                                                                          `json:"id"`
}

// GetIamUsers returns teamCloudCurrentUserTeamAwsAccountsAWSAccount.IamUsers, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccount) GetIamUsers() []teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUser {
	return v.IamUsers
}

// GetUserIamConnections returns teamCloudCurrentUserTeamAwsAccountsAWSAccount.UserIamConnections, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccount) GetUserIamConnections() []teamCloudCurrentUserTeamAwsAccountsAWSAccountUserIamConnectionsUserIamConnection {
	return v.UserIamConnections
}

// GetAccountID returns teamCloudCurrentUserTeamAwsAccountsAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccount) GetAccountID() *string { return v.AccountID }

// GetId returns teamCloudCurrentUserTeamAwsAccountsAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccount) GetId() uuid.UUID { return v.Id }

// teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUser includes the requested fields of the GraphQL type AwsUser.
type teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUser struct {
	Arn                 string                                                                                                 `json:"arn"`
	UserId              string                                                                                                 `json:"userId"`
	Username            string                                                                                                 `json:"username"`
	AttachedAwsPolicies []*teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUserAttachedAwsPoliciesAttachedAwsIamPolicy `json:"attachedAwsPolicies"`
}

// GetArn returns teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUser.Arn, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUser) GetArn() string { return v.Arn }

// GetUserId returns teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUser.UserId, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUser) GetUserId() string {
	return v.UserId
}

// GetUsername returns teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUser.Username, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUser) GetUsername() string {
	return v.Username
}

// GetAttachedAwsPolicies returns teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUser.AttachedAwsPolicies, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUser) GetAttachedAwsPolicies() []*teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUserAttachedAwsPoliciesAttachedAwsIamPolicy {
	return v.AttachedAwsPolicies
}

// teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUserAttachedAwsPoliciesAttachedAwsIamPolicy includes the requested fields of the GraphQL type AttachedAwsIamPolicy.
type teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUserAttachedAwsPoliciesAttachedAwsIamPolicy struct {
	Arn        string `json:"arn"`
	PolicyName string `json:"policyName"`
	GroupName  string `json:"groupName"`
}

// GetArn returns teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUserAttachedAwsPoliciesAttachedAwsIamPolicy.Arn, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUserAttachedAwsPoliciesAttachedAwsIamPolicy) GetArn() string {
	return v.Arn
}

// GetPolicyName returns teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUserAttachedAwsPoliciesAttachedAwsIamPolicy.PolicyName, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUserAttachedAwsPoliciesAttachedAwsIamPolicy) GetPolicyName() string {
	return v.PolicyName
}

// GetGroupName returns teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUserAttachedAwsPoliciesAttachedAwsIamPolicy.GroupName, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccountIamUsersAwsUserAttachedAwsPoliciesAttachedAwsIamPolicy) GetGroupName() string {
	return v.GroupName
}

// teamCloudCurrentUserTeamAwsAccountsAWSAccountUserIamConnectionsUserIamConnection includes the requested fields of the GraphQL type UserIamConnection.
type teamCloudCurrentUserTeamAwsAccountsAWSAccountUserIamConnectionsUserIamConnection struct {
	UserId       string    `json:"userId"`
	AwsIamArn    string    `json:"awsIamArn"`
	AwsAccountId string    `json:"awsAccountId"`
	Id           uuid.UUID `json:"id"`
}

// GetUserId returns teamCloudCurrentUserTeamAwsAccountsAWSAccountUserIamConnectionsUserIamConnection.UserId, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccountUserIamConnectionsUserIamConnection) GetUserId() string {
	return v.UserId
}

// GetAwsIamArn returns teamCloudCurrentUserTeamAwsAccountsAWSAccountUserIamConnectionsUserIamConnection.AwsIamArn, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccountUserIamConnectionsUserIamConnection) GetAwsIamArn() string {
	return v.AwsIamArn
}

// GetAwsAccountId returns teamCloudCurrentUserTeamAwsAccountsAWSAccountUserIamConnectionsUserIamConnection.AwsAccountId, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccountUserIamConnectionsUserIamConnection) GetAwsAccountId() string {
	return v.AwsAccountId
}

// GetId returns teamCloudCurrentUserTeamAwsAccountsAWSAccountUserIamConnectionsUserIamConnection.Id, and is useful for accessing the field via an interface.
func (v *teamCloudCurrentUserTeamAwsAccountsAWSAccountUserIamConnectionsUserIamConnection) GetId() uuid.UUID {
	return v.Id
}

// teamCloudResponse is returned by teamCloud on success.
type teamCloudResponse struct {
	CurrentUser teamCloudCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns teamCloudResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *teamCloudResponse) GetCurrentUser() teamCloudCurrentUser { return v.CurrentUser }

// teamGithubReposResponse is returned by teamGithubRepos on success.
type teamGithubReposResponse struct {
	Team *teamGithubReposTeam `json:"team"`
}

// GetTeam returns teamGithubReposResponse.Team, and is useful for accessing the field via an interface.
func (v *teamGithubReposResponse) GetTeam() *teamGithubReposTeam { return v.Team }

// teamGithubReposTeam includes the requested fields of the GraphQL type Team.
type teamGithubReposTeam struct {
	User teamGithubReposTeamUser `json:"user"`
}

// GetUser returns teamGithubReposTeam.User, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeam) GetUser() teamGithubReposTeamUser { return v.User }

// teamGithubReposTeamUser includes the requested fields of the GraphQL type User.
type teamGithubReposTeamUser struct {
	GithubInstallations []teamGithubReposTeamUserGithubInstallationsGitHubInstallation `json:"githubInstallations"`
}

// GetGithubInstallations returns teamGithubReposTeamUser.GithubInstallations, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUser) GetGithubInstallations() []teamGithubReposTeamUserGithubInstallationsGitHubInstallation {
	return v.GithubInstallations
}

// teamGithubReposTeamUserGithubInstallationsGitHubInstallation includes the requested fields of the GraphQL type GitHubInstallation.
type teamGithubReposTeamUserGithubInstallationsGitHubInstallation struct {
	Id                  uuid.UUID                                                                                  `json:"id"`
	TargetType          string                                                                                     `json:"targetType"`
	Account             teamGithubReposTeamUserGithubInstallationsGitHubInstallationAccountGitHubUser              `json:"account"`
	RepositorySelection string                                                                                     `json:"repositorySelection"`
	Repositories        []teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository `json:"repositories"`
}

// GetId returns teamGithubReposTeamUserGithubInstallationsGitHubInstallation.Id, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallation) GetId() uuid.UUID { return v.Id }

// GetTargetType returns teamGithubReposTeamUserGithubInstallationsGitHubInstallation.TargetType, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallation) GetTargetType() string {
	return v.TargetType
}

// GetAccount returns teamGithubReposTeamUserGithubInstallationsGitHubInstallation.Account, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallation) GetAccount() teamGithubReposTeamUserGithubInstallationsGitHubInstallationAccountGitHubUser {
	return v.Account
}

// GetRepositorySelection returns teamGithubReposTeamUserGithubInstallationsGitHubInstallation.RepositorySelection, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallation) GetRepositorySelection() string {
	return v.RepositorySelection
}

// GetRepositories returns teamGithubReposTeamUserGithubInstallationsGitHubInstallation.Repositories, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallation) GetRepositories() []teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository {
	return v.Repositories
}

// teamGithubReposTeamUserGithubInstallationsGitHubInstallationAccountGitHubUser includes the requested fields of the GraphQL type GitHubUser.
type teamGithubReposTeamUserGithubInstallationsGitHubInstallationAccountGitHubUser struct {
	Id     uuid.UUID      `json:"id"`
	Login  string         `json:"login"`
	Avatar *string        `json:"avatar"`
	Type   GithubUserType `json:"type"`
}

// GetId returns teamGithubReposTeamUserGithubInstallationsGitHubInstallationAccountGitHubUser.Id, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationAccountGitHubUser) GetId() uuid.UUID {
	return v.Id
}

// GetLogin returns teamGithubReposTeamUserGithubInstallationsGitHubInstallationAccountGitHubUser.Login, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationAccountGitHubUser) GetLogin() string {
	return v.Login
}

// GetAvatar returns teamGithubReposTeamUserGithubInstallationsGitHubInstallationAccountGitHubUser.Avatar, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationAccountGitHubUser) GetAvatar() *string {
	return v.Avatar
}

// GetType returns teamGithubReposTeamUserGithubInstallationsGitHubInstallationAccountGitHubUser.Type, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationAccountGitHubUser) GetType() GithubUserType {
	return v.Type
}

// teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository includes the requested fields of the GraphQL type GitHubRepository.
type teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository struct {
	GitHubRepo `json:"-"`
}

// GetId returns teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.Id, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetId() uuid.UUID {
	return v.GitHubRepo.Id
}

// GetName returns teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.Name, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetName() string {
	return v.GitHubRepo.Name
}

// GetOwner returns teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.Owner, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetOwner() string {
	return v.GitHubRepo.Owner
}

// GetUrl returns teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.Url, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetUrl() string {
	return v.GitHubRepo.Url
}

// GetDescription returns teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.Description, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetDescription() *string {
	return v.GitHubRepo.Description
}

// GetIsFork returns teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.IsFork, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetIsFork() bool {
	return v.GitHubRepo.IsFork
}

// GetIsPrivate returns teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.IsPrivate, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetIsPrivate() bool {
	return v.GitHubRepo.IsPrivate
}

// GetPrimaryLanguage returns teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.PrimaryLanguage, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetPrimaryLanguage() *string {
	return v.GitHubRepo.PrimaryLanguage
}

// GetUpdatedAt returns teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.UpdatedAt, and is useful for accessing the field via an interface.
func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetUpdatedAt() time.Time {
	return v.GitHubRepo.UpdatedAt
}

func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository
		graphql.NoUnmarshalJSON
	}
	firstPass.teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GitHubRepo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalteamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Owner string `json:"owner"`

	Url string `json:"url"`

	Description *string `json:"description"`

	IsFork bool `json:"isFork"`

	IsPrivate bool `json:"isPrivate"`

	PrimaryLanguage *string `json:"primaryLanguage"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *teamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) __premarshalJSON() (*__premarshalteamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository, error) {
	var retval __premarshalteamGithubReposTeamUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository

	retval.Id = v.GitHubRepo.Id
	retval.Name = v.GitHubRepo.Name
	retval.Owner = v.GitHubRepo.Owner
	retval.Url = v.GitHubRepo.Url
	retval.Description = v.GitHubRepo.Description
	retval.IsFork = v.GitHubRepo.IsFork
	retval.IsPrivate = v.GitHubRepo.IsPrivate
	retval.PrimaryLanguage = v.GitHubRepo.PrimaryLanguage
	retval.UpdatedAt = v.GitHubRepo.UpdatedAt
	return &retval, nil
}

// templateResponse is returned by template on success.
type templateResponse struct {
	Template templateTemplate `json:"template"`
}

// GetTemplate returns templateResponse.Template, and is useful for accessing the field via an interface.
func (v *templateResponse) GetTemplate() templateTemplate { return v.Template }

// templateTemplate includes the requested fields of the GraphQL type Template.
type templateTemplate struct {
	Id             uuid.UUID `json:"id"`
	TemplateCommon `json:"-"`
}

// GetId returns templateTemplate.Id, and is useful for accessing the field via an interface.
func (v *templateTemplate) GetId() uuid.UUID { return v.Id }

// GetName returns templateTemplate.Name, and is useful for accessing the field via an interface.
func (v *templateTemplate) GetName() string { return v.TemplateCommon.Name }

// GetDescription returns templateTemplate.Description, and is useful for accessing the field via an interface.
func (v *templateTemplate) GetDescription() string { return v.TemplateCommon.Description }

// GetImage returns templateTemplate.Image, and is useful for accessing the field via an interface.
func (v *templateTemplate) GetImage() string { return v.TemplateCommon.Image }

// GetHomepageURL returns templateTemplate.HomepageURL, and is useful for accessing the field via an interface.
func (v *templateTemplate) GetHomepageURL() *string { return v.TemplateCommon.HomepageURL }

// GetRepositoryURL returns templateTemplate.RepositoryURL, and is useful for accessing the field via an interface.
func (v *templateTemplate) GetRepositoryURL() *string { return v.TemplateCommon.RepositoryURL }

// GetStats returns templateTemplate.Stats, and is useful for accessing the field via an interface.
func (v *templateTemplate) GetStats() *TemplateCommonStatsTemplateStats {
	return v.TemplateCommon.Stats
}

// GetProjects returns templateTemplate.Projects, and is useful for accessing the field via an interface.
func (v *templateTemplate) GetProjects() []TemplateCommonProjectsProjectTemplate {
	return v.TemplateCommon.Projects
}

func (v *templateTemplate) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*templateTemplate
		graphql.NoUnmarshalJSON
	}
	firstPass.templateTemplate = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TemplateCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaltemplateTemplate struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	HomepageURL *string `json:"homepageURL"`

	RepositoryURL *string `json:"repositoryURL"`

	Stats *TemplateCommonStatsTemplateStats `json:"stats"`

	Projects []TemplateCommonProjectsProjectTemplate `json:"projects"`
}

func (v *templateTemplate) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *templateTemplate) __premarshalJSON() (*__premarshaltemplateTemplate, error) {
	var retval __premarshaltemplateTemplate

	retval.Id = v.Id
	retval.Name = v.TemplateCommon.Name
	retval.Description = v.TemplateCommon.Description
	retval.Image = v.TemplateCommon.Image
	retval.HomepageURL = v.TemplateCommon.HomepageURL
	retval.RepositoryURL = v.TemplateCommon.RepositoryURL
	retval.Stats = v.TemplateCommon.Stats
	retval.Projects = v.TemplateCommon.Projects
	return &retval, nil
}

// transferProjectResponse is returned by transferProject on success.
type transferProjectResponse struct {
	TransferProject transferProjectTransferProjectRepo `json:"transferProject"`
}

// GetTransferProject returns transferProjectResponse.TransferProject, and is useful for accessing the field via an interface.
func (v *transferProjectResponse) GetTransferProject() transferProjectTransferProjectRepo {
	return v.TransferProject
}

// transferProjectTransferProjectRepo includes the requested fields of the GraphQL type Repo.
type transferProjectTransferProjectRepo struct {
	// - v0.RepoID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns transferProjectTransferProjectRepo.Id, and is useful for accessing the field via an interface.
func (v *transferProjectTransferProjectRepo) GetId() uuid.UUID { return v.Id }

// GetName returns transferProjectTransferProjectRepo.Name, and is useful for accessing the field via an interface.
func (v *transferProjectTransferProjectRepo) GetName() string { return v.Name }

// unitPricePrices includes the requested fields of the GraphQL type Prices.
type unitPricePrices struct {
	RamGB            float64 `json:"ramGB"`
	CpuCore          float64 `json:"cpuCore"`
	DedicatedGPU     float64 `json:"dedicatedGPU"`
	DedicatedRamGB   float64 `json:"dedicatedRamGB"`
	DedicatedCpuCore float64 `json:"dedicatedCpuCore"`
	StorageGB        float64 `json:"storageGB"`
}

// GetRamGB returns unitPricePrices.RamGB, and is useful for accessing the field via an interface.
func (v *unitPricePrices) GetRamGB() float64 { return v.RamGB }

// GetCpuCore returns unitPricePrices.CpuCore, and is useful for accessing the field via an interface.
func (v *unitPricePrices) GetCpuCore() float64 { return v.CpuCore }

// GetDedicatedGPU returns unitPricePrices.DedicatedGPU, and is useful for accessing the field via an interface.
func (v *unitPricePrices) GetDedicatedGPU() float64 { return v.DedicatedGPU }

// GetDedicatedRamGB returns unitPricePrices.DedicatedRamGB, and is useful for accessing the field via an interface.
func (v *unitPricePrices) GetDedicatedRamGB() float64 { return v.DedicatedRamGB }

// GetDedicatedCpuCore returns unitPricePrices.DedicatedCpuCore, and is useful for accessing the field via an interface.
func (v *unitPricePrices) GetDedicatedCpuCore() float64 { return v.DedicatedCpuCore }

// GetStorageGB returns unitPricePrices.StorageGB, and is useful for accessing the field via an interface.
func (v *unitPricePrices) GetStorageGB() float64 { return v.StorageGB }

// unitPriceResponse is returned by unitPrice on success.
type unitPriceResponse struct {
	Prices unitPricePrices `json:"prices"`
}

// GetPrices returns unitPriceResponse.Prices, and is useful for accessing the field via an interface.
func (v *unitPriceResponse) GetPrices() unitPricePrices { return v.Prices }

// unlinkClusterResponse is returned by unlinkCluster on success.
type unlinkClusterResponse struct {
	UnlinkCluster bool `json:"unlinkCluster"`
}

// GetUnlinkCluster returns unlinkClusterResponse.UnlinkCluster, and is useful for accessing the field via an interface.
func (v *unlinkClusterResponse) GetUnlinkCluster() bool { return v.UnlinkCluster }

// unlinkDatabaseResponse is returned by unlinkDatabase on success.
type unlinkDatabaseResponse struct {
	UnlinkDatabase *bool `json:"unlinkDatabase"`
}

// GetUnlinkDatabase returns unlinkDatabaseResponse.UnlinkDatabase, and is useful for accessing the field via an interface.
func (v *unlinkDatabaseResponse) GetUnlinkDatabase() *bool { return v.UnlinkDatabase }

// unlinkProjectResponse is returned by unlinkProject on success.
type unlinkProjectResponse struct {
	UnlinkRepo bool `json:"unlinkRepo"`
}

// GetUnlinkRepo returns unlinkProjectResponse.UnlinkRepo, and is useful for accessing the field via an interface.
func (v *unlinkProjectResponse) GetUnlinkRepo() bool { return v.UnlinkRepo }

// updateAWSAccountResponse is returned by updateAWSAccount on success.
type updateAWSAccountResponse struct {
	UpdateAWSAccount bool `json:"updateAWSAccount"`
}

// GetUpdateAWSAccount returns updateAWSAccountResponse.UpdateAWSAccount, and is useful for accessing the field via an interface.
func (v *updateAWSAccountResponse) GetUpdateAWSAccount() bool { return v.UpdateAWSAccount }

// updateAzureAccountResponse is returned by updateAzureAccount on success.
type updateAzureAccountResponse struct {
	UpdateAzureAccount bool `json:"updateAzureAccount"`
}

// GetUpdateAzureAccount returns updateAzureAccountResponse.UpdateAzureAccount, and is useful for accessing the field via an interface.
func (v *updateAzureAccountResponse) GetUpdateAzureAccount() bool { return v.UpdateAzureAccount }

// updateBitbucketIntegrationResponse is returned by updateBitbucketIntegration on success.
type updateBitbucketIntegrationResponse struct {
	UpdateBitbucketIntegration updateBitbucketIntegrationUpdateBitbucketIntegration `json:"updateBitbucketIntegration"`
}

// GetUpdateBitbucketIntegration returns updateBitbucketIntegrationResponse.UpdateBitbucketIntegration, and is useful for accessing the field via an interface.
func (v *updateBitbucketIntegrationResponse) GetUpdateBitbucketIntegration() updateBitbucketIntegrationUpdateBitbucketIntegration {
	return v.UpdateBitbucketIntegration
}

// updateBitbucketIntegrationUpdateBitbucketIntegration includes the requested fields of the GraphQL type BitbucketIntegration.
type updateBitbucketIntegrationUpdateBitbucketIntegration struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns updateBitbucketIntegrationUpdateBitbucketIntegration.Id, and is useful for accessing the field via an interface.
func (v *updateBitbucketIntegrationUpdateBitbucketIntegration) GetId() uuid.UUID { return v.Id }

// updateBlueprintResponse is returned by updateBlueprint on success.
type updateBlueprintResponse struct {
	UpdateBlueprint updateBlueprintUpdateBlueprint `json:"updateBlueprint"`
}

// GetUpdateBlueprint returns updateBlueprintResponse.UpdateBlueprint, and is useful for accessing the field via an interface.
func (v *updateBlueprintResponse) GetUpdateBlueprint() updateBlueprintUpdateBlueprint {
	return v.UpdateBlueprint
}

// updateBlueprintUpdateBlueprint includes the requested fields of the GraphQL type Blueprint.
type updateBlueprintUpdateBlueprint struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns updateBlueprintUpdateBlueprint.Id, and is useful for accessing the field via an interface.
func (v *updateBlueprintUpdateBlueprint) GetId() uuid.UUID { return v.Id }

// updateCDNResponse is returned by updateCDN on success.
type updateCDNResponse struct {
	UpdateCDN updateCDNUpdateCDN `json:"updateCDN"`
}

// GetUpdateCDN returns updateCDNResponse.UpdateCDN, and is useful for accessing the field via an interface.
func (v *updateCDNResponse) GetUpdateCDN() updateCDNUpdateCDN { return v.UpdateCDN }

// updateCDNUpdateCDN includes the requested fields of the GraphQL type CDN.
type updateCDNUpdateCDN struct {
	Id        uuid.UUID `json:"id"`
	CDNDetail `json:"-"`
}

// GetId returns updateCDNUpdateCDN.Id, and is useful for accessing the field via an interface.
func (v *updateCDNUpdateCDN) GetId() uuid.UUID { return v.Id }

// GetDomains returns updateCDNUpdateCDN.Domains, and is useful for accessing the field via an interface.
func (v *updateCDNUpdateCDN) GetDomains() []CDNDetailDomainsCDNDomain { return v.CDNDetail.Domains }

// GetEndpoint returns updateCDNUpdateCDN.Endpoint, and is useful for accessing the field via an interface.
func (v *updateCDNUpdateCDN) GetEndpoint() *string { return v.CDNDetail.Endpoint }

// GetState returns updateCDNUpdateCDN.State, and is useful for accessing the field via an interface.
func (v *updateCDNUpdateCDN) GetState() string { return v.CDNDetail.State }

// GetCertificate returns updateCDNUpdateCDN.Certificate, and is useful for accessing the field via an interface.
func (v *updateCDNUpdateCDN) GetCertificate() *CDNDetailCertificate { return v.CDNDetail.Certificate }

func (v *updateCDNUpdateCDN) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateCDNUpdateCDN
		graphql.NoUnmarshalJSON
	}
	firstPass.updateCDNUpdateCDN = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CDNDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateCDNUpdateCDN struct {
	Id uuid.UUID `json:"id"`

	Domains []CDNDetailDomainsCDNDomain `json:"domains"`

	Endpoint *string `json:"endpoint"`

	State string `json:"state"`

	Certificate *CDNDetailCertificate `json:"certificate"`
}

func (v *updateCDNUpdateCDN) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateCDNUpdateCDN) __premarshalJSON() (*__premarshalupdateCDNUpdateCDN, error) {
	var retval __premarshalupdateCDNUpdateCDN

	retval.Id = v.Id
	retval.Domains = v.CDNDetail.Domains
	retval.Endpoint = v.CDNDetail.Endpoint
	retval.State = v.CDNDetail.State
	retval.Certificate = v.CDNDetail.Certificate
	return &retval, nil
}

// updateCertResponse is returned by updateCert on success.
type updateCertResponse struct {
	UpdateRepoCustomDomain updateCertUpdateRepoCustomDomainRepo `json:"updateRepoCustomDomain"`
}

// GetUpdateRepoCustomDomain returns updateCertResponse.UpdateRepoCustomDomain, and is useful for accessing the field via an interface.
func (v *updateCertResponse) GetUpdateRepoCustomDomain() updateCertUpdateRepoCustomDomainRepo {
	return v.UpdateRepoCustomDomain
}

// updateCertUpdateRepoCustomDomainRepo includes the requested fields of the GraphQL type Repo.
type updateCertUpdateRepoCustomDomainRepo struct {
	// - v0.RepoID
	Id         uuid.UUID `json:"id"`
	RepoDetail `json:"-"`
}

// GetId returns updateCertUpdateRepoCustomDomainRepo.Id, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetId() uuid.UUID { return v.Id }

// GetSecretMounts returns updateCertUpdateRepoCustomDomainRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns updateCertUpdateRepoCustomDomainRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns updateCertUpdateRepoCustomDomainRepo.Manifest, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns updateCertUpdateRepoCustomDomainRepo.AppID, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns updateCertUpdateRepoCustomDomainRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns updateCertUpdateRepoCustomDomainRepo.KappID, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns updateCertUpdateRepoCustomDomainRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns updateCertUpdateRepoCustomDomainRepo.Project, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns updateCertUpdateRepoCustomDomainRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns updateCertUpdateRepoCustomDomainRepo.Namespace, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns updateCertUpdateRepoCustomDomainRepo.Envs, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetEnvs() []RepoDetailEnvsEnvVar {
	return v.RepoDetail.Envs
}

// GetCollaborators returns updateCertUpdateRepoCustomDomainRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns updateCertUpdateRepoCustomDomainRepo.Volumes, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns updateCertUpdateRepoCustomDomainRepo.Replication, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns updateCertUpdateRepoCustomDomainRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns updateCertUpdateRepoCustomDomainRepo.Cluster, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns updateCertUpdateRepoCustomDomainRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns updateCertUpdateRepoCustomDomainRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns updateCertUpdateRepoCustomDomainRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns updateCertUpdateRepoCustomDomainRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns updateCertUpdateRepoCustomDomainRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns updateCertUpdateRepoCustomDomainRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns updateCertUpdateRepoCustomDomainRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetManualDeploy() *bool {
	return v.RepoDetail.ManualDeploy
}

// GetDeployStrategy returns updateCertUpdateRepoCustomDomainRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns updateCertUpdateRepoCustomDomainRepo.Free, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns updateCertUpdateRepoCustomDomainRepo.Cpu, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns updateCertUpdateRepoCustomDomainRepo.Memory, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns updateCertUpdateRepoCustomDomainRepo.Gpu, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetGpu() *RepoDetailGpuGPUSpec {
	return v.RepoDetail.Gpu
}

// GetTpu returns updateCertUpdateRepoCustomDomainRepo.Tpu, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetTpu() *RepoDetailTpuTPUSpec {
	return v.RepoDetail.Tpu
}

// GetEphemeralStorage returns updateCertUpdateRepoCustomDomainRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns updateCertUpdateRepoCustomDomainRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns updateCertUpdateRepoCustomDomainRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns updateCertUpdateRepoCustomDomainRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns updateCertUpdateRepoCustomDomainRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns updateCertUpdateRepoCustomDomainRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns updateCertUpdateRepoCustomDomainRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns updateCertUpdateRepoCustomDomainRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns updateCertUpdateRepoCustomDomainRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns updateCertUpdateRepoCustomDomainRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetHelmValues() *string {
	return v.RepoDetail.HelmValues
}

// GetTerraformVersion returns updateCertUpdateRepoCustomDomainRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns updateCertUpdateRepoCustomDomainRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns updateCertUpdateRepoCustomDomainRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns updateCertUpdateRepoCustomDomainRepo.DeployService, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns updateCertUpdateRepoCustomDomainRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns updateCertUpdateRepoCustomDomainRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetPreStopSleep() *int {
	return v.RepoDetail.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns updateCertUpdateRepoCustomDomainRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns updateCertUpdateRepoCustomDomainRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns updateCertUpdateRepoCustomDomainRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns updateCertUpdateRepoCustomDomainRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns updateCertUpdateRepoCustomDomainRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns updateCertUpdateRepoCustomDomainRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns updateCertUpdateRepoCustomDomainRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns updateCertUpdateRepoCustomDomainRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns updateCertUpdateRepoCustomDomainRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns updateCertUpdateRepoCustomDomainRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns updateCertUpdateRepoCustomDomainRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetAutoRollback() *bool {
	return v.RepoDetail.AutoRollback
}

// GetCanDeploy returns updateCertUpdateRepoCustomDomainRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns updateCertUpdateRepoCustomDomainRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns updateCertUpdateRepoCustomDomainRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetAwsIamRole() *string {
	return v.RepoDetail.AwsIamRole
}

// GetGcpServiceAccount returns updateCertUpdateRepoCustomDomainRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns updateCertUpdateRepoCustomDomainRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns updateCertUpdateRepoCustomDomainRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns updateCertUpdateRepoCustomDomainRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns updateCertUpdateRepoCustomDomainRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetPath returns updateCertUpdateRepoCustomDomainRepo.Path, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns updateCertUpdateRepoCustomDomainRepo.Name, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns updateCertUpdateRepoCustomDomainRepo.Enabled, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetEnabled() bool {
	return v.RepoDetail.RepoCommon.Enabled
}

// GetSource returns updateCertUpdateRepoCustomDomainRepo.Source, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns updateCertUpdateRepoCustomDomainRepo.DeployType, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns updateCertUpdateRepoCustomDomainRepo.Image, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetImage() *string {
	return v.RepoDetail.RepoCommon.Image
}

// GetUpdatedAt returns updateCertUpdateRepoCustomDomainRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns updateCertUpdateRepoCustomDomainRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns updateCertUpdateRepoCustomDomainRepo.Owner, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns updateCertUpdateRepoCustomDomainRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns updateCertUpdateRepoCustomDomainRepo.Cdns, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns updateCertUpdateRepoCustomDomainRepo.Ports, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns updateCertUpdateRepoCustomDomainRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns updateCertUpdateRepoCustomDomainRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns updateCertUpdateRepoCustomDomainRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns updateCertUpdateRepoCustomDomainRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns updateCertUpdateRepoCustomDomainRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns updateCertUpdateRepoCustomDomainRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns updateCertUpdateRepoCustomDomainRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns updateCertUpdateRepoCustomDomainRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns updateCertUpdateRepoCustomDomainRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *updateCertUpdateRepoCustomDomainRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *updateCertUpdateRepoCustomDomainRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateCertUpdateRepoCustomDomainRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.updateCertUpdateRepoCustomDomainRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateCertUpdateRepoCustomDomainRepo struct {
	Id uuid.UUID `json:"id"`

	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *updateCertUpdateRepoCustomDomainRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateCertUpdateRepoCustomDomainRepo) __premarshalJSON() (*__premarshalupdateCertUpdateRepoCustomDomainRepo, error) {
	var retval __premarshalupdateCertUpdateRepoCustomDomainRepo

	retval.Id = v.Id
	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// updateClusterResponse is returned by updateCluster on success.
type updateClusterResponse struct {
	UpdateCluster updateClusterUpdateCluster `json:"updateCluster"`
}

// GetUpdateCluster returns updateClusterResponse.UpdateCluster, and is useful for accessing the field via an interface.
func (v *updateClusterResponse) GetUpdateCluster() updateClusterUpdateCluster { return v.UpdateCluster }

// updateClusterUpdateCluster includes the requested fields of the GraphQL type Cluster.
type updateClusterUpdateCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns updateClusterUpdateCluster.Id, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetId() uuid.UUID { return v.Id }

// GetName returns updateClusterUpdateCluster.Name, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns updateClusterUpdateCluster.Region, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetRegion() *string { return v.ClusterDetail.Region }

// GetState returns updateClusterUpdateCluster.State, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetState() ClusterState { return v.ClusterDetail.State }

// GetStatus returns updateClusterUpdateCluster.Status, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetStatus() *ClusterStatus { return v.ClusterDetail.Status }

// GetConnected returns updateClusterUpdateCluster.Connected, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetConnected() *bool { return v.ClusterDetail.Connected }

// GetDomain returns updateClusterUpdateCluster.Domain, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetDomain() *string { return v.ClusterDetail.Domain }

// GetIsExternal returns updateClusterUpdateCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetIsExternal() *bool { return v.ClusterDetail.IsExternal }

// GetIsEjected returns updateClusterUpdateCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetIsEjected() *bool { return v.ClusterDetail.IsEjected }

// GetComponents returns updateClusterUpdateCluster.Components, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns updateClusterUpdateCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns updateClusterUpdateCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns updateClusterUpdateCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns updateClusterUpdateCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns updateClusterUpdateCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns updateClusterUpdateCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns updateClusterUpdateCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns updateClusterUpdateCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns updateClusterUpdateCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetIngressIP() *string { return v.ClusterDetail.IngressIP }

// GetIngressDNS returns updateClusterUpdateCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetIngressDNS() *string { return v.ClusterDetail.IngressDNS }

// GetClusterProvider returns updateClusterUpdateCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns updateClusterUpdateCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns updateClusterUpdateCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns updateClusterUpdateCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns updateClusterUpdateCluster.Grafana, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns updateClusterUpdateCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns updateClusterUpdateCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns updateClusterUpdateCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns updateClusterUpdateCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetUpdatedAt() time.Time { return v.ClusterDetail.UpdatedAt }

// GetCreatedAt returns updateClusterUpdateCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetCreatedAt() time.Time { return v.ClusterDetail.CreatedAt }

// GetProjects returns updateClusterUpdateCluster.Projects, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns updateClusterUpdateCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns updateClusterUpdateCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *updateClusterUpdateCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *updateClusterUpdateCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateClusterUpdateCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.updateClusterUpdateCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateClusterUpdateCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *updateClusterUpdateCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateClusterUpdateCluster) __premarshalJSON() (*__premarshalupdateClusterUpdateCluster, error) {
	var retval __premarshalupdateClusterUpdateCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal updateClusterUpdateCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// updateCoreWeaveAccountResponse is returned by updateCoreWeaveAccount on success.
type updateCoreWeaveAccountResponse struct {
	UpdateCoreWeaveAccount bool `json:"updateCoreWeaveAccount"`
}

// GetUpdateCoreWeaveAccount returns updateCoreWeaveAccountResponse.UpdateCoreWeaveAccount, and is useful for accessing the field via an interface.
func (v *updateCoreWeaveAccountResponse) GetUpdateCoreWeaveAccount() bool {
	return v.UpdateCoreWeaveAccount
}

// updateDOAccountResponse is returned by updateDOAccount on success.
type updateDOAccountResponse struct {
	UpdateDOAccount bool `json:"updateDOAccount"`
}

// GetUpdateDOAccount returns updateDOAccountResponse.UpdateDOAccount, and is useful for accessing the field via an interface.
func (v *updateDOAccountResponse) GetUpdateDOAccount() bool { return v.UpdateDOAccount }

// updateDatabaseLinkResponse is returned by updateDatabaseLink on success.
type updateDatabaseLinkResponse struct {
	UpdateDatabaseLink updateDatabaseLinkUpdateDatabaseLinkRepo `json:"updateDatabaseLink"`
}

// GetUpdateDatabaseLink returns updateDatabaseLinkResponse.UpdateDatabaseLink, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkResponse) GetUpdateDatabaseLink() updateDatabaseLinkUpdateDatabaseLinkRepo {
	return v.UpdateDatabaseLink
}

// updateDatabaseLinkUpdateDatabaseLinkRepo includes the requested fields of the GraphQL type Repo.
type updateDatabaseLinkUpdateDatabaseLinkRepo struct {
	RepoDetail `json:"-"`
}

// GetSecretMounts returns updateDatabaseLinkUpdateDatabaseLinkRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns updateDatabaseLinkUpdateDatabaseLinkRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns updateDatabaseLinkUpdateDatabaseLinkRepo.Manifest, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns updateDatabaseLinkUpdateDatabaseLinkRepo.AppID, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns updateDatabaseLinkUpdateDatabaseLinkRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns updateDatabaseLinkUpdateDatabaseLinkRepo.KappID, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns updateDatabaseLinkUpdateDatabaseLinkRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns updateDatabaseLinkUpdateDatabaseLinkRepo.Project, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns updateDatabaseLinkUpdateDatabaseLinkRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns updateDatabaseLinkUpdateDatabaseLinkRepo.Namespace, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetNamespace() *string {
	return v.RepoDetail.Namespace
}

// GetEnvs returns updateDatabaseLinkUpdateDatabaseLinkRepo.Envs, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetEnvs() []RepoDetailEnvsEnvVar {
	return v.RepoDetail.Envs
}

// GetCollaborators returns updateDatabaseLinkUpdateDatabaseLinkRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns updateDatabaseLinkUpdateDatabaseLinkRepo.Volumes, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns updateDatabaseLinkUpdateDatabaseLinkRepo.Replication, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns updateDatabaseLinkUpdateDatabaseLinkRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns updateDatabaseLinkUpdateDatabaseLinkRepo.Cluster, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns updateDatabaseLinkUpdateDatabaseLinkRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns updateDatabaseLinkUpdateDatabaseLinkRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns updateDatabaseLinkUpdateDatabaseLinkRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns updateDatabaseLinkUpdateDatabaseLinkRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns updateDatabaseLinkUpdateDatabaseLinkRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns updateDatabaseLinkUpdateDatabaseLinkRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns updateDatabaseLinkUpdateDatabaseLinkRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetManualDeploy() *bool {
	return v.RepoDetail.ManualDeploy
}

// GetDeployStrategy returns updateDatabaseLinkUpdateDatabaseLinkRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns updateDatabaseLinkUpdateDatabaseLinkRepo.Free, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns updateDatabaseLinkUpdateDatabaseLinkRepo.Cpu, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns updateDatabaseLinkUpdateDatabaseLinkRepo.Memory, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns updateDatabaseLinkUpdateDatabaseLinkRepo.Gpu, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetGpu() *RepoDetailGpuGPUSpec {
	return v.RepoDetail.Gpu
}

// GetTpu returns updateDatabaseLinkUpdateDatabaseLinkRepo.Tpu, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetTpu() *RepoDetailTpuTPUSpec {
	return v.RepoDetail.Tpu
}

// GetEphemeralStorage returns updateDatabaseLinkUpdateDatabaseLinkRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns updateDatabaseLinkUpdateDatabaseLinkRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDedicated() *bool {
	return v.RepoDetail.Dedicated
}

// GetGithubIntegration returns updateDatabaseLinkUpdateDatabaseLinkRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns updateDatabaseLinkUpdateDatabaseLinkRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns updateDatabaseLinkUpdateDatabaseLinkRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns updateDatabaseLinkUpdateDatabaseLinkRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns updateDatabaseLinkUpdateDatabaseLinkRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns updateDatabaseLinkUpdateDatabaseLinkRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns updateDatabaseLinkUpdateDatabaseLinkRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns updateDatabaseLinkUpdateDatabaseLinkRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetHelmValues() *string {
	return v.RepoDetail.HelmValues
}

// GetTerraformVersion returns updateDatabaseLinkUpdateDatabaseLinkRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns updateDatabaseLinkUpdateDatabaseLinkRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns updateDatabaseLinkUpdateDatabaseLinkRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns updateDatabaseLinkUpdateDatabaseLinkRepo.DeployService, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns updateDatabaseLinkUpdateDatabaseLinkRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDeployJob() *bool {
	return v.RepoDetail.DeployJob
}

// GetPreStopSleep returns updateDatabaseLinkUpdateDatabaseLinkRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetPreStopSleep() *int {
	return v.RepoDetail.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns updateDatabaseLinkUpdateDatabaseLinkRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns updateDatabaseLinkUpdateDatabaseLinkRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns updateDatabaseLinkUpdateDatabaseLinkRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns updateDatabaseLinkUpdateDatabaseLinkRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns updateDatabaseLinkUpdateDatabaseLinkRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns updateDatabaseLinkUpdateDatabaseLinkRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns updateDatabaseLinkUpdateDatabaseLinkRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns updateDatabaseLinkUpdateDatabaseLinkRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns updateDatabaseLinkUpdateDatabaseLinkRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns updateDatabaseLinkUpdateDatabaseLinkRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetAutoRetry() *bool {
	return v.RepoDetail.AutoRetry
}

// GetAutoRollback returns updateDatabaseLinkUpdateDatabaseLinkRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetAutoRollback() *bool {
	return v.RepoDetail.AutoRollback
}

// GetCanDeploy returns updateDatabaseLinkUpdateDatabaseLinkRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetCanDeploy() *bool {
	return v.RepoDetail.CanDeploy
}

// GetPipelineCluster returns updateDatabaseLinkUpdateDatabaseLinkRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns updateDatabaseLinkUpdateDatabaseLinkRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetAwsIamRole() *string {
	return v.RepoDetail.AwsIamRole
}

// GetGcpServiceAccount returns updateDatabaseLinkUpdateDatabaseLinkRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns updateDatabaseLinkUpdateDatabaseLinkRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns updateDatabaseLinkUpdateDatabaseLinkRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns updateDatabaseLinkUpdateDatabaseLinkRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns updateDatabaseLinkUpdateDatabaseLinkRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetId returns updateDatabaseLinkUpdateDatabaseLinkRepo.Id, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetId() uuid.UUID {
	return v.RepoDetail.RepoCommon.Id
}

// GetPath returns updateDatabaseLinkUpdateDatabaseLinkRepo.Path, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetPath() string {
	return v.RepoDetail.RepoCommon.Path
}

// GetName returns updateDatabaseLinkUpdateDatabaseLinkRepo.Name, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetName() string {
	return v.RepoDetail.RepoCommon.Name
}

// GetEnabled returns updateDatabaseLinkUpdateDatabaseLinkRepo.Enabled, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetEnabled() bool {
	return v.RepoDetail.RepoCommon.Enabled
}

// GetSource returns updateDatabaseLinkUpdateDatabaseLinkRepo.Source, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns updateDatabaseLinkUpdateDatabaseLinkRepo.DeployType, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns updateDatabaseLinkUpdateDatabaseLinkRepo.Image, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetImage() *string {
	return v.RepoDetail.RepoCommon.Image
}

// GetUpdatedAt returns updateDatabaseLinkUpdateDatabaseLinkRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns updateDatabaseLinkUpdateDatabaseLinkRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns updateDatabaseLinkUpdateDatabaseLinkRepo.Owner, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns updateDatabaseLinkUpdateDatabaseLinkRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns updateDatabaseLinkUpdateDatabaseLinkRepo.Cdns, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns updateDatabaseLinkUpdateDatabaseLinkRepo.Ports, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns updateDatabaseLinkUpdateDatabaseLinkRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns updateDatabaseLinkUpdateDatabaseLinkRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns updateDatabaseLinkUpdateDatabaseLinkRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns updateDatabaseLinkUpdateDatabaseLinkRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns updateDatabaseLinkUpdateDatabaseLinkRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns updateDatabaseLinkUpdateDatabaseLinkRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns updateDatabaseLinkUpdateDatabaseLinkRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns updateDatabaseLinkUpdateDatabaseLinkRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns updateDatabaseLinkUpdateDatabaseLinkRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateDatabaseLinkUpdateDatabaseLinkRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.updateDatabaseLinkUpdateDatabaseLinkRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateDatabaseLinkUpdateDatabaseLinkRepo struct {
	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateDatabaseLinkUpdateDatabaseLinkRepo) __premarshalJSON() (*__premarshalupdateDatabaseLinkUpdateDatabaseLinkRepo, error) {
	var retval __premarshalupdateDatabaseLinkUpdateDatabaseLinkRepo

	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Id = v.RepoDetail.RepoCommon.Id
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// updateDiscordWebhookIntegrationResponse is returned by updateDiscordWebhookIntegration on success.
type updateDiscordWebhookIntegrationResponse struct {
	UpdateDiscordWebhookIntegration updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration `json:"updateDiscordWebhookIntegration"`
}

// GetUpdateDiscordWebhookIntegration returns updateDiscordWebhookIntegrationResponse.UpdateDiscordWebhookIntegration, and is useful for accessing the field via an interface.
func (v *updateDiscordWebhookIntegrationResponse) GetUpdateDiscordWebhookIntegration() updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration {
	return v.UpdateDiscordWebhookIntegration
}

// updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration includes the requested fields of the GraphQL type DiscordWebhookIntegration.
type updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration struct {
	Id                                         uuid.UUID `json:"id"`
	IntegrationCommonDiscordWebhookIntegration `json:"-"`
	Url                                        *string `json:"url"`
}

// GetId returns updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration.Id, and is useful for accessing the field via an interface.
func (v *updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration) GetId() uuid.UUID {
	return v.Id
}

// GetUrl returns updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration.Url, and is useful for accessing the field via an interface.
func (v *updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration) GetUrl() *string {
	return v.Url
}

// GetType returns updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration.Type, and is useful for accessing the field via an interface.
func (v *updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration) GetType() IntegrationType {
	return v.IntegrationCommonDiscordWebhookIntegration.Type
}

// GetName returns updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration.Name, and is useful for accessing the field via an interface.
func (v *updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration) GetName() string {
	return v.IntegrationCommonDiscordWebhookIntegration.Name
}

// GetDescription returns updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration.Description, and is useful for accessing the field via an interface.
func (v *updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration) GetDescription() string {
	return v.IntegrationCommonDiscordWebhookIntegration.Description
}

// GetImage returns updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration.Image, and is useful for accessing the field via an interface.
func (v *updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration) GetImage() string {
	return v.IntegrationCommonDiscordWebhookIntegration.Image
}

// GetCreatedAt returns updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonDiscordWebhookIntegration.CreatedAt
}

// GetUpdatedAt returns updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonDiscordWebhookIntegration.UpdatedAt
}

func (v *updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonDiscordWebhookIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration struct {
	Id uuid.UUID `json:"id"`

	Url *string `json:"url"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration) __premarshalJSON() (*__premarshalupdateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration, error) {
	var retval __premarshalupdateDiscordWebhookIntegrationUpdateDiscordWebhookIntegration

	retval.Id = v.Id
	retval.Url = v.Url
	retval.Type = v.IntegrationCommonDiscordWebhookIntegration.Type
	retval.Name = v.IntegrationCommonDiscordWebhookIntegration.Name
	retval.Description = v.IntegrationCommonDiscordWebhookIntegration.Description
	retval.Image = v.IntegrationCommonDiscordWebhookIntegration.Image
	retval.CreatedAt = v.IntegrationCommonDiscordWebhookIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonDiscordWebhookIntegration.UpdatedAt
	return &retval, nil
}

// updateEnvironmentEnvironmentVariablesResponse is returned by updateEnvironmentEnvironmentVariables on success.
type updateEnvironmentEnvironmentVariablesResponse struct {
	UpdateProjectEnvironment updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment `json:"updateProjectEnvironment"`
}

// GetUpdateProjectEnvironment returns updateEnvironmentEnvironmentVariablesResponse.UpdateProjectEnvironment, and is useful for accessing the field via an interface.
func (v *updateEnvironmentEnvironmentVariablesResponse) GetUpdateProjectEnvironment() updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment {
	return v.UpdateProjectEnvironment
}

// updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment struct {
	Envs                    []updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar `json:"envs"`
	ProjectEnvironmentBasic `json:"-"`
}

// GetEnvs returns updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment.Envs, and is useful for accessing the field via an interface.
func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment) GetEnvs() []updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar {
	return v.Envs
}

// GetId returns updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment) GetId() uuid.UUID {
	return v.ProjectEnvironmentBasic.Id
}

// GetName returns updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment) GetName() string {
	return v.ProjectEnvironmentBasic.Name
}

func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectEnvironmentBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateEnvironmentEnvironmentVariablesUpdateProjectEnvironment struct {
	Envs []updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar `json:"envs"`

	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironment) __premarshalJSON() (*__premarshalupdateEnvironmentEnvironmentVariablesUpdateProjectEnvironment, error) {
	var retval __premarshalupdateEnvironmentEnvironmentVariablesUpdateProjectEnvironment

	retval.Envs = v.Envs
	retval.Id = v.ProjectEnvironmentBasic.Id
	retval.Name = v.ProjectEnvironmentBasic.Name
	return &retval, nil
}

// updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar struct {
	EnvVarDetail `json:"-"`
}

// GetId returns updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar) GetId() uuid.UUID {
	return v.EnvVarDetail.Id
}

// GetName returns updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar) GetName() string {
	return v.EnvVarDetail.Name
}

// GetValue returns updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar) GetValue() string {
	return v.EnvVarDetail.Value
}

// GetVisible returns updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar) GetVisible() bool {
	return v.EnvVarDetail.Visible
}

// GetSealed returns updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar) GetSealed() bool {
	return v.EnvVarDetail.Sealed
}

// GetSource returns updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar.Source, and is useful for accessing the field via an interface.
func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar) GetSource() *EnvVarDetailSourceEnvVarSource {
	return v.EnvVarDetail.Source
}

func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar
		graphql.NoUnmarshalJSON
	}
	firstPass.updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvVarDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Value string `json:"value"`

	Visible bool `json:"visible"`

	Sealed bool `json:"sealed"`

	Source *EnvVarDetailSourceEnvVarSource `json:"source"`
}

func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar) __premarshalJSON() (*__premarshalupdateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar, error) {
	var retval __premarshalupdateEnvironmentEnvironmentVariablesUpdateProjectEnvironmentEnvsEnvVar

	retval.Id = v.EnvVarDetail.Id
	retval.Name = v.EnvVarDetail.Name
	retval.Value = v.EnvVarDetail.Value
	retval.Visible = v.EnvVarDetail.Visible
	retval.Sealed = v.EnvVarDetail.Sealed
	retval.Source = v.EnvVarDetail.Source
	return &retval, nil
}

// updateGCPAccountResponse is returned by updateGCPAccount on success.
type updateGCPAccountResponse struct {
	UpdateGCPAccount bool `json:"updateGCPAccount"`
}

// GetUpdateGCPAccount returns updateGCPAccountResponse.UpdateGCPAccount, and is useful for accessing the field via an interface.
func (v *updateGCPAccountResponse) GetUpdateGCPAccount() bool { return v.UpdateGCPAccount }

// updateGitlabIntegrationResponse is returned by updateGitlabIntegration on success.
type updateGitlabIntegrationResponse struct {
	UpdateGitlabIntegration updateGitlabIntegrationUpdateGitlabIntegration `json:"updateGitlabIntegration"`
}

// GetUpdateGitlabIntegration returns updateGitlabIntegrationResponse.UpdateGitlabIntegration, and is useful for accessing the field via an interface.
func (v *updateGitlabIntegrationResponse) GetUpdateGitlabIntegration() updateGitlabIntegrationUpdateGitlabIntegration {
	return v.UpdateGitlabIntegration
}

// updateGitlabIntegrationUpdateGitlabIntegration includes the requested fields of the GraphQL type GitlabIntegration.
type updateGitlabIntegrationUpdateGitlabIntegration struct {
	Id                                 uuid.UUID `json:"id"`
	IntegrationCommonGitlabIntegration `json:"-"`
	AccessTokenPrefix                  *string `json:"accessTokenPrefix"`
	WebhookUrl                         string  `json:"webhookUrl"`
	WebhookToken                       string  `json:"webhookToken"`
}

// GetId returns updateGitlabIntegrationUpdateGitlabIntegration.Id, and is useful for accessing the field via an interface.
func (v *updateGitlabIntegrationUpdateGitlabIntegration) GetId() uuid.UUID { return v.Id }

// GetAccessTokenPrefix returns updateGitlabIntegrationUpdateGitlabIntegration.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *updateGitlabIntegrationUpdateGitlabIntegration) GetAccessTokenPrefix() *string {
	return v.AccessTokenPrefix
}

// GetWebhookUrl returns updateGitlabIntegrationUpdateGitlabIntegration.WebhookUrl, and is useful for accessing the field via an interface.
func (v *updateGitlabIntegrationUpdateGitlabIntegration) GetWebhookUrl() string { return v.WebhookUrl }

// GetWebhookToken returns updateGitlabIntegrationUpdateGitlabIntegration.WebhookToken, and is useful for accessing the field via an interface.
func (v *updateGitlabIntegrationUpdateGitlabIntegration) GetWebhookToken() string {
	return v.WebhookToken
}

// GetType returns updateGitlabIntegrationUpdateGitlabIntegration.Type, and is useful for accessing the field via an interface.
func (v *updateGitlabIntegrationUpdateGitlabIntegration) GetType() IntegrationType {
	return v.IntegrationCommonGitlabIntegration.Type
}

// GetName returns updateGitlabIntegrationUpdateGitlabIntegration.Name, and is useful for accessing the field via an interface.
func (v *updateGitlabIntegrationUpdateGitlabIntegration) GetName() string {
	return v.IntegrationCommonGitlabIntegration.Name
}

// GetDescription returns updateGitlabIntegrationUpdateGitlabIntegration.Description, and is useful for accessing the field via an interface.
func (v *updateGitlabIntegrationUpdateGitlabIntegration) GetDescription() string {
	return v.IntegrationCommonGitlabIntegration.Description
}

// GetImage returns updateGitlabIntegrationUpdateGitlabIntegration.Image, and is useful for accessing the field via an interface.
func (v *updateGitlabIntegrationUpdateGitlabIntegration) GetImage() string {
	return v.IntegrationCommonGitlabIntegration.Image
}

// GetCreatedAt returns updateGitlabIntegrationUpdateGitlabIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *updateGitlabIntegrationUpdateGitlabIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonGitlabIntegration.CreatedAt
}

// GetUpdatedAt returns updateGitlabIntegrationUpdateGitlabIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateGitlabIntegrationUpdateGitlabIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonGitlabIntegration.UpdatedAt
}

func (v *updateGitlabIntegrationUpdateGitlabIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateGitlabIntegrationUpdateGitlabIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.updateGitlabIntegrationUpdateGitlabIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonGitlabIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateGitlabIntegrationUpdateGitlabIntegration struct {
	Id uuid.UUID `json:"id"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	WebhookUrl string `json:"webhookUrl"`

	WebhookToken string `json:"webhookToken"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *updateGitlabIntegrationUpdateGitlabIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateGitlabIntegrationUpdateGitlabIntegration) __premarshalJSON() (*__premarshalupdateGitlabIntegrationUpdateGitlabIntegration, error) {
	var retval __premarshalupdateGitlabIntegrationUpdateGitlabIntegration

	retval.Id = v.Id
	retval.AccessTokenPrefix = v.AccessTokenPrefix
	retval.WebhookUrl = v.WebhookUrl
	retval.WebhookToken = v.WebhookToken
	retval.Type = v.IntegrationCommonGitlabIntegration.Type
	retval.Name = v.IntegrationCommonGitlabIntegration.Name
	retval.Description = v.IntegrationCommonGitlabIntegration.Description
	retval.Image = v.IntegrationCommonGitlabIntegration.Image
	retval.CreatedAt = v.IntegrationCommonGitlabIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonGitlabIntegration.UpdatedAt
	return &retval, nil
}

// updateLinodeAccountResponse is returned by updateLinodeAccount on success.
type updateLinodeAccountResponse struct {
	UpdateLinodeAccount bool `json:"updateLinodeAccount"`
}

// GetUpdateLinodeAccount returns updateLinodeAccountResponse.UpdateLinodeAccount, and is useful for accessing the field via an interface.
func (v *updateLinodeAccountResponse) GetUpdateLinodeAccount() bool { return v.UpdateLinodeAccount }

// updateMarketplaceBlueprintResponse is returned by updateMarketplaceBlueprint on success.
type updateMarketplaceBlueprintResponse struct {
	UpdateMarketplaceBlueprint updateMarketplaceBlueprintUpdateMarketplaceBlueprint `json:"updateMarketplaceBlueprint"`
}

// GetUpdateMarketplaceBlueprint returns updateMarketplaceBlueprintResponse.UpdateMarketplaceBlueprint, and is useful for accessing the field via an interface.
func (v *updateMarketplaceBlueprintResponse) GetUpdateMarketplaceBlueprint() updateMarketplaceBlueprintUpdateMarketplaceBlueprint {
	return v.UpdateMarketplaceBlueprint
}

// updateMarketplaceBlueprintUpdateMarketplaceBlueprint includes the requested fields of the GraphQL type Blueprint.
type updateMarketplaceBlueprintUpdateMarketplaceBlueprint struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns updateMarketplaceBlueprintUpdateMarketplaceBlueprint.Id, and is useful for accessing the field via an interface.
func (v *updateMarketplaceBlueprintUpdateMarketplaceBlueprint) GetId() uuid.UUID { return v.Id }

// updateNotificationIntegrationConditionsResponse is returned by updateNotificationIntegrationConditions on success.
type updateNotificationIntegrationConditionsResponse struct {
	// Updates notification settings, in two ways:
	// 1. when integrationID is NOT specified: configures global settings for the user
	// OR
	// 2. when integrationID IS specified: configures per-integration settings
	UpdateNotificationIntegrationSettings *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings `json:"updateNotificationIntegrationSettings"`
}

// GetUpdateNotificationIntegrationSettings returns updateNotificationIntegrationConditionsResponse.UpdateNotificationIntegrationSettings, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationConditionsResponse) GetUpdateNotificationIntegrationSettings() *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings {
	return v.UpdateNotificationIntegrationSettings
}

// updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings includes the requested fields of the GraphQL type NotificationIntegrationSettings.
type updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings struct {
	// The condition that must be satisfied for a notification to be forwarded to this integration.
	// A null value indicates all configured notifications will be forwarded.
	//
	// Conditions apply to _all_ configured notification types. To apply different
	// conditions independently to each notification type,
	// create a separate notification integration for each notification type, and apply the desired conditions to each.
	//
	// NOTE: Conditions cannot be configured "globally" for a user.
	Conditions *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider `json:"-"`
}

// GetConditions returns updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings.Conditions, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings) GetConditions() *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider {
	return v.Conditions
}

func (v *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings
		Conditions json.RawMessage `json:"conditions"`
		graphql.NoUnmarshalJSON
	}
	firstPass.updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Conditions
		src := firstPass.Conditions
		if len(src) != 0 && string(src) != "null" {
			*dst = new(updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider)
			err = __unmarshalupdateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings.Conditions: %w", err)
			}
		}
	}
	return nil
}

type __premarshalupdateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings struct {
	Conditions json.RawMessage `json:"conditions"`
}

func (v *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings) __premarshalJSON() (*__premarshalupdateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings, error) {
	var retval __premarshalupdateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings

	{

		dst := &retval.Conditions
		src := v.Conditions
		if src != nil {
			var err error
			*dst, err = __marshalupdateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettings.Conditions: %w", err)
			}
		}
	}
	return &retval, nil
}

// updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition includes the requested fields of the GraphQL type NotificationCondition.
// The GraphQL type's documentation follows.
//
// A notification condition represents a test of some attribute against a target value. A NotificationCondition is evaluated
// to a true/false value, and can be combined via  NotificationConditionGroup.
//
// For example: {operator: EQUALS, key: PROJECT_ID, value: "abc-123"} will test a
// given notification for `event.project_id == "abc-123"`
type updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition struct {
	Typename *string `json:"__typename"`
	// The key to test using the operator and value
	Key *NotificationConditionKey `json:"key"`
	// The method by which the key is tested relative to the target value
	Operator *NotificationConditionOperator `json:"operator"`
	// The required value to satisfy the operator against the specific key.
	// The type of this will depend on the key and the operator, for example: {operator: EQUALS, key: PROJECT_ID}
	// will expect a string value.
	//
	// For example, if the IN operator is used with the PROJECT_ID key, the value will be a a json array: ["abc-123", "def-456"]
	Value *string `json:"value"`
}

// GetTypename returns updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition.Typename, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition) GetTypename() *string {
	return v.Typename
}

// GetKey returns updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition.Key, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition) GetKey() *NotificationConditionKey {
	return v.Key
}

// GetOperator returns updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition.Operator, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition) GetOperator() *NotificationConditionOperator {
	return v.Operator
}

// GetValue returns updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition.Value, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition) GetValue() *string {
	return v.Value
}

// updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionGroup includes the requested fields of the GraphQL type NotificationConditionGroup.
// The GraphQL type's documentation follows.
//
// Represents the logical combination of one or more conditions
type updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionGroup.Typename, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionGroup) GetTypename() *string {
	return v.Typename
}

// updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider includes the requested fields of the GraphQL interface NotificationConditionProvider.
//
// updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider is implemented by the following types:
// updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition
// updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionGroup
// The GraphQL type's documentation follows.
//
// Conditions can be provided as either a singular condition or a group of combined conditions.
// When a notification is triggered by Zeet, a NotificationConditionProvider, if
// configured, will be evaluated against the notification's attributes.
// If the NotificationConditionProvider is satisfied (i.e. evaluates to 'true'),
// then the notification will be forwarded to the target integration.
type updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider interface {
	implementsGraphQLInterfaceupdateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition) implementsGraphQLInterfaceupdateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider() {
}
func (v *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionGroup) implementsGraphQLInterfaceupdateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider() {
}

func __unmarshalupdateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider(b []byte, v *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "NotificationCondition":
		*v = new(updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition)
		return json.Unmarshal(b, *v)
	case "NotificationConditionGroup":
		*v = new(updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionGroup)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing NotificationConditionProvider.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider: "%v"`, tn.TypeName)
	}
}

func __marshalupdateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider(v *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition:
		typename = "NotificationCondition"

		result := struct {
			TypeName string `json:"__typename"`
			*updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationCondition
		}{typename, v}
		return json.Marshal(result)
	case *updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionGroup:
		typename = "NotificationConditionGroup"

		result := struct {
			TypeName string `json:"__typename"`
			*updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionGroup
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for updateNotificationIntegrationConditionsUpdateNotificationIntegrationSettingsConditionsNotificationConditionProvider: "%T"`, v)
	}
}

// updateNotificationIntegrationSettingsResponse is returned by updateNotificationIntegrationSettings on success.
type updateNotificationIntegrationSettingsResponse struct {
	// Updates notification settings, in two ways:
	// 1. when integrationID is NOT specified: configures global settings for the user
	// OR
	// 2. when integrationID IS specified: configures per-integration settings
	UpdateNotificationIntegrationSettings *updateNotificationIntegrationSettingsUpdateNotificationIntegrationSettings `json:"updateNotificationIntegrationSettings"`
}

// GetUpdateNotificationIntegrationSettings returns updateNotificationIntegrationSettingsResponse.UpdateNotificationIntegrationSettings, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationSettingsResponse) GetUpdateNotificationIntegrationSettings() *updateNotificationIntegrationSettingsUpdateNotificationIntegrationSettings {
	return v.UpdateNotificationIntegrationSettings
}

// updateNotificationIntegrationSettingsUpdateNotificationIntegrationSettings includes the requested fields of the GraphQL type NotificationIntegrationSettings.
type updateNotificationIntegrationSettingsUpdateNotificationIntegrationSettings struct {
	// Enable/Disable build notifications
	Build *bool `json:"build"`
	// Enable/Disable deploy notifications
	Deploy *bool `json:"deploy"`
	// Enable/Disable kubernetes pod crash notifications
	PodCrash *bool `json:"podCrash"`
}

// GetBuild returns updateNotificationIntegrationSettingsUpdateNotificationIntegrationSettings.Build, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationSettingsUpdateNotificationIntegrationSettings) GetBuild() *bool {
	return v.Build
}

// GetDeploy returns updateNotificationIntegrationSettingsUpdateNotificationIntegrationSettings.Deploy, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationSettingsUpdateNotificationIntegrationSettings) GetDeploy() *bool {
	return v.Deploy
}

// GetPodCrash returns updateNotificationIntegrationSettingsUpdateNotificationIntegrationSettings.PodCrash, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationSettingsUpdateNotificationIntegrationSettings) GetPodCrash() *bool {
	return v.PodCrash
}

// updateNotificationIntegrationSpecificSettingsResponse is returned by updateNotificationIntegrationSpecificSettings on success.
type updateNotificationIntegrationSpecificSettingsResponse struct {
	// Updates notification settings, in two ways:
	// 1. when integrationID is NOT specified: configures global settings for the user
	// OR
	// 2. when integrationID IS specified: configures per-integration settings
	UpdateNotificationIntegrationSettings *updateNotificationIntegrationSpecificSettingsUpdateNotificationIntegrationSettings `json:"updateNotificationIntegrationSettings"`
}

// GetUpdateNotificationIntegrationSettings returns updateNotificationIntegrationSpecificSettingsResponse.UpdateNotificationIntegrationSettings, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationSpecificSettingsResponse) GetUpdateNotificationIntegrationSettings() *updateNotificationIntegrationSpecificSettingsUpdateNotificationIntegrationSettings {
	return v.UpdateNotificationIntegrationSettings
}

// updateNotificationIntegrationSpecificSettingsUpdateNotificationIntegrationSettings includes the requested fields of the GraphQL type NotificationIntegrationSettings.
type updateNotificationIntegrationSpecificSettingsUpdateNotificationIntegrationSettings struct {
	// Enable/Disable build notifications
	Build *bool `json:"build"`
	// Enable/Disable deploy notifications
	Deploy *bool `json:"deploy"`
	// Enable/Disable kubernetes pod crash notifications
	PodCrash *bool `json:"podCrash"`
}

// GetBuild returns updateNotificationIntegrationSpecificSettingsUpdateNotificationIntegrationSettings.Build, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationSpecificSettingsUpdateNotificationIntegrationSettings) GetBuild() *bool {
	return v.Build
}

// GetDeploy returns updateNotificationIntegrationSpecificSettingsUpdateNotificationIntegrationSettings.Deploy, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationSpecificSettingsUpdateNotificationIntegrationSettings) GetDeploy() *bool {
	return v.Deploy
}

// GetPodCrash returns updateNotificationIntegrationSpecificSettingsUpdateNotificationIntegrationSettings.PodCrash, and is useful for accessing the field via an interface.
func (v *updateNotificationIntegrationSpecificSettingsUpdateNotificationIntegrationSettings) GetPodCrash() *bool {
	return v.PodCrash
}

// updateProjectDangerSettingsResponse is returned by updateProjectDangerSettings on success.
type updateProjectDangerSettingsResponse struct {
	UpdateProjectDanger updateProjectDangerSettingsUpdateProjectDangerRepo `json:"updateProjectDanger"`
}

// GetUpdateProjectDanger returns updateProjectDangerSettingsResponse.UpdateProjectDanger, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsResponse) GetUpdateProjectDanger() updateProjectDangerSettingsUpdateProjectDangerRepo {
	return v.UpdateProjectDanger
}

// updateProjectDangerSettingsUpdateProjectDangerRepo includes the requested fields of the GraphQL type Repo.
type updateProjectDangerSettingsUpdateProjectDangerRepo struct {
	// - v0.RepoID
	Id         uuid.UUID `json:"id"`
	RepoDetail `json:"-"`
}

// GetId returns updateProjectDangerSettingsUpdateProjectDangerRepo.Id, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetId() uuid.UUID { return v.Id }

// GetSecretMounts returns updateProjectDangerSettingsUpdateProjectDangerRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns updateProjectDangerSettingsUpdateProjectDangerRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns updateProjectDangerSettingsUpdateProjectDangerRepo.Manifest, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns updateProjectDangerSettingsUpdateProjectDangerRepo.AppID, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetAppID() *string {
	return v.RepoDetail.AppID
}

// GetDefaultIngressDomain returns updateProjectDangerSettingsUpdateProjectDangerRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns updateProjectDangerSettingsUpdateProjectDangerRepo.KappID, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetKappID() *string {
	return v.RepoDetail.KappID
}

// GetUseHumanReadableKubernetesName returns updateProjectDangerSettingsUpdateProjectDangerRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns updateProjectDangerSettingsUpdateProjectDangerRepo.Project, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns updateProjectDangerSettingsUpdateProjectDangerRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns updateProjectDangerSettingsUpdateProjectDangerRepo.Namespace, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetNamespace() *string {
	return v.RepoDetail.Namespace
}

// GetEnvs returns updateProjectDangerSettingsUpdateProjectDangerRepo.Envs, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetEnvs() []RepoDetailEnvsEnvVar {
	return v.RepoDetail.Envs
}

// GetCollaborators returns updateProjectDangerSettingsUpdateProjectDangerRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns updateProjectDangerSettingsUpdateProjectDangerRepo.Volumes, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns updateProjectDangerSettingsUpdateProjectDangerRepo.Replication, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns updateProjectDangerSettingsUpdateProjectDangerRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns updateProjectDangerSettingsUpdateProjectDangerRepo.Cluster, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns updateProjectDangerSettingsUpdateProjectDangerRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns updateProjectDangerSettingsUpdateProjectDangerRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns updateProjectDangerSettingsUpdateProjectDangerRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns updateProjectDangerSettingsUpdateProjectDangerRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns updateProjectDangerSettingsUpdateProjectDangerRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns updateProjectDangerSettingsUpdateProjectDangerRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns updateProjectDangerSettingsUpdateProjectDangerRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetManualDeploy() *bool {
	return v.RepoDetail.ManualDeploy
}

// GetDeployStrategy returns updateProjectDangerSettingsUpdateProjectDangerRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns updateProjectDangerSettingsUpdateProjectDangerRepo.Free, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetFree() *bool {
	return v.RepoDetail.Free
}

// GetCpu returns updateProjectDangerSettingsUpdateProjectDangerRepo.Cpu, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetCpu() *string {
	return v.RepoDetail.Cpu
}

// GetMemory returns updateProjectDangerSettingsUpdateProjectDangerRepo.Memory, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetMemory() *string {
	return v.RepoDetail.Memory
}

// GetGpu returns updateProjectDangerSettingsUpdateProjectDangerRepo.Gpu, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetGpu() *RepoDetailGpuGPUSpec {
	return v.RepoDetail.Gpu
}

// GetTpu returns updateProjectDangerSettingsUpdateProjectDangerRepo.Tpu, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetTpu() *RepoDetailTpuTPUSpec {
	return v.RepoDetail.Tpu
}

// GetEphemeralStorage returns updateProjectDangerSettingsUpdateProjectDangerRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns updateProjectDangerSettingsUpdateProjectDangerRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDedicated() *bool {
	return v.RepoDetail.Dedicated
}

// GetGithubIntegration returns updateProjectDangerSettingsUpdateProjectDangerRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns updateProjectDangerSettingsUpdateProjectDangerRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns updateProjectDangerSettingsUpdateProjectDangerRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns updateProjectDangerSettingsUpdateProjectDangerRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns updateProjectDangerSettingsUpdateProjectDangerRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns updateProjectDangerSettingsUpdateProjectDangerRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns updateProjectDangerSettingsUpdateProjectDangerRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns updateProjectDangerSettingsUpdateProjectDangerRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetHelmValues() *string {
	return v.RepoDetail.HelmValues
}

// GetTerraformVersion returns updateProjectDangerSettingsUpdateProjectDangerRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns updateProjectDangerSettingsUpdateProjectDangerRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns updateProjectDangerSettingsUpdateProjectDangerRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns updateProjectDangerSettingsUpdateProjectDangerRepo.DeployService, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns updateProjectDangerSettingsUpdateProjectDangerRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDeployJob() *bool {
	return v.RepoDetail.DeployJob
}

// GetPreStopSleep returns updateProjectDangerSettingsUpdateProjectDangerRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetPreStopSleep() *int {
	return v.RepoDetail.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns updateProjectDangerSettingsUpdateProjectDangerRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns updateProjectDangerSettingsUpdateProjectDangerRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns updateProjectDangerSettingsUpdateProjectDangerRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns updateProjectDangerSettingsUpdateProjectDangerRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns updateProjectDangerSettingsUpdateProjectDangerRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns updateProjectDangerSettingsUpdateProjectDangerRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns updateProjectDangerSettingsUpdateProjectDangerRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns updateProjectDangerSettingsUpdateProjectDangerRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns updateProjectDangerSettingsUpdateProjectDangerRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns updateProjectDangerSettingsUpdateProjectDangerRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetAutoRetry() *bool {
	return v.RepoDetail.AutoRetry
}

// GetAutoRollback returns updateProjectDangerSettingsUpdateProjectDangerRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetAutoRollback() *bool {
	return v.RepoDetail.AutoRollback
}

// GetCanDeploy returns updateProjectDangerSettingsUpdateProjectDangerRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetCanDeploy() *bool {
	return v.RepoDetail.CanDeploy
}

// GetPipelineCluster returns updateProjectDangerSettingsUpdateProjectDangerRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns updateProjectDangerSettingsUpdateProjectDangerRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetAwsIamRole() *string {
	return v.RepoDetail.AwsIamRole
}

// GetGcpServiceAccount returns updateProjectDangerSettingsUpdateProjectDangerRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns updateProjectDangerSettingsUpdateProjectDangerRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns updateProjectDangerSettingsUpdateProjectDangerRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns updateProjectDangerSettingsUpdateProjectDangerRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns updateProjectDangerSettingsUpdateProjectDangerRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetPath returns updateProjectDangerSettingsUpdateProjectDangerRepo.Path, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetPath() string {
	return v.RepoDetail.RepoCommon.Path
}

// GetName returns updateProjectDangerSettingsUpdateProjectDangerRepo.Name, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetName() string {
	return v.RepoDetail.RepoCommon.Name
}

// GetEnabled returns updateProjectDangerSettingsUpdateProjectDangerRepo.Enabled, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetEnabled() bool {
	return v.RepoDetail.RepoCommon.Enabled
}

// GetSource returns updateProjectDangerSettingsUpdateProjectDangerRepo.Source, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns updateProjectDangerSettingsUpdateProjectDangerRepo.DeployType, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns updateProjectDangerSettingsUpdateProjectDangerRepo.Image, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetImage() *string {
	return v.RepoDetail.RepoCommon.Image
}

// GetUpdatedAt returns updateProjectDangerSettingsUpdateProjectDangerRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns updateProjectDangerSettingsUpdateProjectDangerRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns updateProjectDangerSettingsUpdateProjectDangerRepo.Owner, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns updateProjectDangerSettingsUpdateProjectDangerRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns updateProjectDangerSettingsUpdateProjectDangerRepo.Cdns, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns updateProjectDangerSettingsUpdateProjectDangerRepo.Ports, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns updateProjectDangerSettingsUpdateProjectDangerRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns updateProjectDangerSettingsUpdateProjectDangerRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns updateProjectDangerSettingsUpdateProjectDangerRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns updateProjectDangerSettingsUpdateProjectDangerRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns updateProjectDangerSettingsUpdateProjectDangerRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns updateProjectDangerSettingsUpdateProjectDangerRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns updateProjectDangerSettingsUpdateProjectDangerRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns updateProjectDangerSettingsUpdateProjectDangerRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns updateProjectDangerSettingsUpdateProjectDangerRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateProjectDangerSettingsUpdateProjectDangerRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.updateProjectDangerSettingsUpdateProjectDangerRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateProjectDangerSettingsUpdateProjectDangerRepo struct {
	Id uuid.UUID `json:"id"`

	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateProjectDangerSettingsUpdateProjectDangerRepo) __premarshalJSON() (*__premarshalupdateProjectDangerSettingsUpdateProjectDangerRepo, error) {
	var retval __premarshalupdateProjectDangerSettingsUpdateProjectDangerRepo

	retval.Id = v.Id
	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// updateProjectEnvironmentResponse is returned by updateProjectEnvironment on success.
type updateProjectEnvironmentResponse struct {
	UpdateProjectEnvironment updateProjectEnvironmentUpdateProjectEnvironment `json:"updateProjectEnvironment"`
}

// GetUpdateProjectEnvironment returns updateProjectEnvironmentResponse.UpdateProjectEnvironment, and is useful for accessing the field via an interface.
func (v *updateProjectEnvironmentResponse) GetUpdateProjectEnvironment() updateProjectEnvironmentUpdateProjectEnvironment {
	return v.UpdateProjectEnvironment
}

// updateProjectEnvironmentUpdateProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type updateProjectEnvironmentUpdateProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns updateProjectEnvironmentUpdateProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *updateProjectEnvironmentUpdateProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns updateProjectEnvironmentUpdateProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *updateProjectEnvironmentUpdateProjectEnvironment) GetName() string { return v.Name }

// updateProjectEnvironmentVariablesResponse is returned by updateProjectEnvironmentVariables on success.
type updateProjectEnvironmentVariablesResponse struct {
	UpdateProjectV2 updateProjectEnvironmentVariablesUpdateProjectV2Project `json:"updateProjectV2"`
}

// GetUpdateProjectV2 returns updateProjectEnvironmentVariablesResponse.UpdateProjectV2, and is useful for accessing the field via an interface.
func (v *updateProjectEnvironmentVariablesResponse) GetUpdateProjectV2() updateProjectEnvironmentVariablesUpdateProjectV2Project {
	return v.UpdateProjectV2
}

// updateProjectEnvironmentVariablesUpdateProjectV2Project includes the requested fields of the GraphQL type Project.
type updateProjectEnvironmentVariablesUpdateProjectV2Project struct {
	// - v0.ProjectID or v1.GroupID
	Id uuid.UUID `json:"id"`
}

// GetId returns updateProjectEnvironmentVariablesUpdateProjectV2Project.Id, and is useful for accessing the field via an interface.
func (v *updateProjectEnvironmentVariablesUpdateProjectV2Project) GetId() uuid.UUID { return v.Id }

// updateProjectSettingsResponse is returned by updateProjectSettings on success.
type updateProjectSettingsResponse struct {
	UpdateProject updateProjectSettingsUpdateProjectRepo `json:"updateProject"`
}

// GetUpdateProject returns updateProjectSettingsResponse.UpdateProject, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsResponse) GetUpdateProject() updateProjectSettingsUpdateProjectRepo {
	return v.UpdateProject
}

// updateProjectSettingsUpdateProjectRepo includes the requested fields of the GraphQL type Repo.
type updateProjectSettingsUpdateProjectRepo struct {
	// - v0.RepoID
	Id         uuid.UUID `json:"id"`
	RepoDetail `json:"-"`
}

// GetId returns updateProjectSettingsUpdateProjectRepo.Id, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetId() uuid.UUID { return v.Id }

// GetSecretMounts returns updateProjectSettingsUpdateProjectRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns updateProjectSettingsUpdateProjectRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns updateProjectSettingsUpdateProjectRepo.Manifest, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetManifest() *RepoDetailManifest {
	return v.RepoDetail.Manifest
}

// GetAppID returns updateProjectSettingsUpdateProjectRepo.AppID, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns updateProjectSettingsUpdateProjectRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns updateProjectSettingsUpdateProjectRepo.KappID, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns updateProjectSettingsUpdateProjectRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns updateProjectSettingsUpdateProjectRepo.Project, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetProject() *RepoDetailProject {
	return v.RepoDetail.Project
}

// GetProductionDeployment returns updateProjectSettingsUpdateProjectRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns updateProjectSettingsUpdateProjectRepo.Namespace, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetNamespace() *string {
	return v.RepoDetail.Namespace
}

// GetEnvs returns updateProjectSettingsUpdateProjectRepo.Envs, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetEnvs() []RepoDetailEnvsEnvVar {
	return v.RepoDetail.Envs
}

// GetCollaborators returns updateProjectSettingsUpdateProjectRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns updateProjectSettingsUpdateProjectRepo.Volumes, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns updateProjectSettingsUpdateProjectRepo.Replication, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns updateProjectSettingsUpdateProjectRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDetail.DeployTarget
}

// GetCluster returns updateProjectSettingsUpdateProjectRepo.Cluster, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetCluster() *RepoDetailCluster {
	return v.RepoDetail.Cluster
}

// GetAwsAccount returns updateProjectSettingsUpdateProjectRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns updateProjectSettingsUpdateProjectRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns updateProjectSettingsUpdateProjectRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns updateProjectSettingsUpdateProjectRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns updateProjectSettingsUpdateProjectRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns updateProjectSettingsUpdateProjectRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns updateProjectSettingsUpdateProjectRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetManualDeploy() *bool {
	return v.RepoDetail.ManualDeploy
}

// GetDeployStrategy returns updateProjectSettingsUpdateProjectRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns updateProjectSettingsUpdateProjectRepo.Free, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns updateProjectSettingsUpdateProjectRepo.Cpu, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns updateProjectSettingsUpdateProjectRepo.Memory, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns updateProjectSettingsUpdateProjectRepo.Gpu, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetGpu() *RepoDetailGpuGPUSpec {
	return v.RepoDetail.Gpu
}

// GetTpu returns updateProjectSettingsUpdateProjectRepo.Tpu, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetTpu() *RepoDetailTpuTPUSpec {
	return v.RepoDetail.Tpu
}

// GetEphemeralStorage returns updateProjectSettingsUpdateProjectRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns updateProjectSettingsUpdateProjectRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns updateProjectSettingsUpdateProjectRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns updateProjectSettingsUpdateProjectRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns updateProjectSettingsUpdateProjectRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetProductionBranch() *string {
	return v.RepoDetail.ProductionBranch
}

// GetBranchResources returns updateProjectSettingsUpdateProjectRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns updateProjectSettingsUpdateProjectRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns updateProjectSettingsUpdateProjectRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetServerlessRegion() *string {
	return v.RepoDetail.ServerlessRegion
}

// GetPrometheusScrape returns updateProjectSettingsUpdateProjectRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns updateProjectSettingsUpdateProjectRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetHelmValues() *string {
	return v.RepoDetail.HelmValues
}

// GetTerraformVersion returns updateProjectSettingsUpdateProjectRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetTerraformVersion() *string {
	return v.RepoDetail.TerraformVersion
}

// GetTerraformVariables returns updateProjectSettingsUpdateProjectRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns updateProjectSettingsUpdateProjectRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns updateProjectSettingsUpdateProjectRepo.DeployService, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDeployService() *bool {
	return v.RepoDetail.DeployService
}

// GetDeployJob returns updateProjectSettingsUpdateProjectRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns updateProjectSettingsUpdateProjectRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetPreStopSleep() *int {
	return v.RepoDetail.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns updateProjectSettingsUpdateProjectRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns updateProjectSettingsUpdateProjectRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns updateProjectSettingsUpdateProjectRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns updateProjectSettingsUpdateProjectRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns updateProjectSettingsUpdateProjectRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns updateProjectSettingsUpdateProjectRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDatabaseVersion() *string {
	return v.RepoDetail.DatabaseVersion
}

// GetDatabaseEnvs returns updateProjectSettingsUpdateProjectRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns updateProjectSettingsUpdateProjectRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns updateProjectSettingsUpdateProjectRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns updateProjectSettingsUpdateProjectRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns updateProjectSettingsUpdateProjectRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetAutoRollback() *bool {
	return v.RepoDetail.AutoRollback
}

// GetCanDeploy returns updateProjectSettingsUpdateProjectRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns updateProjectSettingsUpdateProjectRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns updateProjectSettingsUpdateProjectRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetAwsIamRole() *string {
	return v.RepoDetail.AwsIamRole
}

// GetGcpServiceAccount returns updateProjectSettingsUpdateProjectRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns updateProjectSettingsUpdateProjectRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDatadogApmEnabled() *bool {
	return v.RepoDetail.DatadogApmEnabled
}

// GetProjectEnvironment returns updateProjectSettingsUpdateProjectRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns updateProjectSettingsUpdateProjectRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns updateProjectSettingsUpdateProjectRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetPath returns updateProjectSettingsUpdateProjectRepo.Path, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetPath() string {
	return v.RepoDetail.RepoCommon.Path
}

// GetName returns updateProjectSettingsUpdateProjectRepo.Name, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetName() string {
	return v.RepoDetail.RepoCommon.Name
}

// GetEnabled returns updateProjectSettingsUpdateProjectRepo.Enabled, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetEnabled() bool {
	return v.RepoDetail.RepoCommon.Enabled
}

// GetSource returns updateProjectSettingsUpdateProjectRepo.Source, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns updateProjectSettingsUpdateProjectRepo.DeployType, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns updateProjectSettingsUpdateProjectRepo.Image, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetImage() *string {
	return v.RepoDetail.RepoCommon.Image
}

// GetUpdatedAt returns updateProjectSettingsUpdateProjectRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetUpdatedAt() time.Time {
	return v.RepoDetail.RepoCommon.UpdatedAt
}

// GetDisableReason returns updateProjectSettingsUpdateProjectRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns updateProjectSettingsUpdateProjectRepo.Owner, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns updateProjectSettingsUpdateProjectRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns updateProjectSettingsUpdateProjectRepo.Cdns, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns updateProjectSettingsUpdateProjectRepo.Ports, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns updateProjectSettingsUpdateProjectRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetHostNetwork() *bool {
	return v.RepoDetail.RepoNetwork.HostNetwork
}

// GetStaticIP returns updateProjectSettingsUpdateProjectRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetStaticIP() *bool {
	return v.RepoDetail.RepoNetwork.StaticIP
}

// GetBuildMethod returns updateProjectSettingsUpdateProjectRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns updateProjectSettingsUpdateProjectRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns updateProjectSettingsUpdateProjectRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns updateProjectSettingsUpdateProjectRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetNoBuildCache() *bool {
	return v.RepoDetail.RepoBuild.NoBuildCache
}

// GetGitSubmodules returns updateProjectSettingsUpdateProjectRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns updateProjectSettingsUpdateProjectRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns updateProjectSettingsUpdateProjectRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *updateProjectSettingsUpdateProjectRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *updateProjectSettingsUpdateProjectRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateProjectSettingsUpdateProjectRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.updateProjectSettingsUpdateProjectRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateProjectSettingsUpdateProjectRepo struct {
	Id uuid.UUID `json:"id"`

	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *updateProjectSettingsUpdateProjectRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateProjectSettingsUpdateProjectRepo) __premarshalJSON() (*__premarshalupdateProjectSettingsUpdateProjectRepo, error) {
	var retval __premarshalupdateProjectSettingsUpdateProjectRepo

	retval.Id = v.Id
	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// updateProjectV2Response is returned by updateProjectV2 on success.
type updateProjectV2Response struct {
	UpdateProjectV2 updateProjectV2UpdateProjectV2Project `json:"updateProjectV2"`
}

// GetUpdateProjectV2 returns updateProjectV2Response.UpdateProjectV2, and is useful for accessing the field via an interface.
func (v *updateProjectV2Response) GetUpdateProjectV2() updateProjectV2UpdateProjectV2Project {
	return v.UpdateProjectV2
}

// updateProjectV2UpdateProjectV2Project includes the requested fields of the GraphQL type Project.
type updateProjectV2UpdateProjectV2Project struct {
	ProjectBasic `json:"-"`
}

// GetId returns updateProjectV2UpdateProjectV2Project.Id, and is useful for accessing the field via an interface.
func (v *updateProjectV2UpdateProjectV2Project) GetId() uuid.UUID { return v.ProjectBasic.Id }

// GetName returns updateProjectV2UpdateProjectV2Project.Name, and is useful for accessing the field via an interface.
func (v *updateProjectV2UpdateProjectV2Project) GetName() string { return v.ProjectBasic.Name }

// GetOwner returns updateProjectV2UpdateProjectV2Project.Owner, and is useful for accessing the field via an interface.
func (v *updateProjectV2UpdateProjectV2Project) GetOwner() ProjectBasicOwnerUser {
	return v.ProjectBasic.Owner
}

func (v *updateProjectV2UpdateProjectV2Project) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateProjectV2UpdateProjectV2Project
		graphql.NoUnmarshalJSON
	}
	firstPass.updateProjectV2UpdateProjectV2Project = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateProjectV2UpdateProjectV2Project struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Owner ProjectBasicOwnerUser `json:"owner"`
}

func (v *updateProjectV2UpdateProjectV2Project) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateProjectV2UpdateProjectV2Project) __premarshalJSON() (*__premarshalupdateProjectV2UpdateProjectV2Project, error) {
	var retval __premarshalupdateProjectV2UpdateProjectV2Project

	retval.Id = v.ProjectBasic.Id
	retval.Name = v.ProjectBasic.Name
	retval.Owner = v.ProjectBasic.Owner
	return &retval, nil
}

// updateProjectV3Response is returned by updateProjectV3 on success.
type updateProjectV3Response struct {
	// - projectID: v0.ProjectV3ID
	UpdateProjectV3 updateProjectV3UpdateProjectV3 `json:"updateProjectV3"`
}

// GetUpdateProjectV3 returns updateProjectV3Response.UpdateProjectV3, and is useful for accessing the field via an interface.
func (v *updateProjectV3Response) GetUpdateProjectV3() updateProjectV3UpdateProjectV3 {
	return v.UpdateProjectV3
}

// updateProjectV3UpdateProjectV3 includes the requested fields of the GraphQL type ProjectV3.
type updateProjectV3UpdateProjectV3 struct {
	// - v0.ProjectV3ID
	Id uuid.UUID `json:"id"`
}

// GetId returns updateProjectV3UpdateProjectV3.Id, and is useful for accessing the field via an interface.
func (v *updateProjectV3UpdateProjectV3) GetId() uuid.UUID { return v.Id }

// updateRepoPipelineLinkResponse is returned by updateRepoPipelineLink on success.
type updateRepoPipelineLinkResponse struct {
	UpdateRepoPipelineLink updateRepoPipelineLinkUpdateRepoPipelineLink `json:"updateRepoPipelineLink"`
}

// GetUpdateRepoPipelineLink returns updateRepoPipelineLinkResponse.UpdateRepoPipelineLink, and is useful for accessing the field via an interface.
func (v *updateRepoPipelineLinkResponse) GetUpdateRepoPipelineLink() updateRepoPipelineLinkUpdateRepoPipelineLink {
	return v.UpdateRepoPipelineLink
}

// updateRepoPipelineLinkUpdateRepoPipelineLink includes the requested fields of the GraphQL type RepoPipelineLink.
type updateRepoPipelineLinkUpdateRepoPipelineLink struct {
	RepoPipelineLinkDetail `json:"-"`
}

// GetId returns updateRepoPipelineLinkUpdateRepoPipelineLink.Id, and is useful for accessing the field via an interface.
func (v *updateRepoPipelineLinkUpdateRepoPipelineLink) GetId() uuid.UUID {
	return v.RepoPipelineLinkDetail.Id
}

// GetSource returns updateRepoPipelineLinkUpdateRepoPipelineLink.Source, and is useful for accessing the field via an interface.
func (v *updateRepoPipelineLinkUpdateRepoPipelineLink) GetSource() RepoPipelineLinkDetailSourceRepo {
	return v.RepoPipelineLinkDetail.Source
}

// GetSourceEvent returns updateRepoPipelineLinkUpdateRepoPipelineLink.SourceEvent, and is useful for accessing the field via an interface.
func (v *updateRepoPipelineLinkUpdateRepoPipelineLink) GetSourceEvent() RepoEvent {
	return v.RepoPipelineLinkDetail.SourceEvent
}

// GetTargetGroup returns updateRepoPipelineLinkUpdateRepoPipelineLink.TargetGroup, and is useful for accessing the field via an interface.
func (v *updateRepoPipelineLinkUpdateRepoPipelineLink) GetTargetGroup() RepoPipelineLinkDetailTargetGroupRepoGroup {
	return v.RepoPipelineLinkDetail.TargetGroup
}

// GetTargetAction returns updateRepoPipelineLinkUpdateRepoPipelineLink.TargetAction, and is useful for accessing the field via an interface.
func (v *updateRepoPipelineLinkUpdateRepoPipelineLink) GetTargetAction() RepoAction {
	return v.RepoPipelineLinkDetail.TargetAction
}

func (v *updateRepoPipelineLinkUpdateRepoPipelineLink) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateRepoPipelineLinkUpdateRepoPipelineLink
		graphql.NoUnmarshalJSON
	}
	firstPass.updateRepoPipelineLinkUpdateRepoPipelineLink = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoPipelineLinkDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateRepoPipelineLinkUpdateRepoPipelineLink struct {
	Id uuid.UUID `json:"id"`

	Source RepoPipelineLinkDetailSourceRepo `json:"source"`

	SourceEvent RepoEvent `json:"sourceEvent"`

	TargetGroup RepoPipelineLinkDetailTargetGroupRepoGroup `json:"targetGroup"`

	TargetAction RepoAction `json:"targetAction"`
}

func (v *updateRepoPipelineLinkUpdateRepoPipelineLink) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateRepoPipelineLinkUpdateRepoPipelineLink) __premarshalJSON() (*__premarshalupdateRepoPipelineLinkUpdateRepoPipelineLink, error) {
	var retval __premarshalupdateRepoPipelineLinkUpdateRepoPipelineLink

	retval.Id = v.RepoPipelineLinkDetail.Id
	retval.Source = v.RepoPipelineLinkDetail.Source
	retval.SourceEvent = v.RepoPipelineLinkDetail.SourceEvent
	retval.TargetGroup = v.RepoPipelineLinkDetail.TargetGroup
	retval.TargetAction = v.RepoPipelineLinkDetail.TargetAction
	return &retval, nil
}

// updateResourceAlphaResponse is returned by updateResourceAlpha on success.
type updateResourceAlphaResponse struct {
	UpdateResourceAlpha updateResourceAlphaUpdateResourceAlphaRepo `json:"updateResourceAlpha"`
}

// GetUpdateResourceAlpha returns updateResourceAlphaResponse.UpdateResourceAlpha, and is useful for accessing the field via an interface.
func (v *updateResourceAlphaResponse) GetUpdateResourceAlpha() updateResourceAlphaUpdateResourceAlphaRepo {
	return v.UpdateResourceAlpha
}

// updateResourceAlphaUpdateResourceAlphaRepo includes the requested fields of the GraphQL type Repo.
type updateResourceAlphaUpdateResourceAlphaRepo struct {
	// - v0.RepoID
	Id uuid.UUID `json:"id"`
}

// GetId returns updateResourceAlphaUpdateResourceAlphaRepo.Id, and is useful for accessing the field via an interface.
func (v *updateResourceAlphaUpdateResourceAlphaRepo) GetId() uuid.UUID { return v.Id }

// updateSlackWebhookIntegrationResponse is returned by updateSlackWebhookIntegration on success.
type updateSlackWebhookIntegrationResponse struct {
	UpdateSlackWebhookIntegration updateSlackWebhookIntegrationUpdateSlackWebhookIntegration `json:"updateSlackWebhookIntegration"`
}

// GetUpdateSlackWebhookIntegration returns updateSlackWebhookIntegrationResponse.UpdateSlackWebhookIntegration, and is useful for accessing the field via an interface.
func (v *updateSlackWebhookIntegrationResponse) GetUpdateSlackWebhookIntegration() updateSlackWebhookIntegrationUpdateSlackWebhookIntegration {
	return v.UpdateSlackWebhookIntegration
}

// updateSlackWebhookIntegrationUpdateSlackWebhookIntegration includes the requested fields of the GraphQL type SlackWebhookIntegration.
type updateSlackWebhookIntegrationUpdateSlackWebhookIntegration struct {
	Id                                       uuid.UUID `json:"id"`
	IntegrationCommonSlackWebhookIntegration `json:"-"`
	Url                                      *string `json:"url"`
}

// GetId returns updateSlackWebhookIntegrationUpdateSlackWebhookIntegration.Id, and is useful for accessing the field via an interface.
func (v *updateSlackWebhookIntegrationUpdateSlackWebhookIntegration) GetId() uuid.UUID { return v.Id }

// GetUrl returns updateSlackWebhookIntegrationUpdateSlackWebhookIntegration.Url, and is useful for accessing the field via an interface.
func (v *updateSlackWebhookIntegrationUpdateSlackWebhookIntegration) GetUrl() *string { return v.Url }

// GetType returns updateSlackWebhookIntegrationUpdateSlackWebhookIntegration.Type, and is useful for accessing the field via an interface.
func (v *updateSlackWebhookIntegrationUpdateSlackWebhookIntegration) GetType() IntegrationType {
	return v.IntegrationCommonSlackWebhookIntegration.Type
}

// GetName returns updateSlackWebhookIntegrationUpdateSlackWebhookIntegration.Name, and is useful for accessing the field via an interface.
func (v *updateSlackWebhookIntegrationUpdateSlackWebhookIntegration) GetName() string {
	return v.IntegrationCommonSlackWebhookIntegration.Name
}

// GetDescription returns updateSlackWebhookIntegrationUpdateSlackWebhookIntegration.Description, and is useful for accessing the field via an interface.
func (v *updateSlackWebhookIntegrationUpdateSlackWebhookIntegration) GetDescription() string {
	return v.IntegrationCommonSlackWebhookIntegration.Description
}

// GetImage returns updateSlackWebhookIntegrationUpdateSlackWebhookIntegration.Image, and is useful for accessing the field via an interface.
func (v *updateSlackWebhookIntegrationUpdateSlackWebhookIntegration) GetImage() string {
	return v.IntegrationCommonSlackWebhookIntegration.Image
}

// GetCreatedAt returns updateSlackWebhookIntegrationUpdateSlackWebhookIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *updateSlackWebhookIntegrationUpdateSlackWebhookIntegration) GetCreatedAt() time.Time {
	return v.IntegrationCommonSlackWebhookIntegration.CreatedAt
}

// GetUpdatedAt returns updateSlackWebhookIntegrationUpdateSlackWebhookIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateSlackWebhookIntegrationUpdateSlackWebhookIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationCommonSlackWebhookIntegration.UpdatedAt
}

func (v *updateSlackWebhookIntegrationUpdateSlackWebhookIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateSlackWebhookIntegrationUpdateSlackWebhookIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.updateSlackWebhookIntegrationUpdateSlackWebhookIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCommonSlackWebhookIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateSlackWebhookIntegrationUpdateSlackWebhookIntegration struct {
	Id uuid.UUID `json:"id"`

	Url *string `json:"url"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *updateSlackWebhookIntegrationUpdateSlackWebhookIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateSlackWebhookIntegrationUpdateSlackWebhookIntegration) __premarshalJSON() (*__premarshalupdateSlackWebhookIntegrationUpdateSlackWebhookIntegration, error) {
	var retval __premarshalupdateSlackWebhookIntegrationUpdateSlackWebhookIntegration

	retval.Id = v.Id
	retval.Url = v.Url
	retval.Type = v.IntegrationCommonSlackWebhookIntegration.Type
	retval.Name = v.IntegrationCommonSlackWebhookIntegration.Name
	retval.Description = v.IntegrationCommonSlackWebhookIntegration.Description
	retval.Image = v.IntegrationCommonSlackWebhookIntegration.Image
	retval.CreatedAt = v.IntegrationCommonSlackWebhookIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationCommonSlackWebhookIntegration.UpdatedAt
	return &retval, nil
}

// updateTeamResponse is returned by updateTeam on success.
type updateTeamResponse struct {
	UpdateTeam updateTeamUpdateTeam `json:"updateTeam"`
}

// GetUpdateTeam returns updateTeamResponse.UpdateTeam, and is useful for accessing the field via an interface.
func (v *updateTeamResponse) GetUpdateTeam() updateTeamUpdateTeam { return v.UpdateTeam }

// updateTeamUpdateTeam includes the requested fields of the GraphQL type Team.
type updateTeamUpdateTeam struct {
	TeamCommon `json:"-"`
}

// GetId returns updateTeamUpdateTeam.Id, and is useful for accessing the field via an interface.
func (v *updateTeamUpdateTeam) GetId() uuid.UUID { return v.TeamCommon.Id }

// GetPlan returns updateTeamUpdateTeam.Plan, and is useful for accessing the field via an interface.
func (v *updateTeamUpdateTeam) GetPlan() TeamCommonPlan { return v.TeamCommon.Plan }

// GetUser returns updateTeamUpdateTeam.User, and is useful for accessing the field via an interface.
func (v *updateTeamUpdateTeam) GetUser() TeamCommonUser { return v.TeamCommon.User }

func (v *updateTeamUpdateTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateTeamUpdateTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.updateTeamUpdateTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateTeamUpdateTeam struct {
	Id uuid.UUID `json:"id"`

	Plan TeamCommonPlan `json:"plan"`

	User TeamCommonUser `json:"user"`
}

func (v *updateTeamUpdateTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateTeamUpdateTeam) __premarshalJSON() (*__premarshalupdateTeamUpdateTeam, error) {
	var retval __premarshalupdateTeamUpdateTeam

	retval.Id = v.TeamCommon.Id
	retval.Plan = v.TeamCommon.Plan
	retval.User = v.TeamCommon.User
	return &retval, nil
}

// updateUserResponse is returned by updateUser on success.
type updateUserResponse struct {
	UpdateUser updateUserUpdateUser `json:"updateUser"`
}

// GetUpdateUser returns updateUserResponse.UpdateUser, and is useful for accessing the field via an interface.
func (v *updateUserResponse) GetUpdateUser() updateUserUpdateUser { return v.UpdateUser }

// updateUserUpdateUser includes the requested fields of the GraphQL type User.
type updateUserUpdateUser struct {
	Id         uuid.UUID `json:"id"`
	UserDetail `json:"-"`
}

// GetId returns updateUserUpdateUser.Id, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetId() uuid.UUID { return v.Id }

// GetHasZeetCloud returns updateUserUpdateUser.HasZeetCloud, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetHasZeetCloud() *bool { return v.UserDetail.HasZeetCloud }

// GetHasOnboarded returns updateUserUpdateUser.HasOnboarded, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetHasOnboarded() *bool { return v.UserDetail.HasOnboarded }

// GetCanDeploy returns updateUserUpdateUser.CanDeploy, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetCanDeploy() *bool { return v.UserDetail.CanDeploy }

// GetEmail returns updateUserUpdateUser.Email, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetEmail() *string { return v.UserDetail.UserCommon.Email }

// GetCreatedAt returns updateUserUpdateUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetCreatedAt() *time.Time { return v.UserDetail.UserCommon.CreatedAt }

// GetFreeTrialEndsAt returns updateUserUpdateUser.FreeTrialEndsAt, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetFreeTrialEndsAt() *time.Time {
	return v.UserDetail.UserCommon.FreeTrialEndsAt
}

// GetHasPaymentMethod returns updateUserUpdateUser.HasPaymentMethod, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetHasPaymentMethod() *bool {
	return v.UserDetail.UserCommon.HasPaymentMethod
}

// GetPaymentError returns updateUserUpdateUser.PaymentError, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetPaymentError() *string { return v.UserDetail.UserCommon.PaymentError }

// GetPaymentAuthorizationError returns updateUserUpdateUser.PaymentAuthorizationError, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetPaymentAuthorizationError() *string {
	return v.UserDetail.UserCommon.PaymentAuthorizationError
}

// GetAdvanced returns updateUserUpdateUser.Advanced, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetAdvanced() *bool { return v.UserDetail.UserCommon.Advanced }

// GetName returns updateUserUpdateUser.Name, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetName() string { return v.UserDetail.UserCommon.UserPublicCommon.Name }

// GetLogin returns updateUserUpdateUser.Login, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetLogin() string {
	return v.UserDetail.UserCommon.UserPublicCommon.Login
}

// GetAvatar returns updateUserUpdateUser.Avatar, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetAvatar() *string {
	return v.UserDetail.UserCommon.UserPublicCommon.Avatar
}

// GetIsTeam returns updateUserUpdateUser.IsTeam, and is useful for accessing the field via an interface.
func (v *updateUserUpdateUser) GetIsTeam() *bool {
	return v.UserDetail.UserCommon.UserPublicCommon.IsTeam
}

func (v *updateUserUpdateUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateUserUpdateUser
		graphql.NoUnmarshalJSON
	}
	firstPass.updateUserUpdateUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateUserUpdateUser struct {
	Id uuid.UUID `json:"id"`

	HasZeetCloud *bool `json:"hasZeetCloud"`

	HasOnboarded *bool `json:"hasOnboarded"`

	CanDeploy *bool `json:"canDeploy"`

	Email *string `json:"email"`

	CreatedAt *time.Time `json:"createdAt"`

	FreeTrialEndsAt *time.Time `json:"freeTrialEndsAt"`

	HasPaymentMethod *bool `json:"hasPaymentMethod"`

	PaymentError *string `json:"paymentError"`

	PaymentAuthorizationError *string `json:"paymentAuthorizationError"`

	Advanced *bool `json:"advanced"`

	Name string `json:"name"`

	Login string `json:"login"`

	Avatar *string `json:"avatar"`

	IsTeam *bool `json:"isTeam"`
}

func (v *updateUserUpdateUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateUserUpdateUser) __premarshalJSON() (*__premarshalupdateUserUpdateUser, error) {
	var retval __premarshalupdateUserUpdateUser

	retval.Id = v.Id
	retval.HasZeetCloud = v.UserDetail.HasZeetCloud
	retval.HasOnboarded = v.UserDetail.HasOnboarded
	retval.CanDeploy = v.UserDetail.CanDeploy
	retval.Email = v.UserDetail.UserCommon.Email
	retval.CreatedAt = v.UserDetail.UserCommon.CreatedAt
	retval.FreeTrialEndsAt = v.UserDetail.UserCommon.FreeTrialEndsAt
	retval.HasPaymentMethod = v.UserDetail.UserCommon.HasPaymentMethod
	retval.PaymentError = v.UserDetail.UserCommon.PaymentError
	retval.PaymentAuthorizationError = v.UserDetail.UserCommon.PaymentAuthorizationError
	retval.Advanced = v.UserDetail.UserCommon.Advanced
	retval.Name = v.UserDetail.UserCommon.UserPublicCommon.Name
	retval.Login = v.UserDetail.UserCommon.UserPublicCommon.Login
	retval.Avatar = v.UserDetail.UserCommon.UserPublicCommon.Avatar
	retval.IsTeam = v.UserDetail.UserCommon.UserPublicCommon.IsTeam
	return &retval, nil
}

// updateVultrAccountResponse is returned by updateVultrAccount on success.
type updateVultrAccountResponse struct {
	UpdateVultrAccount bool `json:"updateVultrAccount"`
}

// GetUpdateVultrAccount returns updateVultrAccountResponse.UpdateVultrAccount, and is useful for accessing the field via an interface.
func (v *updateVultrAccountResponse) GetUpdateVultrAccount() bool { return v.UpdateVultrAccount }

// userAPIKeysResponse is returned by userAPIKeys on success.
type userAPIKeysResponse struct {
	User userAPIKeysUser `json:"user"`
}

// GetUser returns userAPIKeysResponse.User, and is useful for accessing the field via an interface.
func (v *userAPIKeysResponse) GetUser() userAPIKeysUser { return v.User }

// userAPIKeysUser includes the requested fields of the GraphQL type User.
type userAPIKeysUser struct {
	Id      uuid.UUID                      `json:"id"`
	ApiKeys []userAPIKeysUserApiKeysAPIKey `json:"apiKeys"`
}

// GetId returns userAPIKeysUser.Id, and is useful for accessing the field via an interface.
func (v *userAPIKeysUser) GetId() uuid.UUID { return v.Id }

// GetApiKeys returns userAPIKeysUser.ApiKeys, and is useful for accessing the field via an interface.
func (v *userAPIKeysUser) GetApiKeys() []userAPIKeysUserApiKeysAPIKey { return v.ApiKeys }

// userAPIKeysUserApiKeysAPIKey includes the requested fields of the GraphQL type APIKey.
type userAPIKeysUserApiKeysAPIKey struct {
	Id          uuid.UUID `json:"id"`
	Token       string    `json:"token"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
}

// GetId returns userAPIKeysUserApiKeysAPIKey.Id, and is useful for accessing the field via an interface.
func (v *userAPIKeysUserApiKeysAPIKey) GetId() uuid.UUID { return v.Id }

// GetToken returns userAPIKeysUserApiKeysAPIKey.Token, and is useful for accessing the field via an interface.
func (v *userAPIKeysUserApiKeysAPIKey) GetToken() string { return v.Token }

// GetName returns userAPIKeysUserApiKeysAPIKey.Name, and is useful for accessing the field via an interface.
func (v *userAPIKeysUserApiKeysAPIKey) GetName() string { return v.Name }

// GetDescription returns userAPIKeysUserApiKeysAPIKey.Description, and is useful for accessing the field via an interface.
func (v *userAPIKeysUserApiKeysAPIKey) GetDescription() string { return v.Description }

// GetCreatedAt returns userAPIKeysUserApiKeysAPIKey.CreatedAt, and is useful for accessing the field via an interface.
func (v *userAPIKeysUserApiKeysAPIKey) GetCreatedAt() time.Time { return v.CreatedAt }

// userAWSAccountsResponse is returned by userAWSAccounts on success.
type userAWSAccountsResponse struct {
	User userAWSAccountsUser `json:"user"`
}

// GetUser returns userAWSAccountsResponse.User, and is useful for accessing the field via an interface.
func (v *userAWSAccountsResponse) GetUser() userAWSAccountsUser { return v.User }

// userAWSAccountsUser includes the requested fields of the GraphQL type User.
type userAWSAccountsUser struct {
	Id          uuid.UUID                                  `json:"id"`
	AwsAccounts []userAWSAccountsUserAwsAccountsAWSAccount `json:"awsAccounts"`
}

// GetId returns userAWSAccountsUser.Id, and is useful for accessing the field via an interface.
func (v *userAWSAccountsUser) GetId() uuid.UUID { return v.Id }

// GetAwsAccounts returns userAWSAccountsUser.AwsAccounts, and is useful for accessing the field via an interface.
func (v *userAWSAccountsUser) GetAwsAccounts() []userAWSAccountsUserAwsAccountsAWSAccount {
	return v.AwsAccounts
}

// userAWSAccountsUserAwsAccountsAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type userAWSAccountsUserAwsAccountsAWSAccount struct {
	Id               uuid.UUID `json:"id"`
	AWSAccountDetail `json:"-"`
}

// GetId returns userAWSAccountsUserAwsAccountsAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *userAWSAccountsUserAwsAccountsAWSAccount) GetId() uuid.UUID { return v.Id }

// GetName returns userAWSAccountsUserAwsAccountsAWSAccount.Name, and is useful for accessing the field via an interface.
func (v *userAWSAccountsUserAwsAccountsAWSAccount) GetName() string { return v.AWSAccountDetail.Name }

// GetState returns userAWSAccountsUserAwsAccountsAWSAccount.State, and is useful for accessing the field via an interface.
func (v *userAWSAccountsUserAwsAccountsAWSAccount) GetState() AWSAccountState {
	return v.AWSAccountDetail.State
}

// GetAccountID returns userAWSAccountsUserAwsAccountsAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *userAWSAccountsUserAwsAccountsAWSAccount) GetAccountID() *string {
	return v.AWSAccountDetail.AccountID
}

// GetRoleARN returns userAWSAccountsUserAwsAccountsAWSAccount.RoleARN, and is useful for accessing the field via an interface.
func (v *userAWSAccountsUserAwsAccountsAWSAccount) GetRoleARN() *string {
	return v.AWSAccountDetail.RoleARN
}

// GetCloudFormationURL returns userAWSAccountsUserAwsAccountsAWSAccount.CloudFormationURL, and is useful for accessing the field via an interface.
func (v *userAWSAccountsUserAwsAccountsAWSAccount) GetCloudFormationURL() string {
	return v.AWSAccountDetail.CloudFormationURL
}

// GetConnected returns userAWSAccountsUserAwsAccountsAWSAccount.Connected, and is useful for accessing the field via an interface.
func (v *userAWSAccountsUserAwsAccountsAWSAccount) GetConnected() *bool {
	return v.AWSAccountDetail.Connected
}

func (v *userAWSAccountsUserAwsAccountsAWSAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userAWSAccountsUserAwsAccountsAWSAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.userAWSAccountsUserAwsAccountsAWSAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AWSAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserAWSAccountsUserAwsAccountsAWSAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State AWSAccountState `json:"state"`

	AccountID *string `json:"accountID"`

	RoleARN *string `json:"roleARN"`

	CloudFormationURL string `json:"cloudFormationURL"`

	Connected *bool `json:"connected"`
}

func (v *userAWSAccountsUserAwsAccountsAWSAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userAWSAccountsUserAwsAccountsAWSAccount) __premarshalJSON() (*__premarshaluserAWSAccountsUserAwsAccountsAWSAccount, error) {
	var retval __premarshaluserAWSAccountsUserAwsAccountsAWSAccount

	retval.Id = v.Id
	retval.Name = v.AWSAccountDetail.Name
	retval.State = v.AWSAccountDetail.State
	retval.AccountID = v.AWSAccountDetail.AccountID
	retval.RoleARN = v.AWSAccountDetail.RoleARN
	retval.CloudFormationURL = v.AWSAccountDetail.CloudFormationURL
	retval.Connected = v.AWSAccountDetail.Connected
	return &retval, nil
}

// userAWSAccountsWithCQResponse is returned by userAWSAccountsWithCQ on success.
type userAWSAccountsWithCQResponse struct {
	User userAWSAccountsWithCQUser `json:"user"`
}

// GetUser returns userAWSAccountsWithCQResponse.User, and is useful for accessing the field via an interface.
func (v *userAWSAccountsWithCQResponse) GetUser() userAWSAccountsWithCQUser { return v.User }

// userAWSAccountsWithCQUser includes the requested fields of the GraphQL type User.
type userAWSAccountsWithCQUser struct {
	Id          uuid.UUID                                        `json:"id"`
	AwsAccounts []userAWSAccountsWithCQUserAwsAccountsAWSAccount `json:"awsAccounts"`
}

// GetId returns userAWSAccountsWithCQUser.Id, and is useful for accessing the field via an interface.
func (v *userAWSAccountsWithCQUser) GetId() uuid.UUID { return v.Id }

// GetAwsAccounts returns userAWSAccountsWithCQUser.AwsAccounts, and is useful for accessing the field via an interface.
func (v *userAWSAccountsWithCQUser) GetAwsAccounts() []userAWSAccountsWithCQUserAwsAccountsAWSAccount {
	return v.AwsAccounts
}

// userAWSAccountsWithCQUserAwsAccountsAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type userAWSAccountsWithCQUserAwsAccountsAWSAccount struct {
	Id               uuid.UUID `json:"id"`
	AWSAccountDetail `json:"-"`
	CloudQuery       *userAWSAccountsWithCQUserAwsAccountsAWSAccountCloudQueryCloudQueryService `json:"cloudQuery"`
}

// GetId returns userAWSAccountsWithCQUserAwsAccountsAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *userAWSAccountsWithCQUserAwsAccountsAWSAccount) GetId() uuid.UUID { return v.Id }

// GetCloudQuery returns userAWSAccountsWithCQUserAwsAccountsAWSAccount.CloudQuery, and is useful for accessing the field via an interface.
func (v *userAWSAccountsWithCQUserAwsAccountsAWSAccount) GetCloudQuery() *userAWSAccountsWithCQUserAwsAccountsAWSAccountCloudQueryCloudQueryService {
	return v.CloudQuery
}

// GetName returns userAWSAccountsWithCQUserAwsAccountsAWSAccount.Name, and is useful for accessing the field via an interface.
func (v *userAWSAccountsWithCQUserAwsAccountsAWSAccount) GetName() string {
	return v.AWSAccountDetail.Name
}

// GetState returns userAWSAccountsWithCQUserAwsAccountsAWSAccount.State, and is useful for accessing the field via an interface.
func (v *userAWSAccountsWithCQUserAwsAccountsAWSAccount) GetState() AWSAccountState {
	return v.AWSAccountDetail.State
}

// GetAccountID returns userAWSAccountsWithCQUserAwsAccountsAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *userAWSAccountsWithCQUserAwsAccountsAWSAccount) GetAccountID() *string {
	return v.AWSAccountDetail.AccountID
}

// GetRoleARN returns userAWSAccountsWithCQUserAwsAccountsAWSAccount.RoleARN, and is useful for accessing the field via an interface.
func (v *userAWSAccountsWithCQUserAwsAccountsAWSAccount) GetRoleARN() *string {
	return v.AWSAccountDetail.RoleARN
}

// GetCloudFormationURL returns userAWSAccountsWithCQUserAwsAccountsAWSAccount.CloudFormationURL, and is useful for accessing the field via an interface.
func (v *userAWSAccountsWithCQUserAwsAccountsAWSAccount) GetCloudFormationURL() string {
	return v.AWSAccountDetail.CloudFormationURL
}

// GetConnected returns userAWSAccountsWithCQUserAwsAccountsAWSAccount.Connected, and is useful for accessing the field via an interface.
func (v *userAWSAccountsWithCQUserAwsAccountsAWSAccount) GetConnected() *bool {
	return v.AWSAccountDetail.Connected
}

func (v *userAWSAccountsWithCQUserAwsAccountsAWSAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userAWSAccountsWithCQUserAwsAccountsAWSAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.userAWSAccountsWithCQUserAwsAccountsAWSAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AWSAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserAWSAccountsWithCQUserAwsAccountsAWSAccount struct {
	Id uuid.UUID `json:"id"`

	CloudQuery *userAWSAccountsWithCQUserAwsAccountsAWSAccountCloudQueryCloudQueryService `json:"cloudQuery"`

	Name string `json:"name"`

	State AWSAccountState `json:"state"`

	AccountID *string `json:"accountID"`

	RoleARN *string `json:"roleARN"`

	CloudFormationURL string `json:"cloudFormationURL"`

	Connected *bool `json:"connected"`
}

func (v *userAWSAccountsWithCQUserAwsAccountsAWSAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userAWSAccountsWithCQUserAwsAccountsAWSAccount) __premarshalJSON() (*__premarshaluserAWSAccountsWithCQUserAwsAccountsAWSAccount, error) {
	var retval __premarshaluserAWSAccountsWithCQUserAwsAccountsAWSAccount

	retval.Id = v.Id
	retval.CloudQuery = v.CloudQuery
	retval.Name = v.AWSAccountDetail.Name
	retval.State = v.AWSAccountDetail.State
	retval.AccountID = v.AWSAccountDetail.AccountID
	retval.RoleARN = v.AWSAccountDetail.RoleARN
	retval.CloudFormationURL = v.AWSAccountDetail.CloudFormationURL
	retval.Connected = v.AWSAccountDetail.Connected
	return &retval, nil
}

// userAWSAccountsWithCQUserAwsAccountsAWSAccountCloudQueryCloudQueryService includes the requested fields of the GraphQL type CloudQueryService.
type userAWSAccountsWithCQUserAwsAccountsAWSAccountCloudQueryCloudQueryService struct {
	Id    uuid.UUID       `json:"id"`
	State CloudQueryState `json:"state"`
}

// GetId returns userAWSAccountsWithCQUserAwsAccountsAWSAccountCloudQueryCloudQueryService.Id, and is useful for accessing the field via an interface.
func (v *userAWSAccountsWithCQUserAwsAccountsAWSAccountCloudQueryCloudQueryService) GetId() uuid.UUID {
	return v.Id
}

// GetState returns userAWSAccountsWithCQUserAwsAccountsAWSAccountCloudQueryCloudQueryService.State, and is useful for accessing the field via an interface.
func (v *userAWSAccountsWithCQUserAwsAccountsAWSAccountCloudQueryCloudQueryService) GetState() CloudQueryState {
	return v.State
}

// userAllBasicReposCurrentUser includes the requested fields of the GraphQL type User.
type userAllBasicReposCurrentUser struct {
	Id    uuid.UUID                                       `json:"id"`
	Teams []userAllBasicReposCurrentUserTeamsUserTeamEdge `json:"teams"`
}

// GetId returns userAllBasicReposCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUser) GetId() uuid.UUID { return v.Id }

// GetTeams returns userAllBasicReposCurrentUser.Teams, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUser) GetTeams() []userAllBasicReposCurrentUserTeamsUserTeamEdge {
	return v.Teams
}

// userAllBasicReposCurrentUserTeamsUserTeamEdge includes the requested fields of the GraphQL type UserTeamEdge.
type userAllBasicReposCurrentUserTeamsUserTeamEdge struct {
	Id   uuid.UUID                                         `json:"id"`
	Team userAllBasicReposCurrentUserTeamsUserTeamEdgeTeam `json:"team"`
}

// GetId returns userAllBasicReposCurrentUserTeamsUserTeamEdge.Id, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdge) GetId() uuid.UUID { return v.Id }

// GetTeam returns userAllBasicReposCurrentUserTeamsUserTeamEdge.Team, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdge) GetTeam() userAllBasicReposCurrentUserTeamsUserTeamEdgeTeam {
	return v.Team
}

// userAllBasicReposCurrentUserTeamsUserTeamEdgeTeam includes the requested fields of the GraphQL type Team.
type userAllBasicReposCurrentUserTeamsUserTeamEdgeTeam struct {
	Id   uuid.UUID                                             `json:"id"`
	User userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUser `json:"user"`
}

// GetId returns userAllBasicReposCurrentUserTeamsUserTeamEdgeTeam.Id, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeam) GetId() uuid.UUID { return v.Id }

// GetUser returns userAllBasicReposCurrentUserTeamsUserTeamEdgeTeam.User, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeam) GetUser() userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUser {
	return v.User
}

// userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUser includes the requested fields of the GraphQL type User.
type userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUser struct {
	Id    uuid.UUID                                                        `json:"id"`
	Login string                                                           `json:"login"`
	Repos []userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo `json:"repos"`
}

// GetId returns userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUser.Id, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUser) GetId() uuid.UUID { return v.Id }

// GetLogin returns userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUser.Login, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUser) GetLogin() string { return v.Login }

// GetRepos returns userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUser.Repos, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUser) GetRepos() []userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo {
	return v.Repos
}

// userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo includes the requested fields of the GraphQL type Repo.
type userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo struct {
	// - v0.RepoID
	Id        uuid.UUID `json:"id"`
	RepoBasic `json:"-"`
}

// GetId returns userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo.Id, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo) GetId() uuid.UUID {
	return v.Id
}

// GetPath returns userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo.Path, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo) GetPath() string {
	return v.RepoBasic.Path
}

// GetName returns userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo.Name, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo) GetName() string {
	return v.RepoBasic.Name
}

// GetEnabled returns userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo.Enabled, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo) GetEnabled() bool {
	return v.RepoBasic.Enabled
}

// GetImage returns userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo.Image, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo) GetImage() *string {
	return v.RepoBasic.Image
}

// GetOwner returns userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo.Owner, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo) GetOwner() RepoBasicOwnerUser {
	return v.RepoBasic.Owner
}

// GetProject returns userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo.Project, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo) GetProject() *RepoBasicProject {
	return v.RepoBasic.Project
}

// GetProjectEnvironment returns userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo) GetProjectEnvironment() *RepoBasicProjectEnvironment {
	return v.RepoBasic.ProjectEnvironment
}

func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo struct {
	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Image *string `json:"image"`

	Owner RepoBasicOwnerUser `json:"owner"`

	Project *RepoBasicProject `json:"project"`

	ProjectEnvironment *RepoBasicProjectEnvironment `json:"projectEnvironment"`
}

func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo) __premarshalJSON() (*__premarshaluserAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo, error) {
	var retval __premarshaluserAllBasicReposCurrentUserTeamsUserTeamEdgeTeamUserReposRepo

	retval.Id = v.Id
	retval.Path = v.RepoBasic.Path
	retval.Name = v.RepoBasic.Name
	retval.Enabled = v.RepoBasic.Enabled
	retval.Image = v.RepoBasic.Image
	retval.Owner = v.RepoBasic.Owner
	retval.Project = v.RepoBasic.Project
	retval.ProjectEnvironment = v.RepoBasic.ProjectEnvironment
	return &retval, nil
}

// userAllBasicReposResponse is returned by userAllBasicRepos on success.
type userAllBasicReposResponse struct {
	CurrentUser userAllBasicReposCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userAllBasicReposResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userAllBasicReposResponse) GetCurrentUser() userAllBasicReposCurrentUser {
	return v.CurrentUser
}

// userAwsAccountConnectedResponse is returned by userAwsAccountConnected on success.
type userAwsAccountConnectedResponse struct {
	User userAwsAccountConnectedUser `json:"user"`
}

// GetUser returns userAwsAccountConnectedResponse.User, and is useful for accessing the field via an interface.
func (v *userAwsAccountConnectedResponse) GetUser() userAwsAccountConnectedUser { return v.User }

// userAwsAccountConnectedUser includes the requested fields of the GraphQL type User.
type userAwsAccountConnectedUser struct {
	Id         uuid.UUID                                        `json:"id"`
	AwsAccount *userAwsAccountConnectedUserAwsAccountAWSAccount `json:"awsAccount"`
}

// GetId returns userAwsAccountConnectedUser.Id, and is useful for accessing the field via an interface.
func (v *userAwsAccountConnectedUser) GetId() uuid.UUID { return v.Id }

// GetAwsAccount returns userAwsAccountConnectedUser.AwsAccount, and is useful for accessing the field via an interface.
func (v *userAwsAccountConnectedUser) GetAwsAccount() *userAwsAccountConnectedUserAwsAccountAWSAccount {
	return v.AwsAccount
}

// userAwsAccountConnectedUserAwsAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type userAwsAccountConnectedUserAwsAccountAWSAccount struct {
	Id                uuid.UUID `json:"id"`
	Connected         *bool     `json:"connected"`
	CloudFormationURL string    `json:"cloudFormationURL"`
}

// GetId returns userAwsAccountConnectedUserAwsAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *userAwsAccountConnectedUserAwsAccountAWSAccount) GetId() uuid.UUID { return v.Id }

// GetConnected returns userAwsAccountConnectedUserAwsAccountAWSAccount.Connected, and is useful for accessing the field via an interface.
func (v *userAwsAccountConnectedUserAwsAccountAWSAccount) GetConnected() *bool { return v.Connected }

// GetCloudFormationURL returns userAwsAccountConnectedUserAwsAccountAWSAccount.CloudFormationURL, and is useful for accessing the field via an interface.
func (v *userAwsAccountConnectedUserAwsAccountAWSAccount) GetCloudFormationURL() string {
	return v.CloudFormationURL
}

// userAwsResourcesResponse is returned by userAwsResources on success.
type userAwsResourcesResponse struct {
	User userAwsResourcesUser `json:"user"`
}

// GetUser returns userAwsResourcesResponse.User, and is useful for accessing the field via an interface.
func (v *userAwsResourcesResponse) GetUser() userAwsResourcesUser { return v.User }

// userAwsResourcesUser includes the requested fields of the GraphQL type User.
type userAwsResourcesUser struct {
	Id         uuid.UUID                                 `json:"id"`
	AwsAccount *userAwsResourcesUserAwsAccountAWSAccount `json:"awsAccount"`
}

// GetId returns userAwsResourcesUser.Id, and is useful for accessing the field via an interface.
func (v *userAwsResourcesUser) GetId() uuid.UUID { return v.Id }

// GetAwsAccount returns userAwsResourcesUser.AwsAccount, and is useful for accessing the field via an interface.
func (v *userAwsResourcesUser) GetAwsAccount() *userAwsResourcesUserAwsAccountAWSAccount {
	return v.AwsAccount
}

// userAwsResourcesUserAwsAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type userAwsResourcesUserAwsAccountAWSAccount struct {
	Id           uuid.UUID                                                              `json:"id"`
	AwsResources userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutput `json:"awsResources"`
	AccountID    *string                                                                `json:"accountID"`
}

// GetId returns userAwsResourcesUserAwsAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *userAwsResourcesUserAwsAccountAWSAccount) GetId() uuid.UUID { return v.Id }

// GetAwsResources returns userAwsResourcesUserAwsAccountAWSAccount.AwsResources, and is useful for accessing the field via an interface.
func (v *userAwsResourcesUserAwsAccountAWSAccount) GetAwsResources() userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutput {
	return v.AwsResources
}

// GetAccountID returns userAwsResourcesUserAwsAccountAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *userAwsResourcesUserAwsAccountAWSAccount) GetAccountID() *string { return v.AccountID }

// userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutput includes the requested fields of the GraphQL type AwsResourcesOutput.
type userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutput struct {
	NextToken    *string                                                                                         `json:"nextToken"`
	AwsResources []userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutputAwsResourcesAwsResource `json:"awsResources"`
}

// GetNextToken returns userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutput.NextToken, and is useful for accessing the field via an interface.
func (v *userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutput) GetNextToken() *string {
	return v.NextToken
}

// GetAwsResources returns userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutput.AwsResources, and is useful for accessing the field via an interface.
func (v *userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutput) GetAwsResources() []userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutputAwsResourcesAwsResource {
	return v.AwsResources
}

// userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutputAwsResourcesAwsResource includes the requested fields of the GraphQL type AwsResource.
type userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutputAwsResourcesAwsResource struct {
	Arn    string  `json:"arn"`
	Type   string  `json:"type"`
	Region *string `json:"region"`
}

// GetArn returns userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutputAwsResourcesAwsResource.Arn, and is useful for accessing the field via an interface.
func (v *userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutputAwsResourcesAwsResource) GetArn() string {
	return v.Arn
}

// GetType returns userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutputAwsResourcesAwsResource.Type, and is useful for accessing the field via an interface.
func (v *userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutputAwsResourcesAwsResource) GetType() string {
	return v.Type
}

// GetRegion returns userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutputAwsResourcesAwsResource.Region, and is useful for accessing the field via an interface.
func (v *userAwsResourcesUserAwsAccountAWSAccountAwsResourcesAwsResourcesOutputAwsResourcesAwsResource) GetRegion() *string {
	return v.Region
}

// userBalanceResponse is returned by userBalance on success.
type userBalanceResponse struct {
	User userBalanceUser `json:"user"`
}

// GetUser returns userBalanceResponse.User, and is useful for accessing the field via an interface.
func (v *userBalanceResponse) GetUser() userBalanceUser { return v.User }

// userBalanceUser includes the requested fields of the GraphQL type User.
type userBalanceUser struct {
	Id     uuid.UUID                        `json:"id"`
	Stripe *userBalanceUserStripeStripeUser `json:"stripe"`
}

// GetId returns userBalanceUser.Id, and is useful for accessing the field via an interface.
func (v *userBalanceUser) GetId() uuid.UUID { return v.Id }

// GetStripe returns userBalanceUser.Stripe, and is useful for accessing the field via an interface.
func (v *userBalanceUser) GetStripe() *userBalanceUserStripeStripeUser { return v.Stripe }

// userBalanceUserStripeStripeUser includes the requested fields of the GraphQL type StripeUser.
type userBalanceUserStripeStripeUser struct {
	Id      uuid.UUID `json:"id"`
	Balance int       `json:"balance"`
}

// GetId returns userBalanceUserStripeStripeUser.Id, and is useful for accessing the field via an interface.
func (v *userBalanceUserStripeStripeUser) GetId() uuid.UUID { return v.Id }

// GetBalance returns userBalanceUserStripeStripeUser.Balance, and is useful for accessing the field via an interface.
func (v *userBalanceUserStripeStripeUser) GetBalance() int { return v.Balance }

// userBasicProjectsResponse is returned by userBasicProjects on success.
type userBasicProjectsResponse struct {
	User userBasicProjectsUser `json:"user"`
}

// GetUser returns userBasicProjectsResponse.User, and is useful for accessing the field via an interface.
func (v *userBasicProjectsResponse) GetUser() userBasicProjectsUser { return v.User }

// userBasicProjectsUser includes the requested fields of the GraphQL type User.
type userBasicProjectsUser struct {
	Id       uuid.UUID                                      `json:"id"`
	Projects userBasicProjectsUserProjectsProjectConnection `json:"projects"`
}

// GetId returns userBasicProjectsUser.Id, and is useful for accessing the field via an interface.
func (v *userBasicProjectsUser) GetId() uuid.UUID { return v.Id }

// GetProjects returns userBasicProjectsUser.Projects, and is useful for accessing the field via an interface.
func (v *userBasicProjectsUser) GetProjects() userBasicProjectsUserProjectsProjectConnection {
	return v.Projects
}

// userBasicProjectsUserProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type userBasicProjectsUserProjectsProjectConnection struct {
	Nodes []userBasicProjectsUserProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetNodes returns userBasicProjectsUserProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *userBasicProjectsUserProjectsProjectConnection) GetNodes() []userBasicProjectsUserProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// userBasicProjectsUserProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type userBasicProjectsUserProjectsProjectConnectionNodesProject struct {
	// - v0.ProjectID or v1.GroupID
	Id           uuid.UUID `json:"id"`
	ProjectBasic `json:"-"`
}

// GetId returns userBasicProjectsUserProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *userBasicProjectsUserProjectsProjectConnectionNodesProject) GetId() uuid.UUID { return v.Id }

// GetName returns userBasicProjectsUserProjectsProjectConnectionNodesProject.Name, and is useful for accessing the field via an interface.
func (v *userBasicProjectsUserProjectsProjectConnectionNodesProject) GetName() string {
	return v.ProjectBasic.Name
}

// GetOwner returns userBasicProjectsUserProjectsProjectConnectionNodesProject.Owner, and is useful for accessing the field via an interface.
func (v *userBasicProjectsUserProjectsProjectConnectionNodesProject) GetOwner() ProjectBasicOwnerUser {
	return v.ProjectBasic.Owner
}

func (v *userBasicProjectsUserProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userBasicProjectsUserProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.userBasicProjectsUserProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserBasicProjectsUserProjectsProjectConnectionNodesProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Owner ProjectBasicOwnerUser `json:"owner"`
}

func (v *userBasicProjectsUserProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userBasicProjectsUserProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshaluserBasicProjectsUserProjectsProjectConnectionNodesProject, error) {
	var retval __premarshaluserBasicProjectsUserProjectsProjectConnectionNodesProject

	retval.Id = v.Id
	retval.Name = v.ProjectBasic.Name
	retval.Owner = v.ProjectBasic.Owner
	return &retval, nil
}

// userBasicReposResponse is returned by userBasicRepos on success.
type userBasicReposResponse struct {
	User userBasicReposUser `json:"user"`
}

// GetUser returns userBasicReposResponse.User, and is useful for accessing the field via an interface.
func (v *userBasicReposResponse) GetUser() userBasicReposUser { return v.User }

// userBasicReposUser includes the requested fields of the GraphQL type User.
type userBasicReposUser struct {
	Id    uuid.UUID                     `json:"id"`
	Login string                        `json:"login"`
	Repos []userBasicReposUserReposRepo `json:"repos"`
}

// GetId returns userBasicReposUser.Id, and is useful for accessing the field via an interface.
func (v *userBasicReposUser) GetId() uuid.UUID { return v.Id }

// GetLogin returns userBasicReposUser.Login, and is useful for accessing the field via an interface.
func (v *userBasicReposUser) GetLogin() string { return v.Login }

// GetRepos returns userBasicReposUser.Repos, and is useful for accessing the field via an interface.
func (v *userBasicReposUser) GetRepos() []userBasicReposUserReposRepo { return v.Repos }

// userBasicReposUserReposRepo includes the requested fields of the GraphQL type Repo.
type userBasicReposUserReposRepo struct {
	// - v0.RepoID
	Id        uuid.UUID `json:"id"`
	RepoBasic `json:"-"`
}

// GetId returns userBasicReposUserReposRepo.Id, and is useful for accessing the field via an interface.
func (v *userBasicReposUserReposRepo) GetId() uuid.UUID { return v.Id }

// GetPath returns userBasicReposUserReposRepo.Path, and is useful for accessing the field via an interface.
func (v *userBasicReposUserReposRepo) GetPath() string { return v.RepoBasic.Path }

// GetName returns userBasicReposUserReposRepo.Name, and is useful for accessing the field via an interface.
func (v *userBasicReposUserReposRepo) GetName() string { return v.RepoBasic.Name }

// GetEnabled returns userBasicReposUserReposRepo.Enabled, and is useful for accessing the field via an interface.
func (v *userBasicReposUserReposRepo) GetEnabled() bool { return v.RepoBasic.Enabled }

// GetImage returns userBasicReposUserReposRepo.Image, and is useful for accessing the field via an interface.
func (v *userBasicReposUserReposRepo) GetImage() *string { return v.RepoBasic.Image }

// GetOwner returns userBasicReposUserReposRepo.Owner, and is useful for accessing the field via an interface.
func (v *userBasicReposUserReposRepo) GetOwner() RepoBasicOwnerUser { return v.RepoBasic.Owner }

// GetProject returns userBasicReposUserReposRepo.Project, and is useful for accessing the field via an interface.
func (v *userBasicReposUserReposRepo) GetProject() *RepoBasicProject { return v.RepoBasic.Project }

// GetProjectEnvironment returns userBasicReposUserReposRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *userBasicReposUserReposRepo) GetProjectEnvironment() *RepoBasicProjectEnvironment {
	return v.RepoBasic.ProjectEnvironment
}

func (v *userBasicReposUserReposRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userBasicReposUserReposRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.userBasicReposUserReposRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoBasic)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserBasicReposUserReposRepo struct {
	Id uuid.UUID `json:"id"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Image *string `json:"image"`

	Owner RepoBasicOwnerUser `json:"owner"`

	Project *RepoBasicProject `json:"project"`

	ProjectEnvironment *RepoBasicProjectEnvironment `json:"projectEnvironment"`
}

func (v *userBasicReposUserReposRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userBasicReposUserReposRepo) __premarshalJSON() (*__premarshaluserBasicReposUserReposRepo, error) {
	var retval __premarshaluserBasicReposUserReposRepo

	retval.Id = v.Id
	retval.Path = v.RepoBasic.Path
	retval.Name = v.RepoBasic.Name
	retval.Enabled = v.RepoBasic.Enabled
	retval.Image = v.RepoBasic.Image
	retval.Owner = v.RepoBasic.Owner
	retval.Project = v.RepoBasic.Project
	retval.ProjectEnvironment = v.RepoBasic.ProjectEnvironment
	return &retval, nil
}

// userBillingOverviewResponse is returned by userBillingOverview on success.
type userBillingOverviewResponse struct {
	User userBillingOverviewUser `json:"user"`
}

// GetUser returns userBillingOverviewResponse.User, and is useful for accessing the field via an interface.
func (v *userBillingOverviewResponse) GetUser() userBillingOverviewUser { return v.User }

// userBillingOverviewUser includes the requested fields of the GraphQL type User.
type userBillingOverviewUser struct {
	Id uuid.UUID `json:"id"`
	// Billing Overview only exists for users with subscriptions, i.e. a team
	BillingOverview *userBillingOverviewUserBillingOverview `json:"billingOverview"`
}

// GetId returns userBillingOverviewUser.Id, and is useful for accessing the field via an interface.
func (v *userBillingOverviewUser) GetId() uuid.UUID { return v.Id }

// GetBillingOverview returns userBillingOverviewUser.BillingOverview, and is useful for accessing the field via an interface.
func (v *userBillingOverviewUser) GetBillingOverview() *userBillingOverviewUserBillingOverview {
	return v.BillingOverview
}

// userBillingOverviewUserBillingOverview includes the requested fields of the GraphQL type BillingOverview.
type userBillingOverviewUserBillingOverview struct {
	BillingOverviewDetail `json:"-"`
}

// GetCurrentProducts returns userBillingOverviewUserBillingOverview.CurrentProducts, and is useful for accessing the field via an interface.
func (v *userBillingOverviewUserBillingOverview) GetCurrentProducts() []BillingOverviewDetailCurrentProductsProduct {
	return v.BillingOverviewDetail.CurrentProducts
}

// GetExternalLinks returns userBillingOverviewUserBillingOverview.ExternalLinks, and is useful for accessing the field via an interface.
func (v *userBillingOverviewUserBillingOverview) GetExternalLinks() *BillingOverviewDetailExternalLinksExternalBillingProviderLinks {
	return v.BillingOverviewDetail.ExternalLinks
}

// GetSubscriptionUsageAllowed returns userBillingOverviewUserBillingOverview.SubscriptionUsageAllowed, and is useful for accessing the field via an interface.
func (v *userBillingOverviewUserBillingOverview) GetSubscriptionUsageAllowed() BillingOverviewDetailSubscriptionUsageAllowed {
	return v.BillingOverviewDetail.SubscriptionUsageAllowed
}

func (v *userBillingOverviewUserBillingOverview) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userBillingOverviewUserBillingOverview
		graphql.NoUnmarshalJSON
	}
	firstPass.userBillingOverviewUserBillingOverview = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BillingOverviewDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserBillingOverviewUserBillingOverview struct {
	CurrentProducts []json.RawMessage `json:"currentProducts"`

	ExternalLinks *BillingOverviewDetailExternalLinksExternalBillingProviderLinks `json:"externalLinks"`

	SubscriptionUsageAllowed BillingOverviewDetailSubscriptionUsageAllowed `json:"subscriptionUsageAllowed"`
}

func (v *userBillingOverviewUserBillingOverview) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userBillingOverviewUserBillingOverview) __premarshalJSON() (*__premarshaluserBillingOverviewUserBillingOverview, error) {
	var retval __premarshaluserBillingOverviewUserBillingOverview

	{

		dst := &retval.CurrentProducts
		src := v.BillingOverviewDetail.CurrentProducts
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalBillingOverviewDetailCurrentProductsProduct(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal userBillingOverviewUserBillingOverview.BillingOverviewDetail.CurrentProducts: %w", err)
			}
		}
	}
	retval.ExternalLinks = v.BillingOverviewDetail.ExternalLinks
	retval.SubscriptionUsageAllowed = v.BillingOverviewDetail.SubscriptionUsageAllowed
	return &retval, nil
}

// userBillingResponse is returned by userBilling on success.
type userBillingResponse struct {
	User userBillingUser `json:"user"`
}

// GetUser returns userBillingResponse.User, and is useful for accessing the field via an interface.
func (v *userBillingResponse) GetUser() userBillingUser { return v.User }

// userBillingUser includes the requested fields of the GraphQL type User.
type userBillingUser struct {
	Id         uuid.UUID `json:"id"`
	BillingURL *string   `json:"billingURL"`
}

// GetId returns userBillingUser.Id, and is useful for accessing the field via an interface.
func (v *userBillingUser) GetId() uuid.UUID { return v.Id }

// GetBillingURL returns userBillingUser.BillingURL, and is useful for accessing the field via an interface.
func (v *userBillingUser) GetBillingURL() *string { return v.BillingURL }

// userBranchResourcesCurrentUser includes the requested fields of the GraphQL type User.
type userBranchResourcesCurrentUser struct {
	Id   uuid.UUID                           `json:"id"`
	Repo *userBranchResourcesCurrentUserRepo `json:"repo"`
}

// GetId returns userBranchResourcesCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userBranchResourcesCurrentUser) GetId() uuid.UUID { return v.Id }

// GetRepo returns userBranchResourcesCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *userBranchResourcesCurrentUser) GetRepo() *userBranchResourcesCurrentUserRepo { return v.Repo }

// userBranchResourcesCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type userBranchResourcesCurrentUserRepo struct {
	// - v0.RepoID
	Id     uuid.UUID                                             `json:"id"`
	Branch *userBranchResourcesCurrentUserRepoBranchRepoBranchV2 `json:"branch"`
}

// GetId returns userBranchResourcesCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *userBranchResourcesCurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetBranch returns userBranchResourcesCurrentUserRepo.Branch, and is useful for accessing the field via an interface.
func (v *userBranchResourcesCurrentUserRepo) GetBranch() *userBranchResourcesCurrentUserRepoBranchRepoBranchV2 {
	return v.Branch
}

// userBranchResourcesCurrentUserRepoBranchRepoBranchV2 includes the requested fields of the GraphQL type RepoBranchV2.
type userBranchResourcesCurrentUserRepoBranchRepoBranchV2 struct {
	Resources []userBranchResourcesCurrentUserRepoBranchRepoBranchV2ResourcesCloudResource `json:"resources"`
}

// GetResources returns userBranchResourcesCurrentUserRepoBranchRepoBranchV2.Resources, and is useful for accessing the field via an interface.
func (v *userBranchResourcesCurrentUserRepoBranchRepoBranchV2) GetResources() []userBranchResourcesCurrentUserRepoBranchRepoBranchV2ResourcesCloudResource {
	return v.Resources
}

// userBranchResourcesCurrentUserRepoBranchRepoBranchV2ResourcesCloudResource includes the requested fields of the GraphQL type CloudResource.
type userBranchResourcesCurrentUserRepoBranchRepoBranchV2ResourcesCloudResource struct {
	Id           string            `json:"id"`
	ResourceType CloudResourceType `json:"resourceType"`
	Shared       bool              `json:"shared"`
	Region       string            `json:"region"`
}

// GetId returns userBranchResourcesCurrentUserRepoBranchRepoBranchV2ResourcesCloudResource.Id, and is useful for accessing the field via an interface.
func (v *userBranchResourcesCurrentUserRepoBranchRepoBranchV2ResourcesCloudResource) GetId() string {
	return v.Id
}

// GetResourceType returns userBranchResourcesCurrentUserRepoBranchRepoBranchV2ResourcesCloudResource.ResourceType, and is useful for accessing the field via an interface.
func (v *userBranchResourcesCurrentUserRepoBranchRepoBranchV2ResourcesCloudResource) GetResourceType() CloudResourceType {
	return v.ResourceType
}

// GetShared returns userBranchResourcesCurrentUserRepoBranchRepoBranchV2ResourcesCloudResource.Shared, and is useful for accessing the field via an interface.
func (v *userBranchResourcesCurrentUserRepoBranchRepoBranchV2ResourcesCloudResource) GetShared() bool {
	return v.Shared
}

// GetRegion returns userBranchResourcesCurrentUserRepoBranchRepoBranchV2ResourcesCloudResource.Region, and is useful for accessing the field via an interface.
func (v *userBranchResourcesCurrentUserRepoBranchRepoBranchV2ResourcesCloudResource) GetRegion() string {
	return v.Region
}

// userBranchResourcesResponse is returned by userBranchResources on success.
type userBranchResourcesResponse struct {
	CurrentUser userBranchResourcesCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userBranchResourcesResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userBranchResourcesResponse) GetCurrentUser() userBranchResourcesCurrentUser {
	return v.CurrentUser
}

// userCloudsResponse is returned by userClouds on success.
type userCloudsResponse struct {
	User userCloudsUser `json:"user"`
}

// GetUser returns userCloudsResponse.User, and is useful for accessing the field via an interface.
func (v *userCloudsResponse) GetUser() userCloudsUser { return v.User }

// userCloudsUser includes the requested fields of the GraphQL type User.
type userCloudsUser struct {
	Id         uuid.UUID `json:"id"`
	UserClouds `json:"-"`
}

// GetId returns userCloudsUser.Id, and is useful for accessing the field via an interface.
func (v *userCloudsUser) GetId() uuid.UUID { return v.Id }

// GetAwsAccounts returns userCloudsUser.AwsAccounts, and is useful for accessing the field via an interface.
func (v *userCloudsUser) GetAwsAccounts() []UserCloudsAwsAccountsAWSAccount {
	return v.UserClouds.AwsAccounts
}

// GetGcpAccounts returns userCloudsUser.GcpAccounts, and is useful for accessing the field via an interface.
func (v *userCloudsUser) GetGcpAccounts() []UserCloudsGcpAccountsGCPAccount {
	return v.UserClouds.GcpAccounts
}

// GetDoAccounts returns userCloudsUser.DoAccounts, and is useful for accessing the field via an interface.
func (v *userCloudsUser) GetDoAccounts() []UserCloudsDoAccountsDOAccount {
	return v.UserClouds.DoAccounts
}

// GetCoreweaveAccounts returns userCloudsUser.CoreweaveAccounts, and is useful for accessing the field via an interface.
func (v *userCloudsUser) GetCoreweaveAccounts() []UserCloudsCoreweaveAccountsCoreWeaveAccount {
	return v.UserClouds.CoreweaveAccounts
}

// GetLinodeAccounts returns userCloudsUser.LinodeAccounts, and is useful for accessing the field via an interface.
func (v *userCloudsUser) GetLinodeAccounts() []UserCloudsLinodeAccountsLinodeAccount {
	return v.UserClouds.LinodeAccounts
}

// GetVultrAccounts returns userCloudsUser.VultrAccounts, and is useful for accessing the field via an interface.
func (v *userCloudsUser) GetVultrAccounts() []UserCloudsVultrAccountsVultrAccount {
	return v.UserClouds.VultrAccounts
}

// GetAzureAccounts returns userCloudsUser.AzureAccounts, and is useful for accessing the field via an interface.
func (v *userCloudsUser) GetAzureAccounts() []UserCloudsAzureAccountsAzureAccount {
	return v.UserClouds.AzureAccounts
}

func (v *userCloudsUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userCloudsUser
		graphql.NoUnmarshalJSON
	}
	firstPass.userCloudsUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserClouds)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserCloudsUser struct {
	Id uuid.UUID `json:"id"`

	AwsAccounts []UserCloudsAwsAccountsAWSAccount `json:"awsAccounts"`

	GcpAccounts []UserCloudsGcpAccountsGCPAccount `json:"gcpAccounts"`

	DoAccounts []UserCloudsDoAccountsDOAccount `json:"doAccounts"`

	CoreweaveAccounts []UserCloudsCoreweaveAccountsCoreWeaveAccount `json:"coreweaveAccounts"`

	LinodeAccounts []UserCloudsLinodeAccountsLinodeAccount `json:"linodeAccounts"`

	VultrAccounts []UserCloudsVultrAccountsVultrAccount `json:"vultrAccounts"`

	AzureAccounts []UserCloudsAzureAccountsAzureAccount `json:"azureAccounts"`
}

func (v *userCloudsUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userCloudsUser) __premarshalJSON() (*__premarshaluserCloudsUser, error) {
	var retval __premarshaluserCloudsUser

	retval.Id = v.Id
	retval.AwsAccounts = v.UserClouds.AwsAccounts
	retval.GcpAccounts = v.UserClouds.GcpAccounts
	retval.DoAccounts = v.UserClouds.DoAccounts
	retval.CoreweaveAccounts = v.UserClouds.CoreweaveAccounts
	retval.LinodeAccounts = v.UserClouds.LinodeAccounts
	retval.VultrAccounts = v.UserClouds.VultrAccounts
	retval.AzureAccounts = v.UserClouds.AzureAccounts
	return &retval, nil
}

// userClustersResponse is returned by userClusters on success.
type userClustersResponse struct {
	User userClustersUser `json:"user"`
}

// GetUser returns userClustersResponse.User, and is useful for accessing the field via an interface.
func (v *userClustersResponse) GetUser() userClustersUser { return v.User }

// userClustersUser includes the requested fields of the GraphQL type User.
type userClustersUser struct {
	Id       uuid.UUID                         `json:"id"`
	Clusters []userClustersUserClustersCluster `json:"clusters"`
}

// GetId returns userClustersUser.Id, and is useful for accessing the field via an interface.
func (v *userClustersUser) GetId() uuid.UUID { return v.Id }

// GetClusters returns userClustersUser.Clusters, and is useful for accessing the field via an interface.
func (v *userClustersUser) GetClusters() []userClustersUserClustersCluster { return v.Clusters }

// userClustersUserClustersCluster includes the requested fields of the GraphQL type Cluster.
type userClustersUserClustersCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns userClustersUserClustersCluster.Id, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetId() uuid.UUID { return v.Id }

// GetName returns userClustersUserClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns userClustersUserClustersCluster.Region, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetRegion() *string { return v.ClusterDetail.Region }

// GetState returns userClustersUserClustersCluster.State, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetState() ClusterState { return v.ClusterDetail.State }

// GetStatus returns userClustersUserClustersCluster.Status, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetStatus() *ClusterStatus { return v.ClusterDetail.Status }

// GetConnected returns userClustersUserClustersCluster.Connected, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetConnected() *bool { return v.ClusterDetail.Connected }

// GetDomain returns userClustersUserClustersCluster.Domain, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetDomain() *string { return v.ClusterDetail.Domain }

// GetIsExternal returns userClustersUserClustersCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetIsExternal() *bool { return v.ClusterDetail.IsExternal }

// GetIsEjected returns userClustersUserClustersCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetIsEjected() *bool { return v.ClusterDetail.IsEjected }

// GetComponents returns userClustersUserClustersCluster.Components, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns userClustersUserClustersCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns userClustersUserClustersCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns userClustersUserClustersCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns userClustersUserClustersCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns userClustersUserClustersCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns userClustersUserClustersCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns userClustersUserClustersCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns userClustersUserClustersCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns userClustersUserClustersCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetIngressIP() *string { return v.ClusterDetail.IngressIP }

// GetIngressDNS returns userClustersUserClustersCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetIngressDNS() *string { return v.ClusterDetail.IngressDNS }

// GetClusterProvider returns userClustersUserClustersCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns userClustersUserClustersCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns userClustersUserClustersCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns userClustersUserClustersCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns userClustersUserClustersCluster.Grafana, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns userClustersUserClustersCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns userClustersUserClustersCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns userClustersUserClustersCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns userClustersUserClustersCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetUpdatedAt() time.Time { return v.ClusterDetail.UpdatedAt }

// GetCreatedAt returns userClustersUserClustersCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetCreatedAt() time.Time { return v.ClusterDetail.CreatedAt }

// GetProjects returns userClustersUserClustersCluster.Projects, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns userClustersUserClustersCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns userClustersUserClustersCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *userClustersUserClustersCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *userClustersUserClustersCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userClustersUserClustersCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.userClustersUserClustersCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserClustersUserClustersCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *userClustersUserClustersCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userClustersUserClustersCluster) __premarshalJSON() (*__premarshaluserClustersUserClustersCluster, error) {
	var retval __premarshaluserClustersUserClustersCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal userClustersUserClustersCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// userContainerRegistriesResponse is returned by userContainerRegistries on success.
type userContainerRegistriesResponse struct {
	User userContainerRegistriesUser `json:"user"`
}

// GetUser returns userContainerRegistriesResponse.User, and is useful for accessing the field via an interface.
func (v *userContainerRegistriesResponse) GetUser() userContainerRegistriesUser { return v.User }

// userContainerRegistriesUser includes the requested fields of the GraphQL type User.
type userContainerRegistriesUser struct {
	Id                      uuid.UUID                                    `json:"id"`
	Clusters                []userContainerRegistriesUserClustersCluster `json:"clusters"`
	UserContainerRegistries `json:"-"`
}

// GetId returns userContainerRegistriesUser.Id, and is useful for accessing the field via an interface.
func (v *userContainerRegistriesUser) GetId() uuid.UUID { return v.Id }

// GetClusters returns userContainerRegistriesUser.Clusters, and is useful for accessing the field via an interface.
func (v *userContainerRegistriesUser) GetClusters() []userContainerRegistriesUserClustersCluster {
	return v.Clusters
}

// GetContainerRegistries returns userContainerRegistriesUser.ContainerRegistries, and is useful for accessing the field via an interface.
func (v *userContainerRegistriesUser) GetContainerRegistries() []UserContainerRegistriesContainerRegistriesContainerRegistry {
	return v.UserContainerRegistries.ContainerRegistries
}

func (v *userContainerRegistriesUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userContainerRegistriesUser
		graphql.NoUnmarshalJSON
	}
	firstPass.userContainerRegistriesUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserContainerRegistries)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserContainerRegistriesUser struct {
	Id uuid.UUID `json:"id"`

	Clusters []userContainerRegistriesUserClustersCluster `json:"clusters"`

	ContainerRegistries []UserContainerRegistriesContainerRegistriesContainerRegistry `json:"containerRegistries"`
}

func (v *userContainerRegistriesUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userContainerRegistriesUser) __premarshalJSON() (*__premarshaluserContainerRegistriesUser, error) {
	var retval __premarshaluserContainerRegistriesUser

	retval.Id = v.Id
	retval.Clusters = v.Clusters
	retval.ContainerRegistries = v.UserContainerRegistries.ContainerRegistries
	return &retval, nil
}

// userContainerRegistriesUserClustersCluster includes the requested fields of the GraphQL type Cluster.
type userContainerRegistriesUserClustersCluster struct {
	Id                uuid.UUID                                                    `json:"id"`
	ContainerRegistry *userContainerRegistriesUserClustersClusterContainerRegistry `json:"containerRegistry"`
}

// GetId returns userContainerRegistriesUserClustersCluster.Id, and is useful for accessing the field via an interface.
func (v *userContainerRegistriesUserClustersCluster) GetId() uuid.UUID { return v.Id }

// GetContainerRegistry returns userContainerRegistriesUserClustersCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *userContainerRegistriesUserClustersCluster) GetContainerRegistry() *userContainerRegistriesUserClustersClusterContainerRegistry {
	return v.ContainerRegistry
}

// userContainerRegistriesUserClustersClusterContainerRegistry includes the requested fields of the GraphQL type ContainerRegistry.
type userContainerRegistriesUserClustersClusterContainerRegistry struct {
	Id                 uuid.UUID                            `json:"id"`
	Name               string                               `json:"name"`
	CredentialProvider *ContainerRegistryCredentialProvider `json:"credentialProvider"`
}

// GetId returns userContainerRegistriesUserClustersClusterContainerRegistry.Id, and is useful for accessing the field via an interface.
func (v *userContainerRegistriesUserClustersClusterContainerRegistry) GetId() uuid.UUID { return v.Id }

// GetName returns userContainerRegistriesUserClustersClusterContainerRegistry.Name, and is useful for accessing the field via an interface.
func (v *userContainerRegistriesUserClustersClusterContainerRegistry) GetName() string { return v.Name }

// GetCredentialProvider returns userContainerRegistriesUserClustersClusterContainerRegistry.CredentialProvider, and is useful for accessing the field via an interface.
func (v *userContainerRegistriesUserClustersClusterContainerRegistry) GetCredentialProvider() *ContainerRegistryCredentialProvider {
	return v.CredentialProvider
}

// userCoreWeaveAccountsResponse is returned by userCoreWeaveAccounts on success.
type userCoreWeaveAccountsResponse struct {
	User userCoreWeaveAccountsUser `json:"user"`
}

// GetUser returns userCoreWeaveAccountsResponse.User, and is useful for accessing the field via an interface.
func (v *userCoreWeaveAccountsResponse) GetUser() userCoreWeaveAccountsUser { return v.User }

// userCoreWeaveAccountsUser includes the requested fields of the GraphQL type User.
type userCoreWeaveAccountsUser struct {
	Id                uuid.UUID                                                    `json:"id"`
	CoreweaveAccounts []userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount `json:"coreweaveAccounts"`
}

// GetId returns userCoreWeaveAccountsUser.Id, and is useful for accessing the field via an interface.
func (v *userCoreWeaveAccountsUser) GetId() uuid.UUID { return v.Id }

// GetCoreweaveAccounts returns userCoreWeaveAccountsUser.CoreweaveAccounts, and is useful for accessing the field via an interface.
func (v *userCoreWeaveAccountsUser) GetCoreweaveAccounts() []userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount {
	return v.CoreweaveAccounts
}

// userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount includes the requested fields of the GraphQL type CoreWeaveAccount.
type userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount struct {
	Id              uuid.UUID `json:"id"`
	CWAccountDetail `json:"-"`
}

// GetId returns userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount.Id, and is useful for accessing the field via an interface.
func (v *userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount) GetId() uuid.UUID { return v.Id }

// GetName returns userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount.Name, and is useful for accessing the field via an interface.
func (v *userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount) GetName() string {
	return v.CWAccountDetail.Name
}

// GetState returns userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount.State, and is useful for accessing the field via an interface.
func (v *userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount) GetState() CloudAccountState {
	return v.CWAccountDetail.State
}

// GetNamespace returns userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount.Namespace, and is useful for accessing the field via an interface.
func (v *userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount) GetNamespace() *string {
	return v.CWAccountDetail.Namespace
}

// GetConnected returns userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount.Connected, and is useful for accessing the field via an interface.
func (v *userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount) GetConnected() *bool {
	return v.CWAccountDetail.Connected
}

func (v *userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CWAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	Namespace *string `json:"namespace"`

	Connected *bool `json:"connected"`
}

func (v *userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount) __premarshalJSON() (*__premarshaluserCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount, error) {
	var retval __premarshaluserCoreWeaveAccountsUserCoreweaveAccountsCoreWeaveAccount

	retval.Id = v.Id
	retval.Name = v.CWAccountDetail.Name
	retval.State = v.CWAccountDetail.State
	retval.Namespace = v.CWAccountDetail.Namespace
	retval.Connected = v.CWAccountDetail.Connected
	return &retval, nil
}

// userCrispAuthResponse is returned by userCrispAuth on success.
type userCrispAuthResponse struct {
	User userCrispAuthUser `json:"user"`
}

// GetUser returns userCrispAuthResponse.User, and is useful for accessing the field via an interface.
func (v *userCrispAuthResponse) GetUser() userCrispAuthUser { return v.User }

// userCrispAuthUser includes the requested fields of the GraphQL type User.
type userCrispAuthUser struct {
	CrispAuth *userCrispAuthUserCrispAuth `json:"crispAuth"`
}

// GetCrispAuth returns userCrispAuthUser.CrispAuth, and is useful for accessing the field via an interface.
func (v *userCrispAuthUser) GetCrispAuth() *userCrispAuthUserCrispAuth { return v.CrispAuth }

// userCrispAuthUserCrispAuth includes the requested fields of the GraphQL type CrispAuth.
type userCrispAuthUserCrispAuth struct {
	Email        string `json:"email"`
	Hmac         string `json:"hmac"`
	Nickname     string `json:"nickname"`
	Participants string `json:"participants"`
}

// GetEmail returns userCrispAuthUserCrispAuth.Email, and is useful for accessing the field via an interface.
func (v *userCrispAuthUserCrispAuth) GetEmail() string { return v.Email }

// GetHmac returns userCrispAuthUserCrispAuth.Hmac, and is useful for accessing the field via an interface.
func (v *userCrispAuthUserCrispAuth) GetHmac() string { return v.Hmac }

// GetNickname returns userCrispAuthUserCrispAuth.Nickname, and is useful for accessing the field via an interface.
func (v *userCrispAuthUserCrispAuth) GetNickname() string { return v.Nickname }

// GetParticipants returns userCrispAuthUserCrispAuth.Participants, and is useful for accessing the field via an interface.
func (v *userCrispAuthUserCrispAuth) GetParticipants() string { return v.Participants }

// userDOAccountsResponse is returned by userDOAccounts on success.
type userDOAccountsResponse struct {
	User userDOAccountsUser `json:"user"`
}

// GetUser returns userDOAccountsResponse.User, and is useful for accessing the field via an interface.
func (v *userDOAccountsResponse) GetUser() userDOAccountsUser { return v.User }

// userDOAccountsUser includes the requested fields of the GraphQL type User.
type userDOAccountsUser struct {
	Id         uuid.UUID                               `json:"id"`
	DoAccounts []userDOAccountsUserDoAccountsDOAccount `json:"doAccounts"`
}

// GetId returns userDOAccountsUser.Id, and is useful for accessing the field via an interface.
func (v *userDOAccountsUser) GetId() uuid.UUID { return v.Id }

// GetDoAccounts returns userDOAccountsUser.DoAccounts, and is useful for accessing the field via an interface.
func (v *userDOAccountsUser) GetDoAccounts() []userDOAccountsUserDoAccountsDOAccount {
	return v.DoAccounts
}

// userDOAccountsUserDoAccountsDOAccount includes the requested fields of the GraphQL type DOAccount.
type userDOAccountsUserDoAccountsDOAccount struct {
	Id              uuid.UUID `json:"id"`
	DOAccountDetail `json:"-"`
}

// GetId returns userDOAccountsUserDoAccountsDOAccount.Id, and is useful for accessing the field via an interface.
func (v *userDOAccountsUserDoAccountsDOAccount) GetId() uuid.UUID { return v.Id }

// GetName returns userDOAccountsUserDoAccountsDOAccount.Name, and is useful for accessing the field via an interface.
func (v *userDOAccountsUserDoAccountsDOAccount) GetName() string { return v.DOAccountDetail.Name }

// GetState returns userDOAccountsUserDoAccountsDOAccount.State, and is useful for accessing the field via an interface.
func (v *userDOAccountsUserDoAccountsDOAccount) GetState() DOAccountState {
	return v.DOAccountDetail.State
}

// GetAccessTokenPrefix returns userDOAccountsUserDoAccountsDOAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *userDOAccountsUserDoAccountsDOAccount) GetAccessTokenPrefix() *string {
	return v.DOAccountDetail.AccessTokenPrefix
}

// GetDefaultProject returns userDOAccountsUserDoAccountsDOAccount.DefaultProject, and is useful for accessing the field via an interface.
func (v *userDOAccountsUserDoAccountsDOAccount) GetDefaultProject() *string {
	return v.DOAccountDetail.DefaultProject
}

// GetConnected returns userDOAccountsUserDoAccountsDOAccount.Connected, and is useful for accessing the field via an interface.
func (v *userDOAccountsUserDoAccountsDOAccount) GetConnected() *bool {
	return v.DOAccountDetail.Connected
}

func (v *userDOAccountsUserDoAccountsDOAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userDOAccountsUserDoAccountsDOAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.userDOAccountsUserDoAccountsDOAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DOAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserDOAccountsUserDoAccountsDOAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State DOAccountState `json:"state"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	DefaultProject *string `json:"defaultProject"`

	Connected *bool `json:"connected"`
}

func (v *userDOAccountsUserDoAccountsDOAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userDOAccountsUserDoAccountsDOAccount) __premarshalJSON() (*__premarshaluserDOAccountsUserDoAccountsDOAccount, error) {
	var retval __premarshaluserDOAccountsUserDoAccountsDOAccount

	retval.Id = v.Id
	retval.Name = v.DOAccountDetail.Name
	retval.State = v.DOAccountDetail.State
	retval.AccessTokenPrefix = v.DOAccountDetail.AccessTokenPrefix
	retval.DefaultProject = v.DOAccountDetail.DefaultProject
	retval.Connected = v.DOAccountDetail.Connected
	return &retval, nil
}

// userDeployTargetsResponse is returned by userDeployTargets on success.
type userDeployTargetsResponse struct {
	User userDeployTargetsUser `json:"user"`
}

// GetUser returns userDeployTargetsResponse.User, and is useful for accessing the field via an interface.
func (v *userDeployTargetsResponse) GetUser() userDeployTargetsUser { return v.User }

// userDeployTargetsUser includes the requested fields of the GraphQL type User.
type userDeployTargetsUser struct {
	Id                uuid.UUID                                                `json:"id"`
	HasZeetCloud      *bool                                                    `json:"hasZeetCloud"`
	DefaultCluster    *userDeployTargetsUserDefaultCluster                     `json:"defaultCluster"`
	AwsAccounts       []userDeployTargetsUserAwsAccountsAWSAccount             `json:"awsAccounts"`
	GcpAccounts       []userDeployTargetsUserGcpAccountsGCPAccount             `json:"gcpAccounts"`
	DoAccounts        []userDeployTargetsUserDoAccountsDOAccount               `json:"doAccounts"`
	LinodeAccounts    []userDeployTargetsUserLinodeAccountsLinodeAccount       `json:"linodeAccounts"`
	CoreweaveAccounts []userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount `json:"coreweaveAccounts"`
	Clusters          []userDeployTargetsUserClustersCluster                   `json:"clusters"`
}

// GetId returns userDeployTargetsUser.Id, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUser) GetId() uuid.UUID { return v.Id }

// GetHasZeetCloud returns userDeployTargetsUser.HasZeetCloud, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUser) GetHasZeetCloud() *bool { return v.HasZeetCloud }

// GetDefaultCluster returns userDeployTargetsUser.DefaultCluster, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUser) GetDefaultCluster() *userDeployTargetsUserDefaultCluster {
	return v.DefaultCluster
}

// GetAwsAccounts returns userDeployTargetsUser.AwsAccounts, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUser) GetAwsAccounts() []userDeployTargetsUserAwsAccountsAWSAccount {
	return v.AwsAccounts
}

// GetGcpAccounts returns userDeployTargetsUser.GcpAccounts, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUser) GetGcpAccounts() []userDeployTargetsUserGcpAccountsGCPAccount {
	return v.GcpAccounts
}

// GetDoAccounts returns userDeployTargetsUser.DoAccounts, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUser) GetDoAccounts() []userDeployTargetsUserDoAccountsDOAccount {
	return v.DoAccounts
}

// GetLinodeAccounts returns userDeployTargetsUser.LinodeAccounts, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUser) GetLinodeAccounts() []userDeployTargetsUserLinodeAccountsLinodeAccount {
	return v.LinodeAccounts
}

// GetCoreweaveAccounts returns userDeployTargetsUser.CoreweaveAccounts, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUser) GetCoreweaveAccounts() []userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount {
	return v.CoreweaveAccounts
}

// GetClusters returns userDeployTargetsUser.Clusters, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUser) GetClusters() []userDeployTargetsUserClustersCluster {
	return v.Clusters
}

// userDeployTargetsUserAwsAccountsAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type userDeployTargetsUserAwsAccountsAWSAccount struct {
	Id               uuid.UUID `json:"id"`
	AWSAccountDetail `json:"-"`
}

// GetId returns userDeployTargetsUserAwsAccountsAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserAwsAccountsAWSAccount) GetId() uuid.UUID { return v.Id }

// GetName returns userDeployTargetsUserAwsAccountsAWSAccount.Name, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserAwsAccountsAWSAccount) GetName() string { return v.AWSAccountDetail.Name }

// GetState returns userDeployTargetsUserAwsAccountsAWSAccount.State, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserAwsAccountsAWSAccount) GetState() AWSAccountState {
	return v.AWSAccountDetail.State
}

// GetAccountID returns userDeployTargetsUserAwsAccountsAWSAccount.AccountID, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserAwsAccountsAWSAccount) GetAccountID() *string {
	return v.AWSAccountDetail.AccountID
}

// GetRoleARN returns userDeployTargetsUserAwsAccountsAWSAccount.RoleARN, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserAwsAccountsAWSAccount) GetRoleARN() *string {
	return v.AWSAccountDetail.RoleARN
}

// GetCloudFormationURL returns userDeployTargetsUserAwsAccountsAWSAccount.CloudFormationURL, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserAwsAccountsAWSAccount) GetCloudFormationURL() string {
	return v.AWSAccountDetail.CloudFormationURL
}

// GetConnected returns userDeployTargetsUserAwsAccountsAWSAccount.Connected, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserAwsAccountsAWSAccount) GetConnected() *bool {
	return v.AWSAccountDetail.Connected
}

func (v *userDeployTargetsUserAwsAccountsAWSAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userDeployTargetsUserAwsAccountsAWSAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.userDeployTargetsUserAwsAccountsAWSAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AWSAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserDeployTargetsUserAwsAccountsAWSAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State AWSAccountState `json:"state"`

	AccountID *string `json:"accountID"`

	RoleARN *string `json:"roleARN"`

	CloudFormationURL string `json:"cloudFormationURL"`

	Connected *bool `json:"connected"`
}

func (v *userDeployTargetsUserAwsAccountsAWSAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userDeployTargetsUserAwsAccountsAWSAccount) __premarshalJSON() (*__premarshaluserDeployTargetsUserAwsAccountsAWSAccount, error) {
	var retval __premarshaluserDeployTargetsUserAwsAccountsAWSAccount

	retval.Id = v.Id
	retval.Name = v.AWSAccountDetail.Name
	retval.State = v.AWSAccountDetail.State
	retval.AccountID = v.AWSAccountDetail.AccountID
	retval.RoleARN = v.AWSAccountDetail.RoleARN
	retval.CloudFormationURL = v.AWSAccountDetail.CloudFormationURL
	retval.Connected = v.AWSAccountDetail.Connected
	return &retval, nil
}

// userDeployTargetsUserClustersCluster includes the requested fields of the GraphQL type Cluster.
type userDeployTargetsUserClustersCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns userDeployTargetsUserClustersCluster.Id, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetId() uuid.UUID { return v.Id }

// GetName returns userDeployTargetsUserClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns userDeployTargetsUserClustersCluster.Region, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetRegion() *string { return v.ClusterDetail.Region }

// GetState returns userDeployTargetsUserClustersCluster.State, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetState() ClusterState { return v.ClusterDetail.State }

// GetStatus returns userDeployTargetsUserClustersCluster.Status, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetStatus() *ClusterStatus {
	return v.ClusterDetail.Status
}

// GetConnected returns userDeployTargetsUserClustersCluster.Connected, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetConnected() *bool { return v.ClusterDetail.Connected }

// GetDomain returns userDeployTargetsUserClustersCluster.Domain, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetDomain() *string { return v.ClusterDetail.Domain }

// GetIsExternal returns userDeployTargetsUserClustersCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetIsExternal() *bool {
	return v.ClusterDetail.IsExternal
}

// GetIsEjected returns userDeployTargetsUserClustersCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetIsEjected() *bool { return v.ClusterDetail.IsEjected }

// GetComponents returns userDeployTargetsUserClustersCluster.Components, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns userDeployTargetsUserClustersCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns userDeployTargetsUserClustersCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns userDeployTargetsUserClustersCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns userDeployTargetsUserClustersCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns userDeployTargetsUserClustersCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns userDeployTargetsUserClustersCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns userDeployTargetsUserClustersCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns userDeployTargetsUserClustersCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns userDeployTargetsUserClustersCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetIngressIP() *string {
	return v.ClusterDetail.IngressIP
}

// GetIngressDNS returns userDeployTargetsUserClustersCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetIngressDNS() *string {
	return v.ClusterDetail.IngressDNS
}

// GetClusterProvider returns userDeployTargetsUserClustersCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns userDeployTargetsUserClustersCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns userDeployTargetsUserClustersCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns userDeployTargetsUserClustersCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns userDeployTargetsUserClustersCluster.Grafana, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns userDeployTargetsUserClustersCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns userDeployTargetsUserClustersCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns userDeployTargetsUserClustersCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns userDeployTargetsUserClustersCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetail.UpdatedAt
}

// GetCreatedAt returns userDeployTargetsUserClustersCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetCreatedAt() time.Time {
	return v.ClusterDetail.CreatedAt
}

// GetProjects returns userDeployTargetsUserClustersCluster.Projects, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns userDeployTargetsUserClustersCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns userDeployTargetsUserClustersCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserClustersCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *userDeployTargetsUserClustersCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userDeployTargetsUserClustersCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.userDeployTargetsUserClustersCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserDeployTargetsUserClustersCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *userDeployTargetsUserClustersCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userDeployTargetsUserClustersCluster) __premarshalJSON() (*__premarshaluserDeployTargetsUserClustersCluster, error) {
	var retval __premarshaluserDeployTargetsUserClustersCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal userDeployTargetsUserClustersCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount includes the requested fields of the GraphQL type CoreWeaveAccount.
type userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount struct {
	Id              uuid.UUID `json:"id"`
	CWAccountDetail `json:"-"`
}

// GetId returns userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount.Id, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount) GetId() uuid.UUID { return v.Id }

// GetName returns userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount.Name, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount) GetName() string {
	return v.CWAccountDetail.Name
}

// GetState returns userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount.State, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount) GetState() CloudAccountState {
	return v.CWAccountDetail.State
}

// GetNamespace returns userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount.Namespace, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount) GetNamespace() *string {
	return v.CWAccountDetail.Namespace
}

// GetConnected returns userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount.Connected, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount) GetConnected() *bool {
	return v.CWAccountDetail.Connected
}

func (v *userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CWAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserDeployTargetsUserCoreweaveAccountsCoreWeaveAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	Namespace *string `json:"namespace"`

	Connected *bool `json:"connected"`
}

func (v *userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userDeployTargetsUserCoreweaveAccountsCoreWeaveAccount) __premarshalJSON() (*__premarshaluserDeployTargetsUserCoreweaveAccountsCoreWeaveAccount, error) {
	var retval __premarshaluserDeployTargetsUserCoreweaveAccountsCoreWeaveAccount

	retval.Id = v.Id
	retval.Name = v.CWAccountDetail.Name
	retval.State = v.CWAccountDetail.State
	retval.Namespace = v.CWAccountDetail.Namespace
	retval.Connected = v.CWAccountDetail.Connected
	return &retval, nil
}

// userDeployTargetsUserDefaultCluster includes the requested fields of the GraphQL type Cluster.
type userDeployTargetsUserDefaultCluster struct {
	Id            uuid.UUID `json:"id"`
	ClusterDetail `json:"-"`
}

// GetId returns userDeployTargetsUserDefaultCluster.Id, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetId() uuid.UUID { return v.Id }

// GetName returns userDeployTargetsUserDefaultCluster.Name, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetName() string { return v.ClusterDetail.Name }

// GetRegion returns userDeployTargetsUserDefaultCluster.Region, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetRegion() *string { return v.ClusterDetail.Region }

// GetState returns userDeployTargetsUserDefaultCluster.State, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetState() ClusterState { return v.ClusterDetail.State }

// GetStatus returns userDeployTargetsUserDefaultCluster.Status, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetStatus() *ClusterStatus {
	return v.ClusterDetail.Status
}

// GetConnected returns userDeployTargetsUserDefaultCluster.Connected, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetConnected() *bool { return v.ClusterDetail.Connected }

// GetDomain returns userDeployTargetsUserDefaultCluster.Domain, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetDomain() *string { return v.ClusterDetail.Domain }

// GetIsExternal returns userDeployTargetsUserDefaultCluster.IsExternal, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetIsExternal() *bool {
	return v.ClusterDetail.IsExternal
}

// GetIsEjected returns userDeployTargetsUserDefaultCluster.IsEjected, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetIsEjected() *bool { return v.ClusterDetail.IsEjected }

// GetComponents returns userDeployTargetsUserDefaultCluster.Components, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetComponents() []*ClusterDetailComponentsClusterComponent {
	return v.ClusterDetail.Components
}

// GetTerraformProjectUrl returns userDeployTargetsUserDefaultCluster.TerraformProjectUrl, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetTerraformProjectUrl() *string {
	return v.ClusterDetail.TerraformProjectUrl
}

// GetAwsAccount returns userDeployTargetsUserDefaultCluster.AwsAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetAwsAccount() *ClusterDetailAwsAccountAWSAccount {
	return v.ClusterDetail.AwsAccount
}

// GetGcpAccount returns userDeployTargetsUserDefaultCluster.GcpAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetGcpAccount() *ClusterDetailGcpAccountGCPAccount {
	return v.ClusterDetail.GcpAccount
}

// GetDoAccount returns userDeployTargetsUserDefaultCluster.DoAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetDoAccount() *ClusterDetailDoAccountDOAccount {
	return v.ClusterDetail.DoAccount
}

// GetCwAccount returns userDeployTargetsUserDefaultCluster.CwAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetCwAccount() *ClusterDetailCwAccountCoreWeaveAccount {
	return v.ClusterDetail.CwAccount
}

// GetLinodeAccount returns userDeployTargetsUserDefaultCluster.LinodeAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetLinodeAccount() *ClusterDetailLinodeAccount {
	return v.ClusterDetail.LinodeAccount
}

// GetAzureAccount returns userDeployTargetsUserDefaultCluster.AzureAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetAzureAccount() *ClusterDetailAzureAccount {
	return v.ClusterDetail.AzureAccount
}

// GetVultrAccount returns userDeployTargetsUserDefaultCluster.VultrAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetVultrAccount() *ClusterDetailVultrAccount {
	return v.ClusterDetail.VultrAccount
}

// GetIngressIP returns userDeployTargetsUserDefaultCluster.IngressIP, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetIngressIP() *string {
	return v.ClusterDetail.IngressIP
}

// GetIngressDNS returns userDeployTargetsUserDefaultCluster.IngressDNS, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetIngressDNS() *string {
	return v.ClusterDetail.IngressDNS
}

// GetClusterProvider returns userDeployTargetsUserDefaultCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetClusterProvider() *ClusterProvider {
	return v.ClusterDetail.ClusterProvider
}

// GetCloudProvider returns userDeployTargetsUserDefaultCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetail.CloudProvider
}

// GetCloudAccount returns userDeployTargetsUserDefaultCluster.CloudAccount, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetCloudAccount() *ClusterDetailCloudAccount {
	return v.ClusterDetail.CloudAccount
}

// GetPrometheus returns userDeployTargetsUserDefaultCluster.Prometheus, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetPrometheus() *ClusterDetailPrometheus {
	return v.ClusterDetail.Prometheus
}

// GetGrafana returns userDeployTargetsUserDefaultCluster.Grafana, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetGrafana() *ClusterDetailGrafana {
	return v.ClusterDetail.Grafana
}

// GetContainerRegistry returns userDeployTargetsUserDefaultCluster.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetContainerRegistry() *ClusterDetailContainerRegistry {
	return v.ClusterDetail.ContainerRegistry
}

// GetContainerRepository returns userDeployTargetsUserDefaultCluster.ContainerRepository, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetContainerRepository() *string {
	return v.ClusterDetail.ContainerRepository
}

// GetContainerCacheRepository returns userDeployTargetsUserDefaultCluster.ContainerCacheRepository, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetContainerCacheRepository() *string {
	return v.ClusterDetail.ContainerCacheRepository
}

// GetUpdatedAt returns userDeployTargetsUserDefaultCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetail.UpdatedAt
}

// GetCreatedAt returns userDeployTargetsUserDefaultCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetCreatedAt() time.Time {
	return v.ClusterDetail.CreatedAt
}

// GetProjects returns userDeployTargetsUserDefaultCluster.Projects, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetProjects() *ClusterDetailProjectsProjectConnection {
	return v.ClusterDetail.Projects
}

// GetProjectV3Adapters returns userDeployTargetsUserDefaultCluster.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetProjectV3Adapters() *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection {
	return v.ClusterDetail.ProjectV3Adapters
}

// GetDeployJob returns userDeployTargetsUserDefaultCluster.DeployJob, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDefaultCluster) GetDeployJob() *ClusterDetailDeployJobJobRun {
	return v.ClusterDetail.DeployJob
}

func (v *userDeployTargetsUserDefaultCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userDeployTargetsUserDefaultCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.userDeployTargetsUserDefaultCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserDeployTargetsUserDefaultCluster struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Region *string `json:"region"`

	State ClusterState `json:"state"`

	Status *ClusterStatus `json:"status"`

	Connected *bool `json:"connected"`

	Domain *string `json:"domain"`

	IsExternal *bool `json:"isExternal"`

	IsEjected *bool `json:"isEjected"`

	Components []*ClusterDetailComponentsClusterComponent `json:"components"`

	TerraformProjectUrl *string `json:"terraformProjectUrl"`

	AwsAccount *ClusterDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *ClusterDetailGcpAccountGCPAccount `json:"gcpAccount"`

	DoAccount *ClusterDetailDoAccountDOAccount `json:"doAccount"`

	CwAccount *ClusterDetailCwAccountCoreWeaveAccount `json:"cwAccount"`

	LinodeAccount *ClusterDetailLinodeAccount `json:"linodeAccount"`

	AzureAccount *ClusterDetailAzureAccount `json:"azureAccount"`

	VultrAccount *ClusterDetailVultrAccount `json:"vultrAccount"`

	IngressIP *string `json:"ingressIP"`

	IngressDNS *string `json:"ingressDNS"`

	ClusterProvider *ClusterProvider `json:"clusterProvider"`

	CloudProvider *CloudProvider `json:"cloudProvider"`

	CloudAccount json.RawMessage `json:"cloudAccount"`

	Prometheus *ClusterDetailPrometheus `json:"prometheus"`

	Grafana *ClusterDetailGrafana `json:"grafana"`

	ContainerRegistry *ClusterDetailContainerRegistry `json:"containerRegistry"`

	ContainerRepository *string `json:"containerRepository"`

	ContainerCacheRepository *string `json:"containerCacheRepository"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`

	Projects *ClusterDetailProjectsProjectConnection `json:"projects"`

	ProjectV3Adapters *ClusterDetailProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`

	DeployJob *ClusterDetailDeployJobJobRun `json:"deployJob"`
}

func (v *userDeployTargetsUserDefaultCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userDeployTargetsUserDefaultCluster) __premarshalJSON() (*__premarshaluserDeployTargetsUserDefaultCluster, error) {
	var retval __premarshaluserDeployTargetsUserDefaultCluster

	retval.Id = v.Id
	retval.Name = v.ClusterDetail.Name
	retval.Region = v.ClusterDetail.Region
	retval.State = v.ClusterDetail.State
	retval.Status = v.ClusterDetail.Status
	retval.Connected = v.ClusterDetail.Connected
	retval.Domain = v.ClusterDetail.Domain
	retval.IsExternal = v.ClusterDetail.IsExternal
	retval.IsEjected = v.ClusterDetail.IsEjected
	retval.Components = v.ClusterDetail.Components
	retval.TerraformProjectUrl = v.ClusterDetail.TerraformProjectUrl
	retval.AwsAccount = v.ClusterDetail.AwsAccount
	retval.GcpAccount = v.ClusterDetail.GcpAccount
	retval.DoAccount = v.ClusterDetail.DoAccount
	retval.CwAccount = v.ClusterDetail.CwAccount
	retval.LinodeAccount = v.ClusterDetail.LinodeAccount
	retval.AzureAccount = v.ClusterDetail.AzureAccount
	retval.VultrAccount = v.ClusterDetail.VultrAccount
	retval.IngressIP = v.ClusterDetail.IngressIP
	retval.IngressDNS = v.ClusterDetail.IngressDNS
	retval.ClusterProvider = v.ClusterDetail.ClusterProvider
	retval.CloudProvider = v.ClusterDetail.CloudProvider
	{

		dst := &retval.CloudAccount
		src := v.ClusterDetail.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalClusterDetailCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal userDeployTargetsUserDefaultCluster.ClusterDetail.CloudAccount: %w", err)
			}
		}
	}
	retval.Prometheus = v.ClusterDetail.Prometheus
	retval.Grafana = v.ClusterDetail.Grafana
	retval.ContainerRegistry = v.ClusterDetail.ContainerRegistry
	retval.ContainerRepository = v.ClusterDetail.ContainerRepository
	retval.ContainerCacheRepository = v.ClusterDetail.ContainerCacheRepository
	retval.UpdatedAt = v.ClusterDetail.UpdatedAt
	retval.CreatedAt = v.ClusterDetail.CreatedAt
	retval.Projects = v.ClusterDetail.Projects
	retval.ProjectV3Adapters = v.ClusterDetail.ProjectV3Adapters
	retval.DeployJob = v.ClusterDetail.DeployJob
	return &retval, nil
}

// userDeployTargetsUserDoAccountsDOAccount includes the requested fields of the GraphQL type DOAccount.
type userDeployTargetsUserDoAccountsDOAccount struct {
	Id              uuid.UUID `json:"id"`
	DOAccountDetail `json:"-"`
}

// GetId returns userDeployTargetsUserDoAccountsDOAccount.Id, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDoAccountsDOAccount) GetId() uuid.UUID { return v.Id }

// GetName returns userDeployTargetsUserDoAccountsDOAccount.Name, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDoAccountsDOAccount) GetName() string { return v.DOAccountDetail.Name }

// GetState returns userDeployTargetsUserDoAccountsDOAccount.State, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDoAccountsDOAccount) GetState() DOAccountState {
	return v.DOAccountDetail.State
}

// GetAccessTokenPrefix returns userDeployTargetsUserDoAccountsDOAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDoAccountsDOAccount) GetAccessTokenPrefix() *string {
	return v.DOAccountDetail.AccessTokenPrefix
}

// GetDefaultProject returns userDeployTargetsUserDoAccountsDOAccount.DefaultProject, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDoAccountsDOAccount) GetDefaultProject() *string {
	return v.DOAccountDetail.DefaultProject
}

// GetConnected returns userDeployTargetsUserDoAccountsDOAccount.Connected, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserDoAccountsDOAccount) GetConnected() *bool {
	return v.DOAccountDetail.Connected
}

func (v *userDeployTargetsUserDoAccountsDOAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userDeployTargetsUserDoAccountsDOAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.userDeployTargetsUserDoAccountsDOAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DOAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserDeployTargetsUserDoAccountsDOAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State DOAccountState `json:"state"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	DefaultProject *string `json:"defaultProject"`

	Connected *bool `json:"connected"`
}

func (v *userDeployTargetsUserDoAccountsDOAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userDeployTargetsUserDoAccountsDOAccount) __premarshalJSON() (*__premarshaluserDeployTargetsUserDoAccountsDOAccount, error) {
	var retval __premarshaluserDeployTargetsUserDoAccountsDOAccount

	retval.Id = v.Id
	retval.Name = v.DOAccountDetail.Name
	retval.State = v.DOAccountDetail.State
	retval.AccessTokenPrefix = v.DOAccountDetail.AccessTokenPrefix
	retval.DefaultProject = v.DOAccountDetail.DefaultProject
	retval.Connected = v.DOAccountDetail.Connected
	return &retval, nil
}

// userDeployTargetsUserGcpAccountsGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type userDeployTargetsUserGcpAccountsGCPAccount struct {
	Id               uuid.UUID `json:"id"`
	GCPAccountDetail `json:"-"`
}

// GetId returns userDeployTargetsUserGcpAccountsGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserGcpAccountsGCPAccount) GetId() uuid.UUID { return v.Id }

// GetName returns userDeployTargetsUserGcpAccountsGCPAccount.Name, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserGcpAccountsGCPAccount) GetName() string { return v.GCPAccountDetail.Name }

// GetState returns userDeployTargetsUserGcpAccountsGCPAccount.State, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserGcpAccountsGCPAccount) GetState() GCPAccountState {
	return v.GCPAccountDetail.State
}

// GetProjectID returns userDeployTargetsUserGcpAccountsGCPAccount.ProjectID, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserGcpAccountsGCPAccount) GetProjectID() *string {
	return v.GCPAccountDetail.ProjectID
}

// GetClientEmail returns userDeployTargetsUserGcpAccountsGCPAccount.ClientEmail, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserGcpAccountsGCPAccount) GetClientEmail() *string {
	return v.GCPAccountDetail.ClientEmail
}

// GetConnected returns userDeployTargetsUserGcpAccountsGCPAccount.Connected, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserGcpAccountsGCPAccount) GetConnected() *bool {
	return v.GCPAccountDetail.Connected
}

// GetError returns userDeployTargetsUserGcpAccountsGCPAccount.Error, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserGcpAccountsGCPAccount) GetError() *string {
	return v.GCPAccountDetail.Error
}

func (v *userDeployTargetsUserGcpAccountsGCPAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userDeployTargetsUserGcpAccountsGCPAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.userDeployTargetsUserGcpAccountsGCPAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GCPAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserDeployTargetsUserGcpAccountsGCPAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State GCPAccountState `json:"state"`

	ProjectID *string `json:"projectID"`

	ClientEmail *string `json:"clientEmail"`

	Connected *bool `json:"connected"`

	Error *string `json:"error"`
}

func (v *userDeployTargetsUserGcpAccountsGCPAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userDeployTargetsUserGcpAccountsGCPAccount) __premarshalJSON() (*__premarshaluserDeployTargetsUserGcpAccountsGCPAccount, error) {
	var retval __premarshaluserDeployTargetsUserGcpAccountsGCPAccount

	retval.Id = v.Id
	retval.Name = v.GCPAccountDetail.Name
	retval.State = v.GCPAccountDetail.State
	retval.ProjectID = v.GCPAccountDetail.ProjectID
	retval.ClientEmail = v.GCPAccountDetail.ClientEmail
	retval.Connected = v.GCPAccountDetail.Connected
	retval.Error = v.GCPAccountDetail.Error
	return &retval, nil
}

// userDeployTargetsUserLinodeAccountsLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type userDeployTargetsUserLinodeAccountsLinodeAccount struct {
	Id                  uuid.UUID `json:"id"`
	LinodeAccountDetail `json:"-"`
}

// GetId returns userDeployTargetsUserLinodeAccountsLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserLinodeAccountsLinodeAccount) GetId() uuid.UUID { return v.Id }

// GetName returns userDeployTargetsUserLinodeAccountsLinodeAccount.Name, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserLinodeAccountsLinodeAccount) GetName() string {
	return v.LinodeAccountDetail.Name
}

// GetState returns userDeployTargetsUserLinodeAccountsLinodeAccount.State, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserLinodeAccountsLinodeAccount) GetState() CloudAccountState {
	return v.LinodeAccountDetail.State
}

// GetAccessTokenPrefix returns userDeployTargetsUserLinodeAccountsLinodeAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserLinodeAccountsLinodeAccount) GetAccessTokenPrefix() *string {
	return v.LinodeAccountDetail.AccessTokenPrefix
}

// GetConnected returns userDeployTargetsUserLinodeAccountsLinodeAccount.Connected, and is useful for accessing the field via an interface.
func (v *userDeployTargetsUserLinodeAccountsLinodeAccount) GetConnected() *bool {
	return v.LinodeAccountDetail.Connected
}

func (v *userDeployTargetsUserLinodeAccountsLinodeAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userDeployTargetsUserLinodeAccountsLinodeAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.userDeployTargetsUserLinodeAccountsLinodeAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.LinodeAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserDeployTargetsUserLinodeAccountsLinodeAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	Connected *bool `json:"connected"`
}

func (v *userDeployTargetsUserLinodeAccountsLinodeAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userDeployTargetsUserLinodeAccountsLinodeAccount) __premarshalJSON() (*__premarshaluserDeployTargetsUserLinodeAccountsLinodeAccount, error) {
	var retval __premarshaluserDeployTargetsUserLinodeAccountsLinodeAccount

	retval.Id = v.Id
	retval.Name = v.LinodeAccountDetail.Name
	retval.State = v.LinodeAccountDetail.State
	retval.AccessTokenPrefix = v.LinodeAccountDetail.AccessTokenPrefix
	retval.Connected = v.LinodeAccountDetail.Connected
	return &retval, nil
}

// userDeploymentCurrentUser includes the requested fields of the GraphQL type User.
type userDeploymentCurrentUser struct {
	Id         uuid.UUID                            `json:"id"`
	Deployment *userDeploymentCurrentUserDeployment `json:"deployment"`
}

// GetId returns userDeploymentCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUser) GetId() uuid.UUID { return v.Id }

// GetDeployment returns userDeploymentCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUser) GetDeployment() *userDeploymentCurrentUserDeployment {
	return v.Deployment
}

// userDeploymentCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type userDeploymentCurrentUserDeployment struct {
	Id               uuid.UUID `json:"id"`
	DeploymentDetail `json:"-"`
}

// GetId returns userDeploymentCurrentUserDeployment.Id, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetId() uuid.UUID { return v.Id }

// GetBranch returns userDeploymentCurrentUserDeployment.Branch, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetBranch() *string { return v.DeploymentDetail.Branch }

// GetBuildStage returns userDeploymentCurrentUserDeployment.BuildStage, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetBuildStage() *DeploymentDetailBuildStage {
	return v.DeploymentDetail.BuildStage
}

// GetReleaseStage returns userDeploymentCurrentUserDeployment.ReleaseStage, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetReleaseStage() *DeploymentDetailReleaseStagePipelineStage {
	return v.DeploymentDetail.ReleaseStage
}

// GetDeployStage returns userDeploymentCurrentUserDeployment.DeployStage, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetDeployStage() *DeploymentDetailDeployStagePipelineStage {
	return v.DeploymentDetail.DeployStage
}

// GetRepo returns userDeploymentCurrentUserDeployment.Repo, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetRepo() *DeploymentDetailRepo {
	return v.DeploymentDetail.Repo
}

// GetAwsLinks returns userDeploymentCurrentUserDeployment.AwsLinks, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetAwsLinks() *DeploymentDetailAwsLinksAWSLinks {
	return v.DeploymentDetail.AwsLinks
}

// GetGcpLinks returns userDeploymentCurrentUserDeployment.GcpLinks, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetGcpLinks() *DeploymentDetailGcpLinksGCPLinks {
	return v.DeploymentDetail.GcpLinks
}

// GetDeploymentError returns userDeploymentCurrentUserDeployment.DeploymentError, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetDeploymentError() *DeploymentDetailDeploymentError {
	return v.DeploymentDetail.DeploymentError
}

// GetCreatedAt returns userDeploymentCurrentUserDeployment.CreatedAt, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetCreatedAt() time.Time {
	return v.DeploymentDetail.CreatedAt
}

// GetUpdatedAt returns userDeploymentCurrentUserDeployment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetUpdatedAt() time.Time {
	return v.DeploymentDetail.UpdatedAt
}

// GetDescription returns userDeploymentCurrentUserDeployment.Description, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetDescription() *string {
	return v.DeploymentDetail.DeploymentCommon.Description
}

// GetVersion returns userDeploymentCurrentUserDeployment.Version, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetVersion() string {
	return v.DeploymentDetail.DeploymentCommon.Version
}

// GetStatus returns userDeploymentCurrentUserDeployment.Status, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetStatus() DeploymentStatus {
	return v.DeploymentDetail.DeploymentCommon.Status
}

// GetEndpoints returns userDeploymentCurrentUserDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetEndpoints() []string {
	return v.DeploymentDetail.DeploymentCommon.Endpoints
}

// GetPrivateEndpoint returns userDeploymentCurrentUserDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetPrivateEndpoint() *string {
	return v.DeploymentDetail.DeploymentCommon.PrivateEndpoint
}

// GetErrorMessage returns userDeploymentCurrentUserDeployment.ErrorMessage, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetErrorMessage() *string {
	return v.DeploymentDetail.DeploymentCommon.ErrorMessage
}

// GetDeployStatus returns userDeploymentCurrentUserDeployment.DeployStatus, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetDeployStatus() *DeploymentCommonDeployStatus {
	return v.DeploymentDetail.DeploymentCommon.DeployStatus
}

// GetBuild returns userDeploymentCurrentUserDeployment.Build, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetBuild() *DeploymentCommonBuild {
	return v.DeploymentDetail.DeploymentCommon.Build
}

// GetAlternativeImages returns userDeploymentCurrentUserDeployment.AlternativeImages, and is useful for accessing the field via an interface.
func (v *userDeploymentCurrentUserDeployment) GetAlternativeImages() []DeploymentCommonAlternativeImagesAlternativeImage {
	return v.DeploymentDetail.DeploymentCommon.AlternativeImages
}

func (v *userDeploymentCurrentUserDeployment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userDeploymentCurrentUserDeployment
		graphql.NoUnmarshalJSON
	}
	firstPass.userDeploymentCurrentUserDeployment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserDeploymentCurrentUserDeployment struct {
	Id uuid.UUID `json:"id"`

	Branch *string `json:"branch"`

	BuildStage *DeploymentDetailBuildStage `json:"buildStage"`

	ReleaseStage *DeploymentDetailReleaseStagePipelineStage `json:"releaseStage"`

	DeployStage *DeploymentDetailDeployStagePipelineStage `json:"deployStage"`

	Repo *DeploymentDetailRepo `json:"repo"`

	AwsLinks *DeploymentDetailAwsLinksAWSLinks `json:"awsLinks"`

	GcpLinks *DeploymentDetailGcpLinksGCPLinks `json:"gcpLinks"`

	DeploymentError *DeploymentDetailDeploymentError `json:"deploymentError"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Description *string `json:"description"`

	Version string `json:"version"`

	Status DeploymentStatus `json:"status"`

	Endpoints []string `json:"endpoints"`

	PrivateEndpoint *string `json:"privateEndpoint"`

	ErrorMessage *string `json:"errorMessage"`

	DeployStatus *DeploymentCommonDeployStatus `json:"deployStatus"`

	Build *DeploymentCommonBuild `json:"build"`

	AlternativeImages []DeploymentCommonAlternativeImagesAlternativeImage `json:"alternativeImages"`
}

func (v *userDeploymentCurrentUserDeployment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userDeploymentCurrentUserDeployment) __premarshalJSON() (*__premarshaluserDeploymentCurrentUserDeployment, error) {
	var retval __premarshaluserDeploymentCurrentUserDeployment

	retval.Id = v.Id
	retval.Branch = v.DeploymentDetail.Branch
	retval.BuildStage = v.DeploymentDetail.BuildStage
	retval.ReleaseStage = v.DeploymentDetail.ReleaseStage
	retval.DeployStage = v.DeploymentDetail.DeployStage
	retval.Repo = v.DeploymentDetail.Repo
	retval.AwsLinks = v.DeploymentDetail.AwsLinks
	retval.GcpLinks = v.DeploymentDetail.GcpLinks
	retval.DeploymentError = v.DeploymentDetail.DeploymentError
	retval.CreatedAt = v.DeploymentDetail.CreatedAt
	retval.UpdatedAt = v.DeploymentDetail.UpdatedAt
	retval.Description = v.DeploymentDetail.DeploymentCommon.Description
	retval.Version = v.DeploymentDetail.DeploymentCommon.Version
	retval.Status = v.DeploymentDetail.DeploymentCommon.Status
	retval.Endpoints = v.DeploymentDetail.DeploymentCommon.Endpoints
	retval.PrivateEndpoint = v.DeploymentDetail.DeploymentCommon.PrivateEndpoint
	retval.ErrorMessage = v.DeploymentDetail.DeploymentCommon.ErrorMessage
	retval.DeployStatus = v.DeploymentDetail.DeploymentCommon.DeployStatus
	retval.Build = v.DeploymentDetail.DeploymentCommon.Build
	retval.AlternativeImages = v.DeploymentDetail.DeploymentCommon.AlternativeImages
	return &retval, nil
}

// userDeploymentMetricCurrentUser includes the requested fields of the GraphQL type User.
type userDeploymentMetricCurrentUser struct {
	Id         uuid.UUID                                  `json:"id"`
	Deployment *userDeploymentMetricCurrentUserDeployment `json:"deployment"`
}

// GetId returns userDeploymentMetricCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUser) GetId() uuid.UUID { return v.Id }

// GetDeployment returns userDeploymentMetricCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUser) GetDeployment() *userDeploymentMetricCurrentUserDeployment {
	return v.Deployment
}

// userDeploymentMetricCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type userDeploymentMetricCurrentUserDeployment struct {
	Id             uuid.UUID                                                             `json:"id"`
	CpuMetrics     []userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream     `json:"cpuMetrics"`
	MemoryMetrics  []userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream  `json:"memoryMetrics"`
	NetworkMetrics []userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream `json:"networkMetrics"`
	DiskMetrics    []userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream    `json:"diskMetrics"`
}

// GetId returns userDeploymentMetricCurrentUserDeployment.Id, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeployment) GetId() uuid.UUID { return v.Id }

// GetCpuMetrics returns userDeploymentMetricCurrentUserDeployment.CpuMetrics, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeployment) GetCpuMetrics() []userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream {
	return v.CpuMetrics
}

// GetMemoryMetrics returns userDeploymentMetricCurrentUserDeployment.MemoryMetrics, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeployment) GetMemoryMetrics() []userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream {
	return v.MemoryMetrics
}

// GetNetworkMetrics returns userDeploymentMetricCurrentUserDeployment.NetworkMetrics, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeployment) GetNetworkMetrics() []userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream {
	return v.NetworkMetrics
}

// GetDiskMetrics returns userDeploymentMetricCurrentUserDeployment.DiskMetrics, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeployment) GetDiskMetrics() []userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream {
	return v.DiskMetrics
}

// userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream includes the requested fields of the GraphQL type MetricStream.
type userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream struct {
	MetricStream `json:"-"`
}

// GetType returns userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream.Type, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream) GetType() *MetricType {
	return v.MetricStream.Type
}

// GetQuery returns userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream.Query, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream) GetQuery() string {
	return v.MetricStream.Query
}

// GetLabels returns userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream.Labels, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream) GetLabels() []MetricStreamLabelsMetricStreamLabel {
	return v.MetricStream.Labels
}

// GetEntries returns userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream.Entries, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream) GetEntries() []MetricStreamEntriesMetricEntry {
	return v.MetricStream.Entries
}

func (v *userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream
		graphql.NoUnmarshalJSON
	}
	firstPass.userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricStream)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream struct {
	Type *MetricType `json:"type"`

	Query string `json:"query"`

	Labels []MetricStreamLabelsMetricStreamLabel `json:"labels"`

	Entries []MetricStreamEntriesMetricEntry `json:"entries"`
}

func (v *userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream) __premarshalJSON() (*__premarshaluserDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream, error) {
	var retval __premarshaluserDeploymentMetricCurrentUserDeploymentCpuMetricsMetricStream

	retval.Type = v.MetricStream.Type
	retval.Query = v.MetricStream.Query
	retval.Labels = v.MetricStream.Labels
	retval.Entries = v.MetricStream.Entries
	return &retval, nil
}

// userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream includes the requested fields of the GraphQL type MetricStream.
type userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream struct {
	MetricStream `json:"-"`
}

// GetType returns userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream.Type, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream) GetType() *MetricType {
	return v.MetricStream.Type
}

// GetQuery returns userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream.Query, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream) GetQuery() string {
	return v.MetricStream.Query
}

// GetLabels returns userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream.Labels, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream) GetLabels() []MetricStreamLabelsMetricStreamLabel {
	return v.MetricStream.Labels
}

// GetEntries returns userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream.Entries, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream) GetEntries() []MetricStreamEntriesMetricEntry {
	return v.MetricStream.Entries
}

func (v *userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream
		graphql.NoUnmarshalJSON
	}
	firstPass.userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricStream)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream struct {
	Type *MetricType `json:"type"`

	Query string `json:"query"`

	Labels []MetricStreamLabelsMetricStreamLabel `json:"labels"`

	Entries []MetricStreamEntriesMetricEntry `json:"entries"`
}

func (v *userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream) __premarshalJSON() (*__premarshaluserDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream, error) {
	var retval __premarshaluserDeploymentMetricCurrentUserDeploymentDiskMetricsMetricStream

	retval.Type = v.MetricStream.Type
	retval.Query = v.MetricStream.Query
	retval.Labels = v.MetricStream.Labels
	retval.Entries = v.MetricStream.Entries
	return &retval, nil
}

// userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream includes the requested fields of the GraphQL type MetricStream.
type userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream struct {
	MetricStream `json:"-"`
}

// GetType returns userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream.Type, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream) GetType() *MetricType {
	return v.MetricStream.Type
}

// GetQuery returns userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream.Query, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream) GetQuery() string {
	return v.MetricStream.Query
}

// GetLabels returns userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream.Labels, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream) GetLabels() []MetricStreamLabelsMetricStreamLabel {
	return v.MetricStream.Labels
}

// GetEntries returns userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream.Entries, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream) GetEntries() []MetricStreamEntriesMetricEntry {
	return v.MetricStream.Entries
}

func (v *userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream
		graphql.NoUnmarshalJSON
	}
	firstPass.userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricStream)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream struct {
	Type *MetricType `json:"type"`

	Query string `json:"query"`

	Labels []MetricStreamLabelsMetricStreamLabel `json:"labels"`

	Entries []MetricStreamEntriesMetricEntry `json:"entries"`
}

func (v *userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream) __premarshalJSON() (*__premarshaluserDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream, error) {
	var retval __premarshaluserDeploymentMetricCurrentUserDeploymentMemoryMetricsMetricStream

	retval.Type = v.MetricStream.Type
	retval.Query = v.MetricStream.Query
	retval.Labels = v.MetricStream.Labels
	retval.Entries = v.MetricStream.Entries
	return &retval, nil
}

// userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream includes the requested fields of the GraphQL type MetricStream.
type userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream struct {
	MetricStream `json:"-"`
}

// GetType returns userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream.Type, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream) GetType() *MetricType {
	return v.MetricStream.Type
}

// GetQuery returns userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream.Query, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream) GetQuery() string {
	return v.MetricStream.Query
}

// GetLabels returns userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream.Labels, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream) GetLabels() []MetricStreamLabelsMetricStreamLabel {
	return v.MetricStream.Labels
}

// GetEntries returns userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream.Entries, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream) GetEntries() []MetricStreamEntriesMetricEntry {
	return v.MetricStream.Entries
}

func (v *userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream
		graphql.NoUnmarshalJSON
	}
	firstPass.userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricStream)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream struct {
	Type *MetricType `json:"type"`

	Query string `json:"query"`

	Labels []MetricStreamLabelsMetricStreamLabel `json:"labels"`

	Entries []MetricStreamEntriesMetricEntry `json:"entries"`
}

func (v *userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream) __premarshalJSON() (*__premarshaluserDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream, error) {
	var retval __premarshaluserDeploymentMetricCurrentUserDeploymentNetworkMetricsMetricStream

	retval.Type = v.MetricStream.Type
	retval.Query = v.MetricStream.Query
	retval.Labels = v.MetricStream.Labels
	retval.Entries = v.MetricStream.Entries
	return &retval, nil
}

// userDeploymentMetricResponse is returned by userDeploymentMetric on success.
type userDeploymentMetricResponse struct {
	CurrentUser userDeploymentMetricCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userDeploymentMetricResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userDeploymentMetricResponse) GetCurrentUser() userDeploymentMetricCurrentUser {
	return v.CurrentUser
}

// userDeploymentResponse is returned by userDeployment on success.
type userDeploymentResponse struct {
	CurrentUser userDeploymentCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userDeploymentResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userDeploymentResponse) GetCurrentUser() userDeploymentCurrentUser { return v.CurrentUser }

// userEphemeralContainersCurrentUser includes the requested fields of the GraphQL type User.
type userEphemeralContainersCurrentUser struct {
	Id         uuid.UUID                                     `json:"id"`
	Deployment *userEphemeralContainersCurrentUserDeployment `json:"deployment"`
}

// GetId returns userEphemeralContainersCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userEphemeralContainersCurrentUser) GetId() uuid.UUID { return v.Id }

// GetDeployment returns userEphemeralContainersCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *userEphemeralContainersCurrentUser) GetDeployment() *userEphemeralContainersCurrentUserDeployment {
	return v.Deployment
}

// userEphemeralContainersCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type userEphemeralContainersCurrentUserDeployment struct {
	Id                  uuid.UUID                                                                            `json:"id"`
	EphemeralContainers []*userEphemeralContainersCurrentUserDeploymentEphemeralContainersEphemeralContainer `json:"ephemeralContainers"`
}

// GetId returns userEphemeralContainersCurrentUserDeployment.Id, and is useful for accessing the field via an interface.
func (v *userEphemeralContainersCurrentUserDeployment) GetId() uuid.UUID { return v.Id }

// GetEphemeralContainers returns userEphemeralContainersCurrentUserDeployment.EphemeralContainers, and is useful for accessing the field via an interface.
func (v *userEphemeralContainersCurrentUserDeployment) GetEphemeralContainers() []*userEphemeralContainersCurrentUserDeploymentEphemeralContainersEphemeralContainer {
	return v.EphemeralContainers
}

// userEphemeralContainersCurrentUserDeploymentEphemeralContainersEphemeralContainer includes the requested fields of the GraphQL type EphemeralContainer.
type userEphemeralContainersCurrentUserDeploymentEphemeralContainersEphemeralContainer struct {
	Name  string `json:"name"`
	Image string `json:"image"`
	Ready bool   `json:"ready"`
}

// GetName returns userEphemeralContainersCurrentUserDeploymentEphemeralContainersEphemeralContainer.Name, and is useful for accessing the field via an interface.
func (v *userEphemeralContainersCurrentUserDeploymentEphemeralContainersEphemeralContainer) GetName() string {
	return v.Name
}

// GetImage returns userEphemeralContainersCurrentUserDeploymentEphemeralContainersEphemeralContainer.Image, and is useful for accessing the field via an interface.
func (v *userEphemeralContainersCurrentUserDeploymentEphemeralContainersEphemeralContainer) GetImage() string {
	return v.Image
}

// GetReady returns userEphemeralContainersCurrentUserDeploymentEphemeralContainersEphemeralContainer.Ready, and is useful for accessing the field via an interface.
func (v *userEphemeralContainersCurrentUserDeploymentEphemeralContainersEphemeralContainer) GetReady() bool {
	return v.Ready
}

// userEphemeralContainersResponse is returned by userEphemeralContainers on success.
type userEphemeralContainersResponse struct {
	CurrentUser userEphemeralContainersCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userEphemeralContainersResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userEphemeralContainersResponse) GetCurrentUser() userEphemeralContainersCurrentUser {
	return v.CurrentUser
}

// userGCPAccountsResponse is returned by userGCPAccounts on success.
type userGCPAccountsResponse struct {
	User userGCPAccountsUser `json:"user"`
}

// GetUser returns userGCPAccountsResponse.User, and is useful for accessing the field via an interface.
func (v *userGCPAccountsResponse) GetUser() userGCPAccountsUser { return v.User }

// userGCPAccountsUser includes the requested fields of the GraphQL type User.
type userGCPAccountsUser struct {
	Id          uuid.UUID                                  `json:"id"`
	GcpAccounts []userGCPAccountsUserGcpAccountsGCPAccount `json:"gcpAccounts"`
}

// GetId returns userGCPAccountsUser.Id, and is useful for accessing the field via an interface.
func (v *userGCPAccountsUser) GetId() uuid.UUID { return v.Id }

// GetGcpAccounts returns userGCPAccountsUser.GcpAccounts, and is useful for accessing the field via an interface.
func (v *userGCPAccountsUser) GetGcpAccounts() []userGCPAccountsUserGcpAccountsGCPAccount {
	return v.GcpAccounts
}

// userGCPAccountsUserGcpAccountsGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type userGCPAccountsUserGcpAccountsGCPAccount struct {
	Id               uuid.UUID `json:"id"`
	GCPAccountDetail `json:"-"`
}

// GetId returns userGCPAccountsUserGcpAccountsGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *userGCPAccountsUserGcpAccountsGCPAccount) GetId() uuid.UUID { return v.Id }

// GetName returns userGCPAccountsUserGcpAccountsGCPAccount.Name, and is useful for accessing the field via an interface.
func (v *userGCPAccountsUserGcpAccountsGCPAccount) GetName() string { return v.GCPAccountDetail.Name }

// GetState returns userGCPAccountsUserGcpAccountsGCPAccount.State, and is useful for accessing the field via an interface.
func (v *userGCPAccountsUserGcpAccountsGCPAccount) GetState() GCPAccountState {
	return v.GCPAccountDetail.State
}

// GetProjectID returns userGCPAccountsUserGcpAccountsGCPAccount.ProjectID, and is useful for accessing the field via an interface.
func (v *userGCPAccountsUserGcpAccountsGCPAccount) GetProjectID() *string {
	return v.GCPAccountDetail.ProjectID
}

// GetClientEmail returns userGCPAccountsUserGcpAccountsGCPAccount.ClientEmail, and is useful for accessing the field via an interface.
func (v *userGCPAccountsUserGcpAccountsGCPAccount) GetClientEmail() *string {
	return v.GCPAccountDetail.ClientEmail
}

// GetConnected returns userGCPAccountsUserGcpAccountsGCPAccount.Connected, and is useful for accessing the field via an interface.
func (v *userGCPAccountsUserGcpAccountsGCPAccount) GetConnected() *bool {
	return v.GCPAccountDetail.Connected
}

// GetError returns userGCPAccountsUserGcpAccountsGCPAccount.Error, and is useful for accessing the field via an interface.
func (v *userGCPAccountsUserGcpAccountsGCPAccount) GetError() *string {
	return v.GCPAccountDetail.Error
}

func (v *userGCPAccountsUserGcpAccountsGCPAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userGCPAccountsUserGcpAccountsGCPAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.userGCPAccountsUserGcpAccountsGCPAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GCPAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserGCPAccountsUserGcpAccountsGCPAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State GCPAccountState `json:"state"`

	ProjectID *string `json:"projectID"`

	ClientEmail *string `json:"clientEmail"`

	Connected *bool `json:"connected"`

	Error *string `json:"error"`
}

func (v *userGCPAccountsUserGcpAccountsGCPAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userGCPAccountsUserGcpAccountsGCPAccount) __premarshalJSON() (*__premarshaluserGCPAccountsUserGcpAccountsGCPAccount, error) {
	var retval __premarshaluserGCPAccountsUserGcpAccountsGCPAccount

	retval.Id = v.Id
	retval.Name = v.GCPAccountDetail.Name
	retval.State = v.GCPAccountDetail.State
	retval.ProjectID = v.GCPAccountDetail.ProjectID
	retval.ClientEmail = v.GCPAccountDetail.ClientEmail
	retval.Connected = v.GCPAccountDetail.Connected
	retval.Error = v.GCPAccountDetail.Error
	return &retval, nil
}

// userGithubOrgsCurrentUser includes the requested fields of the GraphQL type User.
type userGithubOrgsCurrentUser struct {
	Id                  uuid.UUID                                                        `json:"id"`
	GithubInstallations []userGithubOrgsCurrentUserGithubInstallationsGitHubInstallation `json:"githubInstallations"`
}

// GetId returns userGithubOrgsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userGithubOrgsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetGithubInstallations returns userGithubOrgsCurrentUser.GithubInstallations, and is useful for accessing the field via an interface.
func (v *userGithubOrgsCurrentUser) GetGithubInstallations() []userGithubOrgsCurrentUserGithubInstallationsGitHubInstallation {
	return v.GithubInstallations
}

// userGithubOrgsCurrentUserGithubInstallationsGitHubInstallation includes the requested fields of the GraphQL type GitHubInstallation.
type userGithubOrgsCurrentUserGithubInstallationsGitHubInstallation struct {
	Id      uuid.UUID                                                                       `json:"id"`
	Account userGithubOrgsCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser `json:"account"`
}

// GetId returns userGithubOrgsCurrentUserGithubInstallationsGitHubInstallation.Id, and is useful for accessing the field via an interface.
func (v *userGithubOrgsCurrentUserGithubInstallationsGitHubInstallation) GetId() uuid.UUID {
	return v.Id
}

// GetAccount returns userGithubOrgsCurrentUserGithubInstallationsGitHubInstallation.Account, and is useful for accessing the field via an interface.
func (v *userGithubOrgsCurrentUserGithubInstallationsGitHubInstallation) GetAccount() userGithubOrgsCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser {
	return v.Account
}

// userGithubOrgsCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser includes the requested fields of the GraphQL type GitHubUser.
type userGithubOrgsCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser struct {
	Id     uuid.UUID      `json:"id"`
	Login  string         `json:"login"`
	Avatar *string        `json:"avatar"`
	Type   GithubUserType `json:"type"`
}

// GetId returns userGithubOrgsCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser.Id, and is useful for accessing the field via an interface.
func (v *userGithubOrgsCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser) GetId() uuid.UUID {
	return v.Id
}

// GetLogin returns userGithubOrgsCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser.Login, and is useful for accessing the field via an interface.
func (v *userGithubOrgsCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser) GetLogin() string {
	return v.Login
}

// GetAvatar returns userGithubOrgsCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser.Avatar, and is useful for accessing the field via an interface.
func (v *userGithubOrgsCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser) GetAvatar() *string {
	return v.Avatar
}

// GetType returns userGithubOrgsCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser.Type, and is useful for accessing the field via an interface.
func (v *userGithubOrgsCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser) GetType() GithubUserType {
	return v.Type
}

// userGithubOrgsResponse is returned by userGithubOrgs on success.
type userGithubOrgsResponse struct {
	CurrentUser userGithubOrgsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userGithubOrgsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userGithubOrgsResponse) GetCurrentUser() userGithubOrgsCurrentUser { return v.CurrentUser }

// userGithubRepoCurrentUser includes the requested fields of the GraphQL type User.
type userGithubRepoCurrentUser struct {
	Id               uuid.UUID                                                  `json:"id"`
	GithubRepository *userGithubRepoCurrentUserGithubRepositoryGitHubRepository `json:"githubRepository"`
}

// GetId returns userGithubRepoCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUser) GetId() uuid.UUID { return v.Id }

// GetGithubRepository returns userGithubRepoCurrentUser.GithubRepository, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUser) GetGithubRepository() *userGithubRepoCurrentUserGithubRepositoryGitHubRepository {
	return v.GithubRepository
}

// userGithubRepoCurrentUserGithubRepositoryGitHubRepository includes the requested fields of the GraphQL type GitHubRepository.
type userGithubRepoCurrentUserGithubRepositoryGitHubRepository struct {
	Id           uuid.UUID `json:"id"`
	GitHubRepo   `json:"-"`
	GithubDetail `json:"-"`
}

// GetId returns userGithubRepoCurrentUserGithubRepositoryGitHubRepository.Id, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) GetId() uuid.UUID { return v.Id }

// GetName returns userGithubRepoCurrentUserGithubRepositoryGitHubRepository.Name, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) GetName() string {
	return v.GitHubRepo.Name
}

// GetOwner returns userGithubRepoCurrentUserGithubRepositoryGitHubRepository.Owner, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) GetOwner() string {
	return v.GitHubRepo.Owner
}

// GetUrl returns userGithubRepoCurrentUserGithubRepositoryGitHubRepository.Url, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) GetUrl() string {
	return v.GitHubRepo.Url
}

// GetDescription returns userGithubRepoCurrentUserGithubRepositoryGitHubRepository.Description, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) GetDescription() *string {
	return v.GitHubRepo.Description
}

// GetIsFork returns userGithubRepoCurrentUserGithubRepositoryGitHubRepository.IsFork, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) GetIsFork() bool {
	return v.GitHubRepo.IsFork
}

// GetIsPrivate returns userGithubRepoCurrentUserGithubRepositoryGitHubRepository.IsPrivate, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) GetIsPrivate() bool {
	return v.GitHubRepo.IsPrivate
}

// GetPrimaryLanguage returns userGithubRepoCurrentUserGithubRepositoryGitHubRepository.PrimaryLanguage, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) GetPrimaryLanguage() *string {
	return v.GitHubRepo.PrimaryLanguage
}

// GetUpdatedAt returns userGithubRepoCurrentUserGithubRepositoryGitHubRepository.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) GetUpdatedAt() time.Time {
	return v.GitHubRepo.UpdatedAt
}

// GetDefaultBranch returns userGithubRepoCurrentUserGithubRepositoryGitHubRepository.DefaultBranch, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) GetDefaultBranch() *GithubDetailDefaultBranchGitBranch {
	return v.GithubDetail.DefaultBranch
}

// GetPorts returns userGithubRepoCurrentUserGithubRepositoryGitHubRepository.Ports, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) GetPorts() []GithubDetailPortsPort {
	return v.GithubDetail.Ports
}

// GetVolumes returns userGithubRepoCurrentUserGithubRepositoryGitHubRepository.Volumes, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) GetVolumes() []GithubDetailVolumesVolumeSpec {
	return v.GithubDetail.Volumes
}

// GetBuildMethodSuggestions returns userGithubRepoCurrentUserGithubRepositoryGitHubRepository.BuildMethodSuggestions, and is useful for accessing the field via an interface.
func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) GetBuildMethodSuggestions() []GithubDetailBuildMethodSuggestionsBuildMethod {
	return v.GithubDetail.BuildMethodSuggestions
}

func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userGithubRepoCurrentUserGithubRepositoryGitHubRepository
		graphql.NoUnmarshalJSON
	}
	firstPass.userGithubRepoCurrentUserGithubRepositoryGitHubRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GitHubRepo)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.GithubDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserGithubRepoCurrentUserGithubRepositoryGitHubRepository struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Owner string `json:"owner"`

	Url string `json:"url"`

	Description *string `json:"description"`

	IsFork bool `json:"isFork"`

	IsPrivate bool `json:"isPrivate"`

	PrimaryLanguage *string `json:"primaryLanguage"`

	UpdatedAt time.Time `json:"updatedAt"`

	DefaultBranch *GithubDetailDefaultBranchGitBranch `json:"defaultBranch"`

	Ports []GithubDetailPortsPort `json:"ports"`

	Volumes []GithubDetailVolumesVolumeSpec `json:"volumes"`

	BuildMethodSuggestions []GithubDetailBuildMethodSuggestionsBuildMethod `json:"buildMethodSuggestions"`
}

func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userGithubRepoCurrentUserGithubRepositoryGitHubRepository) __premarshalJSON() (*__premarshaluserGithubRepoCurrentUserGithubRepositoryGitHubRepository, error) {
	var retval __premarshaluserGithubRepoCurrentUserGithubRepositoryGitHubRepository

	retval.Id = v.Id
	retval.Name = v.GitHubRepo.Name
	retval.Owner = v.GitHubRepo.Owner
	retval.Url = v.GitHubRepo.Url
	retval.Description = v.GitHubRepo.Description
	retval.IsFork = v.GitHubRepo.IsFork
	retval.IsPrivate = v.GitHubRepo.IsPrivate
	retval.PrimaryLanguage = v.GitHubRepo.PrimaryLanguage
	retval.UpdatedAt = v.GitHubRepo.UpdatedAt
	retval.DefaultBranch = v.GithubDetail.DefaultBranch
	retval.Ports = v.GithubDetail.Ports
	retval.Volumes = v.GithubDetail.Volumes
	retval.BuildMethodSuggestions = v.GithubDetail.BuildMethodSuggestions
	return &retval, nil
}

// userGithubRepoResponse is returned by userGithubRepo on success.
type userGithubRepoResponse struct {
	CurrentUser userGithubRepoCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userGithubRepoResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userGithubRepoResponse) GetCurrentUser() userGithubRepoCurrentUser { return v.CurrentUser }

// userGithubRepoServerlessCurrentUser includes the requested fields of the GraphQL type User.
type userGithubRepoServerlessCurrentUser struct {
	Id               uuid.UUID                                                            `json:"id"`
	GithubRepository *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository `json:"githubRepository"`
}

// GetId returns userGithubRepoServerlessCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUser) GetId() uuid.UUID { return v.Id }

// GetGithubRepository returns userGithubRepoServerlessCurrentUser.GithubRepository, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUser) GetGithubRepository() *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository {
	return v.GithubRepository
}

// userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository includes the requested fields of the GraphQL type GitHubRepository.
type userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository struct {
	Id           uuid.UUID `json:"id"`
	GitHubRepo   `json:"-"`
	GithubDetail `json:"-"`
	Serverless   *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfig `json:"serverless"`
}

// GetId returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.Id, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetId() uuid.UUID {
	return v.Id
}

// GetServerless returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.Serverless, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetServerless() *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfig {
	return v.Serverless
}

// GetName returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.Name, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetName() string {
	return v.GitHubRepo.Name
}

// GetOwner returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.Owner, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetOwner() string {
	return v.GitHubRepo.Owner
}

// GetUrl returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.Url, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetUrl() string {
	return v.GitHubRepo.Url
}

// GetDescription returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.Description, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetDescription() *string {
	return v.GitHubRepo.Description
}

// GetIsFork returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.IsFork, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetIsFork() bool {
	return v.GitHubRepo.IsFork
}

// GetIsPrivate returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.IsPrivate, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetIsPrivate() bool {
	return v.GitHubRepo.IsPrivate
}

// GetPrimaryLanguage returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.PrimaryLanguage, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetPrimaryLanguage() *string {
	return v.GitHubRepo.PrimaryLanguage
}

// GetUpdatedAt returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetUpdatedAt() time.Time {
	return v.GitHubRepo.UpdatedAt
}

// GetDefaultBranch returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.DefaultBranch, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetDefaultBranch() *GithubDetailDefaultBranchGitBranch {
	return v.GithubDetail.DefaultBranch
}

// GetPorts returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.Ports, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetPorts() []GithubDetailPortsPort {
	return v.GithubDetail.Ports
}

// GetVolumes returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.Volumes, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetVolumes() []GithubDetailVolumesVolumeSpec {
	return v.GithubDetail.Volumes
}

// GetBuildMethodSuggestions returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository.BuildMethodSuggestions, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) GetBuildMethodSuggestions() []GithubDetailBuildMethodSuggestionsBuildMethod {
	return v.GithubDetail.BuildMethodSuggestions
}

func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository
		graphql.NoUnmarshalJSON
	}
	firstPass.userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GitHubRepo)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.GithubDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository struct {
	Id uuid.UUID `json:"id"`

	Serverless *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfig `json:"serverless"`

	Name string `json:"name"`

	Owner string `json:"owner"`

	Url string `json:"url"`

	Description *string `json:"description"`

	IsFork bool `json:"isFork"`

	IsPrivate bool `json:"isPrivate"`

	PrimaryLanguage *string `json:"primaryLanguage"`

	UpdatedAt time.Time `json:"updatedAt"`

	DefaultBranch *GithubDetailDefaultBranchGitBranch `json:"defaultBranch"`

	Ports []GithubDetailPortsPort `json:"ports"`

	Volumes []GithubDetailVolumesVolumeSpec `json:"volumes"`

	BuildMethodSuggestions []GithubDetailBuildMethodSuggestionsBuildMethod `json:"buildMethodSuggestions"`
}

func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository) __premarshalJSON() (*__premarshaluserGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository, error) {
	var retval __premarshaluserGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepository

	retval.Id = v.Id
	retval.Serverless = v.Serverless
	retval.Name = v.GitHubRepo.Name
	retval.Owner = v.GitHubRepo.Owner
	retval.Url = v.GitHubRepo.Url
	retval.Description = v.GitHubRepo.Description
	retval.IsFork = v.GitHubRepo.IsFork
	retval.IsPrivate = v.GitHubRepo.IsPrivate
	retval.PrimaryLanguage = v.GitHubRepo.PrimaryLanguage
	retval.UpdatedAt = v.GitHubRepo.UpdatedAt
	retval.DefaultBranch = v.GithubDetail.DefaultBranch
	retval.Ports = v.GithubDetail.Ports
	retval.Volumes = v.GithubDetail.Volumes
	retval.BuildMethodSuggestions = v.GithubDetail.BuildMethodSuggestions
	return &retval, nil
}

// userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfig includes the requested fields of the GraphQL type ServerlessConfig.
type userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfig struct {
	Service   *string                                                                                                                    `json:"service"`
	Provider  *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider   `json:"provider"`
	Functions []userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigFunctionsServerlessFunction `json:"functions"`
}

// GetService returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfig.Service, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfig) GetService() *string {
	return v.Service
}

// GetProvider returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfig.Provider, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfig) GetProvider() *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider {
	return v.Provider
}

// GetFunctions returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfig.Functions, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfig) GetFunctions() []userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigFunctionsServerlessFunction {
	return v.Functions
}

// userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigFunctionsServerlessFunction includes the requested fields of the GraphQL type ServerlessFunction.
type userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigFunctionsServerlessFunction struct {
	Name    string  `json:"name"`
	Handler *string `json:"handler"`
}

// GetName returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigFunctionsServerlessFunction.Name, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigFunctionsServerlessFunction) GetName() string {
	return v.Name
}

// GetHandler returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigFunctionsServerlessFunction.Handler, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigFunctionsServerlessFunction) GetHandler() *string {
	return v.Handler
}

// userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider includes the requested fields of the GraphQL type ServerlessProvider.
type userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider struct {
	Name      *string `json:"name"`
	Region    *string `json:"region"`
	Runtime   *string `json:"runtime"`
	StackName *string `json:"stackName"`
	Stage     *string `json:"stage"`
}

// GetName returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider.Name, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider) GetName() *string {
	return v.Name
}

// GetRegion returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider.Region, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider) GetRegion() *string {
	return v.Region
}

// GetRuntime returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider.Runtime, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider) GetRuntime() *string {
	return v.Runtime
}

// GetStackName returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider.StackName, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider) GetStackName() *string {
	return v.StackName
}

// GetStage returns userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider.Stage, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessCurrentUserGithubRepositoryGitHubRepositoryServerlessServerlessConfigProviderServerlessProvider) GetStage() *string {
	return v.Stage
}

// userGithubRepoServerlessResponse is returned by userGithubRepoServerless on success.
type userGithubRepoServerlessResponse struct {
	CurrentUser userGithubRepoServerlessCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userGithubRepoServerlessResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userGithubRepoServerlessResponse) GetCurrentUser() userGithubRepoServerlessCurrentUser {
	return v.CurrentUser
}

// userGithubReposCurrentUser includes the requested fields of the GraphQL type User.
type userGithubReposCurrentUser struct {
	Id                  uuid.UUID                                                         `json:"id"`
	Login               string                                                            `json:"login"`
	Avatar              *string                                                           `json:"avatar"`
	GithubInstallations []userGithubReposCurrentUserGithubInstallationsGitHubInstallation `json:"githubInstallations"`
}

// GetId returns userGithubReposCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUser) GetId() uuid.UUID { return v.Id }

// GetLogin returns userGithubReposCurrentUser.Login, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUser) GetLogin() string { return v.Login }

// GetAvatar returns userGithubReposCurrentUser.Avatar, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUser) GetAvatar() *string { return v.Avatar }

// GetGithubInstallations returns userGithubReposCurrentUser.GithubInstallations, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUser) GetGithubInstallations() []userGithubReposCurrentUserGithubInstallationsGitHubInstallation {
	return v.GithubInstallations
}

// userGithubReposCurrentUserGithubInstallationsGitHubInstallation includes the requested fields of the GraphQL type GitHubInstallation.
type userGithubReposCurrentUserGithubInstallationsGitHubInstallation struct {
	Id                  uuid.UUID                                                                                     `json:"id"`
	TargetType          string                                                                                        `json:"targetType"`
	Account             userGithubReposCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser              `json:"account"`
	RepositorySelection string                                                                                        `json:"repositorySelection"`
	Repositories        []userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository `json:"repositories"`
}

// GetId returns userGithubReposCurrentUserGithubInstallationsGitHubInstallation.Id, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallation) GetId() uuid.UUID {
	return v.Id
}

// GetTargetType returns userGithubReposCurrentUserGithubInstallationsGitHubInstallation.TargetType, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallation) GetTargetType() string {
	return v.TargetType
}

// GetAccount returns userGithubReposCurrentUserGithubInstallationsGitHubInstallation.Account, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallation) GetAccount() userGithubReposCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser {
	return v.Account
}

// GetRepositorySelection returns userGithubReposCurrentUserGithubInstallationsGitHubInstallation.RepositorySelection, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallation) GetRepositorySelection() string {
	return v.RepositorySelection
}

// GetRepositories returns userGithubReposCurrentUserGithubInstallationsGitHubInstallation.Repositories, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallation) GetRepositories() []userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository {
	return v.Repositories
}

// userGithubReposCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser includes the requested fields of the GraphQL type GitHubUser.
type userGithubReposCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser struct {
	Id     uuid.UUID      `json:"id"`
	Login  string         `json:"login"`
	Avatar *string        `json:"avatar"`
	Type   GithubUserType `json:"type"`
}

// GetId returns userGithubReposCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser.Id, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser) GetId() uuid.UUID {
	return v.Id
}

// GetLogin returns userGithubReposCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser.Login, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser) GetLogin() string {
	return v.Login
}

// GetAvatar returns userGithubReposCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser.Avatar, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser) GetAvatar() *string {
	return v.Avatar
}

// GetType returns userGithubReposCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser.Type, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationAccountGitHubUser) GetType() GithubUserType {
	return v.Type
}

// userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository includes the requested fields of the GraphQL type GitHubRepository.
type userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository struct {
	GitHubRepo `json:"-"`
}

// GetId returns userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.Id, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetId() uuid.UUID {
	return v.GitHubRepo.Id
}

// GetName returns userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.Name, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetName() string {
	return v.GitHubRepo.Name
}

// GetOwner returns userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.Owner, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetOwner() string {
	return v.GitHubRepo.Owner
}

// GetUrl returns userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.Url, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetUrl() string {
	return v.GitHubRepo.Url
}

// GetDescription returns userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.Description, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetDescription() *string {
	return v.GitHubRepo.Description
}

// GetIsFork returns userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.IsFork, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetIsFork() bool {
	return v.GitHubRepo.IsFork
}

// GetIsPrivate returns userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.IsPrivate, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetIsPrivate() bool {
	return v.GitHubRepo.IsPrivate
}

// GetPrimaryLanguage returns userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.PrimaryLanguage, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetPrimaryLanguage() *string {
	return v.GitHubRepo.PrimaryLanguage
}

// GetUpdatedAt returns userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) GetUpdatedAt() time.Time {
	return v.GitHubRepo.UpdatedAt
}

func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository
		graphql.NoUnmarshalJSON
	}
	firstPass.userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GitHubRepo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Owner string `json:"owner"`

	Url string `json:"url"`

	Description *string `json:"description"`

	IsFork bool `json:"isFork"`

	IsPrivate bool `json:"isPrivate"`

	PrimaryLanguage *string `json:"primaryLanguage"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository) __premarshalJSON() (*__premarshaluserGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository, error) {
	var retval __premarshaluserGithubReposCurrentUserGithubInstallationsGitHubInstallationRepositoriesGitHubRepository

	retval.Id = v.GitHubRepo.Id
	retval.Name = v.GitHubRepo.Name
	retval.Owner = v.GitHubRepo.Owner
	retval.Url = v.GitHubRepo.Url
	retval.Description = v.GitHubRepo.Description
	retval.IsFork = v.GitHubRepo.IsFork
	retval.IsPrivate = v.GitHubRepo.IsPrivate
	retval.PrimaryLanguage = v.GitHubRepo.PrimaryLanguage
	retval.UpdatedAt = v.GitHubRepo.UpdatedAt
	return &retval, nil
}

// userGithubReposResponse is returned by userGithubRepos on success.
type userGithubReposResponse struct {
	CurrentUser userGithubReposCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userGithubReposResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userGithubReposResponse) GetCurrentUser() userGithubReposCurrentUser { return v.CurrentUser }

// userIntegrationsResponse is returned by userIntegrations on success.
type userIntegrationsResponse struct {
	User userIntegrationsUser `json:"user"`
}

// GetUser returns userIntegrationsResponse.User, and is useful for accessing the field via an interface.
func (v *userIntegrationsResponse) GetUser() userIntegrationsUser { return v.User }

// userIntegrationsUser includes the requested fields of the GraphQL type User.
type userIntegrationsUser struct {
	Id           uuid.UUID                                     `json:"id"`
	Integrations []userIntegrationsUserIntegrationsIntegration `json:"-"`
	// Global settings for notification integrations. These settings may be overriden per-integration.
	NotificationIntegrationSettings *userIntegrationsUserNotificationIntegrationSettings `json:"notificationIntegrationSettings"`
}

// GetId returns userIntegrationsUser.Id, and is useful for accessing the field via an interface.
func (v *userIntegrationsUser) GetId() uuid.UUID { return v.Id }

// GetIntegrations returns userIntegrationsUser.Integrations, and is useful for accessing the field via an interface.
func (v *userIntegrationsUser) GetIntegrations() []userIntegrationsUserIntegrationsIntegration {
	return v.Integrations
}

// GetNotificationIntegrationSettings returns userIntegrationsUser.NotificationIntegrationSettings, and is useful for accessing the field via an interface.
func (v *userIntegrationsUser) GetNotificationIntegrationSettings() *userIntegrationsUserNotificationIntegrationSettings {
	return v.NotificationIntegrationSettings
}

func (v *userIntegrationsUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userIntegrationsUser
		Integrations []json.RawMessage `json:"integrations"`
		graphql.NoUnmarshalJSON
	}
	firstPass.userIntegrationsUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Integrations
		src := firstPass.Integrations
		*dst = make(
			[]userIntegrationsUserIntegrationsIntegration,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshaluserIntegrationsUserIntegrationsIntegration(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal userIntegrationsUser.Integrations: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshaluserIntegrationsUser struct {
	Id uuid.UUID `json:"id"`

	Integrations []json.RawMessage `json:"integrations"`

	NotificationIntegrationSettings *userIntegrationsUserNotificationIntegrationSettings `json:"notificationIntegrationSettings"`
}

func (v *userIntegrationsUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userIntegrationsUser) __premarshalJSON() (*__premarshaluserIntegrationsUser, error) {
	var retval __premarshaluserIntegrationsUser

	retval.Id = v.Id
	{

		dst := &retval.Integrations
		src := v.Integrations
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshaluserIntegrationsUserIntegrationsIntegration(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal userIntegrationsUser.Integrations: %w", err)
			}
		}
	}
	retval.NotificationIntegrationSettings = v.NotificationIntegrationSettings
	return &retval, nil
}

// userIntegrationsUserIntegrationsBitbucketIntegration includes the requested fields of the GraphQL type BitbucketIntegration.
type userIntegrationsUserIntegrationsBitbucketIntegration struct {
	Typename                              *string   `json:"__typename"`
	Id                                    uuid.UUID `json:"id"`
	IntegrationDetailBitbucketIntegration `json:"-"`
}

// GetTypename returns userIntegrationsUserIntegrationsBitbucketIntegration.Typename, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsBitbucketIntegration) GetTypename() *string {
	return v.Typename
}

// GetId returns userIntegrationsUserIntegrationsBitbucketIntegration.Id, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsBitbucketIntegration) GetId() uuid.UUID { return v.Id }

// GetWebhookUrl returns userIntegrationsUserIntegrationsBitbucketIntegration.WebhookUrl, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsBitbucketIntegration) GetWebhookUrl() string {
	return v.IntegrationDetailBitbucketIntegration.WebhookUrl
}

// GetWebhookToken returns userIntegrationsUserIntegrationsBitbucketIntegration.WebhookToken, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsBitbucketIntegration) GetWebhookToken() string {
	return v.IntegrationDetailBitbucketIntegration.WebhookToken
}

// GetAccount returns userIntegrationsUserIntegrationsBitbucketIntegration.Account, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsBitbucketIntegration) GetAccount() *IntegrationDetailAccountBitbucketAccount {
	return v.IntegrationDetailBitbucketIntegration.Account
}

// GetAuthType returns userIntegrationsUserIntegrationsBitbucketIntegration.AuthType, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsBitbucketIntegration) GetAuthType() BitbucketIntegrationAuthType {
	return v.IntegrationDetailBitbucketIntegration.AuthType
}

// GetType returns userIntegrationsUserIntegrationsBitbucketIntegration.Type, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsBitbucketIntegration) GetType() IntegrationType {
	return v.IntegrationDetailBitbucketIntegration.IntegrationCommonBitbucketIntegration.Type
}

// GetName returns userIntegrationsUserIntegrationsBitbucketIntegration.Name, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsBitbucketIntegration) GetName() string {
	return v.IntegrationDetailBitbucketIntegration.IntegrationCommonBitbucketIntegration.Name
}

// GetDescription returns userIntegrationsUserIntegrationsBitbucketIntegration.Description, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsBitbucketIntegration) GetDescription() string {
	return v.IntegrationDetailBitbucketIntegration.IntegrationCommonBitbucketIntegration.Description
}

// GetImage returns userIntegrationsUserIntegrationsBitbucketIntegration.Image, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsBitbucketIntegration) GetImage() string {
	return v.IntegrationDetailBitbucketIntegration.IntegrationCommonBitbucketIntegration.Image
}

// GetCreatedAt returns userIntegrationsUserIntegrationsBitbucketIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsBitbucketIntegration) GetCreatedAt() time.Time {
	return v.IntegrationDetailBitbucketIntegration.IntegrationCommonBitbucketIntegration.CreatedAt
}

// GetUpdatedAt returns userIntegrationsUserIntegrationsBitbucketIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsBitbucketIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationDetailBitbucketIntegration.IntegrationCommonBitbucketIntegration.UpdatedAt
}

func (v *userIntegrationsUserIntegrationsBitbucketIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userIntegrationsUserIntegrationsBitbucketIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.userIntegrationsUserIntegrationsBitbucketIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationDetailBitbucketIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserIntegrationsUserIntegrationsBitbucketIntegration struct {
	Typename *string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	WebhookUrl string `json:"webhookUrl"`

	WebhookToken string `json:"webhookToken"`

	Account *IntegrationDetailAccountBitbucketAccount `json:"account"`

	AuthType BitbucketIntegrationAuthType `json:"authType"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *userIntegrationsUserIntegrationsBitbucketIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userIntegrationsUserIntegrationsBitbucketIntegration) __premarshalJSON() (*__premarshaluserIntegrationsUserIntegrationsBitbucketIntegration, error) {
	var retval __premarshaluserIntegrationsUserIntegrationsBitbucketIntegration

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.WebhookUrl = v.IntegrationDetailBitbucketIntegration.WebhookUrl
	retval.WebhookToken = v.IntegrationDetailBitbucketIntegration.WebhookToken
	retval.Account = v.IntegrationDetailBitbucketIntegration.Account
	retval.AuthType = v.IntegrationDetailBitbucketIntegration.AuthType
	retval.Type = v.IntegrationDetailBitbucketIntegration.IntegrationCommonBitbucketIntegration.Type
	retval.Name = v.IntegrationDetailBitbucketIntegration.IntegrationCommonBitbucketIntegration.Name
	retval.Description = v.IntegrationDetailBitbucketIntegration.IntegrationCommonBitbucketIntegration.Description
	retval.Image = v.IntegrationDetailBitbucketIntegration.IntegrationCommonBitbucketIntegration.Image
	retval.CreatedAt = v.IntegrationDetailBitbucketIntegration.IntegrationCommonBitbucketIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationDetailBitbucketIntegration.IntegrationCommonBitbucketIntegration.UpdatedAt
	return &retval, nil
}

// userIntegrationsUserIntegrationsDatadogIntegration includes the requested fields of the GraphQL type DatadogIntegration.
type userIntegrationsUserIntegrationsDatadogIntegration struct {
	Typename                            *string   `json:"__typename"`
	Id                                  uuid.UUID `json:"id"`
	IntegrationDetailDatadogIntegration `json:"-"`
}

// GetTypename returns userIntegrationsUserIntegrationsDatadogIntegration.Typename, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDatadogIntegration) GetTypename() *string { return v.Typename }

// GetId returns userIntegrationsUserIntegrationsDatadogIntegration.Id, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDatadogIntegration) GetId() uuid.UUID { return v.Id }

// GetApiKey returns userIntegrationsUserIntegrationsDatadogIntegration.ApiKey, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDatadogIntegration) GetApiKey() *string {
	return v.IntegrationDetailDatadogIntegration.ApiKey
}

// GetType returns userIntegrationsUserIntegrationsDatadogIntegration.Type, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDatadogIntegration) GetType() IntegrationType {
	return v.IntegrationDetailDatadogIntegration.IntegrationCommonDatadogIntegration.Type
}

// GetName returns userIntegrationsUserIntegrationsDatadogIntegration.Name, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDatadogIntegration) GetName() string {
	return v.IntegrationDetailDatadogIntegration.IntegrationCommonDatadogIntegration.Name
}

// GetDescription returns userIntegrationsUserIntegrationsDatadogIntegration.Description, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDatadogIntegration) GetDescription() string {
	return v.IntegrationDetailDatadogIntegration.IntegrationCommonDatadogIntegration.Description
}

// GetImage returns userIntegrationsUserIntegrationsDatadogIntegration.Image, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDatadogIntegration) GetImage() string {
	return v.IntegrationDetailDatadogIntegration.IntegrationCommonDatadogIntegration.Image
}

// GetCreatedAt returns userIntegrationsUserIntegrationsDatadogIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDatadogIntegration) GetCreatedAt() time.Time {
	return v.IntegrationDetailDatadogIntegration.IntegrationCommonDatadogIntegration.CreatedAt
}

// GetUpdatedAt returns userIntegrationsUserIntegrationsDatadogIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDatadogIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationDetailDatadogIntegration.IntegrationCommonDatadogIntegration.UpdatedAt
}

func (v *userIntegrationsUserIntegrationsDatadogIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userIntegrationsUserIntegrationsDatadogIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.userIntegrationsUserIntegrationsDatadogIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationDetailDatadogIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserIntegrationsUserIntegrationsDatadogIntegration struct {
	Typename *string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	ApiKey *string `json:"apiKey"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *userIntegrationsUserIntegrationsDatadogIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userIntegrationsUserIntegrationsDatadogIntegration) __premarshalJSON() (*__premarshaluserIntegrationsUserIntegrationsDatadogIntegration, error) {
	var retval __premarshaluserIntegrationsUserIntegrationsDatadogIntegration

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.ApiKey = v.IntegrationDetailDatadogIntegration.ApiKey
	retval.Type = v.IntegrationDetailDatadogIntegration.IntegrationCommonDatadogIntegration.Type
	retval.Name = v.IntegrationDetailDatadogIntegration.IntegrationCommonDatadogIntegration.Name
	retval.Description = v.IntegrationDetailDatadogIntegration.IntegrationCommonDatadogIntegration.Description
	retval.Image = v.IntegrationDetailDatadogIntegration.IntegrationCommonDatadogIntegration.Image
	retval.CreatedAt = v.IntegrationDetailDatadogIntegration.IntegrationCommonDatadogIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationDetailDatadogIntegration.IntegrationCommonDatadogIntegration.UpdatedAt
	return &retval, nil
}

// userIntegrationsUserIntegrationsDiscordIntegration includes the requested fields of the GraphQL type DiscordIntegration.
type userIntegrationsUserIntegrationsDiscordIntegration struct {
	Typename                            *string   `json:"__typename"`
	Id                                  uuid.UUID `json:"id"`
	IntegrationDetailDiscordIntegration `json:"-"`
}

// GetTypename returns userIntegrationsUserIntegrationsDiscordIntegration.Typename, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordIntegration) GetTypename() *string { return v.Typename }

// GetId returns userIntegrationsUserIntegrationsDiscordIntegration.Id, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordIntegration) GetId() uuid.UUID { return v.Id }

// GetType returns userIntegrationsUserIntegrationsDiscordIntegration.Type, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordIntegration) GetType() IntegrationType {
	return v.IntegrationDetailDiscordIntegration.IntegrationCommonDiscordIntegration.Type
}

// GetName returns userIntegrationsUserIntegrationsDiscordIntegration.Name, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordIntegration) GetName() string {
	return v.IntegrationDetailDiscordIntegration.IntegrationCommonDiscordIntegration.Name
}

// GetDescription returns userIntegrationsUserIntegrationsDiscordIntegration.Description, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordIntegration) GetDescription() string {
	return v.IntegrationDetailDiscordIntegration.IntegrationCommonDiscordIntegration.Description
}

// GetImage returns userIntegrationsUserIntegrationsDiscordIntegration.Image, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordIntegration) GetImage() string {
	return v.IntegrationDetailDiscordIntegration.IntegrationCommonDiscordIntegration.Image
}

// GetCreatedAt returns userIntegrationsUserIntegrationsDiscordIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordIntegration) GetCreatedAt() time.Time {
	return v.IntegrationDetailDiscordIntegration.IntegrationCommonDiscordIntegration.CreatedAt
}

// GetUpdatedAt returns userIntegrationsUserIntegrationsDiscordIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationDetailDiscordIntegration.IntegrationCommonDiscordIntegration.UpdatedAt
}

func (v *userIntegrationsUserIntegrationsDiscordIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userIntegrationsUserIntegrationsDiscordIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.userIntegrationsUserIntegrationsDiscordIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationDetailDiscordIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserIntegrationsUserIntegrationsDiscordIntegration struct {
	Typename *string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *userIntegrationsUserIntegrationsDiscordIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userIntegrationsUserIntegrationsDiscordIntegration) __premarshalJSON() (*__premarshaluserIntegrationsUserIntegrationsDiscordIntegration, error) {
	var retval __premarshaluserIntegrationsUserIntegrationsDiscordIntegration

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Type = v.IntegrationDetailDiscordIntegration.IntegrationCommonDiscordIntegration.Type
	retval.Name = v.IntegrationDetailDiscordIntegration.IntegrationCommonDiscordIntegration.Name
	retval.Description = v.IntegrationDetailDiscordIntegration.IntegrationCommonDiscordIntegration.Description
	retval.Image = v.IntegrationDetailDiscordIntegration.IntegrationCommonDiscordIntegration.Image
	retval.CreatedAt = v.IntegrationDetailDiscordIntegration.IntegrationCommonDiscordIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationDetailDiscordIntegration.IntegrationCommonDiscordIntegration.UpdatedAt
	return &retval, nil
}

// userIntegrationsUserIntegrationsDiscordWebhookIntegration includes the requested fields of the GraphQL type DiscordWebhookIntegration.
type userIntegrationsUserIntegrationsDiscordWebhookIntegration struct {
	Typename                                   *string   `json:"__typename"`
	Id                                         uuid.UUID `json:"id"`
	IntegrationDetailDiscordWebhookIntegration `json:"-"`
}

// GetTypename returns userIntegrationsUserIntegrationsDiscordWebhookIntegration.Typename, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) GetTypename() *string {
	return v.Typename
}

// GetId returns userIntegrationsUserIntegrationsDiscordWebhookIntegration.Id, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) GetId() uuid.UUID { return v.Id }

// GetUrl returns userIntegrationsUserIntegrationsDiscordWebhookIntegration.Url, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) GetUrl() *string {
	return v.IntegrationDetailDiscordWebhookIntegration.Url
}

// GetType returns userIntegrationsUserIntegrationsDiscordWebhookIntegration.Type, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) GetType() IntegrationType {
	return v.IntegrationDetailDiscordWebhookIntegration.IntegrationCommonDiscordWebhookIntegration.Type
}

// GetName returns userIntegrationsUserIntegrationsDiscordWebhookIntegration.Name, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) GetName() string {
	return v.IntegrationDetailDiscordWebhookIntegration.IntegrationCommonDiscordWebhookIntegration.Name
}

// GetDescription returns userIntegrationsUserIntegrationsDiscordWebhookIntegration.Description, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) GetDescription() string {
	return v.IntegrationDetailDiscordWebhookIntegration.IntegrationCommonDiscordWebhookIntegration.Description
}

// GetImage returns userIntegrationsUserIntegrationsDiscordWebhookIntegration.Image, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) GetImage() string {
	return v.IntegrationDetailDiscordWebhookIntegration.IntegrationCommonDiscordWebhookIntegration.Image
}

// GetCreatedAt returns userIntegrationsUserIntegrationsDiscordWebhookIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) GetCreatedAt() time.Time {
	return v.IntegrationDetailDiscordWebhookIntegration.IntegrationCommonDiscordWebhookIntegration.CreatedAt
}

// GetUpdatedAt returns userIntegrationsUserIntegrationsDiscordWebhookIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationDetailDiscordWebhookIntegration.IntegrationCommonDiscordWebhookIntegration.UpdatedAt
}

// GetNotificationSettings returns userIntegrationsUserIntegrationsDiscordWebhookIntegration.NotificationSettings, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) GetNotificationSettings() *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings {
	return v.IntegrationDetailDiscordWebhookIntegration.NotificationIntegrationCommonDiscordWebhookIntegration.NotificationSettings
}

func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userIntegrationsUserIntegrationsDiscordWebhookIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.userIntegrationsUserIntegrationsDiscordWebhookIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationDetailDiscordWebhookIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserIntegrationsUserIntegrationsDiscordWebhookIntegration struct {
	Typename *string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Url *string `json:"url"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	NotificationSettings *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings `json:"notificationSettings"`
}

func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) __premarshalJSON() (*__premarshaluserIntegrationsUserIntegrationsDiscordWebhookIntegration, error) {
	var retval __premarshaluserIntegrationsUserIntegrationsDiscordWebhookIntegration

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Url = v.IntegrationDetailDiscordWebhookIntegration.Url
	retval.Type = v.IntegrationDetailDiscordWebhookIntegration.IntegrationCommonDiscordWebhookIntegration.Type
	retval.Name = v.IntegrationDetailDiscordWebhookIntegration.IntegrationCommonDiscordWebhookIntegration.Name
	retval.Description = v.IntegrationDetailDiscordWebhookIntegration.IntegrationCommonDiscordWebhookIntegration.Description
	retval.Image = v.IntegrationDetailDiscordWebhookIntegration.IntegrationCommonDiscordWebhookIntegration.Image
	retval.CreatedAt = v.IntegrationDetailDiscordWebhookIntegration.IntegrationCommonDiscordWebhookIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationDetailDiscordWebhookIntegration.IntegrationCommonDiscordWebhookIntegration.UpdatedAt
	retval.NotificationSettings = v.IntegrationDetailDiscordWebhookIntegration.NotificationIntegrationCommonDiscordWebhookIntegration.NotificationSettings
	return &retval, nil
}

// userIntegrationsUserIntegrationsEmailIntegration includes the requested fields of the GraphQL type EmailIntegration.
type userIntegrationsUserIntegrationsEmailIntegration struct {
	Typename                          *string   `json:"__typename"`
	Id                                uuid.UUID `json:"id"`
	IntegrationDetailEmailIntegration `json:"-"`
}

// GetTypename returns userIntegrationsUserIntegrationsEmailIntegration.Typename, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsEmailIntegration) GetTypename() *string { return v.Typename }

// GetId returns userIntegrationsUserIntegrationsEmailIntegration.Id, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsEmailIntegration) GetId() uuid.UUID { return v.Id }

// GetEmailAddress returns userIntegrationsUserIntegrationsEmailIntegration.EmailAddress, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsEmailIntegration) GetEmailAddress() string {
	return v.IntegrationDetailEmailIntegration.EmailAddress
}

// GetActivated returns userIntegrationsUserIntegrationsEmailIntegration.Activated, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsEmailIntegration) GetActivated() *bool {
	return v.IntegrationDetailEmailIntegration.Activated
}

// GetType returns userIntegrationsUserIntegrationsEmailIntegration.Type, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsEmailIntegration) GetType() IntegrationType {
	return v.IntegrationDetailEmailIntegration.IntegrationCommonEmailIntegration.Type
}

// GetName returns userIntegrationsUserIntegrationsEmailIntegration.Name, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsEmailIntegration) GetName() string {
	return v.IntegrationDetailEmailIntegration.IntegrationCommonEmailIntegration.Name
}

// GetDescription returns userIntegrationsUserIntegrationsEmailIntegration.Description, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsEmailIntegration) GetDescription() string {
	return v.IntegrationDetailEmailIntegration.IntegrationCommonEmailIntegration.Description
}

// GetImage returns userIntegrationsUserIntegrationsEmailIntegration.Image, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsEmailIntegration) GetImage() string {
	return v.IntegrationDetailEmailIntegration.IntegrationCommonEmailIntegration.Image
}

// GetCreatedAt returns userIntegrationsUserIntegrationsEmailIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsEmailIntegration) GetCreatedAt() time.Time {
	return v.IntegrationDetailEmailIntegration.IntegrationCommonEmailIntegration.CreatedAt
}

// GetUpdatedAt returns userIntegrationsUserIntegrationsEmailIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsEmailIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationDetailEmailIntegration.IntegrationCommonEmailIntegration.UpdatedAt
}

// GetNotificationSettings returns userIntegrationsUserIntegrationsEmailIntegration.NotificationSettings, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsEmailIntegration) GetNotificationSettings() *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings {
	return v.IntegrationDetailEmailIntegration.NotificationIntegrationCommonEmailIntegration.NotificationSettings
}

func (v *userIntegrationsUserIntegrationsEmailIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userIntegrationsUserIntegrationsEmailIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.userIntegrationsUserIntegrationsEmailIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationDetailEmailIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserIntegrationsUserIntegrationsEmailIntegration struct {
	Typename *string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	EmailAddress string `json:"emailAddress"`

	Activated *bool `json:"activated"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	NotificationSettings *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings `json:"notificationSettings"`
}

func (v *userIntegrationsUserIntegrationsEmailIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userIntegrationsUserIntegrationsEmailIntegration) __premarshalJSON() (*__premarshaluserIntegrationsUserIntegrationsEmailIntegration, error) {
	var retval __premarshaluserIntegrationsUserIntegrationsEmailIntegration

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.EmailAddress = v.IntegrationDetailEmailIntegration.EmailAddress
	retval.Activated = v.IntegrationDetailEmailIntegration.Activated
	retval.Type = v.IntegrationDetailEmailIntegration.IntegrationCommonEmailIntegration.Type
	retval.Name = v.IntegrationDetailEmailIntegration.IntegrationCommonEmailIntegration.Name
	retval.Description = v.IntegrationDetailEmailIntegration.IntegrationCommonEmailIntegration.Description
	retval.Image = v.IntegrationDetailEmailIntegration.IntegrationCommonEmailIntegration.Image
	retval.CreatedAt = v.IntegrationDetailEmailIntegration.IntegrationCommonEmailIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationDetailEmailIntegration.IntegrationCommonEmailIntegration.UpdatedAt
	retval.NotificationSettings = v.IntegrationDetailEmailIntegration.NotificationIntegrationCommonEmailIntegration.NotificationSettings
	return &retval, nil
}

// userIntegrationsUserIntegrationsGithubIntegration includes the requested fields of the GraphQL type GithubIntegration.
type userIntegrationsUserIntegrationsGithubIntegration struct {
	Typename                           *string   `json:"__typename"`
	Id                                 uuid.UUID `json:"id"`
	IntegrationDetailGithubIntegration `json:"-"`
}

// GetTypename returns userIntegrationsUserIntegrationsGithubIntegration.Typename, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGithubIntegration) GetTypename() *string { return v.Typename }

// GetId returns userIntegrationsUserIntegrationsGithubIntegration.Id, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGithubIntegration) GetId() uuid.UUID { return v.Id }

// GetLogin returns userIntegrationsUserIntegrationsGithubIntegration.Login, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGithubIntegration) GetLogin() string {
	return v.IntegrationDetailGithubIntegration.Login
}

// GetAppID returns userIntegrationsUserIntegrationsGithubIntegration.AppID, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGithubIntegration) GetAppID() int {
	return v.IntegrationDetailGithubIntegration.AppID
}

// GetInstallationID returns userIntegrationsUserIntegrationsGithubIntegration.InstallationID, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGithubIntegration) GetInstallationID() int {
	return v.IntegrationDetailGithubIntegration.InstallationID
}

// GetTargetType returns userIntegrationsUserIntegrationsGithubIntegration.TargetType, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGithubIntegration) GetTargetType() string {
	return v.IntegrationDetailGithubIntegration.TargetType
}

// GetType returns userIntegrationsUserIntegrationsGithubIntegration.Type, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGithubIntegration) GetType() IntegrationType {
	return v.IntegrationDetailGithubIntegration.IntegrationCommonGithubIntegration.Type
}

// GetName returns userIntegrationsUserIntegrationsGithubIntegration.Name, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGithubIntegration) GetName() string {
	return v.IntegrationDetailGithubIntegration.IntegrationCommonGithubIntegration.Name
}

// GetDescription returns userIntegrationsUserIntegrationsGithubIntegration.Description, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGithubIntegration) GetDescription() string {
	return v.IntegrationDetailGithubIntegration.IntegrationCommonGithubIntegration.Description
}

// GetImage returns userIntegrationsUserIntegrationsGithubIntegration.Image, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGithubIntegration) GetImage() string {
	return v.IntegrationDetailGithubIntegration.IntegrationCommonGithubIntegration.Image
}

// GetCreatedAt returns userIntegrationsUserIntegrationsGithubIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGithubIntegration) GetCreatedAt() time.Time {
	return v.IntegrationDetailGithubIntegration.IntegrationCommonGithubIntegration.CreatedAt
}

// GetUpdatedAt returns userIntegrationsUserIntegrationsGithubIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGithubIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationDetailGithubIntegration.IntegrationCommonGithubIntegration.UpdatedAt
}

func (v *userIntegrationsUserIntegrationsGithubIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userIntegrationsUserIntegrationsGithubIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.userIntegrationsUserIntegrationsGithubIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationDetailGithubIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserIntegrationsUserIntegrationsGithubIntegration struct {
	Typename *string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Login string `json:"login"`

	AppID int `json:"appID"`

	InstallationID int `json:"installationID"`

	TargetType string `json:"targetType"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *userIntegrationsUserIntegrationsGithubIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userIntegrationsUserIntegrationsGithubIntegration) __premarshalJSON() (*__premarshaluserIntegrationsUserIntegrationsGithubIntegration, error) {
	var retval __premarshaluserIntegrationsUserIntegrationsGithubIntegration

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Login = v.IntegrationDetailGithubIntegration.Login
	retval.AppID = v.IntegrationDetailGithubIntegration.AppID
	retval.InstallationID = v.IntegrationDetailGithubIntegration.InstallationID
	retval.TargetType = v.IntegrationDetailGithubIntegration.TargetType
	retval.Type = v.IntegrationDetailGithubIntegration.IntegrationCommonGithubIntegration.Type
	retval.Name = v.IntegrationDetailGithubIntegration.IntegrationCommonGithubIntegration.Name
	retval.Description = v.IntegrationDetailGithubIntegration.IntegrationCommonGithubIntegration.Description
	retval.Image = v.IntegrationDetailGithubIntegration.IntegrationCommonGithubIntegration.Image
	retval.CreatedAt = v.IntegrationDetailGithubIntegration.IntegrationCommonGithubIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationDetailGithubIntegration.IntegrationCommonGithubIntegration.UpdatedAt
	return &retval, nil
}

// userIntegrationsUserIntegrationsGitlabIntegration includes the requested fields of the GraphQL type GitlabIntegration.
type userIntegrationsUserIntegrationsGitlabIntegration struct {
	Typename                           *string   `json:"__typename"`
	Id                                 uuid.UUID `json:"id"`
	IntegrationDetailGitlabIntegration `json:"-"`
}

// GetTypename returns userIntegrationsUserIntegrationsGitlabIntegration.Typename, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGitlabIntegration) GetTypename() *string { return v.Typename }

// GetId returns userIntegrationsUserIntegrationsGitlabIntegration.Id, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGitlabIntegration) GetId() uuid.UUID { return v.Id }

// GetAccessTokenPrefix returns userIntegrationsUserIntegrationsGitlabIntegration.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGitlabIntegration) GetAccessTokenPrefix() *string {
	return v.IntegrationDetailGitlabIntegration.AccessTokenPrefix
}

// GetWebhookUrl returns userIntegrationsUserIntegrationsGitlabIntegration.WebhookUrl, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGitlabIntegration) GetWebhookUrl() string {
	return v.IntegrationDetailGitlabIntegration.WebhookUrl
}

// GetWebhookToken returns userIntegrationsUserIntegrationsGitlabIntegration.WebhookToken, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGitlabIntegration) GetWebhookToken() string {
	return v.IntegrationDetailGitlabIntegration.WebhookToken
}

// GetType returns userIntegrationsUserIntegrationsGitlabIntegration.Type, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGitlabIntegration) GetType() IntegrationType {
	return v.IntegrationDetailGitlabIntegration.IntegrationCommonGitlabIntegration.Type
}

// GetName returns userIntegrationsUserIntegrationsGitlabIntegration.Name, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGitlabIntegration) GetName() string {
	return v.IntegrationDetailGitlabIntegration.IntegrationCommonGitlabIntegration.Name
}

// GetDescription returns userIntegrationsUserIntegrationsGitlabIntegration.Description, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGitlabIntegration) GetDescription() string {
	return v.IntegrationDetailGitlabIntegration.IntegrationCommonGitlabIntegration.Description
}

// GetImage returns userIntegrationsUserIntegrationsGitlabIntegration.Image, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGitlabIntegration) GetImage() string {
	return v.IntegrationDetailGitlabIntegration.IntegrationCommonGitlabIntegration.Image
}

// GetCreatedAt returns userIntegrationsUserIntegrationsGitlabIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGitlabIntegration) GetCreatedAt() time.Time {
	return v.IntegrationDetailGitlabIntegration.IntegrationCommonGitlabIntegration.CreatedAt
}

// GetUpdatedAt returns userIntegrationsUserIntegrationsGitlabIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsGitlabIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationDetailGitlabIntegration.IntegrationCommonGitlabIntegration.UpdatedAt
}

func (v *userIntegrationsUserIntegrationsGitlabIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userIntegrationsUserIntegrationsGitlabIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.userIntegrationsUserIntegrationsGitlabIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationDetailGitlabIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserIntegrationsUserIntegrationsGitlabIntegration struct {
	Typename *string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	WebhookUrl string `json:"webhookUrl"`

	WebhookToken string `json:"webhookToken"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *userIntegrationsUserIntegrationsGitlabIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userIntegrationsUserIntegrationsGitlabIntegration) __premarshalJSON() (*__premarshaluserIntegrationsUserIntegrationsGitlabIntegration, error) {
	var retval __premarshaluserIntegrationsUserIntegrationsGitlabIntegration

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.AccessTokenPrefix = v.IntegrationDetailGitlabIntegration.AccessTokenPrefix
	retval.WebhookUrl = v.IntegrationDetailGitlabIntegration.WebhookUrl
	retval.WebhookToken = v.IntegrationDetailGitlabIntegration.WebhookToken
	retval.Type = v.IntegrationDetailGitlabIntegration.IntegrationCommonGitlabIntegration.Type
	retval.Name = v.IntegrationDetailGitlabIntegration.IntegrationCommonGitlabIntegration.Name
	retval.Description = v.IntegrationDetailGitlabIntegration.IntegrationCommonGitlabIntegration.Description
	retval.Image = v.IntegrationDetailGitlabIntegration.IntegrationCommonGitlabIntegration.Image
	retval.CreatedAt = v.IntegrationDetailGitlabIntegration.IntegrationCommonGitlabIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationDetailGitlabIntegration.IntegrationCommonGitlabIntegration.UpdatedAt
	return &retval, nil
}

// userIntegrationsUserIntegrationsIntegration includes the requested fields of the GraphQL interface Integration.
//
// userIntegrationsUserIntegrationsIntegration is implemented by the following types:
// userIntegrationsUserIntegrationsBitbucketIntegration
// userIntegrationsUserIntegrationsDatadogIntegration
// userIntegrationsUserIntegrationsDiscordIntegration
// userIntegrationsUserIntegrationsDiscordWebhookIntegration
// userIntegrationsUserIntegrationsEmailIntegration
// userIntegrationsUserIntegrationsGithubIntegration
// userIntegrationsUserIntegrationsGitlabIntegration
// userIntegrationsUserIntegrationsSlackIntegration
// userIntegrationsUserIntegrationsSlackWebhookIntegration
type userIntegrationsUserIntegrationsIntegration interface {
	implementsGraphQLInterfaceuserIntegrationsUserIntegrationsIntegration()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	IntegrationDetail
}

func (v *userIntegrationsUserIntegrationsBitbucketIntegration) implementsGraphQLInterfaceuserIntegrationsUserIntegrationsIntegration() {
}
func (v *userIntegrationsUserIntegrationsBitbucketIntegration) implementsGraphQLInterfaceIntegrationDetail() {
}
func (v *userIntegrationsUserIntegrationsDatadogIntegration) implementsGraphQLInterfaceuserIntegrationsUserIntegrationsIntegration() {
}
func (v *userIntegrationsUserIntegrationsDatadogIntegration) implementsGraphQLInterfaceIntegrationDetail() {
}
func (v *userIntegrationsUserIntegrationsDiscordIntegration) implementsGraphQLInterfaceuserIntegrationsUserIntegrationsIntegration() {
}
func (v *userIntegrationsUserIntegrationsDiscordIntegration) implementsGraphQLInterfaceIntegrationDetail() {
}
func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) implementsGraphQLInterfaceuserIntegrationsUserIntegrationsIntegration() {
}
func (v *userIntegrationsUserIntegrationsDiscordWebhookIntegration) implementsGraphQLInterfaceIntegrationDetail() {
}
func (v *userIntegrationsUserIntegrationsEmailIntegration) implementsGraphQLInterfaceuserIntegrationsUserIntegrationsIntegration() {
}
func (v *userIntegrationsUserIntegrationsEmailIntegration) implementsGraphQLInterfaceIntegrationDetail() {
}
func (v *userIntegrationsUserIntegrationsGithubIntegration) implementsGraphQLInterfaceuserIntegrationsUserIntegrationsIntegration() {
}
func (v *userIntegrationsUserIntegrationsGithubIntegration) implementsGraphQLInterfaceIntegrationDetail() {
}
func (v *userIntegrationsUserIntegrationsGitlabIntegration) implementsGraphQLInterfaceuserIntegrationsUserIntegrationsIntegration() {
}
func (v *userIntegrationsUserIntegrationsGitlabIntegration) implementsGraphQLInterfaceIntegrationDetail() {
}
func (v *userIntegrationsUserIntegrationsSlackIntegration) implementsGraphQLInterfaceuserIntegrationsUserIntegrationsIntegration() {
}
func (v *userIntegrationsUserIntegrationsSlackIntegration) implementsGraphQLInterfaceIntegrationDetail() {
}
func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) implementsGraphQLInterfaceuserIntegrationsUserIntegrationsIntegration() {
}
func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) implementsGraphQLInterfaceIntegrationDetail() {
}

func __unmarshaluserIntegrationsUserIntegrationsIntegration(b []byte, v *userIntegrationsUserIntegrationsIntegration) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BitbucketIntegration":
		*v = new(userIntegrationsUserIntegrationsBitbucketIntegration)
		return json.Unmarshal(b, *v)
	case "DatadogIntegration":
		*v = new(userIntegrationsUserIntegrationsDatadogIntegration)
		return json.Unmarshal(b, *v)
	case "DiscordIntegration":
		*v = new(userIntegrationsUserIntegrationsDiscordIntegration)
		return json.Unmarshal(b, *v)
	case "DiscordWebhookIntegration":
		*v = new(userIntegrationsUserIntegrationsDiscordWebhookIntegration)
		return json.Unmarshal(b, *v)
	case "EmailIntegration":
		*v = new(userIntegrationsUserIntegrationsEmailIntegration)
		return json.Unmarshal(b, *v)
	case "GithubIntegration":
		*v = new(userIntegrationsUserIntegrationsGithubIntegration)
		return json.Unmarshal(b, *v)
	case "GitlabIntegration":
		*v = new(userIntegrationsUserIntegrationsGitlabIntegration)
		return json.Unmarshal(b, *v)
	case "SlackIntegration":
		*v = new(userIntegrationsUserIntegrationsSlackIntegration)
		return json.Unmarshal(b, *v)
	case "SlackWebhookIntegration":
		*v = new(userIntegrationsUserIntegrationsSlackWebhookIntegration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Integration.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for userIntegrationsUserIntegrationsIntegration: "%v"`, tn.TypeName)
	}
}

func __marshaluserIntegrationsUserIntegrationsIntegration(v *userIntegrationsUserIntegrationsIntegration) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *userIntegrationsUserIntegrationsBitbucketIntegration:
		typename = "BitbucketIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaluserIntegrationsUserIntegrationsBitbucketIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *userIntegrationsUserIntegrationsDatadogIntegration:
		typename = "DatadogIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaluserIntegrationsUserIntegrationsDatadogIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *userIntegrationsUserIntegrationsDiscordIntegration:
		typename = "DiscordIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaluserIntegrationsUserIntegrationsDiscordIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *userIntegrationsUserIntegrationsDiscordWebhookIntegration:
		typename = "DiscordWebhookIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaluserIntegrationsUserIntegrationsDiscordWebhookIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *userIntegrationsUserIntegrationsEmailIntegration:
		typename = "EmailIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaluserIntegrationsUserIntegrationsEmailIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *userIntegrationsUserIntegrationsGithubIntegration:
		typename = "GithubIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaluserIntegrationsUserIntegrationsGithubIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *userIntegrationsUserIntegrationsGitlabIntegration:
		typename = "GitlabIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaluserIntegrationsUserIntegrationsGitlabIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *userIntegrationsUserIntegrationsSlackIntegration:
		typename = "SlackIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaluserIntegrationsUserIntegrationsSlackIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case *userIntegrationsUserIntegrationsSlackWebhookIntegration:
		typename = "SlackWebhookIntegration"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaluserIntegrationsUserIntegrationsSlackWebhookIntegration
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for userIntegrationsUserIntegrationsIntegration: "%T"`, v)
	}
}

// userIntegrationsUserIntegrationsSlackIntegration includes the requested fields of the GraphQL type SlackIntegration.
type userIntegrationsUserIntegrationsSlackIntegration struct {
	Typename                          *string   `json:"__typename"`
	Id                                uuid.UUID `json:"id"`
	IntegrationDetailSlackIntegration `json:"-"`
}

// GetTypename returns userIntegrationsUserIntegrationsSlackIntegration.Typename, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackIntegration) GetTypename() *string { return v.Typename }

// GetId returns userIntegrationsUserIntegrationsSlackIntegration.Id, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackIntegration) GetId() uuid.UUID { return v.Id }

// GetType returns userIntegrationsUserIntegrationsSlackIntegration.Type, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackIntegration) GetType() IntegrationType {
	return v.IntegrationDetailSlackIntegration.IntegrationCommonSlackIntegration.Type
}

// GetName returns userIntegrationsUserIntegrationsSlackIntegration.Name, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackIntegration) GetName() string {
	return v.IntegrationDetailSlackIntegration.IntegrationCommonSlackIntegration.Name
}

// GetDescription returns userIntegrationsUserIntegrationsSlackIntegration.Description, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackIntegration) GetDescription() string {
	return v.IntegrationDetailSlackIntegration.IntegrationCommonSlackIntegration.Description
}

// GetImage returns userIntegrationsUserIntegrationsSlackIntegration.Image, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackIntegration) GetImage() string {
	return v.IntegrationDetailSlackIntegration.IntegrationCommonSlackIntegration.Image
}

// GetCreatedAt returns userIntegrationsUserIntegrationsSlackIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackIntegration) GetCreatedAt() time.Time {
	return v.IntegrationDetailSlackIntegration.IntegrationCommonSlackIntegration.CreatedAt
}

// GetUpdatedAt returns userIntegrationsUserIntegrationsSlackIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationDetailSlackIntegration.IntegrationCommonSlackIntegration.UpdatedAt
}

func (v *userIntegrationsUserIntegrationsSlackIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userIntegrationsUserIntegrationsSlackIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.userIntegrationsUserIntegrationsSlackIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationDetailSlackIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserIntegrationsUserIntegrationsSlackIntegration struct {
	Typename *string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *userIntegrationsUserIntegrationsSlackIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userIntegrationsUserIntegrationsSlackIntegration) __premarshalJSON() (*__premarshaluserIntegrationsUserIntegrationsSlackIntegration, error) {
	var retval __premarshaluserIntegrationsUserIntegrationsSlackIntegration

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Type = v.IntegrationDetailSlackIntegration.IntegrationCommonSlackIntegration.Type
	retval.Name = v.IntegrationDetailSlackIntegration.IntegrationCommonSlackIntegration.Name
	retval.Description = v.IntegrationDetailSlackIntegration.IntegrationCommonSlackIntegration.Description
	retval.Image = v.IntegrationDetailSlackIntegration.IntegrationCommonSlackIntegration.Image
	retval.CreatedAt = v.IntegrationDetailSlackIntegration.IntegrationCommonSlackIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationDetailSlackIntegration.IntegrationCommonSlackIntegration.UpdatedAt
	return &retval, nil
}

// userIntegrationsUserIntegrationsSlackWebhookIntegration includes the requested fields of the GraphQL type SlackWebhookIntegration.
type userIntegrationsUserIntegrationsSlackWebhookIntegration struct {
	Typename                                 *string   `json:"__typename"`
	Id                                       uuid.UUID `json:"id"`
	IntegrationDetailSlackWebhookIntegration `json:"-"`
}

// GetTypename returns userIntegrationsUserIntegrationsSlackWebhookIntegration.Typename, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) GetTypename() *string {
	return v.Typename
}

// GetId returns userIntegrationsUserIntegrationsSlackWebhookIntegration.Id, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) GetId() uuid.UUID { return v.Id }

// GetUrl returns userIntegrationsUserIntegrationsSlackWebhookIntegration.Url, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) GetUrl() *string {
	return v.IntegrationDetailSlackWebhookIntegration.Url
}

// GetType returns userIntegrationsUserIntegrationsSlackWebhookIntegration.Type, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) GetType() IntegrationType {
	return v.IntegrationDetailSlackWebhookIntegration.IntegrationCommonSlackWebhookIntegration.Type
}

// GetName returns userIntegrationsUserIntegrationsSlackWebhookIntegration.Name, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) GetName() string {
	return v.IntegrationDetailSlackWebhookIntegration.IntegrationCommonSlackWebhookIntegration.Name
}

// GetDescription returns userIntegrationsUserIntegrationsSlackWebhookIntegration.Description, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) GetDescription() string {
	return v.IntegrationDetailSlackWebhookIntegration.IntegrationCommonSlackWebhookIntegration.Description
}

// GetImage returns userIntegrationsUserIntegrationsSlackWebhookIntegration.Image, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) GetImage() string {
	return v.IntegrationDetailSlackWebhookIntegration.IntegrationCommonSlackWebhookIntegration.Image
}

// GetCreatedAt returns userIntegrationsUserIntegrationsSlackWebhookIntegration.CreatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) GetCreatedAt() time.Time {
	return v.IntegrationDetailSlackWebhookIntegration.IntegrationCommonSlackWebhookIntegration.CreatedAt
}

// GetUpdatedAt returns userIntegrationsUserIntegrationsSlackWebhookIntegration.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) GetUpdatedAt() time.Time {
	return v.IntegrationDetailSlackWebhookIntegration.IntegrationCommonSlackWebhookIntegration.UpdatedAt
}

// GetNotificationSettings returns userIntegrationsUserIntegrationsSlackWebhookIntegration.NotificationSettings, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) GetNotificationSettings() *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings {
	return v.IntegrationDetailSlackWebhookIntegration.NotificationIntegrationCommonSlackWebhookIntegration.NotificationSettings
}

func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userIntegrationsUserIntegrationsSlackWebhookIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.userIntegrationsUserIntegrationsSlackWebhookIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationDetailSlackWebhookIntegration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserIntegrationsUserIntegrationsSlackWebhookIntegration struct {
	Typename *string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Url *string `json:"url"`

	Type IntegrationType `json:"type"`

	Name string `json:"name"`

	Description string `json:"description"`

	Image string `json:"image"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	NotificationSettings *NotificationIntegrationCommonNotificationSettingsNotificationIntegrationSettings `json:"notificationSettings"`
}

func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userIntegrationsUserIntegrationsSlackWebhookIntegration) __premarshalJSON() (*__premarshaluserIntegrationsUserIntegrationsSlackWebhookIntegration, error) {
	var retval __premarshaluserIntegrationsUserIntegrationsSlackWebhookIntegration

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Url = v.IntegrationDetailSlackWebhookIntegration.Url
	retval.Type = v.IntegrationDetailSlackWebhookIntegration.IntegrationCommonSlackWebhookIntegration.Type
	retval.Name = v.IntegrationDetailSlackWebhookIntegration.IntegrationCommonSlackWebhookIntegration.Name
	retval.Description = v.IntegrationDetailSlackWebhookIntegration.IntegrationCommonSlackWebhookIntegration.Description
	retval.Image = v.IntegrationDetailSlackWebhookIntegration.IntegrationCommonSlackWebhookIntegration.Image
	retval.CreatedAt = v.IntegrationDetailSlackWebhookIntegration.IntegrationCommonSlackWebhookIntegration.CreatedAt
	retval.UpdatedAt = v.IntegrationDetailSlackWebhookIntegration.IntegrationCommonSlackWebhookIntegration.UpdatedAt
	retval.NotificationSettings = v.IntegrationDetailSlackWebhookIntegration.NotificationIntegrationCommonSlackWebhookIntegration.NotificationSettings
	return &retval, nil
}

// userIntegrationsUserNotificationIntegrationSettings includes the requested fields of the GraphQL type NotificationIntegrationSettings.
type userIntegrationsUserNotificationIntegrationSettings struct {
	// Enable/Disable build notifications
	Build *bool `json:"build"`
	// Enable/Disable deploy notifications
	Deploy *bool `json:"deploy"`
	// Enable/Disable kubernetes pod crash notifications
	PodCrash *bool `json:"podCrash"`
}

// GetBuild returns userIntegrationsUserNotificationIntegrationSettings.Build, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserNotificationIntegrationSettings) GetBuild() *bool { return v.Build }

// GetDeploy returns userIntegrationsUserNotificationIntegrationSettings.Deploy, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserNotificationIntegrationSettings) GetDeploy() *bool { return v.Deploy }

// GetPodCrash returns userIntegrationsUserNotificationIntegrationSettings.PodCrash, and is useful for accessing the field via an interface.
func (v *userIntegrationsUserNotificationIntegrationSettings) GetPodCrash() *bool { return v.PodCrash }

// userJobCurrentUser includes the requested fields of the GraphQL type User.
type userJobCurrentUser struct {
	JobRun userJobCurrentUserJobRun `json:"jobRun"`
}

// GetJobRun returns userJobCurrentUser.JobRun, and is useful for accessing the field via an interface.
func (v *userJobCurrentUser) GetJobRun() userJobCurrentUserJobRun { return v.JobRun }

// userJobCurrentUserJobRun includes the requested fields of the GraphQL type JobRun.
type userJobCurrentUserJobRun struct {
	Id        uuid.UUID `json:"id"`
	JobCommon `json:"-"`
	Logs      *userJobCurrentUserJobRunLogs `json:"logs"`
}

// GetId returns userJobCurrentUserJobRun.Id, and is useful for accessing the field via an interface.
func (v *userJobCurrentUserJobRun) GetId() uuid.UUID { return v.Id }

// GetLogs returns userJobCurrentUserJobRun.Logs, and is useful for accessing the field via an interface.
func (v *userJobCurrentUserJobRun) GetLogs() *userJobCurrentUserJobRunLogs { return v.Logs }

// GetState returns userJobCurrentUserJobRun.State, and is useful for accessing the field via an interface.
func (v *userJobCurrentUserJobRun) GetState() JobRunState { return v.JobCommon.State }

// GetBuild returns userJobCurrentUserJobRun.Build, and is useful for accessing the field via an interface.
func (v *userJobCurrentUserJobRun) GetBuild() *JobCommonBuild { return v.JobCommon.Build }

// GetCommand returns userJobCurrentUserJobRun.Command, and is useful for accessing the field via an interface.
func (v *userJobCurrentUserJobRun) GetCommand() string { return v.JobCommon.Command }

// GetExitCode returns userJobCurrentUserJobRun.ExitCode, and is useful for accessing the field via an interface.
func (v *userJobCurrentUserJobRun) GetExitCode() *int { return v.JobCommon.ExitCode }

// GetCreatedAt returns userJobCurrentUserJobRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *userJobCurrentUserJobRun) GetCreatedAt() *time.Time { return v.JobCommon.CreatedAt }

func (v *userJobCurrentUserJobRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userJobCurrentUserJobRun
		graphql.NoUnmarshalJSON
	}
	firstPass.userJobCurrentUserJobRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserJobCurrentUserJobRun struct {
	Id uuid.UUID `json:"id"`

	Logs *userJobCurrentUserJobRunLogs `json:"logs"`

	State JobRunState `json:"state"`

	Build *JobCommonBuild `json:"build"`

	Command string `json:"command"`

	ExitCode *int `json:"exitCode"`

	CreatedAt *time.Time `json:"createdAt"`
}

func (v *userJobCurrentUserJobRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userJobCurrentUserJobRun) __premarshalJSON() (*__premarshaluserJobCurrentUserJobRun, error) {
	var retval __premarshaluserJobCurrentUserJobRun

	retval.Id = v.Id
	retval.Logs = v.Logs
	retval.State = v.JobCommon.State
	retval.Build = v.JobCommon.Build
	retval.Command = v.JobCommon.Command
	retval.ExitCode = v.JobCommon.ExitCode
	retval.CreatedAt = v.JobCommon.CreatedAt
	return &retval, nil
}

// userJobCurrentUserJobRunLogs includes the requested fields of the GraphQL type Logs.
type userJobCurrentUserJobRunLogs struct {
	Id        uuid.UUID                                     `json:"id"`
	Completed bool                                          `json:"completed"`
	Expired   bool                                          `json:"expired"`
	Entries   []userJobCurrentUserJobRunLogsEntriesLogEntry `json:"entries"`
}

// GetId returns userJobCurrentUserJobRunLogs.Id, and is useful for accessing the field via an interface.
func (v *userJobCurrentUserJobRunLogs) GetId() uuid.UUID { return v.Id }

// GetCompleted returns userJobCurrentUserJobRunLogs.Completed, and is useful for accessing the field via an interface.
func (v *userJobCurrentUserJobRunLogs) GetCompleted() bool { return v.Completed }

// GetExpired returns userJobCurrentUserJobRunLogs.Expired, and is useful for accessing the field via an interface.
func (v *userJobCurrentUserJobRunLogs) GetExpired() bool { return v.Expired }

// GetEntries returns userJobCurrentUserJobRunLogs.Entries, and is useful for accessing the field via an interface.
func (v *userJobCurrentUserJobRunLogs) GetEntries() []userJobCurrentUserJobRunLogsEntriesLogEntry {
	return v.Entries
}

// userJobCurrentUserJobRunLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type userJobCurrentUserJobRunLogsEntriesLogEntry struct {
	Timestamp *time.Time `json:"timestamp"`
	Text      string     `json:"text"`
}

// GetTimestamp returns userJobCurrentUserJobRunLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *userJobCurrentUserJobRunLogsEntriesLogEntry) GetTimestamp() *time.Time { return v.Timestamp }

// GetText returns userJobCurrentUserJobRunLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *userJobCurrentUserJobRunLogsEntriesLogEntry) GetText() string { return v.Text }

// userJobResponse is returned by userJob on success.
type userJobResponse struct {
	CurrentUser userJobCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userJobResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userJobResponse) GetCurrentUser() userJobCurrentUser { return v.CurrentUser }

// userLinodeAccountsResponse is returned by userLinodeAccounts on success.
type userLinodeAccountsResponse struct {
	User userLinodeAccountsUser `json:"user"`
}

// GetUser returns userLinodeAccountsResponse.User, and is useful for accessing the field via an interface.
func (v *userLinodeAccountsResponse) GetUser() userLinodeAccountsUser { return v.User }

// userLinodeAccountsUser includes the requested fields of the GraphQL type User.
type userLinodeAccountsUser struct {
	Id             uuid.UUID                                           `json:"id"`
	LinodeAccounts []userLinodeAccountsUserLinodeAccountsLinodeAccount `json:"linodeAccounts"`
}

// GetId returns userLinodeAccountsUser.Id, and is useful for accessing the field via an interface.
func (v *userLinodeAccountsUser) GetId() uuid.UUID { return v.Id }

// GetLinodeAccounts returns userLinodeAccountsUser.LinodeAccounts, and is useful for accessing the field via an interface.
func (v *userLinodeAccountsUser) GetLinodeAccounts() []userLinodeAccountsUserLinodeAccountsLinodeAccount {
	return v.LinodeAccounts
}

// userLinodeAccountsUserLinodeAccountsLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type userLinodeAccountsUserLinodeAccountsLinodeAccount struct {
	Id                  uuid.UUID `json:"id"`
	LinodeAccountDetail `json:"-"`
}

// GetId returns userLinodeAccountsUserLinodeAccountsLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *userLinodeAccountsUserLinodeAccountsLinodeAccount) GetId() uuid.UUID { return v.Id }

// GetName returns userLinodeAccountsUserLinodeAccountsLinodeAccount.Name, and is useful for accessing the field via an interface.
func (v *userLinodeAccountsUserLinodeAccountsLinodeAccount) GetName() string {
	return v.LinodeAccountDetail.Name
}

// GetState returns userLinodeAccountsUserLinodeAccountsLinodeAccount.State, and is useful for accessing the field via an interface.
func (v *userLinodeAccountsUserLinodeAccountsLinodeAccount) GetState() CloudAccountState {
	return v.LinodeAccountDetail.State
}

// GetAccessTokenPrefix returns userLinodeAccountsUserLinodeAccountsLinodeAccount.AccessTokenPrefix, and is useful for accessing the field via an interface.
func (v *userLinodeAccountsUserLinodeAccountsLinodeAccount) GetAccessTokenPrefix() *string {
	return v.LinodeAccountDetail.AccessTokenPrefix
}

// GetConnected returns userLinodeAccountsUserLinodeAccountsLinodeAccount.Connected, and is useful for accessing the field via an interface.
func (v *userLinodeAccountsUserLinodeAccountsLinodeAccount) GetConnected() *bool {
	return v.LinodeAccountDetail.Connected
}

func (v *userLinodeAccountsUserLinodeAccountsLinodeAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userLinodeAccountsUserLinodeAccountsLinodeAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.userLinodeAccountsUserLinodeAccountsLinodeAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.LinodeAccountDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserLinodeAccountsUserLinodeAccountsLinodeAccount struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	State CloudAccountState `json:"state"`

	AccessTokenPrefix *string `json:"accessTokenPrefix"`

	Connected *bool `json:"connected"`
}

func (v *userLinodeAccountsUserLinodeAccountsLinodeAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userLinodeAccountsUserLinodeAccountsLinodeAccount) __premarshalJSON() (*__premarshaluserLinodeAccountsUserLinodeAccountsLinodeAccount, error) {
	var retval __premarshaluserLinodeAccountsUserLinodeAccountsLinodeAccount

	retval.Id = v.Id
	retval.Name = v.LinodeAccountDetail.Name
	retval.State = v.LinodeAccountDetail.State
	retval.AccessTokenPrefix = v.LinodeAccountDetail.AccessTokenPrefix
	retval.Connected = v.LinodeAccountDetail.Connected
	return &retval, nil
}

// userPaymentResponse is returned by userPayment on success.
type userPaymentResponse struct {
	User userPaymentUser `json:"user"`
}

// GetUser returns userPaymentResponse.User, and is useful for accessing the field via an interface.
func (v *userPaymentResponse) GetUser() userPaymentUser { return v.User }

// userPaymentUser includes the requested fields of the GraphQL type User.
type userPaymentUser struct {
	Id                 uuid.UUID `json:"id"`
	HasPaymentMethod   *bool     `json:"hasPaymentMethod"`
	NeedsPaymentMethod *bool     `json:"needsPaymentMethod"`
	FreeQuota          *int      `json:"freeQuota"`
	PaymentError       *string   `json:"paymentError"`
}

// GetId returns userPaymentUser.Id, and is useful for accessing the field via an interface.
func (v *userPaymentUser) GetId() uuid.UUID { return v.Id }

// GetHasPaymentMethod returns userPaymentUser.HasPaymentMethod, and is useful for accessing the field via an interface.
func (v *userPaymentUser) GetHasPaymentMethod() *bool { return v.HasPaymentMethod }

// GetNeedsPaymentMethod returns userPaymentUser.NeedsPaymentMethod, and is useful for accessing the field via an interface.
func (v *userPaymentUser) GetNeedsPaymentMethod() *bool { return v.NeedsPaymentMethod }

// GetFreeQuota returns userPaymentUser.FreeQuota, and is useful for accessing the field via an interface.
func (v *userPaymentUser) GetFreeQuota() *int { return v.FreeQuota }

// GetPaymentError returns userPaymentUser.PaymentError, and is useful for accessing the field via an interface.
func (v *userPaymentUser) GetPaymentError() *string { return v.PaymentError }

// userProductCatalogProductCatalog includes the requested fields of the GraphQL type ProductCatalog.
type userProductCatalogProductCatalog struct {
	// Shows all available products in the catalog. When no user is specified, it shows all available products.
	// When a user is specified, the response can be enriched with information from their current subscription (if one exists).
	Products []userProductCatalogProductCatalogProductsProductCatalogSection `json:"products"`
}

// GetProducts returns userProductCatalogProductCatalog.Products, and is useful for accessing the field via an interface.
func (v *userProductCatalogProductCatalog) GetProducts() []userProductCatalogProductCatalogProductsProductCatalogSection {
	return v.Products
}

// userProductCatalogProductCatalogProductsProductCatalogSection includes the requested fields of the GraphQL type ProductCatalogSection.
// The GraphQL type's documentation follows.
//
// A section of the product catalog, showing products of a single type (Plan Tier, Support Tier, etc)
type userProductCatalogProductCatalogProductsProductCatalogSection struct {
	ProductCatalogSectionDetail `json:"-"`
}

// GetSectionName returns userProductCatalogProductCatalogProductsProductCatalogSection.SectionName, and is useful for accessing the field via an interface.
func (v *userProductCatalogProductCatalogProductsProductCatalogSection) GetSectionName() string {
	return v.ProductCatalogSectionDetail.SectionName
}

// GetProductTypeMetadata returns userProductCatalogProductCatalogProductsProductCatalogSection.ProductTypeMetadata, and is useful for accessing the field via an interface.
func (v *userProductCatalogProductCatalogProductsProductCatalogSection) GetProductTypeMetadata() *ProductCatalogSectionDetailProductTypeMetadata {
	return v.ProductCatalogSectionDetail.ProductTypeMetadata
}

// GetAllProducts returns userProductCatalogProductCatalogProductsProductCatalogSection.AllProducts, and is useful for accessing the field via an interface.
func (v *userProductCatalogProductCatalogProductsProductCatalogSection) GetAllProducts() []ProductCatalogSectionDetailAllProductsCatalogProductView {
	return v.ProductCatalogSectionDetail.AllProducts
}

func (v *userProductCatalogProductCatalogProductsProductCatalogSection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userProductCatalogProductCatalogProductsProductCatalogSection
		graphql.NoUnmarshalJSON
	}
	firstPass.userProductCatalogProductCatalogProductsProductCatalogSection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductCatalogSectionDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserProductCatalogProductCatalogProductsProductCatalogSection struct {
	SectionName string `json:"sectionName"`

	ProductTypeMetadata *ProductCatalogSectionDetailProductTypeMetadata `json:"productTypeMetadata"`

	AllProducts []ProductCatalogSectionDetailAllProductsCatalogProductView `json:"allProducts"`
}

func (v *userProductCatalogProductCatalogProductsProductCatalogSection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userProductCatalogProductCatalogProductsProductCatalogSection) __premarshalJSON() (*__premarshaluserProductCatalogProductCatalogProductsProductCatalogSection, error) {
	var retval __premarshaluserProductCatalogProductCatalogProductsProductCatalogSection

	retval.SectionName = v.ProductCatalogSectionDetail.SectionName
	retval.ProductTypeMetadata = v.ProductCatalogSectionDetail.ProductTypeMetadata
	retval.AllProducts = v.ProductCatalogSectionDetail.AllProducts
	return &retval, nil
}

// userProductCatalogResponse is returned by userProductCatalog on success.
type userProductCatalogResponse struct {
	ProductCatalog userProductCatalogProductCatalog `json:"productCatalog"`
}

// GetProductCatalog returns userProductCatalogResponse.ProductCatalog, and is useful for accessing the field via an interface.
func (v *userProductCatalogResponse) GetProductCatalog() userProductCatalogProductCatalog {
	return v.ProductCatalog
}

// userProjectV3DeploymentsResponse is returned by userProjectV3Deployments on success.
type userProjectV3DeploymentsResponse struct {
	User userProjectV3DeploymentsUser `json:"user"`
}

// GetUser returns userProjectV3DeploymentsResponse.User, and is useful for accessing the field via an interface.
func (v *userProjectV3DeploymentsResponse) GetUser() userProjectV3DeploymentsUser { return v.User }

// userProjectV3DeploymentsUser includes the requested fields of the GraphQL type User.
type userProjectV3DeploymentsUser struct {
	ProjectV3Adapters *userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
}

// GetProjectV3Adapters returns userProjectV3DeploymentsUser.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *userProjectV3DeploymentsUser) GetProjectV3Adapters() *userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection struct {
	TotalCount                              int `json:"totalCount"`
	ProjectV3ProductionDeploymentConnection `json:"-"`
	PageInfo                                userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo `json:"pageInfo"`
}

// GetTotalCount returns userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetPageInfo returns userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection) GetPageInfo() userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []ProjectV3ProductionDeploymentConnectionNodesProjectV3Adapter {
	return v.ProjectV3ProductionDeploymentConnection.Nodes
}

func (v *userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3ProductionDeploymentConnection)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection struct {
	TotalCount int `json:"totalCount"`

	PageInfo userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo `json:"pageInfo"`

	Nodes []ProjectV3ProductionDeploymentConnectionNodesProjectV3Adapter `json:"nodes"`
}

func (v *userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection) __premarshalJSON() (*__premarshaluserProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection, error) {
	var retval __premarshaluserProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnection

	retval.TotalCount = v.TotalCount
	retval.PageInfo = v.PageInfo
	retval.Nodes = v.ProjectV3ProductionDeploymentConnection.Nodes
	return &retval, nil
}

// userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetEndCursor returns userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetHasPreviousPage returns userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *userProjectV3DeploymentsUserProjectV3AdaptersProjectV3AdapterConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// userProjectV3Response is returned by userProjectV3 on success.
type userProjectV3Response struct {
	User userProjectV3User `json:"user"`
}

// GetUser returns userProjectV3Response.User, and is useful for accessing the field via an interface.
func (v *userProjectV3Response) GetUser() userProjectV3User { return v.User }

// userProjectV3User includes the requested fields of the GraphQL type User.
type userProjectV3User struct {
	Id                uuid.UUID                                                     `json:"id"`
	ProjectV3Adapters *userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection `json:"projectV3Adapters"`
}

// GetId returns userProjectV3User.Id, and is useful for accessing the field via an interface.
func (v *userProjectV3User) GetId() uuid.UUID { return v.Id }

// GetProjectV3Adapters returns userProjectV3User.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *userProjectV3User) GetProjectV3Adapters() *userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection struct {
	TotalCount                  int `json:"totalCount"`
	ProjectV3ListItemConnection `json:"-"`
	PageInfo                    userProjectV3UserProjectV3AdaptersProjectV3AdapterConnectionPageInfo `json:"pageInfo"`
}

// GetTotalCount returns userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetPageInfo returns userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection) GetPageInfo() userProjectV3UserProjectV3AdaptersProjectV3AdapterConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection) GetNodes() []ProjectV3ListItemConnectionNodesProjectV3Adapter {
	return v.ProjectV3ListItemConnection.Nodes
}

func (v *userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3ListItemConnection)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserProjectV3UserProjectV3AdaptersProjectV3AdapterConnection struct {
	TotalCount int `json:"totalCount"`

	PageInfo userProjectV3UserProjectV3AdaptersProjectV3AdapterConnectionPageInfo `json:"pageInfo"`

	Nodes []ProjectV3ListItemConnectionNodesProjectV3Adapter `json:"nodes"`
}

func (v *userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userProjectV3UserProjectV3AdaptersProjectV3AdapterConnection) __premarshalJSON() (*__premarshaluserProjectV3UserProjectV3AdaptersProjectV3AdapterConnection, error) {
	var retval __premarshaluserProjectV3UserProjectV3AdaptersProjectV3AdapterConnection

	retval.TotalCount = v.TotalCount
	retval.PageInfo = v.PageInfo
	retval.Nodes = v.ProjectV3ListItemConnection.Nodes
	return &retval, nil
}

// userProjectV3UserProjectV3AdaptersProjectV3AdapterConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type userProjectV3UserProjectV3AdaptersProjectV3AdapterConnectionPageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns userProjectV3UserProjectV3AdaptersProjectV3AdapterConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *userProjectV3UserProjectV3AdaptersProjectV3AdapterConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetEndCursor returns userProjectV3UserProjectV3AdaptersProjectV3AdapterConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *userProjectV3UserProjectV3AdaptersProjectV3AdapterConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns userProjectV3UserProjectV3AdaptersProjectV3AdapterConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *userProjectV3UserProjectV3AdaptersProjectV3AdapterConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetHasPreviousPage returns userProjectV3UserProjectV3AdaptersProjectV3AdapterConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *userProjectV3UserProjectV3AdaptersProjectV3AdapterConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// userProjectsProductionDeploymentsResponse is returned by userProjectsProductionDeployments on success.
type userProjectsProductionDeploymentsResponse struct {
	User userProjectsProductionDeploymentsUser `json:"user"`
}

// GetUser returns userProjectsProductionDeploymentsResponse.User, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsResponse) GetUser() userProjectsProductionDeploymentsUser {
	return v.User
}

// userProjectsProductionDeploymentsUser includes the requested fields of the GraphQL type User.
type userProjectsProductionDeploymentsUser struct {
	Id       uuid.UUID                                                      `json:"id"`
	Projects userProjectsProductionDeploymentsUserProjectsProjectConnection `json:"projects"`
}

// GetId returns userProjectsProductionDeploymentsUser.Id, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUser) GetId() uuid.UUID { return v.Id }

// GetProjects returns userProjectsProductionDeploymentsUser.Projects, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUser) GetProjects() userProjectsProductionDeploymentsUserProjectsProjectConnection {
	return v.Projects
}

// userProjectsProductionDeploymentsUserProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type userProjectsProductionDeploymentsUserProjectsProjectConnection struct {
	Nodes []userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetNodes returns userProjectsProductionDeploymentsUserProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnection) GetNodes() []userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProject struct {
	// - v0.ProjectID or v1.GroupID
	Id   uuid.UUID                                                                       `json:"id"`
	Repo *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepo `json:"repo"`
}

// GetId returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProject) GetId() uuid.UUID {
	return v.Id
}

// GetRepo returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProject.Repo, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProject) GetRepo() *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepo {
	return v.Repo
}

// userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepo includes the requested fields of the GraphQL type Repo.
type userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepo struct {
	// - v0.RepoID
	Id                   uuid.UUID                                                                                           `json:"id"`
	ProductionDeployment *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment `json:"productionDeployment"`
}

// GetId returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepo.Id, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepo) GetId() uuid.UUID {
	return v.Id
}

// GetProductionDeployment returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepo) GetProductionDeployment() *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment {
	return v.ProductionDeployment
}

// userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment includes the requested fields of the GraphQL type Deployment.
type userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment struct {
	Id               uuid.UUID `json:"id"`
	DeploymentCommon `json:"-"`
}

// GetId returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment.Id, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) GetId() uuid.UUID {
	return v.Id
}

// GetDescription returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment.Description, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) GetDescription() *string {
	return v.DeploymentCommon.Description
}

// GetVersion returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment.Version, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) GetVersion() string {
	return v.DeploymentCommon.Version
}

// GetStatus returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment.Status, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) GetStatus() DeploymentStatus {
	return v.DeploymentCommon.Status
}

// GetBranch returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment.Branch, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) GetBranch() *string {
	return v.DeploymentCommon.Branch
}

// GetEndpoints returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) GetEndpoints() []string {
	return v.DeploymentCommon.Endpoints
}

// GetPrivateEndpoint returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) GetPrivateEndpoint() *string {
	return v.DeploymentCommon.PrivateEndpoint
}

// GetErrorMessage returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment.ErrorMessage, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) GetErrorMessage() *string {
	return v.DeploymentCommon.ErrorMessage
}

// GetDeployStatus returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment.DeployStatus, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) GetDeployStatus() *DeploymentCommonDeployStatus {
	return v.DeploymentCommon.DeployStatus
}

// GetBuild returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment.Build, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) GetBuild() *DeploymentCommonBuild {
	return v.DeploymentCommon.Build
}

// GetAlternativeImages returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment.AlternativeImages, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) GetAlternativeImages() []DeploymentCommonAlternativeImagesAlternativeImage {
	return v.DeploymentCommon.AlternativeImages
}

// GetUpdatedAt returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) GetUpdatedAt() time.Time {
	return v.DeploymentCommon.UpdatedAt
}

// GetCreatedAt returns userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment.CreatedAt, and is useful for accessing the field via an interface.
func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) GetCreatedAt() time.Time {
	return v.DeploymentCommon.CreatedAt
}

func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment
		graphql.NoUnmarshalJSON
	}
	firstPass.userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment struct {
	Id uuid.UUID `json:"id"`

	Description *string `json:"description"`

	Version string `json:"version"`

	Status DeploymentStatus `json:"status"`

	Branch *string `json:"branch"`

	Endpoints []string `json:"endpoints"`

	PrivateEndpoint *string `json:"privateEndpoint"`

	ErrorMessage *string `json:"errorMessage"`

	DeployStatus *DeploymentCommonDeployStatus `json:"deployStatus"`

	Build *DeploymentCommonBuild `json:"build"`

	AlternativeImages []DeploymentCommonAlternativeImagesAlternativeImage `json:"alternativeImages"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment) __premarshalJSON() (*__premarshaluserProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment, error) {
	var retval __premarshaluserProjectsProductionDeploymentsUserProjectsProjectConnectionNodesProjectRepoProductionDeployment

	retval.Id = v.Id
	retval.Description = v.DeploymentCommon.Description
	retval.Version = v.DeploymentCommon.Version
	retval.Status = v.DeploymentCommon.Status
	retval.Branch = v.DeploymentCommon.Branch
	retval.Endpoints = v.DeploymentCommon.Endpoints
	retval.PrivateEndpoint = v.DeploymentCommon.PrivateEndpoint
	retval.ErrorMessage = v.DeploymentCommon.ErrorMessage
	retval.DeployStatus = v.DeploymentCommon.DeployStatus
	retval.Build = v.DeploymentCommon.Build
	retval.AlternativeImages = v.DeploymentCommon.AlternativeImages
	retval.UpdatedAt = v.DeploymentCommon.UpdatedAt
	retval.CreatedAt = v.DeploymentCommon.CreatedAt
	return &retval, nil
}

// userRepoBranchesV2CurrentUser includes the requested fields of the GraphQL type User.
type userRepoBranchesV2CurrentUser struct {
	Id   uuid.UUID                          `json:"id"`
	Repo *userRepoBranchesV2CurrentUserRepo `json:"repo"`
}

// GetId returns userRepoBranchesV2CurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2CurrentUser) GetId() uuid.UUID { return v.Id }

// GetRepo returns userRepoBranchesV2CurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2CurrentUser) GetRepo() *userRepoBranchesV2CurrentUserRepo { return v.Repo }

// userRepoBranchesV2CurrentUserRepo includes the requested fields of the GraphQL type Repo.
type userRepoBranchesV2CurrentUserRepo struct {
	// - v0.RepoID
	Id                 uuid.UUID                                                        `json:"id"`
	ProductionBranchV2 *userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2 `json:"productionBranchV2"`
	Branch             *userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2             `json:"branch"`
}

// GetId returns userRepoBranchesV2CurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2CurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetProductionBranchV2 returns userRepoBranchesV2CurrentUserRepo.ProductionBranchV2, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2CurrentUserRepo) GetProductionBranchV2() *userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2 {
	return v.ProductionBranchV2
}

// GetBranch returns userRepoBranchesV2CurrentUserRepo.Branch, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2CurrentUserRepo) GetBranch() *userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2 {
	return v.Branch
}

// userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2 includes the requested fields of the GraphQL type RepoBranchV2.
type userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2 struct {
	Id          uuid.UUID                                                                           `json:"id"`
	Deployments *userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection `json:"deployments"`
}

// GetId returns userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2.Id, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2) GetId() uuid.UUID { return v.Id }

// GetDeployments returns userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2.Deployments, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2) GetDeployments() *userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection {
	return v.Deployments
}

// userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection includes the requested fields of the GraphQL type DeploymentConnection.
type userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection struct {
	RepoBranchDeployments `json:"-"`
}

// GetPageInfo returns userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection) GetPageInfo() RepoBranchDeploymentsPageInfo {
	return v.RepoBranchDeployments.PageInfo
}

// GetNodes returns userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection.Nodes, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection) GetNodes() []RepoBranchDeploymentsNodesDeployment {
	return v.RepoBranchDeployments.Nodes
}

func (v *userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoBranchDeployments)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection struct {
	PageInfo RepoBranchDeploymentsPageInfo `json:"pageInfo"`

	Nodes []RepoBranchDeploymentsNodesDeployment `json:"nodes"`
}

func (v *userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection) __premarshalJSON() (*__premarshaluserRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection, error) {
	var retval __premarshaluserRepoBranchesV2CurrentUserRepoBranchRepoBranchV2DeploymentsDeploymentConnection

	retval.PageInfo = v.RepoBranchDeployments.PageInfo
	retval.Nodes = v.RepoBranchDeployments.Nodes
	return &retval, nil
}

// userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2 includes the requested fields of the GraphQL type RepoBranchV2.
type userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2 struct {
	Id          uuid.UUID                                                                                       `json:"id"`
	Deployments *userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection `json:"deployments"`
}

// GetId returns userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2.Id, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2) GetId() uuid.UUID {
	return v.Id
}

// GetDeployments returns userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2.Deployments, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2) GetDeployments() *userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection {
	return v.Deployments
}

// userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection includes the requested fields of the GraphQL type DeploymentConnection.
type userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection struct {
	RepoBranchDeployments `json:"-"`
}

// GetPageInfo returns userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection) GetPageInfo() RepoBranchDeploymentsPageInfo {
	return v.RepoBranchDeployments.PageInfo
}

// GetNodes returns userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection.Nodes, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection) GetNodes() []RepoBranchDeploymentsNodesDeployment {
	return v.RepoBranchDeployments.Nodes
}

func (v *userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection
		graphql.NoUnmarshalJSON
	}
	firstPass.userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoBranchDeployments)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection struct {
	PageInfo RepoBranchDeploymentsPageInfo `json:"pageInfo"`

	Nodes []RepoBranchDeploymentsNodesDeployment `json:"nodes"`
}

func (v *userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection) __premarshalJSON() (*__premarshaluserRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection, error) {
	var retval __premarshaluserRepoBranchesV2CurrentUserRepoProductionBranchV2RepoBranchV2DeploymentsDeploymentConnection

	retval.PageInfo = v.RepoBranchDeployments.PageInfo
	retval.Nodes = v.RepoBranchDeployments.Nodes
	return &retval, nil
}

// userRepoBranchesV2Response is returned by userRepoBranchesV2 on success.
type userRepoBranchesV2Response struct {
	CurrentUser userRepoBranchesV2CurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userRepoBranchesV2Response.CurrentUser, and is useful for accessing the field via an interface.
func (v *userRepoBranchesV2Response) GetCurrentUser() userRepoBranchesV2CurrentUser {
	return v.CurrentUser
}

// userRepoCloudOnboardByPathProject includes the requested fields of the GraphQL type Project.
type userRepoCloudOnboardByPathProject struct {
	// - v0.ProjectID or v1.GroupID
	Id   uuid.UUID                              `json:"id"`
	Repo *userRepoCloudOnboardByPathProjectRepo `json:"repo"`
}

// GetId returns userRepoCloudOnboardByPathProject.Id, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProject) GetId() uuid.UUID { return v.Id }

// GetRepo returns userRepoCloudOnboardByPathProject.Repo, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProject) GetRepo() *userRepoCloudOnboardByPathProjectRepo {
	return v.Repo
}

// userRepoCloudOnboardByPathProjectRepo includes the requested fields of the GraphQL type Repo.
type userRepoCloudOnboardByPathProjectRepo struct {
	// - v0.RepoID
	Id         uuid.UUID `json:"id"`
	RepoDeploy `json:"-"`
}

// GetId returns userRepoCloudOnboardByPathProjectRepo.Id, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetId() uuid.UUID { return v.Id }

// GetCanDeploy returns userRepoCloudOnboardByPathProjectRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetCanDeploy() *bool { return v.RepoDeploy.CanDeploy }

// GetDeployTarget returns userRepoCloudOnboardByPathProjectRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetDeployTarget() *DeployTarget {
	return v.RepoDeploy.DeployTarget
}

// GetPath returns userRepoCloudOnboardByPathProjectRepo.Path, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetPath() string { return v.RepoDeploy.RepoCommon.Path }

// GetName returns userRepoCloudOnboardByPathProjectRepo.Name, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetName() string { return v.RepoDeploy.RepoCommon.Name }

// GetEnabled returns userRepoCloudOnboardByPathProjectRepo.Enabled, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetEnabled() bool {
	return v.RepoDeploy.RepoCommon.Enabled
}

// GetSource returns userRepoCloudOnboardByPathProjectRepo.Source, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDeploy.RepoCommon.Source
}

// GetDeployType returns userRepoCloudOnboardByPathProjectRepo.DeployType, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetDeployType() *DeployType {
	return v.RepoDeploy.RepoCommon.DeployType
}

// GetDeployService returns userRepoCloudOnboardByPathProjectRepo.DeployService, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetDeployService() *bool {
	return v.RepoDeploy.RepoCommon.DeployService
}

// GetDeployJob returns userRepoCloudOnboardByPathProjectRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetDeployJob() *bool {
	return v.RepoDeploy.RepoCommon.DeployJob
}

// GetAwsAccount returns userRepoCloudOnboardByPathProjectRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoDeploy.RepoCommon.AwsAccount
}

// GetGcpAccount returns userRepoCloudOnboardByPathProjectRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoDeploy.RepoCommon.GcpAccount
}

// GetImage returns userRepoCloudOnboardByPathProjectRepo.Image, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetImage() *string {
	return v.RepoDeploy.RepoCommon.Image
}

// GetCpu returns userRepoCloudOnboardByPathProjectRepo.Cpu, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetCpu() *string { return v.RepoDeploy.RepoCommon.Cpu }

// GetMemory returns userRepoCloudOnboardByPathProjectRepo.Memory, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetMemory() *string {
	return v.RepoDeploy.RepoCommon.Memory
}

// GetGpu returns userRepoCloudOnboardByPathProjectRepo.Gpu, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoDeploy.RepoCommon.Gpu
}

// GetTpu returns userRepoCloudOnboardByPathProjectRepo.Tpu, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoDeploy.RepoCommon.Tpu
}

// GetUpdatedAt returns userRepoCloudOnboardByPathProjectRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetUpdatedAt() time.Time {
	return v.RepoDeploy.RepoCommon.UpdatedAt
}

// GetDisableReason returns userRepoCloudOnboardByPathProjectRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetDisableReason() *DisableReason {
	return v.RepoDeploy.RepoCommon.DisableReason
}

// GetCluster returns userRepoCloudOnboardByPathProjectRepo.Cluster, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetCluster() *RepoCommonCluster {
	return v.RepoDeploy.RepoCommon.Cluster
}

// GetDatabaseProvider returns userRepoCloudOnboardByPathProjectRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDeploy.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns userRepoCloudOnboardByPathProjectRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDeploy.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns userRepoCloudOnboardByPathProjectRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoDeploy.RepoCommon.Autoscaling
}

// GetOwner returns userRepoCloudOnboardByPathProjectRepo.Owner, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDeploy.RepoCommon.Owner
}

// GetProject returns userRepoCloudOnboardByPathProjectRepo.Project, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetProject() *RepoCommonProject {
	return v.RepoDeploy.RepoCommon.Project
}

// GetProjectEnvironment returns userRepoCloudOnboardByPathProjectRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathProjectRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoDeploy.RepoCommon.ProjectEnvironment
}

func (v *userRepoCloudOnboardByPathProjectRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userRepoCloudOnboardByPathProjectRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.userRepoCloudOnboardByPathProjectRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDeploy)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserRepoCloudOnboardByPathProjectRepo struct {
	Id uuid.UUID `json:"id"`

	CanDeploy *bool `json:"canDeploy"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *userRepoCloudOnboardByPathProjectRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userRepoCloudOnboardByPathProjectRepo) __premarshalJSON() (*__premarshaluserRepoCloudOnboardByPathProjectRepo, error) {
	var retval __premarshaluserRepoCloudOnboardByPathProjectRepo

	retval.Id = v.Id
	retval.CanDeploy = v.RepoDeploy.CanDeploy
	retval.DeployTarget = v.RepoDeploy.DeployTarget
	retval.Path = v.RepoDeploy.RepoCommon.Path
	retval.Name = v.RepoDeploy.RepoCommon.Name
	retval.Enabled = v.RepoDeploy.RepoCommon.Enabled
	retval.Source = v.RepoDeploy.RepoCommon.Source
	retval.DeployType = v.RepoDeploy.RepoCommon.DeployType
	retval.DeployService = v.RepoDeploy.RepoCommon.DeployService
	retval.DeployJob = v.RepoDeploy.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoDeploy.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoDeploy.RepoCommon.GcpAccount
	retval.Image = v.RepoDeploy.RepoCommon.Image
	retval.Cpu = v.RepoDeploy.RepoCommon.Cpu
	retval.Memory = v.RepoDeploy.RepoCommon.Memory
	retval.Gpu = v.RepoDeploy.RepoCommon.Gpu
	retval.Tpu = v.RepoDeploy.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoDeploy.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDeploy.RepoCommon.DisableReason
	retval.Cluster = v.RepoDeploy.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoDeploy.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoDeploy.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoDeploy.RepoCommon.Autoscaling
	retval.Owner = v.RepoDeploy.RepoCommon.Owner
	retval.Project = v.RepoDeploy.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoDeploy.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// userRepoCloudOnboardByPathResponse is returned by userRepoCloudOnboardByPath on success.
type userRepoCloudOnboardByPathResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project *userRepoCloudOnboardByPathProject `json:"project"`
}

// GetProject returns userRepoCloudOnboardByPathResponse.Project, and is useful for accessing the field via an interface.
func (v *userRepoCloudOnboardByPathResponse) GetProject() *userRepoCloudOnboardByPathProject {
	return v.Project
}

// userRepoCurrentUser includes the requested fields of the GraphQL type User.
type userRepoCurrentUser struct {
	Id   uuid.UUID                `json:"id"`
	Repo *userRepoCurrentUserRepo `json:"repo"`
}

// GetId returns userRepoCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUser) GetId() uuid.UUID { return v.Id }

// GetRepo returns userRepoCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUser) GetRepo() *userRepoCurrentUserRepo { return v.Repo }

// userRepoCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type userRepoCurrentUserRepo struct {
	// - v0.RepoID
	Id         uuid.UUID `json:"id"`
	RepoDetail `json:"-"`
}

// GetId returns userRepoCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetSecretMounts returns userRepoCurrentUserRepo.SecretMounts, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetSecretMounts() []RepoDetailSecretMountsKubernetesSecretMount {
	return v.RepoDetail.SecretMounts
}

// GetKubernetesCustomization returns userRepoCurrentUserRepo.KubernetesCustomization, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetKubernetesCustomization() *RepoDetailKubernetesCustomization {
	return v.RepoDetail.KubernetesCustomization
}

// GetManifest returns userRepoCurrentUserRepo.Manifest, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetManifest() *RepoDetailManifest { return v.RepoDetail.Manifest }

// GetAppID returns userRepoCurrentUserRepo.AppID, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetAppID() *string { return v.RepoDetail.AppID }

// GetDefaultIngressDomain returns userRepoCurrentUserRepo.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDefaultIngressDomain() *string {
	return v.RepoDetail.DefaultIngressDomain
}

// GetKappID returns userRepoCurrentUserRepo.KappID, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetKappID() *string { return v.RepoDetail.KappID }

// GetUseHumanReadableKubernetesName returns userRepoCurrentUserRepo.UseHumanReadableKubernetesName, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetUseHumanReadableKubernetesName() *bool {
	return v.RepoDetail.UseHumanReadableKubernetesName
}

// GetProject returns userRepoCurrentUserRepo.Project, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetProject() *RepoDetailProject { return v.RepoDetail.Project }

// GetProductionDeployment returns userRepoCurrentUserRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetProductionDeployment() *RepoDetailProductionDeployment {
	return v.RepoDetail.ProductionDeployment
}

// GetNamespace returns userRepoCurrentUserRepo.Namespace, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetNamespace() *string { return v.RepoDetail.Namespace }

// GetEnvs returns userRepoCurrentUserRepo.Envs, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetEnvs() []RepoDetailEnvsEnvVar { return v.RepoDetail.Envs }

// GetCollaborators returns userRepoCurrentUserRepo.Collaborators, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetCollaborators() []RepoDetailCollaboratorsProjectCollaborator {
	return v.RepoDetail.Collaborators
}

// GetVolumes returns userRepoCurrentUserRepo.Volumes, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetVolumes() []RepoDetailVolumesVolumeSpec {
	return v.RepoDetail.Volumes
}

// GetReplication returns userRepoCurrentUserRepo.Replication, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetReplication() []RepoDetailReplication {
	return v.RepoDetail.Replication
}

// GetDeployTarget returns userRepoCurrentUserRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDeployTarget() *DeployTarget { return v.RepoDetail.DeployTarget }

// GetCluster returns userRepoCurrentUserRepo.Cluster, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetCluster() *RepoDetailCluster { return v.RepoDetail.Cluster }

// GetAwsAccount returns userRepoCurrentUserRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetAwsAccount() *RepoDetailAwsAccountAWSAccount {
	return v.RepoDetail.AwsAccount
}

// GetGcpAccount returns userRepoCurrentUserRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetGcpAccount() *RepoDetailGcpAccountGCPAccount {
	return v.RepoDetail.GcpAccount
}

// GetLogShipper returns userRepoCurrentUserRepo.LogShipper, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetLogShipper() *RepoDetailLogShipper {
	return v.RepoDetail.LogShipper
}

// GetReadinessProbe returns userRepoCurrentUserRepo.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetReadinessProbe() *RepoDetailReadinessProbe {
	return v.RepoDetail.ReadinessProbe
}

// GetLivenessProbe returns userRepoCurrentUserRepo.LivenessProbe, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetLivenessProbe() *RepoDetailLivenessProbe {
	return v.RepoDetail.LivenessProbe
}

// GetStartupProbe returns userRepoCurrentUserRepo.StartupProbe, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetStartupProbe() *RepoDetailStartupProbe {
	return v.RepoDetail.StartupProbe
}

// GetManualDeploy returns userRepoCurrentUserRepo.ManualDeploy, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetManualDeploy() *bool { return v.RepoDetail.ManualDeploy }

// GetDeployStrategy returns userRepoCurrentUserRepo.DeployStrategy, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDeployStrategy() *DeployStrategy {
	return v.RepoDetail.DeployStrategy
}

// GetFree returns userRepoCurrentUserRepo.Free, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetFree() *bool { return v.RepoDetail.Free }

// GetCpu returns userRepoCurrentUserRepo.Cpu, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetCpu() *string { return v.RepoDetail.Cpu }

// GetMemory returns userRepoCurrentUserRepo.Memory, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetMemory() *string { return v.RepoDetail.Memory }

// GetGpu returns userRepoCurrentUserRepo.Gpu, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetGpu() *RepoDetailGpuGPUSpec { return v.RepoDetail.Gpu }

// GetTpu returns userRepoCurrentUserRepo.Tpu, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetTpu() *RepoDetailTpuTPUSpec { return v.RepoDetail.Tpu }

// GetEphemeralStorage returns userRepoCurrentUserRepo.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetEphemeralStorage() *float64 {
	return v.RepoDetail.EphemeralStorage
}

// GetDedicated returns userRepoCurrentUserRepo.Dedicated, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDedicated() *bool { return v.RepoDetail.Dedicated }

// GetGithubIntegration returns userRepoCurrentUserRepo.GithubIntegration, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetGithubIntegration() *RepoDetailGithubIntegrationGitHubRepoIntegration {
	return v.RepoDetail.GithubIntegration
}

// GetGitlabIntegration returns userRepoCurrentUserRepo.GitlabIntegration, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetGitlabIntegration() *RepoDetailGitlabIntegrationGitlabRepoIntegration {
	return v.RepoDetail.GitlabIntegration
}

// GetProductionBranch returns userRepoCurrentUserRepo.ProductionBranch, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetProductionBranch() *string { return v.RepoDetail.ProductionBranch }

// GetBranchResources returns userRepoCurrentUserRepo.BranchResources, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetBranchResources() *RepoDetailBranchResourcesContainerResourcesSpec {
	return v.RepoDetail.BranchResources
}

// GetServerlessResources returns userRepoCurrentUserRepo.ServerlessResources, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetServerlessResources() *RepoDetailServerlessResourcesServerlessResourceSpec {
	return v.RepoDetail.ServerlessResources
}

// GetServerlessRegion returns userRepoCurrentUserRepo.ServerlessRegion, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetServerlessRegion() *string { return v.RepoDetail.ServerlessRegion }

// GetPrometheusScrape returns userRepoCurrentUserRepo.PrometheusScrape, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetPrometheusScrape() *RepoDetailPrometheusScrape {
	return v.RepoDetail.PrometheusScrape
}

// GetHelmValues returns userRepoCurrentUserRepo.HelmValues, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetHelmValues() *string { return v.RepoDetail.HelmValues }

// GetTerraformVersion returns userRepoCurrentUserRepo.TerraformVersion, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetTerraformVersion() *string { return v.RepoDetail.TerraformVersion }

// GetTerraformVariables returns userRepoCurrentUserRepo.TerraformVariables, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetTerraformVariables() *string {
	return v.RepoDetail.TerraformVariables
}

// GetJobRuns returns userRepoCurrentUserRepo.JobRuns, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetJobRuns() *RepoDetailJobRunsJobRunConnection {
	return v.RepoDetail.JobRuns
}

// GetDeployService returns userRepoCurrentUserRepo.DeployService, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDeployService() *bool { return v.RepoDetail.DeployService }

// GetDeployJob returns userRepoCurrentUserRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDeployJob() *bool { return v.RepoDetail.DeployJob }

// GetPreStopSleep returns userRepoCurrentUserRepo.PreStopSleep, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetPreStopSleep() *int { return v.RepoDetail.PreStopSleep }

// GetTerminationGracePeriodSeconds returns userRepoCurrentUserRepo.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetTerminationGracePeriodSeconds() *int {
	return v.RepoDetail.TerminationGracePeriodSeconds
}

// GetAutoscaling returns userRepoCurrentUserRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetAutoscaling() *RepoDetailAutoscaling {
	return v.RepoDetail.Autoscaling
}

// GetContainerRegistry returns userRepoCurrentUserRepo.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetContainerRegistry() *RepoDetailContainerRegistry {
	return v.RepoDetail.ContainerRegistry
}

// GetDatabaseProvider returns userRepoCurrentUserRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoDetail.DatabaseProvider
}

// GetDatabaseEngine returns userRepoCurrentUserRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoDetail.DatabaseEngine
}

// GetDatabaseVersion returns userRepoCurrentUserRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDatabaseVersion() *string { return v.RepoDetail.DatabaseVersion }

// GetDatabaseEnvs returns userRepoCurrentUserRepo.DatabaseEnvs, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDatabaseEnvs() []RepoDetailDatabaseEnvsEnvVar {
	return v.RepoDetail.DatabaseEnvs
}

// GetDatabaseLinks returns userRepoCurrentUserRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDatabaseLinks() []RepoDetailDatabaseLinksDatabaseLink {
	return v.RepoDetail.DatabaseLinks
}

// GetLinkedProjects returns userRepoCurrentUserRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetLinkedProjects() []RepoDetailLinkedProjectsDatabaseLink {
	return v.RepoDetail.LinkedProjects
}

// GetAutoRetry returns userRepoCurrentUserRepo.AutoRetry, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetAutoRetry() *bool { return v.RepoDetail.AutoRetry }

// GetAutoRollback returns userRepoCurrentUserRepo.AutoRollback, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetAutoRollback() *bool { return v.RepoDetail.AutoRollback }

// GetCanDeploy returns userRepoCurrentUserRepo.CanDeploy, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetCanDeploy() *bool { return v.RepoDetail.CanDeploy }

// GetPipelineCluster returns userRepoCurrentUserRepo.PipelineCluster, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetPipelineCluster() *RepoDetailPipelineCluster {
	return v.RepoDetail.PipelineCluster
}

// GetAwsIamRole returns userRepoCurrentUserRepo.AwsIamRole, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetAwsIamRole() *string { return v.RepoDetail.AwsIamRole }

// GetGcpServiceAccount returns userRepoCurrentUserRepo.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetGcpServiceAccount() *string {
	return v.RepoDetail.GcpServiceAccount
}

// GetDatadogApmEnabled returns userRepoCurrentUserRepo.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDatadogApmEnabled() *bool { return v.RepoDetail.DatadogApmEnabled }

// GetProjectEnvironment returns userRepoCurrentUserRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetProjectEnvironment() *RepoDetailProjectEnvironment {
	return v.RepoDetail.ProjectEnvironment
}

// GetPipelineLinks returns userRepoCurrentUserRepo.PipelineLinks, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetPipelineLinks() []RepoDetailPipelineLinksRepoPipelineLink {
	return v.RepoDetail.PipelineLinks
}

// GetDeployTimeoutSeconds returns userRepoCurrentUserRepo.DeployTimeoutSeconds, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDeployTimeoutSeconds() *int {
	return v.RepoDetail.DeployTimeoutSeconds
}

// GetPath returns userRepoCurrentUserRepo.Path, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetPath() string { return v.RepoDetail.RepoCommon.Path }

// GetName returns userRepoCurrentUserRepo.Name, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetName() string { return v.RepoDetail.RepoCommon.Name }

// GetEnabled returns userRepoCurrentUserRepo.Enabled, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetEnabled() bool { return v.RepoDetail.RepoCommon.Enabled }

// GetSource returns userRepoCurrentUserRepo.Source, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoDetail.RepoCommon.Source
}

// GetDeployType returns userRepoCurrentUserRepo.DeployType, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDeployType() *DeployType {
	return v.RepoDetail.RepoCommon.DeployType
}

// GetImage returns userRepoCurrentUserRepo.Image, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetImage() *string { return v.RepoDetail.RepoCommon.Image }

// GetUpdatedAt returns userRepoCurrentUserRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetUpdatedAt() time.Time { return v.RepoDetail.RepoCommon.UpdatedAt }

// GetDisableReason returns userRepoCurrentUserRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetDisableReason() *DisableReason {
	return v.RepoDetail.RepoCommon.DisableReason
}

// GetOwner returns userRepoCurrentUserRepo.Owner, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoDetail.RepoCommon.Owner
}

// GetClusterDomains returns userRepoCurrentUserRepo.ClusterDomains, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetClusterDomains() []RepoNetworkClusterDomains {
	return v.RepoDetail.RepoNetwork.ClusterDomains
}

// GetCdns returns userRepoCurrentUserRepo.Cdns, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetCdns() []RepoNetworkCdnsCDN {
	return v.RepoDetail.RepoNetwork.Cdns
}

// GetPorts returns userRepoCurrentUserRepo.Ports, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetPorts() []RepoNetworkPortsPort {
	return v.RepoDetail.RepoNetwork.Ports
}

// GetHostNetwork returns userRepoCurrentUserRepo.HostNetwork, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetHostNetwork() *bool { return v.RepoDetail.RepoNetwork.HostNetwork }

// GetStaticIP returns userRepoCurrentUserRepo.StaticIP, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetStaticIP() *bool { return v.RepoDetail.RepoNetwork.StaticIP }

// GetBuildMethod returns userRepoCurrentUserRepo.BuildMethod, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetBuildMethod() *RepoBuildBuildMethod {
	return v.RepoDetail.RepoBuild.BuildMethod
}

// GetBuildResources returns userRepoCurrentUserRepo.BuildResources, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetBuildResources() *RepoBuildBuildResourcesContainerResourcesSpec {
	return v.RepoDetail.RepoBuild.BuildResources
}

// GetBuildSpec returns userRepoCurrentUserRepo.BuildSpec, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetBuildSpec() *RepoBuildBuildSpecContainerSpec {
	return v.RepoDetail.RepoBuild.BuildSpec
}

// GetNoBuildCache returns userRepoCurrentUserRepo.NoBuildCache, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetNoBuildCache() *bool { return v.RepoDetail.RepoBuild.NoBuildCache }

// GetGitSubmodules returns userRepoCurrentUserRepo.GitSubmodules, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetGitSubmodules() *GitSubmodulesType {
	return v.RepoDetail.RepoBuild.GitSubmodules
}

// GetKanikoFlags returns userRepoCurrentUserRepo.KanikoFlags, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetKanikoFlags() *RepoBuildKanikoFlags {
	return v.RepoDetail.RepoBuild.KanikoFlags
}

// GetAlternativeImageTagTemplates returns userRepoCurrentUserRepo.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *userRepoCurrentUserRepo) GetAlternativeImageTagTemplates() []string {
	return v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
}

func (v *userRepoCurrentUserRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userRepoCurrentUserRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.userRepoCurrentUserRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserRepoCurrentUserRepo struct {
	Id uuid.UUID `json:"id"`

	SecretMounts []RepoDetailSecretMountsKubernetesSecretMount `json:"secretMounts"`

	KubernetesCustomization *RepoDetailKubernetesCustomization `json:"kubernetesCustomization"`

	Manifest *RepoDetailManifest `json:"manifest"`

	AppID *string `json:"appID"`

	DefaultIngressDomain *string `json:"defaultIngressDomain"`

	KappID *string `json:"kappID"`

	UseHumanReadableKubernetesName *bool `json:"useHumanReadableKubernetesName"`

	Project *RepoDetailProject `json:"project"`

	ProductionDeployment *RepoDetailProductionDeployment `json:"productionDeployment"`

	Namespace *string `json:"namespace"`

	Envs []RepoDetailEnvsEnvVar `json:"envs"`

	Collaborators []RepoDetailCollaboratorsProjectCollaborator `json:"collaborators"`

	Volumes []RepoDetailVolumesVolumeSpec `json:"volumes"`

	Replication []RepoDetailReplication `json:"replication"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	Cluster *RepoDetailCluster `json:"cluster"`

	AwsAccount *RepoDetailAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoDetailGcpAccountGCPAccount `json:"gcpAccount"`

	LogShipper *RepoDetailLogShipper `json:"logShipper"`

	ReadinessProbe *RepoDetailReadinessProbe `json:"readinessProbe"`

	LivenessProbe *RepoDetailLivenessProbe `json:"livenessProbe"`

	StartupProbe *RepoDetailStartupProbe `json:"startupProbe"`

	ManualDeploy *bool `json:"manualDeploy"`

	DeployStrategy *DeployStrategy `json:"deployStrategy"`

	Free *bool `json:"free"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoDetailGpuGPUSpec `json:"gpu"`

	Tpu *RepoDetailTpuTPUSpec `json:"tpu"`

	EphemeralStorage *float64 `json:"ephemeralStorage"`

	Dedicated *bool `json:"dedicated"`

	GithubIntegration *RepoDetailGithubIntegrationGitHubRepoIntegration `json:"githubIntegration"`

	GitlabIntegration *RepoDetailGitlabIntegrationGitlabRepoIntegration `json:"gitlabIntegration"`

	ProductionBranch *string `json:"productionBranch"`

	BranchResources *RepoDetailBranchResourcesContainerResourcesSpec `json:"branchResources"`

	ServerlessResources *RepoDetailServerlessResourcesServerlessResourceSpec `json:"serverlessResources"`

	ServerlessRegion *string `json:"serverlessRegion"`

	PrometheusScrape *RepoDetailPrometheusScrape `json:"prometheusScrape"`

	HelmValues *string `json:"helmValues"`

	TerraformVersion *string `json:"terraformVersion"`

	TerraformVariables *string `json:"terraformVariables"`

	JobRuns *RepoDetailJobRunsJobRunConnection `json:"jobRuns"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	PreStopSleep *int `json:"preStopSleep"`

	TerminationGracePeriodSeconds *int `json:"terminationGracePeriodSeconds"`

	Autoscaling *RepoDetailAutoscaling `json:"autoscaling"`

	ContainerRegistry *RepoDetailContainerRegistry `json:"containerRegistry"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseEnvs []RepoDetailDatabaseEnvsEnvVar `json:"databaseEnvs"`

	DatabaseLinks []RepoDetailDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoDetailLinkedProjectsDatabaseLink `json:"linkedProjects"`

	AutoRetry *bool `json:"autoRetry"`

	AutoRollback *bool `json:"autoRollback"`

	CanDeploy *bool `json:"canDeploy"`

	PipelineCluster *RepoDetailPipelineCluster `json:"pipelineCluster"`

	AwsIamRole *string `json:"awsIamRole"`

	GcpServiceAccount *string `json:"gcpServiceAccount"`

	DatadogApmEnabled *bool `json:"datadogApmEnabled"`

	ProjectEnvironment *RepoDetailProjectEnvironment `json:"projectEnvironment"`

	PipelineLinks []RepoDetailPipelineLinksRepoPipelineLink `json:"pipelineLinks"`

	DeployTimeoutSeconds *int `json:"deployTimeoutSeconds"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployType *DeployType `json:"deployType"`

	Image *string `json:"image"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Owner RepoCommonOwnerUser `json:"owner"`

	ClusterDomains []RepoNetworkClusterDomains `json:"clusterDomains"`

	Cdns []RepoNetworkCdnsCDN `json:"cdns"`

	Ports []RepoNetworkPortsPort `json:"ports"`

	HostNetwork *bool `json:"hostNetwork"`

	StaticIP *bool `json:"staticIP"`

	BuildMethod *RepoBuildBuildMethod `json:"buildMethod"`

	BuildResources *RepoBuildBuildResourcesContainerResourcesSpec `json:"buildResources"`

	BuildSpec *RepoBuildBuildSpecContainerSpec `json:"buildSpec"`

	NoBuildCache *bool `json:"noBuildCache"`

	GitSubmodules *GitSubmodulesType `json:"gitSubmodules"`

	KanikoFlags *RepoBuildKanikoFlags `json:"kanikoFlags"`

	AlternativeImageTagTemplates []string `json:"alternativeImageTagTemplates"`
}

func (v *userRepoCurrentUserRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userRepoCurrentUserRepo) __premarshalJSON() (*__premarshaluserRepoCurrentUserRepo, error) {
	var retval __premarshaluserRepoCurrentUserRepo

	retval.Id = v.Id
	retval.SecretMounts = v.RepoDetail.SecretMounts
	retval.KubernetesCustomization = v.RepoDetail.KubernetesCustomization
	retval.Manifest = v.RepoDetail.Manifest
	retval.AppID = v.RepoDetail.AppID
	retval.DefaultIngressDomain = v.RepoDetail.DefaultIngressDomain
	retval.KappID = v.RepoDetail.KappID
	retval.UseHumanReadableKubernetesName = v.RepoDetail.UseHumanReadableKubernetesName
	retval.Project = v.RepoDetail.Project
	retval.ProductionDeployment = v.RepoDetail.ProductionDeployment
	retval.Namespace = v.RepoDetail.Namespace
	retval.Envs = v.RepoDetail.Envs
	retval.Collaborators = v.RepoDetail.Collaborators
	retval.Volumes = v.RepoDetail.Volumes
	retval.Replication = v.RepoDetail.Replication
	retval.DeployTarget = v.RepoDetail.DeployTarget
	retval.Cluster = v.RepoDetail.Cluster
	retval.AwsAccount = v.RepoDetail.AwsAccount
	retval.GcpAccount = v.RepoDetail.GcpAccount
	retval.LogShipper = v.RepoDetail.LogShipper
	retval.ReadinessProbe = v.RepoDetail.ReadinessProbe
	retval.LivenessProbe = v.RepoDetail.LivenessProbe
	retval.StartupProbe = v.RepoDetail.StartupProbe
	retval.ManualDeploy = v.RepoDetail.ManualDeploy
	retval.DeployStrategy = v.RepoDetail.DeployStrategy
	retval.Free = v.RepoDetail.Free
	retval.Cpu = v.RepoDetail.Cpu
	retval.Memory = v.RepoDetail.Memory
	retval.Gpu = v.RepoDetail.Gpu
	retval.Tpu = v.RepoDetail.Tpu
	retval.EphemeralStorage = v.RepoDetail.EphemeralStorage
	retval.Dedicated = v.RepoDetail.Dedicated
	retval.GithubIntegration = v.RepoDetail.GithubIntegration
	retval.GitlabIntegration = v.RepoDetail.GitlabIntegration
	retval.ProductionBranch = v.RepoDetail.ProductionBranch
	retval.BranchResources = v.RepoDetail.BranchResources
	retval.ServerlessResources = v.RepoDetail.ServerlessResources
	retval.ServerlessRegion = v.RepoDetail.ServerlessRegion
	retval.PrometheusScrape = v.RepoDetail.PrometheusScrape
	retval.HelmValues = v.RepoDetail.HelmValues
	retval.TerraformVersion = v.RepoDetail.TerraformVersion
	retval.TerraformVariables = v.RepoDetail.TerraformVariables
	retval.JobRuns = v.RepoDetail.JobRuns
	retval.DeployService = v.RepoDetail.DeployService
	retval.DeployJob = v.RepoDetail.DeployJob
	retval.PreStopSleep = v.RepoDetail.PreStopSleep
	retval.TerminationGracePeriodSeconds = v.RepoDetail.TerminationGracePeriodSeconds
	retval.Autoscaling = v.RepoDetail.Autoscaling
	retval.ContainerRegistry = v.RepoDetail.ContainerRegistry
	retval.DatabaseProvider = v.RepoDetail.DatabaseProvider
	retval.DatabaseEngine = v.RepoDetail.DatabaseEngine
	retval.DatabaseVersion = v.RepoDetail.DatabaseVersion
	retval.DatabaseEnvs = v.RepoDetail.DatabaseEnvs
	retval.DatabaseLinks = v.RepoDetail.DatabaseLinks
	retval.LinkedProjects = v.RepoDetail.LinkedProjects
	retval.AutoRetry = v.RepoDetail.AutoRetry
	retval.AutoRollback = v.RepoDetail.AutoRollback
	retval.CanDeploy = v.RepoDetail.CanDeploy
	retval.PipelineCluster = v.RepoDetail.PipelineCluster
	retval.AwsIamRole = v.RepoDetail.AwsIamRole
	retval.GcpServiceAccount = v.RepoDetail.GcpServiceAccount
	retval.DatadogApmEnabled = v.RepoDetail.DatadogApmEnabled
	retval.ProjectEnvironment = v.RepoDetail.ProjectEnvironment
	retval.PipelineLinks = v.RepoDetail.PipelineLinks
	retval.DeployTimeoutSeconds = v.RepoDetail.DeployTimeoutSeconds
	retval.Path = v.RepoDetail.RepoCommon.Path
	retval.Name = v.RepoDetail.RepoCommon.Name
	retval.Enabled = v.RepoDetail.RepoCommon.Enabled
	retval.Source = v.RepoDetail.RepoCommon.Source
	retval.DeployType = v.RepoDetail.RepoCommon.DeployType
	retval.Image = v.RepoDetail.RepoCommon.Image
	retval.UpdatedAt = v.RepoDetail.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoDetail.RepoCommon.DisableReason
	retval.Owner = v.RepoDetail.RepoCommon.Owner
	retval.ClusterDomains = v.RepoDetail.RepoNetwork.ClusterDomains
	retval.Cdns = v.RepoDetail.RepoNetwork.Cdns
	retval.Ports = v.RepoDetail.RepoNetwork.Ports
	retval.HostNetwork = v.RepoDetail.RepoNetwork.HostNetwork
	retval.StaticIP = v.RepoDetail.RepoNetwork.StaticIP
	retval.BuildMethod = v.RepoDetail.RepoBuild.BuildMethod
	retval.BuildResources = v.RepoDetail.RepoBuild.BuildResources
	retval.BuildSpec = v.RepoDetail.RepoBuild.BuildSpec
	retval.NoBuildCache = v.RepoDetail.RepoBuild.NoBuildCache
	retval.GitSubmodules = v.RepoDetail.RepoBuild.GitSubmodules
	retval.KanikoFlags = v.RepoDetail.RepoBuild.KanikoFlags
	retval.AlternativeImageTagTemplates = v.RepoDetail.RepoBuild.AlternativeImageTagTemplates
	return &retval, nil
}

// userRepoDeploymentsCurrentUser includes the requested fields of the GraphQL type User.
type userRepoDeploymentsCurrentUser struct {
	Id   uuid.UUID                           `json:"id"`
	Repo *userRepoDeploymentsCurrentUserRepo `json:"repo"`
}

// GetId returns userRepoDeploymentsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetRepo returns userRepoDeploymentsCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUser) GetRepo() *userRepoDeploymentsCurrentUserRepo { return v.Repo }

// userRepoDeploymentsCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type userRepoDeploymentsCurrentUserRepo struct {
	// - v0.RepoID
	Id          uuid.UUID                                                 `json:"id"`
	Deployments []userRepoDeploymentsCurrentUserRepoDeploymentsDeployment `json:"deployments"`
}

// GetId returns userRepoDeploymentsCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepo) GetId() uuid.UUID { return v.Id }

// GetDeployments returns userRepoDeploymentsCurrentUserRepo.Deployments, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepo) GetDeployments() []userRepoDeploymentsCurrentUserRepoDeploymentsDeployment {
	return v.Deployments
}

// userRepoDeploymentsCurrentUserRepoDeploymentsDeployment includes the requested fields of the GraphQL type Deployment.
type userRepoDeploymentsCurrentUserRepoDeploymentsDeployment struct {
	Id               uuid.UUID `json:"id"`
	DeploymentCommon `json:"-"`
	AwsLinks         *userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentAwsLinksAWSLinks `json:"awsLinks"`
	GcpLinks         *userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentGcpLinksGCPLinks `json:"gcpLinks"`
}

// GetId returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.Id, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetId() uuid.UUID { return v.Id }

// GetAwsLinks returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.AwsLinks, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetAwsLinks() *userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentAwsLinksAWSLinks {
	return v.AwsLinks
}

// GetGcpLinks returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.GcpLinks, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetGcpLinks() *userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentGcpLinksGCPLinks {
	return v.GcpLinks
}

// GetDescription returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.Description, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetDescription() *string {
	return v.DeploymentCommon.Description
}

// GetVersion returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.Version, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetVersion() string {
	return v.DeploymentCommon.Version
}

// GetStatus returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.Status, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetStatus() DeploymentStatus {
	return v.DeploymentCommon.Status
}

// GetBranch returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.Branch, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetBranch() *string {
	return v.DeploymentCommon.Branch
}

// GetEndpoints returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetEndpoints() []string {
	return v.DeploymentCommon.Endpoints
}

// GetPrivateEndpoint returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetPrivateEndpoint() *string {
	return v.DeploymentCommon.PrivateEndpoint
}

// GetErrorMessage returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.ErrorMessage, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetErrorMessage() *string {
	return v.DeploymentCommon.ErrorMessage
}

// GetDeployStatus returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.DeployStatus, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetDeployStatus() *DeploymentCommonDeployStatus {
	return v.DeploymentCommon.DeployStatus
}

// GetBuild returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.Build, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetBuild() *DeploymentCommonBuild {
	return v.DeploymentCommon.Build
}

// GetAlternativeImages returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.AlternativeImages, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetAlternativeImages() []DeploymentCommonAlternativeImagesAlternativeImage {
	return v.DeploymentCommon.AlternativeImages
}

// GetUpdatedAt returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetUpdatedAt() time.Time {
	return v.DeploymentCommon.UpdatedAt
}

// GetCreatedAt returns userRepoDeploymentsCurrentUserRepoDeploymentsDeployment.CreatedAt, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) GetCreatedAt() time.Time {
	return v.DeploymentCommon.CreatedAt
}

func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userRepoDeploymentsCurrentUserRepoDeploymentsDeployment
		graphql.NoUnmarshalJSON
	}
	firstPass.userRepoDeploymentsCurrentUserRepoDeploymentsDeployment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeploymentCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserRepoDeploymentsCurrentUserRepoDeploymentsDeployment struct {
	Id uuid.UUID `json:"id"`

	AwsLinks *userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentAwsLinksAWSLinks `json:"awsLinks"`

	GcpLinks *userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentGcpLinksGCPLinks `json:"gcpLinks"`

	Description *string `json:"description"`

	Version string `json:"version"`

	Status DeploymentStatus `json:"status"`

	Branch *string `json:"branch"`

	Endpoints []string `json:"endpoints"`

	PrivateEndpoint *string `json:"privateEndpoint"`

	ErrorMessage *string `json:"errorMessage"`

	DeployStatus *DeploymentCommonDeployStatus `json:"deployStatus"`

	Build *DeploymentCommonBuild `json:"build"`

	AlternativeImages []DeploymentCommonAlternativeImagesAlternativeImage `json:"alternativeImages"`

	UpdatedAt time.Time `json:"updatedAt"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeployment) __premarshalJSON() (*__premarshaluserRepoDeploymentsCurrentUserRepoDeploymentsDeployment, error) {
	var retval __premarshaluserRepoDeploymentsCurrentUserRepoDeploymentsDeployment

	retval.Id = v.Id
	retval.AwsLinks = v.AwsLinks
	retval.GcpLinks = v.GcpLinks
	retval.Description = v.DeploymentCommon.Description
	retval.Version = v.DeploymentCommon.Version
	retval.Status = v.DeploymentCommon.Status
	retval.Branch = v.DeploymentCommon.Branch
	retval.Endpoints = v.DeploymentCommon.Endpoints
	retval.PrivateEndpoint = v.DeploymentCommon.PrivateEndpoint
	retval.ErrorMessage = v.DeploymentCommon.ErrorMessage
	retval.DeployStatus = v.DeploymentCommon.DeployStatus
	retval.Build = v.DeploymentCommon.Build
	retval.AlternativeImages = v.DeploymentCommon.AlternativeImages
	retval.UpdatedAt = v.DeploymentCommon.UpdatedAt
	retval.CreatedAt = v.DeploymentCommon.CreatedAt
	return &retval, nil
}

// userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentAwsLinksAWSLinks includes the requested fields of the GraphQL type AWSLinks.
type userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentAwsLinksAWSLinks struct {
	CloudwatchLogs *string `json:"cloudwatchLogs"`
}

// GetCloudwatchLogs returns userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentAwsLinksAWSLinks.CloudwatchLogs, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentAwsLinksAWSLinks) GetCloudwatchLogs() *string {
	return v.CloudwatchLogs
}

// userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentGcpLinksGCPLinks includes the requested fields of the GraphQL type GCPLinks.
type userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentGcpLinksGCPLinks struct {
	CloudLogging *string `json:"cloudLogging"`
}

// GetCloudLogging returns userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentGcpLinksGCPLinks.CloudLogging, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsCurrentUserRepoDeploymentsDeploymentGcpLinksGCPLinks) GetCloudLogging() *string {
	return v.CloudLogging
}

// userRepoDeploymentsResponse is returned by userRepoDeployments on success.
type userRepoDeploymentsResponse struct {
	CurrentUser userRepoDeploymentsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userRepoDeploymentsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userRepoDeploymentsResponse) GetCurrentUser() userRepoDeploymentsCurrentUser {
	return v.CurrentUser
}

// userRepoResponse is returned by userRepo on success.
type userRepoResponse struct {
	CurrentUser userRepoCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userRepoResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userRepoResponse) GetCurrentUser() userRepoCurrentUser { return v.CurrentUser }

// userReposResponse is returned by userRepos on success.
type userReposResponse struct {
	User userReposUser `json:"user"`
}

// GetUser returns userReposResponse.User, and is useful for accessing the field via an interface.
func (v *userReposResponse) GetUser() userReposUser { return v.User }

// userReposUser includes the requested fields of the GraphQL type User.
type userReposUser struct {
	Id    uuid.UUID                `json:"id"`
	Repos []userReposUserReposRepo `json:"repos"`
}

// GetId returns userReposUser.Id, and is useful for accessing the field via an interface.
func (v *userReposUser) GetId() uuid.UUID { return v.Id }

// GetRepos returns userReposUser.Repos, and is useful for accessing the field via an interface.
func (v *userReposUser) GetRepos() []userReposUserReposRepo { return v.Repos }

// userReposUserReposRepo includes the requested fields of the GraphQL type Repo.
type userReposUserReposRepo struct {
	// - v0.RepoID
	Id           uuid.UUID `json:"id"`
	RepoListItem `json:"-"`
}

// GetId returns userReposUserReposRepo.Id, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetId() uuid.UUID { return v.Id }

// GetProductionDeployment returns userReposUserReposRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetProductionDeployment() *RepoListItemProductionDeployment {
	return v.RepoListItem.ProductionDeployment
}

// GetPath returns userReposUserReposRepo.Path, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetPath() string { return v.RepoListItem.RepoCommon.Path }

// GetName returns userReposUserReposRepo.Name, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetName() string { return v.RepoListItem.RepoCommon.Name }

// GetEnabled returns userReposUserReposRepo.Enabled, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetEnabled() bool { return v.RepoListItem.RepoCommon.Enabled }

// GetSource returns userReposUserReposRepo.Source, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoListItem.RepoCommon.Source
}

// GetDeployTarget returns userReposUserReposRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetDeployTarget() *DeployTarget {
	return v.RepoListItem.RepoCommon.DeployTarget
}

// GetDeployType returns userReposUserReposRepo.DeployType, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetDeployType() *DeployType {
	return v.RepoListItem.RepoCommon.DeployType
}

// GetDeployService returns userReposUserReposRepo.DeployService, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetDeployService() *bool {
	return v.RepoListItem.RepoCommon.DeployService
}

// GetDeployJob returns userReposUserReposRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetDeployJob() *bool { return v.RepoListItem.RepoCommon.DeployJob }

// GetAwsAccount returns userReposUserReposRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoListItem.RepoCommon.AwsAccount
}

// GetGcpAccount returns userReposUserReposRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoListItem.RepoCommon.GcpAccount
}

// GetImage returns userReposUserReposRepo.Image, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetImage() *string { return v.RepoListItem.RepoCommon.Image }

// GetCpu returns userReposUserReposRepo.Cpu, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetCpu() *string { return v.RepoListItem.RepoCommon.Cpu }

// GetMemory returns userReposUserReposRepo.Memory, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetMemory() *string { return v.RepoListItem.RepoCommon.Memory }

// GetGpu returns userReposUserReposRepo.Gpu, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetGpu() *RepoCommonGpuGPUSpec { return v.RepoListItem.RepoCommon.Gpu }

// GetTpu returns userReposUserReposRepo.Tpu, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetTpu() *RepoCommonTpuTPUSpec { return v.RepoListItem.RepoCommon.Tpu }

// GetUpdatedAt returns userReposUserReposRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetUpdatedAt() time.Time { return v.RepoListItem.RepoCommon.UpdatedAt }

// GetDisableReason returns userReposUserReposRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetDisableReason() *DisableReason {
	return v.RepoListItem.RepoCommon.DisableReason
}

// GetCluster returns userReposUserReposRepo.Cluster, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetCluster() *RepoCommonCluster {
	return v.RepoListItem.RepoCommon.Cluster
}

// GetDatabaseProvider returns userReposUserReposRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoListItem.RepoCommon.DatabaseProvider
}

// GetDatabaseEngine returns userReposUserReposRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoListItem.RepoCommon.DatabaseEngine
}

// GetAutoscaling returns userReposUserReposRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoListItem.RepoCommon.Autoscaling
}

// GetOwner returns userReposUserReposRepo.Owner, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoListItem.RepoCommon.Owner
}

// GetProject returns userReposUserReposRepo.Project, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetProject() *RepoCommonProject {
	return v.RepoListItem.RepoCommon.Project
}

// GetProjectEnvironment returns userReposUserReposRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *userReposUserReposRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoListItem.RepoCommon.ProjectEnvironment
}

func (v *userReposUserReposRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userReposUserReposRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.userReposUserReposRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserReposUserReposRepo struct {
	Id uuid.UUID `json:"id"`

	ProductionDeployment *RepoListItemProductionDeployment `json:"productionDeployment"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *userReposUserReposRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userReposUserReposRepo) __premarshalJSON() (*__premarshaluserReposUserReposRepo, error) {
	var retval __premarshaluserReposUserReposRepo

	retval.Id = v.Id
	retval.ProductionDeployment = v.RepoListItem.ProductionDeployment
	retval.Path = v.RepoListItem.RepoCommon.Path
	retval.Name = v.RepoListItem.RepoCommon.Name
	retval.Enabled = v.RepoListItem.RepoCommon.Enabled
	retval.Source = v.RepoListItem.RepoCommon.Source
	retval.DeployTarget = v.RepoListItem.RepoCommon.DeployTarget
	retval.DeployType = v.RepoListItem.RepoCommon.DeployType
	retval.DeployService = v.RepoListItem.RepoCommon.DeployService
	retval.DeployJob = v.RepoListItem.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoListItem.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoListItem.RepoCommon.GcpAccount
	retval.Image = v.RepoListItem.RepoCommon.Image
	retval.Cpu = v.RepoListItem.RepoCommon.Cpu
	retval.Memory = v.RepoListItem.RepoCommon.Memory
	retval.Gpu = v.RepoListItem.RepoCommon.Gpu
	retval.Tpu = v.RepoListItem.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoListItem.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoListItem.RepoCommon.DisableReason
	retval.Cluster = v.RepoListItem.RepoCommon.Cluster
	retval.DatabaseProvider = v.RepoListItem.RepoCommon.DatabaseProvider
	retval.DatabaseEngine = v.RepoListItem.RepoCommon.DatabaseEngine
	retval.Autoscaling = v.RepoListItem.RepoCommon.Autoscaling
	retval.Owner = v.RepoListItem.RepoCommon.Owner
	retval.Project = v.RepoListItem.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoListItem.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// userReposWithDBResponse is returned by userReposWithDB on success.
type userReposWithDBResponse struct {
	User userReposWithDBUser `json:"user"`
}

// GetUser returns userReposWithDBResponse.User, and is useful for accessing the field via an interface.
func (v *userReposWithDBResponse) GetUser() userReposWithDBUser { return v.User }

// userReposWithDBUser includes the requested fields of the GraphQL type User.
type userReposWithDBUser struct {
	Id    uuid.UUID                      `json:"id"`
	Repos []userReposWithDBUserReposRepo `json:"repos"`
}

// GetId returns userReposWithDBUser.Id, and is useful for accessing the field via an interface.
func (v *userReposWithDBUser) GetId() uuid.UUID { return v.Id }

// GetRepos returns userReposWithDBUser.Repos, and is useful for accessing the field via an interface.
func (v *userReposWithDBUser) GetRepos() []userReposWithDBUserReposRepo { return v.Repos }

// userReposWithDBUserReposRepo includes the requested fields of the GraphQL type Repo.
type userReposWithDBUserReposRepo struct {
	// - v0.RepoID
	Id               uuid.UUID `json:"id"`
	RepoCommonWithDB `json:"-"`
}

// GetId returns userReposWithDBUserReposRepo.Id, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetId() uuid.UUID { return v.Id }

// GetDatabaseProvider returns userReposWithDBUserReposRepo.DatabaseProvider, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetDatabaseProvider() *DatabaseProviderType {
	return v.RepoCommonWithDB.DatabaseProvider
}

// GetDatabaseEngine returns userReposWithDBUserReposRepo.DatabaseEngine, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetDatabaseEngine() *DatabaseEngineType {
	return v.RepoCommonWithDB.DatabaseEngine
}

// GetDatabaseVersion returns userReposWithDBUserReposRepo.DatabaseVersion, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetDatabaseVersion() *string {
	return v.RepoCommonWithDB.DatabaseVersion
}

// GetDatabaseLinks returns userReposWithDBUserReposRepo.DatabaseLinks, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetDatabaseLinks() []RepoCommonWithDBDatabaseLinksDatabaseLink {
	return v.RepoCommonWithDB.DatabaseLinks
}

// GetLinkedProjects returns userReposWithDBUserReposRepo.LinkedProjects, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetLinkedProjects() []RepoCommonWithDBLinkedProjectsDatabaseLink {
	return v.RepoCommonWithDB.LinkedProjects
}

// GetPath returns userReposWithDBUserReposRepo.Path, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetPath() string { return v.RepoCommonWithDB.RepoCommon.Path }

// GetName returns userReposWithDBUserReposRepo.Name, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetName() string { return v.RepoCommonWithDB.RepoCommon.Name }

// GetEnabled returns userReposWithDBUserReposRepo.Enabled, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetEnabled() bool {
	return v.RepoCommonWithDB.RepoCommon.Enabled
}

// GetSource returns userReposWithDBUserReposRepo.Source, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetSource() RepoCommonSourceRepoSource {
	return v.RepoCommonWithDB.RepoCommon.Source
}

// GetDeployTarget returns userReposWithDBUserReposRepo.DeployTarget, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetDeployTarget() *DeployTarget {
	return v.RepoCommonWithDB.RepoCommon.DeployTarget
}

// GetDeployType returns userReposWithDBUserReposRepo.DeployType, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetDeployType() *DeployType {
	return v.RepoCommonWithDB.RepoCommon.DeployType
}

// GetDeployService returns userReposWithDBUserReposRepo.DeployService, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetDeployService() *bool {
	return v.RepoCommonWithDB.RepoCommon.DeployService
}

// GetDeployJob returns userReposWithDBUserReposRepo.DeployJob, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetDeployJob() *bool {
	return v.RepoCommonWithDB.RepoCommon.DeployJob
}

// GetAwsAccount returns userReposWithDBUserReposRepo.AwsAccount, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetAwsAccount() *RepoCommonAwsAccountAWSAccount {
	return v.RepoCommonWithDB.RepoCommon.AwsAccount
}

// GetGcpAccount returns userReposWithDBUserReposRepo.GcpAccount, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetGcpAccount() *RepoCommonGcpAccountGCPAccount {
	return v.RepoCommonWithDB.RepoCommon.GcpAccount
}

// GetImage returns userReposWithDBUserReposRepo.Image, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetImage() *string { return v.RepoCommonWithDB.RepoCommon.Image }

// GetCpu returns userReposWithDBUserReposRepo.Cpu, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetCpu() *string { return v.RepoCommonWithDB.RepoCommon.Cpu }

// GetMemory returns userReposWithDBUserReposRepo.Memory, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetMemory() *string {
	return v.RepoCommonWithDB.RepoCommon.Memory
}

// GetGpu returns userReposWithDBUserReposRepo.Gpu, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetGpu() *RepoCommonGpuGPUSpec {
	return v.RepoCommonWithDB.RepoCommon.Gpu
}

// GetTpu returns userReposWithDBUserReposRepo.Tpu, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetTpu() *RepoCommonTpuTPUSpec {
	return v.RepoCommonWithDB.RepoCommon.Tpu
}

// GetUpdatedAt returns userReposWithDBUserReposRepo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetUpdatedAt() time.Time {
	return v.RepoCommonWithDB.RepoCommon.UpdatedAt
}

// GetDisableReason returns userReposWithDBUserReposRepo.DisableReason, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetDisableReason() *DisableReason {
	return v.RepoCommonWithDB.RepoCommon.DisableReason
}

// GetCluster returns userReposWithDBUserReposRepo.Cluster, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetCluster() *RepoCommonCluster {
	return v.RepoCommonWithDB.RepoCommon.Cluster
}

// GetAutoscaling returns userReposWithDBUserReposRepo.Autoscaling, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetAutoscaling() *RepoCommonAutoscaling {
	return v.RepoCommonWithDB.RepoCommon.Autoscaling
}

// GetOwner returns userReposWithDBUserReposRepo.Owner, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetOwner() RepoCommonOwnerUser {
	return v.RepoCommonWithDB.RepoCommon.Owner
}

// GetProject returns userReposWithDBUserReposRepo.Project, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetProject() *RepoCommonProject {
	return v.RepoCommonWithDB.RepoCommon.Project
}

// GetProjectEnvironment returns userReposWithDBUserReposRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *userReposWithDBUserReposRepo) GetProjectEnvironment() *RepoCommonProjectEnvironment {
	return v.RepoCommonWithDB.RepoCommon.ProjectEnvironment
}

func (v *userReposWithDBUserReposRepo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userReposWithDBUserReposRepo
		graphql.NoUnmarshalJSON
	}
	firstPass.userReposWithDBUserReposRepo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepoCommonWithDB)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserReposWithDBUserReposRepo struct {
	Id uuid.UUID `json:"id"`

	DatabaseProvider *DatabaseProviderType `json:"databaseProvider"`

	DatabaseEngine *DatabaseEngineType `json:"databaseEngine"`

	DatabaseVersion *string `json:"databaseVersion"`

	DatabaseLinks []RepoCommonWithDBDatabaseLinksDatabaseLink `json:"databaseLinks"`

	LinkedProjects []RepoCommonWithDBLinkedProjectsDatabaseLink `json:"linkedProjects"`

	Path string `json:"path"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`

	Source RepoCommonSourceRepoSource `json:"source"`

	DeployTarget *DeployTarget `json:"deployTarget"`

	DeployType *DeployType `json:"deployType"`

	DeployService *bool `json:"deployService"`

	DeployJob *bool `json:"deployJob"`

	AwsAccount *RepoCommonAwsAccountAWSAccount `json:"awsAccount"`

	GcpAccount *RepoCommonGcpAccountGCPAccount `json:"gcpAccount"`

	Image *string `json:"image"`

	Cpu *string `json:"cpu"`

	Memory *string `json:"memory"`

	Gpu *RepoCommonGpuGPUSpec `json:"gpu"`

	Tpu *RepoCommonTpuTPUSpec `json:"tpu"`

	UpdatedAt time.Time `json:"updatedAt"`

	DisableReason *DisableReason `json:"disableReason"`

	Cluster *RepoCommonCluster `json:"cluster"`

	Autoscaling *RepoCommonAutoscaling `json:"autoscaling"`

	Owner RepoCommonOwnerUser `json:"owner"`

	Project *RepoCommonProject `json:"project"`

	ProjectEnvironment *RepoCommonProjectEnvironment `json:"projectEnvironment"`
}

func (v *userReposWithDBUserReposRepo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userReposWithDBUserReposRepo) __premarshalJSON() (*__premarshaluserReposWithDBUserReposRepo, error) {
	var retval __premarshaluserReposWithDBUserReposRepo

	retval.Id = v.Id
	retval.DatabaseProvider = v.RepoCommonWithDB.DatabaseProvider
	retval.DatabaseEngine = v.RepoCommonWithDB.DatabaseEngine
	retval.DatabaseVersion = v.RepoCommonWithDB.DatabaseVersion
	retval.DatabaseLinks = v.RepoCommonWithDB.DatabaseLinks
	retval.LinkedProjects = v.RepoCommonWithDB.LinkedProjects
	retval.Path = v.RepoCommonWithDB.RepoCommon.Path
	retval.Name = v.RepoCommonWithDB.RepoCommon.Name
	retval.Enabled = v.RepoCommonWithDB.RepoCommon.Enabled
	retval.Source = v.RepoCommonWithDB.RepoCommon.Source
	retval.DeployTarget = v.RepoCommonWithDB.RepoCommon.DeployTarget
	retval.DeployType = v.RepoCommonWithDB.RepoCommon.DeployType
	retval.DeployService = v.RepoCommonWithDB.RepoCommon.DeployService
	retval.DeployJob = v.RepoCommonWithDB.RepoCommon.DeployJob
	retval.AwsAccount = v.RepoCommonWithDB.RepoCommon.AwsAccount
	retval.GcpAccount = v.RepoCommonWithDB.RepoCommon.GcpAccount
	retval.Image = v.RepoCommonWithDB.RepoCommon.Image
	retval.Cpu = v.RepoCommonWithDB.RepoCommon.Cpu
	retval.Memory = v.RepoCommonWithDB.RepoCommon.Memory
	retval.Gpu = v.RepoCommonWithDB.RepoCommon.Gpu
	retval.Tpu = v.RepoCommonWithDB.RepoCommon.Tpu
	retval.UpdatedAt = v.RepoCommonWithDB.RepoCommon.UpdatedAt
	retval.DisableReason = v.RepoCommonWithDB.RepoCommon.DisableReason
	retval.Cluster = v.RepoCommonWithDB.RepoCommon.Cluster
	retval.Autoscaling = v.RepoCommonWithDB.RepoCommon.Autoscaling
	retval.Owner = v.RepoCommonWithDB.RepoCommon.Owner
	retval.Project = v.RepoCommonWithDB.RepoCommon.Project
	retval.ProjectEnvironment = v.RepoCommonWithDB.RepoCommon.ProjectEnvironment
	return &retval, nil
}

// userResponse is returned by user on success.
type userResponse struct {
	User userUser `json:"user"`
}

// GetUser returns userResponse.User, and is useful for accessing the field via an interface.
func (v *userResponse) GetUser() userUser { return v.User }

// userTeamCurrentUser includes the requested fields of the GraphQL type User.
type userTeamCurrentUser struct {
	Id   uuid.UUID                `json:"id"`
	Team *userTeamCurrentUserTeam `json:"team"`
}

// GetId returns userTeamCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userTeamCurrentUser) GetId() uuid.UUID { return v.Id }

// GetTeam returns userTeamCurrentUser.Team, and is useful for accessing the field via an interface.
func (v *userTeamCurrentUser) GetTeam() *userTeamCurrentUserTeam { return v.Team }

// userTeamCurrentUserTeam includes the requested fields of the GraphQL type Team.
type userTeamCurrentUserTeam struct {
	Id         uuid.UUID `json:"id"`
	TeamDetail `json:"-"`
}

// GetId returns userTeamCurrentUserTeam.Id, and is useful for accessing the field via an interface.
func (v *userTeamCurrentUserTeam) GetId() uuid.UUID { return v.Id }

// GetUser returns userTeamCurrentUserTeam.User, and is useful for accessing the field via an interface.
func (v *userTeamCurrentUserTeam) GetUser() TeamDetailUser { return v.TeamDetail.User }

// GetPlan returns userTeamCurrentUserTeam.Plan, and is useful for accessing the field via an interface.
func (v *userTeamCurrentUserTeam) GetPlan() TeamCommonPlan { return v.TeamDetail.TeamCommon.Plan }

func (v *userTeamCurrentUserTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userTeamCurrentUserTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.userTeamCurrentUserTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserTeamCurrentUserTeam struct {
	Id uuid.UUID `json:"id"`

	User TeamDetailUser `json:"user"`

	Plan TeamCommonPlan `json:"plan"`
}

func (v *userTeamCurrentUserTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userTeamCurrentUserTeam) __premarshalJSON() (*__premarshaluserTeamCurrentUserTeam, error) {
	var retval __premarshaluserTeamCurrentUserTeam

	retval.Id = v.Id
	retval.User = v.TeamDetail.User
	retval.Plan = v.TeamDetail.TeamCommon.Plan
	return &retval, nil
}

// userTeamMemberCurrentUser includes the requested fields of the GraphQL type User.
type userTeamMemberCurrentUser struct {
	Id   uuid.UUID                      `json:"id"`
	Team *userTeamMemberCurrentUserTeam `json:"team"`
}

// GetId returns userTeamMemberCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userTeamMemberCurrentUser) GetId() uuid.UUID { return v.Id }

// GetTeam returns userTeamMemberCurrentUser.Team, and is useful for accessing the field via an interface.
func (v *userTeamMemberCurrentUser) GetTeam() *userTeamMemberCurrentUserTeam { return v.Team }

// userTeamMemberCurrentUserTeam includes the requested fields of the GraphQL type Team.
type userTeamMemberCurrentUserTeam struct {
	Id         uuid.UUID `json:"id"`
	TeamCommon `json:"-"`
	TeamMember `json:"-"`
}

// GetId returns userTeamMemberCurrentUserTeam.Id, and is useful for accessing the field via an interface.
func (v *userTeamMemberCurrentUserTeam) GetId() uuid.UUID { return v.Id }

// GetPlan returns userTeamMemberCurrentUserTeam.Plan, and is useful for accessing the field via an interface.
func (v *userTeamMemberCurrentUserTeam) GetPlan() TeamCommonPlan { return v.TeamCommon.Plan }

// GetUser returns userTeamMemberCurrentUserTeam.User, and is useful for accessing the field via an interface.
func (v *userTeamMemberCurrentUserTeam) GetUser() TeamCommonUser { return v.TeamCommon.User }

// GetMembers returns userTeamMemberCurrentUserTeam.Members, and is useful for accessing the field via an interface.
func (v *userTeamMemberCurrentUserTeam) GetMembers() []TeamMemberMembersUserTeamEdge {
	return v.TeamMember.Members
}

// GetMemberInvitations returns userTeamMemberCurrentUserTeam.MemberInvitations, and is useful for accessing the field via an interface.
func (v *userTeamMemberCurrentUserTeam) GetMemberInvitations() []TeamMemberMemberInvitationsTeamMemberInvitation {
	return v.TeamMember.MemberInvitations
}

func (v *userTeamMemberCurrentUserTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userTeamMemberCurrentUserTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.userTeamMemberCurrentUserTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamCommon)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.TeamMember)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserTeamMemberCurrentUserTeam struct {
	Id uuid.UUID `json:"id"`

	Plan TeamCommonPlan `json:"plan"`

	User TeamCommonUser `json:"user"`

	Members []TeamMemberMembersUserTeamEdge `json:"members"`

	MemberInvitations []TeamMemberMemberInvitationsTeamMemberInvitation `json:"memberInvitations"`
}

func (v *userTeamMemberCurrentUserTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userTeamMemberCurrentUserTeam) __premarshalJSON() (*__premarshaluserTeamMemberCurrentUserTeam, error) {
	var retval __premarshaluserTeamMemberCurrentUserTeam

	retval.Id = v.Id
	retval.Plan = v.TeamCommon.Plan
	retval.User = v.TeamCommon.User
	retval.Members = v.TeamMember.Members
	retval.MemberInvitations = v.TeamMember.MemberInvitations
	return &retval, nil
}

// userTeamMemberResponse is returned by userTeamMember on success.
type userTeamMemberResponse struct {
	CurrentUser userTeamMemberCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userTeamMemberResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userTeamMemberResponse) GetCurrentUser() userTeamMemberCurrentUser { return v.CurrentUser }

// userTeamResponse is returned by userTeam on success.
type userTeamResponse struct {
	CurrentUser userTeamCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userTeamResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userTeamResponse) GetCurrentUser() userTeamCurrentUser { return v.CurrentUser }

// userTeamsCurrentUser includes the requested fields of the GraphQL type User.
type userTeamsCurrentUser struct {
	Id    uuid.UUID                               `json:"id"`
	Teams []userTeamsCurrentUserTeamsUserTeamEdge `json:"teams"`
}

// GetId returns userTeamsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *userTeamsCurrentUser) GetId() uuid.UUID { return v.Id }

// GetTeams returns userTeamsCurrentUser.Teams, and is useful for accessing the field via an interface.
func (v *userTeamsCurrentUser) GetTeams() []userTeamsCurrentUserTeamsUserTeamEdge { return v.Teams }

// userTeamsCurrentUserTeamsUserTeamEdge includes the requested fields of the GraphQL type UserTeamEdge.
type userTeamsCurrentUserTeamsUserTeamEdge struct {
	Id   uuid.UUID                                 `json:"id"`
	Team userTeamsCurrentUserTeamsUserTeamEdgeTeam `json:"team"`
	Role TeamMemberRole                            `json:"role"`
}

// GetId returns userTeamsCurrentUserTeamsUserTeamEdge.Id, and is useful for accessing the field via an interface.
func (v *userTeamsCurrentUserTeamsUserTeamEdge) GetId() uuid.UUID { return v.Id }

// GetTeam returns userTeamsCurrentUserTeamsUserTeamEdge.Team, and is useful for accessing the field via an interface.
func (v *userTeamsCurrentUserTeamsUserTeamEdge) GetTeam() userTeamsCurrentUserTeamsUserTeamEdgeTeam {
	return v.Team
}

// GetRole returns userTeamsCurrentUserTeamsUserTeamEdge.Role, and is useful for accessing the field via an interface.
func (v *userTeamsCurrentUserTeamsUserTeamEdge) GetRole() TeamMemberRole { return v.Role }

// userTeamsCurrentUserTeamsUserTeamEdgeTeam includes the requested fields of the GraphQL type Team.
type userTeamsCurrentUserTeamsUserTeamEdgeTeam struct {
	Id         uuid.UUID `json:"id"`
	TeamCommon `json:"-"`
}

// GetId returns userTeamsCurrentUserTeamsUserTeamEdgeTeam.Id, and is useful for accessing the field via an interface.
func (v *userTeamsCurrentUserTeamsUserTeamEdgeTeam) GetId() uuid.UUID { return v.Id }

// GetPlan returns userTeamsCurrentUserTeamsUserTeamEdgeTeam.Plan, and is useful for accessing the field via an interface.
func (v *userTeamsCurrentUserTeamsUserTeamEdgeTeam) GetPlan() TeamCommonPlan {
	return v.TeamCommon.Plan
}

// GetUser returns userTeamsCurrentUserTeamsUserTeamEdgeTeam.User, and is useful for accessing the field via an interface.
func (v *userTeamsCurrentUserTeamsUserTeamEdgeTeam) GetUser() TeamCommonUser {
	return v.TeamCommon.User
}

func (v *userTeamsCurrentUserTeamsUserTeamEdgeTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userTeamsCurrentUserTeamsUserTeamEdgeTeam
		graphql.NoUnmarshalJSON
	}
	firstPass.userTeamsCurrentUserTeamsUserTeamEdgeTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TeamCommon)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserTeamsCurrentUserTeamsUserTeamEdgeTeam struct {
	Id uuid.UUID `json:"id"`

	Plan TeamCommonPlan `json:"plan"`

	User TeamCommonUser `json:"user"`
}

func (v *userTeamsCurrentUserTeamsUserTeamEdgeTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userTeamsCurrentUserTeamsUserTeamEdgeTeam) __premarshalJSON() (*__premarshaluserTeamsCurrentUserTeamsUserTeamEdgeTeam, error) {
	var retval __premarshaluserTeamsCurrentUserTeamsUserTeamEdgeTeam

	retval.Id = v.Id
	retval.Plan = v.TeamCommon.Plan
	retval.User = v.TeamCommon.User
	return &retval, nil
}

// userTeamsResponse is returned by userTeams on success.
type userTeamsResponse struct {
	CurrentUser userTeamsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns userTeamsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *userTeamsResponse) GetCurrentUser() userTeamsCurrentUser { return v.CurrentUser }

// userUser includes the requested fields of the GraphQL type User.
type userUser struct {
	Id         uuid.UUID `json:"id"`
	UserDetail `json:"-"`
}

// GetId returns userUser.Id, and is useful for accessing the field via an interface.
func (v *userUser) GetId() uuid.UUID { return v.Id }

// GetHasZeetCloud returns userUser.HasZeetCloud, and is useful for accessing the field via an interface.
func (v *userUser) GetHasZeetCloud() *bool { return v.UserDetail.HasZeetCloud }

// GetHasOnboarded returns userUser.HasOnboarded, and is useful for accessing the field via an interface.
func (v *userUser) GetHasOnboarded() *bool { return v.UserDetail.HasOnboarded }

// GetCanDeploy returns userUser.CanDeploy, and is useful for accessing the field via an interface.
func (v *userUser) GetCanDeploy() *bool { return v.UserDetail.CanDeploy }

// GetEmail returns userUser.Email, and is useful for accessing the field via an interface.
func (v *userUser) GetEmail() *string { return v.UserDetail.UserCommon.Email }

// GetCreatedAt returns userUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *userUser) GetCreatedAt() *time.Time { return v.UserDetail.UserCommon.CreatedAt }

// GetFreeTrialEndsAt returns userUser.FreeTrialEndsAt, and is useful for accessing the field via an interface.
func (v *userUser) GetFreeTrialEndsAt() *time.Time { return v.UserDetail.UserCommon.FreeTrialEndsAt }

// GetHasPaymentMethod returns userUser.HasPaymentMethod, and is useful for accessing the field via an interface.
func (v *userUser) GetHasPaymentMethod() *bool { return v.UserDetail.UserCommon.HasPaymentMethod }

// GetPaymentError returns userUser.PaymentError, and is useful for accessing the field via an interface.
func (v *userUser) GetPaymentError() *string { return v.UserDetail.UserCommon.PaymentError }

// GetPaymentAuthorizationError returns userUser.PaymentAuthorizationError, and is useful for accessing the field via an interface.
func (v *userUser) GetPaymentAuthorizationError() *string {
	return v.UserDetail.UserCommon.PaymentAuthorizationError
}

// GetAdvanced returns userUser.Advanced, and is useful for accessing the field via an interface.
func (v *userUser) GetAdvanced() *bool { return v.UserDetail.UserCommon.Advanced }

// GetName returns userUser.Name, and is useful for accessing the field via an interface.
func (v *userUser) GetName() string { return v.UserDetail.UserCommon.UserPublicCommon.Name }

// GetLogin returns userUser.Login, and is useful for accessing the field via an interface.
func (v *userUser) GetLogin() string { return v.UserDetail.UserCommon.UserPublicCommon.Login }

// GetAvatar returns userUser.Avatar, and is useful for accessing the field via an interface.
func (v *userUser) GetAvatar() *string { return v.UserDetail.UserCommon.UserPublicCommon.Avatar }

// GetIsTeam returns userUser.IsTeam, and is useful for accessing the field via an interface.
func (v *userUser) GetIsTeam() *bool { return v.UserDetail.UserCommon.UserPublicCommon.IsTeam }

func (v *userUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userUser
		graphql.NoUnmarshalJSON
	}
	firstPass.userUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserUser struct {
	Id uuid.UUID `json:"id"`

	HasZeetCloud *bool `json:"hasZeetCloud"`

	HasOnboarded *bool `json:"hasOnboarded"`

	CanDeploy *bool `json:"canDeploy"`

	Email *string `json:"email"`

	CreatedAt *time.Time `json:"createdAt"`

	FreeTrialEndsAt *time.Time `json:"freeTrialEndsAt"`

	HasPaymentMethod *bool `json:"hasPaymentMethod"`

	PaymentError *string `json:"paymentError"`

	PaymentAuthorizationError *string `json:"paymentAuthorizationError"`

	Advanced *bool `json:"advanced"`

	Name string `json:"name"`

	Login string `json:"login"`

	Avatar *string `json:"avatar"`

	IsTeam *bool `json:"isTeam"`
}

func (v *userUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userUser) __premarshalJSON() (*__premarshaluserUser, error) {
	var retval __premarshaluserUser

	retval.Id = v.Id
	retval.HasZeetCloud = v.UserDetail.HasZeetCloud
	retval.HasOnboarded = v.UserDetail.HasOnboarded
	retval.CanDeploy = v.UserDetail.CanDeploy
	retval.Email = v.UserDetail.UserCommon.Email
	retval.CreatedAt = v.UserDetail.UserCommon.CreatedAt
	retval.FreeTrialEndsAt = v.UserDetail.UserCommon.FreeTrialEndsAt
	retval.HasPaymentMethod = v.UserDetail.UserCommon.HasPaymentMethod
	retval.PaymentError = v.UserDetail.UserCommon.PaymentError
	retval.PaymentAuthorizationError = v.UserDetail.UserCommon.PaymentAuthorizationError
	retval.Advanced = v.UserDetail.UserCommon.Advanced
	retval.Name = v.UserDetail.UserCommon.UserPublicCommon.Name
	retval.Login = v.UserDetail.UserCommon.UserPublicCommon.Login
	retval.Avatar = v.UserDetail.UserCommon.UserPublicCommon.Avatar
	retval.IsTeam = v.UserDetail.UserCommon.UserPublicCommon.IsTeam
	return &retval, nil
}

// The query or mutation executed by AttachAwsPolicyToUser.
const AttachAwsPolicyToUser_Operation = `
mutation AttachAwsPolicyToUser ($input: AttachAwsPolicyToUser!) {
	attachAwsPolicyToUser(input: $input)
}
`

func AttachAwsPolicyToUserMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AttachAwsPolicyToUser,
) (*AttachAwsPolicyToUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "AttachAwsPolicyToUser",
		Query:  AttachAwsPolicyToUser_Operation,
		Variables: &__AttachAwsPolicyToUserInput{
			Input: input,
		},
	}
	var err_ error

	var data_ AttachAwsPolicyToUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ConnectUserToIam.
const ConnectUserToIam_Operation = `
mutation ConnectUserToIam ($input: ConnectUserToIamInput!) {
	connectUserToIam(input: $input)
}
`

func ConnectUserToIamMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input ConnectUserToIamInput,
) (*ConnectUserToIamResponse, error) {
	req_ := &graphql.Request{
		OpName: "ConnectUserToIam",
		Query:  ConnectUserToIam_Operation,
		Variables: &__ConnectUserToIamInput{
			Input: input,
		},
	}
	var err_ error

	var data_ ConnectUserToIamResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DisconnectUserFromIam.
const DisconnectUserFromIam_Operation = `
mutation DisconnectUserFromIam ($id: UUID!) {
	disconnectUserFromIam(id: $id)
}
`

func DisconnectUserFromIamMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*DisconnectUserFromIamResponse, error) {
	req_ := &graphql.Request{
		OpName: "DisconnectUserFromIam",
		Query:  DisconnectUserFromIam_Operation,
		Variables: &__DisconnectUserFromIamInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DisconnectUserFromIamResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DuplicateProject.
const DuplicateProject_Operation = `
mutation DuplicateProject ($input: DuplicateProjectInput!) {
	duplicateProject(input: $input) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func DuplicateProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input DuplicateProjectInput,
) (*DuplicateProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "DuplicateProject",
		Query:  DuplicateProject_Operation,
		Variables: &__DuplicateProjectInput{
			Input: input,
		},
	}
	var err_ error

	var data_ DuplicateProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IpfsServices.
const IpfsServices_Operation = `
query IpfsServices ($id: ID!) {
	user(id: $id) {
		id
		ipfsServices {
			id
			... IpfSServicesFragment
		}
	}
}
fragment IpfSServicesFragment on IPFSService {
	id
	state
	apiURL
	nodeURL
	accessToken
	owner {
		id
		... UserCommon
	}
	api {
		id
		repo {
			id
			clusterDomains {
				id
				domains {
					id
					domain
					... DomainDetail
				}
			}
		}
	}
}
fragment UserCommon on User {
	id
	... UserPublicCommon
	email
	createdAt
	freeTrialEndsAt
	hasPaymentMethod
	paymentError
	paymentAuthorizationError
	advanced
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func IpfsServicesQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*IpfsServicesResponse, error) {
	req_ := &graphql.Request{
		OpName: "IpfsServices",
		Query:  IpfsServices_Operation,
		Variables: &__IpfsServicesInput{
			Id: id,
		},
	}
	var err_ error

	var data_ IpfsServicesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by LinkClusterToCloud.
const LinkClusterToCloud_Operation = `
mutation LinkClusterToCloud ($input: LinkCloudToClusterInput!) {
	linkCloudToCluster(input: $input) {
		id
		... ClusterDetail
	}
}
fragment ClusterDetail on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	isEjected
	components {
		name
		type
		status
		isInstalledByZeet
		exists
		project {
			id
			project {
				name
			}
			projectEnvironment {
				name
			}
			name
		}
		helmMetadata {
			values
			namespace
			releaseName
			chartRepoGuess
			chartVersion
			chartName
		}
	}
	terraformProjectUrl
	awsAccount {
		id
		name
		accountID
	}
	gcpAccount {
		id
		name
		projectID
	}
	doAccount {
		id
		name
		defaultProject
	}
	cwAccount {
		id
		name
		namespace
	}
	linodeAccount {
		id
		name
		accessTokenPrefix
	}
	azureAccount {
		id
		name
		subscriptionID
	}
	vultrAccount {
		id
		name
	}
	ingressIP
	ingressDNS
	clusterProvider
	cloudProvider
	cloudAccount {
		__typename
		... on AWSAccount {
			id
		}
		... on AzureAccount {
			id
		}
		... on CoreWeaveAccount {
			id
		}
		... on DOAccount {
			id
		}
		... on GCPAccount {
			id
		}
		... on LinodeAccount {
			id
		}
		... on VultrAccount {
			id
		}
	}
	prometheus {
		url
		user
		password
		token
	}
	grafana {
		url
		user
		password
	}
	containerRegistry {
		id
		name
		credentialProvider
		username
	}
	containerRepository
	containerCacheRepository
	updatedAt
	createdAt
	projects {
		... ProjectConnectionComon
	}
	projectV3Adapters {
		... ProjectV3AdapterConnectionCommon
	}
	deployJob {
		id
		state
	}
}
fragment ProjectConnectionComon on ProjectConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		repo {
			... RepoCommon
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func LinkClusterToCloudMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input LinkCloudToClusterInput,
) (*LinkClusterToCloudResponse, error) {
	req_ := &graphql.Request{
		OpName: "LinkClusterToCloud",
		Query:  LinkClusterToCloud_Operation,
		Variables: &__LinkClusterToCloudInput{
			Input: input,
		},
	}
	var err_ error

	var data_ LinkClusterToCloudResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateClusterDetailsExternal.
const UpdateClusterDetailsExternal_Operation = `
mutation UpdateClusterDetailsExternal ($updateClusterInput: UpdateClusterInput!, $updateClusterDomainInput: UpdateClusterDomainInput!) {
	updateCluster(input: $updateClusterInput) {
		id
		... ClusterDetail
	}
	updateClusterDomain(input: $updateClusterDomainInput) {
		id
		... ClusterDetail
	}
}
fragment ClusterDetail on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	isEjected
	components {
		name
		type
		status
		isInstalledByZeet
		exists
		project {
			id
			project {
				name
			}
			projectEnvironment {
				name
			}
			name
		}
		helmMetadata {
			values
			namespace
			releaseName
			chartRepoGuess
			chartVersion
			chartName
		}
	}
	terraformProjectUrl
	awsAccount {
		id
		name
		accountID
	}
	gcpAccount {
		id
		name
		projectID
	}
	doAccount {
		id
		name
		defaultProject
	}
	cwAccount {
		id
		name
		namespace
	}
	linodeAccount {
		id
		name
		accessTokenPrefix
	}
	azureAccount {
		id
		name
		subscriptionID
	}
	vultrAccount {
		id
		name
	}
	ingressIP
	ingressDNS
	clusterProvider
	cloudProvider
	cloudAccount {
		__typename
		... on AWSAccount {
			id
		}
		... on AzureAccount {
			id
		}
		... on CoreWeaveAccount {
			id
		}
		... on DOAccount {
			id
		}
		... on GCPAccount {
			id
		}
		... on LinodeAccount {
			id
		}
		... on VultrAccount {
			id
		}
	}
	prometheus {
		url
		user
		password
		token
	}
	grafana {
		url
		user
		password
	}
	containerRegistry {
		id
		name
		credentialProvider
		username
	}
	containerRepository
	containerCacheRepository
	updatedAt
	createdAt
	projects {
		... ProjectConnectionComon
	}
	projectV3Adapters {
		... ProjectV3AdapterConnectionCommon
	}
	deployJob {
		id
		state
	}
}
fragment ProjectConnectionComon on ProjectConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		repo {
			... RepoCommon
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UpdateClusterDetailsExternalMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	updateClusterInput UpdateClusterInput,
	updateClusterDomainInput UpdateClusterDomainInput,
) (*UpdateClusterDetailsExternalResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateClusterDetailsExternal",
		Query:  UpdateClusterDetailsExternal_Operation,
		Variables: &__UpdateClusterDetailsExternalInput{
			UpdateClusterInput:       updateClusterInput,
			UpdateClusterDomainInput: updateClusterDomainInput,
		},
	}
	var err_ error

	var data_ UpdateClusterDetailsExternalResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateClusterDetailsExternalLink.
const UpdateClusterDetailsExternalLink_Operation = `
mutation UpdateClusterDetailsExternalLink ($updateClusterInput: UpdateClusterInput!, $updateClusterDomainInput: UpdateClusterDomainInput!, $linkCloudToClusterInput: LinkCloudToClusterInput!) {
	updateCluster(input: $updateClusterInput) {
		id
		... ClusterDetail
	}
	updateClusterDomain(input: $updateClusterDomainInput) {
		id
		... ClusterDetail
	}
	linkCloudToCluster(input: $linkCloudToClusterInput) {
		id
		... ClusterDetail
	}
}
fragment ClusterDetail on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	isEjected
	components {
		name
		type
		status
		isInstalledByZeet
		exists
		project {
			id
			project {
				name
			}
			projectEnvironment {
				name
			}
			name
		}
		helmMetadata {
			values
			namespace
			releaseName
			chartRepoGuess
			chartVersion
			chartName
		}
	}
	terraformProjectUrl
	awsAccount {
		id
		name
		accountID
	}
	gcpAccount {
		id
		name
		projectID
	}
	doAccount {
		id
		name
		defaultProject
	}
	cwAccount {
		id
		name
		namespace
	}
	linodeAccount {
		id
		name
		accessTokenPrefix
	}
	azureAccount {
		id
		name
		subscriptionID
	}
	vultrAccount {
		id
		name
	}
	ingressIP
	ingressDNS
	clusterProvider
	cloudProvider
	cloudAccount {
		__typename
		... on AWSAccount {
			id
		}
		... on AzureAccount {
			id
		}
		... on CoreWeaveAccount {
			id
		}
		... on DOAccount {
			id
		}
		... on GCPAccount {
			id
		}
		... on LinodeAccount {
			id
		}
		... on VultrAccount {
			id
		}
	}
	prometheus {
		url
		user
		password
		token
	}
	grafana {
		url
		user
		password
	}
	containerRegistry {
		id
		name
		credentialProvider
		username
	}
	containerRepository
	containerCacheRepository
	updatedAt
	createdAt
	projects {
		... ProjectConnectionComon
	}
	projectV3Adapters {
		... ProjectV3AdapterConnectionCommon
	}
	deployJob {
		id
		state
	}
}
fragment ProjectConnectionComon on ProjectConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		repo {
			... RepoCommon
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UpdateClusterDetailsExternalLinkMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	updateClusterInput UpdateClusterInput,
	updateClusterDomainInput UpdateClusterDomainInput,
	linkCloudToClusterInput LinkCloudToClusterInput,
) (*UpdateClusterDetailsExternalLinkResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateClusterDetailsExternalLink",
		Query:  UpdateClusterDetailsExternalLink_Operation,
		Variables: &__UpdateClusterDetailsExternalLinkInput{
			UpdateClusterInput:       updateClusterInput,
			UpdateClusterDomainInput: updateClusterDomainInput,
			LinkCloudToClusterInput:  linkCloudToClusterInput,
		},
	}
	var err_ error

	var data_ UpdateClusterDetailsExternalLinkResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateClusterDetailsZeet.
const UpdateClusterDetailsZeet_Operation = `
mutation UpdateClusterDetailsZeet ($updateClusterInput: UpdateClusterInput!) {
	updateCluster(input: $updateClusterInput) {
		id
		... ClusterDetail
	}
}
fragment ClusterDetail on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	isEjected
	components {
		name
		type
		status
		isInstalledByZeet
		exists
		project {
			id
			project {
				name
			}
			projectEnvironment {
				name
			}
			name
		}
		helmMetadata {
			values
			namespace
			releaseName
			chartRepoGuess
			chartVersion
			chartName
		}
	}
	terraformProjectUrl
	awsAccount {
		id
		name
		accountID
	}
	gcpAccount {
		id
		name
		projectID
	}
	doAccount {
		id
		name
		defaultProject
	}
	cwAccount {
		id
		name
		namespace
	}
	linodeAccount {
		id
		name
		accessTokenPrefix
	}
	azureAccount {
		id
		name
		subscriptionID
	}
	vultrAccount {
		id
		name
	}
	ingressIP
	ingressDNS
	clusterProvider
	cloudProvider
	cloudAccount {
		__typename
		... on AWSAccount {
			id
		}
		... on AzureAccount {
			id
		}
		... on CoreWeaveAccount {
			id
		}
		... on DOAccount {
			id
		}
		... on GCPAccount {
			id
		}
		... on LinodeAccount {
			id
		}
		... on VultrAccount {
			id
		}
	}
	prometheus {
		url
		user
		password
		token
	}
	grafana {
		url
		user
		password
	}
	containerRegistry {
		id
		name
		credentialProvider
		username
	}
	containerRepository
	containerCacheRepository
	updatedAt
	createdAt
	projects {
		... ProjectConnectionComon
	}
	projectV3Adapters {
		... ProjectV3AdapterConnectionCommon
	}
	deployJob {
		id
		state
	}
}
fragment ProjectConnectionComon on ProjectConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		repo {
			... RepoCommon
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UpdateClusterDetailsZeetMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	updateClusterInput UpdateClusterInput,
) (*UpdateClusterDetailsZeetResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateClusterDetailsZeet",
		Query:  UpdateClusterDetailsZeet_Operation,
		Variables: &__UpdateClusterDetailsZeetInput{
			UpdateClusterInput: updateClusterInput,
		},
	}
	var err_ error

	var data_ UpdateClusterDetailsZeetResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateClusterDetailsZeetLink.
const UpdateClusterDetailsZeetLink_Operation = `
mutation UpdateClusterDetailsZeetLink ($updateClusterInput: UpdateClusterInput!, $linkCloudToClusterInput: LinkCloudToClusterInput!) {
	updateCluster(input: $updateClusterInput) {
		id
		... ClusterDetail
	}
	linkCloudToCluster(input: $linkCloudToClusterInput) {
		id
		... ClusterDetail
	}
}
fragment ClusterDetail on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	isEjected
	components {
		name
		type
		status
		isInstalledByZeet
		exists
		project {
			id
			project {
				name
			}
			projectEnvironment {
				name
			}
			name
		}
		helmMetadata {
			values
			namespace
			releaseName
			chartRepoGuess
			chartVersion
			chartName
		}
	}
	terraformProjectUrl
	awsAccount {
		id
		name
		accountID
	}
	gcpAccount {
		id
		name
		projectID
	}
	doAccount {
		id
		name
		defaultProject
	}
	cwAccount {
		id
		name
		namespace
	}
	linodeAccount {
		id
		name
		accessTokenPrefix
	}
	azureAccount {
		id
		name
		subscriptionID
	}
	vultrAccount {
		id
		name
	}
	ingressIP
	ingressDNS
	clusterProvider
	cloudProvider
	cloudAccount {
		__typename
		... on AWSAccount {
			id
		}
		... on AzureAccount {
			id
		}
		... on CoreWeaveAccount {
			id
		}
		... on DOAccount {
			id
		}
		... on GCPAccount {
			id
		}
		... on LinodeAccount {
			id
		}
		... on VultrAccount {
			id
		}
	}
	prometheus {
		url
		user
		password
		token
	}
	grafana {
		url
		user
		password
	}
	containerRegistry {
		id
		name
		credentialProvider
		username
	}
	containerRepository
	containerCacheRepository
	updatedAt
	createdAt
	projects {
		... ProjectConnectionComon
	}
	projectV3Adapters {
		... ProjectV3AdapterConnectionCommon
	}
	deployJob {
		id
		state
	}
}
fragment ProjectConnectionComon on ProjectConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		repo {
			... RepoCommon
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UpdateClusterDetailsZeetLinkMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	updateClusterInput UpdateClusterInput,
	linkCloudToClusterInput LinkCloudToClusterInput,
) (*UpdateClusterDetailsZeetLinkResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateClusterDetailsZeetLink",
		Query:  UpdateClusterDetailsZeetLink_Operation,
		Variables: &__UpdateClusterDetailsZeetLinkInput{
			UpdateClusterInput:      updateClusterInput,
			LinkCloudToClusterInput: linkCloudToClusterInput,
		},
	}
	var err_ error

	var data_ UpdateClusterDetailsZeetLinkResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateClusterDomain.
const UpdateClusterDomain_Operation = `
mutation UpdateClusterDomain ($input: UpdateClusterDomainInput!) {
	updateClusterDomain(input: $input) {
		id
		... ClusterDetail
	}
}
fragment ClusterDetail on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	isEjected
	components {
		name
		type
		status
		isInstalledByZeet
		exists
		project {
			id
			project {
				name
			}
			projectEnvironment {
				name
			}
			name
		}
		helmMetadata {
			values
			namespace
			releaseName
			chartRepoGuess
			chartVersion
			chartName
		}
	}
	terraformProjectUrl
	awsAccount {
		id
		name
		accountID
	}
	gcpAccount {
		id
		name
		projectID
	}
	doAccount {
		id
		name
		defaultProject
	}
	cwAccount {
		id
		name
		namespace
	}
	linodeAccount {
		id
		name
		accessTokenPrefix
	}
	azureAccount {
		id
		name
		subscriptionID
	}
	vultrAccount {
		id
		name
	}
	ingressIP
	ingressDNS
	clusterProvider
	cloudProvider
	cloudAccount {
		__typename
		... on AWSAccount {
			id
		}
		... on AzureAccount {
			id
		}
		... on CoreWeaveAccount {
			id
		}
		... on DOAccount {
			id
		}
		... on GCPAccount {
			id
		}
		... on LinodeAccount {
			id
		}
		... on VultrAccount {
			id
		}
	}
	prometheus {
		url
		user
		password
		token
	}
	grafana {
		url
		user
		password
	}
	containerRegistry {
		id
		name
		credentialProvider
		username
	}
	containerRepository
	containerCacheRepository
	updatedAt
	createdAt
	projects {
		... ProjectConnectionComon
	}
	projectV3Adapters {
		... ProjectV3AdapterConnectionCommon
	}
	deployJob {
		id
		state
	}
}
fragment ProjectConnectionComon on ProjectConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		repo {
			... RepoCommon
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UpdateClusterDomainMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateClusterDomainInput,
) (*UpdateClusterDomainResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateClusterDomain",
		Query:  UpdateClusterDomain_Operation,
		Variables: &__UpdateClusterDomainInput{
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateClusterDomainResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateTeamMemberRole.
const UpdateTeamMemberRole_Operation = `
mutation UpdateTeamMemberRole ($input: UpdateTeamMemberRoleInput!) {
	updateTeamMemberRole(input: $input) {
		role
		id
	}
}
`

func UpdateTeamMemberRoleMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateTeamMemberRoleInput,
) (*UpdateTeamMemberRoleResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateTeamMemberRole",
		Query:  UpdateTeamMemberRole_Operation,
		Variables: &__UpdateTeamMemberRoleInput{
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateTeamMemberRoleResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by abortBlueprintDriverWorkflow.
const abortBlueprintDriverWorkflow_Operation = `
mutation abortBlueprintDriverWorkflow ($workflowID: UUID!) {
	abortBlueprintDriverWorkflow(workflowID: $workflowID)
}
`

func AbortBlueprintDriverWorkflowMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	workflowID uuid.UUID,
) (*abortBlueprintDriverWorkflowResponse, error) {
	req_ := &graphql.Request{
		OpName: "abortBlueprintDriverWorkflow",
		Query:  abortBlueprintDriverWorkflow_Operation,
		Variables: &__abortBlueprintDriverWorkflowInput{
			WorkflowID: workflowID,
		},
	}
	var err_ error

	var data_ abortBlueprintDriverWorkflowResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by abortBuild.
const abortBuild_Operation = `
mutation abortBuild ($id: UUID!) {
	abortBuild(id: $id) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func AbortBuildMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*abortBuildResponse, error) {
	req_ := &graphql.Request{
		OpName: "abortBuild",
		Query:  abortBuild_Operation,
		Variables: &__abortBuildInput{
			Id: id,
		},
	}
	var err_ error

	var data_ abortBuildResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by acceptTeamMemberInvitation.
const acceptTeamMemberInvitation_Operation = `
mutation acceptTeamMemberInvitation ($token: String!) {
	acceptTeamMemberInvitation(token: $token) {
		id
		... TeamCommon
	}
}
fragment TeamCommon on Team {
	id
	plan {
		tier
		billingPeriod
	}
	user {
		id
		... UserCommon
	}
}
fragment UserCommon on User {
	id
	... UserPublicCommon
	email
	createdAt
	freeTrialEndsAt
	hasPaymentMethod
	paymentError
	paymentAuthorizationError
	advanced
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func AcceptTeamMemberInvitationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	token string,
) (*acceptTeamMemberInvitationResponse, error) {
	req_ := &graphql.Request{
		OpName: "acceptTeamMemberInvitation",
		Query:  acceptTeamMemberInvitation_Operation,
		Variables: &__acceptTeamMemberInvitationInput{
			Token: token,
		},
	}
	var err_ error

	var data_ acceptTeamMemberInvitationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addAWSAccount.
const addAWSAccount_Operation = `
mutation addAWSAccount ($input: AddAWSAccountInput!) {
	addAWSAccount(input: $input) {
		id
		... AWSAccountDetail
	}
}
fragment AWSAccountDetail on AWSAccount {
	id
	name
	state
	accountID
	roleARN
	cloudFormationURL
	connected
}
`

func AddAWSAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddAWSAccountInput,
) (*addAWSAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "addAWSAccount",
		Query:  addAWSAccount_Operation,
		Variables: &__addAWSAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addAWSAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addAzureAccount.
const addAzureAccount_Operation = `
mutation addAzureAccount ($input: AddAzureAccountInput!) {
	addAzureAccount(input: $input) {
		id
		... AzureAccountDetail
	}
}
fragment AzureAccountDetail on AzureAccount {
	id
	name
	state
	connected
	subscriptionID
	tenantID
	clientID
}
`

func AddAzureAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddAzureAccountInput,
) (*addAzureAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "addAzureAccount",
		Query:  addAzureAccount_Operation,
		Variables: &__addAzureAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addAzureAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addCDN.
const addCDN_Operation = `
mutation addCDN ($input: AddCDNInput!) {
	addCDN(input: $input) {
		id
		... CDNDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
`

func AddCDNMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddCDNInput,
) (*addCDNResponse, error) {
	req_ := &graphql.Request{
		OpName: "addCDN",
		Query:  addCDN_Operation,
		Variables: &__addCDNInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addCDNResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addCluster.
const addCluster_Operation = `
mutation addCluster ($input: AddClusterInput!) {
	addCluster(input: $input) {
		id
		... ClusterDetail
	}
}
fragment ClusterDetail on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	isEjected
	components {
		name
		type
		status
		isInstalledByZeet
		exists
		project {
			id
			project {
				name
			}
			projectEnvironment {
				name
			}
			name
		}
		helmMetadata {
			values
			namespace
			releaseName
			chartRepoGuess
			chartVersion
			chartName
		}
	}
	terraformProjectUrl
	awsAccount {
		id
		name
		accountID
	}
	gcpAccount {
		id
		name
		projectID
	}
	doAccount {
		id
		name
		defaultProject
	}
	cwAccount {
		id
		name
		namespace
	}
	linodeAccount {
		id
		name
		accessTokenPrefix
	}
	azureAccount {
		id
		name
		subscriptionID
	}
	vultrAccount {
		id
		name
	}
	ingressIP
	ingressDNS
	clusterProvider
	cloudProvider
	cloudAccount {
		__typename
		... on AWSAccount {
			id
		}
		... on AzureAccount {
			id
		}
		... on CoreWeaveAccount {
			id
		}
		... on DOAccount {
			id
		}
		... on GCPAccount {
			id
		}
		... on LinodeAccount {
			id
		}
		... on VultrAccount {
			id
		}
	}
	prometheus {
		url
		user
		password
		token
	}
	grafana {
		url
		user
		password
	}
	containerRegistry {
		id
		name
		credentialProvider
		username
	}
	containerRepository
	containerCacheRepository
	updatedAt
	createdAt
	projects {
		... ProjectConnectionComon
	}
	projectV3Adapters {
		... ProjectV3AdapterConnectionCommon
	}
	deployJob {
		id
		state
	}
}
fragment ProjectConnectionComon on ProjectConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		repo {
			... RepoCommon
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func AddClusterMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddClusterInput,
) (*addClusterResponse, error) {
	req_ := &graphql.Request{
		OpName: "addCluster",
		Query:  addCluster_Operation,
		Variables: &__addClusterInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addClusterResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addContainerRegistry.
const addContainerRegistry_Operation = `
mutation addContainerRegistry ($input: AddContainerRegistryInput!) {
	addContainerRegistry(input: $input) {
		id
		name
		registry
		username
	}
}
`

func AddContainerRegistryMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddContainerRegistryInput,
) (*addContainerRegistryResponse, error) {
	req_ := &graphql.Request{
		OpName: "addContainerRegistry",
		Query:  addContainerRegistry_Operation,
		Variables: &__addContainerRegistryInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addContainerRegistryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addCoreWeaveAccount.
const addCoreWeaveAccount_Operation = `
mutation addCoreWeaveAccount ($input: AddCoreWeaveAccountInput!) {
	addCoreWeaveAccount(input: $input) {
		id
		... CWAccountDetail
	}
}
fragment CWAccountDetail on CoreWeaveAccount {
	id
	name
	state
	namespace
	connected
}
`

func AddCoreWeaveAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddCoreWeaveAccountInput,
) (*addCoreWeaveAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "addCoreWeaveAccount",
		Query:  addCoreWeaveAccount_Operation,
		Variables: &__addCoreWeaveAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addCoreWeaveAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addDOAccount.
const addDOAccount_Operation = `
mutation addDOAccount ($input: AddDOAccountInput!) {
	addDOAccount(input: $input) {
		id
		... DOAccountDetail
	}
}
fragment DOAccountDetail on DOAccount {
	id
	name
	state
	accessTokenPrefix
	defaultProject
	connected
}
`

func AddDOAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddDOAccountInput,
) (*addDOAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "addDOAccount",
		Query:  addDOAccount_Operation,
		Variables: &__addDOAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addDOAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addGCPAccount.
const addGCPAccount_Operation = `
mutation addGCPAccount ($input: AddGCPAccountInput!) {
	addGCPAccount(input: $input) {
		id
		... GCPAccountDetail
	}
}
fragment GCPAccountDetail on GCPAccount {
	id
	name
	state
	projectID
	clientEmail
	connected
	error
}
`

func AddGCPAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddGCPAccountInput,
) (*addGCPAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "addGCPAccount",
		Query:  addGCPAccount_Operation,
		Variables: &__addGCPAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addGCPAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addLinodeAccount.
const addLinodeAccount_Operation = `
mutation addLinodeAccount ($input: AddLinodeAccountInput!) {
	addLinodeAccount(input: $input) {
		id
		... LinodeAccountDetail
	}
}
fragment LinodeAccountDetail on LinodeAccount {
	id
	name
	state
	accessTokenPrefix
	connected
}
`

func AddLinodeAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddLinodeAccountInput,
) (*addLinodeAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "addLinodeAccount",
		Query:  addLinodeAccount_Operation,
		Variables: &__addLinodeAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addLinodeAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addProjectCollaborator.
const addProjectCollaborator_Operation = `
mutation addProjectCollaborator ($input: AddProjectCollaboratorInput!) {
	addProjectCollaborator(input: $input) {
		id
		collaborators {
			... CollaboratorCommon
		}
	}
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func AddProjectCollaboratorMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddProjectCollaboratorInput,
) (*addProjectCollaboratorResponse, error) {
	req_ := &graphql.Request{
		OpName: "addProjectCollaborator",
		Query:  addProjectCollaborator_Operation,
		Variables: &__addProjectCollaboratorInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addProjectCollaboratorResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addRepoCustomDomain.
const addRepoCustomDomain_Operation = `
mutation addRepoCustomDomain ($input: AddRepoCustomDomainInput!) {
	addRepoCustomDomain(input: $input) {
		id
		clusterDomains {
			id
			... ClusterDomainsDetail
		}
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func AddRepoCustomDomainMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddRepoCustomDomainInput,
) (*addRepoCustomDomainResponse, error) {
	req_ := &graphql.Request{
		OpName: "addRepoCustomDomain",
		Query:  addRepoCustomDomain_Operation,
		Variables: &__addRepoCustomDomainInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addRepoCustomDomainResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addTeamMember.
const addTeamMember_Operation = `
mutation addTeamMember ($input: AddTeamMemberInput!) {
	addTeamMember(input: $input) {
		... TeamCommon
		members {
			user {
				id
				name
			}
			role
		}
		user {
			id
			billingOverview {
				... BillingOverviewDetail
			}
		}
	}
}
fragment TeamCommon on Team {
	id
	plan {
		tier
		billingPeriod
	}
	user {
		id
		... UserCommon
	}
}
fragment BillingOverviewDetail on BillingOverview {
	currentProducts {
		__typename
		... ProductDetail
	}
	externalLinks {
		invoiceHistory {
			... UrlOrContactUsDetail
		}
		managePaymentMethod {
			... UrlOrContactUsDetail
		}
		downgrade {
			... UrlOrContactUsDetail
		}
		help {
			... UrlOrContactUsDetail
		}
	}
	subscriptionUsageAllowed {
		seats
		clusters
		cloudAccounts
		projects
		customBlueprints
	}
}
fragment UserCommon on User {
	id
	... UserPublicCommon
	email
	createdAt
	freeTrialEndsAt
	hasPaymentMethod
	paymentError
	paymentAuthorizationError
	advanced
}
fragment ProductDetail on Product {
	productTypeMetadata {
		productType
		displayName
		pricingPageAnchor
	}
	name
	description
	sku
	displayPrice
	usage {
		unit
		unitPlural
		displayName
		currentUsage
		maximumUsage
		description
	}
	benefits
}
fragment UrlOrContactUsDetail on UrlOrContactUs {
	url
	contactUs
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func AddTeamMemberMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddTeamMemberInput,
) (*addTeamMemberResponse, error) {
	req_ := &graphql.Request{
		OpName: "addTeamMember",
		Query:  addTeamMember_Operation,
		Variables: &__addTeamMemberInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addTeamMemberResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addVultrAccount.
const addVultrAccount_Operation = `
mutation addVultrAccount ($input: AddVultrAccountInput!) {
	addVultrAccount(input: $input) {
		id
		... VultrAccountDetail
	}
}
fragment VultrAccountDetail on VultrAccount {
	id
	name
	state
	connected
}
`

func AddVultrAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input AddVultrAccountInput,
) (*addVultrAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "addVultrAccount",
		Query:  addVultrAccount_Operation,
		Variables: &__addVultrAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addVultrAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by approveBlueprintDriverWorkflow.
const approveBlueprintDriverWorkflow_Operation = `
mutation approveBlueprintDriverWorkflow ($workflowID: UUID!) {
	approveBlueprintDriverWorkflow(workflowID: $workflowID) {
		id
		... BlueprintDriverWorkflowDetail
	}
}
fragment BlueprintDriverWorkflowDetail on BlueprintDriverWorkflow {
	id
	status
	steps {
		... WorkflowStepWithLogs
	}
	createdAt
	updatedAt
}
fragment WorkflowStepWithLogs on BlueprintDriverWorkflowStep {
	action
	status
	execution {
		id
		driver
		action
		approvedAt
		jobRun {
			id
			state
			logs {
				id
				completed
				expired
				entries {
					text
					timestamp
				}
			}
			createdAt
			updatedAt
		}
	}
}
`

func ApproveBlueprintDriverWorkflowMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	workflowID uuid.UUID,
) (*approveBlueprintDriverWorkflowResponse, error) {
	req_ := &graphql.Request{
		OpName: "approveBlueprintDriverWorkflow",
		Query:  approveBlueprintDriverWorkflow_Operation,
		Variables: &__approveBlueprintDriverWorkflowInput{
			WorkflowID: workflowID,
		},
	}
	var err_ error

	var data_ approveBlueprintDriverWorkflowResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by awsPolicyJson.
const awsPolicyJson_Operation = `
query awsPolicyJson ($userId: ID!, $awsAccountId: UUID!, $awsPolicyJsonInput: awsPolicyJsonInput!) {
	user(id: $userId) {
		awsAccount(id: $awsAccountId) {
			awsPolicyJson(input: $awsPolicyJsonInput) {
				awsPolicyJson
			}
		}
	}
}
`

func AwsPolicyJsonQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	awsAccountId uuid.UUID,
	awsPolicyJsonInput AwsPolicyJsonInput,
) (*awsPolicyJsonResponse, error) {
	req_ := &graphql.Request{
		OpName: "awsPolicyJson",
		Query:  awsPolicyJson_Operation,
		Variables: &__awsPolicyJsonInput{
			UserId:             userId,
			AwsAccountId:       awsAccountId,
			AwsPolicyJsonInput: awsPolicyJsonInput,
		},
	}
	var err_ error

	var data_ awsPolicyJsonResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by blueprint.
const blueprint_Operation = `
query blueprint ($userId: ID!, $permissionsUserId: UUID!, $blueprintId: UUID!) {
	currentUser {
		id
		permissions {
			user(userID: $permissionsUserId) {
				mutations
			}
		}
	}
	user(id: $userId) {
		id
		login
		blueprint(id: $blueprintId) {
			... BlueprintList
		}
	}
}
fragment BlueprintList on Blueprint {
	id
	description
	displayName
	isOfficial
	logoUrl
	enabled
	published
	projectCount
	richInputSchema
	allowedCloudProviders
	slug
	tags
	type
	configuration {
		__typename
		... ProjectBlueprintConfigurationDetail
	}
	owner {
		name
		login
	}
	variables {
		id
		name
		type
		required
	}
}
fragment ProjectBlueprintConfigurationDetail on BlueprintConfiguration {
	... on BlueprintTerraformConfiguration {
		registrySource
		moduleVersionConstraint
		githubSource
		moduleSource {
			source
			version
			integration {
				git {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
	... on BlueprintHelmConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
			helmRepository {
				chart
				version
				repositoryURL
			}
			containerRegistry {
				registryID
				registryURL
				repository
				tag
			}
		}
	}
	... on BlueprintManifestConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
}
`

func BlueprintQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	permissionsUserId uuid.UUID,
	blueprintId uuid.UUID,
) (*blueprintResponse, error) {
	req_ := &graphql.Request{
		OpName: "blueprint",
		Query:  blueprint_Operation,
		Variables: &__blueprintInput{
			UserId:            userId,
			PermissionsUserId: permissionsUserId,
			BlueprintId:       blueprintId,
		},
	}
	var err_ error

	var data_ blueprintResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by blueprintDriverWorkflow.
const blueprintDriverWorkflow_Operation = `
query blueprintDriverWorkflow ($id: UUID!, $userId: ID!) {
	user(id: $userId) {
		blueprintDriverWorkflow(id: $id) {
			... BlueprintDriverWorkflowDetail
		}
	}
}
fragment BlueprintDriverWorkflowDetail on BlueprintDriverWorkflow {
	id
	status
	steps {
		... WorkflowStepWithLogs
	}
	createdAt
	updatedAt
}
fragment WorkflowStepWithLogs on BlueprintDriverWorkflowStep {
	action
	status
	execution {
		id
		driver
		action
		approvedAt
		jobRun {
			id
			state
			logs {
				id
				completed
				expired
				entries {
					text
					timestamp
				}
			}
			createdAt
			updatedAt
		}
	}
}
`

func BlueprintDriverWorkflowQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	userId uuid.UUID,
) (*blueprintDriverWorkflowResponse, error) {
	req_ := &graphql.Request{
		OpName: "blueprintDriverWorkflow",
		Query:  blueprintDriverWorkflow_Operation,
		Variables: &__blueprintDriverWorkflowInput{
			Id:     id,
			UserId: userId,
		},
	}
	var err_ error

	var data_ blueprintDriverWorkflowResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by blueprintWithProjects.
const blueprintWithProjects_Operation = `
query blueprintWithProjects ($userId: ID!, $permissionsUserId: UUID!, $blueprintId: UUID!) {
	currentUser {
		id
		permissions {
			user(userID: $permissionsUserId) {
				mutations
			}
		}
	}
	user(id: $userId) {
		id
		login
		blueprint(id: $blueprintId) {
			... BlueprintList
		}
		projectV3Adapters(filter: {filter:{criterion:{resourceAdapterFilter:{deployableIds:{value:[$blueprintId]}}}}}) {
			totalCount
			nodes {
				... BridgeProjectV3List
			}
		}
	}
}
fragment BlueprintList on Blueprint {
	id
	description
	displayName
	isOfficial
	logoUrl
	enabled
	published
	projectCount
	richInputSchema
	allowedCloudProviders
	slug
	tags
	type
	configuration {
		__typename
		... ProjectBlueprintConfigurationDetail
	}
	owner {
		name
		login
	}
	variables {
		id
		name
		type
		required
	}
}
fragment BridgeProjectV3List on ProjectV3Adapter {
	name
	id
	status
	isDeployV2
	projectV3 {
		... ProjectV3ListItem
	}
	repo {
		... RepoListItem
	}
	project {
		id
		name
	}
	projectEnvironment {
		id
		name
	}
	updatedAt
}
fragment ProjectBlueprintConfigurationDetail on BlueprintConfiguration {
	... on BlueprintTerraformConfiguration {
		registrySource
		moduleVersionConstraint
		githubSource
		moduleSource {
			source
			version
			integration {
				git {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
	... on BlueprintHelmConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
			helmRepository {
				chart
				version
				repositoryURL
			}
			containerRegistry {
				registryID
				registryURL
				repository
				tag
			}
		}
	}
	... on BlueprintManifestConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
}
fragment ProjectV3ListItem on ProjectV3 {
	id
	name
	blueprintID
}
fragment RepoListItem on Repo {
	... RepoCommon
	productionDeployment {
		id
		... DeploymentCommon
	}
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func BlueprintWithProjectsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	permissionsUserId uuid.UUID,
	blueprintId uuid.UUID,
) (*blueprintWithProjectsResponse, error) {
	req_ := &graphql.Request{
		OpName: "blueprintWithProjects",
		Query:  blueprintWithProjects_Operation,
		Variables: &__blueprintWithProjectsInput{
			UserId:            userId,
			PermissionsUserId: permissionsUserId,
			BlueprintId:       blueprintId,
		},
	}
	var err_ error

	var data_ blueprintWithProjectsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by blueprints.
const blueprints_Operation = `
query blueprints ($userId: ID!, $permissionsUserId: UUID!, $pageInput: PageInput!) {
	currentUser {
		id
		permissions {
			user(userID: $permissionsUserId) {
				mutations
			}
		}
	}
	user(id: $userId) {
		id
		blueprints(page: $pageInput) {
			totalCount
			pageInfo {
				startCursor
				endCursor
				hasNextPage
				hasPreviousPage
			}
			nodes {
				... BlueprintList
			}
		}
	}
}
fragment BlueprintList on Blueprint {
	id
	description
	displayName
	isOfficial
	logoUrl
	enabled
	published
	projectCount
	richInputSchema
	allowedCloudProviders
	slug
	tags
	type
	configuration {
		__typename
		... ProjectBlueprintConfigurationDetail
	}
	owner {
		name
		login
	}
	variables {
		id
		name
		type
		required
	}
}
fragment ProjectBlueprintConfigurationDetail on BlueprintConfiguration {
	... on BlueprintTerraformConfiguration {
		registrySource
		moduleVersionConstraint
		githubSource
		moduleSource {
			source
			version
			integration {
				git {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
	... on BlueprintHelmConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
			helmRepository {
				chart
				version
				repositoryURL
			}
			containerRegistry {
				registryID
				registryURL
				repository
				tag
			}
		}
	}
	... on BlueprintManifestConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
}
`

func BlueprintsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	permissionsUserId uuid.UUID,
	pageInput PageInput,
) (*blueprintsResponse, error) {
	req_ := &graphql.Request{
		OpName: "blueprints",
		Query:  blueprints_Operation,
		Variables: &__blueprintsInput{
			UserId:            userId,
			PermissionsUserId: permissionsUserId,
			PageInput:         pageInput,
		},
	}
	var err_ error

	var data_ blueprintsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by buildRepo.
const buildRepo_Operation = `
mutation buildRepo ($id: ID!, $branch: String, $noCache: Boolean) {
	buildRepo(id: $id, branch: $branch, noCache: $noCache) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func BuildRepoMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	branch *string,
	noCache *bool,
) (*buildRepoResponse, error) {
	req_ := &graphql.Request{
		OpName: "buildRepo",
		Query:  buildRepo_Operation,
		Variables: &__buildRepoInput{
			Id:      id,
			Branch:  branch,
			NoCache: noCache,
		},
	}
	var err_ error

	var data_ buildRepoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by buildTemplates.
const buildTemplates_Operation = `
query buildTemplates ($id: ID!) {
	currentUser {
		id
		deployment(id: $id) {
			id
			buildStage {
				buildTemplates {
					type
					output
				}
			}
		}
	}
}
`

func BuildTemplatesQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*buildTemplatesResponse, error) {
	req_ := &graphql.Request{
		OpName: "buildTemplates",
		Query:  buildTemplates_Operation,
		Variables: &__buildTemplatesInput{
			Id: id,
		},
	}
	var err_ error

	var data_ buildTemplatesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by buildTemplatesExist.
const buildTemplatesExist_Operation = `
query buildTemplatesExist ($id: ID!) {
	currentUser {
		id
		deployment(id: $id) {
			id
			buildStage {
				buildTemplates {
					type
				}
			}
		}
	}
}
`

func BuildTemplatesExistQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*buildTemplatesExistResponse, error) {
	req_ := &graphql.Request{
		OpName: "buildTemplatesExist",
		Query:  buildTemplatesExist_Operation,
		Variables: &__buildTemplatesExistInput{
			Id: id,
		},
	}
	var err_ error

	var data_ buildTemplatesExistResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by checkProjectName.
const checkProjectName_Operation = `
query checkProjectName ($user: ID!, $input: CheckProjectNameInput!) {
	user(id: $user) {
		id
		checkProjectName(input: $input)
	}
}
`

func CheckProjectNameQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	user uuid.UUID,
	input CheckProjectNameInput,
) (*checkProjectNameResponse, error) {
	req_ := &graphql.Request{
		OpName: "checkProjectName",
		Query:  checkProjectName_Operation,
		Variables: &__checkProjectNameInput{
			User:  user,
			Input: input,
		},
	}
	var err_ error

	var data_ checkProjectNameResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by cloudDetailsAws.
const cloudDetailsAws_Operation = `
query cloudDetailsAws ($id: ID!, $accountId: UUID!) {
	user(id: $id) {
		id
		awsAccount(id: $accountId) {
			id
			... AWSAccountDetail
		}
	}
}
fragment AWSAccountDetail on AWSAccount {
	id
	name
	state
	accountID
	roleARN
	cloudFormationURL
	connected
}
`

func CloudDetailsAwsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	accountId uuid.UUID,
) (*cloudDetailsAwsResponse, error) {
	req_ := &graphql.Request{
		OpName: "cloudDetailsAws",
		Query:  cloudDetailsAws_Operation,
		Variables: &__cloudDetailsAwsInput{
			Id:        id,
			AccountId: accountId,
		},
	}
	var err_ error

	var data_ cloudDetailsAwsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by cloudDetailsAzure.
const cloudDetailsAzure_Operation = `
query cloudDetailsAzure ($id: ID!, $accountId: UUID!) {
	user(id: $id) {
		id
		azureAccount(id: $accountId) {
			id
			... AzureAccountDetail
		}
	}
}
fragment AzureAccountDetail on AzureAccount {
	id
	name
	state
	connected
	subscriptionID
	tenantID
	clientID
}
`

func CloudDetailsAzureQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	accountId uuid.UUID,
) (*cloudDetailsAzureResponse, error) {
	req_ := &graphql.Request{
		OpName: "cloudDetailsAzure",
		Query:  cloudDetailsAzure_Operation,
		Variables: &__cloudDetailsAzureInput{
			Id:        id,
			AccountId: accountId,
		},
	}
	var err_ error

	var data_ cloudDetailsAzureResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by cloudDetailsCoreweave.
const cloudDetailsCoreweave_Operation = `
query cloudDetailsCoreweave ($id: ID!, $accountId: UUID!) {
	user(id: $id) {
		id
		coreweaveAccount(id: $accountId) {
			id
			... CWAccountDetail
		}
	}
}
fragment CWAccountDetail on CoreWeaveAccount {
	id
	name
	state
	namespace
	connected
}
`

func CloudDetailsCoreweaveQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	accountId uuid.UUID,
) (*cloudDetailsCoreweaveResponse, error) {
	req_ := &graphql.Request{
		OpName: "cloudDetailsCoreweave",
		Query:  cloudDetailsCoreweave_Operation,
		Variables: &__cloudDetailsCoreweaveInput{
			Id:        id,
			AccountId: accountId,
		},
	}
	var err_ error

	var data_ cloudDetailsCoreweaveResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by cloudDetailsDo.
const cloudDetailsDo_Operation = `
query cloudDetailsDo ($id: ID!, $accountId: UUID!) {
	user(id: $id) {
		id
		doAccount(id: $accountId) {
			id
			... DOAccountDetail
		}
	}
}
fragment DOAccountDetail on DOAccount {
	id
	name
	state
	accessTokenPrefix
	defaultProject
	connected
}
`

func CloudDetailsDoQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	accountId uuid.UUID,
) (*cloudDetailsDoResponse, error) {
	req_ := &graphql.Request{
		OpName: "cloudDetailsDo",
		Query:  cloudDetailsDo_Operation,
		Variables: &__cloudDetailsDoInput{
			Id:        id,
			AccountId: accountId,
		},
	}
	var err_ error

	var data_ cloudDetailsDoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by cloudDetailsGcp.
const cloudDetailsGcp_Operation = `
query cloudDetailsGcp ($id: ID!, $accountId: UUID!) {
	user(id: $id) {
		id
		gcpAccount(id: $accountId) {
			id
			... GCPAccountDetail
		}
	}
}
fragment GCPAccountDetail on GCPAccount {
	id
	name
	state
	projectID
	clientEmail
	connected
	error
}
`

func CloudDetailsGcpQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	accountId uuid.UUID,
) (*cloudDetailsGcpResponse, error) {
	req_ := &graphql.Request{
		OpName: "cloudDetailsGcp",
		Query:  cloudDetailsGcp_Operation,
		Variables: &__cloudDetailsGcpInput{
			Id:        id,
			AccountId: accountId,
		},
	}
	var err_ error

	var data_ cloudDetailsGcpResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by cloudDetailsLinode.
const cloudDetailsLinode_Operation = `
query cloudDetailsLinode ($id: ID!, $accountId: UUID!) {
	user(id: $id) {
		id
		linodeAccount(id: $accountId) {
			id
			... LinodeAccountDetail
		}
	}
}
fragment LinodeAccountDetail on LinodeAccount {
	id
	name
	state
	accessTokenPrefix
	connected
}
`

func CloudDetailsLinodeQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	accountId uuid.UUID,
) (*cloudDetailsLinodeResponse, error) {
	req_ := &graphql.Request{
		OpName: "cloudDetailsLinode",
		Query:  cloudDetailsLinode_Operation,
		Variables: &__cloudDetailsLinodeInput{
			Id:        id,
			AccountId: accountId,
		},
	}
	var err_ error

	var data_ cloudDetailsLinodeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by cloudDetailsVultr.
const cloudDetailsVultr_Operation = `
query cloudDetailsVultr ($id: ID!, $accountId: UUID!) {
	user(id: $id) {
		id
		vultrAccount(id: $accountId) {
			id
			... VultrAccountDetail
		}
	}
}
fragment VultrAccountDetail on VultrAccount {
	id
	name
	state
	connected
}
`

func CloudDetailsVultrQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	accountId uuid.UUID,
) (*cloudDetailsVultrResponse, error) {
	req_ := &graphql.Request{
		OpName: "cloudDetailsVultr",
		Query:  cloudDetailsVultr_Operation,
		Variables: &__cloudDetailsVultrInput{
			Id:        id,
			AccountId: accountId,
		},
	}
	var err_ error

	var data_ cloudDetailsVultrResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterCertIssuers.
const clusterCertIssuers_Operation = `
query clusterCertIssuers ($userID: ID!, $repoID: ID!, $clusterID: UUID!) {
	user(id: $userID) {
		id
		cluster(id: $clusterID) {
			id
			name
			clusterIssuers
		}
		repo(id: $repoID) {
			id
			name
			clusterIssuerName
		}
	}
}
`

func ClusterCertIssuersQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userID uuid.UUID,
	repoID uuid.UUID,
	clusterID uuid.UUID,
) (*clusterCertIssuersResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterCertIssuers",
		Query:  clusterCertIssuers_Operation,
		Variables: &__clusterCertIssuersInput{
			UserID:    userID,
			RepoID:    repoID,
			ClusterID: clusterID,
		},
	}
	var err_ error

	var data_ clusterCertIssuersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterCommon.
const clusterCommon_Operation = `
query clusterCommon ($id: ID!, $clusterId: UUID!) {
	user(id: $id) {
		id
		cluster(id: $clusterId) {
			id
			... ClusterCommon
		}
	}
}
fragment ClusterCommon on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	clusterProvider
	cloudProvider
}
`

func ClusterCommonQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	clusterId uuid.UUID,
) (*clusterCommonResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterCommon",
		Query:  clusterCommon_Operation,
		Variables: &__clusterCommonInput{
			Id:        id,
			ClusterId: clusterId,
		},
	}
	var err_ error

	var data_ clusterCommonResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterDeployLogs.
const clusterDeployLogs_Operation = `
query clusterDeployLogs ($id: ID!, $clusterId: UUID!) {
	user(id: $id) {
		id
		cluster(id: $clusterId) {
			id
			deployJob {
				id
				logs {
					id
					cursor
					entries {
						text
						timestamp
					}
				}
			}
		}
	}
}
`

func ClusterDeployLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	clusterId uuid.UUID,
) (*clusterDeployLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterDeployLogs",
		Query:  clusterDeployLogs_Operation,
		Variables: &__clusterDeployLogsInput{
			Id:        id,
			ClusterId: clusterId,
		},
	}
	var err_ error

	var data_ clusterDeployLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterDetails.
const clusterDetails_Operation = `
query clusterDetails ($id: ID!, $clusterId: UUID!) {
	user(id: $id) {
		id
		cluster(id: $clusterId) {
			id
			... ClusterDetail
		}
		... UserClouds
		... UserContainerRegistries
	}
}
fragment ClusterDetail on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	isEjected
	components {
		name
		type
		status
		isInstalledByZeet
		exists
		project {
			id
			project {
				name
			}
			projectEnvironment {
				name
			}
			name
		}
		helmMetadata {
			values
			namespace
			releaseName
			chartRepoGuess
			chartVersion
			chartName
		}
	}
	terraformProjectUrl
	awsAccount {
		id
		name
		accountID
	}
	gcpAccount {
		id
		name
		projectID
	}
	doAccount {
		id
		name
		defaultProject
	}
	cwAccount {
		id
		name
		namespace
	}
	linodeAccount {
		id
		name
		accessTokenPrefix
	}
	azureAccount {
		id
		name
		subscriptionID
	}
	vultrAccount {
		id
		name
	}
	ingressIP
	ingressDNS
	clusterProvider
	cloudProvider
	cloudAccount {
		__typename
		... on AWSAccount {
			id
		}
		... on AzureAccount {
			id
		}
		... on CoreWeaveAccount {
			id
		}
		... on DOAccount {
			id
		}
		... on GCPAccount {
			id
		}
		... on LinodeAccount {
			id
		}
		... on VultrAccount {
			id
		}
	}
	prometheus {
		url
		user
		password
		token
	}
	grafana {
		url
		user
		password
	}
	containerRegistry {
		id
		name
		credentialProvider
		username
	}
	containerRepository
	containerCacheRepository
	updatedAt
	createdAt
	projects {
		... ProjectConnectionComon
	}
	projectV3Adapters {
		... ProjectV3AdapterConnectionCommon
	}
	deployJob {
		id
		state
	}
}
fragment UserClouds on User {
	awsAccounts {
		id
		clusters {
			name
		}
		projectV3Adapters {
			... ProjectV3AdapterConnectionCommon
		}
		updatedAt
		... AWSAccountDetail
	}
	gcpAccounts {
		id
		projectV3Adapters {
			... ProjectV3AdapterConnectionCommon
		}
		clusters {
			name
		}
		updatedAt
		... GCPAccountDetail
	}
	doAccounts {
		id
		projectV3Adapters {
			... ProjectV3AdapterConnectionCommon
		}
		updatedAt
		clusters {
			name
		}
		... DOAccountDetail
	}
	coreweaveAccounts {
		id
		updatedAt
		clusters {
			name
			projectV3Adapters {
				... ProjectV3AdapterConnectionCommon
			}
		}
		... CWAccountDetail
	}
	linodeAccounts {
		id
		projectV3Adapters {
			... ProjectV3AdapterConnectionCommon
		}
		updatedAt
		clusters {
			name
		}
		... LinodeAccountDetail
	}
	vultrAccounts {
		id
		clusters {
			name
		}
		projectV3Adapters {
			... ProjectV3AdapterConnectionCommon
		}
		updatedAt
		... VultrAccountDetail
	}
	azureAccounts {
		id
		clusters {
			name
		}
		projectV3Adapters {
			... ProjectV3AdapterConnectionCommon
		}
		updatedAt
		... AzureAccountDetail
	}
}
fragment UserContainerRegistries on User {
	containerRegistries {
		id
		name
		registry
		username
	}
}
fragment ProjectConnectionComon on ProjectConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		repo {
			... RepoCommon
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment AWSAccountDetail on AWSAccount {
	id
	name
	state
	accountID
	roleARN
	cloudFormationURL
	connected
}
fragment GCPAccountDetail on GCPAccount {
	id
	name
	state
	projectID
	clientEmail
	connected
	error
}
fragment DOAccountDetail on DOAccount {
	id
	name
	state
	accessTokenPrefix
	defaultProject
	connected
}
fragment CWAccountDetail on CoreWeaveAccount {
	id
	name
	state
	namespace
	connected
}
fragment LinodeAccountDetail on LinodeAccount {
	id
	name
	state
	accessTokenPrefix
	connected
}
fragment VultrAccountDetail on VultrAccount {
	id
	name
	state
	connected
}
fragment AzureAccountDetail on AzureAccount {
	id
	name
	state
	connected
	subscriptionID
	tenantID
	clientID
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func ClusterDetailsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	clusterId uuid.UUID,
) (*clusterDetailsResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterDetails",
		Query:  clusterDetails_Operation,
		Variables: &__clusterDetailsInput{
			Id:        id,
			ClusterId: clusterId,
		},
	}
	var err_ error

	var data_ clusterDetailsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterDomain.
const clusterDomain_Operation = `
query clusterDomain ($userID: ID!, $clusterID: UUID!) {
	user(id: $userID) {
		id
		cluster(id: $clusterID) {
			id
			domain
		}
	}
}
`

func ClusterDomainQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userID uuid.UUID,
	clusterID uuid.UUID,
) (*clusterDomainResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterDomain",
		Query:  clusterDomain_Operation,
		Variables: &__clusterDomainInput{
			UserID:    userID,
			ClusterID: clusterID,
		},
	}
	var err_ error

	var data_ clusterDomainResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterKubeconfig.
const clusterKubeconfig_Operation = `
query clusterKubeconfig ($userID: ID!, $clusterID: UUID!) {
	user(id: $userID) {
		id
		cluster(id: $clusterID) {
			id
			name
			kubeconfig
		}
	}
}
`

func ClusterKubeconfigQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userID uuid.UUID,
	clusterID uuid.UUID,
) (*clusterKubeconfigResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterKubeconfig",
		Query:  clusterKubeconfig_Operation,
		Variables: &__clusterKubeconfigInput{
			UserID:    userID,
			ClusterID: clusterID,
		},
	}
	var err_ error

	var data_ clusterKubeconfigResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterName.
const clusterName_Operation = `
query clusterName ($teamId: ID!, $clusterId: UUID!) {
	user(id: $teamId) {
		id
		cluster(id: $clusterId) {
			id
			cloudProvider
			name
		}
	}
}
`

func ClusterNameQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	clusterId uuid.UUID,
) (*clusterNameResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterName",
		Query:  clusterName_Operation,
		Variables: &__clusterNameInput{
			TeamId:    teamId,
			ClusterId: clusterId,
		},
	}
	var err_ error

	var data_ clusterNameResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterProvisionTargets.
const clusterProvisionTargets_Operation = `
query clusterProvisionTargets ($id: ID!) {
	user(id: $id) {
		id
		awsAccounts {
			id
			... AWSAccountDetail
		}
		gcpAccounts {
			id
			... GCPAccountDetail
		}
		doAccounts {
			id
			... DOAccountDetail
		}
		linodeAccounts {
			id
			... LinodeAccountDetail
		}
		azureAccounts {
			id
			... AzureAccountDetail
		}
		vultrAccounts {
			id
			... VultrAccountDetail
		}
	}
}
fragment AWSAccountDetail on AWSAccount {
	id
	name
	state
	accountID
	roleARN
	cloudFormationURL
	connected
}
fragment GCPAccountDetail on GCPAccount {
	id
	name
	state
	projectID
	clientEmail
	connected
	error
}
fragment DOAccountDetail on DOAccount {
	id
	name
	state
	accessTokenPrefix
	defaultProject
	connected
}
fragment LinodeAccountDetail on LinodeAccount {
	id
	name
	state
	accessTokenPrefix
	connected
}
fragment AzureAccountDetail on AzureAccount {
	id
	name
	state
	connected
	subscriptionID
	tenantID
	clientID
}
fragment VultrAccountDetail on VultrAccount {
	id
	name
	state
	connected
}
`

func ClusterProvisionTargetsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*clusterProvisionTargetsResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterProvisionTargets",
		Query:  clusterProvisionTargets_Operation,
		Variables: &__clusterProvisionTargetsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ clusterProvisionTargetsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clustersCustomDomains.
const clustersCustomDomains_Operation = `
query clustersCustomDomains ($id: ID!) {
	user(id: $id) {
		id
		clusters {
			id
			customDomains {
				id
				customDomain {
					id
					domain
					syncDomain {
						id
						domain
					}
				}
				repo {
					... RepoCommon
				}
			}
			... ClusterSummary
		}
	}
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment ClusterSummary on Cluster {
	id
	name
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	doAccount {
		id
		defaultProject
	}
	cwAccount {
		id
		namespace
	}
	linodeAccount {
		id
		accessTokenPrefix
	}
	vultrAccount {
		id
		name
	}
	azureAccount {
		id
		name
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func ClustersCustomDomainsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*clustersCustomDomainsResponse, error) {
	req_ := &graphql.Request{
		OpName: "clustersCustomDomains",
		Query:  clustersCustomDomains_Operation,
		Variables: &__clustersCustomDomainsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ clustersCustomDomainsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by combinedAwsRdsMetricsUpdated.
const combinedAwsRdsMetricsUpdated_Operation = `
subscription combinedAwsRdsMetricsUpdated ($deploymentID: ID!) {
	deploymentUpdated(id: $deploymentID) {
		id
		awsLinks {
			cloudwatchMetrics
		}
		CPUUtilization: metrics(name: "CPUUtilization") {
			timestamp
			value
		}
		DatabaseConnections: metrics(name: "DatabaseConnections") {
			timestamp
			value
		}
		FreeStorageSpace: metrics(name: "FreeStorageSpace") {
			timestamp
			value
		}
		FreeableMemory: metrics(name: "FreeableMemory") {
			timestamp
			value
		}
		ReadLatency: metrics(name: "ReadLatency") {
			timestamp
			value
		}
		WriteLatency: metrics(name: "WriteLatency") {
			timestamp
			value
		}
	}
}
`

func CombinedAwsRdsMetricsUpdatedSubscription(
	ctx_ context.Context,
	client_ graphql.Client,
	deploymentID uuid.UUID,
) (*combinedAwsRdsMetricsUpdatedResponse, error) {
	req_ := &graphql.Request{
		OpName: "combinedAwsRdsMetricsUpdated",
		Query:  combinedAwsRdsMetricsUpdated_Operation,
		Variables: &__combinedAwsRdsMetricsUpdatedInput{
			DeploymentID: deploymentID,
		},
	}
	var err_ error

	var data_ combinedAwsRdsMetricsUpdatedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by combinedCloudFunctionDeploymentMetricsUpdated.
const combinedCloudFunctionDeploymentMetricsUpdated_Operation = `
subscription combinedCloudFunctionDeploymentMetricsUpdated ($deploymentID: ID!) {
	deploymentUpdated(id: $deploymentID) {
		id
		gcpLinks {
			cloudMonitoring
		}
		executionCount: metrics(name: "execution_count") {
			timestamp
			value
		}
		duration: metrics(name: "execution_times") {
			timestamp
			value
		}
		memoryUsage: metrics(name: "user_memory_bytes") {
			timestamp
			value
		}
		activeInstances: metrics(name: "active_instances") {
			timestamp
			value
		}
	}
}
`

func CombinedCloudFunctionDeploymentMetricsUpdatedSubscription(
	ctx_ context.Context,
	client_ graphql.Client,
	deploymentID uuid.UUID,
) (*combinedCloudFunctionDeploymentMetricsUpdatedResponse, error) {
	req_ := &graphql.Request{
		OpName: "combinedCloudFunctionDeploymentMetricsUpdated",
		Query:  combinedCloudFunctionDeploymentMetricsUpdated_Operation,
		Variables: &__combinedCloudFunctionDeploymentMetricsUpdatedInput{
			DeploymentID: deploymentID,
		},
	}
	var err_ error

	var data_ combinedCloudFunctionDeploymentMetricsUpdatedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by combinedCloudRunMetricsUpdated.
const combinedCloudRunMetricsUpdated_Operation = `
subscription combinedCloudRunMetricsUpdated ($deploymentID: ID!) {
	deploymentUpdated(id: $deploymentID) {
		id
		gcpLinks {
			cloudMonitoring
		}
		request_count: metrics(name: "request_count") {
			timestamp
			value
		}
		instance_count: metrics(name: "container/instance_count") {
			timestamp
			value
		}
		cpu_utilizations: metrics(name: "container/cpu/utilizations") {
			timestamp
			value
		}
		memory_utilizations: metrics(name: "container/memory/utilizations") {
			timestamp
			value
		}
	}
}
`

func CombinedCloudRunMetricsUpdatedSubscription(
	ctx_ context.Context,
	client_ graphql.Client,
	deploymentID uuid.UUID,
) (*combinedCloudRunMetricsUpdatedResponse, error) {
	req_ := &graphql.Request{
		OpName: "combinedCloudRunMetricsUpdated",
		Query:  combinedCloudRunMetricsUpdated_Operation,
		Variables: &__combinedCloudRunMetricsUpdatedInput{
			DeploymentID: deploymentID,
		},
	}
	var err_ error

	var data_ combinedCloudRunMetricsUpdatedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by combinedDeploymentMetrics.
const combinedDeploymentMetrics_Operation = `
query combinedDeploymentMetrics ($repoID: ID!, $deploymentID: ID!) {
	currentUser {
		id
		repo(id: $repoID) {
			id
			deployment(id: $deploymentID) {
				id
				cpuMetrics: metrics(name: "cpu") {
					timestamp
					value
				}
				memoryMetrics: metrics(name: "memory") {
					timestamp
					value
				}
				networkMetrics: metrics(name: "network_out") {
					timestamp
					value
				}
				diskMetrics: metrics(name: "disk_usage") {
					timestamp
					value
				}
			}
		}
	}
}
`

func CombinedDeploymentMetricsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	repoID uuid.UUID,
	deploymentID uuid.UUID,
) (*combinedDeploymentMetricsResponse, error) {
	req_ := &graphql.Request{
		OpName: "combinedDeploymentMetrics",
		Query:  combinedDeploymentMetrics_Operation,
		Variables: &__combinedDeploymentMetricsInput{
			RepoID:       repoID,
			DeploymentID: deploymentID,
		},
	}
	var err_ error

	var data_ combinedDeploymentMetricsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by combinedDeploymentMetricsUpdated.
const combinedDeploymentMetricsUpdated_Operation = `
subscription combinedDeploymentMetricsUpdated ($deploymentID: ID!) {
	deploymentUpdated(id: $deploymentID) {
		id
		cpuMetrics: metrics(name: "cpu") {
			timestamp
			value
		}
		memoryMetrics: metrics(name: "memory") {
			timestamp
			value
		}
		networkMetrics: metrics(name: "network_out") {
			timestamp
			value
		}
		diskMetrics: metrics(name: "disk_usage") {
			timestamp
			value
		}
	}
}
`

func CombinedDeploymentMetricsUpdatedSubscription(
	ctx_ context.Context,
	client_ graphql.Client,
	deploymentID uuid.UUID,
) (*combinedDeploymentMetricsUpdatedResponse, error) {
	req_ := &graphql.Request{
		OpName: "combinedDeploymentMetricsUpdated",
		Query:  combinedDeploymentMetricsUpdated_Operation,
		Variables: &__combinedDeploymentMetricsUpdatedInput{
			DeploymentID: deploymentID,
		},
	}
	var err_ error

	var data_ combinedDeploymentMetricsUpdatedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by combinedDeploymentMetricsUpdatedV2.
const combinedDeploymentMetricsUpdatedV2_Operation = `
subscription combinedDeploymentMetricsUpdatedV2 ($deploymentID: ID!, $deploymentUUID: UUID!, $queryOptions: MetricQueryOptions) {
	deploymentUpdated(id: $deploymentID) {
		id
		cpuMetrics: metricsV2(deploymentID: $deploymentUUID, metricType: CPU, queryOptions: $queryOptions) {
			... MetricStream
		}
		memoryMetrics: metricsV2(deploymentID: $deploymentUUID, metricType: MEMORY, queryOptions: $queryOptions) {
			... MetricStream
		}
		networkMetrics: metricsV2(deploymentID: $deploymentUUID, metricType: NETWORK, queryOptions: $queryOptions) {
			... MetricStream
		}
		diskMetrics: metricsV2(deploymentID: $deploymentUUID, metricType: STORAGE, queryOptions: $queryOptions) {
			... MetricStream
		}
	}
}
fragment MetricStream on MetricStream {
	type
	query
	labels {
		label
		value
	}
	entries {
		value
		timestamp
	}
}
`

func CombinedDeploymentMetricsUpdatedV2Subscription(
	ctx_ context.Context,
	client_ graphql.Client,
	deploymentID uuid.UUID,
	deploymentUUID uuid.UUID,
	queryOptions *MetricQueryOptions,
) (*combinedDeploymentMetricsUpdatedV2Response, error) {
	req_ := &graphql.Request{
		OpName: "combinedDeploymentMetricsUpdatedV2",
		Query:  combinedDeploymentMetricsUpdatedV2_Operation,
		Variables: &__combinedDeploymentMetricsUpdatedV2Input{
			DeploymentID:   deploymentID,
			DeploymentUUID: deploymentUUID,
			QueryOptions:   queryOptions,
		},
	}
	var err_ error

	var data_ combinedDeploymentMetricsUpdatedV2Response
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by combinedLambdaDeploymentMetricsUpdated.
const combinedLambdaDeploymentMetricsUpdated_Operation = `
subscription combinedLambdaDeploymentMetricsUpdated ($deploymentID: ID!) {
	deploymentUpdated(id: $deploymentID) {
		id
		awsLinks {
			cloudwatchMetrics
		}
		invocations: metrics(name: "Invocations") {
			timestamp
			value
		}
		errors: metrics(name: "Errors") {
			timestamp
			value
		}
		duration: metrics(name: "Duration") {
			timestamp
			value
		}
		concurrentExecutions: metrics(name: "ConcurrentExecutions") {
			timestamp
			value
		}
	}
}
`

func CombinedLambdaDeploymentMetricsUpdatedSubscription(
	ctx_ context.Context,
	client_ graphql.Client,
	deploymentID uuid.UUID,
) (*combinedLambdaDeploymentMetricsUpdatedResponse, error) {
	req_ := &graphql.Request{
		OpName: "combinedLambdaDeploymentMetricsUpdated",
		Query:  combinedLambdaDeploymentMetricsUpdated_Operation,
		Variables: &__combinedLambdaDeploymentMetricsUpdatedInput{
			DeploymentID: deploymentID,
		},
	}
	var err_ error

	var data_ combinedLambdaDeploymentMetricsUpdatedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by copyEnvVars.
const copyEnvVars_Operation = `
mutation copyEnvVars ($from: ID!, $to: ID!) {
	copyEnvVars(from: $from, to: $to) {
		id
		envs {
			id
			name
			value
			visible
			sealed
		}
	}
}
`

func CopyEnvVarsMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	from uuid.UUID,
	to uuid.UUID,
) (*copyEnvVarsResponse, error) {
	req_ := &graphql.Request{
		OpName: "copyEnvVars",
		Query:  copyEnvVars_Operation,
		Variables: &__copyEnvVarsInput{
			From: from,
			To:   to,
		},
	}
	var err_ error

	var data_ copyEnvVarsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createAPIKey.
const createAPIKey_Operation = `
mutation createAPIKey ($input: CreateAPIKeyInput!) {
	createAPIKey(input: $input) {
		id
		token
		name
		description
		createdAt
	}
}
`

func CreateAPIKeyMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateAPIKeyInput,
) (*createAPIKeyResponse, error) {
	req_ := &graphql.Request{
		OpName: "createAPIKey",
		Query:  createAPIKey_Operation,
		Variables: &__createAPIKeyInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createAPIKeyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createBitbucketIntegration.
const createBitbucketIntegration_Operation = `
mutation createBitbucketIntegration ($userId: UUID!, $accessToken: String!, $name: String!) {
	createBitbucketIntegration(input: {userID:$userId,accessToken:$accessToken,name:$name}) {
		id
	}
}
`

func CreateBitbucketIntegrationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	accessToken string,
	name string,
) (*createBitbucketIntegrationResponse, error) {
	req_ := &graphql.Request{
		OpName: "createBitbucketIntegration",
		Query:  createBitbucketIntegration_Operation,
		Variables: &__createBitbucketIntegrationInput{
			UserId:      userId,
			AccessToken: accessToken,
			Name:        name,
		},
	}
	var err_ error

	var data_ createBitbucketIntegrationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createBlueprint.
const createBlueprint_Operation = `
mutation createBlueprint ($input: CreateBlueprintInput!) {
	createBlueprint(input: $input) {
		id
	}
}
`

func CreateBlueprintMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateBlueprintInput,
) (*createBlueprintResponse, error) {
	req_ := &graphql.Request{
		OpName: "createBlueprint",
		Query:  createBlueprint_Operation,
		Variables: &__createBlueprintInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createBlueprintResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createBlueprintDriverWorkflow.
const createBlueprintDriverWorkflow_Operation = `
mutation createBlueprintDriverWorkflow ($projectID: UUID!, $driver: BlueprintDriver!, $steps: [BlueprintDriverWorkflowStepAction!]!) {
	submitBlueprintDriverWorkflow(projectID: $projectID, input: {driver:$driver,steps:$steps}) {
		id
		... BlueprintDriverWorkflowDetail
	}
}
fragment BlueprintDriverWorkflowDetail on BlueprintDriverWorkflow {
	id
	status
	steps {
		... WorkflowStepWithLogs
	}
	createdAt
	updatedAt
}
fragment WorkflowStepWithLogs on BlueprintDriverWorkflowStep {
	action
	status
	execution {
		id
		driver
		action
		approvedAt
		jobRun {
			id
			state
			logs {
				id
				completed
				expired
				entries {
					text
					timestamp
				}
			}
			createdAt
			updatedAt
		}
	}
}
`

func CreateBlueprintDriverWorkflowMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	projectID uuid.UUID,
	driver BlueprintDriver,
	steps []BlueprintDriverWorkflowStepAction,
) (*createBlueprintDriverWorkflowResponse, error) {
	req_ := &graphql.Request{
		OpName: "createBlueprintDriverWorkflow",
		Query:  createBlueprintDriverWorkflow_Operation,
		Variables: &__createBlueprintDriverWorkflowInput{
			ProjectID: projectID,
			Driver:    driver,
			Steps:     steps,
		},
	}
	var err_ error

	var data_ createBlueprintDriverWorkflowResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createBranch.
const createBranch_Operation = `
mutation createBranch ($id: UUID!, $name: String!) {
	updateBranch(input: {repoID:$id,name:$name,deploy:true}) {
		id
		... BranchCommon
	}
}
fragment BranchCommon on RepoBranchV2 {
	id
	name
	createdAt
	updatedAt
	state
	endpoints
	latestDeployment {
		id
		... DeploymentCommon
	}
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
`

func CreateBranchMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	name string,
) (*createBranchResponse, error) {
	req_ := &graphql.Request{
		OpName: "createBranch",
		Query:  createBranch_Operation,
		Variables: &__createBranchInput{
			Id:   id,
			Name: name,
		},
	}
	var err_ error

	var data_ createBranchResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createCluster.
const createCluster_Operation = `
mutation createCluster ($input: CreateClusterInput!) {
	createCluster(input: $input) {
		id
		... ClusterDetail
	}
}
fragment ClusterDetail on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	isEjected
	components {
		name
		type
		status
		isInstalledByZeet
		exists
		project {
			id
			project {
				name
			}
			projectEnvironment {
				name
			}
			name
		}
		helmMetadata {
			values
			namespace
			releaseName
			chartRepoGuess
			chartVersion
			chartName
		}
	}
	terraformProjectUrl
	awsAccount {
		id
		name
		accountID
	}
	gcpAccount {
		id
		name
		projectID
	}
	doAccount {
		id
		name
		defaultProject
	}
	cwAccount {
		id
		name
		namespace
	}
	linodeAccount {
		id
		name
		accessTokenPrefix
	}
	azureAccount {
		id
		name
		subscriptionID
	}
	vultrAccount {
		id
		name
	}
	ingressIP
	ingressDNS
	clusterProvider
	cloudProvider
	cloudAccount {
		__typename
		... on AWSAccount {
			id
		}
		... on AzureAccount {
			id
		}
		... on CoreWeaveAccount {
			id
		}
		... on DOAccount {
			id
		}
		... on GCPAccount {
			id
		}
		... on LinodeAccount {
			id
		}
		... on VultrAccount {
			id
		}
	}
	prometheus {
		url
		user
		password
		token
	}
	grafana {
		url
		user
		password
	}
	containerRegistry {
		id
		name
		credentialProvider
		username
	}
	containerRepository
	containerCacheRepository
	updatedAt
	createdAt
	projects {
		... ProjectConnectionComon
	}
	projectV3Adapters {
		... ProjectV3AdapterConnectionCommon
	}
	deployJob {
		id
		state
	}
}
fragment ProjectConnectionComon on ProjectConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		repo {
			... RepoCommon
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func CreateClusterMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateClusterInput,
) (*createClusterResponse, error) {
	req_ := &graphql.Request{
		OpName: "createCluster",
		Query:  createCluster_Operation,
		Variables: &__createClusterInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createClusterResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createDatabase.
const createDatabase_Operation = `
mutation createDatabase ($input: CreateDatabaseInput) {
	createDatabase(input: $input) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func CreateDatabaseMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input *CreateDatabaseInput,
) (*createDatabaseResponse, error) {
	req_ := &graphql.Request{
		OpName: "createDatabase",
		Query:  createDatabase_Operation,
		Variables: &__createDatabaseInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createDatabaseResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createDatadogIntegration.
const createDatadogIntegration_Operation = `
mutation createDatadogIntegration ($input: CreateDatadogIntegrationInput!) {
	createDatadogIntegration(input: $input) {
		id
		... IntegrationCommon
		... on DatadogIntegration {
			apiKey
		}
	}
}
fragment IntegrationCommon on Integration {
	id
	type
	name
	description
	image
	createdAt
	updatedAt
}
`

func CreateDatadogIntegrationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateDatadogIntegrationInput,
) (*createDatadogIntegrationResponse, error) {
	req_ := &graphql.Request{
		OpName: "createDatadogIntegration",
		Query:  createDatadogIntegration_Operation,
		Variables: &__createDatadogIntegrationInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createDatadogIntegrationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createDiscordWebhookIntegration.
const createDiscordWebhookIntegration_Operation = `
mutation createDiscordWebhookIntegration ($input: CreateWebhookIntegrationInput!) {
	createDiscordWebhookIntegrationV2(input: $input) {
		id
		... IntegrationCommon
		... on DiscordWebhookIntegration {
			url
		}
	}
}
fragment IntegrationCommon on Integration {
	id
	type
	name
	description
	image
	createdAt
	updatedAt
}
`

func CreateDiscordWebhookIntegrationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateWebhookIntegrationInput,
) (*createDiscordWebhookIntegrationResponse, error) {
	req_ := &graphql.Request{
		OpName: "createDiscordWebhookIntegration",
		Query:  createDiscordWebhookIntegration_Operation,
		Variables: &__createDiscordWebhookIntegrationInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createDiscordWebhookIntegrationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createEmailIntegration.
const createEmailIntegration_Operation = `
mutation createEmailIntegration ($input: CreateEmailIntegrationInput!) {
	createEmailIntegration(input: $input) {
		id
		... IntegrationCommon
		... on EmailIntegration {
			emailAddress
			activated
		}
	}
}
fragment IntegrationCommon on Integration {
	id
	type
	name
	description
	image
	createdAt
	updatedAt
}
`

func CreateEmailIntegrationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateEmailIntegrationInput,
) (*createEmailIntegrationResponse, error) {
	req_ := &graphql.Request{
		OpName: "createEmailIntegration",
		Query:  createEmailIntegration_Operation,
		Variables: &__createEmailIntegrationInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createEmailIntegrationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createEphemeralContainer.
const createEphemeralContainer_Operation = `
mutation createEphemeralContainer ($deploymentId: UUID!, $input: CreateEphemeralContainerInput!) {
	createEphemeralContainer(deploymentId: $deploymentId, input: $input) {
		name
		image
	}
}
`

func CreateEphemeralContainerMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	deploymentId uuid.UUID,
	input CreateEphemeralContainerInput,
) (*createEphemeralContainerResponse, error) {
	req_ := &graphql.Request{
		OpName: "createEphemeralContainer",
		Query:  createEphemeralContainer_Operation,
		Variables: &__createEphemeralContainerInput{
			DeploymentId: deploymentId,
			Input:        input,
		},
	}
	var err_ error

	var data_ createEphemeralContainerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createGitlabIntegration.
const createGitlabIntegration_Operation = `
mutation createGitlabIntegration ($input: CreateGitlabIntegrationInput!) {
	createGitlabIntegration(input: $input) {
		id
		... IntegrationCommon
		... on GitlabIntegration {
			accessTokenPrefix
			webhookUrl
			webhookToken
		}
	}
}
fragment IntegrationCommon on Integration {
	id
	type
	name
	description
	image
	createdAt
	updatedAt
}
`

func CreateGitlabIntegrationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateGitlabIntegrationInput,
) (*createGitlabIntegrationResponse, error) {
	req_ := &graphql.Request{
		OpName: "createGitlabIntegration",
		Query:  createGitlabIntegration_Operation,
		Variables: &__createGitlabIntegrationInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createGitlabIntegrationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createProject.
const createProject_Operation = `
mutation createProject ($input: CreateProjectInput) {
	createProject(input: $input) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func CreateProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input *CreateProjectInput,
) (*createProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "createProject",
		Query:  createProject_Operation,
		Variables: &__createProjectInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createProjectDocker.
const createProjectDocker_Operation = `
mutation createProjectDocker ($input: CreateProjectDockerInput) {
	createProjectDocker(input: $input) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func CreateProjectDockerMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input *CreateProjectDockerInput,
) (*createProjectDockerResponse, error) {
	req_ := &graphql.Request{
		OpName: "createProjectDocker",
		Query:  createProjectDocker_Operation,
		Variables: &__createProjectDockerInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createProjectDockerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createProjectEnvironment.
const createProjectEnvironment_Operation = `
mutation createProjectEnvironment ($input: CreateProjectEnvironmentInput!) {
	createProjectEnvironment(input: $input) {
		id
		name
	}
}
`

func CreateProjectEnvironmentMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateProjectEnvironmentInput,
) (*createProjectEnvironmentResponse, error) {
	req_ := &graphql.Request{
		OpName: "createProjectEnvironment",
		Query:  createProjectEnvironment_Operation,
		Variables: &__createProjectEnvironmentInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createProjectEnvironmentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createProjectGit.
const createProjectGit_Operation = `
mutation createProjectGit ($input: CreateProjectGitInput) {
	createProjectGit(input: $input) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func CreateProjectGitMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input *CreateProjectGitInput,
) (*createProjectGitResponse, error) {
	req_ := &graphql.Request{
		OpName: "createProjectGit",
		Query:  createProjectGit_Operation,
		Variables: &__createProjectGitInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createProjectGitResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createProjectHelm.
const createProjectHelm_Operation = `
mutation createProjectHelm ($input: CreateProjectHelmInput) {
	createProjectHelm(input: $input) {
		id
		... RepoCommon
	}
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func CreateProjectHelmMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input *CreateProjectHelmInput,
) (*createProjectHelmResponse, error) {
	req_ := &graphql.Request{
		OpName: "createProjectHelm",
		Query:  createProjectHelm_Operation,
		Variables: &__createProjectHelmInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createProjectHelmResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createProjectManifest.
const createProjectManifest_Operation = `
mutation createProjectManifest ($input: CreateManifestAppInput) {
	createManifestApp(input: $input) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func CreateProjectManifestMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input *CreateManifestAppInput,
) (*createProjectManifestResponse, error) {
	req_ := &graphql.Request{
		OpName: "createProjectManifest",
		Query:  createProjectManifest_Operation,
		Variables: &__createProjectManifestInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createProjectManifestResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createProjectTerraform.
const createProjectTerraform_Operation = `
mutation createProjectTerraform ($input: CreateProjectTerraformInput) {
	createProjectTerraform(input: $input) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func CreateProjectTerraformMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input *CreateProjectTerraformInput,
) (*createProjectTerraformResponse, error) {
	req_ := &graphql.Request{
		OpName: "createProjectTerraform",
		Query:  createProjectTerraform_Operation,
		Variables: &__createProjectTerraformInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createProjectTerraformResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createProjectV3.
const createProjectV3_Operation = `
mutation createProjectV3 ($input: CreateProjectV3Input!) {
	createProjectV3(input: $input) {
		... ProjectV3Detail
	}
}
fragment ProjectV3Detail on ProjectV3 {
	id
	requirePlanApproval
	name
	blueprintID
	blueprintConfiguration {
		__typename
		... ProjectBlueprintConfigurationDetail
	}
	configuration {
		__typename
		... on TerraformProjectV3Configuration {
			stateBackend {
				s3Bucket {
					awsAccountID
					bucketName
					region
					key
				}
				gcsBucket {
					gcpAccountID
					bucketName
					location
					prefix
				}
			}
			provider {
				awsAccount {
					id
				}
				gcpAccount {
					id
				}
				region
			}
		}
		... on HelmProjectV3Configuration {
			clusterID
			namespace
			releaseName
			values
		}
		... on ManifestProjectV3Configuration {
			clusterID
			namespace
		}
	}
	variables {
		__typename
		... on BlueprintVariableString {
			id
			variableSpecID
			name
			stringValue: value
		}
		... on BlueprintVariableBoolean {
			id
			variableSpecID
			name
			booleanValue: value
		}
		... on BlueprintVariableInt {
			id
			variableSpecID
			name
			intValue: value
		}
		... on BlueprintVariableFloat {
			id
			variableSpecID
			name
			floatValue: value
		}
		... on BlueprintVariableJSON {
			id
			variableSpecID
			name
			jsonValue: value
		}
	}
	driverWorkflows {
		... BlueprintDriverWorkflowList
	}
}
fragment ProjectBlueprintConfigurationDetail on BlueprintConfiguration {
	... on BlueprintTerraformConfiguration {
		registrySource
		moduleVersionConstraint
		githubSource
		moduleSource {
			source
			version
			integration {
				git {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
	... on BlueprintHelmConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
			helmRepository {
				chart
				version
				repositoryURL
			}
			containerRegistry {
				registryID
				registryURL
				repository
				tag
			}
		}
	}
	... on BlueprintManifestConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
}
fragment BlueprintDriverWorkflowList on BlueprintDriverWorkflow {
	id
	status
	steps {
		... WorkflowStep
	}
	createdAt
	updatedAt
}
fragment WorkflowStep on BlueprintDriverWorkflowStep {
	action
	status
	execution {
		id
		driver
		action
		approvedAt
		jobRun {
			id
			state
			createdAt
			updatedAt
		}
	}
}
`

func CreateProjectV3Mutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateProjectV3Input,
) (*createProjectV3Response, error) {
	req_ := &graphql.Request{
		OpName: "createProjectV3",
		Query:  createProjectV3_Operation,
		Variables: &__createProjectV3Input{
			Input: input,
		},
	}
	var err_ error

	var data_ createProjectV3Response
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createProjectsFromTemplate.
const createProjectsFromTemplate_Operation = `
mutation createProjectsFromTemplate ($input: CreateProjectsFromTemplateInput!) {
	createProjectsFromTemplate(input: $input) {
		id
		... RepoCommon
	}
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func CreateProjectsFromTemplateMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateProjectsFromTemplateInput,
) (*createProjectsFromTemplateResponse, error) {
	req_ := &graphql.Request{
		OpName: "createProjectsFromTemplate",
		Query:  createProjectsFromTemplate_Operation,
		Variables: &__createProjectsFromTemplateInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createProjectsFromTemplateResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createRepoPipelineLink.
const createRepoPipelineLink_Operation = `
mutation createRepoPipelineLink ($input: CreateRepoPipelineLinkInput!) {
	createRepoPipelineLink(input: $input) {
		... RepoPipelineLinkDetail
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
`

func CreateRepoPipelineLinkMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateRepoPipelineLinkInput,
) (*createRepoPipelineLinkResponse, error) {
	req_ := &graphql.Request{
		OpName: "createRepoPipelineLink",
		Query:  createRepoPipelineLink_Operation,
		Variables: &__createRepoPipelineLinkInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createRepoPipelineLinkResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createResourceAlpha.
const createResourceAlpha_Operation = `
mutation createResourceAlpha ($input: CreateResourceAlphaInput!) {
	createResourceAlpha(input: $input) {
		name
		project {
			name
		}
		projectEnvironment {
			name
		}
	}
}
`

func CreateResourceAlphaMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateResourceAlphaInput,
) (*createResourceAlphaResponse, error) {
	req_ := &graphql.Request{
		OpName: "createResourceAlpha",
		Query:  createResourceAlpha_Operation,
		Variables: &__createResourceAlphaInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createResourceAlphaResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createSlackWebhookIntegration.
const createSlackWebhookIntegration_Operation = `
mutation createSlackWebhookIntegration ($input: CreateWebhookIntegrationInput!) {
	createSlackWebhookIntegrationV2(input: $input) {
		id
		... IntegrationCommon
		... on SlackWebhookIntegration {
			url
		}
	}
}
fragment IntegrationCommon on Integration {
	id
	type
	name
	description
	image
	createdAt
	updatedAt
}
`

func CreateSlackWebhookIntegrationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateWebhookIntegrationInput,
) (*createSlackWebhookIntegrationResponse, error) {
	req_ := &graphql.Request{
		OpName: "createSlackWebhookIntegration",
		Query:  createSlackWebhookIntegration_Operation,
		Variables: &__createSlackWebhookIntegrationInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createSlackWebhookIntegrationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createTeam.
const createTeam_Operation = `
mutation createTeam ($input: CreateTeamInput!) {
	createTeam(input: $input) {
		... TeamCommon
	}
}
fragment TeamCommon on Team {
	id
	plan {
		tier
		billingPeriod
	}
	user {
		id
		... UserCommon
	}
}
fragment UserCommon on User {
	id
	... UserPublicCommon
	email
	createdAt
	freeTrialEndsAt
	hasPaymentMethod
	paymentError
	paymentAuthorizationError
	advanced
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func CreateTeamMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateTeamInput,
) (*createTeamResponse, error) {
	req_ := &graphql.Request{
		OpName: "createTeam",
		Query:  createTeam_Operation,
		Variables: &__createTeamInput{
			Input: input,
		},
	}
	var err_ error

	var data_ createTeamResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by currentUsageMetrics.
const currentUsageMetrics_Operation = `
query currentUsageMetrics ($id: ID!, $teamID: ID!, $permissionsUserId: UUID!, $pageInput: PageInput!) {
	user(id: $id) {
		id
		projectV3Adapters(filter: {filter:{}}) {
			totalCount
		}
		clusters {
			id
			... ClusterDetail
		}
		awsAccounts {
			id
		}
		coreweaveAccounts {
			id
		}
		doAccounts {
			id
		}
		gcpAccounts {
			id
		}
		linodeAccounts {
			id
		}
		vultrAccounts {
			id
		}
		blueprints(page: $pageInput) {
			totalCount
			nodes {
				owner {
					login
				}
			}
		}
	}
	currentUser {
		permissions {
			user(userID: $permissionsUserId) {
				mutations
			}
		}
		team(id: $teamID) {
			id
			... TeamMember
		}
	}
}
fragment ClusterDetail on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	isEjected
	components {
		name
		type
		status
		isInstalledByZeet
		exists
		project {
			id
			project {
				name
			}
			projectEnvironment {
				name
			}
			name
		}
		helmMetadata {
			values
			namespace
			releaseName
			chartRepoGuess
			chartVersion
			chartName
		}
	}
	terraformProjectUrl
	awsAccount {
		id
		name
		accountID
	}
	gcpAccount {
		id
		name
		projectID
	}
	doAccount {
		id
		name
		defaultProject
	}
	cwAccount {
		id
		name
		namespace
	}
	linodeAccount {
		id
		name
		accessTokenPrefix
	}
	azureAccount {
		id
		name
		subscriptionID
	}
	vultrAccount {
		id
		name
	}
	ingressIP
	ingressDNS
	clusterProvider
	cloudProvider
	cloudAccount {
		__typename
		... on AWSAccount {
			id
		}
		... on AzureAccount {
			id
		}
		... on CoreWeaveAccount {
			id
		}
		... on DOAccount {
			id
		}
		... on GCPAccount {
			id
		}
		... on LinodeAccount {
			id
		}
		... on VultrAccount {
			id
		}
	}
	prometheus {
		url
		user
		password
		token
	}
	grafana {
		url
		user
		password
	}
	containerRegistry {
		id
		name
		credentialProvider
		username
	}
	containerRepository
	containerCacheRepository
	updatedAt
	createdAt
	projects {
		... ProjectConnectionComon
	}
	projectV3Adapters {
		... ProjectV3AdapterConnectionCommon
	}
	deployJob {
		id
		state
	}
}
fragment TeamMember on Team {
	id
	members {
		id
		user {
			... UserPublicCommon
		}
		role
	}
	memberInvitations {
		id
		... TeamInvite
	}
}
fragment ProjectConnectionComon on ProjectConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		repo {
			... RepoCommon
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment TeamInvite on TeamMemberInvitation {
	id
	role
	link
	email
	expiresAt
	createdAt
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func CurrentUsageMetricsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	teamID uuid.UUID,
	permissionsUserId uuid.UUID,
	pageInput PageInput,
) (*currentUsageMetricsResponse, error) {
	req_ := &graphql.Request{
		OpName: "currentUsageMetrics",
		Query:  currentUsageMetrics_Operation,
		Variables: &__currentUsageMetricsInput{
			Id:                id,
			TeamID:            teamID,
			PermissionsUserId: permissionsUserId,
			PageInput:         pageInput,
		},
	}
	var err_ error

	var data_ currentUsageMetricsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by currentUser.
const currentUser_Operation = `
query currentUser {
	currentUser {
		id
		... UserDetail
	}
}
fragment UserDetail on User {
	id
	... UserCommon
	hasZeetCloud
	hasOnboarded
	canDeploy
}
fragment UserCommon on User {
	id
	... UserPublicCommon
	email
	createdAt
	freeTrialEndsAt
	hasPaymentMethod
	paymentError
	paymentAuthorizationError
	advanced
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func CurrentUserQuery(
	ctx_ context.Context,
	client_ graphql.Client,
) (*currentUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "currentUser",
		Query:  currentUser_Operation,
	}
	var err_ error

	var data_ currentUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteAPIKey.
const deleteAPIKey_Operation = `
mutation deleteAPIKey ($id: UUID!) {
	deleteAPIKey(id: $id)
}
`

func DeleteAPIKeyMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deleteAPIKeyResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteAPIKey",
		Query:  deleteAPIKey_Operation,
		Variables: &__deleteAPIKeyInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deleteAPIKeyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteBlueprint.
const deleteBlueprint_Operation = `
mutation deleteBlueprint ($id: UUID!) {
	deleteBlueprint(id: $id)
}
`

func DeleteBlueprintMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deleteBlueprintResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteBlueprint",
		Query:  deleteBlueprint_Operation,
		Variables: &__deleteBlueprintInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deleteBlueprintResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteCluster.
const deleteCluster_Operation = `
mutation deleteCluster ($id: UUID!) {
	deleteCluster(id: $id)
}
`

func DeleteClusterMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deleteClusterResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteCluster",
		Query:  deleteCluster_Operation,
		Variables: &__deleteClusterInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deleteClusterResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteIntegration.
const deleteIntegration_Operation = `
mutation deleteIntegration ($input: RemoveUserIntegrationInput!) {
	removeUserIntegration(input: $input)
}
`

func DeleteIntegrationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input RemoveUserIntegrationInput,
) (*deleteIntegrationResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteIntegration",
		Query:  deleteIntegration_Operation,
		Variables: &__deleteIntegrationInput{
			Input: input,
		},
	}
	var err_ error

	var data_ deleteIntegrationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteProject.
const deleteProject_Operation = `
mutation deleteProject ($id: ID!) {
	deleteRepo(id: $id)
}
`

func DeleteProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deleteProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteProject",
		Query:  deleteProject_Operation,
		Variables: &__deleteProjectInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deleteProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteProjectBranch.
const deleteProjectBranch_Operation = `
mutation deleteProjectBranch ($id: UUID!, $branch: String!) {
	deleteProjectBranch(id: $id, branch: $branch)
}
`

func DeleteProjectBranchMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	branch string,
) (*deleteProjectBranchResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteProjectBranch",
		Query:  deleteProjectBranch_Operation,
		Variables: &__deleteProjectBranchInput{
			Id:     id,
			Branch: branch,
		},
	}
	var err_ error

	var data_ deleteProjectBranchResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteProjectEnvironment.
const deleteProjectEnvironment_Operation = `
mutation deleteProjectEnvironment ($id: UUID!) {
	deleteProjectEnvironment(id: $id)
}
`

func DeleteProjectEnvironmentMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deleteProjectEnvironmentResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteProjectEnvironment",
		Query:  deleteProjectEnvironment_Operation,
		Variables: &__deleteProjectEnvironmentInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deleteProjectEnvironmentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteProjectV2.
const deleteProjectV2_Operation = `
mutation deleteProjectV2 ($id: UUID!) {
	deleteProjectV2(id: $id)
}
`

func DeleteProjectV2Mutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deleteProjectV2Response, error) {
	req_ := &graphql.Request{
		OpName: "deleteProjectV2",
		Query:  deleteProjectV2_Operation,
		Variables: &__deleteProjectV2Input{
			Id: id,
		},
	}
	var err_ error

	var data_ deleteProjectV2Response
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteProjectV3.
const deleteProjectV3_Operation = `
mutation deleteProjectV3 ($id: UUID!) {
	deleteProjectV3(id: $id)
}
`

func DeleteProjectV3Mutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deleteProjectV3Response, error) {
	req_ := &graphql.Request{
		OpName: "deleteProjectV3",
		Query:  deleteProjectV3_Operation,
		Variables: &__deleteProjectV3Input{
			Id: id,
		},
	}
	var err_ error

	var data_ deleteProjectV3Response
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteRepoPipelineLink.
const deleteRepoPipelineLink_Operation = `
mutation deleteRepoPipelineLink ($id: UUID!) {
	deleteRepoPipelineLink(id: $id)
}
`

func DeleteRepoPipelineLinkMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deleteRepoPipelineLinkResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteRepoPipelineLink",
		Query:  deleteRepoPipelineLink_Operation,
		Variables: &__deleteRepoPipelineLinkInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deleteRepoPipelineLinkResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteTeam.
const deleteTeam_Operation = `
mutation deleteTeam ($id: UUID!) {
	deleteTeam(id: $id)
}
`

func DeleteTeamMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deleteTeamResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteTeam",
		Query:  deleteTeam_Operation,
		Variables: &__deleteTeamInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deleteTeamResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteTeamMemberInvitation.
const deleteTeamMemberInvitation_Operation = `
mutation deleteTeamMemberInvitation ($id: UUID!) {
	deleteTeamMemberInvitation(id: $id)
}
`

func DeleteTeamMemberInvitationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deleteTeamMemberInvitationResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteTeamMemberInvitation",
		Query:  deleteTeamMemberInvitation_Operation,
		Variables: &__deleteTeamMemberInvitationInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deleteTeamMemberInvitationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteUser.
const deleteUser_Operation = `
mutation deleteUser {
	deleteUser
}
`

func DeleteUserMutation(
	ctx_ context.Context,
	client_ graphql.Client,
) (*deleteUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteUser",
		Query:  deleteUser_Operation,
	}
	var err_ error

	var data_ deleteUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deployRepoBranch.
const deployRepoBranch_Operation = `
mutation deployRepoBranch ($input: DeployRepoBranchInput!) {
	deployRepoBranch(input: $input) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func DeployRepoBranchMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input DeployRepoBranchInput,
) (*deployRepoBranchResponse, error) {
	req_ := &graphql.Request{
		OpName: "deployRepoBranch",
		Query:  deployRepoBranch_Operation,
		Variables: &__deployRepoBranchInput{
			Input: input,
		},
	}
	var err_ error

	var data_ deployRepoBranchResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deployTemplates.
const deployTemplates_Operation = `
query deployTemplates ($id: ID!) {
	currentUser {
		id
		deployment(id: $id) {
			id
			deployTemplates {
				output
				type
			}
		}
	}
}
`

func DeployTemplatesQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deployTemplatesResponse, error) {
	req_ := &graphql.Request{
		OpName: "deployTemplates",
		Query:  deployTemplates_Operation,
		Variables: &__deployTemplatesInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deployTemplatesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deployTemplatesExist.
const deployTemplatesExist_Operation = `
query deployTemplatesExist ($id: ID!) {
	currentUser {
		id
		deployment(id: $id) {
			id
			deployTemplates {
				type
			}
		}
	}
}
`

func DeployTemplatesExistQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deployTemplatesExistResponse, error) {
	req_ := &graphql.Request{
		OpName: "deployTemplatesExist",
		Query:  deployTemplatesExist_Operation,
		Variables: &__deployTemplatesExistInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deployTemplatesExistResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deploymentAlert.
const deploymentAlert_Operation = `
query deploymentAlert ($deploymentId: ID!, $alertId: UUID!) {
	currentUser {
		id
		deployment(id: $deploymentId) {
			alert(id: $alertId) {
				__typename
				... DeploymentAlertDetail
			}
		}
	}
}
fragment DeploymentAlertDetail on DeploymentAlert {
	createdAt
	resolvedAt
	... on DeploymentPodCrashAlert {
		namespace
		podName
		previousPodLogs {
			entries {
				text
			}
		}
	}
}
`

func DeploymentAlertQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	deploymentId uuid.UUID,
	alertId uuid.UUID,
) (*deploymentAlertResponse, error) {
	req_ := &graphql.Request{
		OpName: "deploymentAlert",
		Query:  deploymentAlert_Operation,
		Variables: &__deploymentAlertInput{
			DeploymentId: deploymentId,
			AlertId:      alertId,
		},
	}
	var err_ error

	var data_ deploymentAlertResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deploymentBuildLogs.
const deploymentBuildLogs_Operation = `
query deploymentBuildLogs ($id: ID!) {
	currentUser {
		id
		deployment(id: $id) {
			id
			... DeploymentBuildLogs
		}
	}
}
fragment DeploymentBuildLogs on Deployment {
	build {
		id
		errorMessage
		logs {
			id
			completed
			expired
			entries {
				timestamp
				text
			}
		}
	}
}
`

func DeploymentBuildLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deploymentBuildLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "deploymentBuildLogs",
		Query:  deploymentBuildLogs_Operation,
		Variables: &__deploymentBuildLogsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deploymentBuildLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deploymentBuildLogsAdded.
const deploymentBuildLogsAdded_Operation = `
subscription deploymentBuildLogsAdded ($input: BuildLogsInput!) {
	deploymentBuildLogsAdded(input: $input) {
		text
		timestamp
	}
}
`

func DeploymentBuildLogsAddedSubscription(
	ctx_ context.Context,
	client_ graphql.Client,
	input BuildLogsInput,
) (*deploymentBuildLogsAddedResponse, error) {
	req_ := &graphql.Request{
		OpName: "deploymentBuildLogsAdded",
		Query:  deploymentBuildLogsAdded_Operation,
		Variables: &__deploymentBuildLogsAddedInput{
			Input: input,
		},
	}
	var err_ error

	var data_ deploymentBuildLogsAddedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deploymentBuildMetrics.
const deploymentBuildMetrics_Operation = `
subscription deploymentBuildMetrics ($deploymentID: ID!) {
	deploymentUpdated(id: $deploymentID) {
		id
		build {
			id
			cpuMetrics: metrics(name: "cpu") {
				timestamp
				value
			}
			memoryMetrics: metrics(name: "memory") {
				timestamp
				value
			}
		}
	}
}
`

func DeploymentBuildMetricsSubscription(
	ctx_ context.Context,
	client_ graphql.Client,
	deploymentID uuid.UUID,
) (*deploymentBuildMetricsResponse, error) {
	req_ := &graphql.Request{
		OpName: "deploymentBuildMetrics",
		Query:  deploymentBuildMetrics_Operation,
		Variables: &__deploymentBuildMetricsInput{
			DeploymentID: deploymentID,
		},
	}
	var err_ error

	var data_ deploymentBuildMetricsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deploymentDeployLogs.
const deploymentDeployLogs_Operation = `
query deploymentDeployLogs ($id: ID!) {
	currentUser {
		id
		deployment(id: $id) {
			id
			deployStage {
				id
				logs {
					id
					completed
					expired
					entries {
						timestamp
						text
					}
				}
			}
		}
	}
}
`

func DeploymentDeployLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deploymentDeployLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "deploymentDeployLogs",
		Query:  deploymentDeployLogs_Operation,
		Variables: &__deploymentDeployLogsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deploymentDeployLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deploymentLogs.
const deploymentLogs_Operation = `
query deploymentLogs ($repoID: ID!, $deploymentID: ID!) {
	currentUser {
		id
		repo(id: $repoID) {
			id
			deployment(id: $deploymentID) {
				id
				logs {
					timestamp
					text
				}
				logsV2 {
					previous {
						timestamp
						text
					}
					current {
						timestamp
						text
					}
				}
				awsLinks {
					cloudwatchLogs
				}
				gcpLinks {
					cloudLogging
				}
			}
		}
	}
}
`

func DeploymentLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	repoID uuid.UUID,
	deploymentID uuid.UUID,
) (*deploymentLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "deploymentLogs",
		Query:  deploymentLogs_Operation,
		Variables: &__deploymentLogsInput{
			RepoID:       repoID,
			DeploymentID: deploymentID,
		},
	}
	var err_ error

	var data_ deploymentLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deploymentMetrics.
const deploymentMetrics_Operation = `
query deploymentMetrics ($repoID: ID!, $deploymentID: ID!, $name: String!) {
	currentUser {
		id
		repo(id: $repoID) {
			id
			deployment(id: $deploymentID) {
				id
				metrics(name: $name) {
					timestamp
					value
				}
			}
		}
	}
}
`

func DeploymentMetricsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	repoID uuid.UUID,
	deploymentID uuid.UUID,
	name string,
) (*deploymentMetricsResponse, error) {
	req_ := &graphql.Request{
		OpName: "deploymentMetrics",
		Query:  deploymentMetrics_Operation,
		Variables: &__deploymentMetricsInput{
			RepoID:       repoID,
			DeploymentID: deploymentID,
			Name:         name,
		},
	}
	var err_ error

	var data_ deploymentMetricsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deploymentReleaseLogs.
const deploymentReleaseLogs_Operation = `
query deploymentReleaseLogs ($id: ID!) {
	currentUser {
		id
		deployment(id: $id) {
			id
			releaseStage {
				id
				logs {
					id
					completed
					expired
					entries {
						timestamp
						text
					}
				}
			}
		}
	}
}
`

func DeploymentReleaseLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deploymentReleaseLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "deploymentReleaseLogs",
		Query:  deploymentReleaseLogs_Operation,
		Variables: &__deploymentReleaseLogsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deploymentReleaseLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deploymentUpdated.
const deploymentUpdated_Operation = `
subscription deploymentUpdated ($id: ID!) {
	deploymentUpdated(id: $id) {
		id
		status
		endpoints
		build {
			id
		}
	}
}
`

func DeploymentUpdatedSubscription(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*deploymentUpdatedResponse, error) {
	req_ := &graphql.Request{
		OpName: "deploymentUpdated",
		Query:  deploymentUpdated_Operation,
		Variables: &__deploymentUpdatedInput{
			Id: id,
		},
	}
	var err_ error

	var data_ deploymentUpdatedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by disableProject.
const disableProject_Operation = `
mutation disableProject ($id: ID!) {
	disableRepo(id: $id) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func DisableProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*disableProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "disableProject",
		Query:  disableProject_Operation,
		Variables: &__disableProjectInput{
			Id: id,
		},
	}
	var err_ error

	var data_ disableProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by dockerInfo.
const dockerInfo_Operation = `
query dockerInfo ($image: String!) {
	currentUser {
		id
		dockerRepository(image: $image) {
			id
			name
			url
			ports {
				port
				protocol
				public
				https
			}
			volumes {
				mountPath
				size
			}
		}
	}
}
`

func DockerInfoQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	image string,
) (*dockerInfoResponse, error) {
	req_ := &graphql.Request{
		OpName: "dockerInfo",
		Query:  dockerInfo_Operation,
		Variables: &__dockerInfoInput{
			Image: image,
		},
	}
	var err_ error

	var data_ dockerInfoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by dockerRepositoryPorts.
const dockerRepositoryPorts_Operation = `
query dockerRepositoryPorts ($image: String!) {
	dockerRepository(image: $image) {
		id
		ports {
			port
			protocol
			public
			https
		}
	}
}
`

func DockerRepositoryPortsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	image string,
) (*dockerRepositoryPortsResponse, error) {
	req_ := &graphql.Request{
		OpName: "dockerRepositoryPorts",
		Query:  dockerRepositoryPorts_Operation,
		Variables: &__dockerRepositoryPortsInput{
			Image: image,
		},
	}
	var err_ error

	var data_ dockerRepositoryPortsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by duplicateBlueprint.
const duplicateBlueprint_Operation = `
mutation duplicateBlueprint ($input: DuplicateBlueprintInput!) {
	duplicateBlueprint(input: $input) {
		id
	}
}
`

func DuplicateBlueprintMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input DuplicateBlueprintInput,
) (*duplicateBlueprintResponse, error) {
	req_ := &graphql.Request{
		OpName: "duplicateBlueprint",
		Query:  duplicateBlueprint_Operation,
		Variables: &__duplicateBlueprintInput{
			Input: input,
		},
	}
	var err_ error

	var data_ duplicateBlueprintResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by duplicateProjectV3.
const duplicateProjectV3_Operation = `
mutation duplicateProjectV3 ($input: DuplicateProjectV3Input!) {
	duplicateProjectV3(input: $input) {
		id
		name
		project {
			name
		}
		projectEnvironment {
			name
		}
	}
}
`

func DuplicateProjectV3Mutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input DuplicateProjectV3Input,
) (*duplicateProjectV3Response, error) {
	req_ := &graphql.Request{
		OpName: "duplicateProjectV3",
		Query:  duplicateProjectV3_Operation,
		Variables: &__duplicateProjectV3Input{
			Input: input,
		},
	}
	var err_ error

	var data_ duplicateProjectV3Response
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by enableProject.
const enableProject_Operation = `
mutation enableProject ($id: ID!) {
	enableRepo(id: $id) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func EnableProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*enableProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "enableProject",
		Query:  enableProject_Operation,
		Variables: &__enableProjectInput{
			Id: id,
		},
	}
	var err_ error

	var data_ enableProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ensureCloudqueryEnabled.
const ensureCloudqueryEnabled_Operation = `
mutation ensureCloudqueryEnabled ($awsAccountId: UUID!) {
	ensureCloudqueryEnabled(awsAccountId: $awsAccountId)
}
`

func EnsureCloudqueryEnabledMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	awsAccountId uuid.UUID,
) (*ensureCloudqueryEnabledResponse, error) {
	req_ := &graphql.Request{
		OpName: "ensureCloudqueryEnabled",
		Query:  ensureCloudqueryEnabled_Operation,
		Variables: &__ensureCloudqueryEnabledInput{
			AwsAccountId: awsAccountId,
		},
	}
	var err_ error

	var data_ ensureCloudqueryEnabledResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by environmentEnvironmentVariables.
const environmentEnvironmentVariables_Operation = `
query environmentEnvironmentVariables ($path: String!, $env: String!) {
	project(path: $path) {
		id
		envs {
			... EnvVarDetail
		}
		environment(name: $env) {
			id
			envs {
				... EnvVarDetail
			}
		}
	}
}
fragment EnvVarDetail on EnvVar {
	id
	name
	value
	visible
	sealed
	source {
		type
	}
}
`

func EnvironmentEnvironmentVariablesQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
	env string,
) (*environmentEnvironmentVariablesResponse, error) {
	req_ := &graphql.Request{
		OpName: "environmentEnvironmentVariables",
		Query:  environmentEnvironmentVariables_Operation,
		Variables: &__environmentEnvironmentVariablesInput{
			Path: path,
			Env:  env,
		},
	}
	var err_ error

	var data_ environmentEnvironmentVariablesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by freeQuota.
const freeQuota_Operation = `
query freeQuota ($id: ID!) {
	user(id: $id) {
		id
		freeQuota
	}
}
`

func FreeQuotaQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*freeQuotaResponse, error) {
	req_ := &graphql.Request{
		OpName: "freeQuota",
		Query:  freeQuota_Operation,
		Variables: &__freeQuotaInput{
			Id: id,
		},
	}
	var err_ error

	var data_ freeQuotaResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by freeTierEligible.
const freeTierEligible_Operation = `
query freeTierEligible ($input: CheckPriceInput!) {
	checkPrice(input: $input) {
		canBeFreeTier
	}
	currentUser {
		id
		freeQuota
	}
}
`

func FreeTierEligibleQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	input CheckPriceInput,
) (*freeTierEligibleResponse, error) {
	req_ := &graphql.Request{
		OpName: "freeTierEligible",
		Query:  freeTierEligible_Operation,
		Variables: &__freeTierEligibleInput{
			Input: input,
		},
	}
	var err_ error

	var data_ freeTierEligibleResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by generateDownloadableLogLink.
const generateDownloadableLogLink_Operation = `
mutation generateDownloadableLogLink ($deploymentID: UUID!) {
	generateDownloadableLogLink(deploymentID: $deploymentID)
}
`

func GenerateDownloadableLogLinkMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	deploymentID uuid.UUID,
) (*generateDownloadableLogLinkResponse, error) {
	req_ := &graphql.Request{
		OpName: "generateDownloadableLogLink",
		Query:  generateDownloadableLogLink_Operation,
		Variables: &__generateDownloadableLogLinkInput{
			DeploymentID: deploymentID,
		},
	}
	var err_ error

	var data_ generateDownloadableLogLinkResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getPriceTotal.
const getPriceTotal_Operation = `
query getPriceTotal ($input: CheckPriceInput!) {
	checkPrice(input: $input) {
		total {
			explanation
			cost
		}
		subTotal {
			explanation
			cost
		}
	}
}
`

func GetPriceTotalQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	input CheckPriceInput,
) (*getPriceTotalResponse, error) {
	req_ := &graphql.Request{
		OpName: "getPriceTotal",
		Query:  getPriceTotal_Operation,
		Variables: &__getPriceTotalInput{
			Input: input,
		},
	}
	var err_ error

	var data_ getPriceTotalResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by githubRepoPort.
const githubRepoPort_Operation = `
query githubRepoPort ($installationId: ID!, $owner: String!, $repo: String!) {
	currentUser {
		id
		githubRepository(installationID: $installationId, owner: $owner, repo: $repo) {
			id
			ports {
				https
				port
				protocol
				public
			}
		}
	}
}
`

func GithubRepoPortQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	installationId uuid.UUID,
	owner string,
	repo string,
) (*githubRepoPortResponse, error) {
	req_ := &graphql.Request{
		OpName: "githubRepoPort",
		Query:  githubRepoPort_Operation,
		Variables: &__githubRepoPortInput{
			InstallationId: installationId,
			Owner:          owner,
			Repo:           repo,
		},
	}
	var err_ error

	var data_ githubRepoPortResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by helmChart.
const helmChart_Operation = `
query helmChart ($url: String!, $name: String!) {
	helmRepository(url: $url) {
		id
		chart(name: $name) {
			id
			... HelmCommon
		}
	}
}
fragment HelmCommon on HelmChart {
	id
	name
	description
	logoImage
	version
	app_version
	repository {
		id
		name
		url
	}
}
`

func HelmChartQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	url string,
	name string,
) (*helmChartResponse, error) {
	req_ := &graphql.Request{
		OpName: "helmChart",
		Query:  helmChart_Operation,
		Variables: &__helmChartInput{
			Url:  url,
			Name: name,
		},
	}
	var err_ error

	var data_ helmChartResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by inviteTeamMember.
const inviteTeamMember_Operation = `
mutation inviteTeamMember ($input: InviteTeamMemberInput!) {
	inviteTeamMember(input: $input) {
		id
		... TeamInvite
	}
}
fragment TeamInvite on TeamMemberInvitation {
	id
	role
	link
	email
	expiresAt
	createdAt
}
`

func InviteTeamMemberMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input InviteTeamMemberInput,
) (*inviteTeamMemberResponse, error) {
	req_ := &graphql.Request{
		OpName: "inviteTeamMember",
		Query:  inviteTeamMember_Operation,
		Variables: &__inviteTeamMemberInput{
			Input: input,
		},
	}
	var err_ error

	var data_ inviteTeamMemberResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by lambdaCloudRunBlueprints.
const lambdaCloudRunBlueprints_Operation = `
query lambdaCloudRunBlueprints ($owner: Login!, $lambdaBlueprintSlug: String!, $cloudRunBlueprintSlug: String!) {
	blueprintsMarketplace {
		lambdaBlueprint: blueprint(owner: $owner, slug: $lambdaBlueprintSlug) {
			... BlueprintList
		}
		cloudRunBlueprint: blueprint(owner: $owner, slug: $cloudRunBlueprintSlug) {
			... BlueprintList
		}
	}
}
fragment BlueprintList on Blueprint {
	id
	description
	displayName
	isOfficial
	logoUrl
	enabled
	published
	projectCount
	richInputSchema
	allowedCloudProviders
	slug
	tags
	type
	configuration {
		__typename
		... ProjectBlueprintConfigurationDetail
	}
	owner {
		name
		login
	}
	variables {
		id
		name
		type
		required
	}
}
fragment ProjectBlueprintConfigurationDetail on BlueprintConfiguration {
	... on BlueprintTerraformConfiguration {
		registrySource
		moduleVersionConstraint
		githubSource
		moduleSource {
			source
			version
			integration {
				git {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
	... on BlueprintHelmConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
			helmRepository {
				chart
				version
				repositoryURL
			}
			containerRegistry {
				registryID
				registryURL
				repository
				tag
			}
		}
	}
	... on BlueprintManifestConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
}
`

func LambdaCloudRunBlueprintsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	owner string,
	lambdaBlueprintSlug string,
	cloudRunBlueprintSlug string,
) (*lambdaCloudRunBlueprintsResponse, error) {
	req_ := &graphql.Request{
		OpName: "lambdaCloudRunBlueprints",
		Query:  lambdaCloudRunBlueprints_Operation,
		Variables: &__lambdaCloudRunBlueprintsInput{
			Owner:                 owner,
			LambdaBlueprintSlug:   lambdaBlueprintSlug,
			CloudRunBlueprintSlug: cloudRunBlueprintSlug,
		},
	}
	var err_ error

	var data_ lambdaCloudRunBlueprintsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by linkDatabase.
const linkDatabase_Operation = `
mutation linkDatabase ($input: LinkDatabaseInput!) {
	linkDatabase(input: $input) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func LinkDatabaseMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input LinkDatabaseInput,
) (*linkDatabaseResponse, error) {
	req_ := &graphql.Request{
		OpName: "linkDatabase",
		Query:  linkDatabase_Operation,
		Variables: &__linkDatabaseInput{
			Input: input,
		},
	}
	var err_ error

	var data_ linkDatabaseResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by loggedOutDockerInfo.
const loggedOutDockerInfo_Operation = `
query loggedOutDockerInfo ($image: String!) {
	dockerRepository(image: $image) {
		id
		name
		url
		ports {
			port
			protocol
			public
			https
		}
		volumes {
			mountPath
			size
		}
	}
}
`

func LoggedOutDockerInfoQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	image string,
) (*loggedOutDockerInfoResponse, error) {
	req_ := &graphql.Request{
		OpName: "loggedOutDockerInfo",
		Query:  loggedOutDockerInfo_Operation,
		Variables: &__loggedOutDockerInfoInput{
			Image: image,
		},
	}
	var err_ error

	var data_ loggedOutDockerInfoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by marketplaceBlueprint.
const marketplaceBlueprint_Operation = `
query marketplaceBlueprint ($owner: Login!, $slug: String!) {
	blueprintsMarketplace {
		blueprint(owner: $owner, slug: $slug) {
			... BlueprintList
		}
	}
}
fragment BlueprintList on Blueprint {
	id
	description
	displayName
	isOfficial
	logoUrl
	enabled
	published
	projectCount
	richInputSchema
	allowedCloudProviders
	slug
	tags
	type
	configuration {
		__typename
		... ProjectBlueprintConfigurationDetail
	}
	owner {
		name
		login
	}
	variables {
		id
		name
		type
		required
	}
}
fragment ProjectBlueprintConfigurationDetail on BlueprintConfiguration {
	... on BlueprintTerraformConfiguration {
		registrySource
		moduleVersionConstraint
		githubSource
		moduleSource {
			source
			version
			integration {
				git {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
	... on BlueprintHelmConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
			helmRepository {
				chart
				version
				repositoryURL
			}
			containerRegistry {
				registryID
				registryURL
				repository
				tag
			}
		}
	}
	... on BlueprintManifestConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
}
`

func MarketplaceBlueprintQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	owner string,
	slug string,
) (*marketplaceBlueprintResponse, error) {
	req_ := &graphql.Request{
		OpName: "marketplaceBlueprint",
		Query:  marketplaceBlueprint_Operation,
		Variables: &__marketplaceBlueprintInput{
			Owner: owner,
			Slug:  slug,
		},
	}
	var err_ error

	var data_ marketplaceBlueprintResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by marketplaceBlueprintMetadata.
const marketplaceBlueprintMetadata_Operation = `
query marketplaceBlueprintMetadata ($owner: Login, $slug: String!, $version: String) {
	blueprintsMarketplace {
		blueprintMetadata(owner: $owner, slug: $slug, version: $version) {
			... BlueprintMetadataList
		}
	}
}
fragment BlueprintMetadataList on BlueprintMetadata {
	id
	slug
	name
	displayName
	type
	description
	tags
	logoUrl
	metatags {
		name
		value
	}
	version
	versions {
		version
		prerelease
		timestamp
	}
	latestVersion
	availableVersions
	applicationVersion
	organizationName
	organizationDisplayName
	createdAt
	updatedAt
}
`

func MarketplaceBlueprintMetadataQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	owner *string,
	slug string,
	version *string,
) (*marketplaceBlueprintMetadataResponse, error) {
	req_ := &graphql.Request{
		OpName: "marketplaceBlueprintMetadata",
		Query:  marketplaceBlueprintMetadata_Operation,
		Variables: &__marketplaceBlueprintMetadataInput{
			Owner:   owner,
			Slug:    slug,
			Version: version,
		},
	}
	var err_ error

	var data_ marketplaceBlueprintMetadataResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by marketplaceBlueprintMetadataList.
const marketplaceBlueprintMetadataList_Operation = `
query marketplaceBlueprintMetadataList ($filterInput: FilterInput!) {
	blueprintsMarketplace {
		blueprintMetadataList(filter: $filterInput) {
			totalCount
			pageInfo {
				startCursor
				endCursor
				hasNextPage
				hasPreviousPage
			}
			nodes {
				... BlueprintMetadataList
			}
		}
	}
}
fragment BlueprintMetadataList on BlueprintMetadata {
	id
	slug
	name
	displayName
	type
	description
	tags
	logoUrl
	metatags {
		name
		value
	}
	version
	versions {
		version
		prerelease
		timestamp
	}
	latestVersion
	availableVersions
	applicationVersion
	organizationName
	organizationDisplayName
	createdAt
	updatedAt
}
`

func MarketplaceBlueprintMetadataListQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	filterInput FilterInput,
) (*marketplaceBlueprintMetadataListResponse, error) {
	req_ := &graphql.Request{
		OpName: "marketplaceBlueprintMetadataList",
		Query:  marketplaceBlueprintMetadataList_Operation,
		Variables: &__marketplaceBlueprintMetadataListInput{
			FilterInput: filterInput,
		},
	}
	var err_ error

	var data_ marketplaceBlueprintMetadataListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by marketplaceBlueprints.
const marketplaceBlueprints_Operation = `
query marketplaceBlueprints ($pageInput: PageInput!) {
	blueprintsMarketplace {
		blueprints(page: $pageInput) {
			nodes {
				... BlueprintList
			}
		}
	}
}
fragment BlueprintList on Blueprint {
	id
	description
	displayName
	isOfficial
	logoUrl
	enabled
	published
	projectCount
	richInputSchema
	allowedCloudProviders
	slug
	tags
	type
	configuration {
		__typename
		... ProjectBlueprintConfigurationDetail
	}
	owner {
		name
		login
	}
	variables {
		id
		name
		type
		required
	}
}
fragment ProjectBlueprintConfigurationDetail on BlueprintConfiguration {
	... on BlueprintTerraformConfiguration {
		registrySource
		moduleVersionConstraint
		githubSource
		moduleSource {
			source
			version
			integration {
				git {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
	... on BlueprintHelmConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
			helmRepository {
				chart
				version
				repositoryURL
			}
			containerRegistry {
				registryID
				registryURL
				repository
				tag
			}
		}
	}
	... on BlueprintManifestConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
}
`

func MarketplaceBlueprintsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	pageInput PageInput,
) (*marketplaceBlueprintsResponse, error) {
	req_ := &graphql.Request{
		OpName: "marketplaceBlueprints",
		Query:  marketplaceBlueprints_Operation,
		Variables: &__marketplaceBlueprintsInput{
			PageInput: pageInput,
		},
	}
	var err_ error

	var data_ marketplaceBlueprintsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by maybeCreateBlueprintFromMetadata.
const maybeCreateBlueprintFromMetadata_Operation = `
mutation maybeCreateBlueprintFromMetadata ($slug: String!, $version: String!) {
	maybeCreateBlueprintFromMetadata(slug: $slug, version: $version) {
		id
	}
}
`

func MaybeCreateBlueprintFromMetadataMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	slug string,
	version string,
) (*maybeCreateBlueprintFromMetadataResponse, error) {
	req_ := &graphql.Request{
		OpName: "maybeCreateBlueprintFromMetadata",
		Query:  maybeCreateBlueprintFromMetadata_Operation,
		Variables: &__maybeCreateBlueprintFromMetadataInput{
			Slug:    slug,
			Version: version,
		},
	}
	var err_ error

	var data_ maybeCreateBlueprintFromMetadataResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by monthlyCostForServices.
const monthlyCostForServices_Operation = `
query monthlyCostForServices ($awsAccountId: UUID!, $services: [String!]!) {
	withoutCredit: awsCostUsage2(awsAccountId: $awsAccountId, where: {granularity:"MONTHLY",dimensionType1:"SERVICE",dimensionType2:"RECORD_TYPE",dimension2NotIn:["Credit"],dimension1In:$services}) {
		service
		unblendedCostAmount
		unblendedCostUnit
		periodStart
		periodEnd
	}
	withCredit: awsCostByService(awsAccountId: $awsAccountId, where: {services:$services}) {
		service
		unblendedCostAmount
		unblendedCostUnit
		periodStart
		periodEnd
	}
}
`

func MonthlyCostForServicesQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	awsAccountId uuid.UUID,
	services []string,
) (*monthlyCostForServicesResponse, error) {
	req_ := &graphql.Request{
		OpName: "monthlyCostForServices",
		Query:  monthlyCostForServices_Operation,
		Variables: &__monthlyCostForServicesInput{
			AwsAccountId: awsAccountId,
			Services:     services,
		},
	}
	var err_ error

	var data_ monthlyCostForServicesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by moveRepo.
const moveRepo_Operation = `
mutation moveRepo ($input: MoveRepoInput!) {
	moveRepoToProjectEnvironment(input: $input) {
		... RepoDetail
		projectEnvironment {
			name
		}
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func MoveRepoMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input MoveRepoInput,
) (*moveRepoResponse, error) {
	req_ := &graphql.Request{
		OpName: "moveRepo",
		Query:  moveRepo_Operation,
		Variables: &__moveRepoInput{
			Input: input,
		},
	}
	var err_ error

	var data_ moveRepoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by moveRepoTargets.
const moveRepoTargets_Operation = `
query moveRepoTargets ($id: ID!) {
	user(id: $id) {
		id
		projects {
			nodes {
				id
				name
				environments {
					id
					name
				}
			}
		}
	}
}
`

func MoveRepoTargetsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*moveRepoTargetsResponse, error) {
	req_ := &graphql.Request{
		OpName: "moveRepoTargets",
		Query:  moveRepoTargets_Operation,
		Variables: &__moveRepoTargetsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ moveRepoTargetsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by newTeamMemberSuggestions.
const newTeamMemberSuggestions_Operation = `
query newTeamMemberSuggestions {
	currentUser {
		id
		repos {
			id
			collaborators {
				id
				user {
					... UserPublicCommon
				}
				role
			}
		}
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func NewTeamMemberSuggestionsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
) (*newTeamMemberSuggestionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "newTeamMemberSuggestions",
		Query:  newTeamMemberSuggestions_Operation,
	}
	var err_ error

	var data_ newTeamMemberSuggestionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by newTeamProjectSuggestions.
const newTeamProjectSuggestions_Operation = `
query newTeamProjectSuggestions {
	currentUser {
		id
		repos {
			... RepoCommon
			volumes {
				mountPath
				size
			}
			collaborators {
				id
				user {
					id
					name
				}
				role
			}
		}
	}
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func NewTeamProjectSuggestionsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
) (*newTeamProjectSuggestionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "newTeamProjectSuggestions",
		Query:  newTeamProjectSuggestions_Operation,
	}
	var err_ error

	var data_ newTeamProjectSuggestionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by paginatedRepoDeploymentsForProjectEnvironment.
const paginatedRepoDeploymentsForProjectEnvironment_Operation = `
query paginatedRepoDeploymentsForProjectEnvironment ($path: String!, $environment: String!, $filter: String!, $first: Int!, $after: String!, $sort: String, $statusFilter: [DeploymentStatus]) {
	project(path: $path) {
		id
		environment(name: $environment) {
			id
			name
			overview {
				deploymentStatus
				count
			}
			repoConnection(page: {first:$first,after:$after,filter:$filter,sort:$sort}, repoFilter: {deploymentStatus:$statusFilter}) {
				totalCount
				nodes {
					id
					productionDeployment {
						id
						... DeploymentCommon
					}
				}
				pageInfo {
					startCursor
					endCursor
					hasNextPage
					hasPreviousPage
				}
			}
		}
	}
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
`

func PaginatedRepoDeploymentsForProjectEnvironmentQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
	environment string,
	filter string,
	first int,
	after string,
	sort *string,
	statusFilter []*DeploymentStatus,
) (*paginatedRepoDeploymentsForProjectEnvironmentResponse, error) {
	req_ := &graphql.Request{
		OpName: "paginatedRepoDeploymentsForProjectEnvironment",
		Query:  paginatedRepoDeploymentsForProjectEnvironment_Operation,
		Variables: &__paginatedRepoDeploymentsForProjectEnvironmentInput{
			Path:         path,
			Environment:  environment,
			Filter:       filter,
			First:        first,
			After:        after,
			Sort:         sort,
			StatusFilter: statusFilter,
		},
	}
	var err_ error

	var data_ paginatedRepoDeploymentsForProjectEnvironmentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by paginatedReposForProjectEnvironment.
const paginatedReposForProjectEnvironment_Operation = `
query paginatedReposForProjectEnvironment ($path: String!, $environment: String!, $filter: String!, $first: Int!, $after: String!, $sort: String, $statusFilter: [DeploymentStatus]) {
	project(path: $path) {
		id
		environment(name: $environment) {
			id
			name
			overview {
				deploymentStatus
				count
			}
			repoConnection(page: {first:$first,after:$after,filter:$filter,sort:$sort}, repoFilter: {deploymentStatus:$statusFilter}) {
				totalCount
				nodes {
					... RepoCommon
				}
				pageInfo {
					startCursor
					endCursor
					hasNextPage
					hasPreviousPage
				}
			}
		}
	}
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func PaginatedReposForProjectEnvironmentQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
	environment string,
	filter string,
	first int,
	after string,
	sort *string,
	statusFilter []*DeploymentStatus,
) (*paginatedReposForProjectEnvironmentResponse, error) {
	req_ := &graphql.Request{
		OpName: "paginatedReposForProjectEnvironment",
		Query:  paginatedReposForProjectEnvironment_Operation,
		Variables: &__paginatedReposForProjectEnvironmentInput{
			Path:         path,
			Environment:  environment,
			Filter:       filter,
			First:        first,
			After:        after,
			Sort:         sort,
			StatusFilter: statusFilter,
		},
	}
	var err_ error

	var data_ paginatedReposForProjectEnvironmentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by previewSubscription.
const previewSubscription_Operation = `
query previewSubscription ($forUserID: UUID!, $subscriptionCart: SubscriptionCart!) {
	productCatalog {
		previewSubscription(forUserID: $forUserID, subscriptionCart: $subscriptionCart) {
			paymentMethodName
			products {
				currentProduct {
					__typename
					... ProductDetail
				}
				newProduct {
					__typename
					... ProductDetail
				}
				newProductStatus
				sectionName
			}
		}
	}
}
fragment ProductDetail on Product {
	productTypeMetadata {
		productType
		displayName
		pricingPageAnchor
	}
	name
	description
	sku
	displayPrice
	usage {
		unit
		unitPlural
		displayName
		currentUsage
		maximumUsage
		description
	}
	benefits
}
`

func PreviewSubscriptionQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	forUserID uuid.UUID,
	subscriptionCart SubscriptionCart,
) (*previewSubscriptionResponse, error) {
	req_ := &graphql.Request{
		OpName: "previewSubscription",
		Query:  previewSubscription_Operation,
		Variables: &__previewSubscriptionInput{
			ForUserID:        forUserID,
			SubscriptionCart: subscriptionCart,
		},
	}
	var err_ error

	var data_ previewSubscriptionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by project.
const project_Operation = `
query project ($path: String!) {
	project(path: $path) {
		... ProjectContext
	}
}
fragment ProjectContext on Project {
	id
	name
	isMultiRepo
	defaultEnvironment {
		id
		name
		defaultRepo {
			id
			name
		}
	}
	owner {
		id
		login
	}
	createdAt
	updatedAt
}
`

func ProjectQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
) (*projectResponse, error) {
	req_ := &graphql.Request{
		OpName: "project",
		Query:  project_Operation,
		Variables: &__projectInput{
			Path: path,
		},
	}
	var err_ error

	var data_ projectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectActiveBranchesCount.
const projectActiveBranchesCount_Operation = `
query projectActiveBranchesCount ($id: ID!) {
	currentUser {
		repo(id: $id) {
			id
			branchesV2(input: {active:true}) {
				totalCount
			}
		}
	}
}
`

func ProjectActiveBranchesCountQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*projectActiveBranchesCountResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectActiveBranchesCount",
		Query:  projectActiveBranchesCount_Operation,
		Variables: &__projectActiveBranchesCountInput{
			Id: id,
		},
	}
	var err_ error

	var data_ projectActiveBranchesCountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectBranches.
const projectBranches_Operation = `
query projectBranches ($id: ID!, $active: Boolean) {
	currentUser {
		repo(id: $id) {
			id
			productionBranchV2 {
				... BranchCommon
			}
			branchesV2(page: {first:0}, input: {active:$active}) {
				nodes {
					... BranchCommon
				}
			}
		}
	}
}
fragment BranchCommon on RepoBranchV2 {
	id
	name
	createdAt
	updatedAt
	state
	endpoints
	latestDeployment {
		id
		... DeploymentCommon
	}
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
`

func ProjectBranchesQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	active *bool,
) (*projectBranchesResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectBranches",
		Query:  projectBranches_Operation,
		Variables: &__projectBranchesInput{
			Id:     id,
			Active: active,
		},
	}
	var err_ error

	var data_ projectBranchesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectById.
const projectById_Operation = `
query projectById ($id: UUID!) {
	project(id: $id) {
		... ProjectBasic
	}
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
`

func ProjectByIdQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*projectByIdResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectById",
		Query:  projectById_Operation,
		Variables: &__projectByIdInput{
			Id: id,
		},
	}
	var err_ error

	var data_ projectByIdResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectCount.
const projectCount_Operation = `
query projectCount ($userId: ID!, $filterInput: FilterInput!) {
	user(id: $userId) {
		id
		projectV3Adapters(filter: $filterInput) {
			totalCount
		}
	}
}
`

func ProjectCountQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	filterInput FilterInput,
) (*projectCountResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectCount",
		Query:  projectCount_Operation,
		Variables: &__projectCountInput{
			UserId:      userId,
			FilterInput: filterInput,
		},
	}
	var err_ error

	var data_ projectCountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectEnvironment.
const projectEnvironment_Operation = `
query projectEnvironment ($path: String!, $env: String!) {
	project(path: $path) {
		id
		environment(name: $env) {
			... ProjectEnvironmentBasic
		}
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func ProjectEnvironmentQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
	env string,
) (*projectEnvironmentResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectEnvironment",
		Query:  projectEnvironment_Operation,
		Variables: &__projectEnvironmentInput{
			Path: path,
			Env:  env,
		},
	}
	var err_ error

	var data_ projectEnvironmentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectEnvironmentById.
const projectEnvironmentById_Operation = `
query projectEnvironmentById ($projectId: UUID!, $envId: UUID!) {
	project(id: $projectId) {
		id
		environment(id: $envId) {
			... ProjectEnvironmentBasic
		}
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func ProjectEnvironmentByIdQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	projectId uuid.UUID,
	envId uuid.UUID,
) (*projectEnvironmentByIdResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectEnvironmentById",
		Query:  projectEnvironmentById_Operation,
		Variables: &__projectEnvironmentByIdInput{
			ProjectId: projectId,
			EnvId:     envId,
		},
	}
	var err_ error

	var data_ projectEnvironmentByIdResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectEnvironmentVariables.
const projectEnvironmentVariables_Operation = `
query projectEnvironmentVariables ($path: String!) {
	project(path: $path) {
		id
		envs {
			... EnvVarDetail
		}
	}
}
fragment EnvVarDetail on EnvVar {
	id
	name
	value
	visible
	sealed
	source {
		type
	}
}
`

func ProjectEnvironmentVariablesQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
) (*projectEnvironmentVariablesResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectEnvironmentVariables",
		Query:  projectEnvironmentVariables_Operation,
		Variables: &__projectEnvironmentVariablesInput{
			Path: path,
		},
	}
	var err_ error

	var data_ projectEnvironmentVariablesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectEnvironments.
const projectEnvironments_Operation = `
query projectEnvironments ($path: String!) {
	project(path: $path) {
		id
		environments {
			... ProjectEnvironmentListItem
		}
	}
}
fragment ProjectEnvironmentListItem on ProjectEnvironment {
	... ProjectEnvironmentBasic
	updatedAt
	projectV3Adapters {
		totalCount
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func ProjectEnvironmentsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
) (*projectEnvironmentsResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectEnvironments",
		Query:  projectEnvironments_Operation,
		Variables: &__projectEnvironmentsInput{
			Path: path,
		},
	}
	var err_ error

	var data_ projectEnvironmentsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectEnvironmentsAndRepoCount.
const projectEnvironmentsAndRepoCount_Operation = `
query projectEnvironmentsAndRepoCount ($path: String!) {
	project(path: $path) {
		id
		environments {
			repoConnection(page: {}) {
				totalCount
			}
			... ProjectEnvironmentBasic
		}
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func ProjectEnvironmentsAndRepoCountQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
) (*projectEnvironmentsAndRepoCountResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectEnvironmentsAndRepoCount",
		Query:  projectEnvironmentsAndRepoCount_Operation,
		Variables: &__projectEnvironmentsAndRepoCountInput{
			Path: path,
		},
	}
	var err_ error

	var data_ projectEnvironmentsAndRepoCountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectEnvironmentsBasic.
const projectEnvironmentsBasic_Operation = `
query projectEnvironmentsBasic ($path: String!) {
	project(path: $path) {
		id
		environments {
			... ProjectEnvironmentBasic
		}
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func ProjectEnvironmentsBasicQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
) (*projectEnvironmentsBasicResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectEnvironmentsBasic",
		Query:  projectEnvironmentsBasic_Operation,
		Variables: &__projectEnvironmentsBasicInput{
			Path: path,
		},
	}
	var err_ error

	var data_ projectEnvironmentsBasicResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectEnvironmentsById.
const projectEnvironmentsById_Operation = `
query projectEnvironmentsById ($id: UUID!) {
	project(id: $id) {
		id
		environments {
			... ProjectEnvironmentBasic
		}
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func ProjectEnvironmentsByIdQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*projectEnvironmentsByIdResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectEnvironmentsById",
		Query:  projectEnvironmentsById_Operation,
		Variables: &__projectEnvironmentsByIdInput{
			Id: id,
		},
	}
	var err_ error

	var data_ projectEnvironmentsByIdResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectHelmChart.
const projectHelmChart_Operation = `
query projectHelmChart ($id: ID!) {
	currentUser {
		id
		repo(id: $id) {
			id
			helmChart {
				id
				... HelmCommon
			}
		}
	}
}
fragment HelmCommon on HelmChart {
	id
	name
	description
	logoImage
	version
	app_version
	repository {
		id
		name
		url
	}
}
`

func ProjectHelmChartQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*projectHelmChartResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectHelmChart",
		Query:  projectHelmChart_Operation,
		Variables: &__projectHelmChartInput{
			Id: id,
		},
	}
	var err_ error

	var data_ projectHelmChartResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectJob.
const projectJob_Operation = `
query projectJob ($repoID: ID!, $jobID: UUID!) {
	currentUser {
		repo(id: $repoID) {
			id
			jobRun(id: $jobID) {
				id
				deployment {
					id
					branch
				}
				... JobCommon
				logs {
					id
					completed
					expired
					entries {
						timestamp
						text
					}
				}
			}
		}
	}
}
fragment JobCommon on JobRun {
	id
	state
	build {
		version
	}
	command
	exitCode
	createdAt
}
`

func ProjectJobQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	repoID uuid.UUID,
	jobID uuid.UUID,
) (*projectJobResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectJob",
		Query:  projectJob_Operation,
		Variables: &__projectJobInput{
			RepoID: repoID,
			JobID:  jobID,
		},
	}
	var err_ error

	var data_ projectJobResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectJobs.
const projectJobs_Operation = `
query projectJobs ($id: ID!) {
	currentUser {
		repo(id: $id) {
			id
			jobRuns {
				totalCount
				nodes {
					id
					... JobCommon
				}
			}
		}
	}
}
fragment JobCommon on JobRun {
	id
	state
	build {
		version
	}
	command
	exitCode
	createdAt
}
`

func ProjectJobsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*projectJobsResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectJobs",
		Query:  projectJobs_Operation,
		Variables: &__projectJobsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ projectJobsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectV3.
const projectV3_Operation = `
query projectV3 ($userId: ID!, $projectName: String!, $environmentName: String!, $name: String!) {
	user(id: $userId) {
		projectV3Adapters(filter: {filter:{criterion:{resourceAdapterFilter:{projectName:{value:$projectName,operator:EQUALS},environmentName:{value:$environmentName,operator:EQUALS},name:{value:$name,operator:EQUALS}}}},page:{first:1}}) {
			totalCount
			nodes {
				... ProjectV3AdapterDetail
			}
		}
	}
}
fragment ProjectV3AdapterDetail on ProjectV3Adapter {
	name
	id
	status
	isDeployV2
	repo {
		id
	}
	projectV3 {
		... ProjectV3Detail
	}
	project {
		id
		name
	}
	projectEnvironment {
		id
		name
	}
}
fragment ProjectV3Detail on ProjectV3 {
	id
	requirePlanApproval
	name
	blueprintID
	blueprintConfiguration {
		__typename
		... ProjectBlueprintConfigurationDetail
	}
	configuration {
		__typename
		... on TerraformProjectV3Configuration {
			stateBackend {
				s3Bucket {
					awsAccountID
					bucketName
					region
					key
				}
				gcsBucket {
					gcpAccountID
					bucketName
					location
					prefix
				}
			}
			provider {
				awsAccount {
					id
				}
				gcpAccount {
					id
				}
				region
			}
		}
		... on HelmProjectV3Configuration {
			clusterID
			namespace
			releaseName
			values
		}
		... on ManifestProjectV3Configuration {
			clusterID
			namespace
		}
	}
	variables {
		__typename
		... on BlueprintVariableString {
			id
			variableSpecID
			name
			stringValue: value
		}
		... on BlueprintVariableBoolean {
			id
			variableSpecID
			name
			booleanValue: value
		}
		... on BlueprintVariableInt {
			id
			variableSpecID
			name
			intValue: value
		}
		... on BlueprintVariableFloat {
			id
			variableSpecID
			name
			floatValue: value
		}
		... on BlueprintVariableJSON {
			id
			variableSpecID
			name
			jsonValue: value
		}
	}
	driverWorkflows {
		... BlueprintDriverWorkflowList
	}
}
fragment ProjectBlueprintConfigurationDetail on BlueprintConfiguration {
	... on BlueprintTerraformConfiguration {
		registrySource
		moduleVersionConstraint
		githubSource
		moduleSource {
			source
			version
			integration {
				git {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
	... on BlueprintHelmConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
			helmRepository {
				chart
				version
				repositoryURL
			}
			containerRegistry {
				registryID
				registryURL
				repository
				tag
			}
		}
	}
	... on BlueprintManifestConfiguration {
		source {
			git {
				repository
				path
				ref
				integration {
					githubInstallationID
					bitbucketIntegrationID
					gitlabIntegrationID
				}
			}
		}
	}
}
fragment BlueprintDriverWorkflowList on BlueprintDriverWorkflow {
	id
	status
	steps {
		... WorkflowStep
	}
	createdAt
	updatedAt
}
fragment WorkflowStep on BlueprintDriverWorkflowStep {
	action
	status
	execution {
		id
		driver
		action
		approvedAt
		jobRun {
			id
			state
			createdAt
			updatedAt
		}
	}
}
`

func ProjectV3Query(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	projectName string,
	environmentName string,
	name string,
) (*projectV3Response, error) {
	req_ := &graphql.Request{
		OpName: "projectV3",
		Query:  projectV3_Operation,
		Variables: &__projectV3Input{
			UserId:          userId,
			ProjectName:     projectName,
			EnvironmentName: environmentName,
			Name:            name,
		},
	}
	var err_ error

	var data_ projectV3Response
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectV3sForEnvironment.
const projectV3sForEnvironment_Operation = `
query projectV3sForEnvironment ($userId: ID!, $groupName: String!, $subgroupName: String!, $page: PageInput!, $projectName: String!) {
	user(id: $userId) {
		projectV3Adapters(filter: {filter:{criterion:{resourceAdapterFilter:{projectName:{value:$groupName,operator:EQUALS},environmentName:{value:$subgroupName,operator:EQUALS},name:{value:$projectName,operator:CONTAINS}}}},page:$page}) {
			totalCount
			... ProjectV3ListItemConnection
			pageInfo {
				startCursor
				endCursor
				hasNextPage
				hasPreviousPage
			}
		}
	}
}
fragment ProjectV3ListItemConnection on ProjectV3AdapterConnection {
	nodes {
		name
		id
		status
		isDeployV2
		projectV3 {
			... ProjectV3ListItem
		}
		repo {
			... RepoCommon
		}
		project {
			id
			name
			defaultRepo {
				id
			}
		}
		projectEnvironment {
			id
			name
		}
		updatedAt
	}
}
fragment ProjectV3ListItem on ProjectV3 {
	id
	name
	blueprintID
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func ProjectV3sForEnvironmentQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	groupName string,
	subgroupName string,
	page PageInput,
	projectName string,
) (*projectV3sForEnvironmentResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectV3sForEnvironment",
		Query:  projectV3sForEnvironment_Operation,
		Variables: &__projectV3sForEnvironmentInput{
			UserId:       userId,
			GroupName:    groupName,
			SubgroupName: subgroupName,
			Page:         page,
			ProjectName:  projectName,
		},
	}
	var err_ error

	var data_ projectV3sForEnvironmentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectV3sForEnvironmentProductionDeployments.
const projectV3sForEnvironmentProductionDeployments_Operation = `
query projectV3sForEnvironmentProductionDeployments ($userId: ID!, $groupName: String!, $subgroupName: String!, $page: PageInput!, $projectName: String!) {
	user(id: $userId) {
		projectV3Adapters(filter: {filter:{criterion:{resourceAdapterFilter:{projectName:{value:$groupName,operator:EQUALS},environmentName:{value:$subgroupName,operator:EQUALS},name:{value:$projectName,operator:CONTAINS}}}},page:$page}) {
			... ProjectV3ProductionDeploymentConnection
		}
	}
}
fragment ProjectV3ProductionDeploymentConnection on ProjectV3AdapterConnection {
	nodes {
		id
		repo {
			id
			productionDeployment {
				id
				... DeploymentCommon
			}
		}
	}
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
`

func ProjectV3sForEnvironmentProductionDeploymentsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	groupName string,
	subgroupName string,
	page PageInput,
	projectName string,
) (*projectV3sForEnvironmentProductionDeploymentsResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectV3sForEnvironmentProductionDeployments",
		Query:  projectV3sForEnvironmentProductionDeployments_Operation,
		Variables: &__projectV3sForEnvironmentProductionDeploymentsInput{
			UserId:       userId,
			GroupName:    groupName,
			SubgroupName: subgroupName,
			Page:         page,
			ProjectName:  projectName,
		},
	}
	var err_ error

	var data_ projectV3sForEnvironmentProductionDeploymentsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projects.
const projects_Operation = `
query projects ($userId: ID!, $filterInput: FilterInput!) {
	user(id: $userId) {
		id
		projectV3Adapters(filter: $filterInput) {
			nodes {
				... ProjectListItem
			}
		}
		projects {
			nodes {
				... GroupListItem
			}
		}
	}
}
fragment ProjectListItem on ProjectV3Adapter {
	id
	name
	repo {
		id
	}
	project {
		id
		name
	}
	projectEnvironment {
		id
		name
	}
	createdAt
	updatedAt
}
fragment GroupListItem on Project {
	id
	name
	updatedAt
	environments {
		... SubgroupListItem
	}
}
fragment SubgroupListItem on ProjectEnvironment {
	id
	name
	updatedAt
}
`

func ProjectsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	filterInput FilterInput,
) (*projectsResponse, error) {
	req_ := &graphql.Request{
		OpName: "projects",
		Query:  projects_Operation,
		Variables: &__projectsInput{
			UserId:      userId,
			FilterInput: filterInput,
		},
	}
	var err_ error

	var data_ projectsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectsWithRepo.
const projectsWithRepo_Operation = `
query projectsWithRepo ($userId: ID!, $filterInput: FilterInput!) {
	user(id: $userId) {
		id
		projectV3Adapters(filter: $filterInput) {
			nodes {
				... ProjectWithRepo
			}
		}
	}
}
fragment ProjectWithRepo on ProjectV3Adapter {
	repo {
		id
		image
		deployTarget
		deployJob
		source {
			id
			type
			name
		}
		productionDeployment {
			endpoints
			privateEndpoint
		}
	}
}
`

func ProjectsWithRepoQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	filterInput FilterInput,
) (*projectsWithRepoResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectsWithRepo",
		Query:  projectsWithRepo_Operation,
		Variables: &__projectsWithRepoInput{
			UserId:      userId,
			FilterInput: filterInput,
		},
	}
	var err_ error

	var data_ projectsWithRepoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by purchaseSubscription.
const purchaseSubscription_Operation = `
mutation purchaseSubscription ($forUserID: UUID!, $subscriptionCart: SubscriptionCart!) {
	purchaseSubscription(forUserID: $forUserID, subscriptionCart: $subscriptionCart) {
		overview {
			currentProducts {
				__typename
				... ProductDetail
			}
		}
	}
}
fragment ProductDetail on Product {
	productTypeMetadata {
		productType
		displayName
		pricingPageAnchor
	}
	name
	description
	sku
	displayPrice
	usage {
		unit
		unitPlural
		displayName
		currentUsage
		maximumUsage
		description
	}
	benefits
}
`

func PurchaseSubscriptionMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	forUserID uuid.UUID,
	subscriptionCart SubscriptionCart,
) (*purchaseSubscriptionResponse, error) {
	req_ := &graphql.Request{
		OpName: "purchaseSubscription",
		Query:  purchaseSubscription_Operation,
		Variables: &__purchaseSubscriptionInput{
			ForUserID:        forUserID,
			SubscriptionCart: subscriptionCart,
		},
	}
	var err_ error

	var data_ purchaseSubscriptionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reissueCert.
const reissueCert_Operation = `
mutation reissueCert ($input: ReissueCustomDomainCertificateInput!) {
	reissueCustomDomainCertificate(input: $input) {
		id
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func ReissueCertMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input ReissueCustomDomainCertificateInput,
) (*reissueCertResponse, error) {
	req_ := &graphql.Request{
		OpName: "reissueCert",
		Query:  reissueCert_Operation,
		Variables: &__reissueCertInput{
			Input: input,
		},
	}
	var err_ error

	var data_ reissueCertResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeAWSAccount.
const removeAWSAccount_Operation = `
mutation removeAWSAccount ($id: UUID!) {
	removeAWSAccount(id: $id)
}
`

func RemoveAWSAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*removeAWSAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeAWSAccount",
		Query:  removeAWSAccount_Operation,
		Variables: &__removeAWSAccountInput{
			Id: id,
		},
	}
	var err_ error

	var data_ removeAWSAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeAzureAccount.
const removeAzureAccount_Operation = `
mutation removeAzureAccount ($id: UUID!) {
	removeAzureAccount(id: $id)
}
`

func RemoveAzureAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*removeAzureAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeAzureAccount",
		Query:  removeAzureAccount_Operation,
		Variables: &__removeAzureAccountInput{
			Id: id,
		},
	}
	var err_ error

	var data_ removeAzureAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeCDN.
const removeCDN_Operation = `
mutation removeCDN ($id: UUID!) {
	removeCDN(id: $id)
}
`

func RemoveCDNMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*removeCDNResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeCDN",
		Query:  removeCDN_Operation,
		Variables: &__removeCDNInput{
			Id: id,
		},
	}
	var err_ error

	var data_ removeCDNResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeContainerRegistry.
const removeContainerRegistry_Operation = `
mutation removeContainerRegistry ($id: UUID!) {
	removeContainerRegistry(id: $id)
}
`

func RemoveContainerRegistryMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*removeContainerRegistryResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeContainerRegistry",
		Query:  removeContainerRegistry_Operation,
		Variables: &__removeContainerRegistryInput{
			Id: id,
		},
	}
	var err_ error

	var data_ removeContainerRegistryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeCoreWeaveAccount.
const removeCoreWeaveAccount_Operation = `
mutation removeCoreWeaveAccount ($id: UUID!) {
	removeCoreWeaveAccount(id: $id)
}
`

func RemoveCoreWeaveAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*removeCoreWeaveAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeCoreWeaveAccount",
		Query:  removeCoreWeaveAccount_Operation,
		Variables: &__removeCoreWeaveAccountInput{
			Id: id,
		},
	}
	var err_ error

	var data_ removeCoreWeaveAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeDOAccount.
const removeDOAccount_Operation = `
mutation removeDOAccount ($id: UUID!) {
	removeDOAccount(id: $id)
}
`

func RemoveDOAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*removeDOAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeDOAccount",
		Query:  removeDOAccount_Operation,
		Variables: &__removeDOAccountInput{
			Id: id,
		},
	}
	var err_ error

	var data_ removeDOAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeGCPAccount.
const removeGCPAccount_Operation = `
mutation removeGCPAccount ($id: UUID!) {
	removeGCPAccount(id: $id)
}
`

func RemoveGCPAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*removeGCPAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeGCPAccount",
		Query:  removeGCPAccount_Operation,
		Variables: &__removeGCPAccountInput{
			Id: id,
		},
	}
	var err_ error

	var data_ removeGCPAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeLinodeAccount.
const removeLinodeAccount_Operation = `
mutation removeLinodeAccount ($id: UUID!) {
	removeLinodeAccount(id: $id)
}
`

func RemoveLinodeAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*removeLinodeAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeLinodeAccount",
		Query:  removeLinodeAccount_Operation,
		Variables: &__removeLinodeAccountInput{
			Id: id,
		},
	}
	var err_ error

	var data_ removeLinodeAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeProbe.
const removeProbe_Operation = `
mutation removeProbe ($input: RemoveProbeInput!) {
	removeProbe(input: $input) {
		id
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func RemoveProbeMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input RemoveProbeInput,
) (*removeProbeResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeProbe",
		Query:  removeProbe_Operation,
		Variables: &__removeProbeInput{
			Input: input,
		},
	}
	var err_ error

	var data_ removeProbeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeProjectCollaborator.
const removeProjectCollaborator_Operation = `
mutation removeProjectCollaborator ($id: ID!) {
	removeProjectCollaborator(id: $id) {
		id
		collaborators {
			... CollaboratorCommon
		}
	}
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func RemoveProjectCollaboratorMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*removeProjectCollaboratorResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeProjectCollaborator",
		Query:  removeProjectCollaborator_Operation,
		Variables: &__removeProjectCollaboratorInput{
			Id: id,
		},
	}
	var err_ error

	var data_ removeProjectCollaboratorResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeProjectLogShipper.
const removeProjectLogShipper_Operation = `
mutation removeProjectLogShipper ($id: UUID!) {
	removeLogShipper(id: $id)
}
`

func RemoveProjectLogShipperMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*removeProjectLogShipperResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeProjectLogShipper",
		Query:  removeProjectLogShipper_Operation,
		Variables: &__removeProjectLogShipperInput{
			Id: id,
		},
	}
	var err_ error

	var data_ removeProjectLogShipperResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeRepoCustomDomain.
const removeRepoCustomDomain_Operation = `
mutation removeRepoCustomDomain ($input: RemoveRepoCustomDomainInput!) {
	removeRepoCustomDomain(input: $input) {
		id
		clusterDomains {
			id
			... ClusterDomainsDetail
		}
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func RemoveRepoCustomDomainMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input RemoveRepoCustomDomainInput,
) (*removeRepoCustomDomainResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeRepoCustomDomain",
		Query:  removeRepoCustomDomain_Operation,
		Variables: &__removeRepoCustomDomainInput{
			Input: input,
		},
	}
	var err_ error

	var data_ removeRepoCustomDomainResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeTeamMember.
const removeTeamMember_Operation = `
mutation removeTeamMember ($input: RemoveTeamMemberInput!) {
	removeTeamMember(input: $input) {
		... TeamCommon
	}
}
fragment TeamCommon on Team {
	id
	plan {
		tier
		billingPeriod
	}
	user {
		id
		... UserCommon
	}
}
fragment UserCommon on User {
	id
	... UserPublicCommon
	email
	createdAt
	freeTrialEndsAt
	hasPaymentMethod
	paymentError
	paymentAuthorizationError
	advanced
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func RemoveTeamMemberMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input RemoveTeamMemberInput,
) (*removeTeamMemberResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeTeamMember",
		Query:  removeTeamMember_Operation,
		Variables: &__removeTeamMemberInput{
			Input: input,
		},
	}
	var err_ error

	var data_ removeTeamMemberResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by removeVultrAccount.
const removeVultrAccount_Operation = `
mutation removeVultrAccount ($id: UUID!) {
	removeVultrAccount(id: $id)
}
`

func RemoveVultrAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*removeVultrAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "removeVultrAccount",
		Query:  removeVultrAccount_Operation,
		Variables: &__removeVultrAccountInput{
			Id: id,
		},
	}
	var err_ error

	var data_ removeVultrAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by repoBuildSuggestion.
const repoBuildSuggestion_Operation = `
query repoBuildSuggestion ($id: ID!) {
	currentUser {
		id
		repo(id: $id) {
			id
			buildMethodSuggestions {
				name
				type
				dockerfilePath
				buildCommand
				staticPath
				runCommand
			}
		}
	}
}
`

func RepoBuildSuggestionQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*repoBuildSuggestionResponse, error) {
	req_ := &graphql.Request{
		OpName: "repoBuildSuggestion",
		Query:  repoBuildSuggestion_Operation,
		Variables: &__repoBuildSuggestionInput{
			Id: id,
		},
	}
	var err_ error

	var data_ repoBuildSuggestionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by repoCustomization.
const repoCustomization_Operation = `
query repoCustomization ($id: UUID!) {
	repo(id: $id) {
		id
		... RepoCustomization
	}
}
fragment RepoCustomization on Repo {
	... RepoCommon
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
		podSpecPatch
		ingressSpecPatch
	}
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func RepoCustomizationQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*repoCustomizationResponse, error) {
	req_ := &graphql.Request{
		OpName: "repoCustomization",
		Query:  repoCustomization_Operation,
		Variables: &__repoCustomizationInput{
			Id: id,
		},
	}
	var err_ error

	var data_ repoCustomizationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by repoDeployRevisions.
const repoDeployRevisions_Operation = `
query repoDeployRevisions ($repoId: ID!) {
	currentUser {
		id
		repo(id: $repoId) {
			id
			deploymentConfigurationRevisions(page: {first:50}) {
				pageInfo {
					hasNextPage
				}
				totalCount
				nodes {
					revisionData
					revisionMetadata {
						id
						description
						sequenceId
						createdBy {
							id
							login
							name
							avatar
						}
						createdAt
					}
				}
			}
		}
	}
}
`

func RepoDeployRevisionsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	repoId uuid.UUID,
) (*repoDeployRevisionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "repoDeployRevisions",
		Query:  repoDeployRevisions_Operation,
		Variables: &__repoDeployRevisionsInput{
			RepoId: repoId,
		},
	}
	var err_ error

	var data_ repoDeployRevisionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by repoForProject.
const repoForProject_Operation = `
query repoForProject ($path: String!, $repo: String!) {
	project(path: $path) {
		id
		repo(name: $repo) {
			... RepoDetail
		}
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func RepoForProjectQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
	repo string,
) (*repoForProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "repoForProject",
		Query:  repoForProject_Operation,
		Variables: &__repoForProjectInput{
			Path: path,
			Repo: repo,
		},
	}
	var err_ error

	var data_ repoForProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by repoForProjectEnvironment.
const repoForProjectEnvironment_Operation = `
query repoForProjectEnvironment ($path: String!, $environment: String!, $repo: String!) {
	project(path: $path) {
		id
		environment(name: $environment) {
			id
			name
			repo(name: $repo) {
				... RepoDetail
			}
		}
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func RepoForProjectEnvironmentQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
	environment string,
	repo string,
) (*repoForProjectEnvironmentResponse, error) {
	req_ := &graphql.Request{
		OpName: "repoForProjectEnvironment",
		Query:  repoForProjectEnvironment_Operation,
		Variables: &__repoForProjectEnvironmentInput{
			Path:        path,
			Environment: environment,
			Repo:        repo,
		},
	}
	var err_ error

	var data_ repoForProjectEnvironmentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by repoNetwork.
const repoNetwork_Operation = `
query repoNetwork ($id: UUID!) {
	repo(id: $id) {
		id
		... RepoNetwork
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func RepoNetworkQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*repoNetworkResponse, error) {
	req_ := &graphql.Request{
		OpName: "repoNetwork",
		Query:  repoNetwork_Operation,
		Variables: &__repoNetworkInput{
			Id: id,
		},
	}
	var err_ error

	var data_ repoNetworkResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by repoPrometheus.
const repoPrometheus_Operation = `
query repoPrometheus ($userID: ID!, $clusterID: UUID!, $repoID: ID!) {
	user(id: $userID) {
		id
		cluster(id: $clusterID) {
			id
			prometheus {
				url
				user
				password
				token
			}
		}
		repo(id: $repoID) {
			id
			kappID
		}
	}
}
`

func RepoPrometheusQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userID uuid.UUID,
	clusterID uuid.UUID,
	repoID uuid.UUID,
) (*repoPrometheusResponse, error) {
	req_ := &graphql.Request{
		OpName: "repoPrometheus",
		Query:  repoPrometheus_Operation,
		Variables: &__repoPrometheusInput{
			UserID:    userID,
			ClusterID: clusterID,
			RepoID:    repoID,
		},
	}
	var err_ error

	var data_ repoPrometheusResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by repoRenderIngressSpecPatch.
const repoRenderIngressSpecPatch_Operation = `
query repoRenderIngressSpecPatch ($id: UUID!, $patch: String) {
	repo(id: $id) {
		id
		productionBranchV2 {
			id
			renderIngress(patch: $patch)
		}
	}
}
`

func RepoRenderIngressSpecPatchQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	patch *string,
) (*repoRenderIngressSpecPatchResponse, error) {
	req_ := &graphql.Request{
		OpName: "repoRenderIngressSpecPatch",
		Query:  repoRenderIngressSpecPatch_Operation,
		Variables: &__repoRenderIngressSpecPatchInput{
			Id:    id,
			Patch: patch,
		},
	}
	var err_ error

	var data_ repoRenderIngressSpecPatchResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by repoRenderPodSpecPatch.
const repoRenderPodSpecPatch_Operation = `
query repoRenderPodSpecPatch ($id: UUID!, $patch: String) {
	repo(id: $id) {
		id
		productionBranchV2 {
			id
			renderPodSpec(patch: $patch)
		}
	}
}
`

func RepoRenderPodSpecPatchQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	patch *string,
) (*repoRenderPodSpecPatchResponse, error) {
	req_ := &graphql.Request{
		OpName: "repoRenderPodSpecPatch",
		Query:  repoRenderPodSpecPatch_Operation,
		Variables: &__repoRenderPodSpecPatchInput{
			Id:    id,
			Patch: patch,
		},
	}
	var err_ error

	var data_ repoRenderPodSpecPatchResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reposForProject.
const reposForProject_Operation = `
query reposForProject ($project: String!) {
	project(path: $project) {
		id
		name
		repos {
			... RepoListItem
		}
	}
}
fragment RepoListItem on Repo {
	... RepoCommon
	productionDeployment {
		id
		... DeploymentCommon
	}
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func ReposForProjectQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	project string,
) (*reposForProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "reposForProject",
		Query:  reposForProject_Operation,
		Variables: &__reposForProjectInput{
			Project: project,
		},
	}
	var err_ error

	var data_ reposForProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reposForProjectEnvironment.
const reposForProjectEnvironment_Operation = `
query reposForProjectEnvironment ($path: String!, $environment: String!) {
	project(path: $path) {
		id
		environment(name: $environment) {
			id
			name
			repos {
				... RepoListItem
			}
		}
	}
}
fragment RepoListItem on Repo {
	... RepoCommon
	productionDeployment {
		id
		... DeploymentCommon
	}
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func ReposForProjectEnvironmentQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
	environment string,
) (*reposForProjectEnvironmentResponse, error) {
	req_ := &graphql.Request{
		OpName: "reposForProjectEnvironment",
		Query:  reposForProjectEnvironment_Operation,
		Variables: &__reposForProjectEnvironmentInput{
			Path:        path,
			Environment: environment,
		},
	}
	var err_ error

	var data_ reposForProjectEnvironmentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reposForProjectEnvironmentBasic.
const reposForProjectEnvironmentBasic_Operation = `
query reposForProjectEnvironmentBasic ($path: String!, $environment: String!) {
	project(path: $path) {
		id
		environment(name: $environment) {
			id
			name
			repos {
				... RepoBasic
			}
		}
	}
}
fragment RepoBasic on Repo {
	id
	path
	name: path
	enabled
	image
	owner {
		id
		login
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func ReposForProjectEnvironmentBasicQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
	environment string,
) (*reposForProjectEnvironmentBasicResponse, error) {
	req_ := &graphql.Request{
		OpName: "reposForProjectEnvironmentBasic",
		Query:  reposForProjectEnvironmentBasic_Operation,
		Variables: &__reposForProjectEnvironmentBasicInput{
			Path:        path,
			Environment: environment,
		},
	}
	var err_ error

	var data_ reposForProjectEnvironmentBasicResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by resendTeamMemberInvitation.
const resendTeamMemberInvitation_Operation = `
mutation resendTeamMemberInvitation ($id: UUID!) {
	resendTeamMemberInvitation(id: $id)
}
`

func ResendTeamMemberInvitationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*resendTeamMemberInvitationResponse, error) {
	req_ := &graphql.Request{
		OpName: "resendTeamMemberInvitation",
		Query:  resendTeamMemberInvitation_Operation,
		Variables: &__resendTeamMemberInvitationInput{
			Id: id,
		},
	}
	var err_ error

	var data_ resendTeamMemberInvitationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by rollbackToDeployment.
const rollbackToDeployment_Operation = `
mutation rollbackToDeployment ($projectID: UUID!, $deploymentID: UUID!) {
	rollbackProjectToDeployment(projectID: $projectID, deploymentID: $deploymentID) {
		id
		productionDeployment {
			id
			status
			deployStatus {
				state
				active
			}
		}
	}
}
`

func RollbackToDeploymentMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	projectID uuid.UUID,
	deploymentID uuid.UUID,
) (*rollbackToDeploymentResponse, error) {
	req_ := &graphql.Request{
		OpName: "rollbackToDeployment",
		Query:  rollbackToDeployment_Operation,
		Variables: &__rollbackToDeploymentInput{
			ProjectID:    projectID,
			DeploymentID: deploymentID,
		},
	}
	var err_ error

	var data_ rollbackToDeploymentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by runJob.
const runJob_Operation = `
mutation runJob ($input: RunJobInput!) {
	runJob(input: $input) {
		id
		... JobCommon
	}
}
fragment JobCommon on JobRun {
	id
	state
	build {
		version
	}
	command
	exitCode
	createdAt
}
`

func RunJobMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input RunJobInput,
) (*runJobResponse, error) {
	req_ := &graphql.Request{
		OpName: "runJob",
		Query:  runJob_Operation,
		Variables: &__runJobInput{
			Input: input,
		},
	}
	var err_ error

	var data_ runJobResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by searchHelmCharts.
const searchHelmCharts_Operation = `
query searchHelmCharts ($input: SearchHelmChartsInput!) {
	searchHelmCharts(input: $input) {
		totalCount
		nodes {
			id
			... HelmCommon
		}
		pageInfo {
			hasNextPage
		}
	}
}
fragment HelmCommon on HelmChart {
	id
	name
	description
	logoImage
	version
	app_version
	repository {
		id
		name
		url
	}
}
`

func SearchHelmChartsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	input SearchHelmChartsInput,
) (*searchHelmChartsResponse, error) {
	req_ := &graphql.Request{
		OpName: "searchHelmCharts",
		Query:  searchHelmCharts_Operation,
		Variables: &__searchHelmChartsInput{
			Input: input,
		},
	}
	var err_ error

	var data_ searchHelmChartsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by setPaymentMethod.
const setPaymentMethod_Operation = `
mutation setPaymentMethod ($paymentMethod: String!) {
	setPaymentMethod(paymentMethod: $paymentMethod) {
		id
		hasPaymentMethod
	}
}
`

func SetPaymentMethodMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	paymentMethod string,
) (*setPaymentMethodResponse, error) {
	req_ := &graphql.Request{
		OpName: "setPaymentMethod",
		Query:  setPaymentMethod_Operation,
		Variables: &__setPaymentMethodInput{
			PaymentMethod: paymentMethod,
		},
	}
	var err_ error

	var data_ setPaymentMethodResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by setRepoEnvs.
const setRepoEnvs_Operation = `
mutation setRepoEnvs ($input: SetRepoEnvsInput!) {
	setRepoEnvs(input: $input) {
		id
		envs {
			id
			name
			value
			visible
			sealed
		}
	}
}
`

func SetRepoEnvsMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input SetRepoEnvsInput,
) (*setRepoEnvsResponse, error) {
	req_ := &graphql.Request{
		OpName: "setRepoEnvs",
		Query:  setRepoEnvs_Operation,
		Variables: &__setRepoEnvsInput{
			Input: input,
		},
	}
	var err_ error

	var data_ setRepoEnvsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by subgroupOverview.
const subgroupOverview_Operation = `
query subgroupOverview ($path: String!, $environment: String!) {
	project(path: $path) {
		id
		environment(name: $environment) {
			id
			name
			overviewV2 {
				deploymentStatus
				count
			}
			projectV3Adapters {
				... ProjectV3AdapterConnectionCommon
			}
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
`

func SubgroupOverviewQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
	environment string,
) (*subgroupOverviewResponse, error) {
	req_ := &graphql.Request{
		OpName: "subgroupOverview",
		Query:  subgroupOverview_Operation,
		Variables: &__subgroupOverviewInput{
			Path:        path,
			Environment: environment,
		},
	}
	var err_ error

	var data_ subgroupOverviewResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by subscriptionFeature.
const subscriptionFeature_Operation = `
query subscriptionFeature ($id: ID!, $featureKey: FeatureKey!) {
	user(id: $id) {
		id
		billingOverview {
			subscriptionFeatures {
				byKey(featureKey: $featureKey) {
					key
					enabled
				}
			}
		}
	}
}
`

func SubscriptionFeatureQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	featureKey FeatureKey,
) (*subscriptionFeatureResponse, error) {
	req_ := &graphql.Request{
		OpName: "subscriptionFeature",
		Query:  subscriptionFeature_Operation,
		Variables: &__subscriptionFeatureInput{
			Id:         id,
			FeatureKey: featureKey,
		},
	}
	var err_ error

	var data_ subscriptionFeatureResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by suggestProjectName.
const suggestProjectName_Operation = `
query suggestProjectName ($user: ID!, $input: SuggestProjectNameInput!) {
	user(id: $user) {
		id
		suggestProjectName(input: $input)
	}
}
`

func SuggestProjectNameQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	user uuid.UUID,
	input SuggestProjectNameInput,
) (*suggestProjectNameResponse, error) {
	req_ := &graphql.Request{
		OpName: "suggestProjectName",
		Query:  suggestProjectName_Operation,
		Variables: &__suggestProjectNameInput{
			User:  user,
			Input: input,
		},
	}
	var err_ error

	var data_ suggestProjectNameResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by suggestTemplateName.
const suggestTemplateName_Operation = `
query suggestTemplateName ($user: ID!, $input: SuggestTemplateNameInput!) {
	user(id: $user) {
		id
		suggestTemplateName(input: $input)
	}
}
`

func SuggestTemplateNameQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	user uuid.UUID,
	input SuggestTemplateNameInput,
) (*suggestTemplateNameResponse, error) {
	req_ := &graphql.Request{
		OpName: "suggestTemplateName",
		Query:  suggestTemplateName_Operation,
		Variables: &__suggestTemplateNameInput{
			User:  user,
			Input: input,
		},
	}
	var err_ error

	var data_ suggestTemplateNameResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by teamByName.
const teamByName_Operation = `
query teamByName ($name: String!) {
	team(path: $name) {
		id
		... TeamDetail
	}
}
fragment TeamDetail on Team {
	id
	... TeamCommon
	user {
		id
		... UserDetail
	}
}
fragment TeamCommon on Team {
	id
	plan {
		tier
		billingPeriod
	}
	user {
		id
		... UserCommon
	}
}
fragment UserDetail on User {
	id
	... UserCommon
	hasZeetCloud
	hasOnboarded
	canDeploy
}
fragment UserCommon on User {
	id
	... UserPublicCommon
	email
	createdAt
	freeTrialEndsAt
	hasPaymentMethod
	paymentError
	paymentAuthorizationError
	advanced
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func TeamByNameQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (*teamByNameResponse, error) {
	req_ := &graphql.Request{
		OpName: "teamByName",
		Query:  teamByName_Operation,
		Variables: &__teamByNameInput{
			Name: name,
		},
	}
	var err_ error

	var data_ teamByNameResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by teamCloud.
const teamCloud_Operation = `
query teamCloud ($id: ID!) {
	currentUser {
		id
		team(id: $id) {
			id
			awsAccounts {
				iamUsers {
					arn
					userId
					username
					attachedAwsPolicies {
						arn
						policyName
						groupName
					}
				}
				userIamConnections {
					userId
					awsIamArn
					awsAccountId
					id
				}
				accountID
				id
			}
		}
	}
}
`

func TeamCloudQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*teamCloudResponse, error) {
	req_ := &graphql.Request{
		OpName: "teamCloud",
		Query:  teamCloud_Operation,
		Variables: &__teamCloudInput{
			Id: id,
		},
	}
	var err_ error

	var data_ teamCloudResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by teamGithubRepos.
const teamGithubRepos_Operation = `
query teamGithubRepos ($path: String!) {
	team(path: $path) {
		user {
			githubInstallations {
				id
				targetType
				account {
					id
					login
					avatar
					type
				}
				repositorySelection
				repositories {
					... GitHubRepo
				}
			}
		}
	}
}
fragment GitHubRepo on GitHubRepository {
	id
	name
	owner
	url
	description
	isFork
	isPrivate
	primaryLanguage
	updatedAt
}
`

func TeamGithubReposQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
) (*teamGithubReposResponse, error) {
	req_ := &graphql.Request{
		OpName: "teamGithubRepos",
		Query:  teamGithubRepos_Operation,
		Variables: &__teamGithubReposInput{
			Path: path,
		},
	}
	var err_ error

	var data_ teamGithubReposResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by template.
const template_Operation = `
query template ($id: UUID, $slug: String, $url: String) {
	template(id: $id, slug: $slug, url: $url) {
		id
		... TemplateCommon
	}
}
fragment TemplateCommon on Template {
	id
	name
	description
	image
	homepageURL
	repositoryURL
	stats {
		deploys
		forks
		stars
	}
	projects {
		id
		name
		description
		image
		source {
			type
			name
		}
		envs {
			name
			description
			value
			generator
			reference
			required
			locked
			hidden
			options
		}
		ports {
			port
			protocol
			public
			https
		}
		volumes {
			mountPath
			size
		}
		cpu
		memory
		gpu
		dedicated
		replication {
			region
			replicas
		}
	}
}
`

func TemplateQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id *uuid.UUID,
	slug *string,
	url *string,
) (*templateResponse, error) {
	req_ := &graphql.Request{
		OpName: "template",
		Query:  template_Operation,
		Variables: &__templateInput{
			Id:   id,
			Slug: slug,
			Url:  url,
		},
	}
	var err_ error

	var data_ templateResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by transferProject.
const transferProject_Operation = `
mutation transferProject ($input: TransferProjectInput!) {
	transferProject(input: $input) {
		id
		name
	}
}
`

func TransferProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input TransferProjectInput,
) (*transferProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "transferProject",
		Query:  transferProject_Operation,
		Variables: &__transferProjectInput{
			Input: input,
		},
	}
	var err_ error

	var data_ transferProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by unitPrice.
const unitPrice_Operation = `
query unitPrice {
	prices {
		ramGB
		cpuCore
		dedicatedGPU
		dedicatedRamGB
		dedicatedCpuCore
		storageGB
	}
}
`

func UnitPriceQuery(
	ctx_ context.Context,
	client_ graphql.Client,
) (*unitPriceResponse, error) {
	req_ := &graphql.Request{
		OpName: "unitPrice",
		Query:  unitPrice_Operation,
	}
	var err_ error

	var data_ unitPriceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by unlinkCluster.
const unlinkCluster_Operation = `
mutation unlinkCluster ($id: UUID!) {
	unlinkCluster(id: $id)
}
`

func UnlinkClusterMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*unlinkClusterResponse, error) {
	req_ := &graphql.Request{
		OpName: "unlinkCluster",
		Query:  unlinkCluster_Operation,
		Variables: &__unlinkClusterInput{
			Id: id,
		},
	}
	var err_ error

	var data_ unlinkClusterResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by unlinkDatabase.
const unlinkDatabase_Operation = `
mutation unlinkDatabase ($id: UUID!) {
	unlinkDatabase(id: $id)
}
`

func UnlinkDatabaseMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*unlinkDatabaseResponse, error) {
	req_ := &graphql.Request{
		OpName: "unlinkDatabase",
		Query:  unlinkDatabase_Operation,
		Variables: &__unlinkDatabaseInput{
			Id: id,
		},
	}
	var err_ error

	var data_ unlinkDatabaseResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by unlinkProject.
const unlinkProject_Operation = `
mutation unlinkProject ($id: ID!) {
	unlinkRepo(id: $id)
}
`

func UnlinkProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*unlinkProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "unlinkProject",
		Query:  unlinkProject_Operation,
		Variables: &__unlinkProjectInput{
			Id: id,
		},
	}
	var err_ error

	var data_ unlinkProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateAWSAccount.
const updateAWSAccount_Operation = `
mutation updateAWSAccount ($input: UpdateAWSAccountInput!) {
	updateAWSAccount(input: $input)
}
`

func UpdateAWSAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateAWSAccountInput,
) (*updateAWSAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateAWSAccount",
		Query:  updateAWSAccount_Operation,
		Variables: &__updateAWSAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateAWSAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateAzureAccount.
const updateAzureAccount_Operation = `
mutation updateAzureAccount ($input: UpdateAzureAccountInput!) {
	updateAzureAccount(input: $input)
}
`

func UpdateAzureAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateAzureAccountInput,
) (*updateAzureAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateAzureAccount",
		Query:  updateAzureAccount_Operation,
		Variables: &__updateAzureAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateAzureAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateBitbucketIntegration.
const updateBitbucketIntegration_Operation = `
mutation updateBitbucketIntegration ($id: UUID!, $userId: UUID!, $name: String!) {
	updateBitbucketIntegration(input: {userID:$userId,id:$id,name:$name}) {
		id
	}
}
`

func UpdateBitbucketIntegrationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	userId uuid.UUID,
	name string,
) (*updateBitbucketIntegrationResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateBitbucketIntegration",
		Query:  updateBitbucketIntegration_Operation,
		Variables: &__updateBitbucketIntegrationInput{
			Id:     id,
			UserId: userId,
			Name:   name,
		},
	}
	var err_ error

	var data_ updateBitbucketIntegrationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateBlueprint.
const updateBlueprint_Operation = `
mutation updateBlueprint ($id: UUID!, $input: UpdateBlueprintInput!) {
	updateBlueprint(blueprintID: $id, input: $input) {
		id
	}
}
`

func UpdateBlueprintMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateBlueprintInput,
) (*updateBlueprintResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateBlueprint",
		Query:  updateBlueprint_Operation,
		Variables: &__updateBlueprintInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ updateBlueprintResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateCDN.
const updateCDN_Operation = `
mutation updateCDN ($input: UpdateCDNInput!) {
	updateCDN(input: $input) {
		id
		... CDNDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
`

func UpdateCDNMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateCDNInput,
) (*updateCDNResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateCDN",
		Query:  updateCDN_Operation,
		Variables: &__updateCDNInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateCDNResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateCert.
const updateCert_Operation = `
mutation updateCert ($input: UpdateRepoCustomDomainInput!) {
	updateRepoCustomDomain(input: $input) {
		id
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func UpdateCertMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateRepoCustomDomainInput,
) (*updateCertResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateCert",
		Query:  updateCert_Operation,
		Variables: &__updateCertInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateCertResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateCluster.
const updateCluster_Operation = `
mutation updateCluster ($input: UpdateClusterInput!) {
	updateCluster(input: $input) {
		id
		... ClusterDetail
	}
}
fragment ClusterDetail on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	isEjected
	components {
		name
		type
		status
		isInstalledByZeet
		exists
		project {
			id
			project {
				name
			}
			projectEnvironment {
				name
			}
			name
		}
		helmMetadata {
			values
			namespace
			releaseName
			chartRepoGuess
			chartVersion
			chartName
		}
	}
	terraformProjectUrl
	awsAccount {
		id
		name
		accountID
	}
	gcpAccount {
		id
		name
		projectID
	}
	doAccount {
		id
		name
		defaultProject
	}
	cwAccount {
		id
		name
		namespace
	}
	linodeAccount {
		id
		name
		accessTokenPrefix
	}
	azureAccount {
		id
		name
		subscriptionID
	}
	vultrAccount {
		id
		name
	}
	ingressIP
	ingressDNS
	clusterProvider
	cloudProvider
	cloudAccount {
		__typename
		... on AWSAccount {
			id
		}
		... on AzureAccount {
			id
		}
		... on CoreWeaveAccount {
			id
		}
		... on DOAccount {
			id
		}
		... on GCPAccount {
			id
		}
		... on LinodeAccount {
			id
		}
		... on VultrAccount {
			id
		}
	}
	prometheus {
		url
		user
		password
		token
	}
	grafana {
		url
		user
		password
	}
	containerRegistry {
		id
		name
		credentialProvider
		username
	}
	containerRepository
	containerCacheRepository
	updatedAt
	createdAt
	projects {
		... ProjectConnectionComon
	}
	projectV3Adapters {
		... ProjectV3AdapterConnectionCommon
	}
	deployJob {
		id
		state
	}
}
fragment ProjectConnectionComon on ProjectConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		repo {
			... RepoCommon
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UpdateClusterMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateClusterInput,
) (*updateClusterResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateCluster",
		Query:  updateCluster_Operation,
		Variables: &__updateClusterInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateClusterResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateCoreWeaveAccount.
const updateCoreWeaveAccount_Operation = `
mutation updateCoreWeaveAccount ($input: UpdateCoreWeaveAccountInput!) {
	updateCoreWeaveAccount(input: $input)
}
`

func UpdateCoreWeaveAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateCoreWeaveAccountInput,
) (*updateCoreWeaveAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateCoreWeaveAccount",
		Query:  updateCoreWeaveAccount_Operation,
		Variables: &__updateCoreWeaveAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateCoreWeaveAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateDOAccount.
const updateDOAccount_Operation = `
mutation updateDOAccount ($input: UpdateDOAccountInput!) {
	updateDOAccount(input: $input)
}
`

func UpdateDOAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateDOAccountInput,
) (*updateDOAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateDOAccount",
		Query:  updateDOAccount_Operation,
		Variables: &__updateDOAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateDOAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateDatabaseLink.
const updateDatabaseLink_Operation = `
mutation updateDatabaseLink ($input: updateDatabaseLinkInput!) {
	updateDatabaseLink(input: $input) {
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func UpdateDatabaseLinkMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateDatabaseLinkInput,
) (*updateDatabaseLinkResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateDatabaseLink",
		Query:  updateDatabaseLink_Operation,
		Variables: &__updateDatabaseLinkInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateDatabaseLinkResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateDiscordWebhookIntegration.
const updateDiscordWebhookIntegration_Operation = `
mutation updateDiscordWebhookIntegration ($input: UpdateWebhookIntegrationInput!) {
	updateDiscordWebhookIntegration(input: $input) {
		id
		... IntegrationCommon
		... on DiscordWebhookIntegration {
			url
		}
	}
}
fragment IntegrationCommon on Integration {
	id
	type
	name
	description
	image
	createdAt
	updatedAt
}
`

func UpdateDiscordWebhookIntegrationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateWebhookIntegrationInput,
) (*updateDiscordWebhookIntegrationResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateDiscordWebhookIntegration",
		Query:  updateDiscordWebhookIntegration_Operation,
		Variables: &__updateDiscordWebhookIntegrationInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateDiscordWebhookIntegrationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateEnvironmentEnvironmentVariables.
const updateEnvironmentEnvironmentVariables_Operation = `
mutation updateEnvironmentEnvironmentVariables ($input: UpdateProjectEnvironmentInput!) {
	updateProjectEnvironment(input: $input) {
		envs {
			... EnvVarDetail
		}
		... ProjectEnvironmentBasic
	}
}
fragment EnvVarDetail on EnvVar {
	id
	name
	value
	visible
	sealed
	source {
		type
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UpdateEnvironmentEnvironmentVariablesMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateProjectEnvironmentInput,
) (*updateEnvironmentEnvironmentVariablesResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateEnvironmentEnvironmentVariables",
		Query:  updateEnvironmentEnvironmentVariables_Operation,
		Variables: &__updateEnvironmentEnvironmentVariablesInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateEnvironmentEnvironmentVariablesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateGCPAccount.
const updateGCPAccount_Operation = `
mutation updateGCPAccount ($input: UpdateGCPAccountInput!) {
	updateGCPAccount(input: $input)
}
`

func UpdateGCPAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateGCPAccountInput,
) (*updateGCPAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateGCPAccount",
		Query:  updateGCPAccount_Operation,
		Variables: &__updateGCPAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateGCPAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateGitlabIntegration.
const updateGitlabIntegration_Operation = `
mutation updateGitlabIntegration ($input: UpdateGitlabIntegrationInput!) {
	updateGitlabIntegration(input: $input) {
		id
		... IntegrationCommon
		... on GitlabIntegration {
			accessTokenPrefix
			webhookUrl
			webhookToken
		}
	}
}
fragment IntegrationCommon on Integration {
	id
	type
	name
	description
	image
	createdAt
	updatedAt
}
`

func UpdateGitlabIntegrationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateGitlabIntegrationInput,
) (*updateGitlabIntegrationResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateGitlabIntegration",
		Query:  updateGitlabIntegration_Operation,
		Variables: &__updateGitlabIntegrationInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateGitlabIntegrationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateLinodeAccount.
const updateLinodeAccount_Operation = `
mutation updateLinodeAccount ($input: UpdateLinodeAccountInput!) {
	updateLinodeAccount(input: $input)
}
`

func UpdateLinodeAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateLinodeAccountInput,
) (*updateLinodeAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateLinodeAccount",
		Query:  updateLinodeAccount_Operation,
		Variables: &__updateLinodeAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateLinodeAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateMarketplaceBlueprint.
const updateMarketplaceBlueprint_Operation = `
mutation updateMarketplaceBlueprint ($input: UpdateMarketplaceBlueprintInput!) {
	updateMarketplaceBlueprint(input: $input) {
		id
	}
}
`

func UpdateMarketplaceBlueprintMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateMarketplaceBlueprintInput,
) (*updateMarketplaceBlueprintResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateMarketplaceBlueprint",
		Query:  updateMarketplaceBlueprint_Operation,
		Variables: &__updateMarketplaceBlueprintInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateMarketplaceBlueprintResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateNotificationIntegrationConditions.
const updateNotificationIntegrationConditions_Operation = `
mutation updateNotificationIntegrationConditions ($userId: UUID!, $integrationId: UUID!, $input: NotificationConditionProviderInput!) {
	updateNotificationIntegrationSettings(userID: $userId, integrationID: $integrationId, input: {conditions:$input}) {
		conditions {
			__typename
			... on NotificationCondition {
				key
				operator
				value
			}
		}
	}
}
`

func UpdateNotificationIntegrationConditionsMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	integrationId uuid.UUID,
	input NotificationConditionProviderInput,
) (*updateNotificationIntegrationConditionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateNotificationIntegrationConditions",
		Query:  updateNotificationIntegrationConditions_Operation,
		Variables: &__updateNotificationIntegrationConditionsInput{
			UserId:        userId,
			IntegrationId: integrationId,
			Input:         input,
		},
	}
	var err_ error

	var data_ updateNotificationIntegrationConditionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateNotificationIntegrationSettings.
const updateNotificationIntegrationSettings_Operation = `
mutation updateNotificationIntegrationSettings ($userID: UUID!, $input: NotificationIntegrationSettingsInput!) {
	updateNotificationIntegrationSettings(userID: $userID, input: $input) {
		build
		deploy
		podCrash
	}
}
`

func UpdateNotificationIntegrationSettingsMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	userID uuid.UUID,
	input NotificationIntegrationSettingsInput,
) (*updateNotificationIntegrationSettingsResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateNotificationIntegrationSettings",
		Query:  updateNotificationIntegrationSettings_Operation,
		Variables: &__updateNotificationIntegrationSettingsInput{
			UserID: userID,
			Input:  input,
		},
	}
	var err_ error

	var data_ updateNotificationIntegrationSettingsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateNotificationIntegrationSpecificSettings.
const updateNotificationIntegrationSpecificSettings_Operation = `
mutation updateNotificationIntegrationSpecificSettings ($userID: UUID!, $integrationID: UUID!, $input: NotificationIntegrationSettingsInput!) {
	updateNotificationIntegrationSettings(userID: $userID, integrationID: $integrationID, input: $input) {
		build
		deploy
		podCrash
	}
}
`

func UpdateNotificationIntegrationSpecificSettingsMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	userID uuid.UUID,
	integrationID uuid.UUID,
	input NotificationIntegrationSettingsInput,
) (*updateNotificationIntegrationSpecificSettingsResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateNotificationIntegrationSpecificSettings",
		Query:  updateNotificationIntegrationSpecificSettings_Operation,
		Variables: &__updateNotificationIntegrationSpecificSettingsInput{
			UserID:        userID,
			IntegrationID: integrationID,
			Input:         input,
		},
	}
	var err_ error

	var data_ updateNotificationIntegrationSpecificSettingsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateProjectDangerSettings.
const updateProjectDangerSettings_Operation = `
mutation updateProjectDangerSettings ($input: UpdateProjectDangerInput!) {
	updateProjectDanger(input: $input) {
		id
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func UpdateProjectDangerSettingsMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateProjectDangerInput,
) (*updateProjectDangerSettingsResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateProjectDangerSettings",
		Query:  updateProjectDangerSettings_Operation,
		Variables: &__updateProjectDangerSettingsInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateProjectDangerSettingsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateProjectEnvironment.
const updateProjectEnvironment_Operation = `
mutation updateProjectEnvironment ($input: UpdateProjectEnvironmentInput!) {
	updateProjectEnvironment(input: $input) {
		id
		name
	}
}
`

func UpdateProjectEnvironmentMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateProjectEnvironmentInput,
) (*updateProjectEnvironmentResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateProjectEnvironment",
		Query:  updateProjectEnvironment_Operation,
		Variables: &__updateProjectEnvironmentInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateProjectEnvironmentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateProjectEnvironmentVariables.
const updateProjectEnvironmentVariables_Operation = `
mutation updateProjectEnvironmentVariables ($input: UpdateProjectV2Input!) {
	updateProjectV2(input: $input) {
		id
	}
}
`

func UpdateProjectEnvironmentVariablesMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateProjectV2Input,
) (*updateProjectEnvironmentVariablesResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateProjectEnvironmentVariables",
		Query:  updateProjectEnvironmentVariables_Operation,
		Variables: &__updateProjectEnvironmentVariablesInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateProjectEnvironmentVariablesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateProjectSettings.
const updateProjectSettings_Operation = `
mutation updateProjectSettings ($input: UpdateProjectInput!) {
	updateProject(input: $input) {
		id
		... RepoDetail
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func UpdateProjectSettingsMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateProjectInput,
) (*updateProjectSettingsResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateProjectSettings",
		Query:  updateProjectSettings_Operation,
		Variables: &__updateProjectSettingsInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateProjectSettingsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateProjectV2.
const updateProjectV2_Operation = `
mutation updateProjectV2 ($input: UpdateProjectV2Input!) {
	updateProjectV2(input: $input) {
		... ProjectBasic
	}
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
`

func UpdateProjectV2Mutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateProjectV2Input,
) (*updateProjectV2Response, error) {
	req_ := &graphql.Request{
		OpName: "updateProjectV2",
		Query:  updateProjectV2_Operation,
		Variables: &__updateProjectV2Input{
			Input: input,
		},
	}
	var err_ error

	var data_ updateProjectV2Response
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateProjectV3.
const updateProjectV3_Operation = `
mutation updateProjectV3 ($projectID: UUID!, $input: UpdateProjectV3Input!) {
	updateProjectV3(projectID: $projectID, input: $input) {
		id
	}
}
`

func UpdateProjectV3Mutation(
	ctx_ context.Context,
	client_ graphql.Client,
	projectID uuid.UUID,
	input UpdateProjectV3Input,
) (*updateProjectV3Response, error) {
	req_ := &graphql.Request{
		OpName: "updateProjectV3",
		Query:  updateProjectV3_Operation,
		Variables: &__updateProjectV3Input{
			ProjectID: projectID,
			Input:     input,
		},
	}
	var err_ error

	var data_ updateProjectV3Response
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateRepoPipelineLink.
const updateRepoPipelineLink_Operation = `
mutation updateRepoPipelineLink ($input: UpdateRepoPipelineLinkInput!) {
	updateRepoPipelineLink(input: $input) {
		... RepoPipelineLinkDetail
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
`

func UpdateRepoPipelineLinkMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateRepoPipelineLinkInput,
) (*updateRepoPipelineLinkResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateRepoPipelineLink",
		Query:  updateRepoPipelineLink_Operation,
		Variables: &__updateRepoPipelineLinkInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateRepoPipelineLinkResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateResourceAlpha.
const updateResourceAlpha_Operation = `
mutation updateResourceAlpha ($id: UUID!, $input: UpdateResourceAlphaInput!) {
	updateResourceAlpha(repoID: $id, input: $input) {
		id
	}
}
`

func UpdateResourceAlphaMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateResourceAlphaInput,
) (*updateResourceAlphaResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateResourceAlpha",
		Query:  updateResourceAlpha_Operation,
		Variables: &__updateResourceAlphaInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ updateResourceAlphaResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateSlackWebhookIntegration.
const updateSlackWebhookIntegration_Operation = `
mutation updateSlackWebhookIntegration ($input: UpdateWebhookIntegrationInput!) {
	updateSlackWebhookIntegration(input: $input) {
		id
		... IntegrationCommon
		... on SlackWebhookIntegration {
			url
		}
	}
}
fragment IntegrationCommon on Integration {
	id
	type
	name
	description
	image
	createdAt
	updatedAt
}
`

func UpdateSlackWebhookIntegrationMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateWebhookIntegrationInput,
) (*updateSlackWebhookIntegrationResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateSlackWebhookIntegration",
		Query:  updateSlackWebhookIntegration_Operation,
		Variables: &__updateSlackWebhookIntegrationInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateSlackWebhookIntegrationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateTeam.
const updateTeam_Operation = `
mutation updateTeam ($input: UpdateTeamInput!) {
	updateTeam(input: $input) {
		... TeamCommon
	}
}
fragment TeamCommon on Team {
	id
	plan {
		tier
		billingPeriod
	}
	user {
		id
		... UserCommon
	}
}
fragment UserCommon on User {
	id
	... UserPublicCommon
	email
	createdAt
	freeTrialEndsAt
	hasPaymentMethod
	paymentError
	paymentAuthorizationError
	advanced
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func UpdateTeamMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateTeamInput,
) (*updateTeamResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateTeam",
		Query:  updateTeam_Operation,
		Variables: &__updateTeamInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateTeamResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateUser.
const updateUser_Operation = `
mutation updateUser ($input: UpdateUserInput!) {
	updateUser(input: $input) {
		id
		... UserDetail
	}
}
fragment UserDetail on User {
	id
	... UserCommon
	hasZeetCloud
	hasOnboarded
	canDeploy
}
fragment UserCommon on User {
	id
	... UserPublicCommon
	email
	createdAt
	freeTrialEndsAt
	hasPaymentMethod
	paymentError
	paymentAuthorizationError
	advanced
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func UpdateUserMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateUserInput,
) (*updateUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateUser",
		Query:  updateUser_Operation,
		Variables: &__updateUserInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateVultrAccount.
const updateVultrAccount_Operation = `
mutation updateVultrAccount ($input: UpdateVultrAccountInput!) {
	updateVultrAccount(input: $input)
}
`

func UpdateVultrAccountMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateVultrAccountInput,
) (*updateVultrAccountResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateVultrAccount",
		Query:  updateVultrAccount_Operation,
		Variables: &__updateVultrAccountInput{
			Input: input,
		},
	}
	var err_ error

	var data_ updateVultrAccountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by user.
const user_Operation = `
query user ($id: ID!) {
	user(id: $id) {
		id
		... UserDetail
	}
}
fragment UserDetail on User {
	id
	... UserCommon
	hasZeetCloud
	hasOnboarded
	canDeploy
}
fragment UserCommon on User {
	id
	... UserPublicCommon
	email
	createdAt
	freeTrialEndsAt
	hasPaymentMethod
	paymentError
	paymentAuthorizationError
	advanced
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func UserQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userResponse, error) {
	req_ := &graphql.Request{
		OpName: "user",
		Query:  user_Operation,
		Variables: &__userInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userAPIKeys.
const userAPIKeys_Operation = `
query userAPIKeys ($id: ID!) {
	user(id: $id) {
		id
		apiKeys {
			id
			token
			name
			description
			createdAt
		}
	}
}
`

func UserAPIKeysQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userAPIKeysResponse, error) {
	req_ := &graphql.Request{
		OpName: "userAPIKeys",
		Query:  userAPIKeys_Operation,
		Variables: &__userAPIKeysInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userAPIKeysResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userAWSAccounts.
const userAWSAccounts_Operation = `
query userAWSAccounts ($id: ID!) {
	user(id: $id) {
		id
		awsAccounts {
			id
			... AWSAccountDetail
		}
	}
}
fragment AWSAccountDetail on AWSAccount {
	id
	name
	state
	accountID
	roleARN
	cloudFormationURL
	connected
}
`

func UserAWSAccountsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userAWSAccountsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userAWSAccounts",
		Query:  userAWSAccounts_Operation,
		Variables: &__userAWSAccountsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userAWSAccountsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userAWSAccountsWithCQ.
const userAWSAccountsWithCQ_Operation = `
query userAWSAccountsWithCQ ($id: ID!) {
	user(id: $id) {
		id
		awsAccounts {
			id
			... AWSAccountDetail
			cloudQuery {
				id
				state
			}
		}
	}
}
fragment AWSAccountDetail on AWSAccount {
	id
	name
	state
	accountID
	roleARN
	cloudFormationURL
	connected
}
`

func UserAWSAccountsWithCQQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userAWSAccountsWithCQResponse, error) {
	req_ := &graphql.Request{
		OpName: "userAWSAccountsWithCQ",
		Query:  userAWSAccountsWithCQ_Operation,
		Variables: &__userAWSAccountsWithCQInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userAWSAccountsWithCQResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userAllBasicRepos.
const userAllBasicRepos_Operation = `
query userAllBasicRepos {
	currentUser {
		id
		teams {
			id
			team {
				id
				user {
					id
					login
					repos(input: {showDisabled:true}) {
						id
						... RepoBasic
					}
				}
			}
		}
	}
}
fragment RepoBasic on Repo {
	id
	path
	name: path
	enabled
	image
	owner {
		id
		login
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UserAllBasicReposQuery(
	ctx_ context.Context,
	client_ graphql.Client,
) (*userAllBasicReposResponse, error) {
	req_ := &graphql.Request{
		OpName: "userAllBasicRepos",
		Query:  userAllBasicRepos_Operation,
	}
	var err_ error

	var data_ userAllBasicReposResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userAwsAccountConnected.
const userAwsAccountConnected_Operation = `
query userAwsAccountConnected ($id: ID!, $awsAccountId: UUID!) {
	user(id: $id) {
		id
		awsAccount(id: $awsAccountId) {
			id
			connected
			cloudFormationURL
		}
	}
}
`

func UserAwsAccountConnectedQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	awsAccountId uuid.UUID,
) (*userAwsAccountConnectedResponse, error) {
	req_ := &graphql.Request{
		OpName: "userAwsAccountConnected",
		Query:  userAwsAccountConnected_Operation,
		Variables: &__userAwsAccountConnectedInput{
			Id:           id,
			AwsAccountId: awsAccountId,
		},
	}
	var err_ error

	var data_ userAwsAccountConnectedResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userAwsResources.
const userAwsResources_Operation = `
query userAwsResources ($userId: ID!, $awsResourceSearchInput: AwsResourceSearchInput!, $awsId: UUID!) {
	user(id: $userId) {
		id
		awsAccount(id: $awsId) {
			id
			awsResources(input: $awsResourceSearchInput) {
				nextToken
				awsResources {
					arn
					type
					region
				}
			}
			accountID
		}
	}
}
`

func UserAwsResourcesQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	awsResourceSearchInput AwsResourceSearchInput,
	awsId uuid.UUID,
) (*userAwsResourcesResponse, error) {
	req_ := &graphql.Request{
		OpName: "userAwsResources",
		Query:  userAwsResources_Operation,
		Variables: &__userAwsResourcesInput{
			UserId:                 userId,
			AwsResourceSearchInput: awsResourceSearchInput,
			AwsId:                  awsId,
		},
	}
	var err_ error

	var data_ userAwsResourcesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userBalance.
const userBalance_Operation = `
query userBalance ($id: ID!) {
	user(id: $id) {
		id
		stripe {
			id
			balance
		}
	}
}
`

func UserBalanceQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userBalanceResponse, error) {
	req_ := &graphql.Request{
		OpName: "userBalance",
		Query:  userBalance_Operation,
		Variables: &__userBalanceInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userBalanceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userBasicProjects.
const userBasicProjects_Operation = `
query userBasicProjects ($id: ID!) {
	user(id: $id) {
		id
		projects(input: {page:{first:0}}) {
			nodes {
				id
				... ProjectBasic
			}
		}
	}
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
`

func UserBasicProjectsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userBasicProjectsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userBasicProjects",
		Query:  userBasicProjects_Operation,
		Variables: &__userBasicProjectsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userBasicProjectsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userBasicRepos.
const userBasicRepos_Operation = `
query userBasicRepos ($id: ID!) {
	user(id: $id) {
		id
		login
		repos(input: {showDisabled:true}) {
			id
			... RepoBasic
		}
	}
}
fragment RepoBasic on Repo {
	id
	path
	name: path
	enabled
	image
	owner {
		id
		login
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UserBasicReposQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userBasicReposResponse, error) {
	req_ := &graphql.Request{
		OpName: "userBasicRepos",
		Query:  userBasicRepos_Operation,
		Variables: &__userBasicReposInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userBasicReposResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userBilling.
const userBilling_Operation = `
query userBilling ($id: ID!) {
	user(id: $id) {
		id
		billingURL
	}
}
`

func UserBillingQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userBillingResponse, error) {
	req_ := &graphql.Request{
		OpName: "userBilling",
		Query:  userBilling_Operation,
		Variables: &__userBillingInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userBillingResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userBillingOverview.
const userBillingOverview_Operation = `
query userBillingOverview ($id: ID!) {
	user(id: $id) {
		id
		billingOverview {
			... BillingOverviewDetail
		}
	}
}
fragment BillingOverviewDetail on BillingOverview {
	currentProducts {
		__typename
		... ProductDetail
	}
	externalLinks {
		invoiceHistory {
			... UrlOrContactUsDetail
		}
		managePaymentMethod {
			... UrlOrContactUsDetail
		}
		downgrade {
			... UrlOrContactUsDetail
		}
		help {
			... UrlOrContactUsDetail
		}
	}
	subscriptionUsageAllowed {
		seats
		clusters
		cloudAccounts
		projects
		customBlueprints
	}
}
fragment ProductDetail on Product {
	productTypeMetadata {
		productType
		displayName
		pricingPageAnchor
	}
	name
	description
	sku
	displayPrice
	usage {
		unit
		unitPlural
		displayName
		currentUsage
		maximumUsage
		description
	}
	benefits
}
fragment UrlOrContactUsDetail on UrlOrContactUs {
	url
	contactUs
}
`

func UserBillingOverviewQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userBillingOverviewResponse, error) {
	req_ := &graphql.Request{
		OpName: "userBillingOverview",
		Query:  userBillingOverview_Operation,
		Variables: &__userBillingOverviewInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userBillingOverviewResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userBranchResources.
const userBranchResources_Operation = `
query userBranchResources ($repoId: ID!, $branch: String) {
	currentUser {
		id
		repo(id: $repoId) {
			id
			branch(name: $branch) {
				resources {
					id
					resourceType
					shared
					region
				}
			}
		}
	}
}
`

func UserBranchResourcesQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	repoId uuid.UUID,
	branch *string,
) (*userBranchResourcesResponse, error) {
	req_ := &graphql.Request{
		OpName: "userBranchResources",
		Query:  userBranchResources_Operation,
		Variables: &__userBranchResourcesInput{
			RepoId: repoId,
			Branch: branch,
		},
	}
	var err_ error

	var data_ userBranchResourcesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userClouds.
const userClouds_Operation = `
query userClouds ($id: ID!) {
	user(id: $id) {
		id
		... UserClouds
	}
}
fragment UserClouds on User {
	awsAccounts {
		id
		clusters {
			name
		}
		projectV3Adapters {
			... ProjectV3AdapterConnectionCommon
		}
		updatedAt
		... AWSAccountDetail
	}
	gcpAccounts {
		id
		projectV3Adapters {
			... ProjectV3AdapterConnectionCommon
		}
		clusters {
			name
		}
		updatedAt
		... GCPAccountDetail
	}
	doAccounts {
		id
		projectV3Adapters {
			... ProjectV3AdapterConnectionCommon
		}
		updatedAt
		clusters {
			name
		}
		... DOAccountDetail
	}
	coreweaveAccounts {
		id
		updatedAt
		clusters {
			name
			projectV3Adapters {
				... ProjectV3AdapterConnectionCommon
			}
		}
		... CWAccountDetail
	}
	linodeAccounts {
		id
		projectV3Adapters {
			... ProjectV3AdapterConnectionCommon
		}
		updatedAt
		clusters {
			name
		}
		... LinodeAccountDetail
	}
	vultrAccounts {
		id
		clusters {
			name
		}
		projectV3Adapters {
			... ProjectV3AdapterConnectionCommon
		}
		updatedAt
		... VultrAccountDetail
	}
	azureAccounts {
		id
		clusters {
			name
		}
		projectV3Adapters {
			... ProjectV3AdapterConnectionCommon
		}
		updatedAt
		... AzureAccountDetail
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment AWSAccountDetail on AWSAccount {
	id
	name
	state
	accountID
	roleARN
	cloudFormationURL
	connected
}
fragment GCPAccountDetail on GCPAccount {
	id
	name
	state
	projectID
	clientEmail
	connected
	error
}
fragment DOAccountDetail on DOAccount {
	id
	name
	state
	accessTokenPrefix
	defaultProject
	connected
}
fragment CWAccountDetail on CoreWeaveAccount {
	id
	name
	state
	namespace
	connected
}
fragment LinodeAccountDetail on LinodeAccount {
	id
	name
	state
	accessTokenPrefix
	connected
}
fragment VultrAccountDetail on VultrAccount {
	id
	name
	state
	connected
}
fragment AzureAccountDetail on AzureAccount {
	id
	name
	state
	connected
	subscriptionID
	tenantID
	clientID
}
`

func UserCloudsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userCloudsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userClouds",
		Query:  userClouds_Operation,
		Variables: &__userCloudsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userCloudsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userClusters.
const userClusters_Operation = `
query userClusters ($id: ID!) {
	user(id: $id) {
		id
		clusters {
			id
			... ClusterDetail
		}
	}
}
fragment ClusterDetail on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	isEjected
	components {
		name
		type
		status
		isInstalledByZeet
		exists
		project {
			id
			project {
				name
			}
			projectEnvironment {
				name
			}
			name
		}
		helmMetadata {
			values
			namespace
			releaseName
			chartRepoGuess
			chartVersion
			chartName
		}
	}
	terraformProjectUrl
	awsAccount {
		id
		name
		accountID
	}
	gcpAccount {
		id
		name
		projectID
	}
	doAccount {
		id
		name
		defaultProject
	}
	cwAccount {
		id
		name
		namespace
	}
	linodeAccount {
		id
		name
		accessTokenPrefix
	}
	azureAccount {
		id
		name
		subscriptionID
	}
	vultrAccount {
		id
		name
	}
	ingressIP
	ingressDNS
	clusterProvider
	cloudProvider
	cloudAccount {
		__typename
		... on AWSAccount {
			id
		}
		... on AzureAccount {
			id
		}
		... on CoreWeaveAccount {
			id
		}
		... on DOAccount {
			id
		}
		... on GCPAccount {
			id
		}
		... on LinodeAccount {
			id
		}
		... on VultrAccount {
			id
		}
	}
	prometheus {
		url
		user
		password
		token
	}
	grafana {
		url
		user
		password
	}
	containerRegistry {
		id
		name
		credentialProvider
		username
	}
	containerRepository
	containerCacheRepository
	updatedAt
	createdAt
	projects {
		... ProjectConnectionComon
	}
	projectV3Adapters {
		... ProjectV3AdapterConnectionCommon
	}
	deployJob {
		id
		state
	}
}
fragment ProjectConnectionComon on ProjectConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		repo {
			... RepoCommon
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UserClustersQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userClustersResponse, error) {
	req_ := &graphql.Request{
		OpName: "userClusters",
		Query:  userClusters_Operation,
		Variables: &__userClustersInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userClustersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userContainerRegistries.
const userContainerRegistries_Operation = `
query userContainerRegistries ($id: ID!) {
	user(id: $id) {
		id
		clusters {
			id
			containerRegistry {
				id
				name
				credentialProvider
			}
		}
		... UserContainerRegistries
	}
}
fragment UserContainerRegistries on User {
	containerRegistries {
		id
		name
		registry
		username
	}
}
`

func UserContainerRegistriesQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userContainerRegistriesResponse, error) {
	req_ := &graphql.Request{
		OpName: "userContainerRegistries",
		Query:  userContainerRegistries_Operation,
		Variables: &__userContainerRegistriesInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userContainerRegistriesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userCoreWeaveAccounts.
const userCoreWeaveAccounts_Operation = `
query userCoreWeaveAccounts ($id: ID!) {
	user(id: $id) {
		id
		coreweaveAccounts {
			id
			... CWAccountDetail
		}
	}
}
fragment CWAccountDetail on CoreWeaveAccount {
	id
	name
	state
	namespace
	connected
}
`

func UserCoreWeaveAccountsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userCoreWeaveAccountsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userCoreWeaveAccounts",
		Query:  userCoreWeaveAccounts_Operation,
		Variables: &__userCoreWeaveAccountsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userCoreWeaveAccountsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userCrispAuth.
const userCrispAuth_Operation = `
query userCrispAuth ($id: ID!) {
	user(id: $id) {
		crispAuth {
			email
			hmac
			nickname
			participants
		}
	}
}
`

func UserCrispAuthQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userCrispAuthResponse, error) {
	req_ := &graphql.Request{
		OpName: "userCrispAuth",
		Query:  userCrispAuth_Operation,
		Variables: &__userCrispAuthInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userCrispAuthResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userDOAccounts.
const userDOAccounts_Operation = `
query userDOAccounts ($id: ID!) {
	user(id: $id) {
		id
		doAccounts {
			id
			... DOAccountDetail
		}
	}
}
fragment DOAccountDetail on DOAccount {
	id
	name
	state
	accessTokenPrefix
	defaultProject
	connected
}
`

func UserDOAccountsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userDOAccountsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userDOAccounts",
		Query:  userDOAccounts_Operation,
		Variables: &__userDOAccountsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userDOAccountsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userDeployTargets.
const userDeployTargets_Operation = `
query userDeployTargets ($id: ID!) {
	user(id: $id) {
		id
		hasZeetCloud
		defaultCluster {
			id
			... ClusterDetail
		}
		awsAccounts {
			id
			... AWSAccountDetail
		}
		gcpAccounts {
			id
			... GCPAccountDetail
		}
		doAccounts {
			id
			... DOAccountDetail
		}
		linodeAccounts {
			id
			... LinodeAccountDetail
		}
		coreweaveAccounts {
			id
			... CWAccountDetail
		}
		clusters {
			id
			... ClusterDetail
		}
	}
}
fragment ClusterDetail on Cluster {
	id
	name
	region
	state
	status
	connected
	domain
	isExternal
	isEjected
	components {
		name
		type
		status
		isInstalledByZeet
		exists
		project {
			id
			project {
				name
			}
			projectEnvironment {
				name
			}
			name
		}
		helmMetadata {
			values
			namespace
			releaseName
			chartRepoGuess
			chartVersion
			chartName
		}
	}
	terraformProjectUrl
	awsAccount {
		id
		name
		accountID
	}
	gcpAccount {
		id
		name
		projectID
	}
	doAccount {
		id
		name
		defaultProject
	}
	cwAccount {
		id
		name
		namespace
	}
	linodeAccount {
		id
		name
		accessTokenPrefix
	}
	azureAccount {
		id
		name
		subscriptionID
	}
	vultrAccount {
		id
		name
	}
	ingressIP
	ingressDNS
	clusterProvider
	cloudProvider
	cloudAccount {
		__typename
		... on AWSAccount {
			id
		}
		... on AzureAccount {
			id
		}
		... on CoreWeaveAccount {
			id
		}
		... on DOAccount {
			id
		}
		... on GCPAccount {
			id
		}
		... on LinodeAccount {
			id
		}
		... on VultrAccount {
			id
		}
	}
	prometheus {
		url
		user
		password
		token
	}
	grafana {
		url
		user
		password
	}
	containerRegistry {
		id
		name
		credentialProvider
		username
	}
	containerRepository
	containerCacheRepository
	updatedAt
	createdAt
	projects {
		... ProjectConnectionComon
	}
	projectV3Adapters {
		... ProjectV3AdapterConnectionCommon
	}
	deployJob {
		id
		state
	}
}
fragment AWSAccountDetail on AWSAccount {
	id
	name
	state
	accountID
	roleARN
	cloudFormationURL
	connected
}
fragment GCPAccountDetail on GCPAccount {
	id
	name
	state
	projectID
	clientEmail
	connected
	error
}
fragment DOAccountDetail on DOAccount {
	id
	name
	state
	accessTokenPrefix
	defaultProject
	connected
}
fragment LinodeAccountDetail on LinodeAccount {
	id
	name
	state
	accessTokenPrefix
	connected
}
fragment CWAccountDetail on CoreWeaveAccount {
	id
	name
	state
	namespace
	connected
}
fragment ProjectConnectionComon on ProjectConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		repo {
			... RepoCommon
		}
	}
}
fragment ProjectV3AdapterConnectionCommon on ProjectV3AdapterConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		name
		project {
			id
			name
		}
		projectEnvironment {
			id
			name
		}
	}
	totalCount
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UserDeployTargetsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userDeployTargetsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userDeployTargets",
		Query:  userDeployTargets_Operation,
		Variables: &__userDeployTargetsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userDeployTargetsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userDeployment.
const userDeployment_Operation = `
query userDeployment ($id: ID!) {
	currentUser {
		id
		deployment(id: $id) {
			id
			... DeploymentDetail
		}
	}
}
fragment DeploymentDetail on Deployment {
	... DeploymentCommon
	branch
	buildStage {
		id
	}
	releaseStage {
		id
	}
	deployStage {
		id
	}
	repo {
		id
		ports {
			https
			public
		}
		... RepoCommon
	}
	awsLinks {
		... LambdaLinks
		rds
	}
	gcpLinks {
		... CloudFunctionsLinks
	}
	deploymentError {
		errorID
		errorCode
		message
	}
	createdAt
	updatedAt
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UserDeploymentQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userDeploymentResponse, error) {
	req_ := &graphql.Request{
		OpName: "userDeployment",
		Query:  userDeployment_Operation,
		Variables: &__userDeploymentInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userDeploymentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userDeploymentMetric.
const userDeploymentMetric_Operation = `
query userDeploymentMetric ($deploymentID: ID!, $deploymentUUID: UUID!, $queryOptions: MetricQueryOptions) {
	currentUser {
		id
		deployment(id: $deploymentID) {
			id
			cpuMetrics: metricsV2(deploymentID: $deploymentUUID, metricType: CPU, queryOptions: $queryOptions) {
				... MetricStream
			}
			memoryMetrics: metricsV2(deploymentID: $deploymentUUID, metricType: MEMORY, queryOptions: $queryOptions) {
				... MetricStream
			}
			networkMetrics: metricsV2(deploymentID: $deploymentUUID, metricType: NETWORK, queryOptions: $queryOptions) {
				... MetricStream
			}
			diskMetrics: metricsV2(deploymentID: $deploymentUUID, metricType: STORAGE, queryOptions: $queryOptions) {
				... MetricStream
			}
		}
	}
}
fragment MetricStream on MetricStream {
	type
	query
	labels {
		label
		value
	}
	entries {
		value
		timestamp
	}
}
`

func UserDeploymentMetricQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	deploymentID uuid.UUID,
	deploymentUUID uuid.UUID,
	queryOptions *MetricQueryOptions,
) (*userDeploymentMetricResponse, error) {
	req_ := &graphql.Request{
		OpName: "userDeploymentMetric",
		Query:  userDeploymentMetric_Operation,
		Variables: &__userDeploymentMetricInput{
			DeploymentID:   deploymentID,
			DeploymentUUID: deploymentUUID,
			QueryOptions:   queryOptions,
		},
	}
	var err_ error

	var data_ userDeploymentMetricResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userEphemeralContainers.
const userEphemeralContainers_Operation = `
query userEphemeralContainers ($id: ID!) {
	currentUser {
		id
		deployment(id: $id) {
			id
			ephemeralContainers {
				name
				image
				ready
			}
		}
	}
}
`

func UserEphemeralContainersQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userEphemeralContainersResponse, error) {
	req_ := &graphql.Request{
		OpName: "userEphemeralContainers",
		Query:  userEphemeralContainers_Operation,
		Variables: &__userEphemeralContainersInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userEphemeralContainersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userGCPAccounts.
const userGCPAccounts_Operation = `
query userGCPAccounts ($id: ID!) {
	user(id: $id) {
		id
		gcpAccounts {
			id
			... GCPAccountDetail
		}
	}
}
fragment GCPAccountDetail on GCPAccount {
	id
	name
	state
	projectID
	clientEmail
	connected
	error
}
`

func UserGCPAccountsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userGCPAccountsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userGCPAccounts",
		Query:  userGCPAccounts_Operation,
		Variables: &__userGCPAccountsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userGCPAccountsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userGithubOrgs.
const userGithubOrgs_Operation = `
query userGithubOrgs {
	currentUser {
		id
		githubInstallations {
			id
			account {
				id
				login
				avatar
				type
			}
		}
	}
}
`

func UserGithubOrgsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
) (*userGithubOrgsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userGithubOrgs",
		Query:  userGithubOrgs_Operation,
	}
	var err_ error

	var data_ userGithubOrgsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userGithubRepo.
const userGithubRepo_Operation = `
query userGithubRepo ($installationId: ID!, $owner: String!, $repo: String!) {
	currentUser {
		id
		githubRepository(installationID: $installationId, owner: $owner, repo: $repo) {
			id
			... GitHubRepo
			... GithubDetail
		}
	}
}
fragment GitHubRepo on GitHubRepository {
	id
	name
	owner
	url
	description
	isFork
	isPrivate
	primaryLanguage
	updatedAt
}
fragment GithubDetail on GitHubRepository {
	defaultBranch {
		name
	}
	ports {
		port
		protocol
		https
		public
	}
	volumes {
		mountPath
		size
	}
	buildMethodSuggestions {
		name
		type
		dockerfilePath
		buildCommand
		staticPath
		runCommand
	}
}
`

func UserGithubRepoQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	installationId uuid.UUID,
	owner string,
	repo string,
) (*userGithubRepoResponse, error) {
	req_ := &graphql.Request{
		OpName: "userGithubRepo",
		Query:  userGithubRepo_Operation,
		Variables: &__userGithubRepoInput{
			InstallationId: installationId,
			Owner:          owner,
			Repo:           repo,
		},
	}
	var err_ error

	var data_ userGithubRepoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userGithubRepoServerless.
const userGithubRepoServerless_Operation = `
query userGithubRepoServerless ($installationId: ID!, $owner: String!, $repo: String!) {
	currentUser {
		id
		githubRepository(installationID: $installationId, owner: $owner, repo: $repo) {
			id
			... GitHubRepo
			... GithubDetail
			serverless {
				service
				provider {
					name
					region
					runtime
					stackName
					stage
				}
				functions {
					name
					handler
				}
			}
		}
	}
}
fragment GitHubRepo on GitHubRepository {
	id
	name
	owner
	url
	description
	isFork
	isPrivate
	primaryLanguage
	updatedAt
}
fragment GithubDetail on GitHubRepository {
	defaultBranch {
		name
	}
	ports {
		port
		protocol
		https
		public
	}
	volumes {
		mountPath
		size
	}
	buildMethodSuggestions {
		name
		type
		dockerfilePath
		buildCommand
		staticPath
		runCommand
	}
}
`

func UserGithubRepoServerlessQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	installationId uuid.UUID,
	owner string,
	repo string,
) (*userGithubRepoServerlessResponse, error) {
	req_ := &graphql.Request{
		OpName: "userGithubRepoServerless",
		Query:  userGithubRepoServerless_Operation,
		Variables: &__userGithubRepoServerlessInput{
			InstallationId: installationId,
			Owner:          owner,
			Repo:           repo,
		},
	}
	var err_ error

	var data_ userGithubRepoServerlessResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userGithubRepos.
const userGithubRepos_Operation = `
query userGithubRepos {
	currentUser {
		id
		login
		avatar
		githubInstallations {
			id
			targetType
			account {
				id
				login
				avatar
				type
			}
			repositorySelection
			repositories {
				... GitHubRepo
			}
		}
	}
}
fragment GitHubRepo on GitHubRepository {
	id
	name
	owner
	url
	description
	isFork
	isPrivate
	primaryLanguage
	updatedAt
}
`

func UserGithubReposQuery(
	ctx_ context.Context,
	client_ graphql.Client,
) (*userGithubReposResponse, error) {
	req_ := &graphql.Request{
		OpName: "userGithubRepos",
		Query:  userGithubRepos_Operation,
	}
	var err_ error

	var data_ userGithubReposResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userIntegrations.
const userIntegrations_Operation = `
query userIntegrations ($id: ID!) {
	user(id: $id) {
		id
		integrations {
			__typename
			id
			... IntegrationDetail
		}
		notificationIntegrationSettings {
			build
			deploy
			podCrash
		}
	}
}
fragment IntegrationDetail on Integration {
	id
	... IntegrationCommon
	... NotificationIntegrationCommon
	... on DiscordWebhookIntegration {
		url
	}
	... on SlackWebhookIntegration {
		url
	}
	... on DatadogIntegration {
		apiKey
	}
	... on GitlabIntegration {
		accessTokenPrefix
		webhookUrl
		webhookToken
	}
	... on GithubIntegration {
		login
		appID
		installationID
		targetType
	}
	... on BitbucketIntegration {
		webhookUrl
		webhookToken
		account {
			username
		}
		authType
	}
	... on EmailIntegration {
		emailAddress
		activated
	}
}
fragment IntegrationCommon on Integration {
	id
	type
	name
	description
	image
	createdAt
	updatedAt
}
fragment NotificationIntegrationCommon on NotificationIntegration {
	notificationSettings {
		build
		deploy
		podCrash
		conditions {
			__typename
			... on NotificationCondition {
				key
				operator
				value
			}
		}
	}
}
`

func UserIntegrationsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userIntegrationsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userIntegrations",
		Query:  userIntegrations_Operation,
		Variables: &__userIntegrationsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userIntegrationsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userJob.
const userJob_Operation = `
query userJob ($jobID: UUID!) {
	currentUser {
		jobRun(id: $jobID) {
			id
			... JobCommon
			logs {
				id
				completed
				expired
				entries {
					timestamp
					text
				}
			}
		}
	}
}
fragment JobCommon on JobRun {
	id
	state
	build {
		version
	}
	command
	exitCode
	createdAt
}
`

func UserJobQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	jobID uuid.UUID,
) (*userJobResponse, error) {
	req_ := &graphql.Request{
		OpName: "userJob",
		Query:  userJob_Operation,
		Variables: &__userJobInput{
			JobID: jobID,
		},
	}
	var err_ error

	var data_ userJobResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userLinodeAccounts.
const userLinodeAccounts_Operation = `
query userLinodeAccounts ($id: ID!) {
	user(id: $id) {
		id
		linodeAccounts {
			id
			... LinodeAccountDetail
		}
	}
}
fragment LinodeAccountDetail on LinodeAccount {
	id
	name
	state
	accessTokenPrefix
	connected
}
`

func UserLinodeAccountsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userLinodeAccountsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userLinodeAccounts",
		Query:  userLinodeAccounts_Operation,
		Variables: &__userLinodeAccountsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userLinodeAccountsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userPayment.
const userPayment_Operation = `
query userPayment ($id: ID!) {
	user(id: $id) {
		id
		hasPaymentMethod
		needsPaymentMethod
		freeQuota
		paymentError
	}
}
`

func UserPaymentQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userPaymentResponse, error) {
	req_ := &graphql.Request{
		OpName: "userPayment",
		Query:  userPayment_Operation,
		Variables: &__userPaymentInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userPaymentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userProductCatalog.
const userProductCatalog_Operation = `
query userProductCatalog ($forUserID: UUID!) {
	productCatalog {
		products(forUserID: $forUserID) {
			... ProductCatalogSectionDetail
		}
	}
}
fragment ProductCatalogSectionDetail on ProductCatalogSection {
	sectionName
	productTypeMetadata {
		productType
		displayName
		pricingPageAnchor
	}
	allProducts {
		product {
			__typename
			... ProductDetail
		}
		description
		status
		available
	}
}
fragment ProductDetail on Product {
	productTypeMetadata {
		productType
		displayName
		pricingPageAnchor
	}
	name
	description
	sku
	displayPrice
	usage {
		unit
		unitPlural
		displayName
		currentUsage
		maximumUsage
		description
	}
	benefits
}
`

func UserProductCatalogQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	forUserID uuid.UUID,
) (*userProductCatalogResponse, error) {
	req_ := &graphql.Request{
		OpName: "userProductCatalog",
		Query:  userProductCatalog_Operation,
		Variables: &__userProductCatalogInput{
			ForUserID: forUserID,
		},
	}
	var err_ error

	var data_ userProductCatalogResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userProjectV3.
const userProjectV3_Operation = `
query userProjectV3 ($userId: ID!, $projectName: String!, $page: PageInput!) {
	user(id: $userId) {
		id
		projectV3Adapters(filter: {filter:{criterion:{resourceAdapterFilter:{name:{value:$projectName,operator:CONTAINS}}}},page:$page}) {
			totalCount
			... ProjectV3ListItemConnection
			pageInfo {
				startCursor
				endCursor
				hasNextPage
				hasPreviousPage
			}
		}
	}
}
fragment ProjectV3ListItemConnection on ProjectV3AdapterConnection {
	nodes {
		name
		id
		status
		isDeployV2
		projectV3 {
			... ProjectV3ListItem
		}
		repo {
			... RepoCommon
		}
		project {
			id
			name
			defaultRepo {
				id
			}
		}
		projectEnvironment {
			id
			name
		}
		updatedAt
	}
}
fragment ProjectV3ListItem on ProjectV3 {
	id
	name
	blueprintID
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UserProjectV3Query(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	projectName string,
	page PageInput,
) (*userProjectV3Response, error) {
	req_ := &graphql.Request{
		OpName: "userProjectV3",
		Query:  userProjectV3_Operation,
		Variables: &__userProjectV3Input{
			UserId:      userId,
			ProjectName: projectName,
			Page:        page,
		},
	}
	var err_ error

	var data_ userProjectV3Response
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userProjectV3Deployments.
const userProjectV3Deployments_Operation = `
query userProjectV3Deployments ($userId: ID!, $projectName: String!, $page: PageInput!) {
	user(id: $userId) {
		projectV3Adapters(filter: {filter:{criterion:{resourceAdapterFilter:{name:{value:$projectName,operator:CONTAINS}}}},page:$page}) {
			totalCount
			... ProjectV3ProductionDeploymentConnection
			pageInfo {
				startCursor
				endCursor
				hasNextPage
				hasPreviousPage
			}
		}
	}
}
fragment ProjectV3ProductionDeploymentConnection on ProjectV3AdapterConnection {
	nodes {
		id
		repo {
			id
			productionDeployment {
				id
				... DeploymentCommon
			}
		}
	}
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
`

func UserProjectV3DeploymentsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	projectName string,
	page PageInput,
) (*userProjectV3DeploymentsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userProjectV3Deployments",
		Query:  userProjectV3Deployments_Operation,
		Variables: &__userProjectV3DeploymentsInput{
			UserId:      userId,
			ProjectName: projectName,
			Page:        page,
		},
	}
	var err_ error

	var data_ userProjectV3DeploymentsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userProjectsProductionDeployments.
const userProjectsProductionDeployments_Operation = `
query userProjectsProductionDeployments ($id: ID!) {
	user(id: $id) {
		id
		projects(input: {page:{first:0}}) {
			nodes {
				id
				repo {
					id
					productionDeployment {
						id
						... DeploymentCommon
					}
				}
			}
		}
	}
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
`

func UserProjectsProductionDeploymentsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userProjectsProductionDeploymentsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userProjectsProductionDeployments",
		Query:  userProjectsProductionDeployments_Operation,
		Variables: &__userProjectsProductionDeploymentsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userProjectsProductionDeploymentsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userRepo.
const userRepo_Operation = `
query userRepo ($id: ID!) {
	currentUser {
		id
		repo(id: $id) {
			id
			... RepoDetail
		}
	}
}
fragment RepoDetail on Repo {
	secretMounts {
		secretName
		mountPath
		readOnly
	}
	kubernetesCustomization {
		serviceAccountName
		podAnnotations
		serviceAnnotations
		ingressAnnotations
	}
	manifest {
		manifests
		manifestValue
		kustomizeDirs
	}
	appID
	defaultIngressDomain
	kappID
	useHumanReadableKubernetesName
	... RepoCommon
	... RepoNetwork
	... RepoBuild
	project {
		id
		name
		environments {
			... ProjectEnvironmentBasic
		}
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	productionDeployment {
		... DeploymentCommon
		awsLinks {
			... LambdaLinks
			rds
		}
		gcpLinks {
			... CloudFunctionsLinks
		}
		loadBalancers {
			dns
			ips
			ports
		}
	}
	namespace
	envs {
		id
		name
		value
		visible
		sealed
		source {
			type
		}
	}
	collaborators {
		id
		... CollaboratorCommon
	}
	volumes {
		mountPath
		size
	}
	replication {
		region
		replicas
		cluster {
			id
			name
			region
		}
	}
	deployTarget
	cluster {
		id
		name
		region
		ingressIP
		connected
		staticIPs
		cloudProvider
		clusterProvider
	}
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	logShipper {
		type
		logz {
			token
			url
		}
		syslog {
			host
			port
			mode
		}
		logDNA {
			key
		}
		datadog {
			key
			host
		}
		betterstack {
			token
		}
	}
	readinessProbe {
		... ProbeDetail
	}
	livenessProbe {
		... ProbeDetail
	}
	startupProbe {
		... ProbeDetail
	}
	manualDeploy
	deployStrategy
	free
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		type
		cores
		tfVersion
	}
	ephemeralStorage
	dedicated
	githubIntegration {
		id
		githubRepository {
			id
			owner
			name
		}
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	gitlabIntegration {
		id
		autoDeployBranch
		autoStopBranch
		branchIgnore
		branchStopIgnore
	}
	productionBranch
	branchResources {
		... Resources
	}
	serverlessResources {
		cpu
		memory
	}
	serverlessRegion
	prometheusScrape {
		path
		port
	}
	helmValues
	terraformVersion
	terraformVariables
	jobRuns {
		totalCount
	}
	deployService
	deployJob
	preStopSleep
	terminationGracePeriodSeconds
	autoscaling {
		kedaScaledObjectSpec
		minReplicas
		maxReplicas
		coolDownPeriod
		triggers {
			type
			spec
		}
	}
	containerRegistry {
		id
	}
	databaseProvider
	databaseEngine
	databaseVersion
	databaseEnvs {
		name
		value
	}
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
	autoRetry
	autoRollback
	canDeploy
	pipelineCluster {
		id
	}
	awsIamRole
	gcpServiceAccount
	datadogApmEnabled
	projectEnvironment {
		id
		name
		envs {
			id
			name
			value
			visible
			sealed
			source {
				type
			}
		}
	}
	pipelineLinks {
		... RepoPipelineLinkDetail
	}
	deployTimeoutSeconds
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment RepoNetwork on Repo {
	... RepoCommon
	clusterDomains {
		id
		... ClusterDomainsDetail
	}
	cdns {
		id
		... CDNDetail
	}
	ports {
		port
		protocol
		public
		https
		grpc
		loadBalancer
	}
	hostNetwork
	staticIP
}
fragment RepoBuild on Repo {
	buildMethod {
		name
		type
		workingDirectory
		dockerfilePath
		buildCommand
		staticPath
		runCommand
		releaseCommand
		nodejsVersion
		pythonVersion
		golangVersion
	}
	buildResources {
		cpu
		memory
		ephemeralStorage
		spot
	}
	buildSpec {
		cpu
		memory
	}
	noBuildCache
	gitSubmodules
	kanikoFlags {
		compressedCaching
	}
	alternativeImageTagTemplates
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment LambdaLinks on AWSLinks {
	cloudformation
	lambda
	apiGateway
	cloudwatchLogs
	cloudwatchMetrics
}
fragment CloudFunctionsLinks on GCPLinks {
	deploymentManager
	cloudRun
	cloudFunctions
	cloudFunctionsTrigger
	cloudLogging
	cloudMonitoring
}
fragment CollaboratorCommon on ProjectCollaborator {
	id
	user {
		... UserPublicCommon
	}
	role
}
fragment ProbeDetail on Probe {
	command
	http {
		host
		port
		path
	}
	tcp {
		host
		port
	}
	initialDelaySeconds
	periodSeconds
	successThreshold
	failureThreshold
	timeoutSeconds
}
fragment Resources on ContainerResourcesSpec {
	cpu
	memory
	ephemeralStorage
	spot
	accelerator {
		type
		count
	}
}
fragment RepoPipelineLinkDetail on RepoPipelineLink {
	id
	source {
		id
	}
	sourceEvent
	targetGroup {
		id
		selector {
			matchLabels
		}
	}
	targetAction
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ClusterDomainsDetail on ClusterDomains {
	id
	cluster {
		id
		name
	}
	domains {
		id
		... DomainDetail
	}
}
fragment CDNDetail on CDN {
	id
	domains {
		domain
		certReady
		routeReady
		instruction {
			domain
			type
			value
		}
	}
	endpoint
	state
	certificate {
		dnsNames
		ready
		issuing
		instructions {
			name
			domain
			type
			value
		}
	}
}
fragment DomainDetail on CustomDomain {
	id
	domain
	isApex
	cnameTargets
	ipTargets
	disableCertManager
	certManagerChallengeType
	syncDomain {
		id
	}
	instructions {
		domain
		type
		value
	}
	certificate {
		dnsNames
		ready
		issuing
		challenges {
			dnsName
			solver
			statusReason
			statusState
			type
			wildcard
		}
		instructions {
			domain
			type
			value
		}
	}
}
`

func UserRepoQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userRepoResponse, error) {
	req_ := &graphql.Request{
		OpName: "userRepo",
		Query:  userRepo_Operation,
		Variables: &__userRepoInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userRepoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userRepoBranchesV2.
const userRepoBranchesV2_Operation = `
query userRepoBranchesV2 ($id: ID!, $branch: String, $withBranch: Boolean!, $after: String!, $first: Int!) {
	currentUser {
		id
		repo(id: $id) {
			id
			productionBranchV2 @skip(if: $withBranch) {
				id
				deployments(page: {after:$after,first:$first}) {
					... RepoBranchDeployments
				}
			}
			branch(name: $branch) @include(if: $withBranch) {
				id
				deployments(page: {after:$after,first:$first}) {
					... RepoBranchDeployments
				}
			}
		}
	}
}
fragment RepoBranchDeployments on DeploymentConnection {
	pageInfo {
		startCursor
		endCursor
		hasNextPage
		hasPreviousPage
	}
	nodes {
		id
		... DeploymentCommon
		awsLinks {
			cloudwatchLogs
		}
		gcpLinks {
			cloudLogging
		}
	}
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
`

func UserRepoBranchesV2Query(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	branch *string,
	withBranch bool,
	after string,
	first int,
) (*userRepoBranchesV2Response, error) {
	req_ := &graphql.Request{
		OpName: "userRepoBranchesV2",
		Query:  userRepoBranchesV2_Operation,
		Variables: &__userRepoBranchesV2Input{
			Id:         id,
			Branch:     branch,
			WithBranch: withBranch,
			After:      after,
			First:      first,
		},
	}
	var err_ error

	var data_ userRepoBranchesV2Response
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userRepoCloudOnboardByPath.
const userRepoCloudOnboardByPath_Operation = `
query userRepoCloudOnboardByPath ($projectPath: String, $projectId: UUID, $repoName: String!) {
	project(path: $projectPath, id: $projectId) {
		id
		repo(name: $repoName) {
			id
			... RepoDeploy
		}
	}
}
fragment RepoDeploy on Repo {
	id
	... RepoCommon
	canDeploy
	deployTarget
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UserRepoCloudOnboardByPathQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	projectPath *string,
	projectId *uuid.UUID,
	repoName string,
) (*userRepoCloudOnboardByPathResponse, error) {
	req_ := &graphql.Request{
		OpName: "userRepoCloudOnboardByPath",
		Query:  userRepoCloudOnboardByPath_Operation,
		Variables: &__userRepoCloudOnboardByPathInput{
			ProjectPath: projectPath,
			ProjectId:   projectId,
			RepoName:    repoName,
		},
	}
	var err_ error

	var data_ userRepoCloudOnboardByPathResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userRepoDeployments.
const userRepoDeployments_Operation = `
query userRepoDeployments ($id: ID!, $branch: String) {
	currentUser {
		id
		repo(id: $id) {
			id
			deployments(input: {branch:$branch}) {
				id
				... DeploymentCommon
				awsLinks {
					cloudwatchLogs
				}
				gcpLinks {
					cloudLogging
				}
			}
		}
	}
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
`

func UserRepoDeploymentsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	branch *string,
) (*userRepoDeploymentsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userRepoDeployments",
		Query:  userRepoDeployments_Operation,
		Variables: &__userRepoDeploymentsInput{
			Id:     id,
			Branch: branch,
		},
	}
	var err_ error

	var data_ userRepoDeploymentsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userRepos.
const userRepos_Operation = `
query userRepos ($id: ID!) {
	user(id: $id) {
		id
		repos(input: {showDisabled:true}) {
			id
			... RepoListItem
		}
	}
}
fragment RepoListItem on Repo {
	... RepoCommon
	productionDeployment {
		id
		... DeploymentCommon
	}
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment DeploymentCommon on Deployment {
	id
	description
	version
	status
	branch
	endpoints
	privateEndpoint
	errorMessage
	deployStatus {
		active
		replicas
		publicIPs
		state
		errorMessage
		troubleshooting {
			issue {
				blocks {
					blockType
					content
				}
			}
		}
	}
	build {
		image
	}
	alternativeImages {
		reference
		tag
		name
	}
	updatedAt
	createdAt
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UserReposQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userReposResponse, error) {
	req_ := &graphql.Request{
		OpName: "userRepos",
		Query:  userRepos_Operation,
		Variables: &__userReposInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userReposResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userReposWithDB.
const userReposWithDB_Operation = `
query userReposWithDB ($id: ID!) {
	user(id: $id) {
		id
		repos(input: {showDisabled:true}) {
			id
			... RepoCommonWithDB
		}
	}
}
fragment RepoCommonWithDB on Repo {
	id
	... RepoCommon
	databaseProvider
	databaseEngine
	databaseVersion
	databaseLinks {
		id
		envPrefix
		envs {
			name
			value
		}
		database {
			... RepoCommon
		}
	}
	linkedProjects {
		id
		envPrefix
		repo {
			... RepoCommon
		}
	}
}
fragment RepoCommon on Repo {
	id
	path
	name: path
	enabled
	source {
		id
		type
		name
	}
	deployTarget
	deployType
	deployService
	deployJob
	awsAccount {
		id
		accountID
	}
	gcpAccount {
		id
		projectID
	}
	image
	cpu
	memory
	gpu {
		type
		count
	}
	tpu {
		tfVersion
		type
		cores
	}
	updatedAt
	disableReason
	cluster {
		id
		name
		domain
		awsAccount {
			id
			accountID
		}
		gcpAccount {
			id
			projectID
		}
		doAccount {
			id
			accessTokenPrefix
		}
		cwAccount {
			id
			namespace
		}
		linodeAccount {
			id
			accessTokenPrefix
		}
		vultrAccount {
			id
			name
		}
		azureAccount {
			id
			name
		}
	}
	databaseProvider
	databaseEngine
	autoscaling {
		minReplicas
		maxReplicas
	}
	owner {
		id
		... UserPublicCommon
		advanced
	}
	project {
		id
		... ProjectBasic
	}
	projectEnvironment {
		id
		... ProjectEnvironmentBasic
	}
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment ProjectBasic on Project {
	id
	name
	owner {
		id
		login
	}
}
fragment ProjectEnvironmentBasic on ProjectEnvironment {
	id
	name
}
`

func UserReposWithDBQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userReposWithDBResponse, error) {
	req_ := &graphql.Request{
		OpName: "userReposWithDB",
		Query:  userReposWithDB_Operation,
		Variables: &__userReposWithDBInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userReposWithDBResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userTeam.
const userTeam_Operation = `
query userTeam ($id: ID!) {
	currentUser {
		id
		team(id: $id) {
			id
			... TeamDetail
		}
	}
}
fragment TeamDetail on Team {
	id
	... TeamCommon
	user {
		id
		... UserDetail
	}
}
fragment TeamCommon on Team {
	id
	plan {
		tier
		billingPeriod
	}
	user {
		id
		... UserCommon
	}
}
fragment UserDetail on User {
	id
	... UserCommon
	hasZeetCloud
	hasOnboarded
	canDeploy
}
fragment UserCommon on User {
	id
	... UserPublicCommon
	email
	createdAt
	freeTrialEndsAt
	hasPaymentMethod
	paymentError
	paymentAuthorizationError
	advanced
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func UserTeamQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userTeamResponse, error) {
	req_ := &graphql.Request{
		OpName: "userTeam",
		Query:  userTeam_Operation,
		Variables: &__userTeamInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userTeamResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userTeamMember.
const userTeamMember_Operation = `
query userTeamMember ($id: ID!) {
	currentUser {
		id
		team(id: $id) {
			id
			... TeamCommon
			... TeamMember
		}
	}
}
fragment TeamCommon on Team {
	id
	plan {
		tier
		billingPeriod
	}
	user {
		id
		... UserCommon
	}
}
fragment TeamMember on Team {
	id
	members {
		id
		user {
			... UserPublicCommon
		}
		role
	}
	memberInvitations {
		id
		... TeamInvite
	}
}
fragment UserCommon on User {
	id
	... UserPublicCommon
	email
	createdAt
	freeTrialEndsAt
	hasPaymentMethod
	paymentError
	paymentAuthorizationError
	advanced
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
fragment TeamInvite on TeamMemberInvitation {
	id
	role
	link
	email
	expiresAt
	createdAt
}
`

func UserTeamMemberQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*userTeamMemberResponse, error) {
	req_ := &graphql.Request{
		OpName: "userTeamMember",
		Query:  userTeamMember_Operation,
		Variables: &__userTeamMemberInput{
			Id: id,
		},
	}
	var err_ error

	var data_ userTeamMemberResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userTeams.
const userTeams_Operation = `
query userTeams {
	currentUser {
		id
		teams {
			id
			team {
				id
				... TeamCommon
			}
			role
		}
	}
}
fragment TeamCommon on Team {
	id
	plan {
		tier
		billingPeriod
	}
	user {
		id
		... UserCommon
	}
}
fragment UserCommon on User {
	id
	... UserPublicCommon
	email
	createdAt
	freeTrialEndsAt
	hasPaymentMethod
	paymentError
	paymentAuthorizationError
	advanced
}
fragment UserPublicCommon on User {
	id
	name
	login
	avatar
	isTeam
}
`

func UserTeamsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
) (*userTeamsResponse, error) {
	req_ := &graphql.Request{
		OpName: "userTeams",
		Query:  userTeams_Operation,
	}
	var err_ error

	var data_ userTeamsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
