// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package v1

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

// abortWorkflowRunResponse is returned by abortWorkflowRun on success.
type AbortWorkflowRunResponse struct {
	AbortWorkflowRun bool `json:"abortWorkflowRun"`
}

// GetAbortWorkflowRun returns AbortWorkflowRunResponse.AbortWorkflowRun, and is useful for accessing the field via an interface.
func (v *AbortWorkflowRunResponse) GetAbortWorkflowRun() bool { return v.AbortWorkflowRun }

type ActionTriggerConfigurationInput struct {
	WorkflowId *uuid.UUID `json:"workflowId,omitempty"`
}

// GetWorkflowId returns ActionTriggerConfigurationInput.WorkflowId, and is useful for accessing the field via an interface.
func (v *ActionTriggerConfigurationInput) GetWorkflowId() *uuid.UUID { return v.WorkflowId }

// approveWorkflowRunStepResponse is returned by approveWorkflowRunStep on success.
type ApproveWorkflowRunStepResponse struct {
	ApproveWorkflowRunStep bool `json:"approveWorkflowRunStep"`
}

// GetApproveWorkflowRunStep returns ApproveWorkflowRunStepResponse.ApproveWorkflowRunStep, and is useful for accessing the field via an interface.
func (v *ApproveWorkflowRunStepResponse) GetApproveWorkflowRunStep() bool {
	return v.ApproveWorkflowRunStep
}

type AutoscalingDataInput struct {
	MinReplicas          int                        `json:"minReplicas"`
	MaxReplicas          int                        `json:"maxReplicas"`
	CoolDownPeriod       int                        `json:"coolDownPeriod"`
	Spec                 string                     `json:"spec"`
	Triggers             []*AutoscalingTriggerInput `json:"triggers,omitempty"`
	KedaScaledObjectSpec *string                    `json:"kedaScaledObjectSpec,omitempty"`
}

// GetMinReplicas returns AutoscalingDataInput.MinReplicas, and is useful for accessing the field via an interface.
func (v *AutoscalingDataInput) GetMinReplicas() int { return v.MinReplicas }

// GetMaxReplicas returns AutoscalingDataInput.MaxReplicas, and is useful for accessing the field via an interface.
func (v *AutoscalingDataInput) GetMaxReplicas() int { return v.MaxReplicas }

// GetCoolDownPeriod returns AutoscalingDataInput.CoolDownPeriod, and is useful for accessing the field via an interface.
func (v *AutoscalingDataInput) GetCoolDownPeriod() int { return v.CoolDownPeriod }

// GetSpec returns AutoscalingDataInput.Spec, and is useful for accessing the field via an interface.
func (v *AutoscalingDataInput) GetSpec() string { return v.Spec }

// GetTriggers returns AutoscalingDataInput.Triggers, and is useful for accessing the field via an interface.
func (v *AutoscalingDataInput) GetTriggers() []*AutoscalingTriggerInput { return v.Triggers }

// GetKedaScaledObjectSpec returns AutoscalingDataInput.KedaScaledObjectSpec, and is useful for accessing the field via an interface.
func (v *AutoscalingDataInput) GetKedaScaledObjectSpec() *string { return v.KedaScaledObjectSpec }

type AutoscalingTriggerInput struct {
	Type string `json:"type"`
	Spec string `json:"spec"`
}

// GetType returns AutoscalingTriggerInput.Type, and is useful for accessing the field via an interface.
func (v *AutoscalingTriggerInput) GetType() string { return v.Type }

// GetSpec returns AutoscalingTriggerInput.Spec, and is useful for accessing the field via an interface.
func (v *AutoscalingTriggerInput) GetSpec() string { return v.Spec }

type AwsSamGeneratorConfigurationInput struct {
	EnvVars                    []*EnvVarInput `json:"envVars,omitempty"`
	RunCommand                 *string        `json:"runCommand,omitempty"`
	ServerlessMemory           *int           `json:"serverlessMemory,omitempty"`
	ServerlessArch             *string        `json:"serverlessArch,omitempty"`
	CustomDomainHost           *string        `json:"customDomainHost,omitempty"`
	CustomDomainCertificateArn *string        `json:"customDomainCertificateArn,omitempty"`
	HttpPort                   *string        `json:"httpPort,omitempty"`
	BuildImage                 *string        `json:"buildImage,omitempty"`
}

// GetEnvVars returns AwsSamGeneratorConfigurationInput.EnvVars, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetEnvVars() []*EnvVarInput { return v.EnvVars }

// GetRunCommand returns AwsSamGeneratorConfigurationInput.RunCommand, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetRunCommand() *string { return v.RunCommand }

// GetServerlessMemory returns AwsSamGeneratorConfigurationInput.ServerlessMemory, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetServerlessMemory() *int { return v.ServerlessMemory }

// GetServerlessArch returns AwsSamGeneratorConfigurationInput.ServerlessArch, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetServerlessArch() *string { return v.ServerlessArch }

// GetCustomDomainHost returns AwsSamGeneratorConfigurationInput.CustomDomainHost, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetCustomDomainHost() *string { return v.CustomDomainHost }

// GetCustomDomainCertificateArn returns AwsSamGeneratorConfigurationInput.CustomDomainCertificateArn, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetCustomDomainCertificateArn() *string {
	return v.CustomDomainCertificateArn
}

// GetHttpPort returns AwsSamGeneratorConfigurationInput.HttpPort, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetHttpPort() *string { return v.HttpPort }

// GetBuildImage returns AwsSamGeneratorConfigurationInput.BuildImage, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetBuildImage() *string { return v.BuildImage }

type AwsSamTargetConfigurationInput struct {
	AwsAccountId *uuid.UUID `json:"awsAccountId,omitempty"`
	AwsRegion    *string    `json:"awsRegion,omitempty"`
	StackName    *string    `json:"stackName,omitempty"`
}

// GetAwsAccountId returns AwsSamTargetConfigurationInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *AwsSamTargetConfigurationInput) GetAwsAccountId() *uuid.UUID { return v.AwsAccountId }

// GetAwsRegion returns AwsSamTargetConfigurationInput.AwsRegion, and is useful for accessing the field via an interface.
func (v *AwsSamTargetConfigurationInput) GetAwsRegion() *string { return v.AwsRegion }

// GetStackName returns AwsSamTargetConfigurationInput.StackName, and is useful for accessing the field via an interface.
func (v *AwsSamTargetConfigurationInput) GetStackName() *string { return v.StackName }

// BlueprintByIdBlueprint includes the requested fields of the GraphQL type Blueprint.
type BlueprintByIdBlueprint struct {
	BlueprintDetail `json:"-"`
}

// GetId returns BlueprintByIdBlueprint.Id, and is useful for accessing the field via an interface.
func (v *BlueprintByIdBlueprint) GetId() uuid.UUID { return v.BlueprintDetail.Id }

// GetType returns BlueprintByIdBlueprint.Type, and is useful for accessing the field via an interface.
func (v *BlueprintByIdBlueprint) GetType() BlueprintType { return v.BlueprintDetail.Type }

// GetIsOfficial returns BlueprintByIdBlueprint.IsOfficial, and is useful for accessing the field via an interface.
func (v *BlueprintByIdBlueprint) GetIsOfficial() *bool { return v.BlueprintDetail.IsOfficial }

// GetEnabled returns BlueprintByIdBlueprint.Enabled, and is useful for accessing the field via an interface.
func (v *BlueprintByIdBlueprint) GetEnabled() *bool { return v.BlueprintDetail.Enabled }

// GetConfiguration returns BlueprintByIdBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *BlueprintByIdBlueprint) GetConfiguration() BlueprintDetailConfigurationBlueprintConfiguration {
	return v.BlueprintDetail.Configuration
}

func (v *BlueprintByIdBlueprint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BlueprintByIdBlueprint
		graphql.NoUnmarshalJSON
	}
	firstPass.BlueprintByIdBlueprint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBlueprintByIdBlueprint struct {
	Id uuid.UUID `json:"id"`

	Type BlueprintType `json:"type"`

	IsOfficial *bool `json:"isOfficial,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	Configuration BlueprintDetailConfigurationBlueprintConfiguration `json:"configuration"`
}

func (v *BlueprintByIdBlueprint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BlueprintByIdBlueprint) __premarshalJSON() (*__premarshalBlueprintByIdBlueprint, error) {
	var retval __premarshalBlueprintByIdBlueprint

	retval.Id = v.BlueprintDetail.Id
	retval.Type = v.BlueprintDetail.Type
	retval.IsOfficial = v.BlueprintDetail.IsOfficial
	retval.Enabled = v.BlueprintDetail.Enabled
	retval.Configuration = v.BlueprintDetail.Configuration
	return &retval, nil
}

// blueprintByIdResponse is returned by blueprintById on success.
type BlueprintByIdResponse struct {
	Blueprint *BlueprintByIdBlueprint `json:"blueprint,omitempty"`
}

// GetBlueprint returns BlueprintByIdResponse.Blueprint, and is useful for accessing the field via an interface.
func (v *BlueprintByIdResponse) GetBlueprint() *BlueprintByIdBlueprint { return v.Blueprint }

// BlueprintConfigurationDetail includes the GraphQL fields of BlueprintConfiguration requested by the fragment BlueprintConfigurationDetail.
type BlueprintConfigurationDetail struct {
	// An identifier for this blueprint, unique within the owner's namespace.
	Slug string `json:"slug"`
	// A display name for this blueprint.
	DisplayName string `json:"displayName"`
	// Whether this blueprint is currently available to be used by projects. Does not affect existing projects.
	Published bool `json:"published"`
	// A description of the purpose and behavior of this blueprint.
	Description *string `json:"description,omitempty"`
	// Relevant classifications for this blueprint.
	Tags []string `json:"tags"`
	// A url for a logo image.
	LogoUrl *string `json:"logoUrl,omitempty"`
	// A schema for rich input widgets. Used to generate forms which capture the
	// necessary configuration for instantiating a project from this blueprint.
	RichInputSchema *string `json:"richInputSchema,omitempty"`
}

// GetSlug returns BlueprintConfigurationDetail.Slug, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetSlug() string { return v.Slug }

// GetDisplayName returns BlueprintConfigurationDetail.DisplayName, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetDisplayName() string { return v.DisplayName }

// GetPublished returns BlueprintConfigurationDetail.Published, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetPublished() bool { return v.Published }

// GetDescription returns BlueprintConfigurationDetail.Description, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetDescription() *string { return v.Description }

// GetTags returns BlueprintConfigurationDetail.Tags, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetTags() []string { return v.Tags }

// GetLogoUrl returns BlueprintConfigurationDetail.LogoUrl, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetLogoUrl() *string { return v.LogoUrl }

// GetRichInputSchema returns BlueprintConfigurationDetail.RichInputSchema, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetRichInputSchema() *string { return v.RichInputSchema }

// BlueprintConfigurationRevision includes the GraphQL fields of BlueprintConfiguration requested by the fragment BlueprintConfigurationRevision.
type BlueprintConfigurationRevision struct {
	RevisionDetailV1BlueprintConfiguration `json:"-"`
}

// GetRevisionData returns BlueprintConfigurationRevision.RevisionData, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationRevision) GetRevisionData() string {
	return v.RevisionDetailV1BlueprintConfiguration.RevisionData
}

// GetRevisionMetadata returns BlueprintConfigurationRevision.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationRevision) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1BlueprintConfiguration.RevisionMetadata
}

func (v *BlueprintConfigurationRevision) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BlueprintConfigurationRevision
		graphql.NoUnmarshalJSON
	}
	firstPass.BlueprintConfigurationRevision = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1BlueprintConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBlueprintConfigurationRevision struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *BlueprintConfigurationRevision) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BlueprintConfigurationRevision) __premarshalJSON() (*__premarshalBlueprintConfigurationRevision, error) {
	var retval __premarshalBlueprintConfigurationRevision

	retval.RevisionData = v.RevisionDetailV1BlueprintConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1BlueprintConfiguration.RevisionMetadata
	return &retval, nil
}

// BlueprintDetail includes the GraphQL fields of Blueprint requested by the fragment BlueprintDetail.
type BlueprintDetail struct {
	Id   uuid.UUID     `json:"id"`
	Type BlueprintType `json:"type"`
	// Whether this blueprint is officially supported.
	IsOfficial *bool `json:"isOfficial,omitempty"`
	// Whether this blueprint is enabled for your team. Does not affect existing projects.
	Enabled *bool `json:"enabled,omitempty"`
	// Query the revision history of this blueprint.
	Configuration BlueprintDetailConfigurationBlueprintConfiguration `json:"configuration"`
}

// GetId returns BlueprintDetail.Id, and is useful for accessing the field via an interface.
func (v *BlueprintDetail) GetId() uuid.UUID { return v.Id }

// GetType returns BlueprintDetail.Type, and is useful for accessing the field via an interface.
func (v *BlueprintDetail) GetType() BlueprintType { return v.Type }

// GetIsOfficial returns BlueprintDetail.IsOfficial, and is useful for accessing the field via an interface.
func (v *BlueprintDetail) GetIsOfficial() *bool { return v.IsOfficial }

// GetEnabled returns BlueprintDetail.Enabled, and is useful for accessing the field via an interface.
func (v *BlueprintDetail) GetEnabled() *bool { return v.Enabled }

// GetConfiguration returns BlueprintDetail.Configuration, and is useful for accessing the field via an interface.
func (v *BlueprintDetail) GetConfiguration() BlueprintDetailConfigurationBlueprintConfiguration {
	return v.Configuration
}

// BlueprintDetailConfigurationBlueprintConfiguration includes the requested fields of the GraphQL type BlueprintConfiguration.
type BlueprintDetailConfigurationBlueprintConfiguration struct {
	BlueprintConfigurationDetail `json:"-"`
}

// GetSlug returns BlueprintDetailConfigurationBlueprintConfiguration.Slug, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetSlug() string {
	return v.BlueprintConfigurationDetail.Slug
}

// GetDisplayName returns BlueprintDetailConfigurationBlueprintConfiguration.DisplayName, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetDisplayName() string {
	return v.BlueprintConfigurationDetail.DisplayName
}

// GetPublished returns BlueprintDetailConfigurationBlueprintConfiguration.Published, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetPublished() bool {
	return v.BlueprintConfigurationDetail.Published
}

// GetDescription returns BlueprintDetailConfigurationBlueprintConfiguration.Description, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetDescription() *string {
	return v.BlueprintConfigurationDetail.Description
}

// GetTags returns BlueprintDetailConfigurationBlueprintConfiguration.Tags, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetTags() []string {
	return v.BlueprintConfigurationDetail.Tags
}

// GetLogoUrl returns BlueprintDetailConfigurationBlueprintConfiguration.LogoUrl, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetLogoUrl() *string {
	return v.BlueprintConfigurationDetail.LogoUrl
}

// GetRichInputSchema returns BlueprintDetailConfigurationBlueprintConfiguration.RichInputSchema, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetRichInputSchema() *string {
	return v.BlueprintConfigurationDetail.RichInputSchema
}

func (v *BlueprintDetailConfigurationBlueprintConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BlueprintDetailConfigurationBlueprintConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.BlueprintDetailConfigurationBlueprintConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintConfigurationDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBlueprintDetailConfigurationBlueprintConfiguration struct {
	Slug string `json:"slug"`

	DisplayName string `json:"displayName"`

	Published bool `json:"published"`

	Description *string `json:"description,omitempty"`

	Tags []string `json:"tags"`

	LogoUrl *string `json:"logoUrl,omitempty"`

	RichInputSchema *string `json:"richInputSchema,omitempty"`
}

func (v *BlueprintDetailConfigurationBlueprintConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BlueprintDetailConfigurationBlueprintConfiguration) __premarshalJSON() (*__premarshalBlueprintDetailConfigurationBlueprintConfiguration, error) {
	var retval __premarshalBlueprintDetailConfigurationBlueprintConfiguration

	retval.Slug = v.BlueprintConfigurationDetail.Slug
	retval.DisplayName = v.BlueprintConfigurationDetail.DisplayName
	retval.Published = v.BlueprintConfigurationDetail.Published
	retval.Description = v.BlueprintConfigurationDetail.Description
	retval.Tags = v.BlueprintConfigurationDetail.Tags
	retval.LogoUrl = v.BlueprintConfigurationDetail.LogoUrl
	retval.RichInputSchema = v.BlueprintConfigurationDetail.RichInputSchema
	return &retval, nil
}

type BlueprintDriverWorkflowStepAction string

const (
	BlueprintDriverWorkflowStepActionDriverPlanDestroy BlueprintDriverWorkflowStepAction = "DRIVER_PLAN_DESTROY"
	BlueprintDriverWorkflowStepActionDriverPlan        BlueprintDriverWorkflowStepAction = "DRIVER_PLAN"
	BlueprintDriverWorkflowStepActionDriverApprove     BlueprintDriverWorkflowStepAction = "DRIVER_APPROVE"
	BlueprintDriverWorkflowStepActionDriverApply       BlueprintDriverWorkflowStepAction = "DRIVER_APPLY"
	BlueprintDriverWorkflowStepActionProjectDelete     BlueprintDriverWorkflowStepAction = "PROJECT_DELETE"
)

type BlueprintHelmConfigurationInput struct {
	Source *SourceInput `json:"source,omitempty"`
}

// GetSource returns BlueprintHelmConfigurationInput.Source, and is useful for accessing the field via an interface.
func (v *BlueprintHelmConfigurationInput) GetSource() *SourceInput { return v.Source }

type BlueprintManifestConfigurationInput struct {
	Source       *SourceInput `json:"source,omitempty"`
	UseKustomize *bool        `json:"useKustomize,omitempty"`
}

// GetSource returns BlueprintManifestConfigurationInput.Source, and is useful for accessing the field via an interface.
func (v *BlueprintManifestConfigurationInput) GetSource() *SourceInput { return v.Source }

// GetUseKustomize returns BlueprintManifestConfigurationInput.UseKustomize, and is useful for accessing the field via an interface.
func (v *BlueprintManifestConfigurationInput) GetUseKustomize() *bool { return v.UseKustomize }

// blueprintResponse is returned by blueprint on success.
type BlueprintResponse struct {
	Team *BlueprintTeam `json:"team,omitempty"`
}

// GetTeam returns BlueprintResponse.Team, and is useful for accessing the field via an interface.
func (v *BlueprintResponse) GetTeam() *BlueprintTeam { return v.Team }

// blueprintRevisionsResponse is returned by blueprintRevisions on success.
type BlueprintRevisionsResponse struct {
	Team *BlueprintRevisionsTeam `json:"team,omitempty"`
}

// GetTeam returns BlueprintRevisionsResponse.Team, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsResponse) GetTeam() *BlueprintRevisionsTeam { return v.Team }

// BlueprintRevisionsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type BlueprintRevisionsTeam struct {
	Id        uuid.UUID                        `json:"id"`
	Blueprint *BlueprintRevisionsTeamBlueprint `json:"blueprint,omitempty"`
}

// GetId returns BlueprintRevisionsTeam.Id, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeam) GetId() uuid.UUID { return v.Id }

// GetBlueprint returns BlueprintRevisionsTeam.Blueprint, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeam) GetBlueprint() *BlueprintRevisionsTeamBlueprint { return v.Blueprint }

// BlueprintRevisionsTeamBlueprint includes the requested fields of the GraphQL type Blueprint.
type BlueprintRevisionsTeamBlueprint struct {
	Id                     uuid.UUID                                                                             `json:"id"`
	ConfigurationRevisions BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnection `json:"configurationRevisions"`
}

// GetId returns BlueprintRevisionsTeamBlueprint.Id, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeamBlueprint) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns BlueprintRevisionsTeamBlueprint.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeamBlueprint) GetConfigurationRevisions() BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnection {
	return v.ConfigurationRevisions
}

// BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnection includes the requested fields of the GraphQL type BlueprintConfigurationConnection.
type BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnection struct {
	Nodes []BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration `json:"nodes"`
}

// GetNodes returns BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnection) GetNodes() []BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration {
	return v.Nodes
}

// BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration includes the requested fields of the GraphQL type BlueprintConfiguration.
type BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration struct {
	BlueprintConfigurationDetail   `json:"-"`
	BlueprintConfigurationRevision `json:"-"`
}

// GetSlug returns BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.Slug, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetSlug() string {
	return v.BlueprintConfigurationDetail.Slug
}

// GetDisplayName returns BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.DisplayName, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetDisplayName() string {
	return v.BlueprintConfigurationDetail.DisplayName
}

// GetPublished returns BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.Published, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetPublished() bool {
	return v.BlueprintConfigurationDetail.Published
}

// GetDescription returns BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.Description, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetDescription() *string {
	return v.BlueprintConfigurationDetail.Description
}

// GetTags returns BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.Tags, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetTags() []string {
	return v.BlueprintConfigurationDetail.Tags
}

// GetLogoUrl returns BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.LogoUrl, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetLogoUrl() *string {
	return v.BlueprintConfigurationDetail.LogoUrl
}

// GetRichInputSchema returns BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.RichInputSchema, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetRichInputSchema() *string {
	return v.BlueprintConfigurationDetail.RichInputSchema
}

// GetRevisionData returns BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetRevisionData() string {
	return v.BlueprintConfigurationRevision.RevisionDetailV1BlueprintConfiguration.RevisionData
}

// GetRevisionMetadata returns BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.BlueprintConfigurationRevision.RevisionDetailV1BlueprintConfiguration.RevisionMetadata
}

func (v *BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintConfigurationDetail)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.BlueprintConfigurationRevision)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration struct {
	Slug string `json:"slug"`

	DisplayName string `json:"displayName"`

	Published bool `json:"published"`

	Description *string `json:"description,omitempty"`

	Tags []string `json:"tags"`

	LogoUrl *string `json:"logoUrl,omitempty"`

	RichInputSchema *string `json:"richInputSchema,omitempty"`

	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) __premarshalJSON() (*__premarshalBlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration, error) {
	var retval __premarshalBlueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration

	retval.Slug = v.BlueprintConfigurationDetail.Slug
	retval.DisplayName = v.BlueprintConfigurationDetail.DisplayName
	retval.Published = v.BlueprintConfigurationDetail.Published
	retval.Description = v.BlueprintConfigurationDetail.Description
	retval.Tags = v.BlueprintConfigurationDetail.Tags
	retval.LogoUrl = v.BlueprintConfigurationDetail.LogoUrl
	retval.RichInputSchema = v.BlueprintConfigurationDetail.RichInputSchema
	retval.RevisionData = v.BlueprintConfigurationRevision.RevisionDetailV1BlueprintConfiguration.RevisionData
	retval.RevisionMetadata = v.BlueprintConfigurationRevision.RevisionDetailV1BlueprintConfiguration.RevisionMetadata
	return &retval, nil
}

// BlueprintTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type BlueprintTeam struct {
	Id        uuid.UUID               `json:"id"`
	Blueprint *BlueprintTeamBlueprint `json:"blueprint,omitempty"`
}

// GetId returns BlueprintTeam.Id, and is useful for accessing the field via an interface.
func (v *BlueprintTeam) GetId() uuid.UUID { return v.Id }

// GetBlueprint returns BlueprintTeam.Blueprint, and is useful for accessing the field via an interface.
func (v *BlueprintTeam) GetBlueprint() *BlueprintTeamBlueprint { return v.Blueprint }

// BlueprintTeamBlueprint includes the requested fields of the GraphQL type Blueprint.
type BlueprintTeamBlueprint struct {
	BlueprintDetail `json:"-"`
}

// GetId returns BlueprintTeamBlueprint.Id, and is useful for accessing the field via an interface.
func (v *BlueprintTeamBlueprint) GetId() uuid.UUID { return v.BlueprintDetail.Id }

// GetType returns BlueprintTeamBlueprint.Type, and is useful for accessing the field via an interface.
func (v *BlueprintTeamBlueprint) GetType() BlueprintType { return v.BlueprintDetail.Type }

// GetIsOfficial returns BlueprintTeamBlueprint.IsOfficial, and is useful for accessing the field via an interface.
func (v *BlueprintTeamBlueprint) GetIsOfficial() *bool { return v.BlueprintDetail.IsOfficial }

// GetEnabled returns BlueprintTeamBlueprint.Enabled, and is useful for accessing the field via an interface.
func (v *BlueprintTeamBlueprint) GetEnabled() *bool { return v.BlueprintDetail.Enabled }

// GetConfiguration returns BlueprintTeamBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *BlueprintTeamBlueprint) GetConfiguration() BlueprintDetailConfigurationBlueprintConfiguration {
	return v.BlueprintDetail.Configuration
}

func (v *BlueprintTeamBlueprint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BlueprintTeamBlueprint
		graphql.NoUnmarshalJSON
	}
	firstPass.BlueprintTeamBlueprint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBlueprintTeamBlueprint struct {
	Id uuid.UUID `json:"id"`

	Type BlueprintType `json:"type"`

	IsOfficial *bool `json:"isOfficial,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	Configuration BlueprintDetailConfigurationBlueprintConfiguration `json:"configuration"`
}

func (v *BlueprintTeamBlueprint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BlueprintTeamBlueprint) __premarshalJSON() (*__premarshalBlueprintTeamBlueprint, error) {
	var retval __premarshalBlueprintTeamBlueprint

	retval.Id = v.BlueprintDetail.Id
	retval.Type = v.BlueprintDetail.Type
	retval.IsOfficial = v.BlueprintDetail.IsOfficial
	retval.Enabled = v.BlueprintDetail.Enabled
	retval.Configuration = v.BlueprintDetail.Configuration
	return &retval, nil
}

type BlueprintTerraformConfigurationInput struct {
	Source              *SourceInput                       `json:"source,omitempty"`
	OutputConfiguration *TerraformOutputConfigurationInput `json:"outputConfiguration,omitempty"`
	TerraformVersion    *string                            `json:"terraformVersion,omitempty"`
}

// GetSource returns BlueprintTerraformConfigurationInput.Source, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationInput) GetSource() *SourceInput { return v.Source }

// GetOutputConfiguration returns BlueprintTerraformConfigurationInput.OutputConfiguration, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationInput) GetOutputConfiguration() *TerraformOutputConfigurationInput {
	return v.OutputConfiguration
}

// GetTerraformVersion returns BlueprintTerraformConfigurationInput.TerraformVersion, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationInput) GetTerraformVersion() *string {
	return v.TerraformVersion
}

type BlueprintType string

const (
	BlueprintTypeTerraform          BlueprintType = "TERRAFORM"
	BlueprintTypeKubernetesManifest BlueprintType = "KUBERNETES_MANIFEST"
	BlueprintTypeHelm               BlueprintType = "HELM"
	BlueprintTypeAwsSam             BlueprintType = "AWS_SAM"
	BlueprintTypeGcpCloudRun        BlueprintType = "GCP_CLOUD_RUN"
	BlueprintTypeZeetKubernetes     BlueprintType = "ZEET_KUBERNETES"
	BlueprintTypeZeetAwsLambda      BlueprintType = "ZEET_AWS_LAMBDA"
	BlueprintTypeZeetGcpCloudRun    BlueprintType = "ZEET_GCP_CLOUD_RUN"
)

type BlueprintVariableInput struct {
	// ID of the corresponding variable spec. Must be present if name is not specified.
	SpecId *uuid.UUID `json:"specId,omitempty"`
	// Name of the corresponding variable spec, or name to use when declaring a variable without referencing a variable spec.
	// Must be present if specId is not specified.
	Name *string `json:"name,omitempty"`
	// The variable value. Always a string value, which will be parsed according to the variableType, determined either
	// by the referenced variableSpec, or the provided variableType
	Value string `json:"value"`
	// Type specification is required when variable is being declared without referencing a variable spec.
	Type *BlueprintVariableType `json:"type,omitempty"`
}

// GetSpecId returns BlueprintVariableInput.SpecId, and is useful for accessing the field via an interface.
func (v *BlueprintVariableInput) GetSpecId() *uuid.UUID { return v.SpecId }

// GetName returns BlueprintVariableInput.Name, and is useful for accessing the field via an interface.
func (v *BlueprintVariableInput) GetName() *string { return v.Name }

// GetValue returns BlueprintVariableInput.Value, and is useful for accessing the field via an interface.
func (v *BlueprintVariableInput) GetValue() string { return v.Value }

// GetType returns BlueprintVariableInput.Type, and is useful for accessing the field via an interface.
func (v *BlueprintVariableInput) GetType() *BlueprintVariableType { return v.Type }

type BlueprintVariableType string

const (
	BlueprintVariableTypeString  BlueprintVariableType = "STRING"
	BlueprintVariableTypeBoolean BlueprintVariableType = "BOOLEAN"
	BlueprintVariableTypeInteger BlueprintVariableType = "INTEGER"
	BlueprintVariableTypeFloat   BlueprintVariableType = "FLOAT"
	BlueprintVariableTypeJson    BlueprintVariableType = "JSON"
)

// buildArtifactsResponse is returned by buildArtifacts on success.
type BuildArtifactsResponse struct {
	Team *BuildArtifactsTeam `json:"team,omitempty"`
}

// GetTeam returns BuildArtifactsResponse.Team, and is useful for accessing the field via an interface.
func (v *BuildArtifactsResponse) GetTeam() *BuildArtifactsTeam { return v.Team }

// BuildArtifactsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type BuildArtifactsTeam struct {
	Project *BuildArtifactsTeamProject `json:"project,omitempty"`
}

// GetProject returns BuildArtifactsTeam.Project, and is useful for accessing the field via an interface.
func (v *BuildArtifactsTeam) GetProject() *BuildArtifactsTeamProject { return v.Project }

// BuildArtifactsTeamProject includes the requested fields of the GraphQL type Project.
type BuildArtifactsTeamProject struct {
	Build *BuildArtifactsTeamProjectBuild `json:"build,omitempty"`
}

// GetBuild returns BuildArtifactsTeamProject.Build, and is useful for accessing the field via an interface.
func (v *BuildArtifactsTeamProject) GetBuild() *BuildArtifactsTeamProjectBuild { return v.Build }

// BuildArtifactsTeamProjectBuild includes the requested fields of the GraphQL type Build.
type BuildArtifactsTeamProjectBuild struct {
	Runs BuildArtifactsTeamProjectBuildRunsBuildRunConnection `json:"runs"`
}

// GetRuns returns BuildArtifactsTeamProjectBuild.Runs, and is useful for accessing the field via an interface.
func (v *BuildArtifactsTeamProjectBuild) GetRuns() BuildArtifactsTeamProjectBuildRunsBuildRunConnection {
	return v.Runs
}

// BuildArtifactsTeamProjectBuildRunsBuildRunConnection includes the requested fields of the GraphQL type BuildRunConnection.
type BuildArtifactsTeamProjectBuildRunsBuildRunConnection struct {
	TotalCount int                                                                 `json:"totalCount"`
	PageInfo   BuildArtifactsTeamProjectBuildRunsBuildRunConnectionPageInfo        `json:"pageInfo"`
	Nodes      []BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun `json:"nodes"`
}

// GetTotalCount returns BuildArtifactsTeamProjectBuildRunsBuildRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *BuildArtifactsTeamProjectBuildRunsBuildRunConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetPageInfo returns BuildArtifactsTeamProjectBuildRunsBuildRunConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *BuildArtifactsTeamProjectBuildRunsBuildRunConnection) GetPageInfo() BuildArtifactsTeamProjectBuildRunsBuildRunConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns BuildArtifactsTeamProjectBuildRunsBuildRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *BuildArtifactsTeamProjectBuildRunsBuildRunConnection) GetNodes() []BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun {
	return v.Nodes
}

// BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun includes the requested fields of the GraphQL type BuildRun.
type BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun struct {
	Id        uuid.UUID                                                                                 `json:"id"`
	Sequence  int                                                                                       `json:"sequence"`
	Artifacts []BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact `json:"artifacts"`
}

// GetId returns BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.Id, and is useful for accessing the field via an interface.
func (v *BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetId() uuid.UUID {
	return v.Id
}

// GetSequence returns BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.Sequence, and is useful for accessing the field via an interface.
func (v *BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetSequence() int {
	return v.Sequence
}

// GetArtifacts returns BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.Artifacts, and is useful for accessing the field via an interface.
func (v *BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetArtifacts() []BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact {
	return v.Artifacts
}

// BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact includes the requested fields of the GraphQL type BuildArtifact.
type BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact struct {
	Id        uuid.UUID `json:"id"`
	Image     string    `json:"image"`
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact.Id, and is useful for accessing the field via an interface.
func (v *BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact) GetId() uuid.UUID {
	return v.Id
}

// GetImage returns BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact.Image, and is useful for accessing the field via an interface.
func (v *BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact) GetImage() string {
	return v.Image
}

// GetCreatedAt returns BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact.CreatedAt, and is useful for accessing the field via an interface.
func (v *BuildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// BuildArtifactsTeamProjectBuildRunsBuildRunConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type BuildArtifactsTeamProjectBuildRunsBuildRunConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns BuildArtifactsTeamProjectBuildRunsBuildRunConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *BuildArtifactsTeamProjectBuildRunsBuildRunConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

type BuildDefinitionInput struct {
	BuildAppId       *string           `json:"buildAppId,omitempty"`
	BuildAppName     *string           `json:"buildAppName,omitempty"`
	GitSource        *GitSourceInput   `json:"gitSource,omitempty"`
	BuildClusterId   *uuid.UUID        `json:"buildClusterId,omitempty"`
	Target           *BuildTargetInput `json:"target,omitempty"`
	Type             *BuildType        `json:"type,omitempty"`
	Engine           *BuildEngine      `json:"engine,omitempty"`
	NodeJsVersion    *string           `json:"nodeJsVersion,omitempty"`
	PythonVersion    *string           `json:"pythonVersion,omitempty"`
	GolangVersion    *string           `json:"golangVersion,omitempty"`
	StaticPath       *string           `json:"staticPath,omitempty"`
	DockerfilePath   *string           `json:"dockerfilePath,omitempty"`
	DockerfileText   *string           `json:"dockerfileText,omitempty"`
	WorkingDirectory *string           `json:"workingDirectory,omitempty"`
	BuildCommand     *string           `json:"buildCommand,omitempty"`
	TestCommand      *string           `json:"testCommand,omitempty"`
	RunCommand       *string           `json:"runCommand,omitempty"`
	NoBuildCache     *bool             `json:"noBuildCache,omitempty"`
	AutoRetry        *bool             `json:"autoRetry,omitempty"`
	KanikoFlags      []*string         `json:"kanikoFlags,omitempty"`
}

// GetBuildAppId returns BuildDefinitionInput.BuildAppId, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetBuildAppId() *string { return v.BuildAppId }

// GetBuildAppName returns BuildDefinitionInput.BuildAppName, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetBuildAppName() *string { return v.BuildAppName }

// GetGitSource returns BuildDefinitionInput.GitSource, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetGitSource() *GitSourceInput { return v.GitSource }

// GetBuildClusterId returns BuildDefinitionInput.BuildClusterId, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetBuildClusterId() *uuid.UUID { return v.BuildClusterId }

// GetTarget returns BuildDefinitionInput.Target, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetTarget() *BuildTargetInput { return v.Target }

// GetType returns BuildDefinitionInput.Type, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetType() *BuildType { return v.Type }

// GetEngine returns BuildDefinitionInput.Engine, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetEngine() *BuildEngine { return v.Engine }

// GetNodeJsVersion returns BuildDefinitionInput.NodeJsVersion, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetNodeJsVersion() *string { return v.NodeJsVersion }

// GetPythonVersion returns BuildDefinitionInput.PythonVersion, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetPythonVersion() *string { return v.PythonVersion }

// GetGolangVersion returns BuildDefinitionInput.GolangVersion, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetGolangVersion() *string { return v.GolangVersion }

// GetStaticPath returns BuildDefinitionInput.StaticPath, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetStaticPath() *string { return v.StaticPath }

// GetDockerfilePath returns BuildDefinitionInput.DockerfilePath, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetDockerfilePath() *string { return v.DockerfilePath }

// GetDockerfileText returns BuildDefinitionInput.DockerfileText, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetDockerfileText() *string { return v.DockerfileText }

// GetWorkingDirectory returns BuildDefinitionInput.WorkingDirectory, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetWorkingDirectory() *string { return v.WorkingDirectory }

// GetBuildCommand returns BuildDefinitionInput.BuildCommand, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetBuildCommand() *string { return v.BuildCommand }

// GetTestCommand returns BuildDefinitionInput.TestCommand, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetTestCommand() *string { return v.TestCommand }

// GetRunCommand returns BuildDefinitionInput.RunCommand, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetRunCommand() *string { return v.RunCommand }

// GetNoBuildCache returns BuildDefinitionInput.NoBuildCache, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetNoBuildCache() *bool { return v.NoBuildCache }

// GetAutoRetry returns BuildDefinitionInput.AutoRetry, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetAutoRetry() *bool { return v.AutoRetry }

// GetKanikoFlags returns BuildDefinitionInput.KanikoFlags, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetKanikoFlags() []*string { return v.KanikoFlags }

type BuildEngine string

const (
	BuildEngineCodeBuild BuildEngine = "CODE_BUILD"
	BuildEngineKaniko    BuildEngine = "KANIKO"
	BuildEngineExternal  BuildEngine = "EXTERNAL"
)

// BuildRunDetail includes the GraphQL fields of BuildRun requested by the fragment BuildRunDetail.
type BuildRunDetail struct {
	Id          uuid.UUID                                `json:"id"`
	Sequence    int                                      `json:"sequence"`
	JobRun      *BuildRunDetailJobRun                    `json:"jobRun,omitempty"`
	TriggeredBy *BuildRunDetailTriggeredByWorkflowRun    `json:"triggeredBy,omitempty"`
	Definition  *BuildRunDetailDefinitionBuildDefinition `json:"definition,omitempty"`
	Artifacts   []BuildRunDetailArtifactsBuildArtifact   `json:"artifacts"`
}

// GetId returns BuildRunDetail.Id, and is useful for accessing the field via an interface.
func (v *BuildRunDetail) GetId() uuid.UUID { return v.Id }

// GetSequence returns BuildRunDetail.Sequence, and is useful for accessing the field via an interface.
func (v *BuildRunDetail) GetSequence() int { return v.Sequence }

// GetJobRun returns BuildRunDetail.JobRun, and is useful for accessing the field via an interface.
func (v *BuildRunDetail) GetJobRun() *BuildRunDetailJobRun { return v.JobRun }

// GetTriggeredBy returns BuildRunDetail.TriggeredBy, and is useful for accessing the field via an interface.
func (v *BuildRunDetail) GetTriggeredBy() *BuildRunDetailTriggeredByWorkflowRun { return v.TriggeredBy }

// GetDefinition returns BuildRunDetail.Definition, and is useful for accessing the field via an interface.
func (v *BuildRunDetail) GetDefinition() *BuildRunDetailDefinitionBuildDefinition {
	return v.Definition
}

// GetArtifacts returns BuildRunDetail.Artifacts, and is useful for accessing the field via an interface.
func (v *BuildRunDetail) GetArtifacts() []BuildRunDetailArtifactsBuildArtifact { return v.Artifacts }

// BuildRunDetailArtifactsBuildArtifact includes the requested fields of the GraphQL type BuildArtifact.
type BuildRunDetailArtifactsBuildArtifact struct {
	Id        uuid.UUID `json:"id"`
	Image     string    `json:"image"`
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns BuildRunDetailArtifactsBuildArtifact.Id, and is useful for accessing the field via an interface.
func (v *BuildRunDetailArtifactsBuildArtifact) GetId() uuid.UUID { return v.Id }

// GetImage returns BuildRunDetailArtifactsBuildArtifact.Image, and is useful for accessing the field via an interface.
func (v *BuildRunDetailArtifactsBuildArtifact) GetImage() string { return v.Image }

// GetCreatedAt returns BuildRunDetailArtifactsBuildArtifact.CreatedAt, and is useful for accessing the field via an interface.
func (v *BuildRunDetailArtifactsBuildArtifact) GetCreatedAt() time.Time { return v.CreatedAt }

// BuildRunDetailDefinitionBuildDefinition includes the requested fields of the GraphQL type BuildDefinition.
type BuildRunDetailDefinitionBuildDefinition struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns BuildRunDetailDefinitionBuildDefinition.Id, and is useful for accessing the field via an interface.
func (v *BuildRunDetailDefinitionBuildDefinition) GetId() uuid.UUID { return v.Id }

// BuildRunDetailJobRun includes the requested fields of the GraphQL type JobRun.
type BuildRunDetailJobRun struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns BuildRunDetailJobRun.Id, and is useful for accessing the field via an interface.
func (v *BuildRunDetailJobRun) GetId() uuid.UUID { return v.Id }

// buildRunDetailResponse is returned by buildRunDetail on success.
type BuildRunDetailResponse struct {
	Team *BuildRunDetailTeam `json:"team,omitempty"`
}

// GetTeam returns BuildRunDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *BuildRunDetailResponse) GetTeam() *BuildRunDetailTeam { return v.Team }

// BuildRunDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type BuildRunDetailTeam struct {
	Project *BuildRunDetailTeamProject `json:"project,omitempty"`
}

// GetProject returns BuildRunDetailTeam.Project, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTeam) GetProject() *BuildRunDetailTeamProject { return v.Project }

// BuildRunDetailTeamProject includes the requested fields of the GraphQL type Project.
type BuildRunDetailTeamProject struct {
	Build *BuildRunDetailTeamProjectBuild `json:"build,omitempty"`
}

// GetBuild returns BuildRunDetailTeamProject.Build, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTeamProject) GetBuild() *BuildRunDetailTeamProjectBuild { return v.Build }

// BuildRunDetailTeamProjectBuild includes the requested fields of the GraphQL type Build.
type BuildRunDetailTeamProjectBuild struct {
	Id  uuid.UUID                          `json:"id"`
	Run *BuildRunDetailTeamProjectBuildRun `json:"run,omitempty"`
}

// GetId returns BuildRunDetailTeamProjectBuild.Id, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTeamProjectBuild) GetId() uuid.UUID { return v.Id }

// GetRun returns BuildRunDetailTeamProjectBuild.Run, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTeamProjectBuild) GetRun() *BuildRunDetailTeamProjectBuildRun { return v.Run }

// BuildRunDetailTeamProjectBuildRun includes the requested fields of the GraphQL type BuildRun.
type BuildRunDetailTeamProjectBuildRun struct {
	BuildRunDetail `json:"-"`
}

// GetId returns BuildRunDetailTeamProjectBuildRun.Id, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTeamProjectBuildRun) GetId() uuid.UUID { return v.BuildRunDetail.Id }

// GetSequence returns BuildRunDetailTeamProjectBuildRun.Sequence, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTeamProjectBuildRun) GetSequence() int { return v.BuildRunDetail.Sequence }

// GetJobRun returns BuildRunDetailTeamProjectBuildRun.JobRun, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTeamProjectBuildRun) GetJobRun() *BuildRunDetailJobRun {
	return v.BuildRunDetail.JobRun
}

// GetTriggeredBy returns BuildRunDetailTeamProjectBuildRun.TriggeredBy, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTeamProjectBuildRun) GetTriggeredBy() *BuildRunDetailTriggeredByWorkflowRun {
	return v.BuildRunDetail.TriggeredBy
}

// GetDefinition returns BuildRunDetailTeamProjectBuildRun.Definition, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTeamProjectBuildRun) GetDefinition() *BuildRunDetailDefinitionBuildDefinition {
	return v.BuildRunDetail.Definition
}

// GetArtifacts returns BuildRunDetailTeamProjectBuildRun.Artifacts, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTeamProjectBuildRun) GetArtifacts() []BuildRunDetailArtifactsBuildArtifact {
	return v.BuildRunDetail.Artifacts
}

func (v *BuildRunDetailTeamProjectBuildRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BuildRunDetailTeamProjectBuildRun
		graphql.NoUnmarshalJSON
	}
	firstPass.BuildRunDetailTeamProjectBuildRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BuildRunDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBuildRunDetailTeamProjectBuildRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	JobRun *BuildRunDetailJobRun `json:"jobRun,omitempty"`

	TriggeredBy *BuildRunDetailTriggeredByWorkflowRun `json:"triggeredBy,omitempty"`

	Definition *BuildRunDetailDefinitionBuildDefinition `json:"definition,omitempty"`

	Artifacts []BuildRunDetailArtifactsBuildArtifact `json:"artifacts"`
}

func (v *BuildRunDetailTeamProjectBuildRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BuildRunDetailTeamProjectBuildRun) __premarshalJSON() (*__premarshalBuildRunDetailTeamProjectBuildRun, error) {
	var retval __premarshalBuildRunDetailTeamProjectBuildRun

	retval.Id = v.BuildRunDetail.Id
	retval.Sequence = v.BuildRunDetail.Sequence
	retval.JobRun = v.BuildRunDetail.JobRun
	retval.TriggeredBy = v.BuildRunDetail.TriggeredBy
	retval.Definition = v.BuildRunDetail.Definition
	retval.Artifacts = v.BuildRunDetail.Artifacts
	return &retval, nil
}

// BuildRunDetailTriggeredByWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type BuildRunDetailTriggeredByWorkflowRun struct {
	Id       uuid.UUID `json:"id"`
	Sequence int       `json:"sequence"`
}

// GetId returns BuildRunDetailTriggeredByWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTriggeredByWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetSequence returns BuildRunDetailTriggeredByWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTriggeredByWorkflowRun) GetSequence() int { return v.Sequence }

// BuildRunListItem includes the GraphQL fields of BuildRun requested by the fragment BuildRunListItem.
type BuildRunListItem struct {
	Id          uuid.UUID                               `json:"id"`
	Sequence    int                                     `json:"sequence"`
	JobRun      *BuildRunListItemJobRun                 `json:"jobRun,omitempty"`
	TriggeredBy *BuildRunListItemTriggeredByWorkflowRun `json:"triggeredBy,omitempty"`
}

// GetId returns BuildRunListItem.Id, and is useful for accessing the field via an interface.
func (v *BuildRunListItem) GetId() uuid.UUID { return v.Id }

// GetSequence returns BuildRunListItem.Sequence, and is useful for accessing the field via an interface.
func (v *BuildRunListItem) GetSequence() int { return v.Sequence }

// GetJobRun returns BuildRunListItem.JobRun, and is useful for accessing the field via an interface.
func (v *BuildRunListItem) GetJobRun() *BuildRunListItemJobRun { return v.JobRun }

// GetTriggeredBy returns BuildRunListItem.TriggeredBy, and is useful for accessing the field via an interface.
func (v *BuildRunListItem) GetTriggeredBy() *BuildRunListItemTriggeredByWorkflowRun {
	return v.TriggeredBy
}

// BuildRunListItemJobRun includes the requested fields of the GraphQL type JobRun.
type BuildRunListItemJobRun struct {
	CreatedAt time.Time   `json:"createdAt"`
	State     JobRunState `json:"state"`
}

// GetCreatedAt returns BuildRunListItemJobRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *BuildRunListItemJobRun) GetCreatedAt() time.Time { return v.CreatedAt }

// GetState returns BuildRunListItemJobRun.State, and is useful for accessing the field via an interface.
func (v *BuildRunListItemJobRun) GetState() JobRunState { return v.State }

// BuildRunListItemTriggeredByWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type BuildRunListItemTriggeredByWorkflowRun struct {
	Id       uuid.UUID `json:"id"`
	Sequence int       `json:"sequence"`
}

// GetId returns BuildRunListItemTriggeredByWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *BuildRunListItemTriggeredByWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetSequence returns BuildRunListItemTriggeredByWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *BuildRunListItemTriggeredByWorkflowRun) GetSequence() int { return v.Sequence }

// buildRunsResponse is returned by buildRuns on success.
type BuildRunsResponse struct {
	Team *BuildRunsTeam `json:"team,omitempty"`
}

// GetTeam returns BuildRunsResponse.Team, and is useful for accessing the field via an interface.
func (v *BuildRunsResponse) GetTeam() *BuildRunsTeam { return v.Team }

// BuildRunsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type BuildRunsTeam struct {
	Project *BuildRunsTeamProject `json:"project,omitempty"`
}

// GetProject returns BuildRunsTeam.Project, and is useful for accessing the field via an interface.
func (v *BuildRunsTeam) GetProject() *BuildRunsTeamProject { return v.Project }

// BuildRunsTeamProject includes the requested fields of the GraphQL type Project.
type BuildRunsTeamProject struct {
	Build *BuildRunsTeamProjectBuild `json:"build,omitempty"`
}

// GetBuild returns BuildRunsTeamProject.Build, and is useful for accessing the field via an interface.
func (v *BuildRunsTeamProject) GetBuild() *BuildRunsTeamProjectBuild { return v.Build }

// BuildRunsTeamProjectBuild includes the requested fields of the GraphQL type Build.
type BuildRunsTeamProjectBuild struct {
	Id   uuid.UUID                                       `json:"id"`
	Runs BuildRunsTeamProjectBuildRunsBuildRunConnection `json:"runs"`
}

// GetId returns BuildRunsTeamProjectBuild.Id, and is useful for accessing the field via an interface.
func (v *BuildRunsTeamProjectBuild) GetId() uuid.UUID { return v.Id }

// GetRuns returns BuildRunsTeamProjectBuild.Runs, and is useful for accessing the field via an interface.
func (v *BuildRunsTeamProjectBuild) GetRuns() BuildRunsTeamProjectBuildRunsBuildRunConnection {
	return v.Runs
}

// BuildRunsTeamProjectBuildRunsBuildRunConnection includes the requested fields of the GraphQL type BuildRunConnection.
type BuildRunsTeamProjectBuildRunsBuildRunConnection struct {
	TotalCount int                                                            `json:"totalCount"`
	PageInfo   BuildRunsTeamProjectBuildRunsBuildRunConnectionPageInfo        `json:"pageInfo"`
	Nodes      []BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun `json:"nodes"`
}

// GetTotalCount returns BuildRunsTeamProjectBuildRunsBuildRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *BuildRunsTeamProjectBuildRunsBuildRunConnection) GetTotalCount() int { return v.TotalCount }

// GetPageInfo returns BuildRunsTeamProjectBuildRunsBuildRunConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *BuildRunsTeamProjectBuildRunsBuildRunConnection) GetPageInfo() BuildRunsTeamProjectBuildRunsBuildRunConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns BuildRunsTeamProjectBuildRunsBuildRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *BuildRunsTeamProjectBuildRunsBuildRunConnection) GetNodes() []BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun {
	return v.Nodes
}

// BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun includes the requested fields of the GraphQL type BuildRun.
type BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun struct {
	BuildRunListItem `json:"-"`
}

// GetId returns BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.Id, and is useful for accessing the field via an interface.
func (v *BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetId() uuid.UUID {
	return v.BuildRunListItem.Id
}

// GetSequence returns BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.Sequence, and is useful for accessing the field via an interface.
func (v *BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetSequence() int {
	return v.BuildRunListItem.Sequence
}

// GetJobRun returns BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.JobRun, and is useful for accessing the field via an interface.
func (v *BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetJobRun() *BuildRunListItemJobRun {
	return v.BuildRunListItem.JobRun
}

// GetTriggeredBy returns BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.TriggeredBy, and is useful for accessing the field via an interface.
func (v *BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetTriggeredBy() *BuildRunListItemTriggeredByWorkflowRun {
	return v.BuildRunListItem.TriggeredBy
}

func (v *BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun
		graphql.NoUnmarshalJSON
	}
	firstPass.BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BuildRunListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	JobRun *BuildRunListItemJobRun `json:"jobRun,omitempty"`

	TriggeredBy *BuildRunListItemTriggeredByWorkflowRun `json:"triggeredBy,omitempty"`
}

func (v *BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) __premarshalJSON() (*__premarshalBuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun, error) {
	var retval __premarshalBuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun

	retval.Id = v.BuildRunListItem.Id
	retval.Sequence = v.BuildRunListItem.Sequence
	retval.JobRun = v.BuildRunListItem.JobRun
	retval.TriggeredBy = v.BuildRunListItem.TriggeredBy
	return &retval, nil
}

// BuildRunsTeamProjectBuildRunsBuildRunConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type BuildRunsTeamProjectBuildRunsBuildRunConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns BuildRunsTeamProjectBuildRunsBuildRunConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *BuildRunsTeamProjectBuildRunsBuildRunConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

type BuildTargetInput struct {
	Type                         BuildTargetType              `json:"type"`
	Repository                   *string                      `json:"repository,omitempty"`
	AlternativeImageTagTemplates []string                     `json:"alternativeImageTagTemplates"`
	Integration                  *BuildTargetIntegrationInput `json:"integration,omitempty"`
}

// GetType returns BuildTargetInput.Type, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetType() BuildTargetType { return v.Type }

// GetRepository returns BuildTargetInput.Repository, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetRepository() *string { return v.Repository }

// GetAlternativeImageTagTemplates returns BuildTargetInput.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetAlternativeImageTagTemplates() []string {
	return v.AlternativeImageTagTemplates
}

// GetIntegration returns BuildTargetInput.Integration, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetIntegration() *BuildTargetIntegrationInput { return v.Integration }

type BuildTargetIntegrationInput struct {
	RegistryId        *uuid.UUID `json:"registryId,omitempty"`
	RegistryClusterId *uuid.UUID `json:"registryClusterId,omitempty"`
	AwsAccountId      *uuid.UUID `json:"awsAccountId,omitempty"`
	AwsRegion         *string    `json:"awsRegion,omitempty"`
	GcpAccountId      *uuid.UUID `json:"gcpAccountId,omitempty"`
	GcpRegion         *string    `json:"gcpRegion,omitempty"`
}

// GetRegistryId returns BuildTargetIntegrationInput.RegistryId, and is useful for accessing the field via an interface.
func (v *BuildTargetIntegrationInput) GetRegistryId() *uuid.UUID { return v.RegistryId }

// GetRegistryClusterId returns BuildTargetIntegrationInput.RegistryClusterId, and is useful for accessing the field via an interface.
func (v *BuildTargetIntegrationInput) GetRegistryClusterId() *uuid.UUID { return v.RegistryClusterId }

// GetAwsAccountId returns BuildTargetIntegrationInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *BuildTargetIntegrationInput) GetAwsAccountId() *uuid.UUID { return v.AwsAccountId }

// GetAwsRegion returns BuildTargetIntegrationInput.AwsRegion, and is useful for accessing the field via an interface.
func (v *BuildTargetIntegrationInput) GetAwsRegion() *string { return v.AwsRegion }

// GetGcpAccountId returns BuildTargetIntegrationInput.GcpAccountId, and is useful for accessing the field via an interface.
func (v *BuildTargetIntegrationInput) GetGcpAccountId() *uuid.UUID { return v.GcpAccountId }

// GetGcpRegion returns BuildTargetIntegrationInput.GcpRegion, and is useful for accessing the field via an interface.
func (v *BuildTargetIntegrationInput) GetGcpRegion() *string { return v.GcpRegion }

type BuildTargetType string

const (
	BuildTargetTypeNullRegistry            BuildTargetType = "NULL_REGISTRY"
	BuildTargetTypeClusterRegistry         BuildTargetType = "CLUSTER_REGISTRY"
	BuildTargetTypeContainerRegistry       BuildTargetType = "CONTAINER_REGISTRY"
	BuildTargetTypeAwsSamContainerRegistry BuildTargetType = "AWS_SAM_CONTAINER_REGISTRY"
	BuildTargetTypeGcpContainerRegistry    BuildTargetType = "GCP_CONTAINER_REGISTRY"
)

type BuildType string

const (
	BuildTypeDocker        BuildType = "DOCKER"
	BuildTypeBuildpacks    BuildType = "BUILDPACKS"
	BuildTypePython        BuildType = "PYTHON"
	BuildTypePythonDjango  BuildType = "PYTHON_DJANGO"
	BuildTypeNode          BuildType = "NODE"
	BuildTypeNodeStatic    BuildType = "NODE_STATIC"
	BuildTypeNodeNextjs    BuildType = "NODE_NEXTJS"
	BuildTypeUbuntu        BuildType = "UBUNTU"
	BuildTypeElixirPhoenix BuildType = "ELIXIR_PHOENIX"
	BuildTypeGolangModules BuildType = "GOLANG_MODULES"
	BuildTypeHerokuish     BuildType = "HEROKUISH"
)

type CloudProvider string

const (
	CloudProviderAws          CloudProvider = "AWS"
	CloudProviderAzure        CloudProvider = "AZURE"
	CloudProviderCoreweave    CloudProvider = "COREWEAVE"
	CloudProviderDigitalocean CloudProvider = "DIGITALOCEAN"
	CloudProviderGcp          CloudProvider = "GCP"
	CloudProviderLinode       CloudProvider = "LINODE"
	CloudProviderVultr        CloudProvider = "VULTR"
	CloudProviderUnknown      CloudProvider = "UNKNOWN"
	CloudProviderZeet         CloudProvider = "ZEET"
	CloudProviderAlibaba      CloudProvider = "ALIBABA"
	CloudProviderIbm          CloudProvider = "IBM"
	CloudProviderOvh          CloudProvider = "OVH"
	CloudProviderOci          CloudProvider = "OCI"
	CloudProviderScaleway     CloudProvider = "SCALEWAY"
	CloudProviderTencent      CloudProvider = "TENCENT"
)

// CloudResource includes the GraphQL fields of CloudResource requested by the fragment CloudResource.
type CloudResource struct {
	Name      string                             `json:"name"`
	Status    ResourceStatus                     `json:"status"`
	Type      ResourceType                       `json:"type"`
	CreatedAt *time.Time                         `json:"createdAt,omitempty"`
	Owners    []CloudResourceOwnersResourceOwner `json:"owners"`
	Events    []CloudResourceEventsResourceEvent `json:"events"`
}

// GetName returns CloudResource.Name, and is useful for accessing the field via an interface.
func (v *CloudResource) GetName() string { return v.Name }

// GetStatus returns CloudResource.Status, and is useful for accessing the field via an interface.
func (v *CloudResource) GetStatus() ResourceStatus { return v.Status }

// GetType returns CloudResource.Type, and is useful for accessing the field via an interface.
func (v *CloudResource) GetType() ResourceType { return v.Type }

// GetCreatedAt returns CloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *CloudResource) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetOwners returns CloudResource.Owners, and is useful for accessing the field via an interface.
func (v *CloudResource) GetOwners() []CloudResourceOwnersResourceOwner { return v.Owners }

// GetEvents returns CloudResource.Events, and is useful for accessing the field via an interface.
func (v *CloudResource) GetEvents() []CloudResourceEventsResourceEvent { return v.Events }

// CloudResourceEventsResourceEvent includes the requested fields of the GraphQL type ResourceEvent.
type CloudResourceEventsResourceEvent struct {
	Type              ResourceEventType `json:"type"`
	Reason            string            `json:"reason"`
	Message           string            `json:"message"`
	Action            string            `json:"action"`
	OccurredAt        *time.Time        `json:"occurredAt,omitempty"`
	FirstOccurrenceAt *time.Time        `json:"firstOccurrenceAt,omitempty"`
	LastOccurrenceAt  *time.Time        `json:"lastOccurrenceAt,omitempty"`
	Count             int               `json:"count"`
}

// GetType returns CloudResourceEventsResourceEvent.Type, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetType() ResourceEventType { return v.Type }

// GetReason returns CloudResourceEventsResourceEvent.Reason, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetReason() string { return v.Reason }

// GetMessage returns CloudResourceEventsResourceEvent.Message, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetMessage() string { return v.Message }

// GetAction returns CloudResourceEventsResourceEvent.Action, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetAction() string { return v.Action }

// GetOccurredAt returns CloudResourceEventsResourceEvent.OccurredAt, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetOccurredAt() *time.Time { return v.OccurredAt }

// GetFirstOccurrenceAt returns CloudResourceEventsResourceEvent.FirstOccurrenceAt, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetFirstOccurrenceAt() *time.Time {
	return v.FirstOccurrenceAt
}

// GetLastOccurrenceAt returns CloudResourceEventsResourceEvent.LastOccurrenceAt, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetLastOccurrenceAt() *time.Time {
	return v.LastOccurrenceAt
}

// GetCount returns CloudResourceEventsResourceEvent.Count, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetCount() int { return v.Count }

// CloudResourceOwnersResourceOwner includes the requested fields of the GraphQL type ResourceOwner.
type CloudResourceOwnersResourceOwner struct {
	Name string       `json:"name"`
	Type ResourceType `json:"type"`
}

// GetName returns CloudResourceOwnersResourceOwner.Name, and is useful for accessing the field via an interface.
func (v *CloudResourceOwnersResourceOwner) GetName() string { return v.Name }

// GetType returns CloudResourceOwnersResourceOwner.Type, and is useful for accessing the field via an interface.
func (v *CloudResourceOwnersResourceOwner) GetType() ResourceType { return v.Type }

// cloudRevisionsResponse is returned by cloudRevisions on success.
type CloudRevisionsResponse struct {
	Team *CloudRevisionsTeam `json:"team,omitempty"`
}

// GetTeam returns CloudRevisionsResponse.Team, and is useful for accessing the field via an interface.
func (v *CloudRevisionsResponse) GetTeam() *CloudRevisionsTeam { return v.Team }

// CloudRevisionsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type CloudRevisionsTeam struct {
	Id           uuid.UUID                       `json:"id"`
	CloudAccount *CloudRevisionsTeamCloudAccount `json:"-"`
}

// GetId returns CloudRevisionsTeam.Id, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeam) GetId() uuid.UUID { return v.Id }

// GetCloudAccount returns CloudRevisionsTeam.CloudAccount, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeam) GetCloudAccount() *CloudRevisionsTeamCloudAccount { return v.CloudAccount }

func (v *CloudRevisionsTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CloudRevisionsTeam
		CloudAccount json.RawMessage `json:"cloudAccount"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CloudRevisionsTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CloudAccount
		src := firstPass.CloudAccount
		if len(src) != 0 && string(src) != "null" {
			*dst = new(CloudRevisionsTeamCloudAccount)
			err = __unmarshalCloudRevisionsTeamCloudAccount(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CloudRevisionsTeam.CloudAccount: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCloudRevisionsTeam struct {
	Id uuid.UUID `json:"id"`

	CloudAccount json.RawMessage `json:"cloudAccount,omitempty"`
}

func (v *CloudRevisionsTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CloudRevisionsTeam) __premarshalJSON() (*__premarshalCloudRevisionsTeam, error) {
	var retval __premarshalCloudRevisionsTeam

	retval.Id = v.Id
	{

		dst := &retval.CloudAccount
		src := v.CloudAccount
		if src != nil {
			var err error
			*dst, err = __marshalCloudRevisionsTeamCloudAccount(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal CloudRevisionsTeam.CloudAccount: %w", err)
			}
		}
	}
	return &retval, nil
}

// CloudRevisionsTeamCloudAccount includes the requested fields of the GraphQL interface CloudAccount.
//
// CloudRevisionsTeamCloudAccount is implemented by the following types:
// CloudRevisionsTeamCloudAccountAWSAccount
// CloudRevisionsTeamCloudAccountAzureAccount
// CloudRevisionsTeamCloudAccountCoreWeaveAccount
// CloudRevisionsTeamCloudAccountDOAccount
// CloudRevisionsTeamCloudAccountGCPAccount
// CloudRevisionsTeamCloudAccountLinodeAccount
// CloudRevisionsTeamCloudAccountVultrAccount
type CloudRevisionsTeamCloudAccount interface {
	implementsGraphQLInterfaceCloudRevisionsTeamCloudAccount()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *CloudRevisionsTeamCloudAccountAWSAccount) implementsGraphQLInterfaceCloudRevisionsTeamCloudAccount() {
}
func (v *CloudRevisionsTeamCloudAccountAzureAccount) implementsGraphQLInterfaceCloudRevisionsTeamCloudAccount() {
}
func (v *CloudRevisionsTeamCloudAccountCoreWeaveAccount) implementsGraphQLInterfaceCloudRevisionsTeamCloudAccount() {
}
func (v *CloudRevisionsTeamCloudAccountDOAccount) implementsGraphQLInterfaceCloudRevisionsTeamCloudAccount() {
}
func (v *CloudRevisionsTeamCloudAccountGCPAccount) implementsGraphQLInterfaceCloudRevisionsTeamCloudAccount() {
}
func (v *CloudRevisionsTeamCloudAccountLinodeAccount) implementsGraphQLInterfaceCloudRevisionsTeamCloudAccount() {
}
func (v *CloudRevisionsTeamCloudAccountVultrAccount) implementsGraphQLInterfaceCloudRevisionsTeamCloudAccount() {
}

func __unmarshalCloudRevisionsTeamCloudAccount(b []byte, v *CloudRevisionsTeamCloudAccount) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AWSAccount":
		*v = new(CloudRevisionsTeamCloudAccountAWSAccount)
		return json.Unmarshal(b, *v)
	case "AzureAccount":
		*v = new(CloudRevisionsTeamCloudAccountAzureAccount)
		return json.Unmarshal(b, *v)
	case "CoreWeaveAccount":
		*v = new(CloudRevisionsTeamCloudAccountCoreWeaveAccount)
		return json.Unmarshal(b, *v)
	case "DOAccount":
		*v = new(CloudRevisionsTeamCloudAccountDOAccount)
		return json.Unmarshal(b, *v)
	case "GCPAccount":
		*v = new(CloudRevisionsTeamCloudAccountGCPAccount)
		return json.Unmarshal(b, *v)
	case "LinodeAccount":
		*v = new(CloudRevisionsTeamCloudAccountLinodeAccount)
		return json.Unmarshal(b, *v)
	case "VultrAccount":
		*v = new(CloudRevisionsTeamCloudAccountVultrAccount)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CloudAccount.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CloudRevisionsTeamCloudAccount: "%v"`, tn.TypeName)
	}
}

func __marshalCloudRevisionsTeamCloudAccount(v *CloudRevisionsTeamCloudAccount) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CloudRevisionsTeamCloudAccountAWSAccount:
		typename = "AWSAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*CloudRevisionsTeamCloudAccountAWSAccount
		}{typename, v}
		return json.Marshal(result)
	case *CloudRevisionsTeamCloudAccountAzureAccount:
		typename = "AzureAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*CloudRevisionsTeamCloudAccountAzureAccount
		}{typename, v}
		return json.Marshal(result)
	case *CloudRevisionsTeamCloudAccountCoreWeaveAccount:
		typename = "CoreWeaveAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*CloudRevisionsTeamCloudAccountCoreWeaveAccount
		}{typename, v}
		return json.Marshal(result)
	case *CloudRevisionsTeamCloudAccountDOAccount:
		typename = "DOAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*CloudRevisionsTeamCloudAccountDOAccount
		}{typename, v}
		return json.Marshal(result)
	case *CloudRevisionsTeamCloudAccountGCPAccount:
		typename = "GCPAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*CloudRevisionsTeamCloudAccountGCPAccount
		}{typename, v}
		return json.Marshal(result)
	case *CloudRevisionsTeamCloudAccountLinodeAccount:
		typename = "LinodeAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*CloudRevisionsTeamCloudAccountLinodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *CloudRevisionsTeamCloudAccountVultrAccount:
		typename = "VultrAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*CloudRevisionsTeamCloudAccountVultrAccount
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CloudRevisionsTeamCloudAccount: "%T"`, v)
	}
}

// CloudRevisionsTeamCloudAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type CloudRevisionsTeamCloudAccountAWSAccount struct {
	Typename               *string                                                                                         `json:"__typename,omitempty"`
	Id                     uuid.UUID                                                                                       `json:"id"`
	ConfigurationRevisions CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns CloudRevisionsTeamCloudAccountAWSAccount.Typename, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountAWSAccount) GetTypename() *string { return v.Typename }

// GetId returns CloudRevisionsTeamCloudAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountAWSAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns CloudRevisionsTeamCloudAccountAWSAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountAWSAccount) GetConfigurationRevisions() CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnection includes the requested fields of the GraphQL type AWSAccountConfigurationConnection.
type CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnection struct {
	Nodes []CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration `json:"nodes"`
}

// GetNodes returns CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnection) GetNodes() []CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration {
	return v.Nodes
}

// CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration includes the requested fields of the GraphQL type AWSAccountConfiguration.
type CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration struct {
	RevisionDetailV1AWSAccountConfiguration `json:"-"`
}

// GetRevisionData returns CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1AWSAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1AWSAccountConfiguration.RevisionMetadata
}

func (v *CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1AWSAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration) __premarshalJSON() (*__premarshalCloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration, error) {
	var retval __premarshalCloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1AWSAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1AWSAccountConfiguration.RevisionMetadata
	return &retval, nil
}

// CloudRevisionsTeamCloudAccountAzureAccount includes the requested fields of the GraphQL type AzureAccount.
type CloudRevisionsTeamCloudAccountAzureAccount struct {
	Typename               *string                                                                                             `json:"__typename,omitempty"`
	Id                     uuid.UUID                                                                                           `json:"id"`
	ConfigurationRevisions CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns CloudRevisionsTeamCloudAccountAzureAccount.Typename, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountAzureAccount) GetTypename() *string { return v.Typename }

// GetId returns CloudRevisionsTeamCloudAccountAzureAccount.Id, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountAzureAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns CloudRevisionsTeamCloudAccountAzureAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountAzureAccount) GetConfigurationRevisions() CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnection includes the requested fields of the GraphQL type AzureAccountConfigurationConnection.
type CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnection struct {
	Nodes []CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration `json:"nodes"`
}

// GetNodes returns CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnection) GetNodes() []CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration {
	return v.Nodes
}

// CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration includes the requested fields of the GraphQL type AzureAccountConfiguration.
type CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration struct {
	RevisionDetailV1AzureAccountConfiguration `json:"-"`
}

// GetRevisionData returns CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1AzureAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1AzureAccountConfiguration.RevisionMetadata
}

func (v *CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1AzureAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration) __premarshalJSON() (*__premarshalCloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration, error) {
	var retval __premarshalCloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1AzureAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1AzureAccountConfiguration.RevisionMetadata
	return &retval, nil
}

// CloudRevisionsTeamCloudAccountCoreWeaveAccount includes the requested fields of the GraphQL type CoreWeaveAccount.
type CloudRevisionsTeamCloudAccountCoreWeaveAccount struct {
	Typename               *string                                                                                                     `json:"__typename,omitempty"`
	Id                     uuid.UUID                                                                                                   `json:"id"`
	ConfigurationRevisions CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns CloudRevisionsTeamCloudAccountCoreWeaveAccount.Typename, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountCoreWeaveAccount) GetTypename() *string { return v.Typename }

// GetId returns CloudRevisionsTeamCloudAccountCoreWeaveAccount.Id, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountCoreWeaveAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns CloudRevisionsTeamCloudAccountCoreWeaveAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountCoreWeaveAccount) GetConfigurationRevisions() CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnection includes the requested fields of the GraphQL type CoreWeaveAccountConfigurationConnection.
type CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnection struct {
	Nodes []CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration `json:"nodes"`
}

// GetNodes returns CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnection) GetNodes() []CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration {
	return v.Nodes
}

// CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration includes the requested fields of the GraphQL type CoreWeaveAccountConfiguration.
type CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration struct {
	RevisionDetailV1CoreWeaveAccountConfiguration `json:"-"`
}

// GetRevisionData returns CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1CoreWeaveAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1CoreWeaveAccountConfiguration.RevisionMetadata
}

func (v *CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1CoreWeaveAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration) __premarshalJSON() (*__premarshalCloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration, error) {
	var retval __premarshalCloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1CoreWeaveAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1CoreWeaveAccountConfiguration.RevisionMetadata
	return &retval, nil
}

// CloudRevisionsTeamCloudAccountDOAccount includes the requested fields of the GraphQL type DOAccount.
type CloudRevisionsTeamCloudAccountDOAccount struct {
	Typename               *string                                                                                       `json:"__typename,omitempty"`
	Id                     uuid.UUID                                                                                     `json:"id"`
	ConfigurationRevisions CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns CloudRevisionsTeamCloudAccountDOAccount.Typename, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountDOAccount) GetTypename() *string { return v.Typename }

// GetId returns CloudRevisionsTeamCloudAccountDOAccount.Id, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountDOAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns CloudRevisionsTeamCloudAccountDOAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountDOAccount) GetConfigurationRevisions() CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnection includes the requested fields of the GraphQL type DOAccountConfigurationConnection.
type CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnection struct {
	Nodes []CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration `json:"nodes"`
}

// GetNodes returns CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnection) GetNodes() []CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration {
	return v.Nodes
}

// CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration includes the requested fields of the GraphQL type DOAccountConfiguration.
type CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration struct {
	RevisionDetailV1DOAccountConfiguration `json:"-"`
}

// GetRevisionData returns CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1DOAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1DOAccountConfiguration.RevisionMetadata
}

func (v *CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1DOAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration) __premarshalJSON() (*__premarshalCloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration, error) {
	var retval __premarshalCloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1DOAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1DOAccountConfiguration.RevisionMetadata
	return &retval, nil
}

// CloudRevisionsTeamCloudAccountGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type CloudRevisionsTeamCloudAccountGCPAccount struct {
	Typename               *string                                                                                         `json:"__typename,omitempty"`
	Id                     uuid.UUID                                                                                       `json:"id"`
	ConfigurationRevisions CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns CloudRevisionsTeamCloudAccountGCPAccount.Typename, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountGCPAccount) GetTypename() *string { return v.Typename }

// GetId returns CloudRevisionsTeamCloudAccountGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountGCPAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns CloudRevisionsTeamCloudAccountGCPAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountGCPAccount) GetConfigurationRevisions() CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnection includes the requested fields of the GraphQL type GCPAccountConfigurationConnection.
type CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnection struct {
	Nodes []CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration `json:"nodes"`
}

// GetNodes returns CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnection) GetNodes() []CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration {
	return v.Nodes
}

// CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration includes the requested fields of the GraphQL type GCPAccountConfiguration.
type CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration struct {
	RevisionDetailV1GCPAccountConfiguration `json:"-"`
}

// GetRevisionData returns CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1GCPAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1GCPAccountConfiguration.RevisionMetadata
}

func (v *CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1GCPAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration) __premarshalJSON() (*__premarshalCloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration, error) {
	var retval __premarshalCloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1GCPAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1GCPAccountConfiguration.RevisionMetadata
	return &retval, nil
}

// CloudRevisionsTeamCloudAccountLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type CloudRevisionsTeamCloudAccountLinodeAccount struct {
	Typename               *string                                                                                               `json:"__typename,omitempty"`
	Id                     uuid.UUID                                                                                             `json:"id"`
	ConfigurationRevisions CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns CloudRevisionsTeamCloudAccountLinodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountLinodeAccount) GetTypename() *string { return v.Typename }

// GetId returns CloudRevisionsTeamCloudAccountLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountLinodeAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns CloudRevisionsTeamCloudAccountLinodeAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountLinodeAccount) GetConfigurationRevisions() CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnection includes the requested fields of the GraphQL type LinodeAccountConfigurationConnection.
type CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnection struct {
	Nodes []CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration `json:"nodes"`
}

// GetNodes returns CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnection) GetNodes() []CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration {
	return v.Nodes
}

// CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration includes the requested fields of the GraphQL type LinodeAccountConfiguration.
type CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration struct {
	RevisionDetailV1LinodeAccountConfiguration `json:"-"`
}

// GetRevisionData returns CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1LinodeAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1LinodeAccountConfiguration.RevisionMetadata
}

func (v *CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1LinodeAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration) __premarshalJSON() (*__premarshalCloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration, error) {
	var retval __premarshalCloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1LinodeAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1LinodeAccountConfiguration.RevisionMetadata
	return &retval, nil
}

// CloudRevisionsTeamCloudAccountVultrAccount includes the requested fields of the GraphQL type VultrAccount.
type CloudRevisionsTeamCloudAccountVultrAccount struct {
	Typename               *string                                                                                             `json:"__typename,omitempty"`
	Id                     uuid.UUID                                                                                           `json:"id"`
	ConfigurationRevisions CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns CloudRevisionsTeamCloudAccountVultrAccount.Typename, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountVultrAccount) GetTypename() *string { return v.Typename }

// GetId returns CloudRevisionsTeamCloudAccountVultrAccount.Id, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountVultrAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns CloudRevisionsTeamCloudAccountVultrAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountVultrAccount) GetConfigurationRevisions() CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnection includes the requested fields of the GraphQL type VultrAccountConfigurationConnection.
type CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnection struct {
	Nodes []CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration `json:"nodes"`
}

// GetNodes returns CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnection) GetNodes() []CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration {
	return v.Nodes
}

// CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration includes the requested fields of the GraphQL type VultrAccountConfiguration.
type CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration struct {
	RevisionDetailV1VultrAccountConfiguration `json:"-"`
}

// GetRevisionData returns CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1VultrAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1VultrAccountConfiguration.RevisionMetadata
}

func (v *CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1VultrAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration) __premarshalJSON() (*__premarshalCloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration, error) {
	var retval __premarshalCloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1VultrAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1VultrAccountConfiguration.RevisionMetadata
	return &retval, nil
}

type ClusterComponentEjectedStatus string

const (
	ClusterComponentEjectedStatusNotFound ClusterComponentEjectedStatus = "NOT_FOUND"
	ClusterComponentEjectedStatusDetected ClusterComponentEjectedStatus = "DETECTED"
)

type ClusterComponentType string

const (
	ClusterComponentTypeHelm      ClusterComponentType = "HELM"
	ClusterComponentTypeTerraform ClusterComponentType = "TERRAFORM"
)

// ClusterDetailV1 includes the GraphQL fields of Cluster requested by the fragment ClusterDetailV1.
type ClusterDetailV1 struct {
	Id            uuid.UUID      `json:"id"`
	DisplayName   string         `json:"displayName"`
	State         ClusterState   `json:"state"`
	Connected     *bool          `json:"connected,omitempty"`
	CloudProvider *CloudProvider `json:"cloudProvider,omitempty"`
	CreatedAt     time.Time      `json:"createdAt"`
	UpdatedAt     time.Time      `json:"updatedAt"`
}

// GetId returns ClusterDetailV1.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetId() uuid.UUID { return v.Id }

// GetDisplayName returns ClusterDetailV1.DisplayName, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetDisplayName() string { return v.DisplayName }

// GetState returns ClusterDetailV1.State, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetState() ClusterState { return v.State }

// GetConnected returns ClusterDetailV1.Connected, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetConnected() *bool { return v.Connected }

// GetCloudProvider returns ClusterDetailV1.CloudProvider, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetCloudProvider() *CloudProvider { return v.CloudProvider }

// GetCreatedAt returns ClusterDetailV1.CreatedAt, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns ClusterDetailV1.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetUpdatedAt() time.Time { return v.UpdatedAt }

// clusterDetailsResponse is returned by clusterDetails on success.
type ClusterDetailsResponse struct {
	Team *ClusterDetailsTeam `json:"team,omitempty"`
}

// GetTeam returns ClusterDetailsResponse.Team, and is useful for accessing the field via an interface.
func (v *ClusterDetailsResponse) GetTeam() *ClusterDetailsTeam { return v.Team }

// ClusterDetailsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ClusterDetailsTeam struct {
	Id      uuid.UUID                  `json:"id"`
	Cluster *ClusterDetailsTeamCluster `json:"cluster,omitempty"`
}

// GetId returns ClusterDetailsTeam.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailsTeam) GetId() uuid.UUID { return v.Id }

// GetCluster returns ClusterDetailsTeam.Cluster, and is useful for accessing the field via an interface.
func (v *ClusterDetailsTeam) GetCluster() *ClusterDetailsTeamCluster { return v.Cluster }

// ClusterDetailsTeamCluster includes the requested fields of the GraphQL type Cluster.
type ClusterDetailsTeamCluster struct {
	Id              uuid.UUID `json:"id"`
	ClusterDetailV1 `json:"-"`
}

// GetId returns ClusterDetailsTeamCluster.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailsTeamCluster) GetId() uuid.UUID { return v.Id }

// GetDisplayName returns ClusterDetailsTeamCluster.DisplayName, and is useful for accessing the field via an interface.
func (v *ClusterDetailsTeamCluster) GetDisplayName() string { return v.ClusterDetailV1.DisplayName }

// GetState returns ClusterDetailsTeamCluster.State, and is useful for accessing the field via an interface.
func (v *ClusterDetailsTeamCluster) GetState() ClusterState { return v.ClusterDetailV1.State }

// GetConnected returns ClusterDetailsTeamCluster.Connected, and is useful for accessing the field via an interface.
func (v *ClusterDetailsTeamCluster) GetConnected() *bool { return v.ClusterDetailV1.Connected }

// GetCloudProvider returns ClusterDetailsTeamCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *ClusterDetailsTeamCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetailV1.CloudProvider
}

// GetCreatedAt returns ClusterDetailsTeamCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *ClusterDetailsTeamCluster) GetCreatedAt() time.Time { return v.ClusterDetailV1.CreatedAt }

// GetUpdatedAt returns ClusterDetailsTeamCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ClusterDetailsTeamCluster) GetUpdatedAt() time.Time { return v.ClusterDetailV1.UpdatedAt }

func (v *ClusterDetailsTeamCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ClusterDetailsTeamCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.ClusterDetailsTeamCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetailV1)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalClusterDetailsTeamCluster struct {
	Id uuid.UUID `json:"id"`

	DisplayName string `json:"displayName"`

	State ClusterState `json:"state"`

	Connected *bool `json:"connected,omitempty"`

	CloudProvider *CloudProvider `json:"cloudProvider,omitempty"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *ClusterDetailsTeamCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ClusterDetailsTeamCluster) __premarshalJSON() (*__premarshalClusterDetailsTeamCluster, error) {
	var retval __premarshalClusterDetailsTeamCluster

	retval.Id = v.Id
	retval.DisplayName = v.ClusterDetailV1.DisplayName
	retval.State = v.ClusterDetailV1.State
	retval.Connected = v.ClusterDetailV1.Connected
	retval.CloudProvider = v.ClusterDetailV1.CloudProvider
	retval.CreatedAt = v.ClusterDetailV1.CreatedAt
	retval.UpdatedAt = v.ClusterDetailV1.UpdatedAt
	return &retval, nil
}

// clusterRevisionsResponse is returned by clusterRevisions on success.
type ClusterRevisionsResponse struct {
	Team *ClusterRevisionsTeam `json:"team,omitempty"`
}

// GetTeam returns ClusterRevisionsResponse.Team, and is useful for accessing the field via an interface.
func (v *ClusterRevisionsResponse) GetTeam() *ClusterRevisionsTeam { return v.Team }

// ClusterRevisionsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ClusterRevisionsTeam struct {
	Id      uuid.UUID                    `json:"id"`
	Cluster *ClusterRevisionsTeamCluster `json:"cluster,omitempty"`
}

// GetId returns ClusterRevisionsTeam.Id, and is useful for accessing the field via an interface.
func (v *ClusterRevisionsTeam) GetId() uuid.UUID { return v.Id }

// GetCluster returns ClusterRevisionsTeam.Cluster, and is useful for accessing the field via an interface.
func (v *ClusterRevisionsTeam) GetCluster() *ClusterRevisionsTeamCluster { return v.Cluster }

// ClusterRevisionsTeamCluster includes the requested fields of the GraphQL type Cluster.
type ClusterRevisionsTeamCluster struct {
	Id                     uuid.UUID                                                                       `json:"id"`
	ConfigurationRevisions ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnection `json:"configurationRevisions"`
}

// GetId returns ClusterRevisionsTeamCluster.Id, and is useful for accessing the field via an interface.
func (v *ClusterRevisionsTeamCluster) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns ClusterRevisionsTeamCluster.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *ClusterRevisionsTeamCluster) GetConfigurationRevisions() ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnection {
	return v.ConfigurationRevisions
}

// ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnection includes the requested fields of the GraphQL type ClusterConfigurationConnection.
type ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnection struct {
	Nodes []ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration `json:"nodes"`
}

// GetNodes returns ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnection) GetNodes() []ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration {
	return v.Nodes
}

// ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration includes the requested fields of the GraphQL type ClusterConfiguration.
type ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration struct {
	RevisionDetailV1ClusterConfiguration `json:"-"`
}

// GetRevisionData returns ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1ClusterConfiguration.RevisionData
}

// GetRevisionMetadata returns ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1ClusterConfiguration.RevisionMetadata
}

func (v *ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1ClusterConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration) __premarshalJSON() (*__premarshalClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration, error) {
	var retval __premarshalClusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration

	retval.RevisionData = v.RevisionDetailV1ClusterConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1ClusterConfiguration.RevisionMetadata
	return &retval, nil
}

type ClusterState string

const (
	ClusterStatePending       ClusterState = "PENDING"
	ClusterStatePendingSetup  ClusterState = "PENDING_SETUP"
	ClusterStateCreating      ClusterState = "CREATING"
	ClusterStateHealthy       ClusterState = "HEALTHY"
	ClusterStateDeleting      ClusterState = "DELETING"
	ClusterStateError         ClusterState = "ERROR"
	ClusterStateErrorDeleting ClusterState = "ERROR_DELETING"
)

type ClusterStatus string

const (
	ClusterStatusPending       ClusterStatus = "PENDING"
	ClusterStatusPendingSetup  ClusterStatus = "PENDING_SETUP"
	ClusterStatusCreating      ClusterStatus = "CREATING"
	ClusterStatusHealthy       ClusterStatus = "HEALTHY"
	ClusterStatusDeleting      ClusterStatus = "DELETING"
	ClusterStatusError         ClusterStatus = "ERROR"
	ClusterStatusErrorDeleting ClusterStatus = "ERROR_DELETING"
	ClusterStatusUnreachable   ClusterStatus = "UNREACHABLE"
)

// clusterStatusResponse is returned by clusterStatus on success.
type ClusterStatusResponse struct {
	Team *ClusterStatusTeam `json:"team,omitempty"`
}

// GetTeam returns ClusterStatusResponse.Team, and is useful for accessing the field via an interface.
func (v *ClusterStatusResponse) GetTeam() *ClusterStatusTeam { return v.Team }

// ClusterStatusTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ClusterStatusTeam struct {
	Id      uuid.UUID                 `json:"id"`
	Cluster *ClusterStatusTeamCluster `json:"cluster,omitempty"`
}

// GetId returns ClusterStatusTeam.Id, and is useful for accessing the field via an interface.
func (v *ClusterStatusTeam) GetId() uuid.UUID { return v.Id }

// GetCluster returns ClusterStatusTeam.Cluster, and is useful for accessing the field via an interface.
func (v *ClusterStatusTeam) GetCluster() *ClusterStatusTeamCluster { return v.Cluster }

// ClusterStatusTeamCluster includes the requested fields of the GraphQL type Cluster.
type ClusterStatusTeamCluster struct {
	Id     uuid.UUID      `json:"id"`
	Status *ClusterStatus `json:"status,omitempty"`
}

// GetId returns ClusterStatusTeamCluster.Id, and is useful for accessing the field via an interface.
func (v *ClusterStatusTeamCluster) GetId() uuid.UUID { return v.Id }

// GetStatus returns ClusterStatusTeamCluster.Status, and is useful for accessing the field via an interface.
func (v *ClusterStatusTeamCluster) GetStatus() *ClusterStatus { return v.Status }

type ContainerRegistrySourceInput struct {
	RegistryId  *uuid.UUID `json:"registryId,omitempty"`
	RegistryUrl *string    `json:"registryUrl,omitempty"`
	Repository  string     `json:"repository"`
	Tag         *string    `json:"tag,omitempty"`
}

// GetRegistryId returns ContainerRegistrySourceInput.RegistryId, and is useful for accessing the field via an interface.
func (v *ContainerRegistrySourceInput) GetRegistryId() *uuid.UUID { return v.RegistryId }

// GetRegistryUrl returns ContainerRegistrySourceInput.RegistryUrl, and is useful for accessing the field via an interface.
func (v *ContainerRegistrySourceInput) GetRegistryUrl() *string { return v.RegistryUrl }

// GetRepository returns ContainerRegistrySourceInput.Repository, and is useful for accessing the field via an interface.
func (v *ContainerRegistrySourceInput) GetRepository() string { return v.Repository }

// GetTag returns ContainerRegistrySourceInput.Tag, and is useful for accessing the field via an interface.
func (v *ContainerRegistrySourceInput) GetTag() *string { return v.Tag }

// CreateBuildRunCreateBuildRun includes the requested fields of the GraphQL type BuildRun.
type CreateBuildRunCreateBuildRun struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns CreateBuildRunCreateBuildRun.Id, and is useful for accessing the field via an interface.
func (v *CreateBuildRunCreateBuildRun) GetId() uuid.UUID { return v.Id }

// createBuildRunResponse is returned by createBuildRun on success.
type CreateBuildRunResponse struct {
	CreateBuildRun CreateBuildRunCreateBuildRun `json:"createBuildRun"`
}

// GetCreateBuildRun returns CreateBuildRunResponse.CreateBuildRun, and is useful for accessing the field via an interface.
func (v *CreateBuildRunResponse) GetCreateBuildRun() CreateBuildRunCreateBuildRun {
	return v.CreateBuildRun
}

// CreateDeployRunCreateDeployRun includes the requested fields of the GraphQL type DeployRun.
type CreateDeployRunCreateDeployRun struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns CreateDeployRunCreateDeployRun.Id, and is useful for accessing the field via an interface.
func (v *CreateDeployRunCreateDeployRun) GetId() uuid.UUID { return v.Id }

type CreateDeployRunInput struct {
	DeployId uuid.UUID  `json:"deployId"`
	IntentId *uuid.UUID `json:"intentId,omitempty"`
}

// GetDeployId returns CreateDeployRunInput.DeployId, and is useful for accessing the field via an interface.
func (v *CreateDeployRunInput) GetDeployId() uuid.UUID { return v.DeployId }

// GetIntentId returns CreateDeployRunInput.IntentId, and is useful for accessing the field via an interface.
func (v *CreateDeployRunInput) GetIntentId() *uuid.UUID { return v.IntentId }

// createDeployRunResponse is returned by createDeployRun on success.
type CreateDeployRunResponse struct {
	CreateDeployRun CreateDeployRunCreateDeployRun `json:"createDeployRun"`
}

// GetCreateDeployRun returns CreateDeployRunResponse.CreateDeployRun, and is useful for accessing the field via an interface.
func (v *CreateDeployRunResponse) GetCreateDeployRun() CreateDeployRunCreateDeployRun {
	return v.CreateDeployRun
}

// CreateGroupCreateGroup includes the requested fields of the GraphQL type Group.
type CreateGroupCreateGroup struct {
	Id        uuid.UUID                          `json:"id"`
	Name      string                             `json:"name"`
	Envs      []CreateGroupCreateGroupEnvsEnvVar `json:"envs"`
	Owner     CreateGroupCreateGroupOwnerTeam    `json:"owner"`
	CreatedAt time.Time                          `json:"createdAt"`
	UpdatedAt time.Time                          `json:"updatedAt"`
}

// GetId returns CreateGroupCreateGroup.Id, and is useful for accessing the field via an interface.
func (v *CreateGroupCreateGroup) GetId() uuid.UUID { return v.Id }

// GetName returns CreateGroupCreateGroup.Name, and is useful for accessing the field via an interface.
func (v *CreateGroupCreateGroup) GetName() string { return v.Name }

// GetEnvs returns CreateGroupCreateGroup.Envs, and is useful for accessing the field via an interface.
func (v *CreateGroupCreateGroup) GetEnvs() []CreateGroupCreateGroupEnvsEnvVar { return v.Envs }

// GetOwner returns CreateGroupCreateGroup.Owner, and is useful for accessing the field via an interface.
func (v *CreateGroupCreateGroup) GetOwner() CreateGroupCreateGroupOwnerTeam { return v.Owner }

// GetCreatedAt returns CreateGroupCreateGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateGroupCreateGroup) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns CreateGroupCreateGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CreateGroupCreateGroup) GetUpdatedAt() time.Time { return v.UpdatedAt }

// CreateGroupCreateGroupEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type CreateGroupCreateGroupEnvsEnvVar struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns CreateGroupCreateGroupEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *CreateGroupCreateGroupEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns CreateGroupCreateGroupEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *CreateGroupCreateGroupEnvsEnvVar) GetValue() string { return v.Value }

// CreateGroupCreateGroupOwnerTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type CreateGroupCreateGroupOwnerTeam struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns CreateGroupCreateGroupOwnerTeam.Id, and is useful for accessing the field via an interface.
func (v *CreateGroupCreateGroupOwnerTeam) GetId() uuid.UUID { return v.Id }

// GetName returns CreateGroupCreateGroupOwnerTeam.Name, and is useful for accessing the field via an interface.
func (v *CreateGroupCreateGroupOwnerTeam) GetName() string { return v.Name }

type CreateGroupInput struct {
	TeamId uuid.UUID     `json:"teamId"`
	Name   string        `json:"name"`
	Envs   []EnvVarInput `json:"envs"`
}

// GetTeamId returns CreateGroupInput.TeamId, and is useful for accessing the field via an interface.
func (v *CreateGroupInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetName returns CreateGroupInput.Name, and is useful for accessing the field via an interface.
func (v *CreateGroupInput) GetName() string { return v.Name }

// GetEnvs returns CreateGroupInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateGroupInput) GetEnvs() []EnvVarInput { return v.Envs }

// createGroupResponse is returned by createGroup on success.
type CreateGroupResponse struct {
	CreateGroup CreateGroupCreateGroup `json:"createGroup"`
}

// GetCreateGroup returns CreateGroupResponse.CreateGroup, and is useful for accessing the field via an interface.
func (v *CreateGroupResponse) GetCreateGroup() CreateGroupCreateGroup { return v.CreateGroup }

// CreateProjectCreateProject includes the requested fields of the GraphQL type Project.
type CreateProjectCreateProject struct {
	Id       uuid.UUID                           `json:"id"`
	Name     string                              `json:"name"`
	Workflow *CreateProjectCreateProjectWorkflow `json:"workflow,omitempty"`
}

// GetId returns CreateProjectCreateProject.Id, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProject) GetId() uuid.UUID { return v.Id }

// GetName returns CreateProjectCreateProject.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProject) GetName() string { return v.Name }

// GetWorkflow returns CreateProjectCreateProject.Workflow, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProject) GetWorkflow() *CreateProjectCreateProjectWorkflow {
	return v.Workflow
}

// CreateProjectCreateProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type CreateProjectCreateProjectWorkflow struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns CreateProjectCreateProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProjectWorkflow) GetId() uuid.UUID { return v.Id }

type CreateProjectInput struct {
	TeamId       uuid.UUID                      `json:"teamId"`
	GroupId      *uuid.UUID                     `json:"groupId,omitempty"`
	GroupName    *string                        `json:"groupName,omitempty"`
	SubGroupId   *uuid.UUID                     `json:"subGroupId,omitempty"`
	SubGroupName *string                        `json:"subGroupName,omitempty"`
	Name         string                         `json:"name"`
	Enabled      *bool                          `json:"enabled,omitempty"`
	Workflow     *WorkflowDefinitionInput       `json:"workflow,omitempty"`
	Build        *BuildDefinitionInput          `json:"build,omitempty"`
	Jobs         []JobDefinitionInput           `json:"jobs"`
	Deploys      []DeploymentConfigurationInput `json:"deploys"`
	Envs         []EnvVarInput                  `json:"envs"`
	BlueprintId  *uuid.UUID                     `json:"blueprintId,omitempty"`
}

// GetTeamId returns CreateProjectInput.TeamId, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetGroupId returns CreateProjectInput.GroupId, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetGroupId() *uuid.UUID { return v.GroupId }

// GetGroupName returns CreateProjectInput.GroupName, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetGroupName() *string { return v.GroupName }

// GetSubGroupId returns CreateProjectInput.SubGroupId, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetSubGroupId() *uuid.UUID { return v.SubGroupId }

// GetSubGroupName returns CreateProjectInput.SubGroupName, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetSubGroupName() *string { return v.SubGroupName }

// GetName returns CreateProjectInput.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetName() string { return v.Name }

// GetEnabled returns CreateProjectInput.Enabled, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetEnabled() *bool { return v.Enabled }

// GetWorkflow returns CreateProjectInput.Workflow, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetWorkflow() *WorkflowDefinitionInput { return v.Workflow }

// GetBuild returns CreateProjectInput.Build, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetBuild() *BuildDefinitionInput { return v.Build }

// GetJobs returns CreateProjectInput.Jobs, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetJobs() []JobDefinitionInput { return v.Jobs }

// GetDeploys returns CreateProjectInput.Deploys, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetDeploys() []DeploymentConfigurationInput { return v.Deploys }

// GetEnvs returns CreateProjectInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetEnvs() []EnvVarInput { return v.Envs }

// GetBlueprintId returns CreateProjectInput.BlueprintId, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetBlueprintId() *uuid.UUID { return v.BlueprintId }

// createProjectResponse is returned by createProject on success.
type CreateProjectResponse struct {
	CreateProject CreateProjectCreateProject `json:"createProject"`
}

// GetCreateProject returns CreateProjectResponse.CreateProject, and is useful for accessing the field via an interface.
func (v *CreateProjectResponse) GetCreateProject() CreateProjectCreateProject { return v.CreateProject }

// CreateSubGroupCreateSubGroup includes the requested fields of the GraphQL type SubGroup.
type CreateSubGroupCreateSubGroup struct {
	Id        uuid.UUID                                `json:"id"`
	Name      string                                   `json:"name"`
	Envs      []CreateSubGroupCreateSubGroupEnvsEnvVar `json:"envs"`
	Group     *CreateSubGroupCreateSubGroupGroup       `json:"group,omitempty"`
	CreatedAt time.Time                                `json:"createdAt"`
	UpdatedAt time.Time                                `json:"updatedAt"`
}

// GetId returns CreateSubGroupCreateSubGroup.Id, and is useful for accessing the field via an interface.
func (v *CreateSubGroupCreateSubGroup) GetId() uuid.UUID { return v.Id }

// GetName returns CreateSubGroupCreateSubGroup.Name, and is useful for accessing the field via an interface.
func (v *CreateSubGroupCreateSubGroup) GetName() string { return v.Name }

// GetEnvs returns CreateSubGroupCreateSubGroup.Envs, and is useful for accessing the field via an interface.
func (v *CreateSubGroupCreateSubGroup) GetEnvs() []CreateSubGroupCreateSubGroupEnvsEnvVar {
	return v.Envs
}

// GetGroup returns CreateSubGroupCreateSubGroup.Group, and is useful for accessing the field via an interface.
func (v *CreateSubGroupCreateSubGroup) GetGroup() *CreateSubGroupCreateSubGroupGroup { return v.Group }

// GetCreatedAt returns CreateSubGroupCreateSubGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateSubGroupCreateSubGroup) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns CreateSubGroupCreateSubGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CreateSubGroupCreateSubGroup) GetUpdatedAt() time.Time { return v.UpdatedAt }

// CreateSubGroupCreateSubGroupEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type CreateSubGroupCreateSubGroupEnvsEnvVar struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns CreateSubGroupCreateSubGroupEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *CreateSubGroupCreateSubGroupEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns CreateSubGroupCreateSubGroupEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *CreateSubGroupCreateSubGroupEnvsEnvVar) GetValue() string { return v.Value }

// CreateSubGroupCreateSubGroupGroup includes the requested fields of the GraphQL type Group.
type CreateSubGroupCreateSubGroupGroup struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns CreateSubGroupCreateSubGroupGroup.Id, and is useful for accessing the field via an interface.
func (v *CreateSubGroupCreateSubGroupGroup) GetId() uuid.UUID { return v.Id }

// GetName returns CreateSubGroupCreateSubGroupGroup.Name, and is useful for accessing the field via an interface.
func (v *CreateSubGroupCreateSubGroupGroup) GetName() string { return v.Name }

type CreateSubGroupInput struct {
	GroupId uuid.UUID     `json:"groupId"`
	Name    string        `json:"name"`
	Envs    []EnvVarInput `json:"envs"`
}

// GetGroupId returns CreateSubGroupInput.GroupId, and is useful for accessing the field via an interface.
func (v *CreateSubGroupInput) GetGroupId() uuid.UUID { return v.GroupId }

// GetName returns CreateSubGroupInput.Name, and is useful for accessing the field via an interface.
func (v *CreateSubGroupInput) GetName() string { return v.Name }

// GetEnvs returns CreateSubGroupInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateSubGroupInput) GetEnvs() []EnvVarInput { return v.Envs }

// createSubGroupResponse is returned by createSubGroup on success.
type CreateSubGroupResponse struct {
	CreateSubGroup CreateSubGroupCreateSubGroup `json:"createSubGroup"`
}

// GetCreateSubGroup returns CreateSubGroupResponse.CreateSubGroup, and is useful for accessing the field via an interface.
func (v *CreateSubGroupResponse) GetCreateSubGroup() CreateSubGroupCreateSubGroup {
	return v.CreateSubGroup
}

type CreateTriggerInput struct {
	Definition TriggerDefinitionInput `json:"definition"`
	ParentId   uuid.UUID              `json:"parentId"`
}

// GetDefinition returns CreateTriggerInput.Definition, and is useful for accessing the field via an interface.
func (v *CreateTriggerInput) GetDefinition() TriggerDefinitionInput { return v.Definition }

// GetParentId returns CreateTriggerInput.ParentId, and is useful for accessing the field via an interface.
func (v *CreateTriggerInput) GetParentId() uuid.UUID { return v.ParentId }

// CreateUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken includes the requested fields of the GraphQL type PersonalAccessToken.
type CreateUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken struct {
	Id        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Token     string    `json:"token"`
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns CreateUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken.Id, and is useful for accessing the field via an interface.
func (v *CreateUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken) GetId() uuid.UUID {
	return v.Id
}

// GetName returns CreateUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken.Name, and is useful for accessing the field via an interface.
func (v *CreateUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken) GetName() string {
	return v.Name
}

// GetToken returns CreateUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken.Token, and is useful for accessing the field via an interface.
func (v *CreateUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken) GetToken() string {
	return v.Token
}

// GetCreatedAt returns CreateUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// createUserPersonalAccessTokenResponse is returned by createUserPersonalAccessToken on success.
type CreateUserPersonalAccessTokenResponse struct {
	CreatePersonalAccessTokenForUser CreateUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken `json:"createPersonalAccessTokenForUser"`
}

// GetCreatePersonalAccessTokenForUser returns CreateUserPersonalAccessTokenResponse.CreatePersonalAccessTokenForUser, and is useful for accessing the field via an interface.
func (v *CreateUserPersonalAccessTokenResponse) GetCreatePersonalAccessTokenForUser() CreateUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken {
	return v.CreatePersonalAccessTokenForUser
}

// CreateWorkflowTriggerCreateTrigger includes the requested fields of the GraphQL type Trigger.
type CreateWorkflowTriggerCreateTrigger struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns CreateWorkflowTriggerCreateTrigger.Id, and is useful for accessing the field via an interface.
func (v *CreateWorkflowTriggerCreateTrigger) GetId() uuid.UUID { return v.Id }

// createWorkflowTriggerResponse is returned by createWorkflowTrigger on success.
type CreateWorkflowTriggerResponse struct {
	CreateTrigger CreateWorkflowTriggerCreateTrigger `json:"createTrigger"`
}

// GetCreateTrigger returns CreateWorkflowTriggerResponse.CreateTrigger, and is useful for accessing the field via an interface.
func (v *CreateWorkflowTriggerResponse) GetCreateTrigger() CreateWorkflowTriggerCreateTrigger {
	return v.CreateTrigger
}

type CronJobEventTriggerConfigurationInput struct {
	Expression *string `json:"expression,omitempty"`
}

// GetExpression returns CronJobEventTriggerConfigurationInput.Expression, and is useful for accessing the field via an interface.
func (v *CronJobEventTriggerConfigurationInput) GetExpression() *string { return v.Expression }

// CurrentUserCurrentUser includes the requested fields of the GraphQL type User.
type CurrentUserCurrentUser struct {
	Id    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Login string    `json:"login"`
}

// GetId returns CurrentUserCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *CurrentUserCurrentUser) GetId() uuid.UUID { return v.Id }

// GetName returns CurrentUserCurrentUser.Name, and is useful for accessing the field via an interface.
func (v *CurrentUserCurrentUser) GetName() string { return v.Name }

// GetLogin returns CurrentUserCurrentUser.Login, and is useful for accessing the field via an interface.
func (v *CurrentUserCurrentUser) GetLogin() string { return v.Login }

// currentUserResponse is returned by currentUser on success.
type CurrentUserResponse struct {
	CurrentUser CurrentUserCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns CurrentUserResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *CurrentUserResponse) GetCurrentUser() CurrentUserCurrentUser { return v.CurrentUser }

// deleteGroupResponse is returned by deleteGroup on success.
type DeleteGroupResponse struct {
	DeleteGroup bool `json:"deleteGroup"`
}

// GetDeleteGroup returns DeleteGroupResponse.DeleteGroup, and is useful for accessing the field via an interface.
func (v *DeleteGroupResponse) GetDeleteGroup() bool { return v.DeleteGroup }

// deleteProjectAndResourcesResponse is returned by deleteProjectAndResources on success.
type DeleteProjectAndResourcesResponse struct {
	DeleteProjectAndResources *uuid.UUID `json:"deleteProjectAndResources,omitempty"`
}

// GetDeleteProjectAndResources returns DeleteProjectAndResourcesResponse.DeleteProjectAndResources, and is useful for accessing the field via an interface.
func (v *DeleteProjectAndResourcesResponse) GetDeleteProjectAndResources() *uuid.UUID {
	return v.DeleteProjectAndResources
}

// deleteProjectResourcesResponse is returned by deleteProjectResources on success.
type DeleteProjectResourcesResponse struct {
	DeleteProjectResources *uuid.UUID `json:"deleteProjectResources,omitempty"`
}

// GetDeleteProjectResources returns DeleteProjectResourcesResponse.DeleteProjectResources, and is useful for accessing the field via an interface.
func (v *DeleteProjectResourcesResponse) GetDeleteProjectResources() *uuid.UUID {
	return v.DeleteProjectResources
}

// deleteProjectResponse is returned by deleteProject on success.
type DeleteProjectResponse struct {
	DeleteProject bool `json:"deleteProject"`
}

// GetDeleteProject returns DeleteProjectResponse.DeleteProject, and is useful for accessing the field via an interface.
func (v *DeleteProjectResponse) GetDeleteProject() bool { return v.DeleteProject }

// deleteSubGroupResponse is returned by deleteSubGroup on success.
type DeleteSubGroupResponse struct {
	DeleteSubGroup bool `json:"deleteSubGroup"`
}

// GetDeleteSubGroup returns DeleteSubGroupResponse.DeleteSubGroup, and is useful for accessing the field via an interface.
func (v *DeleteSubGroupResponse) GetDeleteSubGroup() bool { return v.DeleteSubGroup }

// deleteUserPersonalAccessTokenResponse is returned by deleteUserPersonalAccessToken on success.
type DeleteUserPersonalAccessTokenResponse struct {
	DeletePersonalAccessToken bool `json:"deletePersonalAccessToken"`
}

// GetDeletePersonalAccessToken returns DeleteUserPersonalAccessTokenResponse.DeletePersonalAccessToken, and is useful for accessing the field via an interface.
func (v *DeleteUserPersonalAccessTokenResponse) GetDeletePersonalAccessToken() bool {
	return v.DeletePersonalAccessToken
}

// deleteWorkflowTriggerResponse is returned by deleteWorkflowTrigger on success.
type DeleteWorkflowTriggerResponse struct {
	DeleteTrigger bool `json:"deleteTrigger"`
}

// GetDeleteTrigger returns DeleteWorkflowTriggerResponse.DeleteTrigger, and is useful for accessing the field via an interface.
func (v *DeleteWorkflowTriggerResponse) GetDeleteTrigger() bool { return v.DeleteTrigger }

// DeployConfigurationDetail includes the GraphQL fields of Deploy requested by the fragment DeployConfigurationDetail.
type DeployConfigurationDetail struct {
	Id         uuid.UUID `json:"id"`
	Name       string    `json:"name"`
	BranchName *string   `json:"branchName,omitempty"`
	// When querying history by revisionId or sequenceId, only the revisionMetadata and revisionData will be available,
	// when querying the current configuration (neither revisionId nor sequenceId is
	// specified), all fields _except_ revisionMetadata and revisionData will be available.
	Configuration *DeployConfigurationDetailConfigurationDeploymentConfiguration `json:"configuration,omitempty"`
}

// GetId returns DeployConfigurationDetail.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetail) GetId() uuid.UUID { return v.Id }

// GetName returns DeployConfigurationDetail.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetail) GetName() string { return v.Name }

// GetBranchName returns DeployConfigurationDetail.BranchName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetail) GetBranchName() *string { return v.BranchName }

// GetConfiguration returns DeployConfigurationDetail.Configuration, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetail) GetConfiguration() *DeployConfigurationDetailConfigurationDeploymentConfiguration {
	return v.Configuration
}

// DeployConfigurationDetailConfigurationDeploymentConfiguration includes the requested fields of the GraphQL type DeploymentConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfiguration struct {
	Id                   uuid.UUID                                                                                               `json:"id"`
	DefaultWorkflowSteps []BlueprintDriverWorkflowStepAction                                                                     `json:"defaultWorkflowSteps"`
	RequirePlanApproval  *bool                                                                                                   `json:"requirePlanApproval,omitempty"`
	Variables            []DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable                  `json:"variables"`
	Kubernetes           *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes                                `json:"kubernetes,omitempty"`
	Helm                 *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm `json:"helm,omitempty"`
	Terraform            *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform                                 `json:"terraform,omitempty"`
	AwsSam               *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam                                    `json:"awsSam,omitempty"`
	GcpCloudRun          *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun                               `json:"gcpCloudRun,omitempty"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfiguration.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetId() uuid.UUID {
	return v.Id
}

// GetDefaultWorkflowSteps returns DeployConfigurationDetailConfigurationDeploymentConfiguration.DefaultWorkflowSteps, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetDefaultWorkflowSteps() []BlueprintDriverWorkflowStepAction {
	return v.DefaultWorkflowSteps
}

// GetRequirePlanApproval returns DeployConfigurationDetailConfigurationDeploymentConfiguration.RequirePlanApproval, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetRequirePlanApproval() *bool {
	return v.RequirePlanApproval
}

// GetVariables returns DeployConfigurationDetailConfigurationDeploymentConfiguration.Variables, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetVariables() []DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable {
	return v.Variables
}

// GetKubernetes returns DeployConfigurationDetailConfigurationDeploymentConfiguration.Kubernetes, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetKubernetes() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes {
	return v.Kubernetes
}

// GetHelm returns DeployConfigurationDetailConfigurationDeploymentConfiguration.Helm, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetHelm() *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm {
	return v.Helm
}

// GetTerraform returns DeployConfigurationDetailConfigurationDeploymentConfiguration.Terraform, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetTerraform() *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform {
	return v.Terraform
}

// GetAwsSam returns DeployConfigurationDetailConfigurationDeploymentConfiguration.AwsSam, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetAwsSam() *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam {
	return v.AwsSam
}

// GetGcpCloudRun returns DeployConfigurationDetailConfigurationDeploymentConfiguration.GcpCloudRun, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetGcpCloudRun() *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun {
	return v.GcpCloudRun
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam includes the requested fields of the GraphQL type DeploymentConfigurationAwsSam.
type DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam struct {
	Target    *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration       `json:"target,omitempty"`
	Generator *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration `json:"generator,omitempty"`
}

// GetTarget returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam.Target, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam) GetTarget() *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration {
	return v.Target
}

// GetGenerator returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam.Generator, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam) GetGenerator() *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration {
	return v.Generator
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration includes the requested fields of the GraphQL type AwsSamGeneratorConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration struct {
	EnvVars                    []DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar `json:"envVars"`
	RunCommand                 *string                                                                                                                 `json:"runCommand,omitempty"`
	ServerlessMemory           *int                                                                                                                    `json:"serverlessMemory,omitempty"`
	ServerlessArch             *string                                                                                                                 `json:"serverlessArch,omitempty"`
	CustomDomainHost           *string                                                                                                                 `json:"customDomainHost,omitempty"`
	CustomDomainCertificateArn *string                                                                                                                 `json:"customDomainCertificateArn,omitempty"`
	HttpPort                   *string                                                                                                                 `json:"httpPort,omitempty"`
	BuildImage                 *string                                                                                                                 `json:"buildImage,omitempty"`
}

// GetEnvVars returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.EnvVars, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetEnvVars() []DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar {
	return v.EnvVars
}

// GetRunCommand returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.RunCommand, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetRunCommand() *string {
	return v.RunCommand
}

// GetServerlessMemory returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.ServerlessMemory, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetServerlessMemory() *int {
	return v.ServerlessMemory
}

// GetServerlessArch returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.ServerlessArch, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetServerlessArch() *string {
	return v.ServerlessArch
}

// GetCustomDomainHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.CustomDomainHost, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetCustomDomainHost() *string {
	return v.CustomDomainHost
}

// GetCustomDomainCertificateArn returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.CustomDomainCertificateArn, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetCustomDomainCertificateArn() *string {
	return v.CustomDomainCertificateArn
}

// GetHttpPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.HttpPort, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetHttpPort() *string {
	return v.HttpPort
}

// GetBuildImage returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.BuildImage, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetBuildImage() *string {
	return v.BuildImage
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar includes the requested fields of the GraphQL type EnvVar.
type DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar struct {
	Id        string                                                                                                                       `json:"id"`
	Name      string                                                                                                                       `json:"name"`
	Value     string                                                                                                                       `json:"value"`
	Visible   bool                                                                                                                         `json:"visible"`
	Sealed    bool                                                                                                                         `json:"sealed"`
	Source    *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVarSource `json:"source,omitempty"`
	CreatedAt time.Time                                                                                                                    `json:"createdAt"`
	UpdatedAt time.Time                                                                                                                    `json:"updatedAt"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetId() string {
	return v.Id
}

// GetName returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetName() string {
	return v.Name
}

// GetValue returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetValue() string {
	return v.Value
}

// GetVisible returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetVisible() bool {
	return v.Visible
}

// GetSealed returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetSealed() bool {
	return v.Sealed
}

// GetSource returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.Source, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetSource() *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVarSource {
	return v.Source
}

// GetCreatedAt returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.CreatedAt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVarSource includes the requested fields of the GraphQL type EnvVarSource.
type DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVarSource struct {
	Type EnvVarSourceType `json:"type"`
}

// GetType returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVarSource.Type, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVarSource) GetType() EnvVarSourceType {
	return v.Type
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration includes the requested fields of the GraphQL type AwsSamTargetConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration struct {
	AwsAccountId *uuid.UUID `json:"awsAccountId,omitempty"`
	AwsRegion    *string    `json:"awsRegion,omitempty"`
	StackName    *string    `json:"stackName,omitempty"`
}

// GetAwsAccountId returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration.AwsAccountId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration) GetAwsAccountId() *uuid.UUID {
	return v.AwsAccountId
}

// GetAwsRegion returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration.AwsRegion, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration) GetAwsRegion() *string {
	return v.AwsRegion
}

// GetStackName returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration.StackName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration) GetStackName() *string {
	return v.StackName
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun includes the requested fields of the GraphQL type DeploymentConfigurationGcpCloudRun.
type DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun struct {
	Target    *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration       `json:"target,omitempty"`
	Generator *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration `json:"generator,omitempty"`
}

// GetTarget returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun.Target, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun) GetTarget() *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration {
	return v.Target
}

// GetGenerator returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun.Generator, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun) GetGenerator() *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration {
	return v.Generator
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration includes the requested fields of the GraphQL type GcpCloudRunGeneratorConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration struct {
	EnvVars         []DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar `json:"envVars"`
	ContainerMemory *float64                                                                                                                          `json:"containerMemory,omitempty"`
	Name            string                                                                                                                            `json:"name"`
	HttpPort        *string                                                                                                                           `json:"httpPort,omitempty"`
	RunCommand      *string                                                                                                                           `json:"runCommand,omitempty"`
	ContainerCpu    *float64                                                                                                                          `json:"containerCpu,omitempty"`
}

// GetEnvVars returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration.EnvVars, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration) GetEnvVars() []DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar {
	return v.EnvVars
}

// GetContainerMemory returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration.ContainerMemory, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration) GetContainerMemory() *float64 {
	return v.ContainerMemory
}

// GetName returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration) GetName() string {
	return v.Name
}

// GetHttpPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration.HttpPort, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration) GetHttpPort() *string {
	return v.HttpPort
}

// GetRunCommand returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration.RunCommand, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration) GetRunCommand() *string {
	return v.RunCommand
}

// GetContainerCpu returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration.ContainerCpu, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration) GetContainerCpu() *float64 {
	return v.ContainerCpu
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar includes the requested fields of the GraphQL type EnvVar.
type DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar struct {
	Id        string                                                                                                                                 `json:"id"`
	Name      string                                                                                                                                 `json:"name"`
	Value     string                                                                                                                                 `json:"value"`
	Visible   bool                                                                                                                                   `json:"visible"`
	Sealed    bool                                                                                                                                   `json:"sealed"`
	Source    *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVarSource `json:"source,omitempty"`
	CreatedAt time.Time                                                                                                                              `json:"createdAt"`
	UpdatedAt time.Time                                                                                                                              `json:"updatedAt"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetId() string {
	return v.Id
}

// GetName returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetName() string {
	return v.Name
}

// GetValue returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetValue() string {
	return v.Value
}

// GetVisible returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetVisible() bool {
	return v.Visible
}

// GetSealed returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetSealed() bool {
	return v.Sealed
}

// GetSource returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.Source, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetSource() *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVarSource {
	return v.Source
}

// GetCreatedAt returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.CreatedAt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVarSource includes the requested fields of the GraphQL type EnvVarSource.
type DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVarSource struct {
	Type EnvVarSourceType `json:"type"`
}

// GetType returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVarSource.Type, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVarSource) GetType() EnvVarSourceType {
	return v.Type
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration includes the requested fields of the GraphQL type GcpCloudRunTargetConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration struct {
	GcpAccountId *uuid.UUID `json:"gcpAccountId,omitempty"`
	GcpRegion    *string    `json:"gcpRegion,omitempty"`
}

// GetGcpAccountId returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration.GcpAccountId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration) GetGcpAccountId() *uuid.UUID {
	return v.GcpAccountId
}

// GetGcpRegion returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration.GcpRegion, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration) GetGcpRegion() *string {
	return v.GcpRegion
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm includes the requested fields of the GraphQL type DeploymentConfigurationKubernetesHelm.
type DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm struct {
	Blueprint *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfiguration `json:"blueprint,omitempty"`
	Target    *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration       `json:"target,omitempty"`
	Values    *string                                                                                                                                    `json:"values,omitempty"`
}

// GetBlueprint returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm.Blueprint, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm) GetBlueprint() *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfiguration {
	return v.Blueprint
}

// GetTarget returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm.Target, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm) GetTarget() *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration {
	return v.Target
}

// GetValues returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm.Values, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm) GetValues() *string {
	return v.Values
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfiguration includes the requested fields of the GraphQL type BlueprintHelmConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfiguration struct {
	Source *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource `json:"source,omitempty"`
}

// GetSource returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfiguration.Source, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfiguration) GetSource() *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource {
	return v.Source
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource includes the requested fields of the GraphQL type Source.
type DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource struct {
	ProjectSourceDetail `json:"-"`
}

// GetGit returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource.Git, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) GetGit() *ProjectSourceDetailGitGitSource {
	return v.ProjectSourceDetail.Git
}

// GetTerraformModule returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource.TerraformModule, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) GetTerraformModule() *ProjectSourceDetailTerraformModuleTerraformModuleSource {
	return v.ProjectSourceDetail.TerraformModule
}

// GetHelmRepository returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource.HelmRepository, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) GetHelmRepository() *ProjectSourceDetailHelmRepositoryHelmRepositorySource {
	return v.ProjectSourceDetail.HelmRepository
}

// GetContainerRegistry returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) GetContainerRegistry() *ProjectSourceDetailContainerRegistryContainerRegistrySource {
	return v.ProjectSourceDetail.ContainerRegistry
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectSourceDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource struct {
	Git *ProjectSourceDetailGitGitSource `json:"git,omitempty"`

	TerraformModule *ProjectSourceDetailTerraformModuleTerraformModuleSource `json:"terraformModule,omitempty"`

	HelmRepository *ProjectSourceDetailHelmRepositoryHelmRepositorySource `json:"helmRepository,omitempty"`

	ContainerRegistry *ProjectSourceDetailContainerRegistryContainerRegistrySource `json:"containerRegistry,omitempty"`
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) __premarshalJSON() (*__premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource, error) {
	var retval __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource

	retval.Git = v.ProjectSourceDetail.Git
	retval.TerraformModule = v.ProjectSourceDetail.TerraformModule
	retval.HelmRepository = v.ProjectSourceDetail.HelmRepository
	retval.ContainerRegistry = v.ProjectSourceDetail.ContainerRegistry
	return &retval, nil
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration includes the requested fields of the GraphQL type HelmTargetConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration struct {
	ClusterId   uuid.UUID `json:"clusterId"`
	Namespace   *string   `json:"namespace,omitempty"`
	ReleaseName *string   `json:"releaseName,omitempty"`
}

// GetClusterId returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration.ClusterId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration) GetClusterId() uuid.UUID {
	return v.ClusterId
}

// GetNamespace returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration.Namespace, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration) GetNamespace() *string {
	return v.Namespace
}

// GetReleaseName returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration.ReleaseName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration) GetReleaseName() *string {
	return v.ReleaseName
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes includes the requested fields of the GraphQL type DeploymentConfigurationKubernetes.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes struct {
	Blueprint *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration   `json:"blueprint,omitempty"`
	Target    *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration         `json:"target,omitempty"`
	Generator *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration `json:"generator,omitempty"`
}

// GetBlueprint returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes.Blueprint, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes) GetBlueprint() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration {
	return v.Blueprint
}

// GetTarget returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes.Target, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes) GetTarget() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration {
	return v.Target
}

// GetGenerator returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes.Generator, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes) GetGenerator() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration {
	return v.Generator
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration includes the requested fields of the GraphQL type BlueprintManifestConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration struct {
	Source       *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource `json:"source,omitempty"`
	UseKustomize *bool                                                                                                                 `json:"useKustomize,omitempty"`
}

// GetSource returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration.Source, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration) GetSource() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource {
	return v.Source
}

// GetUseKustomize returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration.UseKustomize, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration) GetUseKustomize() *bool {
	return v.UseKustomize
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource includes the requested fields of the GraphQL type Source.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource struct {
	ProjectSourceDetail `json:"-"`
}

// GetGit returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource.Git, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) GetGit() *ProjectSourceDetailGitGitSource {
	return v.ProjectSourceDetail.Git
}

// GetTerraformModule returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource.TerraformModule, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) GetTerraformModule() *ProjectSourceDetailTerraformModuleTerraformModuleSource {
	return v.ProjectSourceDetail.TerraformModule
}

// GetHelmRepository returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource.HelmRepository, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) GetHelmRepository() *ProjectSourceDetailHelmRepositoryHelmRepositorySource {
	return v.ProjectSourceDetail.HelmRepository
}

// GetContainerRegistry returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) GetContainerRegistry() *ProjectSourceDetailContainerRegistryContainerRegistrySource {
	return v.ProjectSourceDetail.ContainerRegistry
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectSourceDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource struct {
	Git *ProjectSourceDetailGitGitSource `json:"git,omitempty"`

	TerraformModule *ProjectSourceDetailTerraformModuleTerraformModuleSource `json:"terraformModule,omitempty"`

	HelmRepository *ProjectSourceDetailHelmRepositoryHelmRepositorySource `json:"helmRepository,omitempty"`

	ContainerRegistry *ProjectSourceDetailContainerRegistryContainerRegistrySource `json:"containerRegistry,omitempty"`
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) __premarshalJSON() (*__premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource, error) {
	var retval __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource

	retval.Git = v.ProjectSourceDetail.Git
	retval.TerraformModule = v.ProjectSourceDetail.TerraformModule
	retval.HelmRepository = v.ProjectSourceDetail.HelmRepository
	retval.ContainerRegistry = v.ProjectSourceDetail.ContainerRegistry
	return &retval, nil
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration includes the requested fields of the GraphQL type KubernetesGeneratorConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration struct {
	ContainerRegistrySource       *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource       `json:"containerRegistrySource,omitempty"`
	AppId                         string                                                                                                                                         `json:"appId"`
	BranchName                    string                                                                                                                                         `json:"branchName"`
	ProductionBranchName          string                                                                                                                                         `json:"productionBranchName"`
	Envs                          []*DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar                  `json:"envs,omitempty"`
	AppGeneratorVersion           string                                                                                                                                         `json:"appGeneratorVersion"`
	CpuRequest                    *string                                                                                                                                        `json:"cpuRequest,omitempty"`
	MemoryRequest                 *string                                                                                                                                        `json:"memoryRequest,omitempty"`
	EphemeralStorage              *string                                                                                                                                        `json:"ephemeralStorage,omitempty"`
	Dedicated                     *bool                                                                                                                                          `json:"dedicated,omitempty"`
	GpuRequest                    *string                                                                                                                                        `json:"gpuRequest,omitempty"`
	GpuType                       *string                                                                                                                                        `json:"gpuType,omitempty"`
	TpuType                       *string                                                                                                                                        `json:"tpuType,omitempty"`
	TpuTfVersion                  *string                                                                                                                                        `json:"tpuTfVersion,omitempty"`
	TpuCores                      *int                                                                                                                                           `json:"tpuCores,omitempty"`
	Replicas                      *int                                                                                                                                           `json:"replicas,omitempty"`
	Autoscaling                   *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData    `json:"autoscaling,omitempty"`
	Ports                         []*DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData               `json:"ports,omitempty"`
	StaticIp                      *bool                                                                                                                                          `json:"staticIp,omitempty"`
	HostNetwork                   *bool                                                                                                                                          `json:"hostNetwork,omitempty"`
	Endpoint                      *string                                                                                                                                        `json:"endpoint,omitempty"`
	DefaultIngressDomain          *string                                                                                                                                        `json:"defaultIngressDomain,omitempty"`
	Volumes                       []*DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec           `json:"volumes,omitempty"`
	SecretMounts                  []*DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData `json:"secretMounts,omitempty"`
	DeployStrategy                *DeployStrategy                                                                                                                                `json:"deployStrategy,omitempty"`
	PreStopSleep                  *int                                                                                                                                           `json:"preStopSleep,omitempty"`
	TerminationGracePeriodSeconds *int                                                                                                                                           `json:"terminationGracePeriodSeconds,omitempty"`
	StartupProbe                  *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData         `json:"startupProbe,omitempty"`
	LivenessProbe                 *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData        `json:"livenessProbe,omitempty"`
	ReadinessProbe                *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData       `json:"readinessProbe,omitempty"`
	LogShipperType                *LogShipperType                                                                                                                                `json:"logShipperType,omitempty"`
	BetterstackToken              *string                                                                                                                                        `json:"betterstackToken,omitempty"`
	DatadogApmEnabled             *bool                                                                                                                                          `json:"datadogApmEnabled,omitempty"`
	DatadogHost                   *string                                                                                                                                        `json:"datadogHost,omitempty"`
	DatadogKey                    *string                                                                                                                                        `json:"datadogKey,omitempty"`
	LogDnaKey                     *string                                                                                                                                        `json:"logDnaKey,omitempty"`
	LogzToken                     *string                                                                                                                                        `json:"logzToken,omitempty"`
	LogzUrl                       *string                                                                                                                                        `json:"logzUrl,omitempty"`
	SyslogConfig                  *string                                                                                                                                        `json:"syslogConfig,omitempty"`
	DockerEntrypoint              []*string                                                                                                                                      `json:"dockerEntrypoint,omitempty"`
	DockerCommand                 []*string                                                                                                                                      `json:"dockerCommand,omitempty"`
	AwsIamRole                    *string                                                                                                                                        `json:"awsIamRole,omitempty"`
	GcpServiceAccount             *string                                                                                                                                        `json:"gcpServiceAccount,omitempty"`
	ServiceAccountName            *string                                                                                                                                        `json:"serviceAccountName,omitempty"`
	Annotations                   *map[string]string                                                                                                                             `json:"annotations,omitempty"`
	ServiceAnnotations            *map[string]string                                                                                                                             `json:"serviceAnnotations,omitempty"`
	NodeSelector                  *map[string]string                                                                                                                             `json:"nodeSelector,omitempty"`
	PodSpecPatch                  *string                                                                                                                                        `json:"podSpecPatch,omitempty"`
	LegacyRepo                    *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo                    `json:"legacyRepo,omitempty"`
}

// GetContainerRegistrySource returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.ContainerRegistrySource, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetContainerRegistrySource() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource {
	return v.ContainerRegistrySource
}

// GetAppId returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.AppId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetAppId() string {
	return v.AppId
}

// GetBranchName returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.BranchName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetBranchName() string {
	return v.BranchName
}

// GetProductionBranchName returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.ProductionBranchName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetProductionBranchName() string {
	return v.ProductionBranchName
}

// GetEnvs returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Envs, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetEnvs() []*DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar {
	return v.Envs
}

// GetAppGeneratorVersion returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.AppGeneratorVersion, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetAppGeneratorVersion() string {
	return v.AppGeneratorVersion
}

// GetCpuRequest returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.CpuRequest, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetCpuRequest() *string {
	return v.CpuRequest
}

// GetMemoryRequest returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.MemoryRequest, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetMemoryRequest() *string {
	return v.MemoryRequest
}

// GetEphemeralStorage returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetEphemeralStorage() *string {
	return v.EphemeralStorage
}

// GetDedicated returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Dedicated, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDedicated() *bool {
	return v.Dedicated
}

// GetGpuRequest returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.GpuRequest, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetGpuRequest() *string {
	return v.GpuRequest
}

// GetGpuType returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.GpuType, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetGpuType() *string {
	return v.GpuType
}

// GetTpuType returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.TpuType, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetTpuType() *string {
	return v.TpuType
}

// GetTpuTfVersion returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.TpuTfVersion, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetTpuTfVersion() *string {
	return v.TpuTfVersion
}

// GetTpuCores returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.TpuCores, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetTpuCores() *int {
	return v.TpuCores
}

// GetReplicas returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Replicas, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetReplicas() *int {
	return v.Replicas
}

// GetAutoscaling returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Autoscaling, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetAutoscaling() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData {
	return v.Autoscaling
}

// GetPorts returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Ports, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetPorts() []*DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData {
	return v.Ports
}

// GetStaticIp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.StaticIp, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetStaticIp() *bool {
	return v.StaticIp
}

// GetHostNetwork returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.HostNetwork, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetHostNetwork() *bool {
	return v.HostNetwork
}

// GetEndpoint returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Endpoint, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetEndpoint() *string {
	return v.Endpoint
}

// GetDefaultIngressDomain returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDefaultIngressDomain() *string {
	return v.DefaultIngressDomain
}

// GetVolumes returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Volumes, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetVolumes() []*DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec {
	return v.Volumes
}

// GetSecretMounts returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.SecretMounts, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetSecretMounts() []*DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData {
	return v.SecretMounts
}

// GetDeployStrategy returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DeployStrategy, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDeployStrategy() *DeployStrategy {
	return v.DeployStrategy
}

// GetPreStopSleep returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.PreStopSleep, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetPreStopSleep() *int {
	return v.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetTerminationGracePeriodSeconds() *int {
	return v.TerminationGracePeriodSeconds
}

// GetStartupProbe returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.StartupProbe, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetStartupProbe() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData {
	return v.StartupProbe
}

// GetLivenessProbe returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.LivenessProbe, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetLivenessProbe() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData {
	return v.LivenessProbe
}

// GetReadinessProbe returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetReadinessProbe() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData {
	return v.ReadinessProbe
}

// GetLogShipperType returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.LogShipperType, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetLogShipperType() *LogShipperType {
	return v.LogShipperType
}

// GetBetterstackToken returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.BetterstackToken, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetBetterstackToken() *string {
	return v.BetterstackToken
}

// GetDatadogApmEnabled returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDatadogApmEnabled() *bool {
	return v.DatadogApmEnabled
}

// GetDatadogHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DatadogHost, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDatadogHost() *string {
	return v.DatadogHost
}

// GetDatadogKey returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DatadogKey, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDatadogKey() *string {
	return v.DatadogKey
}

// GetLogDnaKey returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.LogDnaKey, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetLogDnaKey() *string {
	return v.LogDnaKey
}

// GetLogzToken returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.LogzToken, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetLogzToken() *string {
	return v.LogzToken
}

// GetLogzUrl returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.LogzUrl, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetLogzUrl() *string {
	return v.LogzUrl
}

// GetSyslogConfig returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.SyslogConfig, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetSyslogConfig() *string {
	return v.SyslogConfig
}

// GetDockerEntrypoint returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DockerEntrypoint, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDockerEntrypoint() []*string {
	return v.DockerEntrypoint
}

// GetDockerCommand returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DockerCommand, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDockerCommand() []*string {
	return v.DockerCommand
}

// GetAwsIamRole returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.AwsIamRole, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetAwsIamRole() *string {
	return v.AwsIamRole
}

// GetGcpServiceAccount returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetGcpServiceAccount() *string {
	return v.GcpServiceAccount
}

// GetServiceAccountName returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.ServiceAccountName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetServiceAccountName() *string {
	return v.ServiceAccountName
}

// GetAnnotations returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Annotations, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetAnnotations() *map[string]string {
	return v.Annotations
}

// GetServiceAnnotations returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.ServiceAnnotations, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetServiceAnnotations() *map[string]string {
	return v.ServiceAnnotations
}

// GetNodeSelector returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.NodeSelector, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetNodeSelector() *map[string]string {
	return v.NodeSelector
}

// GetPodSpecPatch returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.PodSpecPatch, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetPodSpecPatch() *string {
	return v.PodSpecPatch
}

// GetLegacyRepo returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.LegacyRepo, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetLegacyRepo() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo {
	return v.LegacyRepo
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData includes the requested fields of the GraphQL type AutoscalingData.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData struct {
	MinReplicas          int                                                                                                                                                                     `json:"minReplicas"`
	MaxReplicas          int                                                                                                                                                                     `json:"maxReplicas"`
	CoolDownPeriod       int                                                                                                                                                                     `json:"coolDownPeriod"`
	Spec                 string                                                                                                                                                                  `json:"spec"`
	Triggers             []*DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger `json:"triggers,omitempty"`
	KedaScaledObjectSpec *string                                                                                                                                                                 `json:"kedaScaledObjectSpec,omitempty"`
}

// GetMinReplicas returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData.MinReplicas, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData) GetMinReplicas() int {
	return v.MinReplicas
}

// GetMaxReplicas returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData.MaxReplicas, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData) GetMaxReplicas() int {
	return v.MaxReplicas
}

// GetCoolDownPeriod returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData.CoolDownPeriod, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData) GetCoolDownPeriod() int {
	return v.CoolDownPeriod
}

// GetSpec returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData.Spec, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData) GetSpec() string {
	return v.Spec
}

// GetTriggers returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData.Triggers, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData) GetTriggers() []*DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger {
	return v.Triggers
}

// GetKedaScaledObjectSpec returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData.KedaScaledObjectSpec, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData) GetKedaScaledObjectSpec() *string {
	return v.KedaScaledObjectSpec
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger includes the requested fields of the GraphQL type AutoscalingTrigger.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger struct {
	Type string `json:"type"`
	Spec string `json:"spec"`
}

// GetType returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger.Type, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger) GetType() string {
	return v.Type
}

// GetSpec returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger.Spec, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger) GetSpec() string {
	return v.Spec
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource includes the requested fields of the GraphQL type ContainerRegistrySource.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource struct {
	RegistryId  *uuid.UUID `json:"registryId,omitempty"`
	RegistryUrl *string    `json:"registryUrl,omitempty"`
	Repository  string     `json:"repository"`
	Tag         *string    `json:"tag,omitempty"`
	Digest      *string    `json:"digest,omitempty"`
}

// GetRegistryId returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource.RegistryId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource) GetRegistryId() *uuid.UUID {
	return v.RegistryId
}

// GetRegistryUrl returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource.RegistryUrl, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource) GetRegistryUrl() *string {
	return v.RegistryUrl
}

// GetRepository returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource.Repository, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource) GetRepository() string {
	return v.Repository
}

// GetTag returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource.Tag, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource) GetTag() *string {
	return v.Tag
}

// GetDigest returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource.Digest, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource) GetDigest() *string {
	return v.Digest
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar struct {
	Id        string                                                                                                                            `json:"id"`
	Name      string                                                                                                                            `json:"name"`
	Value     string                                                                                                                            `json:"value"`
	Visible   bool                                                                                                                              `json:"visible"`
	Sealed    bool                                                                                                                              `json:"sealed"`
	Source    *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVarSource `json:"source,omitempty"`
	CreatedAt time.Time                                                                                                                         `json:"createdAt"`
	UpdatedAt time.Time                                                                                                                         `json:"updatedAt"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetId() string {
	return v.Id
}

// GetName returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetName() string {
	return v.Name
}

// GetValue returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetValue() string {
	return v.Value
}

// GetVisible returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetVisible() bool {
	return v.Visible
}

// GetSealed returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetSealed() bool {
	return v.Sealed
}

// GetSource returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.Source, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetSource() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVarSource {
	return v.Source
}

// GetCreatedAt returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.CreatedAt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVarSource includes the requested fields of the GraphQL type EnvVarSource.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVarSource struct {
	Type EnvVarSourceType `json:"type"`
}

// GetType returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVarSource.Type, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVarSource) GetType() EnvVarSourceType {
	return v.Type
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo includes the requested fields of the GraphQL type LegacyRepo.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo struct {
	Id    string `json:"id"`
	Name  string `json:"name"`
	AppId string `json:"appId"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo) GetId() string {
	return v.Id
}

// GetName returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo) GetName() string {
	return v.Name
}

// GetAppId returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo.AppId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo) GetAppId() string {
	return v.AppId
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData includes the requested fields of the GraphQL type ProbeData.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData struct {
	Command             *string                                                                                                                                              `json:"command,omitempty"`
	Http                *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe `json:"http,omitempty"`
	Tcp                 *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe   `json:"tcp,omitempty"`
	InitialDelaySeconds *int                                                                                                                                                 `json:"initialDelaySeconds,omitempty"`
	PeriodSeconds       *int                                                                                                                                                 `json:"periodSeconds,omitempty"`
	SuccessThreshold    *int                                                                                                                                                 `json:"successThreshold,omitempty"`
	FailureThreshold    *int                                                                                                                                                 `json:"failureThreshold,omitempty"`
	TimeoutSeconds      *int                                                                                                                                                 `json:"timeoutSeconds,omitempty"`
}

// GetCommand returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.Command, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetCommand() *string {
	return v.Command
}

// GetHttp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.Http, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetHttp() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe {
	return v.Http
}

// GetTcp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.Tcp, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetTcp() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe {
	return v.Tcp
}

// GetInitialDelaySeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetInitialDelaySeconds() *int {
	return v.InitialDelaySeconds
}

// GetPeriodSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetPeriodSeconds() *int {
	return v.PeriodSeconds
}

// GetSuccessThreshold returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetSuccessThreshold() *int {
	return v.SuccessThreshold
}

// GetFailureThreshold returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.FailureThreshold, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetFailureThreshold() *int {
	return v.FailureThreshold
}

// GetTimeoutSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetTimeoutSeconds() *int {
	return v.TimeoutSeconds
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe includes the requested fields of the GraphQL type HTTPProbe.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Path string `json:"path"`
}

// GetHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe.Host, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe) GetHost() string {
	return v.Host
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe) GetPort() string {
	return v.Port
}

// GetPath returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe.Path, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe) GetPath() string {
	return v.Path
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe includes the requested fields of the GraphQL type TCPProbe.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe struct {
	Host string `json:"host"`
	Port string `json:"port"`
}

// GetHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe.Host, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe) GetHost() string {
	return v.Host
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe) GetPort() string {
	return v.Port
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData includes the requested fields of the GraphQL type PortData.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData struct {
	Port         string  `json:"port"`
	Https        *bool   `json:"https,omitempty"`
	Grpc         *bool   `json:"grpc,omitempty"`
	Public       *bool   `json:"public,omitempty"`
	Protocol     *string `json:"protocol,omitempty"`
	LoadBalancer *bool   `json:"loadBalancer,omitempty"`
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData) GetPort() string {
	return v.Port
}

// GetHttps returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData.Https, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData) GetHttps() *bool {
	return v.Https
}

// GetGrpc returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData.Grpc, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData) GetGrpc() *bool {
	return v.Grpc
}

// GetPublic returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData.Public, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData) GetPublic() *bool {
	return v.Public
}

// GetProtocol returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData.Protocol, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData) GetProtocol() *string {
	return v.Protocol
}

// GetLoadBalancer returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData.LoadBalancer, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData) GetLoadBalancer() *bool {
	return v.LoadBalancer
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData includes the requested fields of the GraphQL type ProbeData.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData struct {
	Command             *string                                                                                                                                               `json:"command,omitempty"`
	Http                *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe `json:"http,omitempty"`
	Tcp                 *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe   `json:"tcp,omitempty"`
	InitialDelaySeconds *int                                                                                                                                                  `json:"initialDelaySeconds,omitempty"`
	PeriodSeconds       *int                                                                                                                                                  `json:"periodSeconds,omitempty"`
	SuccessThreshold    *int                                                                                                                                                  `json:"successThreshold,omitempty"`
	FailureThreshold    *int                                                                                                                                                  `json:"failureThreshold,omitempty"`
	TimeoutSeconds      *int                                                                                                                                                  `json:"timeoutSeconds,omitempty"`
}

// GetCommand returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.Command, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetCommand() *string {
	return v.Command
}

// GetHttp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.Http, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetHttp() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe {
	return v.Http
}

// GetTcp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.Tcp, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetTcp() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe {
	return v.Tcp
}

// GetInitialDelaySeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetInitialDelaySeconds() *int {
	return v.InitialDelaySeconds
}

// GetPeriodSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetPeriodSeconds() *int {
	return v.PeriodSeconds
}

// GetSuccessThreshold returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetSuccessThreshold() *int {
	return v.SuccessThreshold
}

// GetFailureThreshold returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.FailureThreshold, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetFailureThreshold() *int {
	return v.FailureThreshold
}

// GetTimeoutSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetTimeoutSeconds() *int {
	return v.TimeoutSeconds
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe includes the requested fields of the GraphQL type HTTPProbe.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Path string `json:"path"`
}

// GetHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe.Host, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe) GetHost() string {
	return v.Host
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe) GetPort() string {
	return v.Port
}

// GetPath returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe.Path, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe) GetPath() string {
	return v.Path
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe includes the requested fields of the GraphQL type TCPProbe.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe struct {
	Host string `json:"host"`
	Port string `json:"port"`
}

// GetHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe.Host, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe) GetHost() string {
	return v.Host
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe) GetPort() string {
	return v.Port
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData includes the requested fields of the GraphQL type SecretMountData.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData struct {
	SecretName string `json:"secretName"`
	MountPath  string `json:"mountPath"`
	ReadOnly   *bool  `json:"readOnly,omitempty"`
}

// GetSecretName returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData.SecretName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData) GetSecretName() string {
	return v.SecretName
}

// GetMountPath returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData.MountPath, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData) GetMountPath() string {
	return v.MountPath
}

// GetReadOnly returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData.ReadOnly, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData) GetReadOnly() *bool {
	return v.ReadOnly
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData includes the requested fields of the GraphQL type ProbeData.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData struct {
	Command             *string                                                                                                                                             `json:"command,omitempty"`
	Http                *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe `json:"http,omitempty"`
	Tcp                 *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe   `json:"tcp,omitempty"`
	InitialDelaySeconds *int                                                                                                                                                `json:"initialDelaySeconds,omitempty"`
	PeriodSeconds       *int                                                                                                                                                `json:"periodSeconds,omitempty"`
	SuccessThreshold    *int                                                                                                                                                `json:"successThreshold,omitempty"`
	FailureThreshold    *int                                                                                                                                                `json:"failureThreshold,omitempty"`
	TimeoutSeconds      *int                                                                                                                                                `json:"timeoutSeconds,omitempty"`
}

// GetCommand returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.Command, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetCommand() *string {
	return v.Command
}

// GetHttp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.Http, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetHttp() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe {
	return v.Http
}

// GetTcp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.Tcp, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetTcp() *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe {
	return v.Tcp
}

// GetInitialDelaySeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetInitialDelaySeconds() *int {
	return v.InitialDelaySeconds
}

// GetPeriodSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetPeriodSeconds() *int {
	return v.PeriodSeconds
}

// GetSuccessThreshold returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetSuccessThreshold() *int {
	return v.SuccessThreshold
}

// GetFailureThreshold returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.FailureThreshold, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetFailureThreshold() *int {
	return v.FailureThreshold
}

// GetTimeoutSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetTimeoutSeconds() *int {
	return v.TimeoutSeconds
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe includes the requested fields of the GraphQL type HTTPProbe.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Path string `json:"path"`
}

// GetHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe.Host, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe) GetHost() string {
	return v.Host
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe) GetPort() string {
	return v.Port
}

// GetPath returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe.Path, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe) GetPath() string {
	return v.Path
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe includes the requested fields of the GraphQL type TCPProbe.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe struct {
	Host string `json:"host"`
	Port string `json:"port"`
}

// GetHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe.Host, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe) GetHost() string {
	return v.Host
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe) GetPort() string {
	return v.Port
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec includes the requested fields of the GraphQL type VolumeSpec.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec struct {
	Size      int    `json:"size"`
	MountPath string `json:"mountPath"`
}

// GetSize returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec.Size, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec) GetSize() int {
	return v.Size
}

// GetMountPath returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec.MountPath, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec) GetMountPath() string {
	return v.MountPath
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration includes the requested fields of the GraphQL type ManifestTargetConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration struct {
	ClusterId uuid.UUID `json:"clusterId"`
	Namespace *string   `json:"namespace,omitempty"`
}

// GetClusterId returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration.ClusterId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration) GetClusterId() uuid.UUID {
	return v.ClusterId
}

// GetNamespace returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration.Namespace, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration) GetNamespace() *string {
	return v.Namespace
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform includes the requested fields of the GraphQL type DeploymentConfigurationTerraform.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform struct {
	Blueprint *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration `json:"blueprint,omitempty"`
	Target    *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration       `json:"target,omitempty"`
}

// GetBlueprint returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform.Blueprint, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform) GetBlueprint() *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration {
	return v.Blueprint
}

// GetTarget returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform.Target, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform) GetTarget() *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration {
	return v.Target
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration includes the requested fields of the GraphQL type BlueprintTerraformConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration struct {
	Source              *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource                                          `json:"source,omitempty"`
	OutputConfiguration *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration `json:"outputConfiguration,omitempty"`
	TerraformVersion    *string                                                                                                                                                        `json:"terraformVersion,omitempty"`
}

// GetSource returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration.Source, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration) GetSource() *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource {
	return v.Source
}

// GetOutputConfiguration returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration.OutputConfiguration, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration) GetOutputConfiguration() *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration {
	return v.OutputConfiguration
}

// GetTerraformVersion returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration.TerraformVersion, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration) GetTerraformVersion() *string {
	return v.TerraformVersion
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration includes the requested fields of the GraphQL type TerraformOutputConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration struct {
	// Configuration for the automatic output handler. This configuration does not affect output defined via 'customization'.
	Automatic *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration `json:"automatic,omitempty"`
	// A JSON object using Terraform configuration syntax
	// (https://developer.hashicorp.com/terraform/language/syntax/json), constituting
	// a valid "output" block.
	//
	// Example:
	// ```
	// {
	// "output": {
	// "example": {
	// "value": "${aws_instance.example}"
	// }
	// }
	// }
	// ```
	//
	// This must include the "output" key at the top level.
	//
	// To reference module values, use the expression mapping syntax: https://developer.hashicorp.com/terraform/language/syntax/json#expression-mapping
	Customization *string `json:"customization,omitempty"`
}

// GetAutomatic returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration.Automatic, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration) GetAutomatic() *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration {
	return v.Automatic
}

// GetCustomization returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration.Customization, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration) GetCustomization() *string {
	return v.Customization
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration includes the requested fields of the GraphQL type TerraformAutomaticOutputConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration struct {
	// Disable the 'automatic output' handler, which produces a single map named 'outputs' containing all module outputs.
	Disabled *bool `json:"disabled,omitempty"`
	// The keys of any module outputs that should be excluded from the automatic output value. Ignored when 'disabled' is true.
	Excluded []string `json:"excluded"`
	// Mark the automatic output as sensitive. This MUST be 'true' when any sensitive
	// module output is not specified 'excluded' *and* 'disabled' is false.
	Sensitive *bool `json:"sensitive,omitempty"`
}

// GetDisabled returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration.Disabled, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration) GetDisabled() *bool {
	return v.Disabled
}

// GetExcluded returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration.Excluded, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration) GetExcluded() []string {
	return v.Excluded
}

// GetSensitive returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration.Sensitive, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration) GetSensitive() *bool {
	return v.Sensitive
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource includes the requested fields of the GraphQL type Source.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource struct {
	ProjectSourceDetail `json:"-"`
}

// GetGit returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource.Git, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) GetGit() *ProjectSourceDetailGitGitSource {
	return v.ProjectSourceDetail.Git
}

// GetTerraformModule returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource.TerraformModule, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) GetTerraformModule() *ProjectSourceDetailTerraformModuleTerraformModuleSource {
	return v.ProjectSourceDetail.TerraformModule
}

// GetHelmRepository returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource.HelmRepository, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) GetHelmRepository() *ProjectSourceDetailHelmRepositoryHelmRepositorySource {
	return v.ProjectSourceDetail.HelmRepository
}

// GetContainerRegistry returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) GetContainerRegistry() *ProjectSourceDetailContainerRegistryContainerRegistrySource {
	return v.ProjectSourceDetail.ContainerRegistry
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectSourceDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource struct {
	Git *ProjectSourceDetailGitGitSource `json:"git,omitempty"`

	TerraformModule *ProjectSourceDetailTerraformModuleTerraformModuleSource `json:"terraformModule,omitempty"`

	HelmRepository *ProjectSourceDetailHelmRepositoryHelmRepositorySource `json:"helmRepository,omitempty"`

	ContainerRegistry *ProjectSourceDetailContainerRegistryContainerRegistrySource `json:"containerRegistry,omitempty"`
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) __premarshalJSON() (*__premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource, error) {
	var retval __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource

	retval.Git = v.ProjectSourceDetail.Git
	retval.TerraformModule = v.ProjectSourceDetail.TerraformModule
	retval.HelmRepository = v.ProjectSourceDetail.HelmRepository
	retval.ContainerRegistry = v.ProjectSourceDetail.ContainerRegistry
	return &retval, nil
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration includes the requested fields of the GraphQL type TerraformTargetConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration struct {
	ModuleName   *string                                                                                                                                    `json:"moduleName,omitempty"`
	StateBackend *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend `json:"stateBackend,omitempty"`
	Provider     *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider         `json:"provider,omitempty"`
}

// GetModuleName returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration.ModuleName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration) GetModuleName() *string {
	return v.ModuleName
}

// GetStateBackend returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration.StateBackend, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration) GetStateBackend() *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend {
	return v.StateBackend
}

// GetProvider returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration.Provider, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration) GetProvider() *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider {
	return v.Provider
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider includes the requested fields of the GraphQL type TerraformProvider.
// The GraphQL type's documentation follows.
//
// The Zeet-connected cloud account which will be mapped to a terraform provider
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider struct {
	AwsAccount *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderAwsAccountAWSAccount `json:"awsAccount,omitempty"`
	GcpAccount *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderGcpAccountGCPAccount `json:"gcpAccount,omitempty"`
	DoAccount  *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderDoAccountDOAccount   `json:"doAccount,omitempty"`
	// Region name, when applicable
	Region *string `json:"region,omitempty"`
}

// GetAwsAccount returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider.AwsAccount, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider) GetAwsAccount() *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderAwsAccountAWSAccount {
	return v.AwsAccount
}

// GetGcpAccount returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider.GcpAccount, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider) GetGcpAccount() *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderGcpAccountGCPAccount {
	return v.GcpAccount
}

// GetDoAccount returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider.DoAccount, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider) GetDoAccount() *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderDoAccountDOAccount {
	return v.DoAccount
}

// GetRegion returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider.Region, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider) GetRegion() *string {
	return v.Region
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderAwsAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderAwsAccountAWSAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderAwsAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderAwsAccountAWSAccount) GetId() uuid.UUID {
	return v.Id
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderDoAccountDOAccount includes the requested fields of the GraphQL type DOAccount.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderDoAccountDOAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderDoAccountDOAccount.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderDoAccountDOAccount) GetId() uuid.UUID {
	return v.Id
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderGcpAccountGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderGcpAccountGCPAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderGcpAccountGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderGcpAccountGCPAccount) GetId() uuid.UUID {
	return v.Id
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend includes the requested fields of the GraphQL type TerraformStateBackend.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend struct {
	S3Bucket  *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration   `json:"s3Bucket,omitempty"`
	GcsBucket *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration `json:"gcsBucket,omitempty"`
}

// GetS3Bucket returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend.S3Bucket, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend) GetS3Bucket() *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration {
	return v.S3Bucket
}

// GetGcsBucket returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend.GcsBucket, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend) GetGcsBucket() *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration {
	return v.GcsBucket
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration includes the requested fields of the GraphQL type GCSBucketConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration struct {
	GcpAccountId uuid.UUID `json:"gcpAccountId"`
	Location     string    `json:"location"`
	BucketName   string    `json:"bucketName"`
	Prefix       *string   `json:"prefix,omitempty"`
}

// GetGcpAccountId returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration.GcpAccountId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration) GetGcpAccountId() uuid.UUID {
	return v.GcpAccountId
}

// GetLocation returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration.Location, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration) GetLocation() string {
	return v.Location
}

// GetBucketName returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration.BucketName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration) GetBucketName() string {
	return v.BucketName
}

// GetPrefix returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration.Prefix, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration) GetPrefix() *string {
	return v.Prefix
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration includes the requested fields of the GraphQL type S3BucketConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration struct {
	AwsAccountId uuid.UUID `json:"awsAccountId"`
	Region       string    `json:"region"`
	BucketName   string    `json:"bucketName"`
	Key          *string   `json:"key,omitempty"`
}

// GetAwsAccountId returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration.AwsAccountId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration) GetAwsAccountId() uuid.UUID {
	return v.AwsAccountId
}

// GetRegion returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration.Region, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration) GetRegion() string {
	return v.Region
}

// GetBucketName returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration.BucketName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration) GetBucketName() string {
	return v.BucketName
}

// GetKey returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration.Key, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration) GetKey() *string {
	return v.Key
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable includes the requested fields of the GraphQL type DeployVariable.
type DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable struct {
	DeployVariableDetail `json:"-"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetId() uuid.UUID {
	return v.DeployVariableDetail.Id
}

// GetSpecId returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.SpecId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetSpecId() *uuid.UUID {
	return v.DeployVariableDetail.SpecId
}

// GetName returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetName() string {
	return v.DeployVariableDetail.Name
}

// GetValue returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.Value, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetValue() string {
	return v.DeployVariableDetail.Value
}

// GetValueString returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.ValueString, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetValueString() *string {
	return v.DeployVariableDetail.ValueString
}

// GetValueBoolean returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.ValueBoolean, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetValueBoolean() *bool {
	return v.DeployVariableDetail.ValueBoolean
}

// GetValueInt returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.ValueInt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetValueInt() *int {
	return v.DeployVariableDetail.ValueInt
}

// GetValueFloat returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.ValueFloat, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetValueFloat() *float64 {
	return v.DeployVariableDetail.ValueFloat
}

// GetValueJson returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.ValueJson, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetValueJson() *string {
	return v.DeployVariableDetail.ValueJson
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable
		graphql.NoUnmarshalJSON
	}
	firstPass.DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeployVariableDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable struct {
	Id uuid.UUID `json:"id"`

	SpecId *uuid.UUID `json:"specId,omitempty"`

	Name string `json:"name"`

	Value string `json:"value"`

	ValueString *string `json:"valueString,omitempty"`

	ValueBoolean *bool `json:"valueBoolean,omitempty"`

	ValueInt *int `json:"valueInt,omitempty"`

	ValueFloat *float64 `json:"valueFloat,omitempty"`

	ValueJson *string `json:"valueJson,omitempty"`
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) __premarshalJSON() (*__premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable, error) {
	var retval __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable

	retval.Id = v.DeployVariableDetail.Id
	retval.SpecId = v.DeployVariableDetail.SpecId
	retval.Name = v.DeployVariableDetail.Name
	retval.Value = v.DeployVariableDetail.Value
	retval.ValueString = v.DeployVariableDetail.ValueString
	retval.ValueBoolean = v.DeployVariableDetail.ValueBoolean
	retval.ValueInt = v.DeployVariableDetail.ValueInt
	retval.ValueFloat = v.DeployVariableDetail.ValueFloat
	retval.ValueJson = v.DeployVariableDetail.ValueJson
	return &retval, nil
}

type DeployStrategy string

const (
	DeployStrategyRestart DeployStrategy = "RESTART"
	DeployStrategyRolling DeployStrategy = "ROLLING"
)

// DeployVariableDetail includes the GraphQL fields of DeployVariable requested by the fragment DeployVariableDetail.
type DeployVariableDetail struct {
	Id           uuid.UUID  `json:"id"`
	SpecId       *uuid.UUID `json:"specId,omitempty"`
	Name         string     `json:"name"`
	Value        string     `json:"value"`
	ValueString  *string    `json:"valueString,omitempty"`
	ValueBoolean *bool      `json:"valueBoolean,omitempty"`
	ValueInt     *int       `json:"valueInt,omitempty"`
	ValueFloat   *float64   `json:"valueFloat,omitempty"`
	ValueJson    *string    `json:"valueJson,omitempty"`
}

// GetId returns DeployVariableDetail.Id, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetId() uuid.UUID { return v.Id }

// GetSpecId returns DeployVariableDetail.SpecId, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetSpecId() *uuid.UUID { return v.SpecId }

// GetName returns DeployVariableDetail.Name, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetName() string { return v.Name }

// GetValue returns DeployVariableDetail.Value, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetValue() string { return v.Value }

// GetValueString returns DeployVariableDetail.ValueString, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetValueString() *string { return v.ValueString }

// GetValueBoolean returns DeployVariableDetail.ValueBoolean, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetValueBoolean() *bool { return v.ValueBoolean }

// GetValueInt returns DeployVariableDetail.ValueInt, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetValueInt() *int { return v.ValueInt }

// GetValueFloat returns DeployVariableDetail.ValueFloat, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetValueFloat() *float64 { return v.ValueFloat }

// GetValueJson returns DeployVariableDetail.ValueJson, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetValueJson() *string { return v.ValueJson }

type DeploymentConfigurationAwsSamInput struct {
	Target    *AwsSamTargetConfigurationInput    `json:"target,omitempty"`
	Generator *AwsSamGeneratorConfigurationInput `json:"generator,omitempty"`
}

// GetTarget returns DeploymentConfigurationAwsSamInput.Target, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationAwsSamInput) GetTarget() *AwsSamTargetConfigurationInput {
	return v.Target
}

// GetGenerator returns DeploymentConfigurationAwsSamInput.Generator, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationAwsSamInput) GetGenerator() *AwsSamGeneratorConfigurationInput {
	return v.Generator
}

type DeploymentConfigurationGcpCloudRunInput struct {
	Target    *GcpCloudRunTargetConfigurationInput    `json:"target,omitempty"`
	Generator *GcpCloudRunGeneratorConfigurationInput `json:"generator,omitempty"`
}

// GetTarget returns DeploymentConfigurationGcpCloudRunInput.Target, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationGcpCloudRunInput) GetTarget() *GcpCloudRunTargetConfigurationInput {
	return v.Target
}

// GetGenerator returns DeploymentConfigurationGcpCloudRunInput.Generator, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationGcpCloudRunInput) GetGenerator() *GcpCloudRunGeneratorConfigurationInput {
	return v.Generator
}

type DeploymentConfigurationInput struct {
	DefaultWorkflowSteps []BlueprintDriverWorkflowStepAction         `json:"defaultWorkflowSteps"`
	RequirePlanApproval  *bool                                       `json:"requirePlanApproval,omitempty"`
	Variables            []BlueprintVariableInput                    `json:"variables"`
	Kubernetes           *DeploymentConfigurationKubernetesInput     `json:"kubernetes,omitempty"`
	Helm                 *DeploymentConfigurationKubernetesHelmInput `json:"helm,omitempty"`
	Terraform            *DeploymentConfigurationTerraformInput      `json:"terraform,omitempty"`
	AwsSam               *DeploymentConfigurationAwsSamInput         `json:"awsSam,omitempty"`
	GcpCloudRun          *DeploymentConfigurationGcpCloudRunInput    `json:"gcpCloudRun,omitempty"`
}

// GetDefaultWorkflowSteps returns DeploymentConfigurationInput.DefaultWorkflowSteps, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetDefaultWorkflowSteps() []BlueprintDriverWorkflowStepAction {
	return v.DefaultWorkflowSteps
}

// GetRequirePlanApproval returns DeploymentConfigurationInput.RequirePlanApproval, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetRequirePlanApproval() *bool { return v.RequirePlanApproval }

// GetVariables returns DeploymentConfigurationInput.Variables, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetVariables() []BlueprintVariableInput { return v.Variables }

// GetKubernetes returns DeploymentConfigurationInput.Kubernetes, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetKubernetes() *DeploymentConfigurationKubernetesInput {
	return v.Kubernetes
}

// GetHelm returns DeploymentConfigurationInput.Helm, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetHelm() *DeploymentConfigurationKubernetesHelmInput {
	return v.Helm
}

// GetTerraform returns DeploymentConfigurationInput.Terraform, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetTerraform() *DeploymentConfigurationTerraformInput {
	return v.Terraform
}

// GetAwsSam returns DeploymentConfigurationInput.AwsSam, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetAwsSam() *DeploymentConfigurationAwsSamInput {
	return v.AwsSam
}

// GetGcpCloudRun returns DeploymentConfigurationInput.GcpCloudRun, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetGcpCloudRun() *DeploymentConfigurationGcpCloudRunInput {
	return v.GcpCloudRun
}

type DeploymentConfigurationKubernetesHelmInput struct {
	Blueprint *BlueprintHelmConfigurationInput `json:"blueprint,omitempty"`
	Target    *HelmTargetConfigurationInput    `json:"target,omitempty"`
	Values    *string                          `json:"values,omitempty"`
}

// GetBlueprint returns DeploymentConfigurationKubernetesHelmInput.Blueprint, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationKubernetesHelmInput) GetBlueprint() *BlueprintHelmConfigurationInput {
	return v.Blueprint
}

// GetTarget returns DeploymentConfigurationKubernetesHelmInput.Target, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationKubernetesHelmInput) GetTarget() *HelmTargetConfigurationInput {
	return v.Target
}

// GetValues returns DeploymentConfigurationKubernetesHelmInput.Values, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationKubernetesHelmInput) GetValues() *string { return v.Values }

type DeploymentConfigurationKubernetesInput struct {
	Blueprint *BlueprintManifestConfigurationInput   `json:"blueprint,omitempty"`
	Target    *ManifestTargetConfigurationInput      `json:"target,omitempty"`
	Generator *KubernetesGeneratorConfigurationInput `json:"generator,omitempty"`
}

// GetBlueprint returns DeploymentConfigurationKubernetesInput.Blueprint, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationKubernetesInput) GetBlueprint() *BlueprintManifestConfigurationInput {
	return v.Blueprint
}

// GetTarget returns DeploymentConfigurationKubernetesInput.Target, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationKubernetesInput) GetTarget() *ManifestTargetConfigurationInput {
	return v.Target
}

// GetGenerator returns DeploymentConfigurationKubernetesInput.Generator, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationKubernetesInput) GetGenerator() *KubernetesGeneratorConfigurationInput {
	return v.Generator
}

type DeploymentConfigurationTerraformInput struct {
	Blueprint *BlueprintTerraformConfigurationInput `json:"blueprint,omitempty"`
	Target    *TerraformTargetConfigurationInput    `json:"target,omitempty"`
}

// GetBlueprint returns DeploymentConfigurationTerraformInput.Blueprint, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationTerraformInput) GetBlueprint() *BlueprintTerraformConfigurationInput {
	return v.Blueprint
}

// GetTarget returns DeploymentConfigurationTerraformInput.Target, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationTerraformInput) GetTarget() *TerraformTargetConfigurationInput {
	return v.Target
}

type DriverWorkflowStepActionType string

const (
	DriverWorkflowStepActionTypeDriverPlanDestroy DriverWorkflowStepActionType = "DRIVER_PLAN_DESTROY"
	DriverWorkflowStepActionTypeDriverPlan        DriverWorkflowStepActionType = "DRIVER_PLAN"
	DriverWorkflowStepActionTypeDriverApprove     DriverWorkflowStepActionType = "DRIVER_APPROVE"
	DriverWorkflowStepActionTypeDriverApply       DriverWorkflowStepActionType = "DRIVER_APPLY"
	DriverWorkflowStepActionTypeProjectDelete     DriverWorkflowStepActionType = "PROJECT_DELETE"
)

// DuplicateProjectDuplicateProject includes the requested fields of the GraphQL type Project.
type DuplicateProjectDuplicateProject struct {
	Id       uuid.UUID                                 `json:"id"`
	Name     string                                    `json:"name"`
	Group    *DuplicateProjectDuplicateProjectGroup    `json:"group,omitempty"`
	SubGroup *DuplicateProjectDuplicateProjectSubGroup `json:"subGroup,omitempty"`
}

// GetId returns DuplicateProjectDuplicateProject.Id, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProject) GetId() uuid.UUID { return v.Id }

// GetName returns DuplicateProjectDuplicateProject.Name, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProject) GetName() string { return v.Name }

// GetGroup returns DuplicateProjectDuplicateProject.Group, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProject) GetGroup() *DuplicateProjectDuplicateProjectGroup {
	return v.Group
}

// GetSubGroup returns DuplicateProjectDuplicateProject.SubGroup, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProject) GetSubGroup() *DuplicateProjectDuplicateProjectSubGroup {
	return v.SubGroup
}

// DuplicateProjectDuplicateProjectGroup includes the requested fields of the GraphQL type Group.
type DuplicateProjectDuplicateProjectGroup struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns DuplicateProjectDuplicateProjectGroup.Id, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectGroup) GetId() uuid.UUID { return v.Id }

// GetName returns DuplicateProjectDuplicateProjectGroup.Name, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectGroup) GetName() string { return v.Name }

// DuplicateProjectDuplicateProjectSubGroup includes the requested fields of the GraphQL type SubGroup.
type DuplicateProjectDuplicateProjectSubGroup struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns DuplicateProjectDuplicateProjectSubGroup.Id, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectSubGroup) GetId() uuid.UUID { return v.Id }

// GetName returns DuplicateProjectDuplicateProjectSubGroup.Name, and is useful for accessing the field via an interface.
func (v *DuplicateProjectDuplicateProjectSubGroup) GetName() string { return v.Name }

type DuplicateProjectInput struct {
	GroupId      *uuid.UUID `json:"groupId,omitempty"`
	GroupName    *string    `json:"groupName,omitempty"`
	SubGroupId   *uuid.UUID `json:"subGroupId,omitempty"`
	SubGroupName *string    `json:"subGroupName,omitempty"`
	Name         string     `json:"name"`
}

// GetGroupId returns DuplicateProjectInput.GroupId, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetGroupId() *uuid.UUID { return v.GroupId }

// GetGroupName returns DuplicateProjectInput.GroupName, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetGroupName() *string { return v.GroupName }

// GetSubGroupId returns DuplicateProjectInput.SubGroupId, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetSubGroupId() *uuid.UUID { return v.SubGroupId }

// GetSubGroupName returns DuplicateProjectInput.SubGroupName, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetSubGroupName() *string { return v.SubGroupName }

// GetName returns DuplicateProjectInput.Name, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetName() string { return v.Name }

// duplicateProjectResponse is returned by duplicateProject on success.
type DuplicateProjectResponse struct {
	DuplicateProject DuplicateProjectDuplicateProject `json:"duplicateProject"`
}

// GetDuplicateProject returns DuplicateProjectResponse.DuplicateProject, and is useful for accessing the field via an interface.
func (v *DuplicateProjectResponse) GetDuplicateProject() DuplicateProjectDuplicateProject {
	return v.DuplicateProject
}

// EjectClusterComponentEjectClusterComponent includes the requested fields of the GraphQL type ClusterComponent.
type EjectClusterComponentEjectClusterComponent struct {
	Name   string                        `json:"name"`
	Status ClusterComponentEjectedStatus `json:"status"`
}

// GetName returns EjectClusterComponentEjectClusterComponent.Name, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentEjectClusterComponent) GetName() string { return v.Name }

// GetStatus returns EjectClusterComponentEjectClusterComponent.Status, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentEjectClusterComponent) GetStatus() ClusterComponentEjectedStatus {
	return v.Status
}

type EjectClusterComponentInput struct {
	Name         string               `json:"name"`
	Type         ClusterComponentType `json:"type"`
	GroupName    string               `json:"groupName"`
	SubGroupName string               `json:"subGroupName"`
	ProjectName  string               `json:"projectName"`
}

// GetName returns EjectClusterComponentInput.Name, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentInput) GetName() string { return v.Name }

// GetType returns EjectClusterComponentInput.Type, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentInput) GetType() ClusterComponentType { return v.Type }

// GetGroupName returns EjectClusterComponentInput.GroupName, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentInput) GetGroupName() string { return v.GroupName }

// GetSubGroupName returns EjectClusterComponentInput.SubGroupName, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentInput) GetSubGroupName() string { return v.SubGroupName }

// GetProjectName returns EjectClusterComponentInput.ProjectName, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentInput) GetProjectName() string { return v.ProjectName }

// ejectClusterComponentResponse is returned by ejectClusterComponent on success.
type EjectClusterComponentResponse struct {
	EjectClusterComponent EjectClusterComponentEjectClusterComponent `json:"ejectClusterComponent"`
}

// GetEjectClusterComponent returns EjectClusterComponentResponse.EjectClusterComponent, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentResponse) GetEjectClusterComponent() EjectClusterComponentEjectClusterComponent {
	return v.EjectClusterComponent
}

type EnvVarInput struct {
	Name   string `json:"name"`
	Value  string `json:"value"`
	Sealed *bool  `json:"sealed,omitempty"`
}

// GetName returns EnvVarInput.Name, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetName() string { return v.Name }

// GetValue returns EnvVarInput.Value, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetValue() string { return v.Value }

// GetSealed returns EnvVarInput.Sealed, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetSealed() *bool { return v.Sealed }

type EnvVarSourceType string

const (
	EnvVarSourceTypeZeet        EnvVarSourceType = "ZEET"
	EnvVarSourceTypeCluster     EnvVarSourceType = "CLUSTER"
	EnvVarSourceTypeGroup       EnvVarSourceType = "GROUP"
	EnvVarSourceTypeSubgroup    EnvVarSourceType = "SUBGROUP"
	EnvVarSourceTypeProject     EnvVarSourceType = "PROJECT"
	EnvVarSourceTypeProjectLink EnvVarSourceType = "PROJECT_LINK"
)

type EventTriggerConfigurationInput struct {
	Git     *GitEventTriggerConfigurationInput     `json:"git,omitempty"`
	CronJob *CronJobEventTriggerConfigurationInput `json:"cronJob,omitempty"`
}

// GetGit returns EventTriggerConfigurationInput.Git, and is useful for accessing the field via an interface.
func (v *EventTriggerConfigurationInput) GetGit() *GitEventTriggerConfigurationInput { return v.Git }

// GetCronJob returns EventTriggerConfigurationInput.CronJob, and is useful for accessing the field via an interface.
func (v *EventTriggerConfigurationInput) GetCronJob() *CronJobEventTriggerConfigurationInput {
	return v.CronJob
}

type FilterCriterionOperatorType string

const (
	FilterCriterionOperatorTypeEquals    FilterCriterionOperatorType = "EQUALS"
	FilterCriterionOperatorTypeNotEquals FilterCriterionOperatorType = "NOT_EQUALS"
	FilterCriterionOperatorTypeIncludes  FilterCriterionOperatorType = "INCLUDES"
	FilterCriterionOperatorTypeExcludes  FilterCriterionOperatorType = "EXCLUDES"
	FilterCriterionOperatorTypeStarts    FilterCriterionOperatorType = "STARTS"
	FilterCriterionOperatorTypeEnds      FilterCriterionOperatorType = "ENDS"
	FilterCriterionOperatorTypeContains  FilterCriterionOperatorType = "CONTAINS"
)

type GCSBucketBackendInput struct {
	GcpAccountId uuid.UUID `json:"gcpAccountId"`
	BucketName   string    `json:"bucketName"`
	Location     *string   `json:"location,omitempty"`
	Prefix       *string   `json:"prefix,omitempty"`
}

// GetGcpAccountId returns GCSBucketBackendInput.GcpAccountId, and is useful for accessing the field via an interface.
func (v *GCSBucketBackendInput) GetGcpAccountId() uuid.UUID { return v.GcpAccountId }

// GetBucketName returns GCSBucketBackendInput.BucketName, and is useful for accessing the field via an interface.
func (v *GCSBucketBackendInput) GetBucketName() string { return v.BucketName }

// GetLocation returns GCSBucketBackendInput.Location, and is useful for accessing the field via an interface.
func (v *GCSBucketBackendInput) GetLocation() *string { return v.Location }

// GetPrefix returns GCSBucketBackendInput.Prefix, and is useful for accessing the field via an interface.
func (v *GCSBucketBackendInput) GetPrefix() *string { return v.Prefix }

type GcpCloudRunGeneratorConfigurationInput struct {
	EnvVars         []*EnvVarInput `json:"envVars,omitempty"`
	Name            string         `json:"name"`
	HttpPort        *string        `json:"httpPort,omitempty"`
	ContainerMemory *float64       `json:"containerMemory,omitempty"`
	ContainerCpu    *float64       `json:"containerCpu,omitempty"`
	RunCommand      *string        `json:"runCommand,omitempty"`
}

// GetEnvVars returns GcpCloudRunGeneratorConfigurationInput.EnvVars, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetEnvVars() []*EnvVarInput { return v.EnvVars }

// GetName returns GcpCloudRunGeneratorConfigurationInput.Name, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetName() string { return v.Name }

// GetHttpPort returns GcpCloudRunGeneratorConfigurationInput.HttpPort, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetHttpPort() *string { return v.HttpPort }

// GetContainerMemory returns GcpCloudRunGeneratorConfigurationInput.ContainerMemory, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetContainerMemory() *float64 {
	return v.ContainerMemory
}

// GetContainerCpu returns GcpCloudRunGeneratorConfigurationInput.ContainerCpu, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetContainerCpu() *float64 { return v.ContainerCpu }

// GetRunCommand returns GcpCloudRunGeneratorConfigurationInput.RunCommand, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetRunCommand() *string { return v.RunCommand }

type GcpCloudRunTargetConfigurationInput struct {
	GcpAccountId *uuid.UUID `json:"gcpAccountId,omitempty"`
	GcpRegion    *string    `json:"gcpRegion,omitempty"`
}

// GetGcpAccountId returns GcpCloudRunTargetConfigurationInput.GcpAccountId, and is useful for accessing the field via an interface.
func (v *GcpCloudRunTargetConfigurationInput) GetGcpAccountId() *uuid.UUID { return v.GcpAccountId }

// GetGcpRegion returns GcpCloudRunTargetConfigurationInput.GcpRegion, and is useful for accessing the field via an interface.
func (v *GcpCloudRunTargetConfigurationInput) GetGcpRegion() *string { return v.GcpRegion }

// generateDownloadableLogLinkForWorkflowRunStepResponse is returned by generateDownloadableLogLinkForWorkflowRunStep on success.
type GenerateDownloadableLogLinkForWorkflowRunStepResponse struct {
	GenerateDownloadableLogLinkForWorkflowRunStep string `json:"generateDownloadableLogLinkForWorkflowRunStep"`
}

// GetGenerateDownloadableLogLinkForWorkflowRunStep returns GenerateDownloadableLogLinkForWorkflowRunStepResponse.GenerateDownloadableLogLinkForWorkflowRunStep, and is useful for accessing the field via an interface.
func (v *GenerateDownloadableLogLinkForWorkflowRunStepResponse) GetGenerateDownloadableLogLinkForWorkflowRunStep() string {
	return v.GenerateDownloadableLogLinkForWorkflowRunStep
}

type GenericWorkflowStepActionType string

const (
	GenericWorkflowStepActionTypeDriverPlanDestroy            GenericWorkflowStepActionType = "DRIVER_PLAN_DESTROY"
	GenericWorkflowStepActionTypeDriverPlan                   GenericWorkflowStepActionType = "DRIVER_PLAN"
	GenericWorkflowStepActionTypeDriverApprove                GenericWorkflowStepActionType = "DRIVER_APPROVE"
	GenericWorkflowStepActionTypeDriverApply                  GenericWorkflowStepActionType = "DRIVER_APPLY"
	GenericWorkflowStepActionTypeProjectDelete                GenericWorkflowStepActionType = "PROJECT_DELETE"
	GenericWorkflowStepActionTypeOrchestrationBuild           GenericWorkflowStepActionType = "ORCHESTRATION_BUILD"
	GenericWorkflowStepActionTypeOrchestrationClusterPrecheck GenericWorkflowStepActionType = "ORCHESTRATION_CLUSTER_PRECHECK"
	GenericWorkflowStepActionTypeOrchestrationDeploy          GenericWorkflowStepActionType = "ORCHESTRATION_DEPLOY"
	GenericWorkflowStepActionTypeOrchestrationRelease         GenericWorkflowStepActionType = "ORCHESTRATION_RELEASE"
	GenericWorkflowStepActionTypeOrchestrationDestroy         GenericWorkflowStepActionType = "ORCHESTRATION_DESTROY"
)

type GitEventTriggerConfigurationInput struct {
	RepoId             *string `json:"repoId,omitempty"`
	RepoBranchName     *string `json:"repoBranchName,omitempty"`
	RepoOwner          *string `json:"repoOwner,omitempty"`
	RepoName           *string `json:"repoName,omitempty"`
	GithubConnectionId *int    `json:"githubConnectionId,omitempty"`
}

// GetRepoId returns GitEventTriggerConfigurationInput.RepoId, and is useful for accessing the field via an interface.
func (v *GitEventTriggerConfigurationInput) GetRepoId() *string { return v.RepoId }

// GetRepoBranchName returns GitEventTriggerConfigurationInput.RepoBranchName, and is useful for accessing the field via an interface.
func (v *GitEventTriggerConfigurationInput) GetRepoBranchName() *string { return v.RepoBranchName }

// GetRepoOwner returns GitEventTriggerConfigurationInput.RepoOwner, and is useful for accessing the field via an interface.
func (v *GitEventTriggerConfigurationInput) GetRepoOwner() *string { return v.RepoOwner }

// GetRepoName returns GitEventTriggerConfigurationInput.RepoName, and is useful for accessing the field via an interface.
func (v *GitEventTriggerConfigurationInput) GetRepoName() *string { return v.RepoName }

// GetGithubConnectionId returns GitEventTriggerConfigurationInput.GithubConnectionId, and is useful for accessing the field via an interface.
func (v *GitEventTriggerConfigurationInput) GetGithubConnectionId() *int { return v.GithubConnectionId }

type GitSourceInput struct {
	Repository  string                     `json:"repository"`
	Ref         *string                    `json:"ref,omitempty"`
	Path        *string                    `json:"path,omitempty"`
	Integration *GitSourceIntegrationInput `json:"integration,omitempty"`
}

// GetRepository returns GitSourceInput.Repository, and is useful for accessing the field via an interface.
func (v *GitSourceInput) GetRepository() string { return v.Repository }

// GetRef returns GitSourceInput.Ref, and is useful for accessing the field via an interface.
func (v *GitSourceInput) GetRef() *string { return v.Ref }

// GetPath returns GitSourceInput.Path, and is useful for accessing the field via an interface.
func (v *GitSourceInput) GetPath() *string { return v.Path }

// GetIntegration returns GitSourceInput.Integration, and is useful for accessing the field via an interface.
func (v *GitSourceInput) GetIntegration() *GitSourceIntegrationInput { return v.Integration }

type GitSourceIntegrationInput struct {
	GithubInstallationId   *int       `json:"githubInstallationId,omitempty"`
	GithubIntegrationId    *uuid.UUID `json:"githubIntegrationId,omitempty"`
	GitlabIntegrationId    *uuid.UUID `json:"gitlabIntegrationId,omitempty"`
	BitbucketIntegrationId *uuid.UUID `json:"bitbucketIntegrationId,omitempty"`
}

// GetGithubInstallationId returns GitSourceIntegrationInput.GithubInstallationId, and is useful for accessing the field via an interface.
func (v *GitSourceIntegrationInput) GetGithubInstallationId() *int { return v.GithubInstallationId }

// GetGithubIntegrationId returns GitSourceIntegrationInput.GithubIntegrationId, and is useful for accessing the field via an interface.
func (v *GitSourceIntegrationInput) GetGithubIntegrationId() *uuid.UUID { return v.GithubIntegrationId }

// GetGitlabIntegrationId returns GitSourceIntegrationInput.GitlabIntegrationId, and is useful for accessing the field via an interface.
func (v *GitSourceIntegrationInput) GetGitlabIntegrationId() *uuid.UUID { return v.GitlabIntegrationId }

// GetBitbucketIntegrationId returns GitSourceIntegrationInput.BitbucketIntegrationId, and is useful for accessing the field via an interface.
func (v *GitSourceIntegrationInput) GetBitbucketIntegrationId() *uuid.UUID {
	return v.BitbucketIntegrationId
}

type GroupFilter struct {
	Id   *MultiEntityCriterion `json:"id,omitempty"`
	Name *StringCriterion      `json:"name,omitempty"`
}

// GetId returns GroupFilter.Id, and is useful for accessing the field via an interface.
func (v *GroupFilter) GetId() *MultiEntityCriterion { return v.Id }

// GetName returns GroupFilter.Name, and is useful for accessing the field via an interface.
func (v *GroupFilter) GetName() *StringCriterion { return v.Name }

// groupResponse is returned by group on success.
type GroupResponse struct {
	Team *GroupTeam `json:"team,omitempty"`
}

// GetTeam returns GroupResponse.Team, and is useful for accessing the field via an interface.
func (v *GroupResponse) GetTeam() *GroupTeam { return v.Team }

// groupSubGroupsResponse is returned by groupSubGroups on success.
type GroupSubGroupsResponse struct {
	Team *GroupSubGroupsTeam `json:"team,omitempty"`
}

// GetTeam returns GroupSubGroupsResponse.Team, and is useful for accessing the field via an interface.
func (v *GroupSubGroupsResponse) GetTeam() *GroupSubGroupsTeam { return v.Team }

// GroupSubGroupsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type GroupSubGroupsTeam struct {
	Groups GroupSubGroupsTeamGroupsGroupConnection `json:"groups"`
}

// GetGroups returns GroupSubGroupsTeam.Groups, and is useful for accessing the field via an interface.
func (v *GroupSubGroupsTeam) GetGroups() GroupSubGroupsTeamGroupsGroupConnection { return v.Groups }

// GroupSubGroupsTeamGroupsGroupConnection includes the requested fields of the GraphQL type GroupConnection.
type GroupSubGroupsTeamGroupsGroupConnection struct {
	Nodes []GroupSubGroupsTeamGroupsGroupConnectionNodesGroup `json:"nodes"`
}

// GetNodes returns GroupSubGroupsTeamGroupsGroupConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GroupSubGroupsTeamGroupsGroupConnection) GetNodes() []GroupSubGroupsTeamGroupsGroupConnectionNodesGroup {
	return v.Nodes
}

// GroupSubGroupsTeamGroupsGroupConnectionNodesGroup includes the requested fields of the GraphQL type Group.
type GroupSubGroupsTeamGroupsGroupConnectionNodesGroup struct {
	Id        uuid.UUID                                                            `json:"id"`
	SubGroups []GroupSubGroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup `json:"subGroups"`
}

// GetId returns GroupSubGroupsTeamGroupsGroupConnectionNodesGroup.Id, and is useful for accessing the field via an interface.
func (v *GroupSubGroupsTeamGroupsGroupConnectionNodesGroup) GetId() uuid.UUID { return v.Id }

// GetSubGroups returns GroupSubGroupsTeamGroupsGroupConnectionNodesGroup.SubGroups, and is useful for accessing the field via an interface.
func (v *GroupSubGroupsTeamGroupsGroupConnectionNodesGroup) GetSubGroups() []GroupSubGroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup {
	return v.SubGroups
}

// GroupSubGroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup includes the requested fields of the GraphQL type SubGroup.
type GroupSubGroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup struct {
	Id        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetId returns GroupSubGroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup.Id, and is useful for accessing the field via an interface.
func (v *GroupSubGroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup) GetId() uuid.UUID {
	return v.Id
}

// GetName returns GroupSubGroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup.Name, and is useful for accessing the field via an interface.
func (v *GroupSubGroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup) GetName() string {
	return v.Name
}

// GetCreatedAt returns GroupSubGroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *GroupSubGroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns GroupSubGroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GroupSubGroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GroupTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type GroupTeam struct {
	Groups GroupTeamGroupsGroupConnection `json:"groups"`
}

// GetGroups returns GroupTeam.Groups, and is useful for accessing the field via an interface.
func (v *GroupTeam) GetGroups() GroupTeamGroupsGroupConnection { return v.Groups }

// GroupTeamGroupsGroupConnection includes the requested fields of the GraphQL type GroupConnection.
type GroupTeamGroupsGroupConnection struct {
	Nodes []GroupTeamGroupsGroupConnectionNodesGroup `json:"nodes"`
}

// GetNodes returns GroupTeamGroupsGroupConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GroupTeamGroupsGroupConnection) GetNodes() []GroupTeamGroupsGroupConnectionNodesGroup {
	return v.Nodes
}

// GroupTeamGroupsGroupConnectionNodesGroup includes the requested fields of the GraphQL type Group.
type GroupTeamGroupsGroupConnectionNodesGroup struct {
	Id        uuid.UUID                                            `json:"id"`
	Name      string                                               `json:"name"`
	Envs      []GroupTeamGroupsGroupConnectionNodesGroupEnvsEnvVar `json:"envs"`
	CreatedAt time.Time                                            `json:"createdAt"`
	UpdatedAt time.Time                                            `json:"updatedAt"`
}

// GetId returns GroupTeamGroupsGroupConnectionNodesGroup.Id, and is useful for accessing the field via an interface.
func (v *GroupTeamGroupsGroupConnectionNodesGroup) GetId() uuid.UUID { return v.Id }

// GetName returns GroupTeamGroupsGroupConnectionNodesGroup.Name, and is useful for accessing the field via an interface.
func (v *GroupTeamGroupsGroupConnectionNodesGroup) GetName() string { return v.Name }

// GetEnvs returns GroupTeamGroupsGroupConnectionNodesGroup.Envs, and is useful for accessing the field via an interface.
func (v *GroupTeamGroupsGroupConnectionNodesGroup) GetEnvs() []GroupTeamGroupsGroupConnectionNodesGroupEnvsEnvVar {
	return v.Envs
}

// GetCreatedAt returns GroupTeamGroupsGroupConnectionNodesGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *GroupTeamGroupsGroupConnectionNodesGroup) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns GroupTeamGroupsGroupConnectionNodesGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GroupTeamGroupsGroupConnectionNodesGroup) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GroupTeamGroupsGroupConnectionNodesGroupEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type GroupTeamGroupsGroupConnectionNodesGroupEnvsEnvVar struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns GroupTeamGroupsGroupConnectionNodesGroupEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *GroupTeamGroupsGroupConnectionNodesGroupEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns GroupTeamGroupsGroupConnectionNodesGroupEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *GroupTeamGroupsGroupConnectionNodesGroupEnvsEnvVar) GetValue() string { return v.Value }

type GroupsInput struct {
	Sort   *SortInput   `json:"sort,omitempty"`
	Page   *PageInput   `json:"page,omitempty"`
	Filter *GroupFilter `json:"filter,omitempty"`
}

// GetSort returns GroupsInput.Sort, and is useful for accessing the field via an interface.
func (v *GroupsInput) GetSort() *SortInput { return v.Sort }

// GetPage returns GroupsInput.Page, and is useful for accessing the field via an interface.
func (v *GroupsInput) GetPage() *PageInput { return v.Page }

// GetFilter returns GroupsInput.Filter, and is useful for accessing the field via an interface.
func (v *GroupsInput) GetFilter() *GroupFilter { return v.Filter }

// groupsResponse is returned by groups on success.
type GroupsResponse struct {
	Team *GroupsTeam `json:"team,omitempty"`
}

// GetTeam returns GroupsResponse.Team, and is useful for accessing the field via an interface.
func (v *GroupsResponse) GetTeam() *GroupsTeam { return v.Team }

// GroupsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type GroupsTeam struct {
	Groups GroupsTeamGroupsGroupConnection `json:"groups"`
}

// GetGroups returns GroupsTeam.Groups, and is useful for accessing the field via an interface.
func (v *GroupsTeam) GetGroups() GroupsTeamGroupsGroupConnection { return v.Groups }

// GroupsTeamGroupsGroupConnection includes the requested fields of the GraphQL type GroupConnection.
type GroupsTeamGroupsGroupConnection struct {
	PageInfo GroupsTeamGroupsGroupConnectionPageInfo     `json:"pageInfo"`
	Nodes    []GroupsTeamGroupsGroupConnectionNodesGroup `json:"nodes"`
}

// GetPageInfo returns GroupsTeamGroupsGroupConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GroupsTeamGroupsGroupConnection) GetPageInfo() GroupsTeamGroupsGroupConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GroupsTeamGroupsGroupConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GroupsTeamGroupsGroupConnection) GetNodes() []GroupsTeamGroupsGroupConnectionNodesGroup {
	return v.Nodes
}

// GroupsTeamGroupsGroupConnectionNodesGroup includes the requested fields of the GraphQL type Group.
type GroupsTeamGroupsGroupConnectionNodesGroup struct {
	Id        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetId returns GroupsTeamGroupsGroupConnectionNodesGroup.Id, and is useful for accessing the field via an interface.
func (v *GroupsTeamGroupsGroupConnectionNodesGroup) GetId() uuid.UUID { return v.Id }

// GetName returns GroupsTeamGroupsGroupConnectionNodesGroup.Name, and is useful for accessing the field via an interface.
func (v *GroupsTeamGroupsGroupConnectionNodesGroup) GetName() string { return v.Name }

// GetCreatedAt returns GroupsTeamGroupsGroupConnectionNodesGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *GroupsTeamGroupsGroupConnectionNodesGroup) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns GroupsTeamGroupsGroupConnectionNodesGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GroupsTeamGroupsGroupConnectionNodesGroup) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GroupsTeamGroupsGroupConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type GroupsTeamGroupsGroupConnectionPageInfo struct {
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
}

// GetHasNextPage returns GroupsTeamGroupsGroupConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GroupsTeamGroupsGroupConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetHasPreviousPage returns GroupsTeamGroupsGroupConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *GroupsTeamGroupsGroupConnectionPageInfo) GetHasPreviousPage() bool { return v.HasPreviousPage }

// GetStartCursor returns GroupsTeamGroupsGroupConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *GroupsTeamGroupsGroupConnectionPageInfo) GetStartCursor() string { return v.StartCursor }

// GetEndCursor returns GroupsTeamGroupsGroupConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GroupsTeamGroupsGroupConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// groupsWithSubgroupsResponse is returned by groupsWithSubgroups on success.
type GroupsWithSubgroupsResponse struct {
	Team *GroupsWithSubgroupsTeam `json:"team,omitempty"`
}

// GetTeam returns GroupsWithSubgroupsResponse.Team, and is useful for accessing the field via an interface.
func (v *GroupsWithSubgroupsResponse) GetTeam() *GroupsWithSubgroupsTeam { return v.Team }

// GroupsWithSubgroupsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type GroupsWithSubgroupsTeam struct {
	Id     uuid.UUID                                    `json:"id"`
	Groups GroupsWithSubgroupsTeamGroupsGroupConnection `json:"groups"`
}

// GetId returns GroupsWithSubgroupsTeam.Id, and is useful for accessing the field via an interface.
func (v *GroupsWithSubgroupsTeam) GetId() uuid.UUID { return v.Id }

// GetGroups returns GroupsWithSubgroupsTeam.Groups, and is useful for accessing the field via an interface.
func (v *GroupsWithSubgroupsTeam) GetGroups() GroupsWithSubgroupsTeamGroupsGroupConnection {
	return v.Groups
}

// GroupsWithSubgroupsTeamGroupsGroupConnection includes the requested fields of the GraphQL type GroupConnection.
type GroupsWithSubgroupsTeamGroupsGroupConnection struct {
	Nodes []GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup `json:"nodes"`
}

// GetNodes returns GroupsWithSubgroupsTeamGroupsGroupConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GroupsWithSubgroupsTeamGroupsGroupConnection) GetNodes() []GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup {
	return v.Nodes
}

// GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup includes the requested fields of the GraphQL type Group.
type GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup struct {
	Id        uuid.UUID                                                                 `json:"id"`
	Name      string                                                                    `json:"name"`
	SubGroups []GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup `json:"subGroups"`
}

// GetId returns GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup.Id, and is useful for accessing the field via an interface.
func (v *GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup) GetId() uuid.UUID { return v.Id }

// GetName returns GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup.Name, and is useful for accessing the field via an interface.
func (v *GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup) GetName() string { return v.Name }

// GetSubGroups returns GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup.SubGroups, and is useful for accessing the field via an interface.
func (v *GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup) GetSubGroups() []GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup {
	return v.SubGroups
}

// GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup includes the requested fields of the GraphQL type SubGroup.
type GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup.Id, and is useful for accessing the field via an interface.
func (v *GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup) GetId() uuid.UUID {
	return v.Id
}

// GetName returns GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup.Name, and is useful for accessing the field via an interface.
func (v *GroupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup) GetName() string {
	return v.Name
}

type HTTPProbeInput struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Path string `json:"path"`
}

// GetHost returns HTTPProbeInput.Host, and is useful for accessing the field via an interface.
func (v *HTTPProbeInput) GetHost() string { return v.Host }

// GetPort returns HTTPProbeInput.Port, and is useful for accessing the field via an interface.
func (v *HTTPProbeInput) GetPort() string { return v.Port }

// GetPath returns HTTPProbeInput.Path, and is useful for accessing the field via an interface.
func (v *HTTPProbeInput) GetPath() string { return v.Path }

type HelmRepositorySourceInput struct {
	RepositoryUrl string  `json:"repositoryUrl"`
	Chart         string  `json:"chart"`
	Version       *string `json:"version,omitempty"`
}

// GetRepositoryUrl returns HelmRepositorySourceInput.RepositoryUrl, and is useful for accessing the field via an interface.
func (v *HelmRepositorySourceInput) GetRepositoryUrl() string { return v.RepositoryUrl }

// GetChart returns HelmRepositorySourceInput.Chart, and is useful for accessing the field via an interface.
func (v *HelmRepositorySourceInput) GetChart() string { return v.Chart }

// GetVersion returns HelmRepositorySourceInput.Version, and is useful for accessing the field via an interface.
func (v *HelmRepositorySourceInput) GetVersion() *string { return v.Version }

type HelmTargetConfigurationInput struct {
	ClusterId   uuid.UUID `json:"clusterId"`
	Namespace   *string   `json:"namespace,omitempty"`
	ReleaseName *string   `json:"releaseName,omitempty"`
}

// GetClusterId returns HelmTargetConfigurationInput.ClusterId, and is useful for accessing the field via an interface.
func (v *HelmTargetConfigurationInput) GetClusterId() uuid.UUID { return v.ClusterId }

// GetNamespace returns HelmTargetConfigurationInput.Namespace, and is useful for accessing the field via an interface.
func (v *HelmTargetConfigurationInput) GetNamespace() *string { return v.Namespace }

// GetReleaseName returns HelmTargetConfigurationInput.ReleaseName, and is useful for accessing the field via an interface.
func (v *HelmTargetConfigurationInput) GetReleaseName() *string { return v.ReleaseName }

// InsightsCloudsMetricInsights includes the requested fields of the GraphQL type Insights.
type InsightsCloudsMetricInsights struct {
	Cloud *InsightsCloudsMetricInsightsCloudCloudInsights `json:"cloud,omitempty"`
}

// GetCloud returns InsightsCloudsMetricInsights.Cloud, and is useful for accessing the field via an interface.
func (v *InsightsCloudsMetricInsights) GetCloud() *InsightsCloudsMetricInsightsCloudCloudInsights {
	return v.Cloud
}

// InsightsCloudsMetricInsightsCloudCloudInsights includes the requested fields of the GraphQL type CloudInsights.
type InsightsCloudsMetricInsightsCloudCloudInsights struct {
	UnhealthyClouds *int `json:"unhealthyClouds,omitempty"`
}

// GetUnhealthyClouds returns InsightsCloudsMetricInsightsCloudCloudInsights.UnhealthyClouds, and is useful for accessing the field via an interface.
func (v *InsightsCloudsMetricInsightsCloudCloudInsights) GetUnhealthyClouds() *int {
	return v.UnhealthyClouds
}

// insightsCloudsMetricResponse is returned by insightsCloudsMetric on success.
type InsightsCloudsMetricResponse struct {
	Insights *InsightsCloudsMetricInsights `json:"insights,omitempty"`
}

// GetInsights returns InsightsCloudsMetricResponse.Insights, and is useful for accessing the field via an interface.
func (v *InsightsCloudsMetricResponse) GetInsights() *InsightsCloudsMetricInsights { return v.Insights }

// InsightsClustersMetricInsights includes the requested fields of the GraphQL type Insights.
type InsightsClustersMetricInsights struct {
	Cloud *InsightsClustersMetricInsightsCloudCloudInsights `json:"cloud,omitempty"`
}

// GetCloud returns InsightsClustersMetricInsights.Cloud, and is useful for accessing the field via an interface.
func (v *InsightsClustersMetricInsights) GetCloud() *InsightsClustersMetricInsightsCloudCloudInsights {
	return v.Cloud
}

// InsightsClustersMetricInsightsCloudCloudInsights includes the requested fields of the GraphQL type CloudInsights.
type InsightsClustersMetricInsightsCloudCloudInsights struct {
	UnreachableClusters *int `json:"unreachableClusters,omitempty"`
}

// GetUnreachableClusters returns InsightsClustersMetricInsightsCloudCloudInsights.UnreachableClusters, and is useful for accessing the field via an interface.
func (v *InsightsClustersMetricInsightsCloudCloudInsights) GetUnreachableClusters() *int {
	return v.UnreachableClusters
}

// insightsClustersMetricResponse is returned by insightsClustersMetric on success.
type InsightsClustersMetricResponse struct {
	Insights *InsightsClustersMetricInsights `json:"insights,omitempty"`
}

// GetInsights returns InsightsClustersMetricResponse.Insights, and is useful for accessing the field via an interface.
func (v *InsightsClustersMetricResponse) GetInsights() *InsightsClustersMetricInsights {
	return v.Insights
}

type JobDefinitionInput struct {
	ContainerRegistry    *ContainerRegistrySourceInput `json:"containerRegistry,omitempty"`
	ClusterId            *string                       `json:"clusterId,omitempty"`
	JobName              *string                       `json:"jobName,omitempty"`
	JobNamespace         *string                       `json:"jobNamespace,omitempty"`
	DockerEntrypoint     []*string                     `json:"dockerEntrypoint,omitempty"`
	DockerCommand        []*string                     `json:"dockerCommand,omitempty"`
	EnvVars              []*EnvVarInput                `json:"envVars,omitempty"`
	Parallelism          *int                          `json:"parallelism,omitempty"`
	TimeoutSeconds       *int                          `json:"timeoutSeconds,omitempty"`
	AppGeneratorVersion  *string                       `json:"appGeneratorVersion,omitempty"`
	BranchName           *string                       `json:"branchName,omitempty"`
	ProductionBranchName *string                       `json:"productionBranchName,omitempty"`
	CpuRequest           *string                       `json:"cpuRequest,omitempty"`
	MemoryRequest        *string                       `json:"memoryRequest,omitempty"`
	EphemeralStorage     *string                       `json:"ephemeralStorage,omitempty"`
	Dedicated            *bool                         `json:"dedicated,omitempty"`
	GpuRequest           *string                       `json:"gpuRequest,omitempty"`
	GpuType              *string                       `json:"gpuType,omitempty"`
	TpuType              *string                       `json:"tpuType,omitempty"`
	TpuTfVersion         *string                       `json:"tpuTfVersion,omitempty"`
	TpuCores             *int                          `json:"tpuCores,omitempty"`
	StaticIp             *bool                         `json:"staticIp,omitempty"`
	HostNetwork          *bool                         `json:"hostNetwork,omitempty"`
	Volumes              []*VolumeSpecInput            `json:"volumes,omitempty"`
	SecretMounts         []*SecretMountDataInput       `json:"secretMounts,omitempty"`
	LogShipperType       *LogShipperType               `json:"logShipperType,omitempty"`
	BetterstackToken     *string                       `json:"betterstackToken,omitempty"`
	DatadogApmEnabled    *bool                         `json:"datadogApmEnabled,omitempty"`
	DatadogHost          *string                       `json:"datadogHost,omitempty"`
	DatadogKey           *string                       `json:"datadogKey,omitempty"`
	LogDnaKey            *string                       `json:"logDnaKey,omitempty"`
	LogzToken            *string                       `json:"logzToken,omitempty"`
	LogzUrl              *string                       `json:"logzUrl,omitempty"`
	SyslogConfig         *string                       `json:"syslogConfig,omitempty"`
	AwsIamRole           *string                       `json:"awsIamRole,omitempty"`
	GcpServiceAccount    *string                       `json:"gcpServiceAccount,omitempty"`
	ServiceAccountName   *string                       `json:"serviceAccountName,omitempty"`
	Annotations          *map[string]string            `json:"annotations,omitempty"`
	NodeSelector         *map[string]string            `json:"nodeSelector,omitempty"`
	PodSpecPatch         *string                       `json:"podSpecPatch,omitempty"`
}

// GetContainerRegistry returns JobDefinitionInput.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetContainerRegistry() *ContainerRegistrySourceInput {
	return v.ContainerRegistry
}

// GetClusterId returns JobDefinitionInput.ClusterId, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetClusterId() *string { return v.ClusterId }

// GetJobName returns JobDefinitionInput.JobName, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetJobName() *string { return v.JobName }

// GetJobNamespace returns JobDefinitionInput.JobNamespace, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetJobNamespace() *string { return v.JobNamespace }

// GetDockerEntrypoint returns JobDefinitionInput.DockerEntrypoint, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetDockerEntrypoint() []*string { return v.DockerEntrypoint }

// GetDockerCommand returns JobDefinitionInput.DockerCommand, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetDockerCommand() []*string { return v.DockerCommand }

// GetEnvVars returns JobDefinitionInput.EnvVars, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetEnvVars() []*EnvVarInput { return v.EnvVars }

// GetParallelism returns JobDefinitionInput.Parallelism, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetParallelism() *int { return v.Parallelism }

// GetTimeoutSeconds returns JobDefinitionInput.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetTimeoutSeconds() *int { return v.TimeoutSeconds }

// GetAppGeneratorVersion returns JobDefinitionInput.AppGeneratorVersion, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetAppGeneratorVersion() *string { return v.AppGeneratorVersion }

// GetBranchName returns JobDefinitionInput.BranchName, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetBranchName() *string { return v.BranchName }

// GetProductionBranchName returns JobDefinitionInput.ProductionBranchName, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetProductionBranchName() *string { return v.ProductionBranchName }

// GetCpuRequest returns JobDefinitionInput.CpuRequest, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetCpuRequest() *string { return v.CpuRequest }

// GetMemoryRequest returns JobDefinitionInput.MemoryRequest, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetMemoryRequest() *string { return v.MemoryRequest }

// GetEphemeralStorage returns JobDefinitionInput.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetEphemeralStorage() *string { return v.EphemeralStorage }

// GetDedicated returns JobDefinitionInput.Dedicated, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetDedicated() *bool { return v.Dedicated }

// GetGpuRequest returns JobDefinitionInput.GpuRequest, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetGpuRequest() *string { return v.GpuRequest }

// GetGpuType returns JobDefinitionInput.GpuType, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetGpuType() *string { return v.GpuType }

// GetTpuType returns JobDefinitionInput.TpuType, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetTpuType() *string { return v.TpuType }

// GetTpuTfVersion returns JobDefinitionInput.TpuTfVersion, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetTpuTfVersion() *string { return v.TpuTfVersion }

// GetTpuCores returns JobDefinitionInput.TpuCores, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetTpuCores() *int { return v.TpuCores }

// GetStaticIp returns JobDefinitionInput.StaticIp, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetStaticIp() *bool { return v.StaticIp }

// GetHostNetwork returns JobDefinitionInput.HostNetwork, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetHostNetwork() *bool { return v.HostNetwork }

// GetVolumes returns JobDefinitionInput.Volumes, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetVolumes() []*VolumeSpecInput { return v.Volumes }

// GetSecretMounts returns JobDefinitionInput.SecretMounts, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetSecretMounts() []*SecretMountDataInput { return v.SecretMounts }

// GetLogShipperType returns JobDefinitionInput.LogShipperType, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetLogShipperType() *LogShipperType { return v.LogShipperType }

// GetBetterstackToken returns JobDefinitionInput.BetterstackToken, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetBetterstackToken() *string { return v.BetterstackToken }

// GetDatadogApmEnabled returns JobDefinitionInput.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetDatadogApmEnabled() *bool { return v.DatadogApmEnabled }

// GetDatadogHost returns JobDefinitionInput.DatadogHost, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetDatadogHost() *string { return v.DatadogHost }

// GetDatadogKey returns JobDefinitionInput.DatadogKey, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetDatadogKey() *string { return v.DatadogKey }

// GetLogDnaKey returns JobDefinitionInput.LogDnaKey, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetLogDnaKey() *string { return v.LogDnaKey }

// GetLogzToken returns JobDefinitionInput.LogzToken, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetLogzToken() *string { return v.LogzToken }

// GetLogzUrl returns JobDefinitionInput.LogzUrl, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetLogzUrl() *string { return v.LogzUrl }

// GetSyslogConfig returns JobDefinitionInput.SyslogConfig, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetSyslogConfig() *string { return v.SyslogConfig }

// GetAwsIamRole returns JobDefinitionInput.AwsIamRole, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetAwsIamRole() *string { return v.AwsIamRole }

// GetGcpServiceAccount returns JobDefinitionInput.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetGcpServiceAccount() *string { return v.GcpServiceAccount }

// GetServiceAccountName returns JobDefinitionInput.ServiceAccountName, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetServiceAccountName() *string { return v.ServiceAccountName }

// GetAnnotations returns JobDefinitionInput.Annotations, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetAnnotations() *map[string]string { return v.Annotations }

// GetNodeSelector returns JobDefinitionInput.NodeSelector, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetNodeSelector() *map[string]string { return v.NodeSelector }

// GetPodSpecPatch returns JobDefinitionInput.PodSpecPatch, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetPodSpecPatch() *string { return v.PodSpecPatch }

// JobDetailItem includes the GraphQL fields of Job requested by the fragment JobDetailItem.
type JobDetailItem struct {
	Id         uuid.UUID                            `json:"id"`
	Definition JobDetailItemDefinitionJobDefinition `json:"definition"`
	Runs       JobDetailItemRunsJobRunConnection    `json:"runs"`
}

// GetId returns JobDetailItem.Id, and is useful for accessing the field via an interface.
func (v *JobDetailItem) GetId() uuid.UUID { return v.Id }

// GetDefinition returns JobDetailItem.Definition, and is useful for accessing the field via an interface.
func (v *JobDetailItem) GetDefinition() JobDetailItemDefinitionJobDefinition { return v.Definition }

// GetRuns returns JobDetailItem.Runs, and is useful for accessing the field via an interface.
func (v *JobDetailItem) GetRuns() JobDetailItemRunsJobRunConnection { return v.Runs }

// JobDetailItemDefinitionJobDefinition includes the requested fields of the GraphQL type JobDefinition.
type JobDetailItemDefinitionJobDefinition struct {
	JobName *string `json:"jobName,omitempty"`
}

// GetJobName returns JobDetailItemDefinitionJobDefinition.JobName, and is useful for accessing the field via an interface.
func (v *JobDetailItemDefinitionJobDefinition) GetJobName() *string { return v.JobName }

// JobDetailItemRunsJobRunConnection includes the requested fields of the GraphQL type JobRunConnection.
type JobDetailItemRunsJobRunConnection struct {
	TotalCount int                                            `json:"totalCount"`
	PageInfo   JobDetailItemRunsJobRunConnectionPageInfo      `json:"pageInfo"`
	Nodes      []JobDetailItemRunsJobRunConnectionNodesJobRun `json:"nodes"`
}

// GetTotalCount returns JobDetailItemRunsJobRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnection) GetTotalCount() int { return v.TotalCount }

// GetPageInfo returns JobDetailItemRunsJobRunConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnection) GetPageInfo() JobDetailItemRunsJobRunConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns JobDetailItemRunsJobRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnection) GetNodes() []JobDetailItemRunsJobRunConnectionNodesJobRun {
	return v.Nodes
}

// JobDetailItemRunsJobRunConnectionNodesJobRun includes the requested fields of the GraphQL type JobRun.
type JobDetailItemRunsJobRunConnectionNodesJobRun struct {
	JobRunListItem `json:"-"`
}

// GetId returns JobDetailItemRunsJobRunConnectionNodesJobRun.Id, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) GetId() uuid.UUID { return v.JobRunListItem.Id }

// GetSequence returns JobDetailItemRunsJobRunConnectionNodesJobRun.Sequence, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) GetSequence() *int {
	return v.JobRunListItem.Sequence
}

// GetCreatedAt returns JobDetailItemRunsJobRunConnectionNodesJobRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) GetCreatedAt() time.Time {
	return v.JobRunListItem.CreatedAt
}

// GetState returns JobDetailItemRunsJobRunConnectionNodesJobRun.State, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) GetState() JobRunState {
	return v.JobRunListItem.State
}

func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*JobDetailItemRunsJobRunConnectionNodesJobRun
		graphql.NoUnmarshalJSON
	}
	firstPass.JobDetailItemRunsJobRunConnectionNodesJobRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobRunListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalJobDetailItemRunsJobRunConnectionNodesJobRun struct {
	Id uuid.UUID `json:"id"`

	Sequence *int `json:"sequence,omitempty"`

	CreatedAt time.Time `json:"createdAt"`

	State JobRunState `json:"state"`
}

func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) __premarshalJSON() (*__premarshalJobDetailItemRunsJobRunConnectionNodesJobRun, error) {
	var retval __premarshalJobDetailItemRunsJobRunConnectionNodesJobRun

	retval.Id = v.JobRunListItem.Id
	retval.Sequence = v.JobRunListItem.Sequence
	retval.CreatedAt = v.JobRunListItem.CreatedAt
	retval.State = v.JobRunListItem.State
	return &retval, nil
}

// JobDetailItemRunsJobRunConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type JobDetailItemRunsJobRunConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns JobDetailItemRunsJobRunConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// JobListItem includes the GraphQL fields of Job requested by the fragment JobListItem.
type JobListItem struct {
	Id         uuid.UUID                          `json:"id"`
	Definition JobListItemDefinitionJobDefinition `json:"definition"`
	Runs       JobListItemRunsJobRunConnection    `json:"runs"`
}

// GetId returns JobListItem.Id, and is useful for accessing the field via an interface.
func (v *JobListItem) GetId() uuid.UUID { return v.Id }

// GetDefinition returns JobListItem.Definition, and is useful for accessing the field via an interface.
func (v *JobListItem) GetDefinition() JobListItemDefinitionJobDefinition { return v.Definition }

// GetRuns returns JobListItem.Runs, and is useful for accessing the field via an interface.
func (v *JobListItem) GetRuns() JobListItemRunsJobRunConnection { return v.Runs }

// JobListItemDefinitionJobDefinition includes the requested fields of the GraphQL type JobDefinition.
type JobListItemDefinitionJobDefinition struct {
	JobName *string `json:"jobName,omitempty"`
}

// GetJobName returns JobListItemDefinitionJobDefinition.JobName, and is useful for accessing the field via an interface.
func (v *JobListItemDefinitionJobDefinition) GetJobName() *string { return v.JobName }

// JobListItemRunsJobRunConnection includes the requested fields of the GraphQL type JobRunConnection.
type JobListItemRunsJobRunConnection struct {
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns JobListItemRunsJobRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *JobListItemRunsJobRunConnection) GetTotalCount() int { return v.TotalCount }

// jobListResponse is returned by jobList on success.
type JobListResponse struct {
	Team *JobListTeam `json:"team,omitempty"`
}

// GetTeam returns JobListResponse.Team, and is useful for accessing the field via an interface.
func (v *JobListResponse) GetTeam() *JobListTeam { return v.Team }

// JobListTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type JobListTeam struct {
	Id      uuid.UUID           `json:"id"`
	Project *JobListTeamProject `json:"project,omitempty"`
}

// GetId returns JobListTeam.Id, and is useful for accessing the field via an interface.
func (v *JobListTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns JobListTeam.Project, and is useful for accessing the field via an interface.
func (v *JobListTeam) GetProject() *JobListTeamProject { return v.Project }

// JobListTeamProject includes the requested fields of the GraphQL type Project.
type JobListTeamProject struct {
	Jobs []JobListTeamProjectJobsJob `json:"jobs"`
}

// GetJobs returns JobListTeamProject.Jobs, and is useful for accessing the field via an interface.
func (v *JobListTeamProject) GetJobs() []JobListTeamProjectJobsJob { return v.Jobs }

// JobListTeamProjectJobsJob includes the requested fields of the GraphQL type Job.
type JobListTeamProjectJobsJob struct {
	JobListItem `json:"-"`
}

// GetId returns JobListTeamProjectJobsJob.Id, and is useful for accessing the field via an interface.
func (v *JobListTeamProjectJobsJob) GetId() uuid.UUID { return v.JobListItem.Id }

// GetDefinition returns JobListTeamProjectJobsJob.Definition, and is useful for accessing the field via an interface.
func (v *JobListTeamProjectJobsJob) GetDefinition() JobListItemDefinitionJobDefinition {
	return v.JobListItem.Definition
}

// GetRuns returns JobListTeamProjectJobsJob.Runs, and is useful for accessing the field via an interface.
func (v *JobListTeamProjectJobsJob) GetRuns() JobListItemRunsJobRunConnection {
	return v.JobListItem.Runs
}

func (v *JobListTeamProjectJobsJob) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*JobListTeamProjectJobsJob
		graphql.NoUnmarshalJSON
	}
	firstPass.JobListTeamProjectJobsJob = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalJobListTeamProjectJobsJob struct {
	Id uuid.UUID `json:"id"`

	Definition JobListItemDefinitionJobDefinition `json:"definition"`

	Runs JobListItemRunsJobRunConnection `json:"runs"`
}

func (v *JobListTeamProjectJobsJob) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *JobListTeamProjectJobsJob) __premarshalJSON() (*__premarshalJobListTeamProjectJobsJob, error) {
	var retval __premarshalJobListTeamProjectJobsJob

	retval.Id = v.JobListItem.Id
	retval.Definition = v.JobListItem.Definition
	retval.Runs = v.JobListItem.Runs
	return &retval, nil
}

// JobRunDetail includes the GraphQL fields of JobRun requested by the fragment JobRunDetail.
type JobRunDetail struct {
	JobRunListItem `json:"-"`
	UpdatedAt      time.Time                           `json:"updatedAt"`
	Command        string                              `json:"command"`
	ExitCode       *int                                `json:"exitCode,omitempty"`
	ErrorMessage   *string                             `json:"errorMessage,omitempty"`
	Definition     JobRunDetailDefinitionJobDefinition `json:"definition"`
}

// GetUpdatedAt returns JobRunDetail.UpdatedAt, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetCommand returns JobRunDetail.Command, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetCommand() string { return v.Command }

// GetExitCode returns JobRunDetail.ExitCode, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetExitCode() *int { return v.ExitCode }

// GetErrorMessage returns JobRunDetail.ErrorMessage, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetErrorMessage() *string { return v.ErrorMessage }

// GetDefinition returns JobRunDetail.Definition, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetDefinition() JobRunDetailDefinitionJobDefinition { return v.Definition }

// GetId returns JobRunDetail.Id, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetId() uuid.UUID { return v.JobRunListItem.Id }

// GetSequence returns JobRunDetail.Sequence, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetSequence() *int { return v.JobRunListItem.Sequence }

// GetCreatedAt returns JobRunDetail.CreatedAt, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetCreatedAt() time.Time { return v.JobRunListItem.CreatedAt }

// GetState returns JobRunDetail.State, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetState() JobRunState { return v.JobRunListItem.State }

func (v *JobRunDetail) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*JobRunDetail
		graphql.NoUnmarshalJSON
	}
	firstPass.JobRunDetail = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobRunListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalJobRunDetail struct {
	UpdatedAt time.Time `json:"updatedAt"`

	Command string `json:"command"`

	ExitCode *int `json:"exitCode,omitempty"`

	ErrorMessage *string `json:"errorMessage,omitempty"`

	Definition JobRunDetailDefinitionJobDefinition `json:"definition"`

	Id uuid.UUID `json:"id"`

	Sequence *int `json:"sequence,omitempty"`

	CreatedAt time.Time `json:"createdAt"`

	State JobRunState `json:"state"`
}

func (v *JobRunDetail) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *JobRunDetail) __premarshalJSON() (*__premarshalJobRunDetail, error) {
	var retval __premarshalJobRunDetail

	retval.UpdatedAt = v.UpdatedAt
	retval.Command = v.Command
	retval.ExitCode = v.ExitCode
	retval.ErrorMessage = v.ErrorMessage
	retval.Definition = v.Definition
	retval.Id = v.JobRunListItem.Id
	retval.Sequence = v.JobRunListItem.Sequence
	retval.CreatedAt = v.JobRunListItem.CreatedAt
	retval.State = v.JobRunListItem.State
	return &retval, nil
}

// JobRunDetailDefinitionJobDefinition includes the requested fields of the GraphQL type JobDefinition.
type JobRunDetailDefinitionJobDefinition struct {
	JobName *string `json:"jobName,omitempty"`
}

// GetJobName returns JobRunDetailDefinitionJobDefinition.JobName, and is useful for accessing the field via an interface.
func (v *JobRunDetailDefinitionJobDefinition) GetJobName() *string { return v.JobName }

// jobRunDetailResponse is returned by jobRunDetail on success.
type JobRunDetailResponse struct {
	Team *JobRunDetailTeam `json:"team,omitempty"`
}

// GetTeam returns JobRunDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *JobRunDetailResponse) GetTeam() *JobRunDetailTeam { return v.Team }

// JobRunDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type JobRunDetailTeam struct {
	Id     uuid.UUID               `json:"id"`
	JobRun *JobRunDetailTeamJobRun `json:"jobRun,omitempty"`
}

// GetId returns JobRunDetailTeam.Id, and is useful for accessing the field via an interface.
func (v *JobRunDetailTeam) GetId() uuid.UUID { return v.Id }

// GetJobRun returns JobRunDetailTeam.JobRun, and is useful for accessing the field via an interface.
func (v *JobRunDetailTeam) GetJobRun() *JobRunDetailTeamJobRun { return v.JobRun }

// JobRunDetailTeamJobRun includes the requested fields of the GraphQL type JobRun.
type JobRunDetailTeamJobRun struct {
	JobRunDetail `json:"-"`
}

// GetUpdatedAt returns JobRunDetailTeamJobRun.UpdatedAt, and is useful for accessing the field via an interface.
func (v *JobRunDetailTeamJobRun) GetUpdatedAt() time.Time { return v.JobRunDetail.UpdatedAt }

// GetCommand returns JobRunDetailTeamJobRun.Command, and is useful for accessing the field via an interface.
func (v *JobRunDetailTeamJobRun) GetCommand() string { return v.JobRunDetail.Command }

// GetExitCode returns JobRunDetailTeamJobRun.ExitCode, and is useful for accessing the field via an interface.
func (v *JobRunDetailTeamJobRun) GetExitCode() *int { return v.JobRunDetail.ExitCode }

// GetErrorMessage returns JobRunDetailTeamJobRun.ErrorMessage, and is useful for accessing the field via an interface.
func (v *JobRunDetailTeamJobRun) GetErrorMessage() *string { return v.JobRunDetail.ErrorMessage }

// GetDefinition returns JobRunDetailTeamJobRun.Definition, and is useful for accessing the field via an interface.
func (v *JobRunDetailTeamJobRun) GetDefinition() JobRunDetailDefinitionJobDefinition {
	return v.JobRunDetail.Definition
}

// GetId returns JobRunDetailTeamJobRun.Id, and is useful for accessing the field via an interface.
func (v *JobRunDetailTeamJobRun) GetId() uuid.UUID { return v.JobRunDetail.JobRunListItem.Id }

// GetSequence returns JobRunDetailTeamJobRun.Sequence, and is useful for accessing the field via an interface.
func (v *JobRunDetailTeamJobRun) GetSequence() *int { return v.JobRunDetail.JobRunListItem.Sequence }

// GetCreatedAt returns JobRunDetailTeamJobRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *JobRunDetailTeamJobRun) GetCreatedAt() time.Time {
	return v.JobRunDetail.JobRunListItem.CreatedAt
}

// GetState returns JobRunDetailTeamJobRun.State, and is useful for accessing the field via an interface.
func (v *JobRunDetailTeamJobRun) GetState() JobRunState { return v.JobRunDetail.JobRunListItem.State }

func (v *JobRunDetailTeamJobRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*JobRunDetailTeamJobRun
		graphql.NoUnmarshalJSON
	}
	firstPass.JobRunDetailTeamJobRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobRunDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalJobRunDetailTeamJobRun struct {
	UpdatedAt time.Time `json:"updatedAt"`

	Command string `json:"command"`

	ExitCode *int `json:"exitCode,omitempty"`

	ErrorMessage *string `json:"errorMessage,omitempty"`

	Definition JobRunDetailDefinitionJobDefinition `json:"definition"`

	Id uuid.UUID `json:"id"`

	Sequence *int `json:"sequence,omitempty"`

	CreatedAt time.Time `json:"createdAt"`

	State JobRunState `json:"state"`
}

func (v *JobRunDetailTeamJobRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *JobRunDetailTeamJobRun) __premarshalJSON() (*__premarshalJobRunDetailTeamJobRun, error) {
	var retval __premarshalJobRunDetailTeamJobRun

	retval.UpdatedAt = v.JobRunDetail.UpdatedAt
	retval.Command = v.JobRunDetail.Command
	retval.ExitCode = v.JobRunDetail.ExitCode
	retval.ErrorMessage = v.JobRunDetail.ErrorMessage
	retval.Definition = v.JobRunDetail.Definition
	retval.Id = v.JobRunDetail.JobRunListItem.Id
	retval.Sequence = v.JobRunDetail.JobRunListItem.Sequence
	retval.CreatedAt = v.JobRunDetail.JobRunListItem.CreatedAt
	retval.State = v.JobRunDetail.JobRunListItem.State
	return &retval, nil
}

// JobRunListItem includes the GraphQL fields of JobRun requested by the fragment JobRunListItem.
type JobRunListItem struct {
	Id        uuid.UUID   `json:"id"`
	Sequence  *int        `json:"sequence,omitempty"`
	CreatedAt time.Time   `json:"createdAt"`
	State     JobRunState `json:"state"`
}

// GetId returns JobRunListItem.Id, and is useful for accessing the field via an interface.
func (v *JobRunListItem) GetId() uuid.UUID { return v.Id }

// GetSequence returns JobRunListItem.Sequence, and is useful for accessing the field via an interface.
func (v *JobRunListItem) GetSequence() *int { return v.Sequence }

// GetCreatedAt returns JobRunListItem.CreatedAt, and is useful for accessing the field via an interface.
func (v *JobRunListItem) GetCreatedAt() time.Time { return v.CreatedAt }

// GetState returns JobRunListItem.State, and is useful for accessing the field via an interface.
func (v *JobRunListItem) GetState() JobRunState { return v.State }

// jobRunListResponse is returned by jobRunList on success.
type JobRunListResponse struct {
	Team *JobRunListTeam `json:"team,omitempty"`
}

// GetTeam returns JobRunListResponse.Team, and is useful for accessing the field via an interface.
func (v *JobRunListResponse) GetTeam() *JobRunListTeam { return v.Team }

// JobRunListTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type JobRunListTeam struct {
	Id  uuid.UUID          `json:"id"`
	Job *JobRunListTeamJob `json:"job,omitempty"`
}

// GetId returns JobRunListTeam.Id, and is useful for accessing the field via an interface.
func (v *JobRunListTeam) GetId() uuid.UUID { return v.Id }

// GetJob returns JobRunListTeam.Job, and is useful for accessing the field via an interface.
func (v *JobRunListTeam) GetJob() *JobRunListTeamJob { return v.Job }

// JobRunListTeamJob includes the requested fields of the GraphQL type Job.
type JobRunListTeamJob struct {
	JobDetailItem `json:"-"`
}

// GetId returns JobRunListTeamJob.Id, and is useful for accessing the field via an interface.
func (v *JobRunListTeamJob) GetId() uuid.UUID { return v.JobDetailItem.Id }

// GetDefinition returns JobRunListTeamJob.Definition, and is useful for accessing the field via an interface.
func (v *JobRunListTeamJob) GetDefinition() JobDetailItemDefinitionJobDefinition {
	return v.JobDetailItem.Definition
}

// GetRuns returns JobRunListTeamJob.Runs, and is useful for accessing the field via an interface.
func (v *JobRunListTeamJob) GetRuns() JobDetailItemRunsJobRunConnection { return v.JobDetailItem.Runs }

func (v *JobRunListTeamJob) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*JobRunListTeamJob
		graphql.NoUnmarshalJSON
	}
	firstPass.JobRunListTeamJob = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobDetailItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalJobRunListTeamJob struct {
	Id uuid.UUID `json:"id"`

	Definition JobDetailItemDefinitionJobDefinition `json:"definition"`

	Runs JobDetailItemRunsJobRunConnection `json:"runs"`
}

func (v *JobRunListTeamJob) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *JobRunListTeamJob) __premarshalJSON() (*__premarshalJobRunListTeamJob, error) {
	var retval __premarshalJobRunListTeamJob

	retval.Id = v.JobDetailItem.Id
	retval.Definition = v.JobDetailItem.Definition
	retval.Runs = v.JobDetailItem.Runs
	return &retval, nil
}

// JobRunLogs includes the GraphQL fields of JobRun requested by the fragment JobRunLogs.
type JobRunLogs struct {
	Id   uuid.UUID       `json:"id"`
	Logs *JobRunLogsLogs `json:"logs,omitempty"`
}

// GetId returns JobRunLogs.Id, and is useful for accessing the field via an interface.
func (v *JobRunLogs) GetId() uuid.UUID { return v.Id }

// GetLogs returns JobRunLogs.Logs, and is useful for accessing the field via an interface.
func (v *JobRunLogs) GetLogs() *JobRunLogsLogs { return v.Logs }

// JobRunLogsLogs includes the requested fields of the GraphQL type Logs.
type JobRunLogsLogs struct {
	Id        string                          `json:"id"`
	Completed bool                            `json:"completed"`
	Expired   *bool                           `json:"expired,omitempty"`
	Entries   []JobRunLogsLogsEntriesLogEntry `json:"entries"`
}

// GetId returns JobRunLogsLogs.Id, and is useful for accessing the field via an interface.
func (v *JobRunLogsLogs) GetId() string { return v.Id }

// GetCompleted returns JobRunLogsLogs.Completed, and is useful for accessing the field via an interface.
func (v *JobRunLogsLogs) GetCompleted() bool { return v.Completed }

// GetExpired returns JobRunLogsLogs.Expired, and is useful for accessing the field via an interface.
func (v *JobRunLogsLogs) GetExpired() *bool { return v.Expired }

// GetEntries returns JobRunLogsLogs.Entries, and is useful for accessing the field via an interface.
func (v *JobRunLogsLogs) GetEntries() []JobRunLogsLogsEntriesLogEntry { return v.Entries }

// JobRunLogsLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type JobRunLogsLogsEntriesLogEntry struct {
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Text      string     `json:"text"`
}

// GetTimestamp returns JobRunLogsLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *JobRunLogsLogsEntriesLogEntry) GetTimestamp() *time.Time { return v.Timestamp }

// GetText returns JobRunLogsLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *JobRunLogsLogsEntriesLogEntry) GetText() string { return v.Text }

// jobRunLogsResponse is returned by jobRunLogs on success.
type JobRunLogsResponse struct {
	Team *JobRunLogsTeam `json:"team,omitempty"`
}

// GetTeam returns JobRunLogsResponse.Team, and is useful for accessing the field via an interface.
func (v *JobRunLogsResponse) GetTeam() *JobRunLogsTeam { return v.Team }

// JobRunLogsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type JobRunLogsTeam struct {
	Id     uuid.UUID             `json:"id"`
	JobRun *JobRunLogsTeamJobRun `json:"jobRun,omitempty"`
}

// GetId returns JobRunLogsTeam.Id, and is useful for accessing the field via an interface.
func (v *JobRunLogsTeam) GetId() uuid.UUID { return v.Id }

// GetJobRun returns JobRunLogsTeam.JobRun, and is useful for accessing the field via an interface.
func (v *JobRunLogsTeam) GetJobRun() *JobRunLogsTeamJobRun { return v.JobRun }

// JobRunLogsTeamJobRun includes the requested fields of the GraphQL type JobRun.
type JobRunLogsTeamJobRun struct {
	JobRunLogs `json:"-"`
}

// GetId returns JobRunLogsTeamJobRun.Id, and is useful for accessing the field via an interface.
func (v *JobRunLogsTeamJobRun) GetId() uuid.UUID { return v.JobRunLogs.Id }

// GetLogs returns JobRunLogsTeamJobRun.Logs, and is useful for accessing the field via an interface.
func (v *JobRunLogsTeamJobRun) GetLogs() *JobRunLogsLogs { return v.JobRunLogs.Logs }

func (v *JobRunLogsTeamJobRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*JobRunLogsTeamJobRun
		graphql.NoUnmarshalJSON
	}
	firstPass.JobRunLogsTeamJobRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobRunLogs)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalJobRunLogsTeamJobRun struct {
	Id uuid.UUID `json:"id"`

	Logs *JobRunLogsLogs `json:"logs,omitempty"`
}

func (v *JobRunLogsTeamJobRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *JobRunLogsTeamJobRun) __premarshalJSON() (*__premarshalJobRunLogsTeamJobRun, error) {
	var retval __premarshalJobRunLogsTeamJobRun

	retval.Id = v.JobRunLogs.Id
	retval.Logs = v.JobRunLogs.Logs
	return &retval, nil
}

type JobRunState string

const (
	JobRunStateJobRunStarting        JobRunState = "JOB_RUN_STARTING"
	JobRunStateJobRunRunning         JobRunState = "JOB_RUN_RUNNING"
	JobRunStateJobRunFailed          JobRunState = "JOB_RUN_FAILED"
	JobRunStateJobRunSucceeded       JobRunState = "JOB_RUN_SUCCEEDED"
	JobRunStateJobRunPendingApproval JobRunState = "JOB_RUN_PENDING_APPROVAL"
)

type KubernetesGeneratorConfigurationInput struct {
	ContainerRegistrySource       *ContainerRegistrySourceInput `json:"containerRegistrySource,omitempty"`
	AppId                         string                        `json:"appId"`
	BranchName                    string                        `json:"branchName"`
	ProductionBranchName          string                        `json:"productionBranchName"`
	Envs                          []*EnvVarInput                `json:"envs,omitempty"`
	AppGeneratorVersion           string                        `json:"appGeneratorVersion"`
	CpuRequest                    *string                       `json:"cpuRequest,omitempty"`
	MemoryRequest                 *string                       `json:"memoryRequest,omitempty"`
	EphemeralStorage              *string                       `json:"ephemeralStorage,omitempty"`
	Dedicated                     *bool                         `json:"dedicated,omitempty"`
	GpuRequest                    *string                       `json:"gpuRequest,omitempty"`
	GpuType                       *string                       `json:"gpuType,omitempty"`
	TpuType                       *string                       `json:"tpuType,omitempty"`
	TpuTfVersion                  *string                       `json:"tpuTfVersion,omitempty"`
	TpuCores                      *int                          `json:"tpuCores,omitempty"`
	Replicas                      *int                          `json:"replicas,omitempty"`
	Autoscaling                   *AutoscalingDataInput         `json:"autoscaling,omitempty"`
	Ports                         []*PortDataInput              `json:"ports,omitempty"`
	StaticIp                      *bool                         `json:"staticIp,omitempty"`
	HostNetwork                   *bool                         `json:"hostNetwork,omitempty"`
	Endpoint                      *string                       `json:"endpoint,omitempty"`
	DefaultIngressDomain          *string                       `json:"defaultIngressDomain,omitempty"`
	Volumes                       []*VolumeSpecInput            `json:"volumes,omitempty"`
	SecretMounts                  []*SecretMountDataInput       `json:"secretMounts,omitempty"`
	DeployStrategy                *DeployStrategy               `json:"deployStrategy,omitempty"`
	PreStopSleep                  *int                          `json:"preStopSleep,omitempty"`
	TerminationGracePeriodSeconds *int                          `json:"terminationGracePeriodSeconds,omitempty"`
	StartupProbe                  *ProbeDataInput               `json:"startupProbe,omitempty"`
	LivenessProbe                 *ProbeDataInput               `json:"livenessProbe,omitempty"`
	ReadinessProbe                *ProbeDataInput               `json:"readinessProbe,omitempty"`
	LogShipperType                *LogShipperType               `json:"logShipperType,omitempty"`
	BetterstackToken              *string                       `json:"betterstackToken,omitempty"`
	DatadogApmEnabled             *bool                         `json:"datadogApmEnabled,omitempty"`
	DatadogHost                   *string                       `json:"datadogHost,omitempty"`
	DatadogKey                    *string                       `json:"datadogKey,omitempty"`
	LogDnaKey                     *string                       `json:"logDnaKey,omitempty"`
	LogzToken                     *string                       `json:"logzToken,omitempty"`
	LogzUrl                       *string                       `json:"logzUrl,omitempty"`
	SyslogConfig                  *string                       `json:"syslogConfig,omitempty"`
	DockerEntrypoint              []*string                     `json:"dockerEntrypoint,omitempty"`
	DockerCommand                 []*string                     `json:"dockerCommand,omitempty"`
	AwsIamRole                    *string                       `json:"awsIamRole,omitempty"`
	GcpServiceAccount             *string                       `json:"gcpServiceAccount,omitempty"`
	ServiceAccountName            *string                       `json:"serviceAccountName,omitempty"`
	Annotations                   *map[string]string            `json:"annotations,omitempty"`
	ServiceAnnotations            *map[string]string            `json:"serviceAnnotations,omitempty"`
	NodeSelector                  *map[string]string            `json:"nodeSelector,omitempty"`
	PodSpecPatch                  *string                       `json:"podSpecPatch,omitempty"`
}

// GetContainerRegistrySource returns KubernetesGeneratorConfigurationInput.ContainerRegistrySource, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetContainerRegistrySource() *ContainerRegistrySourceInput {
	return v.ContainerRegistrySource
}

// GetAppId returns KubernetesGeneratorConfigurationInput.AppId, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetAppId() string { return v.AppId }

// GetBranchName returns KubernetesGeneratorConfigurationInput.BranchName, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetBranchName() string { return v.BranchName }

// GetProductionBranchName returns KubernetesGeneratorConfigurationInput.ProductionBranchName, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetProductionBranchName() string {
	return v.ProductionBranchName
}

// GetEnvs returns KubernetesGeneratorConfigurationInput.Envs, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetEnvs() []*EnvVarInput { return v.Envs }

// GetAppGeneratorVersion returns KubernetesGeneratorConfigurationInput.AppGeneratorVersion, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetAppGeneratorVersion() string {
	return v.AppGeneratorVersion
}

// GetCpuRequest returns KubernetesGeneratorConfigurationInput.CpuRequest, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetCpuRequest() *string { return v.CpuRequest }

// GetMemoryRequest returns KubernetesGeneratorConfigurationInput.MemoryRequest, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetMemoryRequest() *string { return v.MemoryRequest }

// GetEphemeralStorage returns KubernetesGeneratorConfigurationInput.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetEphemeralStorage() *string {
	return v.EphemeralStorage
}

// GetDedicated returns KubernetesGeneratorConfigurationInput.Dedicated, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDedicated() *bool { return v.Dedicated }

// GetGpuRequest returns KubernetesGeneratorConfigurationInput.GpuRequest, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetGpuRequest() *string { return v.GpuRequest }

// GetGpuType returns KubernetesGeneratorConfigurationInput.GpuType, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetGpuType() *string { return v.GpuType }

// GetTpuType returns KubernetesGeneratorConfigurationInput.TpuType, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetTpuType() *string { return v.TpuType }

// GetTpuTfVersion returns KubernetesGeneratorConfigurationInput.TpuTfVersion, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetTpuTfVersion() *string { return v.TpuTfVersion }

// GetTpuCores returns KubernetesGeneratorConfigurationInput.TpuCores, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetTpuCores() *int { return v.TpuCores }

// GetReplicas returns KubernetesGeneratorConfigurationInput.Replicas, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetReplicas() *int { return v.Replicas }

// GetAutoscaling returns KubernetesGeneratorConfigurationInput.Autoscaling, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetAutoscaling() *AutoscalingDataInput {
	return v.Autoscaling
}

// GetPorts returns KubernetesGeneratorConfigurationInput.Ports, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetPorts() []*PortDataInput { return v.Ports }

// GetStaticIp returns KubernetesGeneratorConfigurationInput.StaticIp, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetStaticIp() *bool { return v.StaticIp }

// GetHostNetwork returns KubernetesGeneratorConfigurationInput.HostNetwork, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetHostNetwork() *bool { return v.HostNetwork }

// GetEndpoint returns KubernetesGeneratorConfigurationInput.Endpoint, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetEndpoint() *string { return v.Endpoint }

// GetDefaultIngressDomain returns KubernetesGeneratorConfigurationInput.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDefaultIngressDomain() *string {
	return v.DefaultIngressDomain
}

// GetVolumes returns KubernetesGeneratorConfigurationInput.Volumes, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetVolumes() []*VolumeSpecInput { return v.Volumes }

// GetSecretMounts returns KubernetesGeneratorConfigurationInput.SecretMounts, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetSecretMounts() []*SecretMountDataInput {
	return v.SecretMounts
}

// GetDeployStrategy returns KubernetesGeneratorConfigurationInput.DeployStrategy, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDeployStrategy() *DeployStrategy {
	return v.DeployStrategy
}

// GetPreStopSleep returns KubernetesGeneratorConfigurationInput.PreStopSleep, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetPreStopSleep() *int { return v.PreStopSleep }

// GetTerminationGracePeriodSeconds returns KubernetesGeneratorConfigurationInput.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetTerminationGracePeriodSeconds() *int {
	return v.TerminationGracePeriodSeconds
}

// GetStartupProbe returns KubernetesGeneratorConfigurationInput.StartupProbe, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetStartupProbe() *ProbeDataInput {
	return v.StartupProbe
}

// GetLivenessProbe returns KubernetesGeneratorConfigurationInput.LivenessProbe, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetLivenessProbe() *ProbeDataInput {
	return v.LivenessProbe
}

// GetReadinessProbe returns KubernetesGeneratorConfigurationInput.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetReadinessProbe() *ProbeDataInput {
	return v.ReadinessProbe
}

// GetLogShipperType returns KubernetesGeneratorConfigurationInput.LogShipperType, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetLogShipperType() *LogShipperType {
	return v.LogShipperType
}

// GetBetterstackToken returns KubernetesGeneratorConfigurationInput.BetterstackToken, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetBetterstackToken() *string {
	return v.BetterstackToken
}

// GetDatadogApmEnabled returns KubernetesGeneratorConfigurationInput.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDatadogApmEnabled() *bool {
	return v.DatadogApmEnabled
}

// GetDatadogHost returns KubernetesGeneratorConfigurationInput.DatadogHost, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDatadogHost() *string { return v.DatadogHost }

// GetDatadogKey returns KubernetesGeneratorConfigurationInput.DatadogKey, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDatadogKey() *string { return v.DatadogKey }

// GetLogDnaKey returns KubernetesGeneratorConfigurationInput.LogDnaKey, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetLogDnaKey() *string { return v.LogDnaKey }

// GetLogzToken returns KubernetesGeneratorConfigurationInput.LogzToken, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetLogzToken() *string { return v.LogzToken }

// GetLogzUrl returns KubernetesGeneratorConfigurationInput.LogzUrl, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetLogzUrl() *string { return v.LogzUrl }

// GetSyslogConfig returns KubernetesGeneratorConfigurationInput.SyslogConfig, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetSyslogConfig() *string { return v.SyslogConfig }

// GetDockerEntrypoint returns KubernetesGeneratorConfigurationInput.DockerEntrypoint, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDockerEntrypoint() []*string {
	return v.DockerEntrypoint
}

// GetDockerCommand returns KubernetesGeneratorConfigurationInput.DockerCommand, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDockerCommand() []*string { return v.DockerCommand }

// GetAwsIamRole returns KubernetesGeneratorConfigurationInput.AwsIamRole, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetAwsIamRole() *string { return v.AwsIamRole }

// GetGcpServiceAccount returns KubernetesGeneratorConfigurationInput.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetGcpServiceAccount() *string {
	return v.GcpServiceAccount
}

// GetServiceAccountName returns KubernetesGeneratorConfigurationInput.ServiceAccountName, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetServiceAccountName() *string {
	return v.ServiceAccountName
}

// GetAnnotations returns KubernetesGeneratorConfigurationInput.Annotations, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetAnnotations() *map[string]string {
	return v.Annotations
}

// GetServiceAnnotations returns KubernetesGeneratorConfigurationInput.ServiceAnnotations, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetServiceAnnotations() *map[string]string {
	return v.ServiceAnnotations
}

// GetNodeSelector returns KubernetesGeneratorConfigurationInput.NodeSelector, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetNodeSelector() *map[string]string {
	return v.NodeSelector
}

// GetPodSpecPatch returns KubernetesGeneratorConfigurationInput.PodSpecPatch, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetPodSpecPatch() *string { return v.PodSpecPatch }

// LinkProjectLinkProjectProjectLink includes the requested fields of the GraphQL type ProjectLink.
type LinkProjectLinkProjectProjectLink struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns LinkProjectLinkProjectProjectLink.Id, and is useful for accessing the field via an interface.
func (v *LinkProjectLinkProjectProjectLink) GetId() uuid.UUID { return v.Id }

// linkProjectResponse is returned by linkProject on success.
type LinkProjectResponse struct {
	LinkProject LinkProjectLinkProjectProjectLink `json:"linkProject"`
}

// GetLinkProject returns LinkProjectResponse.LinkProject, and is useful for accessing the field via an interface.
func (v *LinkProjectResponse) GetLinkProject() LinkProjectLinkProjectProjectLink {
	return v.LinkProject
}

type LogShipperType string

const (
	LogShipperTypeLogzio      LogShipperType = "LOGZIO"
	LogShipperTypeSyslog      LogShipperType = "SYSLOG"
	LogShipperTypeLogdna      LogShipperType = "LOGDNA"
	LogShipperTypeDatadog     LogShipperType = "DATADOG"
	LogShipperTypeBetterstack LogShipperType = "BETTERSTACK"
)

type ManifestTargetConfigurationInput struct {
	ClusterId uuid.UUID `json:"clusterId"`
	Namespace *string   `json:"namespace,omitempty"`
}

// GetClusterId returns ManifestTargetConfigurationInput.ClusterId, and is useful for accessing the field via an interface.
func (v *ManifestTargetConfigurationInput) GetClusterId() uuid.UUID { return v.ClusterId }

// GetNamespace returns ManifestTargetConfigurationInput.Namespace, and is useful for accessing the field via an interface.
func (v *ManifestTargetConfigurationInput) GetNamespace() *string { return v.Namespace }

type MetricAnnotationDirection string

const (
	MetricAnnotationDirectionVertical   MetricAnnotationDirection = "VERTICAL"
	MetricAnnotationDirectionHorizontal MetricAnnotationDirection = "HORIZONTAL"
)

type MetricAnnotationFunction string

const (
	MetricAnnotationFunctionAverage MetricAnnotationFunction = "AVERAGE"
	MetricAnnotationFunctionMax     MetricAnnotationFunction = "MAX"
	MetricAnnotationFunctionMin     MetricAnnotationFunction = "MIN"
)

type MetricAnnotationType string

const (
	MetricAnnotationTypeLine  MetricAnnotationType = "LINE"
	MetricAnnotationTypePoint MetricAnnotationType = "POINT"
)

type MetricLabelType string

const (
	MetricLabelTypePod       MetricLabelType = "POD"
	MetricLabelTypeContainer MetricLabelType = "CONTAINER"
)

// MetricStreamV1 includes the GraphQL fields of MetricStream requested by the fragment MetricStreamV1.
type MetricStreamV1 struct {
	Type        *MetricType                                 `json:"type,omitempty"`
	Query       string                                      `json:"query"`
	Annotations []MetricStreamV1AnnotationsMetricAnnotation `json:"annotations"`
	Labels      []MetricStreamV1LabelsMetricStreamLabel     `json:"labels"`
	Entries     []MetricStreamV1EntriesMetricEntry          `json:"entries"`
}

// GetType returns MetricStreamV1.Type, and is useful for accessing the field via an interface.
func (v *MetricStreamV1) GetType() *MetricType { return v.Type }

// GetQuery returns MetricStreamV1.Query, and is useful for accessing the field via an interface.
func (v *MetricStreamV1) GetQuery() string { return v.Query }

// GetAnnotations returns MetricStreamV1.Annotations, and is useful for accessing the field via an interface.
func (v *MetricStreamV1) GetAnnotations() []MetricStreamV1AnnotationsMetricAnnotation {
	return v.Annotations
}

// GetLabels returns MetricStreamV1.Labels, and is useful for accessing the field via an interface.
func (v *MetricStreamV1) GetLabels() []MetricStreamV1LabelsMetricStreamLabel { return v.Labels }

// GetEntries returns MetricStreamV1.Entries, and is useful for accessing the field via an interface.
func (v *MetricStreamV1) GetEntries() []MetricStreamV1EntriesMetricEntry { return v.Entries }

// MetricStreamV1AnnotationsMetricAnnotation includes the requested fields of the GraphQL type MetricAnnotation.
type MetricStreamV1AnnotationsMetricAnnotation struct {
	Type      MetricAnnotationType      `json:"type"`
	Direction MetricAnnotationDirection `json:"direction"`
	Function  *MetricAnnotationFunction `json:"function,omitempty"`
	Label     *string                   `json:"label,omitempty"`
	Value     *float64                  `json:"value,omitempty"`
}

// GetType returns MetricStreamV1AnnotationsMetricAnnotation.Type, and is useful for accessing the field via an interface.
func (v *MetricStreamV1AnnotationsMetricAnnotation) GetType() MetricAnnotationType { return v.Type }

// GetDirection returns MetricStreamV1AnnotationsMetricAnnotation.Direction, and is useful for accessing the field via an interface.
func (v *MetricStreamV1AnnotationsMetricAnnotation) GetDirection() MetricAnnotationDirection {
	return v.Direction
}

// GetFunction returns MetricStreamV1AnnotationsMetricAnnotation.Function, and is useful for accessing the field via an interface.
func (v *MetricStreamV1AnnotationsMetricAnnotation) GetFunction() *MetricAnnotationFunction {
	return v.Function
}

// GetLabel returns MetricStreamV1AnnotationsMetricAnnotation.Label, and is useful for accessing the field via an interface.
func (v *MetricStreamV1AnnotationsMetricAnnotation) GetLabel() *string { return v.Label }

// GetValue returns MetricStreamV1AnnotationsMetricAnnotation.Value, and is useful for accessing the field via an interface.
func (v *MetricStreamV1AnnotationsMetricAnnotation) GetValue() *float64 { return v.Value }

// MetricStreamV1EntriesMetricEntry includes the requested fields of the GraphQL type MetricEntry.
type MetricStreamV1EntriesMetricEntry struct {
	Value     *float64  `json:"value,omitempty"`
	Timestamp time.Time `json:"timestamp"`
}

// GetValue returns MetricStreamV1EntriesMetricEntry.Value, and is useful for accessing the field via an interface.
func (v *MetricStreamV1EntriesMetricEntry) GetValue() *float64 { return v.Value }

// GetTimestamp returns MetricStreamV1EntriesMetricEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricStreamV1EntriesMetricEntry) GetTimestamp() time.Time { return v.Timestamp }

// MetricStreamV1LabelsMetricStreamLabel includes the requested fields of the GraphQL type MetricStreamLabel.
type MetricStreamV1LabelsMetricStreamLabel struct {
	Label MetricLabelType `json:"label"`
	Value string          `json:"value"`
}

// GetLabel returns MetricStreamV1LabelsMetricStreamLabel.Label, and is useful for accessing the field via an interface.
func (v *MetricStreamV1LabelsMetricStreamLabel) GetLabel() MetricLabelType { return v.Label }

// GetValue returns MetricStreamV1LabelsMetricStreamLabel.Value, and is useful for accessing the field via an interface.
func (v *MetricStreamV1LabelsMetricStreamLabel) GetValue() string { return v.Value }

type MetricType string

const (
	MetricTypeQuery              MetricType = "QUERY"
	MetricTypeCpu                MetricType = "CPU"
	MetricTypeMemory             MetricType = "MEMORY"
	MetricTypeNetwork            MetricType = "NETWORK"
	MetricTypeStorage            MetricType = "STORAGE"
	MetricTypeFunctionInvocation MetricType = "FUNCTION_INVOCATION"
	MetricTypeFunctionError      MetricType = "FUNCTION_ERROR"
	MetricTypeFunctionDuration   MetricType = "FUNCTION_DURATION"
	MetricTypeFunctionConcurrent MetricType = "FUNCTION_CONCURRENT"
	MetricTypeRequestCount       MetricType = "REQUEST_COUNT"
	MetricTypeInstanceCount      MetricType = "INSTANCE_COUNT"
	MetricTypeCpuUtilization     MetricType = "CPU_UTILIZATION"
	MetricTypeMemoryUtilization  MetricType = "MEMORY_UTILIZATION"
)

type MultiEntityCriterion struct {
	Value []uuid.UUID `json:"value"`
}

// GetValue returns MultiEntityCriterion.Value, and is useful for accessing the field via an interface.
func (v *MultiEntityCriterion) GetValue() []uuid.UUID { return v.Value }

type ObservabilityConfigInput struct {
	Selector *ObservabilityResourceSelectorInput `json:"selector,omitempty"`
}

// GetSelector returns ObservabilityConfigInput.Selector, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigInput) GetSelector() *ObservabilityResourceSelectorInput {
	return v.Selector
}

// observabilityConfigResponse is returned by observabilityConfig on success.
type ObservabilityConfigResponse struct {
	Team *ObservabilityConfigTeam `json:"team,omitempty"`
}

// GetTeam returns ObservabilityConfigResponse.Team, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigResponse) GetTeam() *ObservabilityConfigTeam { return v.Team }

// ObservabilityConfigTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ObservabilityConfigTeam struct {
	Id      uuid.UUID                       `json:"id"`
	Project *ObservabilityConfigTeamProject `json:"project,omitempty"`
}

// GetId returns ObservabilityConfigTeam.Id, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns ObservabilityConfigTeam.Project, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigTeam) GetProject() *ObservabilityConfigTeamProject { return v.Project }

// ObservabilityConfigTeamProject includes the requested fields of the GraphQL type Project.
type ObservabilityConfigTeamProject struct {
	Id                  uuid.UUID                                          `json:"id"`
	ObservabilityConfig *ObservabilityConfigTeamProjectObservabilityConfig `json:"observabilityConfig,omitempty"`
}

// GetId returns ObservabilityConfigTeamProject.Id, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigTeamProject) GetId() uuid.UUID { return v.Id }

// GetObservabilityConfig returns ObservabilityConfigTeamProject.ObservabilityConfig, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigTeamProject) GetObservabilityConfig() *ObservabilityConfigTeamProjectObservabilityConfig {
	return v.ObservabilityConfig
}

// ObservabilityConfigTeamProjectObservabilityConfig includes the requested fields of the GraphQL type ObservabilityConfig.
type ObservabilityConfigTeamProjectObservabilityConfig struct {
	Selector *ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector `json:"selector,omitempty"`
}

// GetSelector returns ObservabilityConfigTeamProjectObservabilityConfig.Selector, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigTeamProjectObservabilityConfig) GetSelector() *ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector {
	return v.Selector
}

// ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector includes the requested fields of the GraphQL type ObservabilityResourceSelector.
type ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector struct {
	Type          ResourceType                                                                                                                     `json:"type"`
	Namespace     *string                                                                                                                          `json:"namespace,omitempty"`
	ResourceName  *string                                                                                                                          `json:"resourceName,omitempty"`
	ContainerName *string                                                                                                                          `json:"containerName,omitempty"`
	Labels        []ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel `json:"labels"`
}

// GetType returns ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector.Type, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector) GetType() ResourceType {
	return v.Type
}

// GetNamespace returns ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector.Namespace, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector) GetNamespace() *string {
	return v.Namespace
}

// GetResourceName returns ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector.ResourceName, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector) GetResourceName() *string {
	return v.ResourceName
}

// GetContainerName returns ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector.ContainerName, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector) GetContainerName() *string {
	return v.ContainerName
}

// GetLabels returns ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector.Labels, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector) GetLabels() []ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel {
	return v.Labels
}

// ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel includes the requested fields of the GraphQL type ObservabilityResourceSelectorLabel.
type ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel.Name, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel) GetName() string {
	return v.Name
}

// GetValue returns ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel.Value, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel) GetValue() string {
	return v.Value
}

type ObservabilityResourceSelectorInput struct {
	Type          ResourceType                              `json:"type"`
	Namespace     *string                                   `json:"namespace,omitempty"`
	ResourceName  *string                                   `json:"resourceName,omitempty"`
	ContainerName *string                                   `json:"containerName,omitempty"`
	Labels        []ObservabilityResourceSelectorLabelInput `json:"labels"`
}

// GetType returns ObservabilityResourceSelectorInput.Type, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorInput) GetType() ResourceType { return v.Type }

// GetNamespace returns ObservabilityResourceSelectorInput.Namespace, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorInput) GetNamespace() *string { return v.Namespace }

// GetResourceName returns ObservabilityResourceSelectorInput.ResourceName, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorInput) GetResourceName() *string { return v.ResourceName }

// GetContainerName returns ObservabilityResourceSelectorInput.ContainerName, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorInput) GetContainerName() *string { return v.ContainerName }

// GetLabels returns ObservabilityResourceSelectorInput.Labels, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorInput) GetLabels() []ObservabilityResourceSelectorLabelInput {
	return v.Labels
}

type ObservabilityResourceSelectorLabelInput struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns ObservabilityResourceSelectorLabelInput.Name, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorLabelInput) GetName() string { return v.Name }

// GetValue returns ObservabilityResourceSelectorLabelInput.Value, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorLabelInput) GetValue() string { return v.Value }

// OutputEntryDetail includes the GraphQL fields of ProjectOutputEntry requested by the fragment OutputEntryDetail.
type OutputEntryDetail struct {
	DisplayName *string       `json:"displayName,omitempty"`
	Name        *string       `json:"name,omitempty"`
	Type        *VariableType `json:"type,omitempty"`
	Value       *string       `json:"value,omitempty"`
}

// GetDisplayName returns OutputEntryDetail.DisplayName, and is useful for accessing the field via an interface.
func (v *OutputEntryDetail) GetDisplayName() *string { return v.DisplayName }

// GetName returns OutputEntryDetail.Name, and is useful for accessing the field via an interface.
func (v *OutputEntryDetail) GetName() *string { return v.Name }

// GetType returns OutputEntryDetail.Type, and is useful for accessing the field via an interface.
func (v *OutputEntryDetail) GetType() *VariableType { return v.Type }

// GetValue returns OutputEntryDetail.Value, and is useful for accessing the field via an interface.
func (v *OutputEntryDetail) GetValue() *string { return v.Value }

type PageInput struct {
	First  *int    `json:"first,omitempty"`
	Last   *int    `json:"last,omitempty"`
	After  *string `json:"after,omitempty"`
	Before *string `json:"before,omitempty"`
}

// GetFirst returns PageInput.First, and is useful for accessing the field via an interface.
func (v *PageInput) GetFirst() *int { return v.First }

// GetLast returns PageInput.Last, and is useful for accessing the field via an interface.
func (v *PageInput) GetLast() *int { return v.Last }

// GetAfter returns PageInput.After, and is useful for accessing the field via an interface.
func (v *PageInput) GetAfter() *string { return v.After }

// GetBefore returns PageInput.Before, and is useful for accessing the field via an interface.
func (v *PageInput) GetBefore() *string { return v.Before }

type PortDataInput struct {
	Port         string  `json:"port"`
	Https        *bool   `json:"https,omitempty"`
	Grpc         *bool   `json:"grpc,omitempty"`
	Public       *bool   `json:"public,omitempty"`
	Protocol     *string `json:"protocol,omitempty"`
	LoadBalancer *bool   `json:"loadBalancer,omitempty"`
}

// GetPort returns PortDataInput.Port, and is useful for accessing the field via an interface.
func (v *PortDataInput) GetPort() string { return v.Port }

// GetHttps returns PortDataInput.Https, and is useful for accessing the field via an interface.
func (v *PortDataInput) GetHttps() *bool { return v.Https }

// GetGrpc returns PortDataInput.Grpc, and is useful for accessing the field via an interface.
func (v *PortDataInput) GetGrpc() *bool { return v.Grpc }

// GetPublic returns PortDataInput.Public, and is useful for accessing the field via an interface.
func (v *PortDataInput) GetPublic() *bool { return v.Public }

// GetProtocol returns PortDataInput.Protocol, and is useful for accessing the field via an interface.
func (v *PortDataInput) GetProtocol() *string { return v.Protocol }

// GetLoadBalancer returns PortDataInput.LoadBalancer, and is useful for accessing the field via an interface.
func (v *PortDataInput) GetLoadBalancer() *bool { return v.LoadBalancer }

type ProbeDataInput struct {
	Command             *string         `json:"command,omitempty"`
	Http                *HTTPProbeInput `json:"http,omitempty"`
	Tcp                 *TCPProbeInput  `json:"tcp,omitempty"`
	InitialDelaySeconds *int            `json:"initialDelaySeconds,omitempty"`
	PeriodSeconds       *int            `json:"periodSeconds,omitempty"`
	SuccessThreshold    *int            `json:"successThreshold,omitempty"`
	FailureThreshold    *int            `json:"failureThreshold,omitempty"`
	TimeoutSeconds      *int            `json:"timeoutSeconds,omitempty"`
}

// GetCommand returns ProbeDataInput.Command, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetCommand() *string { return v.Command }

// GetHttp returns ProbeDataInput.Http, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetHttp() *HTTPProbeInput { return v.Http }

// GetTcp returns ProbeDataInput.Tcp, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetTcp() *TCPProbeInput { return v.Tcp }

// GetInitialDelaySeconds returns ProbeDataInput.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetInitialDelaySeconds() *int { return v.InitialDelaySeconds }

// GetPeriodSeconds returns ProbeDataInput.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetPeriodSeconds() *int { return v.PeriodSeconds }

// GetSuccessThreshold returns ProbeDataInput.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetSuccessThreshold() *int { return v.SuccessThreshold }

// GetFailureThreshold returns ProbeDataInput.FailureThreshold, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetFailureThreshold() *int { return v.FailureThreshold }

// GetTimeoutSeconds returns ProbeDataInput.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetTimeoutSeconds() *int { return v.TimeoutSeconds }

// projectAvailableProvidersResponse is returned by projectAvailableProviders on success.
type ProjectAvailableProvidersResponse struct {
	Team *ProjectAvailableProvidersTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectAvailableProvidersResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectAvailableProvidersResponse) GetTeam() *ProjectAvailableProvidersTeam { return v.Team }

// ProjectAvailableProvidersTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectAvailableProvidersTeam struct {
	Id      uuid.UUID                             `json:"id"`
	Project *ProjectAvailableProvidersTeamProject `json:"project,omitempty"`
}

// GetId returns ProjectAvailableProvidersTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectAvailableProvidersTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns ProjectAvailableProvidersTeam.Project, and is useful for accessing the field via an interface.
func (v *ProjectAvailableProvidersTeam) GetProject() *ProjectAvailableProvidersTeamProject {
	return v.Project
}

// ProjectAvailableProvidersTeamProject includes the requested fields of the GraphQL type Project.
type ProjectAvailableProvidersTeamProject struct {
	Id                 uuid.UUID                                                       `json:"id"`
	AvailableProviders []ProjectAvailableProvidersTeamProjectAvailableProvidersProject `json:"availableProviders"`
}

// GetId returns ProjectAvailableProvidersTeamProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectAvailableProvidersTeamProject) GetId() uuid.UUID { return v.Id }

// GetAvailableProviders returns ProjectAvailableProvidersTeamProject.AvailableProviders, and is useful for accessing the field via an interface.
func (v *ProjectAvailableProvidersTeamProject) GetAvailableProviders() []ProjectAvailableProvidersTeamProjectAvailableProvidersProject {
	return v.AvailableProviders
}

// ProjectAvailableProvidersTeamProjectAvailableProvidersProject includes the requested fields of the GraphQL type Project.
type ProjectAvailableProvidersTeamProjectAvailableProvidersProject struct {
	ProjectWithName `json:"-"`
}

// GetId returns ProjectAvailableProvidersTeamProjectAvailableProvidersProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectAvailableProvidersTeamProjectAvailableProvidersProject) GetId() uuid.UUID {
	return v.ProjectWithName.Id
}

// GetName returns ProjectAvailableProvidersTeamProjectAvailableProvidersProject.Name, and is useful for accessing the field via an interface.
func (v *ProjectAvailableProvidersTeamProjectAvailableProvidersProject) GetName() string {
	return v.ProjectWithName.Name
}

func (v *ProjectAvailableProvidersTeamProjectAvailableProvidersProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectAvailableProvidersTeamProjectAvailableProvidersProject
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectAvailableProvidersTeamProjectAvailableProvidersProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithName)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectAvailableProvidersTeamProjectAvailableProvidersProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *ProjectAvailableProvidersTeamProjectAvailableProvidersProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectAvailableProvidersTeamProjectAvailableProvidersProject) __premarshalJSON() (*__premarshalProjectAvailableProvidersTeamProjectAvailableProvidersProject, error) {
	var retval __premarshalProjectAvailableProvidersTeamProjectAvailableProvidersProject

	retval.Id = v.ProjectWithName.Id
	retval.Name = v.ProjectWithName.Name
	return &retval, nil
}

// ProjectBlueprintDetail includes the GraphQL fields of Blueprint requested by the fragment ProjectBlueprintDetail.
type ProjectBlueprintDetail struct {
	Id   uuid.UUID     `json:"id"`
	Type BlueprintType `json:"type"`
	// Query the revision history of this blueprint.
	Configuration ProjectBlueprintDetailConfigurationBlueprintConfiguration `json:"configuration"`
}

// GetId returns ProjectBlueprintDetail.Id, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintDetail) GetId() uuid.UUID { return v.Id }

// GetType returns ProjectBlueprintDetail.Type, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintDetail) GetType() BlueprintType { return v.Type }

// GetConfiguration returns ProjectBlueprintDetail.Configuration, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintDetail) GetConfiguration() ProjectBlueprintDetailConfigurationBlueprintConfiguration {
	return v.Configuration
}

// ProjectBlueprintDetailConfigurationBlueprintConfiguration includes the requested fields of the GraphQL type BlueprintConfiguration.
type ProjectBlueprintDetailConfigurationBlueprintConfiguration struct {
	BlueprintConfigurationDetail `json:"-"`
}

// GetSlug returns ProjectBlueprintDetailConfigurationBlueprintConfiguration.Slug, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintDetailConfigurationBlueprintConfiguration) GetSlug() string {
	return v.BlueprintConfigurationDetail.Slug
}

// GetDisplayName returns ProjectBlueprintDetailConfigurationBlueprintConfiguration.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintDetailConfigurationBlueprintConfiguration) GetDisplayName() string {
	return v.BlueprintConfigurationDetail.DisplayName
}

// GetPublished returns ProjectBlueprintDetailConfigurationBlueprintConfiguration.Published, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintDetailConfigurationBlueprintConfiguration) GetPublished() bool {
	return v.BlueprintConfigurationDetail.Published
}

// GetDescription returns ProjectBlueprintDetailConfigurationBlueprintConfiguration.Description, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintDetailConfigurationBlueprintConfiguration) GetDescription() *string {
	return v.BlueprintConfigurationDetail.Description
}

// GetTags returns ProjectBlueprintDetailConfigurationBlueprintConfiguration.Tags, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintDetailConfigurationBlueprintConfiguration) GetTags() []string {
	return v.BlueprintConfigurationDetail.Tags
}

// GetLogoUrl returns ProjectBlueprintDetailConfigurationBlueprintConfiguration.LogoUrl, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintDetailConfigurationBlueprintConfiguration) GetLogoUrl() *string {
	return v.BlueprintConfigurationDetail.LogoUrl
}

// GetRichInputSchema returns ProjectBlueprintDetailConfigurationBlueprintConfiguration.RichInputSchema, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintDetailConfigurationBlueprintConfiguration) GetRichInputSchema() *string {
	return v.BlueprintConfigurationDetail.RichInputSchema
}

func (v *ProjectBlueprintDetailConfigurationBlueprintConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectBlueprintDetailConfigurationBlueprintConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectBlueprintDetailConfigurationBlueprintConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintConfigurationDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectBlueprintDetailConfigurationBlueprintConfiguration struct {
	Slug string `json:"slug"`

	DisplayName string `json:"displayName"`

	Published bool `json:"published"`

	Description *string `json:"description,omitempty"`

	Tags []string `json:"tags"`

	LogoUrl *string `json:"logoUrl,omitempty"`

	RichInputSchema *string `json:"richInputSchema,omitempty"`
}

func (v *ProjectBlueprintDetailConfigurationBlueprintConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectBlueprintDetailConfigurationBlueprintConfiguration) __premarshalJSON() (*__premarshalProjectBlueprintDetailConfigurationBlueprintConfiguration, error) {
	var retval __premarshalProjectBlueprintDetailConfigurationBlueprintConfiguration

	retval.Slug = v.BlueprintConfigurationDetail.Slug
	retval.DisplayName = v.BlueprintConfigurationDetail.DisplayName
	retval.Published = v.BlueprintConfigurationDetail.Published
	retval.Description = v.BlueprintConfigurationDetail.Description
	retval.Tags = v.BlueprintConfigurationDetail.Tags
	retval.LogoUrl = v.BlueprintConfigurationDetail.LogoUrl
	retval.RichInputSchema = v.BlueprintConfigurationDetail.RichInputSchema
	return &retval, nil
}

// projectClustersResponse is returned by projectClusters on success.
type ProjectClustersResponse struct {
	Team *ProjectClustersTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectClustersResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectClustersResponse) GetTeam() *ProjectClustersTeam { return v.Team }

// ProjectClustersTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectClustersTeam struct {
	Id      uuid.UUID                   `json:"id"`
	Project *ProjectClustersTeamProject `json:"project,omitempty"`
}

// GetId returns ProjectClustersTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectClustersTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns ProjectClustersTeam.Project, and is useful for accessing the field via an interface.
func (v *ProjectClustersTeam) GetProject() *ProjectClustersTeamProject { return v.Project }

// ProjectClustersTeamProject includes the requested fields of the GraphQL type Project.
type ProjectClustersTeamProject struct {
	ProjectWithClusters `json:"-"`
}

// GetId returns ProjectClustersTeamProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectClustersTeamProject) GetId() uuid.UUID { return v.ProjectWithClusters.Id }

// GetClusters returns ProjectClustersTeamProject.Clusters, and is useful for accessing the field via an interface.
func (v *ProjectClustersTeamProject) GetClusters() []ProjectWithClustersClustersCluster {
	return v.ProjectWithClusters.Clusters
}

func (v *ProjectClustersTeamProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectClustersTeamProject
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectClustersTeamProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithClusters)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectClustersTeamProject struct {
	Id uuid.UUID `json:"id"`

	Clusters []ProjectWithClustersClustersCluster `json:"clusters"`
}

func (v *ProjectClustersTeamProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectClustersTeamProject) __premarshalJSON() (*__premarshalProjectClustersTeamProject, error) {
	var retval __premarshalProjectClustersTeamProject

	retval.Id = v.ProjectWithClusters.Id
	retval.Clusters = v.ProjectWithClusters.Clusters
	return &retval, nil
}

type ProjectConnectorType string

const (
	ProjectConnectorTypeDatabaseConnection ProjectConnectorType = "DATABASE_CONNECTION"
)

// ProjectDeployDetail includes the GraphQL fields of Deploy requested by the fragment ProjectDeployDetail.
type ProjectDeployDetail struct {
	Id   uuid.UUID                                   `json:"id"`
	Name string                                      `json:"name"`
	Runs *ProjectDeployDetailRunsDeployRunConnection `json:"runs,omitempty"`
}

// GetId returns ProjectDeployDetail.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetail) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectDeployDetail.Name, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetail) GetName() string { return v.Name }

// GetRuns returns ProjectDeployDetail.Runs, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetail) GetRuns() *ProjectDeployDetailRunsDeployRunConnection { return v.Runs }

// projectDeployDetailResponse is returned by projectDeployDetail on success.
type ProjectDeployDetailResponse struct {
	Team *ProjectDeployDetailTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectDeployDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailResponse) GetTeam() *ProjectDeployDetailTeam { return v.Team }

// ProjectDeployDetailRunsDeployRunConnection includes the requested fields of the GraphQL type DeployRunConnection.
type ProjectDeployDetailRunsDeployRunConnection struct {
	TotalCount int                                                        `json:"totalCount"`
	Nodes      []ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun `json:"nodes"`
}

// GetTotalCount returns ProjectDeployDetailRunsDeployRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailRunsDeployRunConnection) GetTotalCount() int { return v.TotalCount }

// GetNodes returns ProjectDeployDetailRunsDeployRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailRunsDeployRunConnection) GetNodes() []ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun {
	return v.Nodes
}

// ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun includes the requested fields of the GraphQL type DeployRun.
type ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun struct {
	ProjectDeployRunList `json:"-"`
}

// GetId returns ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun) GetId() uuid.UUID {
	return v.ProjectDeployRunList.Id
}

// GetSequence returns ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun.Sequence, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun) GetSequence() int {
	return v.ProjectDeployRunList.Sequence
}

// GetResult returns ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun.Result, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun) GetResult() *ProjectDeployRunListResultDeploymentResult {
	return v.ProjectDeployRunList.Result
}

func (v *ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectDeployRunList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectDeployDetailRunsDeployRunConnectionNodesDeployRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Result *ProjectDeployRunListResultDeploymentResult `json:"result,omitempty"`
}

func (v *ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun) __premarshalJSON() (*__premarshalProjectDeployDetailRunsDeployRunConnectionNodesDeployRun, error) {
	var retval __premarshalProjectDeployDetailRunsDeployRunConnectionNodesDeployRun

	retval.Id = v.ProjectDeployRunList.Id
	retval.Sequence = v.ProjectDeployRunList.Sequence
	retval.Result = v.ProjectDeployRunList.Result
	return &retval, nil
}

// ProjectDeployDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectDeployDetailTeam struct {
	Id     uuid.UUID                      `json:"id"`
	Deploy *ProjectDeployDetailTeamDeploy `json:"deploy,omitempty"`
}

// GetId returns ProjectDeployDetailTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailTeam) GetId() uuid.UUID { return v.Id }

// GetDeploy returns ProjectDeployDetailTeam.Deploy, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailTeam) GetDeploy() *ProjectDeployDetailTeamDeploy { return v.Deploy }

// ProjectDeployDetailTeamDeploy includes the requested fields of the GraphQL type Deploy.
type ProjectDeployDetailTeamDeploy struct {
	ProjectDeployDetail `json:"-"`
}

// GetId returns ProjectDeployDetailTeamDeploy.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailTeamDeploy) GetId() uuid.UUID { return v.ProjectDeployDetail.Id }

// GetName returns ProjectDeployDetailTeamDeploy.Name, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailTeamDeploy) GetName() string { return v.ProjectDeployDetail.Name }

// GetRuns returns ProjectDeployDetailTeamDeploy.Runs, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailTeamDeploy) GetRuns() *ProjectDeployDetailRunsDeployRunConnection {
	return v.ProjectDeployDetail.Runs
}

func (v *ProjectDeployDetailTeamDeploy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDeployDetailTeamDeploy
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDeployDetailTeamDeploy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectDeployDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectDeployDetailTeamDeploy struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Runs *ProjectDeployDetailRunsDeployRunConnection `json:"runs,omitempty"`
}

func (v *ProjectDeployDetailTeamDeploy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDeployDetailTeamDeploy) __premarshalJSON() (*__premarshalProjectDeployDetailTeamDeploy, error) {
	var retval __premarshalProjectDeployDetailTeamDeploy

	retval.Id = v.ProjectDeployDetail.Id
	retval.Name = v.ProjectDeployDetail.Name
	retval.Runs = v.ProjectDeployDetail.Runs
	return &retval, nil
}

// ProjectDeployList includes the GraphQL fields of Deploy requested by the fragment ProjectDeployList.
type ProjectDeployList struct {
	Id   uuid.UUID                                 `json:"id"`
	Name string                                    `json:"name"`
	Runs *ProjectDeployListRunsDeployRunConnection `json:"runs,omitempty"`
}

// GetId returns ProjectDeployList.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployList) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectDeployList.Name, and is useful for accessing the field via an interface.
func (v *ProjectDeployList) GetName() string { return v.Name }

// GetRuns returns ProjectDeployList.Runs, and is useful for accessing the field via an interface.
func (v *ProjectDeployList) GetRuns() *ProjectDeployListRunsDeployRunConnection { return v.Runs }

// ProjectDeployListRunsDeployRunConnection includes the requested fields of the GraphQL type DeployRunConnection.
type ProjectDeployListRunsDeployRunConnection struct {
	TotalCount int                                                      `json:"totalCount"`
	Nodes      []ProjectDeployListRunsDeployRunConnectionNodesDeployRun `json:"nodes"`
}

// GetTotalCount returns ProjectDeployListRunsDeployRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectDeployListRunsDeployRunConnection) GetTotalCount() int { return v.TotalCount }

// GetNodes returns ProjectDeployListRunsDeployRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectDeployListRunsDeployRunConnection) GetNodes() []ProjectDeployListRunsDeployRunConnectionNodesDeployRun {
	return v.Nodes
}

// ProjectDeployListRunsDeployRunConnectionNodesDeployRun includes the requested fields of the GraphQL type DeployRun.
type ProjectDeployListRunsDeployRunConnectionNodesDeployRun struct {
	Id       uuid.UUID `json:"id"`
	Sequence int       `json:"sequence"`
}

// GetId returns ProjectDeployListRunsDeployRunConnectionNodesDeployRun.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployListRunsDeployRunConnectionNodesDeployRun) GetId() uuid.UUID { return v.Id }

// GetSequence returns ProjectDeployListRunsDeployRunConnectionNodesDeployRun.Sequence, and is useful for accessing the field via an interface.
func (v *ProjectDeployListRunsDeployRunConnectionNodesDeployRun) GetSequence() int { return v.Sequence }

// projectDeployRevisionsResponse is returned by projectDeployRevisions on success.
type ProjectDeployRevisionsResponse struct {
	Team *ProjectDeployRevisionsTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectDeployRevisionsResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsResponse) GetTeam() *ProjectDeployRevisionsTeam { return v.Team }

// ProjectDeployRevisionsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectDeployRevisionsTeam struct {
	Id      uuid.UUID                          `json:"id"`
	Project *ProjectDeployRevisionsTeamProject `json:"project,omitempty"`
}

// GetId returns ProjectDeployRevisionsTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns ProjectDeployRevisionsTeam.Project, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeam) GetProject() *ProjectDeployRevisionsTeamProject {
	return v.Project
}

// ProjectDeployRevisionsTeamProject includes the requested fields of the GraphQL type Project.
type ProjectDeployRevisionsTeamProject struct {
	Id      uuid.UUID                                                `json:"id"`
	Deploys ProjectDeployRevisionsTeamProjectDeploysDeployConnection `json:"deploys"`
}

// GetId returns ProjectDeployRevisionsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeamProject) GetId() uuid.UUID { return v.Id }

// GetDeploys returns ProjectDeployRevisionsTeamProject.Deploys, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeamProject) GetDeploys() ProjectDeployRevisionsTeamProjectDeploysDeployConnection {
	return v.Deploys
}

// ProjectDeployRevisionsTeamProjectDeploysDeployConnection includes the requested fields of the GraphQL type DeployConnection.
type ProjectDeployRevisionsTeamProjectDeploysDeployConnection struct {
	Nodes []ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy `json:"nodes"`
}

// GetNodes returns ProjectDeployRevisionsTeamProjectDeploysDeployConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeamProjectDeploysDeployConnection) GetNodes() []ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy {
	return v.Nodes
}

// ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy includes the requested fields of the GraphQL type Deploy.
type ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
	// Only the revisionMetadata and revisionData will be available.
	ConfigurationRevisions *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection `json:"configurationRevisions,omitempty"`
}

// GetId returns ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy) GetId() uuid.UUID {
	return v.Id
}

// GetName returns ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy.Name, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy) GetName() string {
	return v.Name
}

// GetConfigurationRevisions returns ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy) GetConfigurationRevisions() *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection {
	return v.ConfigurationRevisions
}

// ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection includes the requested fields of the GraphQL type DeploymentConfigurationConnection.
type ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection struct {
	TotalCount int                                                                                                                                                      `json:"totalCount"`
	PageInfo   ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionPageInfo                       `json:"pageInfo"`
	Nodes      []ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration `json:"nodes"`
}

// GetTotalCount returns ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetPageInfo returns ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection) GetPageInfo() ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection) GetNodes() []ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration {
	return v.Nodes
}

// ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration includes the requested fields of the GraphQL type DeploymentConfiguration.
type ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration struct {
	RevisionDetailV1DeploymentConfiguration `json:"-"`
}

// GetRevisionData returns ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1DeploymentConfiguration.RevisionData
}

// GetRevisionMetadata returns ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1DeploymentConfiguration.RevisionMetadata
}

func (v *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1DeploymentConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration) __premarshalJSON() (*__premarshalProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration, error) {
	var retval __premarshalProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration

	retval.RevisionData = v.RevisionDetailV1DeploymentConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1DeploymentConfiguration.RevisionMetadata
	return &retval, nil
}

// ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// ProjectDeployRunDetail includes the GraphQL fields of DeployRun requested by the fragment ProjectDeployRunDetail.
type ProjectDeployRunDetail struct {
	Id       uuid.UUID                                     `json:"id"`
	Sequence int                                           `json:"sequence"`
	Result   *ProjectDeployRunDetailResultDeploymentResult `json:"result,omitempty"`
}

// GetId returns ProjectDeployRunDetail.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetail) GetId() uuid.UUID { return v.Id }

// GetSequence returns ProjectDeployRunDetail.Sequence, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetail) GetSequence() int { return v.Sequence }

// GetResult returns ProjectDeployRunDetail.Result, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetail) GetResult() *ProjectDeployRunDetailResultDeploymentResult {
	return v.Result
}

// projectDeployRunDetailResponse is returned by projectDeployRunDetail on success.
type ProjectDeployRunDetailResponse struct {
	Team *ProjectDeployRunDetailTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectDeployRunDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResponse) GetTeam() *ProjectDeployRunDetailTeam { return v.Team }

// ProjectDeployRunDetailResultDeploymentResult includes the requested fields of the GraphQL type DeploymentResult.
type ProjectDeployRunDetailResultDeploymentResult struct {
	Resources ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection `json:"resources"`
}

// GetResources returns ProjectDeployRunDetailResultDeploymentResult.Resources, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResult) GetResources() ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection {
	return v.Resources
}

// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection includes the requested fields of the GraphQL type ResourceConnection.
type ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection struct {
	TotalCount int                                                                                    `json:"totalCount"`
	Nodes      []ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource `json:"-"`
}

// GetTotalCount returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection) GetNodes() []ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource {
	return v.Nodes
}

func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection struct {
	TotalCount int `json:"totalCount"`

	Nodes []json.RawMessage `json:"nodes"`
}

func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection) __premarshalJSON() (*__premarshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection, error) {
	var retval __premarshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection

	retval.TotalCount = v.TotalCount
	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection.Nodes: %w", err)
			}
		}
	}
	return &retval, nil
}

// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource includes the requested fields of the GraphQL type CertificateResource.
type ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource struct {
	Typename    *string `json:"__typename,omitempty"`
	DisplayName string  `json:"displayName"`
	ExternalId  string  `json:"externalId"`
}

// GetTypename returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.Typename, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetTypename() *string {
	return v.Typename
}

// GetDisplayName returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetDisplayName() string {
	return v.DisplayName
}

// GetExternalId returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetExternalId() string {
	return v.ExternalId
}

// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource includes the requested fields of the GraphQL type ContainerResource.
type ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource struct {
	Typename    *string `json:"__typename,omitempty"`
	DisplayName string  `json:"displayName"`
	ExternalId  string  `json:"externalId"`
}

// GetTypename returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource.Typename, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetTypename() *string {
	return v.Typename
}

// GetDisplayName returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetDisplayName() string {
	return v.DisplayName
}

// GetExternalId returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetExternalId() string {
	return v.ExternalId
}

// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource includes the requested fields of the GraphQL type EndpointResource.
type ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource struct {
	Typename    *string `json:"__typename,omitempty"`
	DisplayName string  `json:"displayName"`
	ExternalId  string  `json:"externalId"`
}

// GetTypename returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.Typename, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetTypename() *string {
	return v.Typename
}

// GetDisplayName returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetDisplayName() string {
	return v.DisplayName
}

// GetExternalId returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetExternalId() string {
	return v.ExternalId
}

// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource includes the requested fields of the GraphQL interface Resource.
//
// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource is implemented by the following types:
// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource
// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource
// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource
type ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource interface {
	implementsGraphQLInterfaceProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetDisplayName returns the interface-field "displayName" from its implementation.
	GetDisplayName() string
	// GetExternalId returns the interface-field "externalId" from its implementation.
	GetExternalId() string
}

func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) implementsGraphQLInterfaceProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource() {
}
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource) implementsGraphQLInterfaceProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource() {
}
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) implementsGraphQLInterfaceProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource() {
}

func __unmarshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource(b []byte, v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CertificateResource":
		*v = new(ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource)
		return json.Unmarshal(b, *v)
	case "ContainerResource":
		*v = new(ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource)
		return json.Unmarshal(b, *v)
	case "EndpointResource":
		*v = new(ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Resource.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource: "%v"`, tn.TypeName)
	}
}

func __marshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource(v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource:
		typename = "CertificateResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource
		}{typename, v}
		return json.Marshal(result)
	case *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource:
		typename = "ContainerResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource
		}{typename, v}
		return json.Marshal(result)
	case *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource:
		typename = "EndpointResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource: "%T"`, v)
	}
}

// ProjectDeployRunDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectDeployRunDetailTeam struct {
	Id        uuid.UUID                           `json:"id"`
	DeployRun ProjectDeployRunDetailTeamDeployRun `json:"deployRun"`
}

// GetId returns ProjectDeployRunDetailTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailTeam) GetId() uuid.UUID { return v.Id }

// GetDeployRun returns ProjectDeployRunDetailTeam.DeployRun, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailTeam) GetDeployRun() ProjectDeployRunDetailTeamDeployRun {
	return v.DeployRun
}

// ProjectDeployRunDetailTeamDeployRun includes the requested fields of the GraphQL type DeployRun.
type ProjectDeployRunDetailTeamDeployRun struct {
	ProjectDeployRunDetail `json:"-"`
}

// GetId returns ProjectDeployRunDetailTeamDeployRun.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailTeamDeployRun) GetId() uuid.UUID { return v.ProjectDeployRunDetail.Id }

// GetSequence returns ProjectDeployRunDetailTeamDeployRun.Sequence, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailTeamDeployRun) GetSequence() int {
	return v.ProjectDeployRunDetail.Sequence
}

// GetResult returns ProjectDeployRunDetailTeamDeployRun.Result, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailTeamDeployRun) GetResult() *ProjectDeployRunDetailResultDeploymentResult {
	return v.ProjectDeployRunDetail.Result
}

func (v *ProjectDeployRunDetailTeamDeployRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDeployRunDetailTeamDeployRun
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDeployRunDetailTeamDeployRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectDeployRunDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectDeployRunDetailTeamDeployRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Result *ProjectDeployRunDetailResultDeploymentResult `json:"result,omitempty"`
}

func (v *ProjectDeployRunDetailTeamDeployRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDeployRunDetailTeamDeployRun) __premarshalJSON() (*__premarshalProjectDeployRunDetailTeamDeployRun, error) {
	var retval __premarshalProjectDeployRunDetailTeamDeployRun

	retval.Id = v.ProjectDeployRunDetail.Id
	retval.Sequence = v.ProjectDeployRunDetail.Sequence
	retval.Result = v.ProjectDeployRunDetail.Result
	return &retval, nil
}

// ProjectDeployRunList includes the GraphQL fields of DeployRun requested by the fragment ProjectDeployRunList.
type ProjectDeployRunList struct {
	Id       uuid.UUID                                   `json:"id"`
	Sequence int                                         `json:"sequence"`
	Result   *ProjectDeployRunListResultDeploymentResult `json:"result,omitempty"`
}

// GetId returns ProjectDeployRunList.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunList) GetId() uuid.UUID { return v.Id }

// GetSequence returns ProjectDeployRunList.Sequence, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunList) GetSequence() int { return v.Sequence }

// GetResult returns ProjectDeployRunList.Result, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunList) GetResult() *ProjectDeployRunListResultDeploymentResult {
	return v.Result
}

// ProjectDeployRunListResultDeploymentResult includes the requested fields of the GraphQL type DeploymentResult.
type ProjectDeployRunListResultDeploymentResult struct {
	Resources ProjectDeployRunListResultDeploymentResultResourcesResourceConnection `json:"resources"`
}

// GetResources returns ProjectDeployRunListResultDeploymentResult.Resources, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResult) GetResources() ProjectDeployRunListResultDeploymentResultResourcesResourceConnection {
	return v.Resources
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnection includes the requested fields of the GraphQL type ResourceConnection.
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnection struct {
	TotalCount int                                                                                  `json:"totalCount"`
	Nodes      []ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource `json:"-"`
}

// GetTotalCount returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnection) GetNodes() []ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource {
	return v.Nodes
}

func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDeployRunListResultDeploymentResultResourcesResourceConnection
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDeployRunListResultDeploymentResultResourcesResourceConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal ProjectDeployRunListResultDeploymentResultResourcesResourceConnection.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalProjectDeployRunListResultDeploymentResultResourcesResourceConnection struct {
	TotalCount int `json:"totalCount"`

	Nodes []json.RawMessage `json:"nodes"`
}

func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnection) __premarshalJSON() (*__premarshalProjectDeployRunListResultDeploymentResultResourcesResourceConnection, error) {
	var retval __premarshalProjectDeployRunListResultDeploymentResultResourcesResourceConnection

	retval.TotalCount = v.TotalCount
	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ProjectDeployRunListResultDeploymentResultResourcesResourceConnection.Nodes: %w", err)
			}
		}
	}
	return &retval, nil
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource includes the requested fields of the GraphQL type CertificateResource.
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource struct {
	Typename     *string `json:"__typename,omitempty"`
	DisplayName  string  `json:"displayName"`
	ExternalId   string  `json:"externalId"`
	ExternalLink *string `json:"externalLink,omitempty"`
	ExternalType *string `json:"externalType,omitempty"`
}

// GetTypename returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.Typename, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetTypename() *string {
	return v.Typename
}

// GetDisplayName returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetDisplayName() string {
	return v.DisplayName
}

// GetExternalId returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetExternalId() string {
	return v.ExternalId
}

// GetExternalLink returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetExternalLink() *string {
	return v.ExternalLink
}

// GetExternalType returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetExternalType() *string {
	return v.ExternalType
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource includes the requested fields of the GraphQL type ContainerResource.
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource struct {
	Typename     *string                                                                                          `json:"__typename,omitempty"`
	DisplayName  string                                                                                           `json:"displayName"`
	ExternalId   string                                                                                           `json:"externalId"`
	ExternalLink *string                                                                                          `json:"externalLink,omitempty"`
	ExternalType *string                                                                                          `json:"externalType,omitempty"`
	Logs         *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs `json:"logs,omitempty"`
}

// GetTypename returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource.Typename, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetTypename() *string {
	return v.Typename
}

// GetDisplayName returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetDisplayName() string {
	return v.DisplayName
}

// GetExternalId returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetExternalId() string {
	return v.ExternalId
}

// GetExternalLink returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetExternalLink() *string {
	return v.ExternalLink
}

// GetExternalType returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetExternalType() *string {
	return v.ExternalType
}

// GetLogs returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource.Logs, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetLogs() *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs {
	return v.Logs
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs includes the requested fields of the GraphQL type Logs.
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs struct {
	Id        string                                                                                                           `json:"id"`
	Completed bool                                                                                                             `json:"completed"`
	Expired   *bool                                                                                                            `json:"expired,omitempty"`
	Entries   []ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry `json:"entries"`
}

// GetId returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs) GetId() string {
	return v.Id
}

// GetCompleted returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs.Completed, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs) GetCompleted() bool {
	return v.Completed
}

// GetExpired returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs.Expired, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs) GetExpired() *bool {
	return v.Expired
}

// GetEntries returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs.Entries, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs) GetEntries() []ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry {
	return v.Entries
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry struct {
	Text      string     `json:"text"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// GetText returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// GetTimestamp returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource includes the requested fields of the GraphQL type EndpointResource.
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource struct {
	Typename     *string `json:"__typename,omitempty"`
	DisplayName  string  `json:"displayName"`
	ExternalId   string  `json:"externalId"`
	ExternalLink *string `json:"externalLink,omitempty"`
	ExternalType *string `json:"externalType,omitempty"`
}

// GetTypename returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.Typename, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetTypename() *string {
	return v.Typename
}

// GetDisplayName returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetDisplayName() string {
	return v.DisplayName
}

// GetExternalId returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetExternalId() string {
	return v.ExternalId
}

// GetExternalLink returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetExternalLink() *string {
	return v.ExternalLink
}

// GetExternalType returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetExternalType() *string {
	return v.ExternalType
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource includes the requested fields of the GraphQL interface Resource.
//
// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource is implemented by the following types:
// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource
// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource
// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource interface {
	implementsGraphQLInterfaceProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetDisplayName returns the interface-field "displayName" from its implementation.
	GetDisplayName() string
	// GetExternalId returns the interface-field "externalId" from its implementation.
	GetExternalId() string
	// GetExternalLink returns the interface-field "externalLink" from its implementation.
	GetExternalLink() *string
	// GetExternalType returns the interface-field "externalType" from its implementation.
	GetExternalType() *string
}

func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) implementsGraphQLInterfaceProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource() {
}
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) implementsGraphQLInterfaceProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource() {
}
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) implementsGraphQLInterfaceProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource() {
}

func __unmarshalProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource(b []byte, v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CertificateResource":
		*v = new(ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource)
		return json.Unmarshal(b, *v)
	case "ContainerResource":
		*v = new(ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource)
		return json.Unmarshal(b, *v)
	case "EndpointResource":
		*v = new(ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Resource.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource: "%v"`, tn.TypeName)
	}
}

func __marshalProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource(v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource:
		typename = "CertificateResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource
		}{typename, v}
		return json.Marshal(result)
	case *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource:
		typename = "ContainerResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource
		}{typename, v}
		return json.Marshal(result)
	case *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource:
		typename = "EndpointResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource: "%T"`, v)
	}
}

// projectDeploysResponse is returned by projectDeploys on success.
type ProjectDeploysResponse struct {
	Team *ProjectDeploysTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectDeploysResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectDeploysResponse) GetTeam() *ProjectDeploysTeam { return v.Team }

// ProjectDeploysTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectDeploysTeam struct {
	Id      uuid.UUID                  `json:"id"`
	Project *ProjectDeploysTeamProject `json:"project,omitempty"`
}

// GetId returns ProjectDeploysTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeploysTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns ProjectDeploysTeam.Project, and is useful for accessing the field via an interface.
func (v *ProjectDeploysTeam) GetProject() *ProjectDeploysTeamProject { return v.Project }

// ProjectDeploysTeamProject includes the requested fields of the GraphQL type Project.
type ProjectDeploysTeamProject struct {
	Id      uuid.UUID                                        `json:"id"`
	Deploys ProjectDeploysTeamProjectDeploysDeployConnection `json:"deploys"`
}

// GetId returns ProjectDeploysTeamProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeploysTeamProject) GetId() uuid.UUID { return v.Id }

// GetDeploys returns ProjectDeploysTeamProject.Deploys, and is useful for accessing the field via an interface.
func (v *ProjectDeploysTeamProject) GetDeploys() ProjectDeploysTeamProjectDeploysDeployConnection {
	return v.Deploys
}

// ProjectDeploysTeamProjectDeploysDeployConnection includes the requested fields of the GraphQL type DeployConnection.
type ProjectDeploysTeamProjectDeploysDeployConnection struct {
	Nodes []ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy `json:"nodes"`
}

// GetNodes returns ProjectDeploysTeamProjectDeploysDeployConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectDeploysTeamProjectDeploysDeployConnection) GetNodes() []ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy {
	return v.Nodes
}

// ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy includes the requested fields of the GraphQL type Deploy.
type ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy struct {
	ProjectDeployList `json:"-"`
}

// GetId returns ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy) GetId() uuid.UUID {
	return v.ProjectDeployList.Id
}

// GetName returns ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy.Name, and is useful for accessing the field via an interface.
func (v *ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy) GetName() string {
	return v.ProjectDeployList.Name
}

// GetRuns returns ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy.Runs, and is useful for accessing the field via an interface.
func (v *ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy) GetRuns() *ProjectDeployListRunsDeployRunConnection {
	return v.ProjectDeployList.Runs
}

func (v *ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectDeployList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Runs *ProjectDeployListRunsDeployRunConnection `json:"runs,omitempty"`
}

func (v *ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy) __premarshalJSON() (*__premarshalProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy, error) {
	var retval __premarshalProjectDeploysTeamProjectDeploysDeployConnectionNodesDeploy

	retval.Id = v.ProjectDeployList.Id
	retval.Name = v.ProjectDeployList.Name
	retval.Runs = v.ProjectDeployList.Runs
	return &retval, nil
}

// ProjectDetail includes the GraphQL fields of Project requested by the fragment ProjectDetail.
type ProjectDetail struct {
	ProjectInfo `json:"-"`
	Deploys     ProjectDetailDeploysDeployConnection `json:"deploys"`
	Build       *ProjectDetailBuild                  `json:"build,omitempty"`
	Blueprint   *ProjectDetailBlueprint              `json:"blueprint,omitempty"`
	Group       *ProjectDetailGroup                  `json:"group,omitempty"`
	SubGroup    *ProjectDetailSubGroup               `json:"subGroup,omitempty"`
}

// GetDeploys returns ProjectDetail.Deploys, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetDeploys() ProjectDetailDeploysDeployConnection { return v.Deploys }

// GetBuild returns ProjectDetail.Build, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetBuild() *ProjectDetailBuild { return v.Build }

// GetBlueprint returns ProjectDetail.Blueprint, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetBlueprint() *ProjectDetailBlueprint { return v.Blueprint }

// GetGroup returns ProjectDetail.Group, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetGroup() *ProjectDetailGroup { return v.Group }

// GetSubGroup returns ProjectDetail.SubGroup, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetSubGroup() *ProjectDetailSubGroup { return v.SubGroup }

// GetId returns ProjectDetail.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetId() uuid.UUID { return v.ProjectInfo.Id }

// GetName returns ProjectDetail.Name, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetName() string { return v.ProjectInfo.Name }

// GetCreatedAt returns ProjectDetail.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetCreatedAt() time.Time { return v.ProjectInfo.CreatedAt }

// GetUpdatedAt returns ProjectDetail.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetUpdatedAt() time.Time { return v.ProjectInfo.UpdatedAt }

// GetStatus returns ProjectDetail.Status, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetStatus() ProjectStatus { return v.ProjectInfo.Status }

// GetWorkflow returns ProjectDetail.Workflow, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetWorkflow() *ProjectInfoWorkflow { return v.ProjectInfo.Workflow }

// GetJobs returns ProjectDetail.Jobs, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetJobs() []ProjectInfoJobsJob { return v.ProjectInfo.Jobs }

func (v *ProjectDetail) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDetail
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDetail = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectDetail struct {
	Deploys ProjectDetailDeploysDeployConnection `json:"deploys"`

	Build *ProjectDetailBuild `json:"build,omitempty"`

	Blueprint *ProjectDetailBlueprint `json:"blueprint,omitempty"`

	Group *ProjectDetailGroup `json:"group,omitempty"`

	SubGroup *ProjectDetailSubGroup `json:"subGroup,omitempty"`

	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Status ProjectStatus `json:"status"`

	Workflow *ProjectInfoWorkflow `json:"workflow,omitempty"`

	Jobs []ProjectInfoJobsJob `json:"jobs"`
}

func (v *ProjectDetail) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDetail) __premarshalJSON() (*__premarshalProjectDetail, error) {
	var retval __premarshalProjectDetail

	retval.Deploys = v.Deploys
	retval.Build = v.Build
	retval.Blueprint = v.Blueprint
	retval.Group = v.Group
	retval.SubGroup = v.SubGroup
	retval.Id = v.ProjectInfo.Id
	retval.Name = v.ProjectInfo.Name
	retval.CreatedAt = v.ProjectInfo.CreatedAt
	retval.UpdatedAt = v.ProjectInfo.UpdatedAt
	retval.Status = v.ProjectInfo.Status
	retval.Workflow = v.ProjectInfo.Workflow
	retval.Jobs = v.ProjectInfo.Jobs
	return &retval, nil
}

// ProjectDetailBlueprint includes the requested fields of the GraphQL type Blueprint.
type ProjectDetailBlueprint struct {
	ProjectBlueprintDetail `json:"-"`
}

// GetId returns ProjectDetailBlueprint.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailBlueprint) GetId() uuid.UUID { return v.ProjectBlueprintDetail.Id }

// GetType returns ProjectDetailBlueprint.Type, and is useful for accessing the field via an interface.
func (v *ProjectDetailBlueprint) GetType() BlueprintType { return v.ProjectBlueprintDetail.Type }

// GetConfiguration returns ProjectDetailBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *ProjectDetailBlueprint) GetConfiguration() ProjectBlueprintDetailConfigurationBlueprintConfiguration {
	return v.ProjectBlueprintDetail.Configuration
}

func (v *ProjectDetailBlueprint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDetailBlueprint
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDetailBlueprint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectBlueprintDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectDetailBlueprint struct {
	Id uuid.UUID `json:"id"`

	Type BlueprintType `json:"type"`

	Configuration ProjectBlueprintDetailConfigurationBlueprintConfiguration `json:"configuration"`
}

func (v *ProjectDetailBlueprint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDetailBlueprint) __premarshalJSON() (*__premarshalProjectDetailBlueprint, error) {
	var retval __premarshalProjectDetailBlueprint

	retval.Id = v.ProjectBlueprintDetail.Id
	retval.Type = v.ProjectBlueprintDetail.Type
	retval.Configuration = v.ProjectBlueprintDetail.Configuration
	return &retval, nil
}

// ProjectDetailBuild includes the requested fields of the GraphQL type Build.
type ProjectDetailBuild struct {
	Id         uuid.UUID                    `json:"id"`
	Definition ProjectDetailBuildDefinition `json:"definition"`
}

// GetId returns ProjectDetailBuild.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailBuild) GetId() uuid.UUID { return v.Id }

// GetDefinition returns ProjectDetailBuild.Definition, and is useful for accessing the field via an interface.
func (v *ProjectDetailBuild) GetDefinition() ProjectDetailBuildDefinition { return v.Definition }

// ProjectDetailBuildDefinition includes the requested fields of the GraphQL type BuildDefinition.
type ProjectDetailBuildDefinition struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns ProjectDetailBuildDefinition.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailBuildDefinition) GetId() uuid.UUID { return v.Id }

// ProjectDetailDeploysDeployConnection includes the requested fields of the GraphQL type DeployConnection.
type ProjectDetailDeploysDeployConnection struct {
	Nodes []ProjectDetailDeploysDeployConnectionNodesDeploy `json:"nodes"`
}

// GetNodes returns ProjectDetailDeploysDeployConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectDetailDeploysDeployConnection) GetNodes() []ProjectDetailDeploysDeployConnectionNodesDeploy {
	return v.Nodes
}

// ProjectDetailDeploysDeployConnectionNodesDeploy includes the requested fields of the GraphQL type Deploy.
type ProjectDetailDeploysDeployConnectionNodesDeploy struct {
	DeployConfigurationDetail `json:"-"`
}

// GetId returns ProjectDetailDeploysDeployConnectionNodesDeploy.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) GetId() uuid.UUID {
	return v.DeployConfigurationDetail.Id
}

// GetName returns ProjectDetailDeploysDeployConnectionNodesDeploy.Name, and is useful for accessing the field via an interface.
func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) GetName() string {
	return v.DeployConfigurationDetail.Name
}

// GetBranchName returns ProjectDetailDeploysDeployConnectionNodesDeploy.BranchName, and is useful for accessing the field via an interface.
func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) GetBranchName() *string {
	return v.DeployConfigurationDetail.BranchName
}

// GetConfiguration returns ProjectDetailDeploysDeployConnectionNodesDeploy.Configuration, and is useful for accessing the field via an interface.
func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) GetConfiguration() *DeployConfigurationDetailConfigurationDeploymentConfiguration {
	return v.DeployConfigurationDetail.Configuration
}

func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDetailDeploysDeployConnectionNodesDeploy
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDetailDeploysDeployConnectionNodesDeploy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeployConfigurationDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectDetailDeploysDeployConnectionNodesDeploy struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	BranchName *string `json:"branchName,omitempty"`

	Configuration *DeployConfigurationDetailConfigurationDeploymentConfiguration `json:"configuration,omitempty"`
}

func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) __premarshalJSON() (*__premarshalProjectDetailDeploysDeployConnectionNodesDeploy, error) {
	var retval __premarshalProjectDetailDeploysDeployConnectionNodesDeploy

	retval.Id = v.DeployConfigurationDetail.Id
	retval.Name = v.DeployConfigurationDetail.Name
	retval.BranchName = v.DeployConfigurationDetail.BranchName
	retval.Configuration = v.DeployConfigurationDetail.Configuration
	return &retval, nil
}

// ProjectDetailGroup includes the requested fields of the GraphQL type Group.
type ProjectDetailGroup struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectDetailGroup.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailGroup) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectDetailGroup.Name, and is useful for accessing the field via an interface.
func (v *ProjectDetailGroup) GetName() string { return v.Name }

// projectDetailResponse is returned by projectDetail on success.
type ProjectDetailResponse struct {
	Team *ProjectDetailTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectDetailResponse) GetTeam() *ProjectDetailTeam { return v.Team }

// ProjectDetailSubGroup includes the requested fields of the GraphQL type SubGroup.
type ProjectDetailSubGroup struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectDetailSubGroup.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailSubGroup) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectDetailSubGroup.Name, and is useful for accessing the field via an interface.
func (v *ProjectDetailSubGroup) GetName() string { return v.Name }

// ProjectDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectDetailTeam struct {
	Id      uuid.UUID                 `json:"id"`
	Project *ProjectDetailTeamProject `json:"project,omitempty"`
}

// GetId returns ProjectDetailTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns ProjectDetailTeam.Project, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeam) GetProject() *ProjectDetailTeamProject { return v.Project }

// ProjectDetailTeamProject includes the requested fields of the GraphQL type Project.
type ProjectDetailTeamProject struct {
	ProjectDetail `json:"-"`
}

// GetDeploys returns ProjectDetailTeamProject.Deploys, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeamProject) GetDeploys() ProjectDetailDeploysDeployConnection {
	return v.ProjectDetail.Deploys
}

// GetBuild returns ProjectDetailTeamProject.Build, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeamProject) GetBuild() *ProjectDetailBuild { return v.ProjectDetail.Build }

// GetBlueprint returns ProjectDetailTeamProject.Blueprint, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeamProject) GetBlueprint() *ProjectDetailBlueprint {
	return v.ProjectDetail.Blueprint
}

// GetGroup returns ProjectDetailTeamProject.Group, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeamProject) GetGroup() *ProjectDetailGroup { return v.ProjectDetail.Group }

// GetSubGroup returns ProjectDetailTeamProject.SubGroup, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeamProject) GetSubGroup() *ProjectDetailSubGroup {
	return v.ProjectDetail.SubGroup
}

// GetId returns ProjectDetailTeamProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeamProject) GetId() uuid.UUID { return v.ProjectDetail.ProjectInfo.Id }

// GetName returns ProjectDetailTeamProject.Name, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeamProject) GetName() string { return v.ProjectDetail.ProjectInfo.Name }

// GetCreatedAt returns ProjectDetailTeamProject.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeamProject) GetCreatedAt() time.Time {
	return v.ProjectDetail.ProjectInfo.CreatedAt
}

// GetUpdatedAt returns ProjectDetailTeamProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeamProject) GetUpdatedAt() time.Time {
	return v.ProjectDetail.ProjectInfo.UpdatedAt
}

// GetStatus returns ProjectDetailTeamProject.Status, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeamProject) GetStatus() ProjectStatus {
	return v.ProjectDetail.ProjectInfo.Status
}

// GetWorkflow returns ProjectDetailTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeamProject) GetWorkflow() *ProjectInfoWorkflow {
	return v.ProjectDetail.ProjectInfo.Workflow
}

// GetJobs returns ProjectDetailTeamProject.Jobs, and is useful for accessing the field via an interface.
func (v *ProjectDetailTeamProject) GetJobs() []ProjectInfoJobsJob {
	return v.ProjectDetail.ProjectInfo.Jobs
}

func (v *ProjectDetailTeamProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDetailTeamProject
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDetailTeamProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectDetailTeamProject struct {
	Deploys ProjectDetailDeploysDeployConnection `json:"deploys"`

	Build *ProjectDetailBuild `json:"build,omitempty"`

	Blueprint *ProjectDetailBlueprint `json:"blueprint,omitempty"`

	Group *ProjectDetailGroup `json:"group,omitempty"`

	SubGroup *ProjectDetailSubGroup `json:"subGroup,omitempty"`

	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Status ProjectStatus `json:"status"`

	Workflow *ProjectInfoWorkflow `json:"workflow,omitempty"`

	Jobs []ProjectInfoJobsJob `json:"jobs"`
}

func (v *ProjectDetailTeamProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDetailTeamProject) __premarshalJSON() (*__premarshalProjectDetailTeamProject, error) {
	var retval __premarshalProjectDetailTeamProject

	retval.Deploys = v.ProjectDetail.Deploys
	retval.Build = v.ProjectDetail.Build
	retval.Blueprint = v.ProjectDetail.Blueprint
	retval.Group = v.ProjectDetail.Group
	retval.SubGroup = v.ProjectDetail.SubGroup
	retval.Id = v.ProjectDetail.ProjectInfo.Id
	retval.Name = v.ProjectDetail.ProjectInfo.Name
	retval.CreatedAt = v.ProjectDetail.ProjectInfo.CreatedAt
	retval.UpdatedAt = v.ProjectDetail.ProjectInfo.UpdatedAt
	retval.Status = v.ProjectDetail.ProjectInfo.Status
	retval.Workflow = v.ProjectDetail.ProjectInfo.Workflow
	retval.Jobs = v.ProjectDetail.ProjectInfo.Jobs
	return &retval, nil
}

// Available filters for querying Projects. The result set is the intersection of all specified filters.
type ProjectFilter struct {
	// Selects only the Projects having one of these ids.
	Ids []uuid.UUID `json:"ids"`
	// Filter Projects by name, status, groupName and subGroupName
	Status       *ProjectStatusCriterion `json:"status,omitempty"`
	Name         *StringCriterion        `json:"name,omitempty"`
	GroupName    *StringCriterion        `json:"groupName,omitempty"`
	SubGroupName *StringCriterion        `json:"subGroupName,omitempty"`
}

// GetIds returns ProjectFilter.Ids, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetIds() []uuid.UUID { return v.Ids }

// GetStatus returns ProjectFilter.Status, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetStatus() *ProjectStatusCriterion { return v.Status }

// GetName returns ProjectFilter.Name, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetName() *StringCriterion { return v.Name }

// GetGroupName returns ProjectFilter.GroupName, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetGroupName() *StringCriterion { return v.GroupName }

// GetSubGroupName returns ProjectFilter.SubGroupName, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetSubGroupName() *StringCriterion { return v.SubGroupName }

// ProjectInfo includes the GraphQL fields of Project requested by the fragment ProjectInfo.
type ProjectInfo struct {
	Id        uuid.UUID                          `json:"id"`
	Name      string                             `json:"name"`
	CreatedAt time.Time                          `json:"createdAt"`
	UpdatedAt time.Time                          `json:"updatedAt"`
	Status    ProjectStatus                      `json:"status"`
	Build     *ProjectInfoBuild                  `json:"build,omitempty"`
	Deploys   ProjectInfoDeploysDeployConnection `json:"deploys"`
	Workflow  *ProjectInfoWorkflow               `json:"workflow,omitempty"`
	Jobs      []ProjectInfoJobsJob               `json:"jobs"`
	Blueprint *ProjectInfoBlueprint              `json:"blueprint,omitempty"`
}

// GetId returns ProjectInfo.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectInfo.Name, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetName() string { return v.Name }

// GetCreatedAt returns ProjectInfo.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns ProjectInfo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetStatus returns ProjectInfo.Status, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetStatus() ProjectStatus { return v.Status }

// GetBuild returns ProjectInfo.Build, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetBuild() *ProjectInfoBuild { return v.Build }

// GetDeploys returns ProjectInfo.Deploys, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetDeploys() ProjectInfoDeploysDeployConnection { return v.Deploys }

// GetWorkflow returns ProjectInfo.Workflow, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetWorkflow() *ProjectInfoWorkflow { return v.Workflow }

// GetJobs returns ProjectInfo.Jobs, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetJobs() []ProjectInfoJobsJob { return v.Jobs }

// GetBlueprint returns ProjectInfo.Blueprint, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetBlueprint() *ProjectInfoBlueprint { return v.Blueprint }

// ProjectInfoBlueprint includes the requested fields of the GraphQL type Blueprint.
type ProjectInfoBlueprint struct {
	Id   uuid.UUID     `json:"id"`
	Type BlueprintType `json:"type"`
}

// GetId returns ProjectInfoBlueprint.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfoBlueprint) GetId() uuid.UUID { return v.Id }

// GetType returns ProjectInfoBlueprint.Type, and is useful for accessing the field via an interface.
func (v *ProjectInfoBlueprint) GetType() BlueprintType { return v.Type }

// ProjectInfoBuild includes the requested fields of the GraphQL type Build.
type ProjectInfoBuild struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns ProjectInfoBuild.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfoBuild) GetId() uuid.UUID { return v.Id }

// ProjectInfoDeploysDeployConnection includes the requested fields of the GraphQL type DeployConnection.
type ProjectInfoDeploysDeployConnection struct {
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns ProjectInfoDeploysDeployConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectInfoDeploysDeployConnection) GetTotalCount() int { return v.TotalCount }

// ProjectInfoJobsJob includes the requested fields of the GraphQL type Job.
type ProjectInfoJobsJob struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns ProjectInfoJobsJob.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfoJobsJob) GetId() uuid.UUID { return v.Id }

// projectInfoResponse is returned by projectInfo on success.
type ProjectInfoResponse struct {
	Team *ProjectInfoTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectInfoResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectInfoResponse) GetTeam() *ProjectInfoTeam { return v.Team }

// ProjectInfoTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectInfoTeam struct {
	Id      uuid.UUID               `json:"id"`
	Project *ProjectInfoTeamProject `json:"project,omitempty"`
}

// GetId returns ProjectInfoTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfoTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns ProjectInfoTeam.Project, and is useful for accessing the field via an interface.
func (v *ProjectInfoTeam) GetProject() *ProjectInfoTeamProject { return v.Project }

// ProjectInfoTeamProject includes the requested fields of the GraphQL type Project.
type ProjectInfoTeamProject struct {
	ProjectInfo `json:"-"`
}

// GetId returns ProjectInfoTeamProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfoTeamProject) GetId() uuid.UUID { return v.ProjectInfo.Id }

// GetName returns ProjectInfoTeamProject.Name, and is useful for accessing the field via an interface.
func (v *ProjectInfoTeamProject) GetName() string { return v.ProjectInfo.Name }

// GetCreatedAt returns ProjectInfoTeamProject.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectInfoTeamProject) GetCreatedAt() time.Time { return v.ProjectInfo.CreatedAt }

// GetUpdatedAt returns ProjectInfoTeamProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectInfoTeamProject) GetUpdatedAt() time.Time { return v.ProjectInfo.UpdatedAt }

// GetStatus returns ProjectInfoTeamProject.Status, and is useful for accessing the field via an interface.
func (v *ProjectInfoTeamProject) GetStatus() ProjectStatus { return v.ProjectInfo.Status }

// GetBuild returns ProjectInfoTeamProject.Build, and is useful for accessing the field via an interface.
func (v *ProjectInfoTeamProject) GetBuild() *ProjectInfoBuild { return v.ProjectInfo.Build }

// GetDeploys returns ProjectInfoTeamProject.Deploys, and is useful for accessing the field via an interface.
func (v *ProjectInfoTeamProject) GetDeploys() ProjectInfoDeploysDeployConnection {
	return v.ProjectInfo.Deploys
}

// GetWorkflow returns ProjectInfoTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *ProjectInfoTeamProject) GetWorkflow() *ProjectInfoWorkflow { return v.ProjectInfo.Workflow }

// GetJobs returns ProjectInfoTeamProject.Jobs, and is useful for accessing the field via an interface.
func (v *ProjectInfoTeamProject) GetJobs() []ProjectInfoJobsJob { return v.ProjectInfo.Jobs }

// GetBlueprint returns ProjectInfoTeamProject.Blueprint, and is useful for accessing the field via an interface.
func (v *ProjectInfoTeamProject) GetBlueprint() *ProjectInfoBlueprint { return v.ProjectInfo.Blueprint }

func (v *ProjectInfoTeamProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectInfoTeamProject
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectInfoTeamProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectInfoTeamProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Status ProjectStatus `json:"status"`

	Build *ProjectInfoBuild `json:"build,omitempty"`

	Deploys ProjectInfoDeploysDeployConnection `json:"deploys"`

	Workflow *ProjectInfoWorkflow `json:"workflow,omitempty"`

	Jobs []ProjectInfoJobsJob `json:"jobs"`

	Blueprint *ProjectInfoBlueprint `json:"blueprint,omitempty"`
}

func (v *ProjectInfoTeamProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectInfoTeamProject) __premarshalJSON() (*__premarshalProjectInfoTeamProject, error) {
	var retval __premarshalProjectInfoTeamProject

	retval.Id = v.ProjectInfo.Id
	retval.Name = v.ProjectInfo.Name
	retval.CreatedAt = v.ProjectInfo.CreatedAt
	retval.UpdatedAt = v.ProjectInfo.UpdatedAt
	retval.Status = v.ProjectInfo.Status
	retval.Build = v.ProjectInfo.Build
	retval.Deploys = v.ProjectInfo.Deploys
	retval.Workflow = v.ProjectInfo.Workflow
	retval.Jobs = v.ProjectInfo.Jobs
	retval.Blueprint = v.ProjectInfo.Blueprint
	return &retval, nil
}

// ProjectInfoWorkflow includes the requested fields of the GraphQL type Workflow.
type ProjectInfoWorkflow struct {
	Id   uuid.UUID                                    `json:"id"`
	Runs ProjectInfoWorkflowRunsWorkflowRunConnection `json:"runs"`
}

// GetId returns ProjectInfoWorkflow.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflow) GetId() uuid.UUID { return v.Id }

// GetRuns returns ProjectInfoWorkflow.Runs, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflow) GetRuns() ProjectInfoWorkflowRunsWorkflowRunConnection { return v.Runs }

// ProjectInfoWorkflowRunsWorkflowRunConnection includes the requested fields of the GraphQL type WorkflowRunConnection.
type ProjectInfoWorkflowRunsWorkflowRunConnection struct {
	Nodes []ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun `json:"nodes"`
}

// GetNodes returns ProjectInfoWorkflowRunsWorkflowRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnection) GetNodes() []ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun {
	return v.Nodes
}

// ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun struct {
	WorkflowRunDetail `json:"-"`
}

// GetFinishedAt returns ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.FinishedAt, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetFinishedAt() *time.Time {
	return v.WorkflowRunDetail.FinishedAt
}

// GetSteps returns ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetSteps() []*WorkflowRunDetailStepsWorkflowRunStep {
	return v.WorkflowRunDetail.Steps
}

// GetId returns ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetId() uuid.UUID {
	return v.WorkflowRunDetail.WorkflowRunListItem.Id
}

// GetSequence returns ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetSequence() int {
	return v.WorkflowRunDetail.WorkflowRunListItem.Sequence
}

// GetStatus returns ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.WorkflowRunDetail.WorkflowRunListItem.Status
}

// GetCreatedAt returns ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetCreatedAt() time.Time {
	return v.WorkflowRunDetail.WorkflowRunListItem.CreatedAt
}

func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun struct {
	FinishedAt *time.Time `json:"finishedAt,omitempty"`

	Steps []json.RawMessage `json:"steps,omitempty"`

	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) __premarshalJSON() (*__premarshalProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun, error) {
	var retval __premarshalProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun

	retval.FinishedAt = v.WorkflowRunDetail.FinishedAt
	{

		dst := &retval.Steps
		src := v.WorkflowRunDetail.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if src != nil {
				var err error
				*dst, err = __marshalWorkflowRunDetailStepsWorkflowRunStep(
					src)
				if err != nil {
					return nil, fmt.Errorf(
						"unable to marshal ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.WorkflowRunDetail.Steps: %w", err)
				}
			}
		}
	}
	retval.Id = v.WorkflowRunDetail.WorkflowRunListItem.Id
	retval.Sequence = v.WorkflowRunDetail.WorkflowRunListItem.Sequence
	retval.Status = v.WorkflowRunDetail.WorkflowRunListItem.Status
	retval.CreatedAt = v.WorkflowRunDetail.WorkflowRunListItem.CreatedAt
	return &retval, nil
}

// ProjectLinkDetail includes the GraphQL fields of ProjectLink requested by the fragment ProjectLinkDetail.
type ProjectLinkDetail struct {
	Id        uuid.UUID                                `json:"id"`
	Project   ProjectLinkDetailProject                 `json:"project"`
	Provider  ProjectLinkDetailProviderProject         `json:"provider"`
	LinkType  ProjectLinkType                          `json:"linkType"`
	EnvPrefix *string                                  `json:"envPrefix,omitempty"`
	Envs      []ProjectLinkDetailEnvsProjectLinkEnvVar `json:"envs"`
}

// GetId returns ProjectLinkDetail.Id, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetail) GetId() uuid.UUID { return v.Id }

// GetProject returns ProjectLinkDetail.Project, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetail) GetProject() ProjectLinkDetailProject { return v.Project }

// GetProvider returns ProjectLinkDetail.Provider, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetail) GetProvider() ProjectLinkDetailProviderProject { return v.Provider }

// GetLinkType returns ProjectLinkDetail.LinkType, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetail) GetLinkType() ProjectLinkType { return v.LinkType }

// GetEnvPrefix returns ProjectLinkDetail.EnvPrefix, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetail) GetEnvPrefix() *string { return v.EnvPrefix }

// GetEnvs returns ProjectLinkDetail.Envs, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetail) GetEnvs() []ProjectLinkDetailEnvsProjectLinkEnvVar { return v.Envs }

// ProjectLinkDetailEnvsProjectLinkEnvVar includes the requested fields of the GraphQL type ProjectLinkEnvVar.
type ProjectLinkDetailEnvsProjectLinkEnvVar struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// GetName returns ProjectLinkDetailEnvsProjectLinkEnvVar.Name, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetailEnvsProjectLinkEnvVar) GetName() *string { return v.Name }

// GetValue returns ProjectLinkDetailEnvsProjectLinkEnvVar.Value, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetailEnvsProjectLinkEnvVar) GetValue() *string { return v.Value }

// ProjectLinkDetailProject includes the requested fields of the GraphQL type Project.
type ProjectLinkDetailProject struct {
	ProjectWithName `json:"-"`
}

// GetId returns ProjectLinkDetailProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetailProject) GetId() uuid.UUID { return v.ProjectWithName.Id }

// GetName returns ProjectLinkDetailProject.Name, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetailProject) GetName() string { return v.ProjectWithName.Name }

func (v *ProjectLinkDetailProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectLinkDetailProject
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectLinkDetailProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithName)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectLinkDetailProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *ProjectLinkDetailProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectLinkDetailProject) __premarshalJSON() (*__premarshalProjectLinkDetailProject, error) {
	var retval __premarshalProjectLinkDetailProject

	retval.Id = v.ProjectWithName.Id
	retval.Name = v.ProjectWithName.Name
	return &retval, nil
}

// ProjectLinkDetailProviderProject includes the requested fields of the GraphQL type Project.
type ProjectLinkDetailProviderProject struct {
	ProjectWithName `json:"-"`
}

// GetId returns ProjectLinkDetailProviderProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetailProviderProject) GetId() uuid.UUID { return v.ProjectWithName.Id }

// GetName returns ProjectLinkDetailProviderProject.Name, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetailProviderProject) GetName() string { return v.ProjectWithName.Name }

func (v *ProjectLinkDetailProviderProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectLinkDetailProviderProject
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectLinkDetailProviderProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithName)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectLinkDetailProviderProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *ProjectLinkDetailProviderProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectLinkDetailProviderProject) __premarshalJSON() (*__premarshalProjectLinkDetailProviderProject, error) {
	var retval __premarshalProjectLinkDetailProviderProject

	retval.Id = v.ProjectWithName.Id
	retval.Name = v.ProjectWithName.Name
	return &retval, nil
}

type ProjectLinkInput struct {
	ProjectId  uuid.UUID       `json:"projectId"`
	ProviderId uuid.UUID       `json:"providerId"`
	LinkType   ProjectLinkType `json:"linkType"`
	EnvPrefix  *string         `json:"envPrefix,omitempty"`
}

// GetProjectId returns ProjectLinkInput.ProjectId, and is useful for accessing the field via an interface.
func (v *ProjectLinkInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetProviderId returns ProjectLinkInput.ProviderId, and is useful for accessing the field via an interface.
func (v *ProjectLinkInput) GetProviderId() uuid.UUID { return v.ProviderId }

// GetLinkType returns ProjectLinkInput.LinkType, and is useful for accessing the field via an interface.
func (v *ProjectLinkInput) GetLinkType() ProjectLinkType { return v.LinkType }

// GetEnvPrefix returns ProjectLinkInput.EnvPrefix, and is useful for accessing the field via an interface.
func (v *ProjectLinkInput) GetEnvPrefix() *string { return v.EnvPrefix }

type ProjectLinkType string

const (
	ProjectLinkTypeUnknown  ProjectLinkType = "UNKNOWN"
	ProjectLinkTypeDatabase ProjectLinkType = "DATABASE"
)

// projectLinkedProjectsResponse is returned by projectLinkedProjects on success.
type ProjectLinkedProjectsResponse struct {
	Team *ProjectLinkedProjectsTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectLinkedProjectsResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectLinkedProjectsResponse) GetTeam() *ProjectLinkedProjectsTeam { return v.Team }

// ProjectLinkedProjectsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectLinkedProjectsTeam struct {
	Id      uuid.UUID                         `json:"id"`
	Project *ProjectLinkedProjectsTeamProject `json:"project,omitempty"`
}

// GetId returns ProjectLinkedProjectsTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectLinkedProjectsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns ProjectLinkedProjectsTeam.Project, and is useful for accessing the field via an interface.
func (v *ProjectLinkedProjectsTeam) GetProject() *ProjectLinkedProjectsTeamProject { return v.Project }

// ProjectLinkedProjectsTeamProject includes the requested fields of the GraphQL type Project.
type ProjectLinkedProjectsTeamProject struct {
	Id             uuid.UUID                                                           `json:"id"`
	LinkedProjects ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnection `json:"linkedProjects"`
}

// GetId returns ProjectLinkedProjectsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectLinkedProjectsTeamProject) GetId() uuid.UUID { return v.Id }

// GetLinkedProjects returns ProjectLinkedProjectsTeamProject.LinkedProjects, and is useful for accessing the field via an interface.
func (v *ProjectLinkedProjectsTeamProject) GetLinkedProjects() ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnection {
	return v.LinkedProjects
}

// ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnection includes the requested fields of the GraphQL type ProjectLinkConnection.
type ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnection struct {
	Nodes []ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink `json:"nodes"`
}

// GetNodes returns ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnection) GetNodes() []ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink {
	return v.Nodes
}

// ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink includes the requested fields of the GraphQL type ProjectLink.
type ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink struct {
	ProjectLinkDetail `json:"-"`
}

// GetId returns ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink.Id, and is useful for accessing the field via an interface.
func (v *ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) GetId() uuid.UUID {
	return v.ProjectLinkDetail.Id
}

// GetProject returns ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink.Project, and is useful for accessing the field via an interface.
func (v *ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) GetProject() ProjectLinkDetailProject {
	return v.ProjectLinkDetail.Project
}

// GetProvider returns ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink.Provider, and is useful for accessing the field via an interface.
func (v *ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) GetProvider() ProjectLinkDetailProviderProject {
	return v.ProjectLinkDetail.Provider
}

// GetLinkType returns ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink.LinkType, and is useful for accessing the field via an interface.
func (v *ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) GetLinkType() ProjectLinkType {
	return v.ProjectLinkDetail.LinkType
}

// GetEnvPrefix returns ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink.EnvPrefix, and is useful for accessing the field via an interface.
func (v *ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) GetEnvPrefix() *string {
	return v.ProjectLinkDetail.EnvPrefix
}

// GetEnvs returns ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink.Envs, and is useful for accessing the field via an interface.
func (v *ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) GetEnvs() []ProjectLinkDetailEnvsProjectLinkEnvVar {
	return v.ProjectLinkDetail.Envs
}

func (v *ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectLinkDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink struct {
	Id uuid.UUID `json:"id"`

	Project ProjectLinkDetailProject `json:"project"`

	Provider ProjectLinkDetailProviderProject `json:"provider"`

	LinkType ProjectLinkType `json:"linkType"`

	EnvPrefix *string `json:"envPrefix,omitempty"`

	Envs []ProjectLinkDetailEnvsProjectLinkEnvVar `json:"envs"`
}

func (v *ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) __premarshalJSON() (*__premarshalProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink, error) {
	var retval __premarshalProjectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink

	retval.Id = v.ProjectLinkDetail.Id
	retval.Project = v.ProjectLinkDetail.Project
	retval.Provider = v.ProjectLinkDetail.Provider
	retval.LinkType = v.ProjectLinkDetail.LinkType
	retval.EnvPrefix = v.ProjectLinkDetail.EnvPrefix
	retval.Envs = v.ProjectLinkDetail.Envs
	return &retval, nil
}

// ProjectOutput includes the GraphQL fields of Project requested by the fragment ProjectOutput.
type ProjectOutput struct {
	Output *ProjectOutputOutputProjectOutput `json:"output,omitempty"`
}

// GetOutput returns ProjectOutput.Output, and is useful for accessing the field via an interface.
func (v *ProjectOutput) GetOutput() *ProjectOutputOutputProjectOutput { return v.Output }

// ProjectOutputOutputProjectOutput includes the requested fields of the GraphQL type ProjectOutput.
type ProjectOutputOutputProjectOutput struct {
	Entries []ProjectOutputOutputProjectOutputEntriesProjectOutputEntry `json:"entries"`
}

// GetEntries returns ProjectOutputOutputProjectOutput.Entries, and is useful for accessing the field via an interface.
func (v *ProjectOutputOutputProjectOutput) GetEntries() []ProjectOutputOutputProjectOutputEntriesProjectOutputEntry {
	return v.Entries
}

// ProjectOutputOutputProjectOutputEntriesProjectOutputEntry includes the requested fields of the GraphQL type ProjectOutputEntry.
type ProjectOutputOutputProjectOutputEntriesProjectOutputEntry struct {
	OutputEntryDetail `json:"-"`
}

// GetDisplayName returns ProjectOutputOutputProjectOutputEntriesProjectOutputEntry.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectOutputOutputProjectOutputEntriesProjectOutputEntry) GetDisplayName() *string {
	return v.OutputEntryDetail.DisplayName
}

// GetName returns ProjectOutputOutputProjectOutputEntriesProjectOutputEntry.Name, and is useful for accessing the field via an interface.
func (v *ProjectOutputOutputProjectOutputEntriesProjectOutputEntry) GetName() *string {
	return v.OutputEntryDetail.Name
}

// GetType returns ProjectOutputOutputProjectOutputEntriesProjectOutputEntry.Type, and is useful for accessing the field via an interface.
func (v *ProjectOutputOutputProjectOutputEntriesProjectOutputEntry) GetType() *VariableType {
	return v.OutputEntryDetail.Type
}

// GetValue returns ProjectOutputOutputProjectOutputEntriesProjectOutputEntry.Value, and is useful for accessing the field via an interface.
func (v *ProjectOutputOutputProjectOutputEntriesProjectOutputEntry) GetValue() *string {
	return v.OutputEntryDetail.Value
}

func (v *ProjectOutputOutputProjectOutputEntriesProjectOutputEntry) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectOutputOutputProjectOutputEntriesProjectOutputEntry
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectOutputOutputProjectOutputEntriesProjectOutputEntry = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.OutputEntryDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectOutputOutputProjectOutputEntriesProjectOutputEntry struct {
	DisplayName *string `json:"displayName,omitempty"`

	Name *string `json:"name,omitempty"`

	Type *VariableType `json:"type,omitempty"`

	Value *string `json:"value,omitempty"`
}

func (v *ProjectOutputOutputProjectOutputEntriesProjectOutputEntry) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectOutputOutputProjectOutputEntriesProjectOutputEntry) __premarshalJSON() (*__premarshalProjectOutputOutputProjectOutputEntriesProjectOutputEntry, error) {
	var retval __premarshalProjectOutputOutputProjectOutputEntriesProjectOutputEntry

	retval.DisplayName = v.OutputEntryDetail.DisplayName
	retval.Name = v.OutputEntryDetail.Name
	retval.Type = v.OutputEntryDetail.Type
	retval.Value = v.OutputEntryDetail.Value
	return &retval, nil
}

// projectOutputResponse is returned by projectOutput on success.
type ProjectOutputResponse struct {
	Team *ProjectOutputTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectOutputResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectOutputResponse) GetTeam() *ProjectOutputTeam { return v.Team }

// ProjectOutputTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectOutputTeam struct {
	Id      uuid.UUID                 `json:"id"`
	Project *ProjectOutputTeamProject `json:"project,omitempty"`
}

// GetId returns ProjectOutputTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectOutputTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns ProjectOutputTeam.Project, and is useful for accessing the field via an interface.
func (v *ProjectOutputTeam) GetProject() *ProjectOutputTeamProject { return v.Project }

// ProjectOutputTeamProject includes the requested fields of the GraphQL type Project.
type ProjectOutputTeamProject struct {
	ProjectOutput `json:"-"`
}

// GetOutput returns ProjectOutputTeamProject.Output, and is useful for accessing the field via an interface.
func (v *ProjectOutputTeamProject) GetOutput() *ProjectOutputOutputProjectOutput {
	return v.ProjectOutput.Output
}

func (v *ProjectOutputTeamProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectOutputTeamProject
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectOutputTeamProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectOutput)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectOutputTeamProject struct {
	Output *ProjectOutputOutputProjectOutput `json:"output,omitempty"`
}

func (v *ProjectOutputTeamProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectOutputTeamProject) __premarshalJSON() (*__premarshalProjectOutputTeamProject, error) {
	var retval __premarshalProjectOutputTeamProject

	retval.Output = v.ProjectOutput.Output
	return &retval, nil
}

// projectOutputsResponse is returned by projectOutputs on success.
type ProjectOutputsResponse struct {
	Team *ProjectOutputsTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectOutputsResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectOutputsResponse) GetTeam() *ProjectOutputsTeam { return v.Team }

// ProjectOutputsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectOutputsTeam struct {
	Id      uuid.UUID                  `json:"id"`
	Project *ProjectOutputsTeamProject `json:"project,omitempty"`
}

// GetId returns ProjectOutputsTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectOutputsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns ProjectOutputsTeam.Project, and is useful for accessing the field via an interface.
func (v *ProjectOutputsTeam) GetProject() *ProjectOutputsTeamProject { return v.Project }

// ProjectOutputsTeamProject includes the requested fields of the GraphQL type Project.
type ProjectOutputsTeamProject struct {
	Id        uuid.UUID                           `json:"id"`
	Status    ProjectStatus                       `json:"status"`
	Connector *ProjectOutputsTeamProjectConnector `json:"connector,omitempty"`
	Workflow  *ProjectOutputsTeamProjectWorkflow  `json:"workflow,omitempty"`
}

// GetId returns ProjectOutputsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectOutputsTeamProject) GetId() uuid.UUID { return v.Id }

// GetStatus returns ProjectOutputsTeamProject.Status, and is useful for accessing the field via an interface.
func (v *ProjectOutputsTeamProject) GetStatus() ProjectStatus { return v.Status }

// GetConnector returns ProjectOutputsTeamProject.Connector, and is useful for accessing the field via an interface.
func (v *ProjectOutputsTeamProject) GetConnector() *ProjectOutputsTeamProjectConnector {
	return v.Connector
}

// GetWorkflow returns ProjectOutputsTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *ProjectOutputsTeamProject) GetWorkflow() *ProjectOutputsTeamProjectWorkflow {
	return v.Workflow
}

// ProjectOutputsTeamProjectConnector includes the requested fields of the GraphQL type ProjectConnector.
type ProjectOutputsTeamProjectConnector struct {
	Type   *ProjectConnectorType                                           `json:"type,omitempty"`
	Fields []ProjectOutputsTeamProjectConnectorFieldsProjectConnectorField `json:"fields"`
}

// GetType returns ProjectOutputsTeamProjectConnector.Type, and is useful for accessing the field via an interface.
func (v *ProjectOutputsTeamProjectConnector) GetType() *ProjectConnectorType { return v.Type }

// GetFields returns ProjectOutputsTeamProjectConnector.Fields, and is useful for accessing the field via an interface.
func (v *ProjectOutputsTeamProjectConnector) GetFields() []ProjectOutputsTeamProjectConnectorFieldsProjectConnectorField {
	return v.Fields
}

// ProjectOutputsTeamProjectConnectorFieldsProjectConnectorField includes the requested fields of the GraphQL type ProjectConnectorField.
type ProjectOutputsTeamProjectConnectorFieldsProjectConnectorField struct {
	Type        *VariableType `json:"type,omitempty"`
	Name        *string       `json:"name,omitempty"`
	DisplayName *string       `json:"displayName,omitempty"`
	Value       *string       `json:"value,omitempty"`
}

// GetType returns ProjectOutputsTeamProjectConnectorFieldsProjectConnectorField.Type, and is useful for accessing the field via an interface.
func (v *ProjectOutputsTeamProjectConnectorFieldsProjectConnectorField) GetType() *VariableType {
	return v.Type
}

// GetName returns ProjectOutputsTeamProjectConnectorFieldsProjectConnectorField.Name, and is useful for accessing the field via an interface.
func (v *ProjectOutputsTeamProjectConnectorFieldsProjectConnectorField) GetName() *string {
	return v.Name
}

// GetDisplayName returns ProjectOutputsTeamProjectConnectorFieldsProjectConnectorField.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectOutputsTeamProjectConnectorFieldsProjectConnectorField) GetDisplayName() *string {
	return v.DisplayName
}

// GetValue returns ProjectOutputsTeamProjectConnectorFieldsProjectConnectorField.Value, and is useful for accessing the field via an interface.
func (v *ProjectOutputsTeamProjectConnectorFieldsProjectConnectorField) GetValue() *string {
	return v.Value
}

// ProjectOutputsTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type ProjectOutputsTeamProjectWorkflow struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns ProjectOutputsTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *ProjectOutputsTeamProjectWorkflow) GetId() uuid.UUID { return v.Id }

// ProjectSourceDetail includes the GraphQL fields of Source requested by the fragment ProjectSourceDetail.
type ProjectSourceDetail struct {
	Git               *ProjectSourceDetailGitGitSource                             `json:"git,omitempty"`
	TerraformModule   *ProjectSourceDetailTerraformModuleTerraformModuleSource     `json:"terraformModule,omitempty"`
	HelmRepository    *ProjectSourceDetailHelmRepositoryHelmRepositorySource       `json:"helmRepository,omitempty"`
	ContainerRegistry *ProjectSourceDetailContainerRegistryContainerRegistrySource `json:"containerRegistry,omitempty"`
}

// GetGit returns ProjectSourceDetail.Git, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetail) GetGit() *ProjectSourceDetailGitGitSource { return v.Git }

// GetTerraformModule returns ProjectSourceDetail.TerraformModule, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetail) GetTerraformModule() *ProjectSourceDetailTerraformModuleTerraformModuleSource {
	return v.TerraformModule
}

// GetHelmRepository returns ProjectSourceDetail.HelmRepository, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetail) GetHelmRepository() *ProjectSourceDetailHelmRepositoryHelmRepositorySource {
	return v.HelmRepository
}

// GetContainerRegistry returns ProjectSourceDetail.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetail) GetContainerRegistry() *ProjectSourceDetailContainerRegistryContainerRegistrySource {
	return v.ContainerRegistry
}

// ProjectSourceDetailContainerRegistryContainerRegistrySource includes the requested fields of the GraphQL type ContainerRegistrySource.
type ProjectSourceDetailContainerRegistryContainerRegistrySource struct {
	RegistryId  *uuid.UUID `json:"registryId,omitempty"`
	RegistryUrl *string    `json:"registryUrl,omitempty"`
	Repository  string     `json:"repository"`
	Tag         *string    `json:"tag,omitempty"`
	Digest      *string    `json:"digest,omitempty"`
}

// GetRegistryId returns ProjectSourceDetailContainerRegistryContainerRegistrySource.RegistryId, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailContainerRegistryContainerRegistrySource) GetRegistryId() *uuid.UUID {
	return v.RegistryId
}

// GetRegistryUrl returns ProjectSourceDetailContainerRegistryContainerRegistrySource.RegistryUrl, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailContainerRegistryContainerRegistrySource) GetRegistryUrl() *string {
	return v.RegistryUrl
}

// GetRepository returns ProjectSourceDetailContainerRegistryContainerRegistrySource.Repository, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailContainerRegistryContainerRegistrySource) GetRepository() string {
	return v.Repository
}

// GetTag returns ProjectSourceDetailContainerRegistryContainerRegistrySource.Tag, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailContainerRegistryContainerRegistrySource) GetTag() *string { return v.Tag }

// GetDigest returns ProjectSourceDetailContainerRegistryContainerRegistrySource.Digest, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailContainerRegistryContainerRegistrySource) GetDigest() *string {
	return v.Digest
}

// ProjectSourceDetailGitGitSource includes the requested fields of the GraphQL type GitSource.
type ProjectSourceDetailGitGitSource struct {
	Repository  string                                      `json:"repository"`
	Ref         *string                                     `json:"ref,omitempty"`
	Path        *string                                     `json:"path,omitempty"`
	Integration *ProjectSourceDetailGitGitSourceIntegration `json:"integration,omitempty"`
}

// GetRepository returns ProjectSourceDetailGitGitSource.Repository, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSource) GetRepository() string { return v.Repository }

// GetRef returns ProjectSourceDetailGitGitSource.Ref, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSource) GetRef() *string { return v.Ref }

// GetPath returns ProjectSourceDetailGitGitSource.Path, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSource) GetPath() *string { return v.Path }

// GetIntegration returns ProjectSourceDetailGitGitSource.Integration, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSource) GetIntegration() *ProjectSourceDetailGitGitSourceIntegration {
	return v.Integration
}

// ProjectSourceDetailGitGitSourceIntegration includes the requested fields of the GraphQL type GitSourceIntegration.
type ProjectSourceDetailGitGitSourceIntegration struct {
	GithubInstallationId *int       `json:"githubInstallationId,omitempty"`
	GithubIntegrationId  *uuid.UUID `json:"githubIntegrationId,omitempty"`
	GitlabIntegrationId  *uuid.UUID `json:"gitlabIntegrationId,omitempty"`
}

// GetGithubInstallationId returns ProjectSourceDetailGitGitSourceIntegration.GithubInstallationId, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSourceIntegration) GetGithubInstallationId() *int {
	return v.GithubInstallationId
}

// GetGithubIntegrationId returns ProjectSourceDetailGitGitSourceIntegration.GithubIntegrationId, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSourceIntegration) GetGithubIntegrationId() *uuid.UUID {
	return v.GithubIntegrationId
}

// GetGitlabIntegrationId returns ProjectSourceDetailGitGitSourceIntegration.GitlabIntegrationId, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSourceIntegration) GetGitlabIntegrationId() *uuid.UUID {
	return v.GitlabIntegrationId
}

// ProjectSourceDetailHelmRepositoryHelmRepositorySource includes the requested fields of the GraphQL type HelmRepositorySource.
type ProjectSourceDetailHelmRepositoryHelmRepositorySource struct {
	RepositoryUrl string  `json:"repositoryUrl"`
	Chart         string  `json:"chart"`
	Version       *string `json:"version,omitempty"`
}

// GetRepositoryUrl returns ProjectSourceDetailHelmRepositoryHelmRepositorySource.RepositoryUrl, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailHelmRepositoryHelmRepositorySource) GetRepositoryUrl() string {
	return v.RepositoryUrl
}

// GetChart returns ProjectSourceDetailHelmRepositoryHelmRepositorySource.Chart, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailHelmRepositoryHelmRepositorySource) GetChart() string { return v.Chart }

// GetVersion returns ProjectSourceDetailHelmRepositoryHelmRepositorySource.Version, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailHelmRepositoryHelmRepositorySource) GetVersion() *string {
	return v.Version
}

// ProjectSourceDetailTerraformModuleTerraformModuleSource includes the requested fields of the GraphQL type TerraformModuleSource.
type ProjectSourceDetailTerraformModuleTerraformModuleSource struct {
	// Any valid Terraform Module source: https://developer.hashicorp.com/terraform/language/modules/sources
	Source string `json:"source"`
	// The version field is only applicable to Terraform Registry sources
	Version *string `json:"version,omitempty"`
	// Configuring an integration provides authentication to retrieve the module from private sources
	Integration *ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegration `json:"integration,omitempty"`
}

// GetSource returns ProjectSourceDetailTerraformModuleTerraformModuleSource.Source, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailTerraformModuleTerraformModuleSource) GetSource() string { return v.Source }

// GetVersion returns ProjectSourceDetailTerraformModuleTerraformModuleSource.Version, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailTerraformModuleTerraformModuleSource) GetVersion() *string {
	return v.Version
}

// GetIntegration returns ProjectSourceDetailTerraformModuleTerraformModuleSource.Integration, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailTerraformModuleTerraformModuleSource) GetIntegration() *ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegration {
	return v.Integration
}

// ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegration includes the requested fields of the GraphQL type TerraformModuleSourceIntegration.
type ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegration struct {
	Git *ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegrationGitGitSourceIntegration `json:"git,omitempty"`
}

// GetGit returns ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegration.Git, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegration) GetGit() *ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegrationGitGitSourceIntegration {
	return v.Git
}

// ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegrationGitGitSourceIntegration includes the requested fields of the GraphQL type GitSourceIntegration.
type ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegrationGitGitSourceIntegration struct {
	GithubInstallationId *int `json:"githubInstallationId,omitempty"`
}

// GetGithubInstallationId returns ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegrationGitGitSourceIntegration.GithubInstallationId, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegrationGitGitSourceIntegration) GetGithubInstallationId() *int {
	return v.GithubInstallationId
}

type ProjectStatus string

const (
	ProjectStatusUnknown               ProjectStatus = "UNKNOWN"
	ProjectStatusDraft                 ProjectStatus = "DRAFT"
	ProjectStatusPaused                ProjectStatus = "PAUSED"
	ProjectStatusInactive              ProjectStatus = "INACTIVE"
	ProjectStatusDestroying            ProjectStatus = "DESTROYING"
	ProjectStatusJobRunStarting        ProjectStatus = "JOB_RUN_STARTING"
	ProjectStatusJobRunRunning         ProjectStatus = "JOB_RUN_RUNNING"
	ProjectStatusJobRunFailed          ProjectStatus = "JOB_RUN_FAILED"
	ProjectStatusJobRunSucceeded       ProjectStatus = "JOB_RUN_SUCCEEDED"
	ProjectStatusJobRunCancelled       ProjectStatus = "JOB_RUN_CANCELLED"
	ProjectStatusJobRunPendingApproval ProjectStatus = "JOB_RUN_PENDING_APPROVAL"
	ProjectStatusDeployPending         ProjectStatus = "DEPLOY_PENDING"
	ProjectStatusDeployInProgress      ProjectStatus = "DEPLOY_IN_PROGRESS"
	ProjectStatusDeployFailed          ProjectStatus = "DEPLOY_FAILED"
	ProjectStatusDeploySucceeded       ProjectStatus = "DEPLOY_SUCCEEDED"
	ProjectStatusDeployStopped         ProjectStatus = "DEPLOY_STOPPED"
	ProjectStatusDeployHealthy         ProjectStatus = "DEPLOY_HEALTHY"
	ProjectStatusDeployCrashing        ProjectStatus = "DEPLOY_CRASHING"
	ProjectStatusBuildPending          ProjectStatus = "BUILD_PENDING"
	ProjectStatusBuildInProgress       ProjectStatus = "BUILD_IN_PROGRESS"
	ProjectStatusBuildFailed           ProjectStatus = "BUILD_FAILED"
	ProjectStatusBuildSucceeded        ProjectStatus = "BUILD_SUCCEEDED"
	ProjectStatusBuildAborted          ProjectStatus = "BUILD_ABORTED"
	ProjectStatusContainerPulling      ProjectStatus = "CONTAINER_PULLING"
	ProjectStatusHealthChecking        ProjectStatus = "HEALTH_CHECKING"
	ProjectStatusNodeProvisioning      ProjectStatus = "NODE_PROVISIONING"
	ProjectStatusPendingHealthyCluster ProjectStatus = "PENDING_HEALTHY_CLUSTER"
)

type ProjectStatusCriterion struct {
	Value []string `json:"value"`
}

// GetValue returns ProjectStatusCriterion.Value, and is useful for accessing the field via an interface.
func (v *ProjectStatusCriterion) GetValue() []string { return v.Value }

// projectStatusOnlyResponse is returned by projectStatusOnly on success.
type ProjectStatusOnlyResponse struct {
	Team *ProjectStatusOnlyTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectStatusOnlyResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectStatusOnlyResponse) GetTeam() *ProjectStatusOnlyTeam { return v.Team }

// ProjectStatusOnlyTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectStatusOnlyTeam struct {
	Id      uuid.UUID                     `json:"id"`
	Project *ProjectStatusOnlyTeamProject `json:"project,omitempty"`
}

// GetId returns ProjectStatusOnlyTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectStatusOnlyTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns ProjectStatusOnlyTeam.Project, and is useful for accessing the field via an interface.
func (v *ProjectStatusOnlyTeam) GetProject() *ProjectStatusOnlyTeamProject { return v.Project }

// ProjectStatusOnlyTeamProject includes the requested fields of the GraphQL type Project.
type ProjectStatusOnlyTeamProject struct {
	Id     uuid.UUID     `json:"id"`
	Status ProjectStatus `json:"status"`
}

// GetId returns ProjectStatusOnlyTeamProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectStatusOnlyTeamProject) GetId() uuid.UUID { return v.Id }

// GetStatus returns ProjectStatusOnlyTeamProject.Status, and is useful for accessing the field via an interface.
func (v *ProjectStatusOnlyTeamProject) GetStatus() ProjectStatus { return v.Status }

// ProjectWithBlueprint includes the GraphQL fields of Project requested by the fragment ProjectWithBlueprint.
type ProjectWithBlueprint struct {
	Id        uuid.UUID                      `json:"id"`
	Blueprint *ProjectWithBlueprintBlueprint `json:"blueprint,omitempty"`
}

// GetId returns ProjectWithBlueprint.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprint) GetId() uuid.UUID { return v.Id }

// GetBlueprint returns ProjectWithBlueprint.Blueprint, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprint) GetBlueprint() *ProjectWithBlueprintBlueprint { return v.Blueprint }

// ProjectWithBlueprintBlueprint includes the requested fields of the GraphQL type Blueprint.
type ProjectWithBlueprintBlueprint struct {
	Id   uuid.UUID     `json:"id"`
	Type BlueprintType `json:"type"`
	// Query the revision history of this blueprint.
	Configuration ProjectWithBlueprintBlueprintConfiguration `json:"configuration"`
}

// GetId returns ProjectWithBlueprintBlueprint.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprintBlueprint) GetId() uuid.UUID { return v.Id }

// GetType returns ProjectWithBlueprintBlueprint.Type, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprintBlueprint) GetType() BlueprintType { return v.Type }

// GetConfiguration returns ProjectWithBlueprintBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprintBlueprint) GetConfiguration() ProjectWithBlueprintBlueprintConfiguration {
	return v.Configuration
}

// ProjectWithBlueprintBlueprintConfiguration includes the requested fields of the GraphQL type BlueprintConfiguration.
type ProjectWithBlueprintBlueprintConfiguration struct {
	// An identifier for this blueprint, unique within the owner's namespace.
	Slug string `json:"slug"`
	// A url for a logo image.
	LogoUrl *string `json:"logoUrl,omitempty"`
}

// GetSlug returns ProjectWithBlueprintBlueprintConfiguration.Slug, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprintBlueprintConfiguration) GetSlug() string { return v.Slug }

// GetLogoUrl returns ProjectWithBlueprintBlueprintConfiguration.LogoUrl, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprintBlueprintConfiguration) GetLogoUrl() *string { return v.LogoUrl }

// ProjectWithClusters includes the GraphQL fields of Project requested by the fragment ProjectWithClusters.
type ProjectWithClusters struct {
	Id       uuid.UUID                            `json:"id"`
	Clusters []ProjectWithClustersClustersCluster `json:"clusters"`
}

// GetId returns ProjectWithClusters.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithClusters) GetId() uuid.UUID { return v.Id }

// GetClusters returns ProjectWithClusters.Clusters, and is useful for accessing the field via an interface.
func (v *ProjectWithClusters) GetClusters() []ProjectWithClustersClustersCluster { return v.Clusters }

// ProjectWithClustersClustersCluster includes the requested fields of the GraphQL type Cluster.
type ProjectWithClustersClustersCluster struct {
	ClusterDetailV1 `json:"-"`
}

// GetId returns ProjectWithClustersClustersCluster.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetId() uuid.UUID { return v.ClusterDetailV1.Id }

// GetDisplayName returns ProjectWithClustersClustersCluster.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetDisplayName() string {
	return v.ClusterDetailV1.DisplayName
}

// GetState returns ProjectWithClustersClustersCluster.State, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetState() ClusterState { return v.ClusterDetailV1.State }

// GetConnected returns ProjectWithClustersClustersCluster.Connected, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetConnected() *bool { return v.ClusterDetailV1.Connected }

// GetCloudProvider returns ProjectWithClustersClustersCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetailV1.CloudProvider
}

// GetCreatedAt returns ProjectWithClustersClustersCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetCreatedAt() time.Time {
	return v.ClusterDetailV1.CreatedAt
}

// GetUpdatedAt returns ProjectWithClustersClustersCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetailV1.UpdatedAt
}

func (v *ProjectWithClustersClustersCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectWithClustersClustersCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectWithClustersClustersCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetailV1)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectWithClustersClustersCluster struct {
	Id uuid.UUID `json:"id"`

	DisplayName string `json:"displayName"`

	State ClusterState `json:"state"`

	Connected *bool `json:"connected,omitempty"`

	CloudProvider *CloudProvider `json:"cloudProvider,omitempty"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *ProjectWithClustersClustersCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectWithClustersClustersCluster) __premarshalJSON() (*__premarshalProjectWithClustersClustersCluster, error) {
	var retval __premarshalProjectWithClustersClustersCluster

	retval.Id = v.ClusterDetailV1.Id
	retval.DisplayName = v.ClusterDetailV1.DisplayName
	retval.State = v.ClusterDetailV1.State
	retval.Connected = v.ClusterDetailV1.Connected
	retval.CloudProvider = v.ClusterDetailV1.CloudProvider
	retval.CreatedAt = v.ClusterDetailV1.CreatedAt
	retval.UpdatedAt = v.ClusterDetailV1.UpdatedAt
	return &retval, nil
}

// ProjectWithDeploymentTime includes the GraphQL fields of Project requested by the fragment ProjectWithDeploymentTime.
type ProjectWithDeploymentTime struct {
	Id                   uuid.UUID                                      `json:"id"`
	DeploymentTimestamps *ProjectWithDeploymentTimeDeploymentTimestamps `json:"deploymentTimestamps,omitempty"`
	UpdatedAt            time.Time                                      `json:"updatedAt"`
}

// GetId returns ProjectWithDeploymentTime.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithDeploymentTime) GetId() uuid.UUID { return v.Id }

// GetDeploymentTimestamps returns ProjectWithDeploymentTime.DeploymentTimestamps, and is useful for accessing the field via an interface.
func (v *ProjectWithDeploymentTime) GetDeploymentTimestamps() *ProjectWithDeploymentTimeDeploymentTimestamps {
	return v.DeploymentTimestamps
}

// GetUpdatedAt returns ProjectWithDeploymentTime.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectWithDeploymentTime) GetUpdatedAt() time.Time { return v.UpdatedAt }

// ProjectWithDeploymentTimeDeploymentTimestamps includes the requested fields of the GraphQL type DeploymentTimestamps.
type ProjectWithDeploymentTimeDeploymentTimestamps struct {
	LastUpdatedAt *time.Time `json:"lastUpdatedAt,omitempty"`
}

// GetLastUpdatedAt returns ProjectWithDeploymentTimeDeploymentTimestamps.LastUpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectWithDeploymentTimeDeploymentTimestamps) GetLastUpdatedAt() *time.Time {
	return v.LastUpdatedAt
}

// ProjectWithName includes the GraphQL fields of Project requested by the fragment ProjectWithName.
type ProjectWithName struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectWithName.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithName) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectWithName.Name, and is useful for accessing the field via an interface.
func (v *ProjectWithName) GetName() string { return v.Name }

// ProjectWithStatus includes the GraphQL fields of Project requested by the fragment ProjectWithStatus.
type ProjectWithStatus struct {
	Id     uuid.UUID     `json:"id"`
	Status ProjectStatus `json:"status"`
}

// GetId returns ProjectWithStatus.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithStatus) GetId() uuid.UUID { return v.Id }

// GetStatus returns ProjectWithStatus.Status, and is useful for accessing the field via an interface.
func (v *ProjectWithStatus) GetStatus() ProjectStatus { return v.Status }

// projectsCountResponse is returned by projectsCount on success.
type ProjectsCountResponse struct {
	Team *ProjectsCountTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectsCountResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectsCountResponse) GetTeam() *ProjectsCountTeam { return v.Team }

// ProjectsCountTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectsCountTeam struct {
	Id       uuid.UUID                                   `json:"id"`
	Projects *ProjectsCountTeamProjectsProjectConnection `json:"projects,omitempty"`
}

// GetId returns ProjectsCountTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectsCountTeam) GetId() uuid.UUID { return v.Id }

// GetProjects returns ProjectsCountTeam.Projects, and is useful for accessing the field via an interface.
func (v *ProjectsCountTeam) GetProjects() *ProjectsCountTeamProjectsProjectConnection {
	return v.Projects
}

// ProjectsCountTeamProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type ProjectsCountTeamProjectsProjectConnection struct {
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns ProjectsCountTeamProjectsProjectConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectsCountTeamProjectsProjectConnection) GetTotalCount() int { return v.TotalCount }

// Filter a ProjectConnection result set.
type ProjectsInput struct {
	// Sorting is applied before pagination.
	Sort   *SortInput     `json:"sort,omitempty"`
	Page   *PageInput     `json:"page,omitempty"`
	Filter *ProjectFilter `json:"filter,omitempty"`
}

// GetSort returns ProjectsInput.Sort, and is useful for accessing the field via an interface.
func (v *ProjectsInput) GetSort() *SortInput { return v.Sort }

// GetPage returns ProjectsInput.Page, and is useful for accessing the field via an interface.
func (v *ProjectsInput) GetPage() *PageInput { return v.Page }

// GetFilter returns ProjectsInput.Filter, and is useful for accessing the field via an interface.
func (v *ProjectsInput) GetFilter() *ProjectFilter { return v.Filter }

// projectsWithBlueprintResponse is returned by projectsWithBlueprint on success.
type ProjectsWithBlueprintResponse struct {
	Team *ProjectsWithBlueprintTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectsWithBlueprintResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectsWithBlueprintResponse) GetTeam() *ProjectsWithBlueprintTeam { return v.Team }

// ProjectsWithBlueprintTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectsWithBlueprintTeam struct {
	Id       uuid.UUID                                           `json:"id"`
	Projects *ProjectsWithBlueprintTeamProjectsProjectConnection `json:"projects,omitempty"`
}

// GetId returns ProjectsWithBlueprintTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectsWithBlueprintTeam) GetId() uuid.UUID { return v.Id }

// GetProjects returns ProjectsWithBlueprintTeam.Projects, and is useful for accessing the field via an interface.
func (v *ProjectsWithBlueprintTeam) GetProjects() *ProjectsWithBlueprintTeamProjectsProjectConnection {
	return v.Projects
}

// ProjectsWithBlueprintTeamProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type ProjectsWithBlueprintTeamProjectsProjectConnection struct {
	Nodes []ProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetNodes returns ProjectsWithBlueprintTeamProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectsWithBlueprintTeamProjectsProjectConnection) GetNodes() []ProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// ProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type ProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject struct {
	ProjectWithBlueprint `json:"-"`
}

// GetId returns ProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject) GetId() uuid.UUID {
	return v.ProjectWithBlueprint.Id
}

// GetBlueprint returns ProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject.Blueprint, and is useful for accessing the field via an interface.
func (v *ProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject) GetBlueprint() *ProjectWithBlueprintBlueprint {
	return v.ProjectWithBlueprint.Blueprint
}

func (v *ProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithBlueprint)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject struct {
	Id uuid.UUID `json:"id"`

	Blueprint *ProjectWithBlueprintBlueprint `json:"blueprint,omitempty"`
}

func (v *ProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalProjectsWithBlueprintTeamProjectsProjectConnectionNodesProject

	retval.Id = v.ProjectWithBlueprint.Id
	retval.Blueprint = v.ProjectWithBlueprint.Blueprint
	return &retval, nil
}

// projectsWithDeploymentTimesResponse is returned by projectsWithDeploymentTimes on success.
type ProjectsWithDeploymentTimesResponse struct {
	Team *ProjectsWithDeploymentTimesTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectsWithDeploymentTimesResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectsWithDeploymentTimesResponse) GetTeam() *ProjectsWithDeploymentTimesTeam {
	return v.Team
}

// ProjectsWithDeploymentTimesTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectsWithDeploymentTimesTeam struct {
	Id       uuid.UUID                                                 `json:"id"`
	Projects *ProjectsWithDeploymentTimesTeamProjectsProjectConnection `json:"projects,omitempty"`
}

// GetId returns ProjectsWithDeploymentTimesTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectsWithDeploymentTimesTeam) GetId() uuid.UUID { return v.Id }

// GetProjects returns ProjectsWithDeploymentTimesTeam.Projects, and is useful for accessing the field via an interface.
func (v *ProjectsWithDeploymentTimesTeam) GetProjects() *ProjectsWithDeploymentTimesTeamProjectsProjectConnection {
	return v.Projects
}

// ProjectsWithDeploymentTimesTeamProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type ProjectsWithDeploymentTimesTeamProjectsProjectConnection struct {
	Nodes []ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetNodes returns ProjectsWithDeploymentTimesTeamProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectsWithDeploymentTimesTeamProjectsProjectConnection) GetNodes() []ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject struct {
	ProjectWithDeploymentTime `json:"-"`
}

// GetId returns ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject) GetId() uuid.UUID {
	return v.ProjectWithDeploymentTime.Id
}

// GetDeploymentTimestamps returns ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject.DeploymentTimestamps, and is useful for accessing the field via an interface.
func (v *ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject) GetDeploymentTimestamps() *ProjectWithDeploymentTimeDeploymentTimestamps {
	return v.ProjectWithDeploymentTime.DeploymentTimestamps
}

// GetUpdatedAt returns ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject) GetUpdatedAt() time.Time {
	return v.ProjectWithDeploymentTime.UpdatedAt
}

func (v *ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithDeploymentTime)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject struct {
	Id uuid.UUID `json:"id"`

	DeploymentTimestamps *ProjectWithDeploymentTimeDeploymentTimestamps `json:"deploymentTimestamps,omitempty"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalProjectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject

	retval.Id = v.ProjectWithDeploymentTime.Id
	retval.DeploymentTimestamps = v.ProjectWithDeploymentTime.DeploymentTimestamps
	retval.UpdatedAt = v.ProjectWithDeploymentTime.UpdatedAt
	return &retval, nil
}

// projectsWithStatusResponse is returned by projectsWithStatus on success.
type ProjectsWithStatusResponse struct {
	Team *ProjectsWithStatusTeam `json:"team,omitempty"`
}

// GetTeam returns ProjectsWithStatusResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectsWithStatusResponse) GetTeam() *ProjectsWithStatusTeam { return v.Team }

// ProjectsWithStatusTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ProjectsWithStatusTeam struct {
	Id       uuid.UUID                                        `json:"id"`
	Projects *ProjectsWithStatusTeamProjectsProjectConnection `json:"projects,omitempty"`
}

// GetId returns ProjectsWithStatusTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectsWithStatusTeam) GetId() uuid.UUID { return v.Id }

// GetProjects returns ProjectsWithStatusTeam.Projects, and is useful for accessing the field via an interface.
func (v *ProjectsWithStatusTeam) GetProjects() *ProjectsWithStatusTeamProjectsProjectConnection {
	return v.Projects
}

// ProjectsWithStatusTeamProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type ProjectsWithStatusTeamProjectsProjectConnection struct {
	Nodes []ProjectsWithStatusTeamProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetNodes returns ProjectsWithStatusTeamProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectsWithStatusTeamProjectsProjectConnection) GetNodes() []ProjectsWithStatusTeamProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// ProjectsWithStatusTeamProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type ProjectsWithStatusTeamProjectsProjectConnectionNodesProject struct {
	ProjectWithStatus `json:"-"`
}

// GetId returns ProjectsWithStatusTeamProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectsWithStatusTeamProjectsProjectConnectionNodesProject) GetId() uuid.UUID {
	return v.ProjectWithStatus.Id
}

// GetStatus returns ProjectsWithStatusTeamProjectsProjectConnectionNodesProject.Status, and is useful for accessing the field via an interface.
func (v *ProjectsWithStatusTeamProjectsProjectConnectionNodesProject) GetStatus() ProjectStatus {
	return v.ProjectWithStatus.Status
}

func (v *ProjectsWithStatusTeamProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectsWithStatusTeamProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectsWithStatusTeamProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithStatus)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectsWithStatusTeamProjectsProjectConnectionNodesProject struct {
	Id uuid.UUID `json:"id"`

	Status ProjectStatus `json:"status"`
}

func (v *ProjectsWithStatusTeamProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectsWithStatusTeamProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalProjectsWithStatusTeamProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalProjectsWithStatusTeamProjectsProjectConnectionNodesProject

	retval.Id = v.ProjectWithStatus.Id
	retval.Status = v.ProjectWithStatus.Status
	return &retval, nil
}

type ResourceEventType string

const (
	ResourceEventTypeNormal  ResourceEventType = "NORMAL"
	ResourceEventTypeWarning ResourceEventType = "WARNING"
)

// ResourceLogs includes the GraphQL fields of Resource requested by the fragment ResourceLogs.
//
// ResourceLogs is implemented by the following types:
// ResourceLogsCertificateResource
// ResourceLogsContainerResource
// ResourceLogsEndpointResource
type ResourceLogs interface {
	implementsGraphQLInterfaceResourceLogs()
	// GetExternalId returns the interface-field "externalId" from its implementation.
	GetExternalId() string
	// GetExternalType returns the interface-field "externalType" from its implementation.
	GetExternalType() *string
	// GetExternalLink returns the interface-field "externalLink" from its implementation.
	GetExternalLink() *string
	// GetDisplayName returns the interface-field "displayName" from its implementation.
	GetDisplayName() string
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() *string
}

func (v *ResourceLogsCertificateResource) implementsGraphQLInterfaceResourceLogs() {}
func (v *ResourceLogsContainerResource) implementsGraphQLInterfaceResourceLogs()   {}
func (v *ResourceLogsEndpointResource) implementsGraphQLInterfaceResourceLogs()    {}

func __unmarshalResourceLogs(b []byte, v *ResourceLogs) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CertificateResource":
		*v = new(ResourceLogsCertificateResource)
		return json.Unmarshal(b, *v)
	case "ContainerResource":
		*v = new(ResourceLogsContainerResource)
		return json.Unmarshal(b, *v)
	case "EndpointResource":
		*v = new(ResourceLogsEndpointResource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Resource.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ResourceLogs: "%v"`, tn.TypeName)
	}
}

func __marshalResourceLogs(v *ResourceLogs) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ResourceLogsCertificateResource:
		typename = "CertificateResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ResourceLogsCertificateResource
		}{typename, v}
		return json.Marshal(result)
	case *ResourceLogsContainerResource:
		typename = "ContainerResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ResourceLogsContainerResource
		}{typename, v}
		return json.Marshal(result)
	case *ResourceLogsEndpointResource:
		typename = "EndpointResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ResourceLogsEndpointResource
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ResourceLogs: "%T"`, v)
	}
}

// ResourceLogs includes the GraphQL fields of CertificateResource requested by the fragment ResourceLogs.
type ResourceLogsCertificateResource struct {
	ExternalId   string  `json:"externalId"`
	ExternalType *string `json:"externalType,omitempty"`
	ExternalLink *string `json:"externalLink,omitempty"`
	DisplayName  string  `json:"displayName"`
	Status       *string `json:"status,omitempty"`
}

// GetExternalId returns ResourceLogsCertificateResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ResourceLogsCertificateResource) GetExternalId() string { return v.ExternalId }

// GetExternalType returns ResourceLogsCertificateResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ResourceLogsCertificateResource) GetExternalType() *string { return v.ExternalType }

// GetExternalLink returns ResourceLogsCertificateResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ResourceLogsCertificateResource) GetExternalLink() *string { return v.ExternalLink }

// GetDisplayName returns ResourceLogsCertificateResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ResourceLogsCertificateResource) GetDisplayName() string { return v.DisplayName }

// GetStatus returns ResourceLogsCertificateResource.Status, and is useful for accessing the field via an interface.
func (v *ResourceLogsCertificateResource) GetStatus() *string { return v.Status }

// ResourceLogs includes the GraphQL fields of ContainerResource requested by the fragment ResourceLogs.
type ResourceLogsContainerResource struct {
	ExternalId   string            `json:"externalId"`
	ExternalType *string           `json:"externalType,omitempty"`
	ExternalLink *string           `json:"externalLink,omitempty"`
	DisplayName  string            `json:"displayName"`
	Status       *string           `json:"status,omitempty"`
	Logs         *ResourceLogsLogs `json:"logs,omitempty"`
}

// GetExternalId returns ResourceLogsContainerResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ResourceLogsContainerResource) GetExternalId() string { return v.ExternalId }

// GetExternalType returns ResourceLogsContainerResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ResourceLogsContainerResource) GetExternalType() *string { return v.ExternalType }

// GetExternalLink returns ResourceLogsContainerResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ResourceLogsContainerResource) GetExternalLink() *string { return v.ExternalLink }

// GetDisplayName returns ResourceLogsContainerResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ResourceLogsContainerResource) GetDisplayName() string { return v.DisplayName }

// GetStatus returns ResourceLogsContainerResource.Status, and is useful for accessing the field via an interface.
func (v *ResourceLogsContainerResource) GetStatus() *string { return v.Status }

// GetLogs returns ResourceLogsContainerResource.Logs, and is useful for accessing the field via an interface.
func (v *ResourceLogsContainerResource) GetLogs() *ResourceLogsLogs { return v.Logs }

// ResourceLogs includes the GraphQL fields of EndpointResource requested by the fragment ResourceLogs.
type ResourceLogsEndpointResource struct {
	ExternalId   string  `json:"externalId"`
	ExternalType *string `json:"externalType,omitempty"`
	ExternalLink *string `json:"externalLink,omitempty"`
	DisplayName  string  `json:"displayName"`
	Status       *string `json:"status,omitempty"`
}

// GetExternalId returns ResourceLogsEndpointResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ResourceLogsEndpointResource) GetExternalId() string { return v.ExternalId }

// GetExternalType returns ResourceLogsEndpointResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ResourceLogsEndpointResource) GetExternalType() *string { return v.ExternalType }

// GetExternalLink returns ResourceLogsEndpointResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ResourceLogsEndpointResource) GetExternalLink() *string { return v.ExternalLink }

// GetDisplayName returns ResourceLogsEndpointResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ResourceLogsEndpointResource) GetDisplayName() string { return v.DisplayName }

// GetStatus returns ResourceLogsEndpointResource.Status, and is useful for accessing the field via an interface.
func (v *ResourceLogsEndpointResource) GetStatus() *string { return v.Status }

// ResourceLogsLogs includes the requested fields of the GraphQL type Logs.
type ResourceLogsLogs struct {
	Id        string                            `json:"id"`
	Completed bool                              `json:"completed"`
	Expired   *bool                             `json:"expired,omitempty"`
	Entries   []ResourceLogsLogsEntriesLogEntry `json:"entries"`
}

// GetId returns ResourceLogsLogs.Id, and is useful for accessing the field via an interface.
func (v *ResourceLogsLogs) GetId() string { return v.Id }

// GetCompleted returns ResourceLogsLogs.Completed, and is useful for accessing the field via an interface.
func (v *ResourceLogsLogs) GetCompleted() bool { return v.Completed }

// GetExpired returns ResourceLogsLogs.Expired, and is useful for accessing the field via an interface.
func (v *ResourceLogsLogs) GetExpired() *bool { return v.Expired }

// GetEntries returns ResourceLogsLogs.Entries, and is useful for accessing the field via an interface.
func (v *ResourceLogsLogs) GetEntries() []ResourceLogsLogsEntriesLogEntry { return v.Entries }

// ResourceLogsLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type ResourceLogsLogsEntriesLogEntry struct {
	Text      string     `json:"text"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// GetText returns ResourceLogsLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *ResourceLogsLogsEntriesLogEntry) GetText() string { return v.Text }

// GetTimestamp returns ResourceLogsLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *ResourceLogsLogsEntriesLogEntry) GetTimestamp() *time.Time { return v.Timestamp }

// resourceLogsResponse is returned by resourceLogs on success.
type ResourceLogsResponse struct {
	Team *ResourceLogsTeam `json:"team,omitempty"`
}

// GetTeam returns ResourceLogsResponse.Team, and is useful for accessing the field via an interface.
func (v *ResourceLogsResponse) GetTeam() *ResourceLogsTeam { return v.Team }

// ResourceLogsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ResourceLogsTeam struct {
	Id       uuid.UUID                `json:"id"`
	Resource ResourceLogsTeamResource `json:"-"`
}

// GetId returns ResourceLogsTeam.Id, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeam) GetId() uuid.UUID { return v.Id }

// GetResource returns ResourceLogsTeam.Resource, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeam) GetResource() ResourceLogsTeamResource { return v.Resource }

func (v *ResourceLogsTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ResourceLogsTeam
		Resource json.RawMessage `json:"resource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ResourceLogsTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Resource
		src := firstPass.Resource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalResourceLogsTeamResource(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ResourceLogsTeam.Resource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalResourceLogsTeam struct {
	Id uuid.UUID `json:"id"`

	Resource json.RawMessage `json:"resource"`
}

func (v *ResourceLogsTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ResourceLogsTeam) __premarshalJSON() (*__premarshalResourceLogsTeam, error) {
	var retval __premarshalResourceLogsTeam

	retval.Id = v.Id
	{

		dst := &retval.Resource
		src := v.Resource
		var err error
		*dst, err = __marshalResourceLogsTeamResource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ResourceLogsTeam.Resource: %w", err)
		}
	}
	return &retval, nil
}

// ResourceLogsTeamResource includes the requested fields of the GraphQL interface Resource.
//
// ResourceLogsTeamResource is implemented by the following types:
// ResourceLogsTeamResourceCertificateResource
// ResourceLogsTeamResourceContainerResource
// ResourceLogsTeamResourceEndpointResource
type ResourceLogsTeamResource interface {
	implementsGraphQLInterfaceResourceLogsTeamResource()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	ResourceLogs
}

func (v *ResourceLogsTeamResourceCertificateResource) implementsGraphQLInterfaceResourceLogsTeamResource() {
}
func (v *ResourceLogsTeamResourceContainerResource) implementsGraphQLInterfaceResourceLogsTeamResource() {
}
func (v *ResourceLogsTeamResourceEndpointResource) implementsGraphQLInterfaceResourceLogsTeamResource() {
}

func __unmarshalResourceLogsTeamResource(b []byte, v *ResourceLogsTeamResource) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CertificateResource":
		*v = new(ResourceLogsTeamResourceCertificateResource)
		return json.Unmarshal(b, *v)
	case "ContainerResource":
		*v = new(ResourceLogsTeamResourceContainerResource)
		return json.Unmarshal(b, *v)
	case "EndpointResource":
		*v = new(ResourceLogsTeamResourceEndpointResource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Resource.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ResourceLogsTeamResource: "%v"`, tn.TypeName)
	}
}

func __marshalResourceLogsTeamResource(v *ResourceLogsTeamResource) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ResourceLogsTeamResourceCertificateResource:
		typename = "CertificateResource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalResourceLogsTeamResourceCertificateResource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ResourceLogsTeamResourceContainerResource:
		typename = "ContainerResource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalResourceLogsTeamResourceContainerResource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ResourceLogsTeamResourceEndpointResource:
		typename = "EndpointResource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalResourceLogsTeamResourceEndpointResource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ResourceLogsTeamResource: "%T"`, v)
	}
}

// ResourceLogsTeamResourceCertificateResource includes the requested fields of the GraphQL type CertificateResource.
type ResourceLogsTeamResourceCertificateResource struct {
	Typename                        *string `json:"__typename,omitempty"`
	ResourceLogsCertificateResource `json:"-"`
}

// GetTypename returns ResourceLogsTeamResourceCertificateResource.Typename, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceCertificateResource) GetTypename() *string { return v.Typename }

// GetExternalId returns ResourceLogsTeamResourceCertificateResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceCertificateResource) GetExternalId() string {
	return v.ResourceLogsCertificateResource.ExternalId
}

// GetExternalType returns ResourceLogsTeamResourceCertificateResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceCertificateResource) GetExternalType() *string {
	return v.ResourceLogsCertificateResource.ExternalType
}

// GetExternalLink returns ResourceLogsTeamResourceCertificateResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceCertificateResource) GetExternalLink() *string {
	return v.ResourceLogsCertificateResource.ExternalLink
}

// GetDisplayName returns ResourceLogsTeamResourceCertificateResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceCertificateResource) GetDisplayName() string {
	return v.ResourceLogsCertificateResource.DisplayName
}

// GetStatus returns ResourceLogsTeamResourceCertificateResource.Status, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceCertificateResource) GetStatus() *string {
	return v.ResourceLogsCertificateResource.Status
}

func (v *ResourceLogsTeamResourceCertificateResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ResourceLogsTeamResourceCertificateResource
		graphql.NoUnmarshalJSON
	}
	firstPass.ResourceLogsTeamResourceCertificateResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ResourceLogsCertificateResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalResourceLogsTeamResourceCertificateResource struct {
	Typename *string `json:"__typename,omitempty"`

	ExternalId string `json:"externalId"`

	ExternalType *string `json:"externalType,omitempty"`

	ExternalLink *string `json:"externalLink,omitempty"`

	DisplayName string `json:"displayName"`

	Status *string `json:"status,omitempty"`
}

func (v *ResourceLogsTeamResourceCertificateResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ResourceLogsTeamResourceCertificateResource) __premarshalJSON() (*__premarshalResourceLogsTeamResourceCertificateResource, error) {
	var retval __premarshalResourceLogsTeamResourceCertificateResource

	retval.Typename = v.Typename
	retval.ExternalId = v.ResourceLogsCertificateResource.ExternalId
	retval.ExternalType = v.ResourceLogsCertificateResource.ExternalType
	retval.ExternalLink = v.ResourceLogsCertificateResource.ExternalLink
	retval.DisplayName = v.ResourceLogsCertificateResource.DisplayName
	retval.Status = v.ResourceLogsCertificateResource.Status
	return &retval, nil
}

// ResourceLogsTeamResourceContainerResource includes the requested fields of the GraphQL type ContainerResource.
type ResourceLogsTeamResourceContainerResource struct {
	Typename                      *string `json:"__typename,omitempty"`
	ResourceLogsContainerResource `json:"-"`
}

// GetTypename returns ResourceLogsTeamResourceContainerResource.Typename, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceContainerResource) GetTypename() *string { return v.Typename }

// GetExternalId returns ResourceLogsTeamResourceContainerResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceContainerResource) GetExternalId() string {
	return v.ResourceLogsContainerResource.ExternalId
}

// GetExternalType returns ResourceLogsTeamResourceContainerResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceContainerResource) GetExternalType() *string {
	return v.ResourceLogsContainerResource.ExternalType
}

// GetExternalLink returns ResourceLogsTeamResourceContainerResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceContainerResource) GetExternalLink() *string {
	return v.ResourceLogsContainerResource.ExternalLink
}

// GetDisplayName returns ResourceLogsTeamResourceContainerResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceContainerResource) GetDisplayName() string {
	return v.ResourceLogsContainerResource.DisplayName
}

// GetStatus returns ResourceLogsTeamResourceContainerResource.Status, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceContainerResource) GetStatus() *string {
	return v.ResourceLogsContainerResource.Status
}

// GetLogs returns ResourceLogsTeamResourceContainerResource.Logs, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceContainerResource) GetLogs() *ResourceLogsLogs {
	return v.ResourceLogsContainerResource.Logs
}

func (v *ResourceLogsTeamResourceContainerResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ResourceLogsTeamResourceContainerResource
		graphql.NoUnmarshalJSON
	}
	firstPass.ResourceLogsTeamResourceContainerResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ResourceLogsContainerResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalResourceLogsTeamResourceContainerResource struct {
	Typename *string `json:"__typename,omitempty"`

	ExternalId string `json:"externalId"`

	ExternalType *string `json:"externalType,omitempty"`

	ExternalLink *string `json:"externalLink,omitempty"`

	DisplayName string `json:"displayName"`

	Status *string `json:"status,omitempty"`

	Logs *ResourceLogsLogs `json:"logs,omitempty"`
}

func (v *ResourceLogsTeamResourceContainerResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ResourceLogsTeamResourceContainerResource) __premarshalJSON() (*__premarshalResourceLogsTeamResourceContainerResource, error) {
	var retval __premarshalResourceLogsTeamResourceContainerResource

	retval.Typename = v.Typename
	retval.ExternalId = v.ResourceLogsContainerResource.ExternalId
	retval.ExternalType = v.ResourceLogsContainerResource.ExternalType
	retval.ExternalLink = v.ResourceLogsContainerResource.ExternalLink
	retval.DisplayName = v.ResourceLogsContainerResource.DisplayName
	retval.Status = v.ResourceLogsContainerResource.Status
	retval.Logs = v.ResourceLogsContainerResource.Logs
	return &retval, nil
}

// ResourceLogsTeamResourceEndpointResource includes the requested fields of the GraphQL type EndpointResource.
type ResourceLogsTeamResourceEndpointResource struct {
	Typename                     *string `json:"__typename,omitempty"`
	ResourceLogsEndpointResource `json:"-"`
}

// GetTypename returns ResourceLogsTeamResourceEndpointResource.Typename, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceEndpointResource) GetTypename() *string { return v.Typename }

// GetExternalId returns ResourceLogsTeamResourceEndpointResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceEndpointResource) GetExternalId() string {
	return v.ResourceLogsEndpointResource.ExternalId
}

// GetExternalType returns ResourceLogsTeamResourceEndpointResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceEndpointResource) GetExternalType() *string {
	return v.ResourceLogsEndpointResource.ExternalType
}

// GetExternalLink returns ResourceLogsTeamResourceEndpointResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceEndpointResource) GetExternalLink() *string {
	return v.ResourceLogsEndpointResource.ExternalLink
}

// GetDisplayName returns ResourceLogsTeamResourceEndpointResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceEndpointResource) GetDisplayName() string {
	return v.ResourceLogsEndpointResource.DisplayName
}

// GetStatus returns ResourceLogsTeamResourceEndpointResource.Status, and is useful for accessing the field via an interface.
func (v *ResourceLogsTeamResourceEndpointResource) GetStatus() *string {
	return v.ResourceLogsEndpointResource.Status
}

func (v *ResourceLogsTeamResourceEndpointResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ResourceLogsTeamResourceEndpointResource
		graphql.NoUnmarshalJSON
	}
	firstPass.ResourceLogsTeamResourceEndpointResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ResourceLogsEndpointResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalResourceLogsTeamResourceEndpointResource struct {
	Typename *string `json:"__typename,omitempty"`

	ExternalId string `json:"externalId"`

	ExternalType *string `json:"externalType,omitempty"`

	ExternalLink *string `json:"externalLink,omitempty"`

	DisplayName string `json:"displayName"`

	Status *string `json:"status,omitempty"`
}

func (v *ResourceLogsTeamResourceEndpointResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ResourceLogsTeamResourceEndpointResource) __premarshalJSON() (*__premarshalResourceLogsTeamResourceEndpointResource, error) {
	var retval __premarshalResourceLogsTeamResourceEndpointResource

	retval.Typename = v.Typename
	retval.ExternalId = v.ResourceLogsEndpointResource.ExternalId
	retval.ExternalType = v.ResourceLogsEndpointResource.ExternalType
	retval.ExternalLink = v.ResourceLogsEndpointResource.ExternalLink
	retval.DisplayName = v.ResourceLogsEndpointResource.DisplayName
	retval.Status = v.ResourceLogsEndpointResource.Status
	return &retval, nil
}

type ResourceStatus string

const (
	ResourceStatusUnknown    ResourceStatus = "UNKNOWN"
	ResourceStatusWaiting    ResourceStatus = "WAITING"
	ResourceStatusRunning    ResourceStatus = "RUNNING"
	ResourceStatusPending    ResourceStatus = "PENDING"
	ResourceStatusSucceeded  ResourceStatus = "SUCCEEDED"
	ResourceStatusFailed     ResourceStatus = "FAILED"
	ResourceStatusTerminated ResourceStatus = "TERMINATED"
)

type ResourceType string

const (
	ResourceTypeContainer   ResourceType = "CONTAINER"
	ResourceTypePod         ResourceType = "POD"
	ResourceTypeJob         ResourceType = "JOB"
	ResourceTypeDeployment  ResourceType = "DEPLOYMENT"
	ResourceTypeReplicaset  ResourceType = "REPLICASET"
	ResourceTypeStatefulset ResourceType = "STATEFULSET"
	ResourceTypeDaemonset   ResourceType = "DAEMONSET"
	ResourceTypeService     ResourceType = "SERVICE"
)

// resourcesWithLogsResponse is returned by resourcesWithLogs on success.
type ResourcesWithLogsResponse struct {
	Team *ResourcesWithLogsTeam `json:"team,omitempty"`
}

// GetTeam returns ResourcesWithLogsResponse.Team, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsResponse) GetTeam() *ResourcesWithLogsTeam { return v.Team }

// ResourcesWithLogsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ResourcesWithLogsTeam struct {
	Id      uuid.UUID                     `json:"id"`
	Project *ResourcesWithLogsTeamProject `json:"project,omitempty"`
}

// GetId returns ResourcesWithLogsTeam.Id, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns ResourcesWithLogsTeam.Project, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeam) GetProject() *ResourcesWithLogsTeamProject { return v.Project }

// ResourcesWithLogsTeamProject includes the requested fields of the GraphQL type Project.
type ResourcesWithLogsTeamProject struct {
	Id        uuid.UUID                                            `json:"id"`
	Resources []ResourcesWithLogsTeamProjectResourcesCloudResource `json:"resources"`
}

// GetId returns ResourcesWithLogsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProject) GetId() uuid.UUID { return v.Id }

// GetResources returns ResourcesWithLogsTeamProject.Resources, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProject) GetResources() []ResourcesWithLogsTeamProjectResourcesCloudResource {
	return v.Resources
}

// ResourcesWithLogsTeamProjectResourcesCloudResource includes the requested fields of the GraphQL type CloudResource.
type ResourcesWithLogsTeamProjectResourcesCloudResource struct {
	CloudResource `json:"-"`
	Resources     []ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource `json:"resources"`
	Log           []ResourcesWithLogsTeamProjectResourcesCloudResourceLog                    `json:"log"`
}

// GetResources returns ResourcesWithLogsTeamProjectResourcesCloudResource.Resources, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResource) GetResources() []ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource {
	return v.Resources
}

// GetLog returns ResourcesWithLogsTeamProjectResourcesCloudResource.Log, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResource) GetLog() []ResourcesWithLogsTeamProjectResourcesCloudResourceLog {
	return v.Log
}

// GetName returns ResourcesWithLogsTeamProjectResourcesCloudResource.Name, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResource) GetName() string {
	return v.CloudResource.Name
}

// GetStatus returns ResourcesWithLogsTeamProjectResourcesCloudResource.Status, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResource) GetStatus() ResourceStatus {
	return v.CloudResource.Status
}

// GetType returns ResourcesWithLogsTeamProjectResourcesCloudResource.Type, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResource) GetType() ResourceType {
	return v.CloudResource.Type
}

// GetCreatedAt returns ResourcesWithLogsTeamProjectResourcesCloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResource) GetCreatedAt() *time.Time {
	return v.CloudResource.CreatedAt
}

// GetOwners returns ResourcesWithLogsTeamProjectResourcesCloudResource.Owners, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResource) GetOwners() []CloudResourceOwnersResourceOwner {
	return v.CloudResource.Owners
}

// GetEvents returns ResourcesWithLogsTeamProjectResourcesCloudResource.Events, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResource) GetEvents() []CloudResourceEventsResourceEvent {
	return v.CloudResource.Events
}

func (v *ResourcesWithLogsTeamProjectResourcesCloudResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ResourcesWithLogsTeamProjectResourcesCloudResource
		graphql.NoUnmarshalJSON
	}
	firstPass.ResourcesWithLogsTeamProjectResourcesCloudResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalResourcesWithLogsTeamProjectResourcesCloudResource struct {
	Resources []ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource `json:"resources"`

	Log []ResourcesWithLogsTeamProjectResourcesCloudResourceLog `json:"log"`

	Name string `json:"name"`

	Status ResourceStatus `json:"status"`

	Type ResourceType `json:"type"`

	CreatedAt *time.Time `json:"createdAt,omitempty"`

	Owners []CloudResourceOwnersResourceOwner `json:"owners"`

	Events []CloudResourceEventsResourceEvent `json:"events"`
}

func (v *ResourcesWithLogsTeamProjectResourcesCloudResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ResourcesWithLogsTeamProjectResourcesCloudResource) __premarshalJSON() (*__premarshalResourcesWithLogsTeamProjectResourcesCloudResource, error) {
	var retval __premarshalResourcesWithLogsTeamProjectResourcesCloudResource

	retval.Resources = v.Resources
	retval.Log = v.Log
	retval.Name = v.CloudResource.Name
	retval.Status = v.CloudResource.Status
	retval.Type = v.CloudResource.Type
	retval.CreatedAt = v.CloudResource.CreatedAt
	retval.Owners = v.CloudResource.Owners
	retval.Events = v.CloudResource.Events
	return &retval, nil
}

// ResourcesWithLogsTeamProjectResourcesCloudResourceLog includes the requested fields of the GraphQL type Log.
type ResourcesWithLogsTeamProjectResourcesCloudResourceLog struct {
	Name    string                                                                 `json:"name"`
	Entries []ResourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry `json:"entries"`
}

// GetName returns ResourcesWithLogsTeamProjectResourcesCloudResourceLog.Name, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceLog) GetName() string { return v.Name }

// GetEntries returns ResourcesWithLogsTeamProjectResourcesCloudResourceLog.Entries, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceLog) GetEntries() []ResourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry {
	return v.Entries
}

// ResourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type ResourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry struct {
	Text      string     `json:"text"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// GetText returns ResourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry) GetText() string {
	return v.Text
}

// GetTimestamp returns ResourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource includes the requested fields of the GraphQL type CloudResource.
type ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource struct {
	CloudResource `json:"-"`
	Resources     []ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource `json:"resources"`
}

// GetResources returns ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.Resources, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetResources() []ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource {
	return v.Resources
}

// GetName returns ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.Name, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetName() string {
	return v.CloudResource.Name
}

// GetStatus returns ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.Status, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetStatus() ResourceStatus {
	return v.CloudResource.Status
}

// GetType returns ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.Type, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetType() ResourceType {
	return v.CloudResource.Type
}

// GetCreatedAt returns ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetCreatedAt() *time.Time {
	return v.CloudResource.CreatedAt
}

// GetOwners returns ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.Owners, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetOwners() []CloudResourceOwnersResourceOwner {
	return v.CloudResource.Owners
}

// GetEvents returns ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.Events, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetEvents() []CloudResourceEventsResourceEvent {
	return v.CloudResource.Events
}

func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource
		graphql.NoUnmarshalJSON
	}
	firstPass.ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource struct {
	Resources []ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource `json:"resources"`

	Name string `json:"name"`

	Status ResourceStatus `json:"status"`

	Type ResourceType `json:"type"`

	CreatedAt *time.Time `json:"createdAt,omitempty"`

	Owners []CloudResourceOwnersResourceOwner `json:"owners"`

	Events []CloudResourceEventsResourceEvent `json:"events"`
}

func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) __premarshalJSON() (*__premarshalResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource, error) {
	var retval __premarshalResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource

	retval.Resources = v.Resources
	retval.Name = v.CloudResource.Name
	retval.Status = v.CloudResource.Status
	retval.Type = v.CloudResource.Type
	retval.CreatedAt = v.CloudResource.CreatedAt
	retval.Owners = v.CloudResource.Owners
	retval.Events = v.CloudResource.Events
	return &retval, nil
}

// ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource includes the requested fields of the GraphQL type CloudResource.
type ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource struct {
	CloudResource `json:"-"`
}

// GetName returns ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Name, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetName() string {
	return v.CloudResource.Name
}

// GetStatus returns ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Status, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetStatus() ResourceStatus {
	return v.CloudResource.Status
}

// GetType returns ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Type, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetType() ResourceType {
	return v.CloudResource.Type
}

// GetCreatedAt returns ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetCreatedAt() *time.Time {
	return v.CloudResource.CreatedAt
}

// GetOwners returns ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Owners, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetOwners() []CloudResourceOwnersResourceOwner {
	return v.CloudResource.Owners
}

// GetEvents returns ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Events, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetEvents() []CloudResourceEventsResourceEvent {
	return v.CloudResource.Events
}

func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource
		graphql.NoUnmarshalJSON
	}
	firstPass.ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource struct {
	Name string `json:"name"`

	Status ResourceStatus `json:"status"`

	Type ResourceType `json:"type"`

	CreatedAt *time.Time `json:"createdAt,omitempty"`

	Owners []CloudResourceOwnersResourceOwner `json:"owners"`

	Events []CloudResourceEventsResourceEvent `json:"events"`
}

func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) __premarshalJSON() (*__premarshalResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource, error) {
	var retval __premarshalResourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource

	retval.Name = v.CloudResource.Name
	retval.Status = v.CloudResource.Status
	retval.Type = v.CloudResource.Type
	retval.CreatedAt = v.CloudResource.CreatedAt
	retval.Owners = v.CloudResource.Owners
	retval.Events = v.CloudResource.Events
	return &retval, nil
}

// resourcesWithMetricsResponse is returned by resourcesWithMetrics on success.
type ResourcesWithMetricsResponse struct {
	Team *ResourcesWithMetricsTeam `json:"team,omitempty"`
}

// GetTeam returns ResourcesWithMetricsResponse.Team, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsResponse) GetTeam() *ResourcesWithMetricsTeam { return v.Team }

// ResourcesWithMetricsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type ResourcesWithMetricsTeam struct {
	Id      uuid.UUID                        `json:"id"`
	Project *ResourcesWithMetricsTeamProject `json:"project,omitempty"`
}

// GetId returns ResourcesWithMetricsTeam.Id, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns ResourcesWithMetricsTeam.Project, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeam) GetProject() *ResourcesWithMetricsTeamProject { return v.Project }

// ResourcesWithMetricsTeamProject includes the requested fields of the GraphQL type Project.
type ResourcesWithMetricsTeamProject struct {
	Id        uuid.UUID                                               `json:"id"`
	Resources []ResourcesWithMetricsTeamProjectResourcesCloudResource `json:"resources"`
}

// GetId returns ResourcesWithMetricsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProject) GetId() uuid.UUID { return v.Id }

// GetResources returns ResourcesWithMetricsTeamProject.Resources, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProject) GetResources() []ResourcesWithMetricsTeamProjectResourcesCloudResource {
	return v.Resources
}

// ResourcesWithMetricsTeamProjectResourcesCloudResource includes the requested fields of the GraphQL type CloudResource.
type ResourcesWithMetricsTeamProjectResourcesCloudResource struct {
	CloudResource `json:"-"`
	Resources     []ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource `json:"resources"`
	Metric        []ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream     `json:"metric"`
}

// GetResources returns ResourcesWithMetricsTeamProjectResourcesCloudResource.Resources, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResource) GetResources() []ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource {
	return v.Resources
}

// GetMetric returns ResourcesWithMetricsTeamProjectResourcesCloudResource.Metric, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResource) GetMetric() []ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream {
	return v.Metric
}

// GetName returns ResourcesWithMetricsTeamProjectResourcesCloudResource.Name, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResource) GetName() string {
	return v.CloudResource.Name
}

// GetStatus returns ResourcesWithMetricsTeamProjectResourcesCloudResource.Status, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResource) GetStatus() ResourceStatus {
	return v.CloudResource.Status
}

// GetType returns ResourcesWithMetricsTeamProjectResourcesCloudResource.Type, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResource) GetType() ResourceType {
	return v.CloudResource.Type
}

// GetCreatedAt returns ResourcesWithMetricsTeamProjectResourcesCloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResource) GetCreatedAt() *time.Time {
	return v.CloudResource.CreatedAt
}

// GetOwners returns ResourcesWithMetricsTeamProjectResourcesCloudResource.Owners, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResource) GetOwners() []CloudResourceOwnersResourceOwner {
	return v.CloudResource.Owners
}

// GetEvents returns ResourcesWithMetricsTeamProjectResourcesCloudResource.Events, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResource) GetEvents() []CloudResourceEventsResourceEvent {
	return v.CloudResource.Events
}

func (v *ResourcesWithMetricsTeamProjectResourcesCloudResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ResourcesWithMetricsTeamProjectResourcesCloudResource
		graphql.NoUnmarshalJSON
	}
	firstPass.ResourcesWithMetricsTeamProjectResourcesCloudResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalResourcesWithMetricsTeamProjectResourcesCloudResource struct {
	Resources []ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource `json:"resources"`

	Metric []ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream `json:"metric"`

	Name string `json:"name"`

	Status ResourceStatus `json:"status"`

	Type ResourceType `json:"type"`

	CreatedAt *time.Time `json:"createdAt,omitempty"`

	Owners []CloudResourceOwnersResourceOwner `json:"owners"`

	Events []CloudResourceEventsResourceEvent `json:"events"`
}

func (v *ResourcesWithMetricsTeamProjectResourcesCloudResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ResourcesWithMetricsTeamProjectResourcesCloudResource) __premarshalJSON() (*__premarshalResourcesWithMetricsTeamProjectResourcesCloudResource, error) {
	var retval __premarshalResourcesWithMetricsTeamProjectResourcesCloudResource

	retval.Resources = v.Resources
	retval.Metric = v.Metric
	retval.Name = v.CloudResource.Name
	retval.Status = v.CloudResource.Status
	retval.Type = v.CloudResource.Type
	retval.CreatedAt = v.CloudResource.CreatedAt
	retval.Owners = v.CloudResource.Owners
	retval.Events = v.CloudResource.Events
	return &retval, nil
}

// ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream includes the requested fields of the GraphQL type MetricStream.
type ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream struct {
	MetricStreamV1 `json:"-"`
}

// GetType returns ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream.Type, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream) GetType() *MetricType {
	return v.MetricStreamV1.Type
}

// GetQuery returns ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream.Query, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream) GetQuery() string {
	return v.MetricStreamV1.Query
}

// GetAnnotations returns ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream.Annotations, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream) GetAnnotations() []MetricStreamV1AnnotationsMetricAnnotation {
	return v.MetricStreamV1.Annotations
}

// GetLabels returns ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream.Labels, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream) GetLabels() []MetricStreamV1LabelsMetricStreamLabel {
	return v.MetricStreamV1.Labels
}

// GetEntries returns ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream.Entries, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream) GetEntries() []MetricStreamV1EntriesMetricEntry {
	return v.MetricStreamV1.Entries
}

func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream
		graphql.NoUnmarshalJSON
	}
	firstPass.ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricStreamV1)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream struct {
	Type *MetricType `json:"type,omitempty"`

	Query string `json:"query"`

	Annotations []MetricStreamV1AnnotationsMetricAnnotation `json:"annotations"`

	Labels []MetricStreamV1LabelsMetricStreamLabel `json:"labels"`

	Entries []MetricStreamV1EntriesMetricEntry `json:"entries"`
}

func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream) __premarshalJSON() (*__premarshalResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream, error) {
	var retval __premarshalResourcesWithMetricsTeamProjectResourcesCloudResourceMetricMetricStream

	retval.Type = v.MetricStreamV1.Type
	retval.Query = v.MetricStreamV1.Query
	retval.Annotations = v.MetricStreamV1.Annotations
	retval.Labels = v.MetricStreamV1.Labels
	retval.Entries = v.MetricStreamV1.Entries
	return &retval, nil
}

// ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource includes the requested fields of the GraphQL type CloudResource.
type ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource struct {
	CloudResource `json:"-"`
	Resources     []ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource `json:"resources"`
}

// GetResources returns ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.Resources, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetResources() []ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource {
	return v.Resources
}

// GetName returns ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.Name, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetName() string {
	return v.CloudResource.Name
}

// GetStatus returns ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.Status, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetStatus() ResourceStatus {
	return v.CloudResource.Status
}

// GetType returns ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.Type, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetType() ResourceType {
	return v.CloudResource.Type
}

// GetCreatedAt returns ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetCreatedAt() *time.Time {
	return v.CloudResource.CreatedAt
}

// GetOwners returns ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.Owners, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetOwners() []CloudResourceOwnersResourceOwner {
	return v.CloudResource.Owners
}

// GetEvents returns ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.Events, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetEvents() []CloudResourceEventsResourceEvent {
	return v.CloudResource.Events
}

func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource
		graphql.NoUnmarshalJSON
	}
	firstPass.ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource struct {
	Resources []ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource `json:"resources"`

	Name string `json:"name"`

	Status ResourceStatus `json:"status"`

	Type ResourceType `json:"type"`

	CreatedAt *time.Time `json:"createdAt,omitempty"`

	Owners []CloudResourceOwnersResourceOwner `json:"owners"`

	Events []CloudResourceEventsResourceEvent `json:"events"`
}

func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) __premarshalJSON() (*__premarshalResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource, error) {
	var retval __premarshalResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource

	retval.Resources = v.Resources
	retval.Name = v.CloudResource.Name
	retval.Status = v.CloudResource.Status
	retval.Type = v.CloudResource.Type
	retval.CreatedAt = v.CloudResource.CreatedAt
	retval.Owners = v.CloudResource.Owners
	retval.Events = v.CloudResource.Events
	return &retval, nil
}

// ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource includes the requested fields of the GraphQL type CloudResource.
type ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource struct {
	CloudResource `json:"-"`
}

// GetName returns ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Name, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetName() string {
	return v.CloudResource.Name
}

// GetStatus returns ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Status, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetStatus() ResourceStatus {
	return v.CloudResource.Status
}

// GetType returns ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Type, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetType() ResourceType {
	return v.CloudResource.Type
}

// GetCreatedAt returns ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetCreatedAt() *time.Time {
	return v.CloudResource.CreatedAt
}

// GetOwners returns ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Owners, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetOwners() []CloudResourceOwnersResourceOwner {
	return v.CloudResource.Owners
}

// GetEvents returns ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Events, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetEvents() []CloudResourceEventsResourceEvent {
	return v.CloudResource.Events
}

func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource
		graphql.NoUnmarshalJSON
	}
	firstPass.ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource struct {
	Name string `json:"name"`

	Status ResourceStatus `json:"status"`

	Type ResourceType `json:"type"`

	CreatedAt *time.Time `json:"createdAt,omitempty"`

	Owners []CloudResourceOwnersResourceOwner `json:"owners"`

	Events []CloudResourceEventsResourceEvent `json:"events"`
}

func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) __premarshalJSON() (*__premarshalResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource, error) {
	var retval __premarshalResourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource

	retval.Name = v.CloudResource.Name
	retval.Status = v.CloudResource.Status
	retval.Type = v.CloudResource.Type
	retval.CreatedAt = v.CloudResource.CreatedAt
	retval.Owners = v.CloudResource.Owners
	retval.Events = v.CloudResource.Events
	return &retval, nil
}

// RevisionDetailV1 includes the GraphQL fields of RevisableEntity requested by the fragment RevisionDetailV1.
//
// RevisionDetailV1 is implemented by the following types:
// RevisionDetailV1AWSAccountConfiguration
// RevisionDetailV1AzureAccountConfiguration
// RevisionDetailV1BlueprintConfiguration
// RevisionDetailV1ClusterConfiguration
// RevisionDetailV1CoreWeaveAccountConfiguration
// RevisionDetailV1DOAccountConfiguration
// RevisionDetailV1DeploymentConfiguration
// RevisionDetailV1GCPAccountConfiguration
// RevisionDetailV1LinodeAccountConfiguration
// RevisionDetailV1VultrAccountConfiguration
type RevisionDetailV1 interface {
	implementsGraphQLInterfaceRevisionDetailV1()
	// GetRevisionData returns the interface-field "revisionData" from its implementation.
	GetRevisionData() string
	// GetRevisionMetadata returns the interface-field "revisionMetadata" from its implementation.
	GetRevisionMetadata() RevisionDetailV1RevisionMetadata
}

func (v *RevisionDetailV1AWSAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1()   {}
func (v *RevisionDetailV1AzureAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1() {}
func (v *RevisionDetailV1BlueprintConfiguration) implementsGraphQLInterfaceRevisionDetailV1()    {}
func (v *RevisionDetailV1ClusterConfiguration) implementsGraphQLInterfaceRevisionDetailV1()      {}
func (v *RevisionDetailV1CoreWeaveAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1() {
}
func (v *RevisionDetailV1DOAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1()     {}
func (v *RevisionDetailV1DeploymentConfiguration) implementsGraphQLInterfaceRevisionDetailV1()    {}
func (v *RevisionDetailV1GCPAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1()    {}
func (v *RevisionDetailV1LinodeAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1() {}
func (v *RevisionDetailV1VultrAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1()  {}

func __unmarshalRevisionDetailV1(b []byte, v *RevisionDetailV1) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AWSAccountConfiguration":
		*v = new(RevisionDetailV1AWSAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "AzureAccountConfiguration":
		*v = new(RevisionDetailV1AzureAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "BlueprintConfiguration":
		*v = new(RevisionDetailV1BlueprintConfiguration)
		return json.Unmarshal(b, *v)
	case "ClusterConfiguration":
		*v = new(RevisionDetailV1ClusterConfiguration)
		return json.Unmarshal(b, *v)
	case "CoreWeaveAccountConfiguration":
		*v = new(RevisionDetailV1CoreWeaveAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "DOAccountConfiguration":
		*v = new(RevisionDetailV1DOAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "DeploymentConfiguration":
		*v = new(RevisionDetailV1DeploymentConfiguration)
		return json.Unmarshal(b, *v)
	case "GCPAccountConfiguration":
		*v = new(RevisionDetailV1GCPAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "LinodeAccountConfiguration":
		*v = new(RevisionDetailV1LinodeAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "VultrAccountConfiguration":
		*v = new(RevisionDetailV1VultrAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RevisableEntity.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RevisionDetailV1: "%v"`, tn.TypeName)
	}
}

func __marshalRevisionDetailV1(v *RevisionDetailV1) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RevisionDetailV1AWSAccountConfiguration:
		typename = "AWSAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1AWSAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1AzureAccountConfiguration:
		typename = "AzureAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1AzureAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1BlueprintConfiguration:
		typename = "BlueprintConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1BlueprintConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1ClusterConfiguration:
		typename = "ClusterConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1ClusterConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1CoreWeaveAccountConfiguration:
		typename = "CoreWeaveAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1CoreWeaveAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1DOAccountConfiguration:
		typename = "DOAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1DOAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1DeploymentConfiguration:
		typename = "DeploymentConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1DeploymentConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1GCPAccountConfiguration:
		typename = "GCPAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1GCPAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1LinodeAccountConfiguration:
		typename = "LinodeAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1LinodeAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1VultrAccountConfiguration:
		typename = "VultrAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1VultrAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RevisionDetailV1: "%T"`, v)
	}
}

// RevisionDetailV1 includes the GraphQL fields of AWSAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1AWSAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1AWSAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1AWSAccountConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1AWSAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1AWSAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of AzureAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1AzureAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1AzureAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1AzureAccountConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1AzureAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1AzureAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of BlueprintConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1BlueprintConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1BlueprintConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1BlueprintConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1BlueprintConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1BlueprintConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of ClusterConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1ClusterConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1ClusterConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1ClusterConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1ClusterConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1ClusterConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of CoreWeaveAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1CoreWeaveAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1CoreWeaveAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1CoreWeaveAccountConfiguration) GetRevisionData() string {
	return v.RevisionData
}

// GetRevisionMetadata returns RevisionDetailV1CoreWeaveAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1CoreWeaveAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of DOAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1DOAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1DOAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1DOAccountConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1DOAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1DOAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of DeploymentConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1DeploymentConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1DeploymentConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1DeploymentConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1DeploymentConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1DeploymentConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of GCPAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1GCPAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1GCPAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1GCPAccountConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1GCPAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1GCPAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of LinodeAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1LinodeAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1LinodeAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1LinodeAccountConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1LinodeAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1LinodeAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1RevisionMetadata includes the requested fields of the GraphQL type RevisionMetadata.
type RevisionDetailV1RevisionMetadata struct {
	Id          uuid.UUID `json:"id"`
	SequenceId  int       `json:"sequenceId"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
	// The user that authored this revision.
	//
	// If the user has been deleted, this will contain a placeholder User, with the
	// Name field changed to the deleted user's username.
	// When this field represents a deleted user, it SHOULD NOT be used for any API
	// operations expecting a userId, and any attempts will likely fail.
	//
	// To confirm whether this field represents a deleted user, you may additionally
	// consult the `authorInfo.creatorDeleted` flag (see `RevisionAuthorInfo`).
	CreatedBy RevisionDetailV1RevisionMetadataCreatedByUser `json:"createdBy"`
	// A revision may have additional information about how it was initiated.
	AuthorInfo *RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo `json:"authorInfo,omitempty"`
}

// GetId returns RevisionDetailV1RevisionMetadata.Id, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadata) GetId() uuid.UUID { return v.Id }

// GetSequenceId returns RevisionDetailV1RevisionMetadata.SequenceId, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadata) GetSequenceId() int { return v.SequenceId }

// GetDescription returns RevisionDetailV1RevisionMetadata.Description, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadata) GetDescription() string { return v.Description }

// GetCreatedAt returns RevisionDetailV1RevisionMetadata.CreatedAt, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadata) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCreatedBy returns RevisionDetailV1RevisionMetadata.CreatedBy, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadata) GetCreatedBy() RevisionDetailV1RevisionMetadataCreatedByUser {
	return v.CreatedBy
}

// GetAuthorInfo returns RevisionDetailV1RevisionMetadata.AuthorInfo, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadata) GetAuthorInfo() *RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo {
	return v.AuthorInfo
}

// RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo includes the requested fields of the GraphQL type RevisionAuthorInfo.
type RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo struct {
	// A short description of how the revision was initiated.
	Summary string `json:"summary"`
	// When true, this indicates the original author's user has since been deleted.
	CreatorDeleted bool `json:"creatorDeleted"`
}

// GetSummary returns RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo.Summary, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo) GetSummary() string {
	return v.Summary
}

// GetCreatorDeleted returns RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo.CreatorDeleted, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo) GetCreatorDeleted() bool {
	return v.CreatorDeleted
}

// RevisionDetailV1RevisionMetadataCreatedByUser includes the requested fields of the GraphQL type User.
type RevisionDetailV1RevisionMetadataCreatedByUser struct {
	Id     uuid.UUID `json:"id"`
	Login  string    `json:"login"`
	Name   string    `json:"name"`
	Avatar *string   `json:"avatar,omitempty"`
}

// GetId returns RevisionDetailV1RevisionMetadataCreatedByUser.Id, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadataCreatedByUser) GetId() uuid.UUID { return v.Id }

// GetLogin returns RevisionDetailV1RevisionMetadataCreatedByUser.Login, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadataCreatedByUser) GetLogin() string { return v.Login }

// GetName returns RevisionDetailV1RevisionMetadataCreatedByUser.Name, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadataCreatedByUser) GetName() string { return v.Name }

// GetAvatar returns RevisionDetailV1RevisionMetadataCreatedByUser.Avatar, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadataCreatedByUser) GetAvatar() *string { return v.Avatar }

// RevisionDetailV1 includes the GraphQL fields of VultrAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1VultrAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1VultrAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1VultrAccountConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1VultrAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1VultrAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

type S3BucketBackendInput struct {
	AwsAccountId uuid.UUID `json:"awsAccountId"`
	BucketName   string    `json:"bucketName"`
	Region       string    `json:"region"`
	Key          *string   `json:"key,omitempty"`
}

// GetAwsAccountId returns S3BucketBackendInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *S3BucketBackendInput) GetAwsAccountId() uuid.UUID { return v.AwsAccountId }

// GetBucketName returns S3BucketBackendInput.BucketName, and is useful for accessing the field via an interface.
func (v *S3BucketBackendInput) GetBucketName() string { return v.BucketName }

// GetRegion returns S3BucketBackendInput.Region, and is useful for accessing the field via an interface.
func (v *S3BucketBackendInput) GetRegion() string { return v.Region }

// GetKey returns S3BucketBackendInput.Key, and is useful for accessing the field via an interface.
func (v *S3BucketBackendInput) GetKey() *string { return v.Key }

type SecretMountDataInput struct {
	SecretName string `json:"secretName"`
	MountPath  string `json:"mountPath"`
	ReadOnly   *bool  `json:"readOnly,omitempty"`
}

// GetSecretName returns SecretMountDataInput.SecretName, and is useful for accessing the field via an interface.
func (v *SecretMountDataInput) GetSecretName() string { return v.SecretName }

// GetMountPath returns SecretMountDataInput.MountPath, and is useful for accessing the field via an interface.
func (v *SecretMountDataInput) GetMountPath() string { return v.MountPath }

// GetReadOnly returns SecretMountDataInput.ReadOnly, and is useful for accessing the field via an interface.
func (v *SecretMountDataInput) GetReadOnly() *bool { return v.ReadOnly }

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

type SortInput struct {
	Direction *SortDirection `json:"direction,omitempty"`
	Field     *string        `json:"field,omitempty"`
}

// GetDirection returns SortInput.Direction, and is useful for accessing the field via an interface.
func (v *SortInput) GetDirection() *SortDirection { return v.Direction }

// GetField returns SortInput.Field, and is useful for accessing the field via an interface.
func (v *SortInput) GetField() *string { return v.Field }

type SourceInput struct {
	Git               *GitSourceInput               `json:"git,omitempty"`
	TerraformModule   *TerraformModuleSourceInput   `json:"terraformModule,omitempty"`
	HelmRepository    *HelmRepositorySourceInput    `json:"helmRepository,omitempty"`
	ContainerRegistry *ContainerRegistrySourceInput `json:"containerRegistry,omitempty"`
}

// GetGit returns SourceInput.Git, and is useful for accessing the field via an interface.
func (v *SourceInput) GetGit() *GitSourceInput { return v.Git }

// GetTerraformModule returns SourceInput.TerraformModule, and is useful for accessing the field via an interface.
func (v *SourceInput) GetTerraformModule() *TerraformModuleSourceInput { return v.TerraformModule }

// GetHelmRepository returns SourceInput.HelmRepository, and is useful for accessing the field via an interface.
func (v *SourceInput) GetHelmRepository() *HelmRepositorySourceInput { return v.HelmRepository }

// GetContainerRegistry returns SourceInput.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *SourceInput) GetContainerRegistry() *ContainerRegistrySourceInput {
	return v.ContainerRegistry
}

type StringCriterion struct {
	Value    *string                      `json:"value,omitempty"`
	Operator *FilterCriterionOperatorType `json:"operator,omitempty"`
}

// GetValue returns StringCriterion.Value, and is useful for accessing the field via an interface.
func (v *StringCriterion) GetValue() *string { return v.Value }

// GetOperator returns StringCriterion.Operator, and is useful for accessing the field via an interface.
func (v *StringCriterion) GetOperator() *FilterCriterionOperatorType { return v.Operator }

// subGroupResponse is returned by subGroup on success.
type SubGroupResponse struct {
	Team *SubGroupTeam `json:"team,omitempty"`
}

// GetTeam returns SubGroupResponse.Team, and is useful for accessing the field via an interface.
func (v *SubGroupResponse) GetTeam() *SubGroupTeam { return v.Team }

// SubGroupTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type SubGroupTeam struct {
	Groups SubGroupTeamGroupsGroupConnection `json:"groups"`
}

// GetGroups returns SubGroupTeam.Groups, and is useful for accessing the field via an interface.
func (v *SubGroupTeam) GetGroups() SubGroupTeamGroupsGroupConnection { return v.Groups }

// SubGroupTeamGroupsGroupConnection includes the requested fields of the GraphQL type GroupConnection.
type SubGroupTeamGroupsGroupConnection struct {
	Nodes []SubGroupTeamGroupsGroupConnectionNodesGroup `json:"nodes"`
}

// GetNodes returns SubGroupTeamGroupsGroupConnection.Nodes, and is useful for accessing the field via an interface.
func (v *SubGroupTeamGroupsGroupConnection) GetNodes() []SubGroupTeamGroupsGroupConnectionNodesGroup {
	return v.Nodes
}

// SubGroupTeamGroupsGroupConnectionNodesGroup includes the requested fields of the GraphQL type Group.
type SubGroupTeamGroupsGroupConnectionNodesGroup struct {
	Id       uuid.UUID                                           `json:"id"`
	SubGroup SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup `json:"subGroup"`
}

// GetId returns SubGroupTeamGroupsGroupConnectionNodesGroup.Id, and is useful for accessing the field via an interface.
func (v *SubGroupTeamGroupsGroupConnectionNodesGroup) GetId() uuid.UUID { return v.Id }

// GetSubGroup returns SubGroupTeamGroupsGroupConnectionNodesGroup.SubGroup, and is useful for accessing the field via an interface.
func (v *SubGroupTeamGroupsGroupConnectionNodesGroup) GetSubGroup() SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup {
	return v.SubGroup
}

// SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup includes the requested fields of the GraphQL type SubGroup.
type SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup struct {
	Id        uuid.UUID                                                       `json:"id"`
	Name      string                                                          `json:"name"`
	Envs      []SubGroupTeamGroupsGroupConnectionNodesGroupSubGroupEnvsEnvVar `json:"envs"`
	CreatedAt time.Time                                                       `json:"createdAt"`
	UpdatedAt time.Time                                                       `json:"updatedAt"`
}

// GetId returns SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup.Id, and is useful for accessing the field via an interface.
func (v *SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup) GetId() uuid.UUID { return v.Id }

// GetName returns SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup.Name, and is useful for accessing the field via an interface.
func (v *SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup) GetName() string { return v.Name }

// GetEnvs returns SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup.Envs, and is useful for accessing the field via an interface.
func (v *SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup) GetEnvs() []SubGroupTeamGroupsGroupConnectionNodesGroupSubGroupEnvsEnvVar {
	return v.Envs
}

// GetCreatedAt returns SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *SubGroupTeamGroupsGroupConnectionNodesGroupSubGroup) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// SubGroupTeamGroupsGroupConnectionNodesGroupSubGroupEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type SubGroupTeamGroupsGroupConnectionNodesGroupSubGroupEnvsEnvVar struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns SubGroupTeamGroupsGroupConnectionNodesGroupSubGroupEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *SubGroupTeamGroupsGroupConnectionNodesGroupSubGroupEnvsEnvVar) GetName() string {
	return v.Name
}

// GetValue returns SubGroupTeamGroupsGroupConnectionNodesGroupSubGroupEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *SubGroupTeamGroupsGroupConnectionNodesGroupSubGroupEnvsEnvVar) GetValue() string {
	return v.Value
}

// submitWorkflowRunResponse is returned by submitWorkflowRun on success.
type SubmitWorkflowRunResponse struct {
	SubmitWorkflow SubmitWorkflowRunSubmitWorkflowWorkflowRun `json:"submitWorkflow"`
}

// GetSubmitWorkflow returns SubmitWorkflowRunResponse.SubmitWorkflow, and is useful for accessing the field via an interface.
func (v *SubmitWorkflowRunResponse) GetSubmitWorkflow() SubmitWorkflowRunSubmitWorkflowWorkflowRun {
	return v.SubmitWorkflow
}

// SubmitWorkflowRunSubmitWorkflowWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type SubmitWorkflowRunSubmitWorkflowWorkflowRun struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns SubmitWorkflowRunSubmitWorkflowWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *SubmitWorkflowRunSubmitWorkflowWorkflowRun) GetId() uuid.UUID { return v.Id }

type TCPProbeInput struct {
	Host string `json:"host"`
	Port string `json:"port"`
}

// GetHost returns TCPProbeInput.Host, and is useful for accessing the field via an interface.
func (v *TCPProbeInput) GetHost() string { return v.Host }

// GetPort returns TCPProbeInput.Port, and is useful for accessing the field via an interface.
func (v *TCPProbeInput) GetPort() string { return v.Port }

// teamResponse is returned by team on success.
type TeamResponse struct {
	Team *TeamTeam `json:"team,omitempty"`
}

// GetTeam returns TeamResponse.Team, and is useful for accessing the field via an interface.
func (v *TeamResponse) GetTeam() *TeamTeam { return v.Team }

// TeamTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type TeamTeam struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns TeamTeam.Id, and is useful for accessing the field via an interface.
func (v *TeamTeam) GetId() uuid.UUID { return v.Id }

// GetName returns TeamTeam.Name, and is useful for accessing the field via an interface.
func (v *TeamTeam) GetName() string { return v.Name }

// See TerraformAutomaticOutputConfiguration.
type TerraformAutomaticOutputConfigurationInput struct {
	Disabled  *bool    `json:"disabled,omitempty"`
	Sensitive *bool    `json:"sensitive,omitempty"`
	Excluded  []string `json:"excluded"`
}

// GetDisabled returns TerraformAutomaticOutputConfigurationInput.Disabled, and is useful for accessing the field via an interface.
func (v *TerraformAutomaticOutputConfigurationInput) GetDisabled() *bool { return v.Disabled }

// GetSensitive returns TerraformAutomaticOutputConfigurationInput.Sensitive, and is useful for accessing the field via an interface.
func (v *TerraformAutomaticOutputConfigurationInput) GetSensitive() *bool { return v.Sensitive }

// GetExcluded returns TerraformAutomaticOutputConfigurationInput.Excluded, and is useful for accessing the field via an interface.
func (v *TerraformAutomaticOutputConfigurationInput) GetExcluded() []string { return v.Excluded }

type TerraformModuleSourceInput struct {
	Source      string                                 `json:"source"`
	Version     *string                                `json:"version,omitempty"`
	Integration *TerraformModuleSourceIntegrationInput `json:"integration,omitempty"`
}

// GetSource returns TerraformModuleSourceInput.Source, and is useful for accessing the field via an interface.
func (v *TerraformModuleSourceInput) GetSource() string { return v.Source }

// GetVersion returns TerraformModuleSourceInput.Version, and is useful for accessing the field via an interface.
func (v *TerraformModuleSourceInput) GetVersion() *string { return v.Version }

// GetIntegration returns TerraformModuleSourceInput.Integration, and is useful for accessing the field via an interface.
func (v *TerraformModuleSourceInput) GetIntegration() *TerraformModuleSourceIntegrationInput {
	return v.Integration
}

type TerraformModuleSourceIntegrationInput struct {
	Git *GitSourceIntegrationInput `json:"git,omitempty"`
}

// GetGit returns TerraformModuleSourceIntegrationInput.Git, and is useful for accessing the field via an interface.
func (v *TerraformModuleSourceIntegrationInput) GetGit() *GitSourceIntegrationInput { return v.Git }

// See TerraformOutputConfiguration.
type TerraformOutputConfigurationInput struct {
	Automatic     *TerraformAutomaticOutputConfigurationInput `json:"automatic,omitempty"`
	Customization *string                                     `json:"customization,omitempty"`
}

// GetAutomatic returns TerraformOutputConfigurationInput.Automatic, and is useful for accessing the field via an interface.
func (v *TerraformOutputConfigurationInput) GetAutomatic() *TerraformAutomaticOutputConfigurationInput {
	return v.Automatic
}

// GetCustomization returns TerraformOutputConfigurationInput.Customization, and is useful for accessing the field via an interface.
func (v *TerraformOutputConfigurationInput) GetCustomization() *string { return v.Customization }

type TerraformProviderInput struct {
	// Zeet ID for a connected AWS Account
	AwsAccountId *uuid.UUID `json:"awsAccountId,omitempty"`
	// Zeet ID for a connected GCP Account
	GcpAccountId *uuid.UUID `json:"gcpAccountId,omitempty"`
	// Zeet ID for a connected DigitalOcean Account
	DoAccountId *uuid.UUID `json:"doAccountId,omitempty"`
	// Region name, when applicable
	Region *string `json:"region,omitempty"`
}

// GetAwsAccountId returns TerraformProviderInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *TerraformProviderInput) GetAwsAccountId() *uuid.UUID { return v.AwsAccountId }

// GetGcpAccountId returns TerraformProviderInput.GcpAccountId, and is useful for accessing the field via an interface.
func (v *TerraformProviderInput) GetGcpAccountId() *uuid.UUID { return v.GcpAccountId }

// GetDoAccountId returns TerraformProviderInput.DoAccountId, and is useful for accessing the field via an interface.
func (v *TerraformProviderInput) GetDoAccountId() *uuid.UUID { return v.DoAccountId }

// GetRegion returns TerraformProviderInput.Region, and is useful for accessing the field via an interface.
func (v *TerraformProviderInput) GetRegion() *string { return v.Region }

type TerraformStateBackendInput struct {
	S3Bucket  *S3BucketBackendInput  `json:"s3Bucket,omitempty"`
	GcsBucket *GCSBucketBackendInput `json:"gcsBucket,omitempty"`
}

// GetS3Bucket returns TerraformStateBackendInput.S3Bucket, and is useful for accessing the field via an interface.
func (v *TerraformStateBackendInput) GetS3Bucket() *S3BucketBackendInput { return v.S3Bucket }

// GetGcsBucket returns TerraformStateBackendInput.GcsBucket, and is useful for accessing the field via an interface.
func (v *TerraformStateBackendInput) GetGcsBucket() *GCSBucketBackendInput { return v.GcsBucket }

type TerraformTargetConfigurationInput struct {
	StateBackend TerraformStateBackendInput `json:"stateBackend"`
	ModuleName   *string                    `json:"moduleName,omitempty"`
	Provider     TerraformProviderInput     `json:"provider"`
}

// GetStateBackend returns TerraformTargetConfigurationInput.StateBackend, and is useful for accessing the field via an interface.
func (v *TerraformTargetConfigurationInput) GetStateBackend() TerraformStateBackendInput {
	return v.StateBackend
}

// GetModuleName returns TerraformTargetConfigurationInput.ModuleName, and is useful for accessing the field via an interface.
func (v *TerraformTargetConfigurationInput) GetModuleName() *string { return v.ModuleName }

// GetProvider returns TerraformTargetConfigurationInput.Provider, and is useful for accessing the field via an interface.
func (v *TerraformTargetConfigurationInput) GetProvider() TerraformProviderInput { return v.Provider }

type TriggerActionType string

const (
	TriggerActionTypeOrchestrationWorkflow TriggerActionType = "ORCHESTRATION_WORKFLOW"
)

type TriggerConfigurationInput struct {
	Event  *EventTriggerConfigurationInput  `json:"event,omitempty"`
	Action *ActionTriggerConfigurationInput `json:"action,omitempty"`
}

// GetEvent returns TriggerConfigurationInput.Event, and is useful for accessing the field via an interface.
func (v *TriggerConfigurationInput) GetEvent() *EventTriggerConfigurationInput { return v.Event }

// GetAction returns TriggerConfigurationInput.Action, and is useful for accessing the field via an interface.
func (v *TriggerConfigurationInput) GetAction() *ActionTriggerConfigurationInput { return v.Action }

type TriggerDefinitionInput struct {
	Action        TriggerActionType         `json:"action"`
	Events        []TriggerEventType        `json:"events"`
	Configuration TriggerConfigurationInput `json:"configuration"`
}

// GetAction returns TriggerDefinitionInput.Action, and is useful for accessing the field via an interface.
func (v *TriggerDefinitionInput) GetAction() TriggerActionType { return v.Action }

// GetEvents returns TriggerDefinitionInput.Events, and is useful for accessing the field via an interface.
func (v *TriggerDefinitionInput) GetEvents() []TriggerEventType { return v.Events }

// GetConfiguration returns TriggerDefinitionInput.Configuration, and is useful for accessing the field via an interface.
func (v *TriggerDefinitionInput) GetConfiguration() TriggerConfigurationInput { return v.Configuration }

type TriggerEventType string

const (
	TriggerEventTypeManual             TriggerEventType = "MANUAL"
	TriggerEventTypeGitPush            TriggerEventType = "GIT_PUSH"
	TriggerEventTypeGitPrOpened        TriggerEventType = "GIT_PR_OPENED"
	TriggerEventTypeGitPrReviewComment TriggerEventType = "GIT_PR_REVIEW_COMMENT"
	TriggerEventTypeGitReleaseCreated  TriggerEventType = "GIT_RELEASE_CREATED"
	TriggerEventTypeGitReleaseReleased TriggerEventType = "GIT_RELEASE_RELEASED"
	TriggerEventTypeGitIssueOpened     TriggerEventType = "GIT_ISSUE_OPENED"
	TriggerEventTypeCronjob            TriggerEventType = "CRONJOB"
)

// unlinkProjectResponse is returned by unlinkProject on success.
type UnlinkProjectResponse struct {
	UnlinkProject bool `json:"unlinkProject"`
}

// GetUnlinkProject returns UnlinkProjectResponse.UnlinkProject, and is useful for accessing the field via an interface.
func (v *UnlinkProjectResponse) GetUnlinkProject() bool { return v.UnlinkProject }

type UpdateDeployInput struct {
	Configuration *DeploymentConfigurationInput `json:"configuration,omitempty"`
}

// GetConfiguration returns UpdateDeployInput.Configuration, and is useful for accessing the field via an interface.
func (v *UpdateDeployInput) GetConfiguration() *DeploymentConfigurationInput { return v.Configuration }

// updateDeployResponse is returned by updateDeploy on success.
type UpdateDeployResponse struct {
	UpdateDeploy UpdateDeployUpdateDeploy `json:"updateDeploy"`
}

// GetUpdateDeploy returns UpdateDeployResponse.UpdateDeploy, and is useful for accessing the field via an interface.
func (v *UpdateDeployResponse) GetUpdateDeploy() UpdateDeployUpdateDeploy { return v.UpdateDeploy }

// UpdateDeployUpdateDeploy includes the requested fields of the GraphQL type Deploy.
type UpdateDeployUpdateDeploy struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns UpdateDeployUpdateDeploy.Id, and is useful for accessing the field via an interface.
func (v *UpdateDeployUpdateDeploy) GetId() uuid.UUID { return v.Id }

type UpdateGroupInput struct {
	Id   uuid.UUID     `json:"id"`
	Name *string       `json:"name,omitempty"`
	Envs []EnvVarInput `json:"envs"`
}

// GetId returns UpdateGroupInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateGroupInput) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateGroupInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateGroupInput) GetName() *string { return v.Name }

// GetEnvs returns UpdateGroupInput.Envs, and is useful for accessing the field via an interface.
func (v *UpdateGroupInput) GetEnvs() []EnvVarInput { return v.Envs }

// updateGroupResponse is returned by updateGroup on success.
type UpdateGroupResponse struct {
	UpdateGroup UpdateGroupUpdateGroup `json:"updateGroup"`
}

// GetUpdateGroup returns UpdateGroupResponse.UpdateGroup, and is useful for accessing the field via an interface.
func (v *UpdateGroupResponse) GetUpdateGroup() UpdateGroupUpdateGroup { return v.UpdateGroup }

// UpdateGroupUpdateGroup includes the requested fields of the GraphQL type Group.
type UpdateGroupUpdateGroup struct {
	Id        uuid.UUID                          `json:"id"`
	Name      string                             `json:"name"`
	Envs      []UpdateGroupUpdateGroupEnvsEnvVar `json:"envs"`
	CreatedAt time.Time                          `json:"createdAt"`
	UpdatedAt time.Time                          `json:"updatedAt"`
}

// GetId returns UpdateGroupUpdateGroup.Id, and is useful for accessing the field via an interface.
func (v *UpdateGroupUpdateGroup) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateGroupUpdateGroup.Name, and is useful for accessing the field via an interface.
func (v *UpdateGroupUpdateGroup) GetName() string { return v.Name }

// GetEnvs returns UpdateGroupUpdateGroup.Envs, and is useful for accessing the field via an interface.
func (v *UpdateGroupUpdateGroup) GetEnvs() []UpdateGroupUpdateGroupEnvsEnvVar { return v.Envs }

// GetCreatedAt returns UpdateGroupUpdateGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateGroupUpdateGroup) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns UpdateGroupUpdateGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateGroupUpdateGroup) GetUpdatedAt() time.Time { return v.UpdatedAt }

// UpdateGroupUpdateGroupEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type UpdateGroupUpdateGroupEnvsEnvVar struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns UpdateGroupUpdateGroupEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *UpdateGroupUpdateGroupEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns UpdateGroupUpdateGroupEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *UpdateGroupUpdateGroupEnvsEnvVar) GetValue() string { return v.Value }

type UpdateProjectInput struct {
	GroupId             *uuid.UUID                `json:"groupId,omitempty"`
	GroupName           *string                   `json:"groupName,omitempty"`
	SubGroupId          *uuid.UUID                `json:"subGroupId,omitempty"`
	SubGroupName        *string                   `json:"subGroupName,omitempty"`
	Name                *string                   `json:"name,omitempty"`
	Envs                []EnvVarInput             `json:"envs"`
	ObservabilityConfig *ObservabilityConfigInput `json:"observabilityConfig,omitempty"`
}

// GetGroupId returns UpdateProjectInput.GroupId, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGroupId() *uuid.UUID { return v.GroupId }

// GetGroupName returns UpdateProjectInput.GroupName, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGroupName() *string { return v.GroupName }

// GetSubGroupId returns UpdateProjectInput.SubGroupId, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetSubGroupId() *uuid.UUID { return v.SubGroupId }

// GetSubGroupName returns UpdateProjectInput.SubGroupName, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetSubGroupName() *string { return v.SubGroupName }

// GetName returns UpdateProjectInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetName() *string { return v.Name }

// GetEnvs returns UpdateProjectInput.Envs, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetEnvs() []EnvVarInput { return v.Envs }

// GetObservabilityConfig returns UpdateProjectInput.ObservabilityConfig, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetObservabilityConfig() *ObservabilityConfigInput {
	return v.ObservabilityConfig
}

// updateProjectResponse is returned by updateProject on success.
type UpdateProjectResponse struct {
	UpdateProject UpdateProjectUpdateProject `json:"updateProject"`
}

// GetUpdateProject returns UpdateProjectResponse.UpdateProject, and is useful for accessing the field via an interface.
func (v *UpdateProjectResponse) GetUpdateProject() UpdateProjectUpdateProject { return v.UpdateProject }

// UpdateProjectUpdateProject includes the requested fields of the GraphQL type Project.
type UpdateProjectUpdateProject struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns UpdateProjectUpdateProject.Id, and is useful for accessing the field via an interface.
func (v *UpdateProjectUpdateProject) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateProjectUpdateProject.Name, and is useful for accessing the field via an interface.
func (v *UpdateProjectUpdateProject) GetName() string { return v.Name }

type UpdateSubGroupInput struct {
	Id   uuid.UUID     `json:"id"`
	Name *string       `json:"name,omitempty"`
	Envs []EnvVarInput `json:"envs"`
}

// GetId returns UpdateSubGroupInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateSubGroupInput) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateSubGroupInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateSubGroupInput) GetName() *string { return v.Name }

// GetEnvs returns UpdateSubGroupInput.Envs, and is useful for accessing the field via an interface.
func (v *UpdateSubGroupInput) GetEnvs() []EnvVarInput { return v.Envs }

// updateSubGroupResponse is returned by updateSubGroup on success.
type UpdateSubGroupResponse struct {
	UpdateSubGroup UpdateSubGroupUpdateSubGroup `json:"updateSubGroup"`
}

// GetUpdateSubGroup returns UpdateSubGroupResponse.UpdateSubGroup, and is useful for accessing the field via an interface.
func (v *UpdateSubGroupResponse) GetUpdateSubGroup() UpdateSubGroupUpdateSubGroup {
	return v.UpdateSubGroup
}

// UpdateSubGroupUpdateSubGroup includes the requested fields of the GraphQL type SubGroup.
type UpdateSubGroupUpdateSubGroup struct {
	Id        uuid.UUID                                `json:"id"`
	Name      string                                   `json:"name"`
	Envs      []UpdateSubGroupUpdateSubGroupEnvsEnvVar `json:"envs"`
	CreatedAt time.Time                                `json:"createdAt"`
	UpdatedAt time.Time                                `json:"updatedAt"`
}

// GetId returns UpdateSubGroupUpdateSubGroup.Id, and is useful for accessing the field via an interface.
func (v *UpdateSubGroupUpdateSubGroup) GetId() uuid.UUID { return v.Id }

// GetName returns UpdateSubGroupUpdateSubGroup.Name, and is useful for accessing the field via an interface.
func (v *UpdateSubGroupUpdateSubGroup) GetName() string { return v.Name }

// GetEnvs returns UpdateSubGroupUpdateSubGroup.Envs, and is useful for accessing the field via an interface.
func (v *UpdateSubGroupUpdateSubGroup) GetEnvs() []UpdateSubGroupUpdateSubGroupEnvsEnvVar {
	return v.Envs
}

// GetCreatedAt returns UpdateSubGroupUpdateSubGroup.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateSubGroupUpdateSubGroup) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns UpdateSubGroupUpdateSubGroup.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateSubGroupUpdateSubGroup) GetUpdatedAt() time.Time { return v.UpdatedAt }

// UpdateSubGroupUpdateSubGroupEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type UpdateSubGroupUpdateSubGroupEnvsEnvVar struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns UpdateSubGroupUpdateSubGroupEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *UpdateSubGroupUpdateSubGroupEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns UpdateSubGroupUpdateSubGroupEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *UpdateSubGroupUpdateSubGroupEnvsEnvVar) GetValue() string { return v.Value }

type UpdateTriggerInput struct {
	TriggerId  uuid.UUID               `json:"triggerId"`
	Definition *TriggerDefinitionInput `json:"definition,omitempty"`
}

// GetTriggerId returns UpdateTriggerInput.TriggerId, and is useful for accessing the field via an interface.
func (v *UpdateTriggerInput) GetTriggerId() uuid.UUID { return v.TriggerId }

// GetDefinition returns UpdateTriggerInput.Definition, and is useful for accessing the field via an interface.
func (v *UpdateTriggerInput) GetDefinition() *TriggerDefinitionInput { return v.Definition }

type UpdateWorkflowInput struct {
	Name       *string                  `json:"name,omitempty"`
	Definition *WorkflowDefinitionInput `json:"definition,omitempty"`
}

// GetName returns UpdateWorkflowInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateWorkflowInput) GetName() *string { return v.Name }

// GetDefinition returns UpdateWorkflowInput.Definition, and is useful for accessing the field via an interface.
func (v *UpdateWorkflowInput) GetDefinition() *WorkflowDefinitionInput { return v.Definition }

// updateWorkflowResponse is returned by updateWorkflow on success.
type UpdateWorkflowResponse struct {
	UpdateWorkflow UpdateWorkflowUpdateWorkflow `json:"updateWorkflow"`
}

// GetUpdateWorkflow returns UpdateWorkflowResponse.UpdateWorkflow, and is useful for accessing the field via an interface.
func (v *UpdateWorkflowResponse) GetUpdateWorkflow() UpdateWorkflowUpdateWorkflow {
	return v.UpdateWorkflow
}

// updateWorkflowTriggerResponse is returned by updateWorkflowTrigger on success.
type UpdateWorkflowTriggerResponse struct {
	UpdateTrigger UpdateWorkflowTriggerUpdateTrigger `json:"updateTrigger"`
}

// GetUpdateTrigger returns UpdateWorkflowTriggerResponse.UpdateTrigger, and is useful for accessing the field via an interface.
func (v *UpdateWorkflowTriggerResponse) GetUpdateTrigger() UpdateWorkflowTriggerUpdateTrigger {
	return v.UpdateTrigger
}

// UpdateWorkflowTriggerUpdateTrigger includes the requested fields of the GraphQL type Trigger.
type UpdateWorkflowTriggerUpdateTrigger struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns UpdateWorkflowTriggerUpdateTrigger.Id, and is useful for accessing the field via an interface.
func (v *UpdateWorkflowTriggerUpdateTrigger) GetId() uuid.UUID { return v.Id }

// UpdateWorkflowUpdateWorkflow includes the requested fields of the GraphQL type Workflow.
type UpdateWorkflowUpdateWorkflow struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns UpdateWorkflowUpdateWorkflow.Id, and is useful for accessing the field via an interface.
func (v *UpdateWorkflowUpdateWorkflow) GetId() uuid.UUID { return v.Id }

// userPersonalAccessTokensResponse is returned by userPersonalAccessTokens on success.
type UserPersonalAccessTokensResponse struct {
	User UserPersonalAccessTokensUser `json:"user"`
}

// GetUser returns UserPersonalAccessTokensResponse.User, and is useful for accessing the field via an interface.
func (v *UserPersonalAccessTokensResponse) GetUser() UserPersonalAccessTokensUser { return v.User }

// UserPersonalAccessTokensUser includes the requested fields of the GraphQL type User.
type UserPersonalAccessTokensUser struct {
	Id                   uuid.UUID                                                             `json:"id"`
	PersonalAccessTokens []UserPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken `json:"personalAccessTokens"`
}

// GetId returns UserPersonalAccessTokensUser.Id, and is useful for accessing the field via an interface.
func (v *UserPersonalAccessTokensUser) GetId() uuid.UUID { return v.Id }

// GetPersonalAccessTokens returns UserPersonalAccessTokensUser.PersonalAccessTokens, and is useful for accessing the field via an interface.
func (v *UserPersonalAccessTokensUser) GetPersonalAccessTokens() []UserPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken {
	return v.PersonalAccessTokens
}

// UserPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken includes the requested fields of the GraphQL type PersonalAccessToken.
type UserPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken struct {
	Id        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Token     string    `json:"token"`
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns UserPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken.Id, and is useful for accessing the field via an interface.
func (v *UserPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken) GetId() uuid.UUID {
	return v.Id
}

// GetName returns UserPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken.Name, and is useful for accessing the field via an interface.
func (v *UserPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken) GetName() string {
	return v.Name
}

// GetToken returns UserPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken.Token, and is useful for accessing the field via an interface.
func (v *UserPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken) GetToken() string {
	return v.Token
}

// GetCreatedAt returns UserPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken) GetCreatedAt() time.Time {
	return v.CreatedAt
}

type VariableType string

const (
	VariableTypeString  VariableType = "STRING"
	VariableTypeBoolean VariableType = "BOOLEAN"
	VariableTypeInteger VariableType = "INTEGER"
	VariableTypeFloat   VariableType = "FLOAT"
)

type VolumeSpecInput struct {
	Size      int    `json:"size"`
	MountPath string `json:"mountPath"`
}

// GetSize returns VolumeSpecInput.Size, and is useful for accessing the field via an interface.
func (v *VolumeSpecInput) GetSize() int { return v.Size }

// GetMountPath returns VolumeSpecInput.MountPath, and is useful for accessing the field via an interface.
func (v *VolumeSpecInput) GetMountPath() string { return v.MountPath }

type WorkflowBranchDefinitionInput struct {
	Name      string `json:"name"`
	CommitSha string `json:"commitSha"`
}

// GetName returns WorkflowBranchDefinitionInput.Name, and is useful for accessing the field via an interface.
func (v *WorkflowBranchDefinitionInput) GetName() string { return v.Name }

// GetCommitSha returns WorkflowBranchDefinitionInput.CommitSha, and is useful for accessing the field via an interface.
func (v *WorkflowBranchDefinitionInput) GetCommitSha() string { return v.CommitSha }

type WorkflowDefinitionInput struct {
	Steps             []WorkflowStepDefinitionInput  `json:"steps"`
	Source            *SourceInput                   `json:"source,omitempty"`
	Branch            *WorkflowBranchDefinitionInput `json:"branch,omitempty"`
	WorkflowClusterId *uuid.UUID                     `json:"workflowClusterId,omitempty"`
}

// GetSteps returns WorkflowDefinitionInput.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowDefinitionInput) GetSteps() []WorkflowStepDefinitionInput { return v.Steps }

// GetSource returns WorkflowDefinitionInput.Source, and is useful for accessing the field via an interface.
func (v *WorkflowDefinitionInput) GetSource() *SourceInput { return v.Source }

// GetBranch returns WorkflowDefinitionInput.Branch, and is useful for accessing the field via an interface.
func (v *WorkflowDefinitionInput) GetBranch() *WorkflowBranchDefinitionInput { return v.Branch }

// GetWorkflowClusterId returns WorkflowDefinitionInput.WorkflowClusterId, and is useful for accessing the field via an interface.
func (v *WorkflowDefinitionInput) GetWorkflowClusterId() *uuid.UUID { return v.WorkflowClusterId }

// WorkflowDetail includes the GraphQL fields of Workflow requested by the fragment WorkflowDetail.
type WorkflowDetail struct {
	Id       uuid.UUID                                   `json:"id"`
	Steps    []WorkflowDetailStepsWorkflowStepDefinition `json:"steps"`
	Triggers WorkflowDetailTriggersTriggerConnection     `json:"triggers"`
}

// GetId returns WorkflowDetail.Id, and is useful for accessing the field via an interface.
func (v *WorkflowDetail) GetId() uuid.UUID { return v.Id }

// GetSteps returns WorkflowDetail.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowDetail) GetSteps() []WorkflowDetailStepsWorkflowStepDefinition { return v.Steps }

// GetTriggers returns WorkflowDetail.Triggers, and is useful for accessing the field via an interface.
func (v *WorkflowDetail) GetTriggers() WorkflowDetailTriggersTriggerConnection { return v.Triggers }

// workflowDetailResponse is returned by workflowDetail on success.
type WorkflowDetailResponse struct {
	Team *WorkflowDetailTeam `json:"team,omitempty"`
}

// GetTeam returns WorkflowDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *WorkflowDetailResponse) GetTeam() *WorkflowDetailTeam { return v.Team }

// WorkflowDetailStepsWorkflowStepDefinition includes the requested fields of the GraphQL type WorkflowStepDefinition.
type WorkflowDetailStepsWorkflowStepDefinition struct {
	Action         WorkflowStepActionType `json:"action"`
	SequenceNumber *int                   `json:"sequenceNumber,omitempty"`
	Disabled       *bool                  `json:"disabled,omitempty"`
}

// GetAction returns WorkflowDetailStepsWorkflowStepDefinition.Action, and is useful for accessing the field via an interface.
func (v *WorkflowDetailStepsWorkflowStepDefinition) GetAction() WorkflowStepActionType {
	return v.Action
}

// GetSequenceNumber returns WorkflowDetailStepsWorkflowStepDefinition.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowDetailStepsWorkflowStepDefinition) GetSequenceNumber() *int { return v.SequenceNumber }

// GetDisabled returns WorkflowDetailStepsWorkflowStepDefinition.Disabled, and is useful for accessing the field via an interface.
func (v *WorkflowDetailStepsWorkflowStepDefinition) GetDisabled() *bool { return v.Disabled }

// WorkflowDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type WorkflowDetailTeam struct {
	Project *WorkflowDetailTeamProject `json:"project,omitempty"`
}

// GetProject returns WorkflowDetailTeam.Project, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTeam) GetProject() *WorkflowDetailTeamProject { return v.Project }

// WorkflowDetailTeamProject includes the requested fields of the GraphQL type Project.
type WorkflowDetailTeamProject struct {
	Workflow *WorkflowDetailTeamProjectWorkflow `json:"workflow,omitempty"`
}

// GetWorkflow returns WorkflowDetailTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTeamProject) GetWorkflow() *WorkflowDetailTeamProjectWorkflow {
	return v.Workflow
}

// WorkflowDetailTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type WorkflowDetailTeamProjectWorkflow struct {
	WorkflowDetail `json:"-"`
}

// GetId returns WorkflowDetailTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTeamProjectWorkflow) GetId() uuid.UUID { return v.WorkflowDetail.Id }

// GetSteps returns WorkflowDetailTeamProjectWorkflow.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTeamProjectWorkflow) GetSteps() []WorkflowDetailStepsWorkflowStepDefinition {
	return v.WorkflowDetail.Steps
}

// GetTriggers returns WorkflowDetailTeamProjectWorkflow.Triggers, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTeamProjectWorkflow) GetTriggers() WorkflowDetailTriggersTriggerConnection {
	return v.WorkflowDetail.Triggers
}

func (v *WorkflowDetailTeamProjectWorkflow) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowDetailTeamProjectWorkflow
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowDetailTeamProjectWorkflow = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowDetailTeamProjectWorkflow struct {
	Id uuid.UUID `json:"id"`

	Steps []WorkflowDetailStepsWorkflowStepDefinition `json:"steps"`

	Triggers WorkflowDetailTriggersTriggerConnection `json:"triggers"`
}

func (v *WorkflowDetailTeamProjectWorkflow) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowDetailTeamProjectWorkflow) __premarshalJSON() (*__premarshalWorkflowDetailTeamProjectWorkflow, error) {
	var retval __premarshalWorkflowDetailTeamProjectWorkflow

	retval.Id = v.WorkflowDetail.Id
	retval.Steps = v.WorkflowDetail.Steps
	retval.Triggers = v.WorkflowDetail.Triggers
	return &retval, nil
}

// WorkflowDetailTriggersTriggerConnection includes the requested fields of the GraphQL type TriggerConnection.
type WorkflowDetailTriggersTriggerConnection struct {
	TotalCount int                                                   `json:"totalCount"`
	Nodes      []WorkflowDetailTriggersTriggerConnectionNodesTrigger `json:"nodes"`
}

// GetTotalCount returns WorkflowDetailTriggersTriggerConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnection) GetTotalCount() int { return v.TotalCount }

// GetNodes returns WorkflowDetailTriggersTriggerConnection.Nodes, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnection) GetNodes() []WorkflowDetailTriggersTriggerConnectionNodesTrigger {
	return v.Nodes
}

// WorkflowDetailTriggersTriggerConnectionNodesTrigger includes the requested fields of the GraphQL type Trigger.
type WorkflowDetailTriggersTriggerConnectionNodesTrigger struct {
	Id            uuid.UUID                                                         `json:"id"`
	Action        TriggerActionType                                                 `json:"action"`
	Events        []TriggerEventType                                                `json:"events"`
	Configuration *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration `json:"configuration,omitempty"`
}

// GetId returns WorkflowDetailTriggersTriggerConnectionNodesTrigger.Id, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTrigger) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowDetailTriggersTriggerConnectionNodesTrigger.Action, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTrigger) GetAction() TriggerActionType {
	return v.Action
}

// GetEvents returns WorkflowDetailTriggersTriggerConnectionNodesTrigger.Events, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTrigger) GetEvents() []TriggerEventType {
	return v.Events
}

// GetConfiguration returns WorkflowDetailTriggersTriggerConnectionNodesTrigger.Configuration, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTrigger) GetConfiguration() *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration {
	return v.Configuration
}

// WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration includes the requested fields of the GraphQL type TriggerConfiguration.
type WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration struct {
	Event  *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfiguration   `json:"event,omitempty"`
	Action *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationActionActionTriggerConfiguration `json:"action,omitempty"`
}

// GetEvent returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration.Event, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration) GetEvent() *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfiguration {
	return v.Event
}

// GetAction returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration.Action, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration) GetAction() *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationActionActionTriggerConfiguration {
	return v.Action
}

// WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationActionActionTriggerConfiguration includes the requested fields of the GraphQL type ActionTriggerConfiguration.
type WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationActionActionTriggerConfiguration struct {
	WorkflowId *uuid.UUID `json:"workflowId,omitempty"`
}

// GetWorkflowId returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationActionActionTriggerConfiguration.WorkflowId, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationActionActionTriggerConfiguration) GetWorkflowId() *uuid.UUID {
	return v.WorkflowId
}

// WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfiguration includes the requested fields of the GraphQL type EventTriggerConfiguration.
type WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfiguration struct {
	Git *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration `json:"git,omitempty"`
}

// GetGit returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfiguration.Git, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfiguration) GetGit() *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration {
	return v.Git
}

// WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration includes the requested fields of the GraphQL type GitEventTriggerConfiguration.
type WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration struct {
	RepoId             *string `json:"repoId,omitempty"`
	RepoBranchName     *string `json:"repoBranchName,omitempty"`
	RepoOwner          *string `json:"repoOwner,omitempty"`
	RepoName           *string `json:"repoName,omitempty"`
	GithubConnectionId *int    `json:"githubConnectionId,omitempty"`
}

// GetRepoId returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration.RepoId, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration) GetRepoId() *string {
	return v.RepoId
}

// GetRepoBranchName returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration.RepoBranchName, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration) GetRepoBranchName() *string {
	return v.RepoBranchName
}

// GetRepoOwner returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration.RepoOwner, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration) GetRepoOwner() *string {
	return v.RepoOwner
}

// GetRepoName returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration.RepoName, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration) GetRepoName() *string {
	return v.RepoName
}

// GetGithubConnectionId returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration.GithubConnectionId, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration) GetGithubConnectionId() *int {
	return v.GithubConnectionId
}

type WorkflowExecutionType string

const (
	WorkflowExecutionTypeBuildRun     WorkflowExecutionType = "BUILD_RUN"
	WorkflowExecutionTypeDeployRun    WorkflowExecutionType = "DEPLOY_RUN"
	WorkflowExecutionTypeDriverAction WorkflowExecutionType = "DRIVER_ACTION"
)

type WorkflowRunDefinitionInput struct {
	Steps  []WorkflowRunStepDefinitionInput `json:"steps"`
	Source *SourceInput                     `json:"source,omitempty"`
	Branch *WorkflowBranchDefinitionInput   `json:"branch,omitempty"`
}

// GetSteps returns WorkflowRunDefinitionInput.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunDefinitionInput) GetSteps() []WorkflowRunStepDefinitionInput { return v.Steps }

// GetSource returns WorkflowRunDefinitionInput.Source, and is useful for accessing the field via an interface.
func (v *WorkflowRunDefinitionInput) GetSource() *SourceInput { return v.Source }

// GetBranch returns WorkflowRunDefinitionInput.Branch, and is useful for accessing the field via an interface.
func (v *WorkflowRunDefinitionInput) GetBranch() *WorkflowBranchDefinitionInput { return v.Branch }

// WorkflowRunDetail includes the GraphQL fields of WorkflowRun requested by the fragment WorkflowRunDetail.
type WorkflowRunDetail struct {
	WorkflowRunListItem `json:"-"`
	FinishedAt          *time.Time                               `json:"finishedAt,omitempty"`
	Steps               []*WorkflowRunDetailStepsWorkflowRunStep `json:"-"`
}

// GetFinishedAt returns WorkflowRunDetail.FinishedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetail) GetFinishedAt() *time.Time { return v.FinishedAt }

// GetSteps returns WorkflowRunDetail.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetail) GetSteps() []*WorkflowRunDetailStepsWorkflowRunStep { return v.Steps }

// GetId returns WorkflowRunDetail.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetail) GetId() uuid.UUID { return v.WorkflowRunListItem.Id }

// GetSequence returns WorkflowRunDetail.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetail) GetSequence() int { return v.WorkflowRunListItem.Sequence }

// GetStatus returns WorkflowRunDetail.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetail) GetStatus() WorkflowRunStatus { return v.WorkflowRunListItem.Status }

// GetCreatedAt returns WorkflowRunDetail.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetail) GetCreatedAt() time.Time { return v.WorkflowRunListItem.CreatedAt }

func (v *WorkflowRunDetail) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetail
		Steps []json.RawMessage `json:"steps"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetail = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunListItem)
	if err != nil {
		return err
	}

	{
		dst := &v.Steps
		src := firstPass.Steps
		*dst = make(
			[]*WorkflowRunDetailStepsWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				*dst = new(WorkflowRunDetailStepsWorkflowRunStep)
				err = __unmarshalWorkflowRunDetailStepsWorkflowRunStep(
					src, *dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunDetail.Steps: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunDetail struct {
	FinishedAt *time.Time `json:"finishedAt,omitempty"`

	Steps []json.RawMessage `json:"steps,omitempty"`

	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *WorkflowRunDetail) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetail) __premarshalJSON() (*__premarshalWorkflowRunDetail, error) {
	var retval __premarshalWorkflowRunDetail

	retval.FinishedAt = v.FinishedAt
	{

		dst := &retval.Steps
		src := v.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if src != nil {
				var err error
				*dst, err = __marshalWorkflowRunDetailStepsWorkflowRunStep(
					src)
				if err != nil {
					return nil, fmt.Errorf(
						"unable to marshal WorkflowRunDetail.Steps: %w", err)
				}
			}
		}
	}
	retval.Id = v.WorkflowRunListItem.Id
	retval.Sequence = v.WorkflowRunListItem.Sequence
	retval.Status = v.WorkflowRunListItem.Status
	retval.CreatedAt = v.WorkflowRunListItem.CreatedAt
	return &retval, nil
}

// workflowRunDetailLogsResponse is returned by workflowRunDetailLogs on success.
type WorkflowRunDetailLogsResponse struct {
	Team *WorkflowRunDetailLogsTeam `json:"team,omitempty"`
}

// GetTeam returns WorkflowRunDetailLogsResponse.Team, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsResponse) GetTeam() *WorkflowRunDetailLogsTeam { return v.Team }

// WorkflowRunDetailLogsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type WorkflowRunDetailLogsTeam struct {
	Id      uuid.UUID                         `json:"id"`
	Project *WorkflowRunDetailLogsTeamProject `json:"project,omitempty"`
}

// GetId returns WorkflowRunDetailLogsTeam.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns WorkflowRunDetailLogsTeam.Project, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeam) GetProject() *WorkflowRunDetailLogsTeamProject { return v.Project }

// WorkflowRunDetailLogsTeamProject includes the requested fields of the GraphQL type Project.
type WorkflowRunDetailLogsTeamProject struct {
	Id       uuid.UUID                                 `json:"id"`
	Workflow *WorkflowRunDetailLogsTeamProjectWorkflow `json:"workflow,omitempty"`
}

// GetId returns WorkflowRunDetailLogsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProject) GetId() uuid.UUID { return v.Id }

// GetWorkflow returns WorkflowRunDetailLogsTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProject) GetWorkflow() *WorkflowRunDetailLogsTeamProjectWorkflow {
	return v.Workflow
}

// WorkflowRunDetailLogsTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type WorkflowRunDetailLogsTeamProjectWorkflow struct {
	Id  uuid.UUID                                   `json:"id"`
	Run WorkflowRunDetailLogsTeamProjectWorkflowRun `json:"run"`
}

// GetId returns WorkflowRunDetailLogsTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflow) GetId() uuid.UUID { return v.Id }

// GetRun returns WorkflowRunDetailLogsTeamProjectWorkflow.Run, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflow) GetRun() WorkflowRunDetailLogsTeamProjectWorkflowRun {
	return v.Run
}

// WorkflowRunDetailLogsTeamProjectWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type WorkflowRunDetailLogsTeamProjectWorkflowRun struct {
	Id   uuid.UUID                                       `json:"id"`
	Step WorkflowRunDetailLogsTeamProjectWorkflowRunStep `json:"-"`
}

// GetId returns WorkflowRunDetailLogsTeamProjectWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetStep returns WorkflowRunDetailLogsTeamProjectWorkflowRun.Step, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRun) GetStep() WorkflowRunDetailLogsTeamProjectWorkflowRunStep {
	return v.Step
}

func (v *WorkflowRunDetailLogsTeamProjectWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetailLogsTeamProjectWorkflowRun
		Step json.RawMessage `json:"step"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetailLogsTeamProjectWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Step
		src := firstPass.Step
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalWorkflowRunDetailLogsTeamProjectWorkflowRunStep(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal WorkflowRunDetailLogsTeamProjectWorkflowRun.Step: %w", err)
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunDetailLogsTeamProjectWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	Step json.RawMessage `json:"step"`
}

func (v *WorkflowRunDetailLogsTeamProjectWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetailLogsTeamProjectWorkflowRun) __premarshalJSON() (*__premarshalWorkflowRunDetailLogsTeamProjectWorkflowRun, error) {
	var retval __premarshalWorkflowRunDetailLogsTeamProjectWorkflowRun

	retval.Id = v.Id
	{

		dst := &retval.Step
		src := v.Step
		var err error
		*dst, err = __marshalWorkflowRunDetailLogsTeamProjectWorkflowRunStep(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal WorkflowRunDetailLogsTeamProjectWorkflowRun.Step: %w", err)
		}
	}
	return &retval, nil
}

// WorkflowRunDetailLogsTeamProjectWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunDetailLogsTeamProjectWorkflowRunStep is implemented by the following types:
// WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep
// WorkflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep
// WorkflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep
// WorkflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep
// WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep
type WorkflowRunDetailLogsTeamProjectWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunDetailLogsTeamProjectWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep) implementsGraphQLInterfaceWorkflowRunDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep) implementsGraphQLInterfaceWorkflowRunDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep) implementsGraphQLInterfaceWorkflowRunDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep) implementsGraphQLInterfaceWorkflowRunDetailLogsTeamProjectWorkflowRunStep() {
}

func __unmarshalWorkflowRunDetailLogsTeamProjectWorkflowRunStep(b []byte, v *WorkflowRunDetailLogsTeamProjectWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunDetailLogsTeamProjectWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunDetailLogsTeamProjectWorkflowRunStep(v *WorkflowRunDetailLogsTeamProjectWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunDetailLogsTeamProjectWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep struct {
	Typename *string                                                          `json:"__typename,omitempty"`
	Logs     *WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs `json:"logs,omitempty"`
}

// GetTypename returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep) GetTypename() *string {
	return v.Typename
}

// GetLogs returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep.Logs, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep) GetLogs() *WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs {
	return v.Logs
}

// WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs includes the requested fields of the GraphQL type Logs.
type WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs struct {
	Id        string                                                                           `json:"id"`
	Completed bool                                                                             `json:"completed"`
	Expired   *bool                                                                            `json:"expired,omitempty"`
	Entries   []WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry `json:"entries"`
}

// GetId returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs) GetId() string { return v.Id }

// GetCompleted returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs.Completed, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs) GetCompleted() bool {
	return v.Completed
}

// GetExpired returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs.Expired, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs) GetExpired() *bool {
	return v.Expired
}

// GetEntries returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs.Entries, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs) GetEntries() []WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry {
	return v.Entries
}

// WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry struct {
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Text      string     `json:"text"`
}

// GetTimestamp returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// GetText returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// WorkflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep struct {
	Typename *string `json:"__typename,omitempty"`
}

// GetTypename returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// WorkflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep struct {
	Typename *string `json:"__typename,omitempty"`
}

// GetTypename returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep) GetTypename() *string {
	return v.Typename
}

// WorkflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep struct {
	Typename *string `json:"__typename,omitempty"`
}

// GetTypename returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep struct {
	Typename *string                                                        `json:"__typename,omitempty"`
	Logs     *WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs `json:"logs,omitempty"`
}

// GetTypename returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep) GetTypename() *string {
	return v.Typename
}

// GetLogs returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep.Logs, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep) GetLogs() *WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs {
	return v.Logs
}

// WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs includes the requested fields of the GraphQL type Logs.
type WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs struct {
	Id        string                                                                         `json:"id"`
	Completed bool                                                                           `json:"completed"`
	Expired   *bool                                                                          `json:"expired,omitempty"`
	Entries   []WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry `json:"entries"`
}

// GetId returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs) GetId() string { return v.Id }

// GetCompleted returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs.Completed, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs) GetCompleted() bool {
	return v.Completed
}

// GetExpired returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs.Expired, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs) GetExpired() *bool {
	return v.Expired
}

// GetEntries returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs.Entries, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs) GetEntries() []WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry {
	return v.Entries
}

// WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry struct {
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Text      string     `json:"text"`
}

// GetTimestamp returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// GetText returns WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// workflowRunDetailResponse is returned by workflowRunDetail on success.
type WorkflowRunDetailResponse struct {
	Team *WorkflowRunDetailTeam `json:"team,omitempty"`
}

// GetTeam returns WorkflowRunDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailResponse) GetTeam() *WorkflowRunDetailTeam { return v.Team }

// WorkflowRunDetailStepsBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunDetailStepsBuildRunStep struct {
	Typename                          *string `json:"__typename,omitempty"`
	WorkflowRunStepDetailBuildRunStep `json:"-"`
}

// GetTypename returns WorkflowRunDetailStepsBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunDetailStepsBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetId() uuid.UUID {
	return v.WorkflowRunStepDetailBuildRunStep.Id
}

// GetAction returns WorkflowRunDetailStepsBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.WorkflowRunStepDetailBuildRunStep.Action
}

// GetDependsOn returns WorkflowRunDetailStepsBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.WorkflowRunStepDetailBuildRunStep.DependsOn
}

// GetStatus returns WorkflowRunDetailStepsBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetStatus() WorkflowRunStepStatus {
	return v.WorkflowRunStepDetailBuildRunStep.Status
}

// GetSequenceNumber returns WorkflowRunDetailStepsBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetSequenceNumber() int {
	return v.WorkflowRunStepDetailBuildRunStep.SequenceNumber
}

// GetCreatedAt returns WorkflowRunDetailStepsBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetCreatedAt() time.Time {
	return v.WorkflowRunStepDetailBuildRunStep.CreatedAt
}

// GetUpdatedAt returns WorkflowRunDetailStepsBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetUpdatedAt() time.Time {
	return v.WorkflowRunStepDetailBuildRunStep.UpdatedAt
}

// GetExecutionId returns WorkflowRunDetailStepsBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetExecutionId() *uuid.UUID {
	return v.WorkflowRunStepDetailBuildRunStep.ExecutionId
}

// GetExecutionType returns WorkflowRunDetailStepsBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.WorkflowRunStepDetailBuildRunStep.ExecutionType
}

// GetExecutionError returns WorkflowRunDetailStepsBuildRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetExecutionError() *string {
	return v.WorkflowRunStepDetailBuildRunStep.ExecutionError
}

// GetOutputs returns WorkflowRunDetailStepsBuildRunStep.Outputs, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetOutputs() []*WorkflowRunStepDetailOutputsBuildArtifact {
	return v.WorkflowRunStepDetailBuildRunStep.Outputs
}

func (v *WorkflowRunDetailStepsBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetailStepsBuildRunStep
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetailStepsBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunStepDetailBuildRunStep)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunDetailStepsBuildRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`

	Outputs []*WorkflowRunStepDetailOutputsBuildArtifact `json:"outputs,omitempty"`
}

func (v *WorkflowRunDetailStepsBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetailStepsBuildRunStep) __premarshalJSON() (*__premarshalWorkflowRunDetailStepsBuildRunStep, error) {
	var retval __premarshalWorkflowRunDetailStepsBuildRunStep

	retval.Typename = v.Typename
	retval.Id = v.WorkflowRunStepDetailBuildRunStep.Id
	retval.Action = v.WorkflowRunStepDetailBuildRunStep.Action
	{

		dst := &retval.DependsOn
		src := v.WorkflowRunStepDetailBuildRunStep.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunDetailStepsBuildRunStep.WorkflowRunStepDetailBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.WorkflowRunStepDetailBuildRunStep.Status
	retval.SequenceNumber = v.WorkflowRunStepDetailBuildRunStep.SequenceNumber
	retval.CreatedAt = v.WorkflowRunStepDetailBuildRunStep.CreatedAt
	retval.UpdatedAt = v.WorkflowRunStepDetailBuildRunStep.UpdatedAt
	retval.ExecutionId = v.WorkflowRunStepDetailBuildRunStep.ExecutionId
	retval.ExecutionType = v.WorkflowRunStepDetailBuildRunStep.ExecutionType
	retval.ExecutionError = v.WorkflowRunStepDetailBuildRunStep.ExecutionError
	retval.Outputs = v.WorkflowRunStepDetailBuildRunStep.Outputs
	return &retval, nil
}

// WorkflowRunDetailStepsClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunDetailStepsClusterPrecheckStep struct {
	Typename                                 *string `json:"__typename,omitempty"`
	WorkflowRunStepDetailClusterPrecheckStep `json:"-"`
}

// GetTypename returns WorkflowRunDetailStepsClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunDetailStepsClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetId() uuid.UUID {
	return v.WorkflowRunStepDetailClusterPrecheckStep.Id
}

// GetAction returns WorkflowRunDetailStepsClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.WorkflowRunStepDetailClusterPrecheckStep.Action
}

// GetDependsOn returns WorkflowRunDetailStepsClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.WorkflowRunStepDetailClusterPrecheckStep.DependsOn
}

// GetStatus returns WorkflowRunDetailStepsClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetStatus() WorkflowRunStepStatus {
	return v.WorkflowRunStepDetailClusterPrecheckStep.Status
}

// GetSequenceNumber returns WorkflowRunDetailStepsClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetSequenceNumber() int {
	return v.WorkflowRunStepDetailClusterPrecheckStep.SequenceNumber
}

// GetCreatedAt returns WorkflowRunDetailStepsClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetCreatedAt() time.Time {
	return v.WorkflowRunStepDetailClusterPrecheckStep.CreatedAt
}

// GetUpdatedAt returns WorkflowRunDetailStepsClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetUpdatedAt() time.Time {
	return v.WorkflowRunStepDetailClusterPrecheckStep.UpdatedAt
}

// GetExecutionId returns WorkflowRunDetailStepsClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetExecutionId() *uuid.UUID {
	return v.WorkflowRunStepDetailClusterPrecheckStep.ExecutionId
}

// GetExecutionType returns WorkflowRunDetailStepsClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetExecutionType() *WorkflowExecutionType {
	return v.WorkflowRunStepDetailClusterPrecheckStep.ExecutionType
}

// GetExecutionError returns WorkflowRunDetailStepsClusterPrecheckStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetExecutionError() *string {
	return v.WorkflowRunStepDetailClusterPrecheckStep.ExecutionError
}

// GetCluster returns WorkflowRunDetailStepsClusterPrecheckStep.Cluster, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetCluster() *WorkflowRunStepDetailCluster {
	return v.WorkflowRunStepDetailClusterPrecheckStep.Cluster
}

func (v *WorkflowRunDetailStepsClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetailStepsClusterPrecheckStep
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetailStepsClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunStepDetailClusterPrecheckStep)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunDetailStepsClusterPrecheckStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`

	Cluster *WorkflowRunStepDetailCluster `json:"cluster,omitempty"`
}

func (v *WorkflowRunDetailStepsClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetailStepsClusterPrecheckStep) __premarshalJSON() (*__premarshalWorkflowRunDetailStepsClusterPrecheckStep, error) {
	var retval __premarshalWorkflowRunDetailStepsClusterPrecheckStep

	retval.Typename = v.Typename
	retval.Id = v.WorkflowRunStepDetailClusterPrecheckStep.Id
	retval.Action = v.WorkflowRunStepDetailClusterPrecheckStep.Action
	{

		dst := &retval.DependsOn
		src := v.WorkflowRunStepDetailClusterPrecheckStep.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunDetailStepsClusterPrecheckStep.WorkflowRunStepDetailClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.WorkflowRunStepDetailClusterPrecheckStep.Status
	retval.SequenceNumber = v.WorkflowRunStepDetailClusterPrecheckStep.SequenceNumber
	retval.CreatedAt = v.WorkflowRunStepDetailClusterPrecheckStep.CreatedAt
	retval.UpdatedAt = v.WorkflowRunStepDetailClusterPrecheckStep.UpdatedAt
	retval.ExecutionId = v.WorkflowRunStepDetailClusterPrecheckStep.ExecutionId
	retval.ExecutionType = v.WorkflowRunStepDetailClusterPrecheckStep.ExecutionType
	retval.ExecutionError = v.WorkflowRunStepDetailClusterPrecheckStep.ExecutionError
	retval.Cluster = v.WorkflowRunStepDetailClusterPrecheckStep.Cluster
	return &retval, nil
}

// WorkflowRunDetailStepsDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunDetailStepsDeployRunStep struct {
	Typename                           *string `json:"__typename,omitempty"`
	WorkflowRunStepDetailDeployRunStep `json:"-"`
}

// GetTypename returns WorkflowRunDetailStepsDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunDetailStepsDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetId() uuid.UUID {
	return v.WorkflowRunStepDetailDeployRunStep.Id
}

// GetAction returns WorkflowRunDetailStepsDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.WorkflowRunStepDetailDeployRunStep.Action
}

// GetDependsOn returns WorkflowRunDetailStepsDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.WorkflowRunStepDetailDeployRunStep.DependsOn
}

// GetStatus returns WorkflowRunDetailStepsDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetStatus() WorkflowRunStepStatus {
	return v.WorkflowRunStepDetailDeployRunStep.Status
}

// GetSequenceNumber returns WorkflowRunDetailStepsDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetSequenceNumber() int {
	return v.WorkflowRunStepDetailDeployRunStep.SequenceNumber
}

// GetCreatedAt returns WorkflowRunDetailStepsDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetCreatedAt() time.Time {
	return v.WorkflowRunStepDetailDeployRunStep.CreatedAt
}

// GetUpdatedAt returns WorkflowRunDetailStepsDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetUpdatedAt() time.Time {
	return v.WorkflowRunStepDetailDeployRunStep.UpdatedAt
}

// GetExecutionId returns WorkflowRunDetailStepsDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetExecutionId() *uuid.UUID {
	return v.WorkflowRunStepDetailDeployRunStep.ExecutionId
}

// GetExecutionType returns WorkflowRunDetailStepsDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.WorkflowRunStepDetailDeployRunStep.ExecutionType
}

// GetExecutionError returns WorkflowRunDetailStepsDeployRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetExecutionError() *string {
	return v.WorkflowRunStepDetailDeployRunStep.ExecutionError
}

// GetWorkflowRun returns WorkflowRunDetailStepsDeployRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetWorkflowRun() *WorkflowRunStepDetailWorkflowRun {
	return v.WorkflowRunStepDetailDeployRunStep.WorkflowRun
}

func (v *WorkflowRunDetailStepsDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetailStepsDeployRunStep
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetailStepsDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunStepDetailDeployRunStep)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunDetailStepsDeployRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`

	WorkflowRun *WorkflowRunStepDetailWorkflowRun `json:"workflowRun,omitempty"`
}

func (v *WorkflowRunDetailStepsDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetailStepsDeployRunStep) __premarshalJSON() (*__premarshalWorkflowRunDetailStepsDeployRunStep, error) {
	var retval __premarshalWorkflowRunDetailStepsDeployRunStep

	retval.Typename = v.Typename
	retval.Id = v.WorkflowRunStepDetailDeployRunStep.Id
	retval.Action = v.WorkflowRunStepDetailDeployRunStep.Action
	{

		dst := &retval.DependsOn
		src := v.WorkflowRunStepDetailDeployRunStep.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunDetailStepsDeployRunStep.WorkflowRunStepDetailDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.WorkflowRunStepDetailDeployRunStep.Status
	retval.SequenceNumber = v.WorkflowRunStepDetailDeployRunStep.SequenceNumber
	retval.CreatedAt = v.WorkflowRunStepDetailDeployRunStep.CreatedAt
	retval.UpdatedAt = v.WorkflowRunStepDetailDeployRunStep.UpdatedAt
	retval.ExecutionId = v.WorkflowRunStepDetailDeployRunStep.ExecutionId
	retval.ExecutionType = v.WorkflowRunStepDetailDeployRunStep.ExecutionType
	retval.ExecutionError = v.WorkflowRunStepDetailDeployRunStep.ExecutionError
	retval.WorkflowRun = v.WorkflowRunStepDetailDeployRunStep.WorkflowRun
	return &retval, nil
}

// WorkflowRunDetailStepsDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunDetailStepsDestroyRunStep struct {
	Typename                            *string `json:"__typename,omitempty"`
	WorkflowRunStepDetailDestroyRunStep `json:"-"`
}

// GetTypename returns WorkflowRunDetailStepsDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunDetailStepsDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetId() uuid.UUID {
	return v.WorkflowRunStepDetailDestroyRunStep.Id
}

// GetAction returns WorkflowRunDetailStepsDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.WorkflowRunStepDetailDestroyRunStep.Action
}

// GetDependsOn returns WorkflowRunDetailStepsDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.WorkflowRunStepDetailDestroyRunStep.DependsOn
}

// GetStatus returns WorkflowRunDetailStepsDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetStatus() WorkflowRunStepStatus {
	return v.WorkflowRunStepDetailDestroyRunStep.Status
}

// GetSequenceNumber returns WorkflowRunDetailStepsDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetSequenceNumber() int {
	return v.WorkflowRunStepDetailDestroyRunStep.SequenceNumber
}

// GetCreatedAt returns WorkflowRunDetailStepsDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetCreatedAt() time.Time {
	return v.WorkflowRunStepDetailDestroyRunStep.CreatedAt
}

// GetUpdatedAt returns WorkflowRunDetailStepsDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetUpdatedAt() time.Time {
	return v.WorkflowRunStepDetailDestroyRunStep.UpdatedAt
}

// GetExecutionId returns WorkflowRunDetailStepsDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetExecutionId() *uuid.UUID {
	return v.WorkflowRunStepDetailDestroyRunStep.ExecutionId
}

// GetExecutionType returns WorkflowRunDetailStepsDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.WorkflowRunStepDetailDestroyRunStep.ExecutionType
}

// GetExecutionError returns WorkflowRunDetailStepsDestroyRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetExecutionError() *string {
	return v.WorkflowRunStepDetailDestroyRunStep.ExecutionError
}

func (v *WorkflowRunDetailStepsDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetailStepsDestroyRunStep
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetailStepsDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunStepDetailDestroyRunStep)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunDetailStepsDestroyRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunDetailStepsDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetailStepsDestroyRunStep) __premarshalJSON() (*__premarshalWorkflowRunDetailStepsDestroyRunStep, error) {
	var retval __premarshalWorkflowRunDetailStepsDestroyRunStep

	retval.Typename = v.Typename
	retval.Id = v.WorkflowRunStepDetailDestroyRunStep.Id
	retval.Action = v.WorkflowRunStepDetailDestroyRunStep.Action
	{

		dst := &retval.DependsOn
		src := v.WorkflowRunStepDetailDestroyRunStep.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunDetailStepsDestroyRunStep.WorkflowRunStepDetailDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.WorkflowRunStepDetailDestroyRunStep.Status
	retval.SequenceNumber = v.WorkflowRunStepDetailDestroyRunStep.SequenceNumber
	retval.CreatedAt = v.WorkflowRunStepDetailDestroyRunStep.CreatedAt
	retval.UpdatedAt = v.WorkflowRunStepDetailDestroyRunStep.UpdatedAt
	retval.ExecutionId = v.WorkflowRunStepDetailDestroyRunStep.ExecutionId
	retval.ExecutionType = v.WorkflowRunStepDetailDestroyRunStep.ExecutionType
	retval.ExecutionError = v.WorkflowRunStepDetailDestroyRunStep.ExecutionError
	return &retval, nil
}

// WorkflowRunDetailStepsJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunDetailStepsJobRunStep struct {
	Typename                        *string `json:"__typename,omitempty"`
	WorkflowRunStepDetailJobRunStep `json:"-"`
}

// GetTypename returns WorkflowRunDetailStepsJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunDetailStepsJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetId() uuid.UUID {
	return v.WorkflowRunStepDetailJobRunStep.Id
}

// GetAction returns WorkflowRunDetailStepsJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetAction() GenericWorkflowStepActionType {
	return v.WorkflowRunStepDetailJobRunStep.Action
}

// GetDependsOn returns WorkflowRunDetailStepsJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.WorkflowRunStepDetailJobRunStep.DependsOn
}

// GetStatus returns WorkflowRunDetailStepsJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetStatus() WorkflowRunStepStatus {
	return v.WorkflowRunStepDetailJobRunStep.Status
}

// GetSequenceNumber returns WorkflowRunDetailStepsJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetSequenceNumber() int {
	return v.WorkflowRunStepDetailJobRunStep.SequenceNumber
}

// GetCreatedAt returns WorkflowRunDetailStepsJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetCreatedAt() time.Time {
	return v.WorkflowRunStepDetailJobRunStep.CreatedAt
}

// GetUpdatedAt returns WorkflowRunDetailStepsJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetUpdatedAt() time.Time {
	return v.WorkflowRunStepDetailJobRunStep.UpdatedAt
}

// GetExecutionId returns WorkflowRunDetailStepsJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetExecutionId() *uuid.UUID {
	return v.WorkflowRunStepDetailJobRunStep.ExecutionId
}

// GetExecutionType returns WorkflowRunDetailStepsJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.WorkflowRunStepDetailJobRunStep.ExecutionType
}

// GetExecutionError returns WorkflowRunDetailStepsJobRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetExecutionError() *string {
	return v.WorkflowRunStepDetailJobRunStep.ExecutionError
}

func (v *WorkflowRunDetailStepsJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetailStepsJobRunStep
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetailStepsJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunStepDetailJobRunStep)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunDetailStepsJobRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunDetailStepsJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetailStepsJobRunStep) __premarshalJSON() (*__premarshalWorkflowRunDetailStepsJobRunStep, error) {
	var retval __premarshalWorkflowRunDetailStepsJobRunStep

	retval.Typename = v.Typename
	retval.Id = v.WorkflowRunStepDetailJobRunStep.Id
	retval.Action = v.WorkflowRunStepDetailJobRunStep.Action
	{

		dst := &retval.DependsOn
		src := v.WorkflowRunStepDetailJobRunStep.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunDetailStepsJobRunStep.WorkflowRunStepDetailJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.WorkflowRunStepDetailJobRunStep.Status
	retval.SequenceNumber = v.WorkflowRunStepDetailJobRunStep.SequenceNumber
	retval.CreatedAt = v.WorkflowRunStepDetailJobRunStep.CreatedAt
	retval.UpdatedAt = v.WorkflowRunStepDetailJobRunStep.UpdatedAt
	retval.ExecutionId = v.WorkflowRunStepDetailJobRunStep.ExecutionId
	retval.ExecutionType = v.WorkflowRunStepDetailJobRunStep.ExecutionType
	retval.ExecutionError = v.WorkflowRunStepDetailJobRunStep.ExecutionError
	return &retval, nil
}

// WorkflowRunDetailStepsWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunDetailStepsWorkflowRunStep is implemented by the following types:
// WorkflowRunDetailStepsBuildRunStep
// WorkflowRunDetailStepsClusterPrecheckStep
// WorkflowRunDetailStepsDeployRunStep
// WorkflowRunDetailStepsDestroyRunStep
// WorkflowRunDetailStepsJobRunStep
type WorkflowRunDetailStepsWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunDetailStepsWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	WorkflowRunStepDetail
}

func (v *WorkflowRunDetailStepsBuildRunStep) implementsGraphQLInterfaceWorkflowRunDetailStepsWorkflowRunStep() {
}
func (v *WorkflowRunDetailStepsClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunDetailStepsWorkflowRunStep() {
}
func (v *WorkflowRunDetailStepsDeployRunStep) implementsGraphQLInterfaceWorkflowRunDetailStepsWorkflowRunStep() {
}
func (v *WorkflowRunDetailStepsDestroyRunStep) implementsGraphQLInterfaceWorkflowRunDetailStepsWorkflowRunStep() {
}
func (v *WorkflowRunDetailStepsJobRunStep) implementsGraphQLInterfaceWorkflowRunDetailStepsWorkflowRunStep() {
}

func __unmarshalWorkflowRunDetailStepsWorkflowRunStep(b []byte, v *WorkflowRunDetailStepsWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunDetailStepsBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunDetailStepsClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunDetailStepsDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunDetailStepsDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunDetailStepsJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunDetailStepsWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunDetailStepsWorkflowRunStep(v *WorkflowRunDetailStepsWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunDetailStepsBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunDetailStepsBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunDetailStepsClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunDetailStepsClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunDetailStepsDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunDetailStepsDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunDetailStepsDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunDetailStepsDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunDetailStepsJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunDetailStepsJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunDetailStepsWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type WorkflowRunDetailTeam struct {
	Id      uuid.UUID                     `json:"id"`
	Project *WorkflowRunDetailTeamProject `json:"project,omitempty"`
}

// GetId returns WorkflowRunDetailTeam.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns WorkflowRunDetailTeam.Project, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailTeam) GetProject() *WorkflowRunDetailTeamProject { return v.Project }

// WorkflowRunDetailTeamProject includes the requested fields of the GraphQL type Project.
type WorkflowRunDetailTeamProject struct {
	Id       uuid.UUID                             `json:"id"`
	Workflow *WorkflowRunDetailTeamProjectWorkflow `json:"workflow,omitempty"`
}

// GetId returns WorkflowRunDetailTeamProject.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailTeamProject) GetId() uuid.UUID { return v.Id }

// GetWorkflow returns WorkflowRunDetailTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailTeamProject) GetWorkflow() *WorkflowRunDetailTeamProjectWorkflow {
	return v.Workflow
}

// WorkflowRunDetailTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type WorkflowRunDetailTeamProjectWorkflow struct {
	Id  uuid.UUID                               `json:"id"`
	Run WorkflowRunDetailTeamProjectWorkflowRun `json:"run"`
}

// GetId returns WorkflowRunDetailTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailTeamProjectWorkflow) GetId() uuid.UUID { return v.Id }

// GetRun returns WorkflowRunDetailTeamProjectWorkflow.Run, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailTeamProjectWorkflow) GetRun() WorkflowRunDetailTeamProjectWorkflowRun {
	return v.Run
}

// WorkflowRunDetailTeamProjectWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type WorkflowRunDetailTeamProjectWorkflowRun struct {
	WorkflowRunDetail `json:"-"`
}

// GetFinishedAt returns WorkflowRunDetailTeamProjectWorkflowRun.FinishedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailTeamProjectWorkflowRun) GetFinishedAt() *time.Time {
	return v.WorkflowRunDetail.FinishedAt
}

// GetSteps returns WorkflowRunDetailTeamProjectWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailTeamProjectWorkflowRun) GetSteps() []*WorkflowRunDetailStepsWorkflowRunStep {
	return v.WorkflowRunDetail.Steps
}

// GetId returns WorkflowRunDetailTeamProjectWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailTeamProjectWorkflowRun) GetId() uuid.UUID {
	return v.WorkflowRunDetail.WorkflowRunListItem.Id
}

// GetSequence returns WorkflowRunDetailTeamProjectWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailTeamProjectWorkflowRun) GetSequence() int {
	return v.WorkflowRunDetail.WorkflowRunListItem.Sequence
}

// GetStatus returns WorkflowRunDetailTeamProjectWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailTeamProjectWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.WorkflowRunDetail.WorkflowRunListItem.Status
}

// GetCreatedAt returns WorkflowRunDetailTeamProjectWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailTeamProjectWorkflowRun) GetCreatedAt() time.Time {
	return v.WorkflowRunDetail.WorkflowRunListItem.CreatedAt
}

func (v *WorkflowRunDetailTeamProjectWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetailTeamProjectWorkflowRun
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetailTeamProjectWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunDetailTeamProjectWorkflowRun struct {
	FinishedAt *time.Time `json:"finishedAt,omitempty"`

	Steps []json.RawMessage `json:"steps,omitempty"`

	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *WorkflowRunDetailTeamProjectWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetailTeamProjectWorkflowRun) __premarshalJSON() (*__premarshalWorkflowRunDetailTeamProjectWorkflowRun, error) {
	var retval __premarshalWorkflowRunDetailTeamProjectWorkflowRun

	retval.FinishedAt = v.WorkflowRunDetail.FinishedAt
	{

		dst := &retval.Steps
		src := v.WorkflowRunDetail.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if src != nil {
				var err error
				*dst, err = __marshalWorkflowRunDetailStepsWorkflowRunStep(
					src)
				if err != nil {
					return nil, fmt.Errorf(
						"unable to marshal WorkflowRunDetailTeamProjectWorkflowRun.WorkflowRunDetail.Steps: %w", err)
				}
			}
		}
	}
	retval.Id = v.WorkflowRunDetail.WorkflowRunListItem.Id
	retval.Sequence = v.WorkflowRunDetail.WorkflowRunListItem.Sequence
	retval.Status = v.WorkflowRunDetail.WorkflowRunListItem.Status
	retval.CreatedAt = v.WorkflowRunDetail.WorkflowRunListItem.CreatedAt
	return &retval, nil
}

// WorkflowRunListItem includes the GraphQL fields of WorkflowRun requested by the fragment WorkflowRunListItem.
type WorkflowRunListItem struct {
	Id        uuid.UUID                                  `json:"id"`
	Sequence  int                                        `json:"sequence"`
	Status    WorkflowRunStatus                          `json:"status"`
	CreatedAt time.Time                                  `json:"createdAt"`
	Steps     []*WorkflowRunListItemStepsWorkflowRunStep `json:"-"`
}

// GetId returns WorkflowRunListItem.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItem) GetId() uuid.UUID { return v.Id }

// GetSequence returns WorkflowRunListItem.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItem) GetSequence() int { return v.Sequence }

// GetStatus returns WorkflowRunListItem.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItem) GetStatus() WorkflowRunStatus { return v.Status }

// GetCreatedAt returns WorkflowRunListItem.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItem) GetCreatedAt() time.Time { return v.CreatedAt }

// GetSteps returns WorkflowRunListItem.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItem) GetSteps() []*WorkflowRunListItemStepsWorkflowRunStep { return v.Steps }

func (v *WorkflowRunListItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItem
		Steps []json.RawMessage `json:"steps"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Steps
		src := firstPass.Steps
		*dst = make(
			[]*WorkflowRunListItemStepsWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				*dst = new(WorkflowRunListItemStepsWorkflowRunStep)
				err = __unmarshalWorkflowRunListItemStepsWorkflowRunStep(
					src, *dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItem.Steps: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItem struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Steps []json.RawMessage `json:"steps,omitempty"`
}

func (v *WorkflowRunListItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItem) __premarshalJSON() (*__premarshalWorkflowRunListItem, error) {
	var retval __premarshalWorkflowRunListItem

	retval.Id = v.Id
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Steps
		src := v.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if src != nil {
				var err error
				*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStep(
					src)
				if err != nil {
					return nil, fmt.Errorf(
						"unable to marshal WorkflowRunListItem.Steps: %w", err)
				}
			}
		}
	}
	return &retval, nil
}

// WorkflowRunListItemStepsBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunListItemStepsBuildRunStep struct {
	Typename       *string                                                           `json:"__typename,omitempty"`
	Id             uuid.UUID                                                         `json:"id"`
	Action         GenericWorkflowStepActionType                                     `json:"action"`
	DependsOn      []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                             `json:"status"`
	SequenceNumber int                                                               `json:"sequenceNumber"`
	CreatedAt      time.Time                                                         `json:"createdAt"`
	UpdatedAt      time.Time                                                         `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                        `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                            `json:"executionType,omitempty"`
	Outputs        []*WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact       `json:"outputs,omitempty"`
}

// GetTypename returns WorkflowRunListItemStepsBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunListItemStepsBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunListItemStepsBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetDependsOn() []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunListItemStepsBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunListItemStepsBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunListItemStepsBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunListItemStepsBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetExecutionId() *uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunListItemStepsBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetOutputs returns WorkflowRunListItemStepsBuildRunStep.Outputs, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetOutputs() []*WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact {
	return v.Outputs
}

func (v *WorkflowRunListItemStepsBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsBuildRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsBuildRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsBuildRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	Outputs []*WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact `json:"outputs,omitempty"`
}

func (v *WorkflowRunListItemStepsBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsBuildRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsBuildRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsBuildRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.Outputs = v.Outputs
	return &retval, nil
}

// WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact includes the requested fields of the GraphQL type BuildArtifact.
type WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact struct {
	Id    uuid.UUID `json:"id"`
	Image string    `json:"image"`
}

// GetId returns WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact) GetId() uuid.UUID { return v.Id }

// GetImage returns WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact.Image, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact) GetImage() string { return v.Image }

// WorkflowRunListItemStepsClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunListItemStepsClusterPrecheckStep struct {
	Typename       *string                                                           `json:"__typename,omitempty"`
	Id             uuid.UUID                                                         `json:"id"`
	Action         GenericWorkflowStepActionType                                     `json:"action"`
	DependsOn      []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                             `json:"status"`
	SequenceNumber int                                                               `json:"sequenceNumber"`
	CreatedAt      time.Time                                                         `json:"createdAt"`
	UpdatedAt      time.Time                                                         `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                        `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                            `json:"executionType,omitempty"`
}

// GetTypename returns WorkflowRunListItemStepsClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunListItemStepsClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunListItemStepsClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetDependsOn() []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunListItemStepsClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunListItemStepsClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunListItemStepsClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunListItemStepsClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunListItemStepsClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsClusterPrecheckStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsClusterPrecheckStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsClusterPrecheckStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`
}

func (v *WorkflowRunListItemStepsClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsClusterPrecheckStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsClusterPrecheckStep, error) {
	var retval __premarshalWorkflowRunListItemStepsClusterPrecheckStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunListItemStepsDeployRunStep struct {
	Typename       *string                                                           `json:"__typename,omitempty"`
	Id             uuid.UUID                                                         `json:"id"`
	Action         GenericWorkflowStepActionType                                     `json:"action"`
	DependsOn      []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                             `json:"status"`
	SequenceNumber int                                                               `json:"sequenceNumber"`
	CreatedAt      time.Time                                                         `json:"createdAt"`
	UpdatedAt      time.Time                                                         `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                        `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                            `json:"executionType,omitempty"`
	WorkflowRun    *WorkflowRunListItemStepsDeployRunStepWorkflowRun                 `json:"workflowRun,omitempty"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunListItemStepsDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunListItemStepsDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetDependsOn() []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunListItemStepsDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunListItemStepsDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunListItemStepsDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetExecutionId() *uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunListItemStepsDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetWorkflowRun returns WorkflowRunListItemStepsDeployRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetWorkflowRun() *WorkflowRunListItemStepsDeployRunStepWorkflowRun {
	return v.WorkflowRun
}

func (v *WorkflowRunListItemStepsDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	WorkflowRun *WorkflowRunListItemStepsDeployRunStepWorkflowRun `json:"workflowRun,omitempty"`
}

func (v *WorkflowRunListItemStepsDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.WorkflowRun = v.WorkflowRun
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type WorkflowRunListItemStepsDeployRunStepWorkflowRun struct {
	Id         uuid.UUID                                                               `json:"id"`
	WorkflowId uuid.UUID                                                               `json:"workflowId"`
	Sequence   int                                                                     `json:"sequence"`
	Status     WorkflowRunStatus                                                       `json:"status"`
	CreatedAt  time.Time                                                               `json:"createdAt"`
	Steps      []*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep `json:"-"`
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetWorkflowId returns WorkflowRunListItemStepsDeployRunStepWorkflowRun.WorkflowId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) GetWorkflowId() uuid.UUID {
	return v.WorkflowId
}

// GetSequence returns WorkflowRunListItemStepsDeployRunStepWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) GetSequence() int { return v.Sequence }

// GetStatus returns WorkflowRunListItemStepsDeployRunStepWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.Status
}

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetSteps returns WorkflowRunListItemStepsDeployRunStepWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) GetSteps() []*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep {
	return v.Steps
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStepWorkflowRun
		Steps []json.RawMessage `json:"steps"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStepWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Steps
		src := firstPass.Steps
		*dst = make(
			[]*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				*dst = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep)
				err = __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep(
					src, *dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStepWorkflowRun.Steps: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	WorkflowId uuid.UUID `json:"workflowId"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Steps []json.RawMessage `json:"steps,omitempty"`
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRun, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRun

	retval.Id = v.Id
	retval.WorkflowId = v.WorkflowId
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Steps
		src := v.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if src != nil {
				var err error
				*dst, err = __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep(
					src)
				if err != nil {
					return nil, fmt.Errorf(
						"unable to marshal WorkflowRunListItemStepsDeployRunStepWorkflowRun.Steps: %w", err)
				}
			}
		}
	}
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep struct {
	Typename       *string                                                                                        `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                                  `json:"action"`
	DependsOn      []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                          `json:"status"`
	SequenceNumber int                                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                                      `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                     `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                         `json:"executionType,omitempty"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetDependsOn() []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep struct {
	Typename       *string                                                                                        `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                                  `json:"action"`
	DependsOn      []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                          `json:"status"`
	SequenceNumber int                                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                                      `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                     `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                         `json:"executionType,omitempty"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetDependsOn() []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep struct {
	Typename       *string                                                                                        `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                                  `json:"action"`
	DependsOn      []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                          `json:"status"`
	SequenceNumber int                                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                                      `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                     `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                         `json:"executionType,omitempty"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetDependsOn() []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep struct {
	Typename       *string                                                                                        `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                                  `json:"action"`
	DependsOn      []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                          `json:"status"`
	SequenceNumber int                                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                                      `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                     `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                         `json:"executionType,omitempty"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetDependsOn() []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep struct {
	Typename       *string                                                                                        `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                                  `json:"action"`
	DependsOn      []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                          `json:"status"`
	SequenceNumber int                                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                                      `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                     `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                         `json:"executionType,omitempty"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetDependsOn() []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep is implemented by the following types:
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	// GetAction returns the interface-field "action" from its implementation.
	GetAction() GenericWorkflowStepActionType
	// GetDependsOn returns the interface-field "dependsOn" from its implementation.
	GetDependsOn() []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() WorkflowRunStepStatus
	// GetSequenceNumber returns the interface-field "sequenceNumber" from its implementation.
	GetSequenceNumber() int
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() time.Time
	// GetExecutionId returns the interface-field "executionId" from its implementation.
	GetExecutionId() *uuid.UUID
	// GetExecutionType returns the interface-field "executionType" from its implementation.
	GetExecutionType() *WorkflowExecutionType
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}

func __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep(b []byte, v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep(v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep is implemented by the following types:
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}

func __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(b []byte, v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunListItemStepsDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunListItemStepsDestroyRunStep struct {
	Typename       *string                                                           `json:"__typename,omitempty"`
	Id             uuid.UUID                                                         `json:"id"`
	Action         GenericWorkflowStepActionType                                     `json:"action"`
	DependsOn      []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                             `json:"status"`
	SequenceNumber int                                                               `json:"sequenceNumber"`
	CreatedAt      time.Time                                                         `json:"createdAt"`
	UpdatedAt      time.Time                                                         `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                        `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                            `json:"executionType,omitempty"`
}

// GetTypename returns WorkflowRunListItemStepsDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunListItemStepsDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunListItemStepsDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetDependsOn() []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunListItemStepsDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunListItemStepsDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunListItemStepsDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunListItemStepsDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetExecutionId() *uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunListItemStepsDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDestroyRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDestroyRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDestroyRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`
}

func (v *WorkflowRunListItemStepsDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDestroyRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDestroyRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDestroyRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunListItemStepsJobRunStep struct {
	Typename       *string                                                           `json:"__typename,omitempty"`
	Id             uuid.UUID                                                         `json:"id"`
	Action         GenericWorkflowStepActionType                                     `json:"action"`
	DependsOn      []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                             `json:"status"`
	SequenceNumber int                                                               `json:"sequenceNumber"`
	CreatedAt      time.Time                                                         `json:"createdAt"`
	UpdatedAt      time.Time                                                         `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                        `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                            `json:"executionType,omitempty"`
}

// GetTypename returns WorkflowRunListItemStepsJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunListItemStepsJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunListItemStepsJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetDependsOn() []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunListItemStepsJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunListItemStepsJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunListItemStepsJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunListItemStepsJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetExecutionId() *uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunListItemStepsJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsJobRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsJobRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsJobRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`
}

func (v *WorkflowRunListItemStepsJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsJobRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsJobRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsJobRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunListItemStepsWorkflowRunStep is implemented by the following types:
// WorkflowRunListItemStepsBuildRunStep
// WorkflowRunListItemStepsClusterPrecheckStep
// WorkflowRunListItemStepsDeployRunStep
// WorkflowRunListItemStepsDestroyRunStep
// WorkflowRunListItemStepsJobRunStep
type WorkflowRunListItemStepsWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	// GetAction returns the interface-field "action" from its implementation.
	GetAction() GenericWorkflowStepActionType
	// GetDependsOn returns the interface-field "dependsOn" from its implementation.
	GetDependsOn() []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() WorkflowRunStepStatus
	// GetSequenceNumber returns the interface-field "sequenceNumber" from its implementation.
	GetSequenceNumber() int
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() time.Time
	// GetExecutionId returns the interface-field "executionId" from its implementation.
	GetExecutionId() *uuid.UUID
	// GetExecutionType returns the interface-field "executionType" from its implementation.
	GetExecutionType() *WorkflowExecutionType
}

func (v *WorkflowRunListItemStepsBuildRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDestroyRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsJobRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStep() {
}

func __unmarshalWorkflowRunListItemStepsWorkflowRunStep(b []byte, v *WorkflowRunListItemStepsWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunListItemStepsBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunListItemStepsClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunListItemStepsDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunListItemStepsJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunListItemStepsWorkflowRunStep(v *WorkflowRunListItemStepsWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunListItemStepsBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep is implemented by the following types:
// WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep
// WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep
// WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep
// WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep
// WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep
type WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}

func __unmarshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(b []byte, v *WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(v *WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep: "%T"`, v)
	}
}

type WorkflowRunStatus string

const (
	WorkflowRunStatusPending    WorkflowRunStatus = "PENDING"
	WorkflowRunStatusInProgress WorkflowRunStatus = "IN_PROGRESS"
	WorkflowRunStatusCompleted  WorkflowRunStatus = "COMPLETED"
	WorkflowRunStatusFailed     WorkflowRunStatus = "FAILED"
	WorkflowRunStatusAborted    WorkflowRunStatus = "ABORTED"
)

type WorkflowRunStepDefinitionInput struct {
	Action         WorkflowStepActionType                   `json:"action"`
	DependsOn      []int                                    `json:"dependsOn"`
	Disabled       *bool                                    `json:"disabled,omitempty"`
	MatchingRule   *WorkflowStepDefinitionMatchingRuleInput `json:"matchingRule,omitempty"`
	SequenceNumber *int                                     `json:"sequenceNumber,omitempty"`
	Metadata       *WorkflowRunStepDefinitionMetadataInput  `json:"metadata,omitempty"`
}

// GetAction returns WorkflowRunStepDefinitionInput.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionInput) GetAction() WorkflowStepActionType { return v.Action }

// GetDependsOn returns WorkflowRunStepDefinitionInput.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionInput) GetDependsOn() []int { return v.DependsOn }

// GetDisabled returns WorkflowRunStepDefinitionInput.Disabled, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionInput) GetDisabled() *bool { return v.Disabled }

// GetMatchingRule returns WorkflowRunStepDefinitionInput.MatchingRule, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionInput) GetMatchingRule() *WorkflowStepDefinitionMatchingRuleInput {
	return v.MatchingRule
}

// GetSequenceNumber returns WorkflowRunStepDefinitionInput.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionInput) GetSequenceNumber() *int { return v.SequenceNumber }

// GetMetadata returns WorkflowRunStepDefinitionInput.Metadata, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionInput) GetMetadata() *WorkflowRunStepDefinitionMetadataInput {
	return v.Metadata
}

type WorkflowRunStepDefinitionMetadataInput struct {
	DeploySteps []DriverWorkflowStepActionType `json:"deploySteps"`
}

// GetDeploySteps returns WorkflowRunStepDefinitionMetadataInput.DeploySteps, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionMetadataInput) GetDeploySteps() []DriverWorkflowStepActionType {
	return v.DeploySteps
}

// WorkflowRunStepDetail includes the GraphQL fields of WorkflowRunStep requested by the fragment WorkflowRunStepDetail.
//
// WorkflowRunStepDetail is implemented by the following types:
// WorkflowRunStepDetailBuildRunStep
// WorkflowRunStepDetailClusterPrecheckStep
// WorkflowRunStepDetailDeployRunStep
// WorkflowRunStepDetailDestroyRunStep
// WorkflowRunStepDetailJobRunStep
type WorkflowRunStepDetail interface {
	implementsGraphQLInterfaceWorkflowRunStepDetail()
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	// GetAction returns the interface-field "action" from its implementation.
	GetAction() GenericWorkflowStepActionType
	// GetDependsOn returns the interface-field "dependsOn" from its implementation.
	GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() WorkflowRunStepStatus
	// GetSequenceNumber returns the interface-field "sequenceNumber" from its implementation.
	GetSequenceNumber() int
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() time.Time
	// GetExecutionId returns the interface-field "executionId" from its implementation.
	GetExecutionId() *uuid.UUID
	// GetExecutionType returns the interface-field "executionType" from its implementation.
	GetExecutionType() *WorkflowExecutionType
	// GetExecutionError returns the interface-field "executionError" from its implementation.
	GetExecutionError() *string
}

func (v *WorkflowRunStepDetailBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepDetail() {}
func (v *WorkflowRunStepDetailClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepDetail() {
}
func (v *WorkflowRunStepDetailDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepDetail()  {}
func (v *WorkflowRunStepDetailDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepDetail() {}
func (v *WorkflowRunStepDetailJobRunStep) implementsGraphQLInterfaceWorkflowRunStepDetail()     {}

func __unmarshalWorkflowRunStepDetail(b []byte, v *WorkflowRunStepDetail) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepDetailBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepDetailClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepDetailDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepDetailDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepDetailJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetail: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepDetail(v *WorkflowRunStepDetail) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepDetailBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetail: "%T"`, v)
	}
}

// WorkflowRunStepDetail includes the GraphQL fields of BuildRunStep requested by the fragment WorkflowRunStepDetail.
type WorkflowRunStepDetailBuildRunStep struct {
	Id             uuid.UUID                                       `json:"id"`
	Action         GenericWorkflowStepActionType                   `json:"action"`
	DependsOn      []WorkflowRunStepDetailDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                           `json:"status"`
	SequenceNumber int                                             `json:"sequenceNumber"`
	CreatedAt      time.Time                                       `json:"createdAt"`
	UpdatedAt      time.Time                                       `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                      `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                          `json:"executionType,omitempty"`
	ExecutionError *string                                         `json:"executionError,omitempty"`
	Outputs        []*WorkflowRunStepDetailOutputsBuildArtifact    `json:"outputs,omitempty"`
}

// GetId returns WorkflowRunStepDetailBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunStepDetailBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunStepDetailBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunStepDetailBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunStepDetailBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetExecutionId() *uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunStepDetailBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailBuildRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetExecutionError() *string { return v.ExecutionError }

// GetOutputs returns WorkflowRunStepDetailBuildRunStep.Outputs, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetOutputs() []*WorkflowRunStepDetailOutputsBuildArtifact {
	return v.Outputs
}

func (v *WorkflowRunStepDetailBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailBuildRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailBuildRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailBuildRunStep struct {
	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`

	Outputs []*WorkflowRunStepDetailOutputsBuildArtifact `json:"outputs,omitempty"`
}

func (v *WorkflowRunStepDetailBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailBuildRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailBuildRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailBuildRunStep

	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	retval.Outputs = v.Outputs
	return &retval, nil
}

// WorkflowRunStepDetailCluster includes the requested fields of the GraphQL type Cluster.
type WorkflowRunStepDetailCluster struct {
	ClusterDetailV1 `json:"-"`
}

// GetId returns WorkflowRunStepDetailCluster.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetId() uuid.UUID { return v.ClusterDetailV1.Id }

// GetDisplayName returns WorkflowRunStepDetailCluster.DisplayName, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetDisplayName() string { return v.ClusterDetailV1.DisplayName }

// GetState returns WorkflowRunStepDetailCluster.State, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetState() ClusterState { return v.ClusterDetailV1.State }

// GetConnected returns WorkflowRunStepDetailCluster.Connected, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetConnected() *bool { return v.ClusterDetailV1.Connected }

// GetCloudProvider returns WorkflowRunStepDetailCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetCloudProvider() *CloudProvider {
	return v.ClusterDetailV1.CloudProvider
}

// GetCreatedAt returns WorkflowRunStepDetailCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetCreatedAt() time.Time { return v.ClusterDetailV1.CreatedAt }

// GetUpdatedAt returns WorkflowRunStepDetailCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetUpdatedAt() time.Time { return v.ClusterDetailV1.UpdatedAt }

func (v *WorkflowRunStepDetailCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetailV1)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunStepDetailCluster struct {
	Id uuid.UUID `json:"id"`

	DisplayName string `json:"displayName"`

	State ClusterState `json:"state"`

	Connected *bool `json:"connected,omitempty"`

	CloudProvider *CloudProvider `json:"cloudProvider,omitempty"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *WorkflowRunStepDetailCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailCluster) __premarshalJSON() (*__premarshalWorkflowRunStepDetailCluster, error) {
	var retval __premarshalWorkflowRunStepDetailCluster

	retval.Id = v.ClusterDetailV1.Id
	retval.DisplayName = v.ClusterDetailV1.DisplayName
	retval.State = v.ClusterDetailV1.State
	retval.Connected = v.ClusterDetailV1.Connected
	retval.CloudProvider = v.ClusterDetailV1.CloudProvider
	retval.CreatedAt = v.ClusterDetailV1.CreatedAt
	retval.UpdatedAt = v.ClusterDetailV1.UpdatedAt
	return &retval, nil
}

// WorkflowRunStepDetail includes the GraphQL fields of ClusterPrecheckStep requested by the fragment WorkflowRunStepDetail.
type WorkflowRunStepDetailClusterPrecheckStep struct {
	Id             uuid.UUID                                       `json:"id"`
	Action         GenericWorkflowStepActionType                   `json:"action"`
	DependsOn      []WorkflowRunStepDetailDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                           `json:"status"`
	SequenceNumber int                                             `json:"sequenceNumber"`
	CreatedAt      time.Time                                       `json:"createdAt"`
	UpdatedAt      time.Time                                       `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                      `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                          `json:"executionType,omitempty"`
	ExecutionError *string                                         `json:"executionError,omitempty"`
	Cluster        *WorkflowRunStepDetailCluster                   `json:"cluster,omitempty"`
}

// GetId returns WorkflowRunStepDetailClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunStepDetailClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunStepDetailClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunStepDetailClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunStepDetailClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetExecutionId() *uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunStepDetailClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailClusterPrecheckStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetExecutionError() *string {
	return v.ExecutionError
}

// GetCluster returns WorkflowRunStepDetailClusterPrecheckStep.Cluster, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetCluster() *WorkflowRunStepDetailCluster {
	return v.Cluster
}

func (v *WorkflowRunStepDetailClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailClusterPrecheckStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailClusterPrecheckStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailClusterPrecheckStep struct {
	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`

	Cluster *WorkflowRunStepDetailCluster `json:"cluster,omitempty"`
}

func (v *WorkflowRunStepDetailClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailClusterPrecheckStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailClusterPrecheckStep, error) {
	var retval __premarshalWorkflowRunStepDetailClusterPrecheckStep

	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	retval.Cluster = v.Cluster
	return &retval, nil
}

// WorkflowRunStepDetailDependsOnBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepDetailDependsOnBuildRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailDependsOnBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnBuildRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunStepDetailDependsOnBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnBuildRunStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunStepDetailDependsOnClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepDetailDependsOnClusterPrecheckStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailDependsOnClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnClusterPrecheckStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunStepDetailDependsOnClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnClusterPrecheckStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunStepDetailDependsOnDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepDetailDependsOnDeployRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailDependsOnDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnDeployRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunStepDetailDependsOnDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnDeployRunStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunStepDetailDependsOnDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepDetailDependsOnDestroyRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailDependsOnDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnDestroyRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunStepDetailDependsOnDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnDestroyRunStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunStepDetailDependsOnJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepDetailDependsOnJobRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailDependsOnJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnJobRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunStepDetailDependsOnJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnJobRunStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunStepDetailDependsOnWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepDetailDependsOnWorkflowRunStep is implemented by the following types:
// WorkflowRunStepDetailDependsOnBuildRunStep
// WorkflowRunStepDetailDependsOnClusterPrecheckStep
// WorkflowRunStepDetailDependsOnDeployRunStep
// WorkflowRunStepDetailDependsOnDestroyRunStep
// WorkflowRunStepDetailDependsOnJobRunStep
type WorkflowRunStepDetailDependsOnWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepDetailDependsOnWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunStepDetailDependsOnBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailDependsOnClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepDetailDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailDependsOnDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailDependsOnDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailDependsOnJobRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailDependsOnWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepDetailDependsOnWorkflowRunStep(b []byte, v *WorkflowRunStepDetailDependsOnWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepDetailDependsOnBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepDetailDependsOnClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepDetailDependsOnDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepDetailDependsOnDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepDetailDependsOnJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetailDependsOnWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(v *WorkflowRunStepDetailDependsOnWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepDetailDependsOnBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailDependsOnBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailDependsOnClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailDependsOnClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailDependsOnDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailDependsOnDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailDependsOnDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailDependsOnDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailDependsOnJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailDependsOnJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetailDependsOnWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunStepDetail includes the GraphQL fields of DeployRunStep requested by the fragment WorkflowRunStepDetail.
type WorkflowRunStepDetailDeployRunStep struct {
	Id             uuid.UUID                                       `json:"id"`
	Action         GenericWorkflowStepActionType                   `json:"action"`
	DependsOn      []WorkflowRunStepDetailDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                           `json:"status"`
	SequenceNumber int                                             `json:"sequenceNumber"`
	CreatedAt      time.Time                                       `json:"createdAt"`
	UpdatedAt      time.Time                                       `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                      `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                          `json:"executionType,omitempty"`
	ExecutionError *string                                         `json:"executionError,omitempty"`
	WorkflowRun    *WorkflowRunStepDetailWorkflowRun               `json:"workflowRun,omitempty"`
}

// GetId returns WorkflowRunStepDetailDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunStepDetailDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunStepDetailDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunStepDetailDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunStepDetailDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetExecutionId() *uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunStepDetailDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailDeployRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetExecutionError() *string { return v.ExecutionError }

// GetWorkflowRun returns WorkflowRunStepDetailDeployRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetWorkflowRun() *WorkflowRunStepDetailWorkflowRun {
	return v.WorkflowRun
}

func (v *WorkflowRunStepDetailDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailDeployRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailDeployRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailDeployRunStep struct {
	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`

	WorkflowRun *WorkflowRunStepDetailWorkflowRun `json:"workflowRun,omitempty"`
}

func (v *WorkflowRunStepDetailDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailDeployRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailDeployRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailDeployRunStep

	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	retval.WorkflowRun = v.WorkflowRun
	return &retval, nil
}

// WorkflowRunStepDetail includes the GraphQL fields of DestroyRunStep requested by the fragment WorkflowRunStepDetail.
type WorkflowRunStepDetailDestroyRunStep struct {
	Id             uuid.UUID                                       `json:"id"`
	Action         GenericWorkflowStepActionType                   `json:"action"`
	DependsOn      []WorkflowRunStepDetailDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                           `json:"status"`
	SequenceNumber int                                             `json:"sequenceNumber"`
	CreatedAt      time.Time                                       `json:"createdAt"`
	UpdatedAt      time.Time                                       `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                      `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                          `json:"executionType,omitempty"`
	ExecutionError *string                                         `json:"executionError,omitempty"`
}

// GetId returns WorkflowRunStepDetailDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunStepDetailDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunStepDetailDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunStepDetailDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunStepDetailDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetExecutionId() *uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunStepDetailDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailDestroyRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetExecutionError() *string { return v.ExecutionError }

func (v *WorkflowRunStepDetailDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailDestroyRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailDestroyRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailDestroyRunStep struct {
	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepDetailDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailDestroyRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailDestroyRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailDestroyRunStep

	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetail includes the GraphQL fields of JobRunStep requested by the fragment WorkflowRunStepDetail.
type WorkflowRunStepDetailJobRunStep struct {
	Id             uuid.UUID                                       `json:"id"`
	Action         GenericWorkflowStepActionType                   `json:"action"`
	DependsOn      []WorkflowRunStepDetailDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                           `json:"status"`
	SequenceNumber int                                             `json:"sequenceNumber"`
	CreatedAt      time.Time                                       `json:"createdAt"`
	UpdatedAt      time.Time                                       `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                      `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                          `json:"executionType,omitempty"`
	ExecutionError *string                                         `json:"executionError,omitempty"`
}

// GetId returns WorkflowRunStepDetailJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetAction() GenericWorkflowStepActionType { return v.Action }

// GetDependsOn returns WorkflowRunStepDetailJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunStepDetailJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunStepDetailJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunStepDetailJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunStepDetailJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetExecutionId() *uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunStepDetailJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailJobRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetExecutionError() *string { return v.ExecutionError }

func (v *WorkflowRunStepDetailJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailJobRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailJobRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailJobRunStep struct {
	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepDetailJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailJobRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailJobRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailJobRunStep

	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetailOutputsBuildArtifact includes the requested fields of the GraphQL type BuildArtifact.
type WorkflowRunStepDetailOutputsBuildArtifact struct {
	Id    uuid.UUID `json:"id"`
	Image string    `json:"image"`
}

// GetId returns WorkflowRunStepDetailOutputsBuildArtifact.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailOutputsBuildArtifact) GetId() uuid.UUID { return v.Id }

// GetImage returns WorkflowRunStepDetailOutputsBuildArtifact.Image, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailOutputsBuildArtifact) GetImage() string { return v.Image }

// WorkflowRunStepDetailWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type WorkflowRunStepDetailWorkflowRun struct {
	Id         uuid.UUID                                               `json:"id"`
	WorkflowId uuid.UUID                                               `json:"workflowId"`
	Sequence   int                                                     `json:"sequence"`
	Status     WorkflowRunStatus                                       `json:"status"`
	CreatedAt  time.Time                                               `json:"createdAt"`
	Steps      []*WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep `json:"-"`
}

// GetId returns WorkflowRunStepDetailWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetWorkflowId returns WorkflowRunStepDetailWorkflowRun.WorkflowId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRun) GetWorkflowId() uuid.UUID { return v.WorkflowId }

// GetSequence returns WorkflowRunStepDetailWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRun) GetSequence() int { return v.Sequence }

// GetStatus returns WorkflowRunStepDetailWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRun) GetStatus() WorkflowRunStatus { return v.Status }

// GetCreatedAt returns WorkflowRunStepDetailWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRun) GetCreatedAt() time.Time { return v.CreatedAt }

// GetSteps returns WorkflowRunStepDetailWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRun) GetSteps() []*WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep {
	return v.Steps
}

func (v *WorkflowRunStepDetailWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailWorkflowRun
		Steps []json.RawMessage `json:"steps"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Steps
		src := firstPass.Steps
		*dst = make(
			[]*WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				*dst = new(WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep)
				err = __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep(
					src, *dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailWorkflowRun.Steps: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	WorkflowId uuid.UUID `json:"workflowId"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Steps []json.RawMessage `json:"steps,omitempty"`
}

func (v *WorkflowRunStepDetailWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailWorkflowRun) __premarshalJSON() (*__premarshalWorkflowRunStepDetailWorkflowRun, error) {
	var retval __premarshalWorkflowRunStepDetailWorkflowRun

	retval.Id = v.Id
	retval.WorkflowId = v.WorkflowId
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Steps
		src := v.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if src != nil {
				var err error
				*dst, err = __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep(
					src)
				if err != nil {
					return nil, fmt.Errorf(
						"unable to marshal WorkflowRunStepDetailWorkflowRun.Steps: %w", err)
				}
			}
		}
	}
	return &retval, nil
}

// WorkflowRunStepDetailWorkflowRunStepsBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepDetailWorkflowRunStepsBuildRunStep struct {
	Typename       *string                                                                        `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                  `json:"action"`
	DependsOn      []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                          `json:"status"`
	SequenceNumber int                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                      `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                     `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                         `json:"executionType,omitempty"`
	ExecutionError *string                                                                        `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetDependsOn() []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailWorkflowRunStepsBuildRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailWorkflowRunStepsBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailWorkflowRunStepsBuildRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailWorkflowRunStepsBuildRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailWorkflowRunStepsBuildRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep struct {
	Typename       *string                                                                        `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                  `json:"action"`
	DependsOn      []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                          `json:"status"`
	SequenceNumber int                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                      `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                     `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                         `json:"executionType,omitempty"`
	ExecutionError *string                                                                        `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetDependsOn() []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep, error) {
	var retval __premarshalWorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetailWorkflowRunStepsDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepDetailWorkflowRunStepsDeployRunStep struct {
	Typename       *string                                                                        `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                  `json:"action"`
	DependsOn      []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                          `json:"status"`
	SequenceNumber int                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                      `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                     `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                         `json:"executionType,omitempty"`
	ExecutionError *string                                                                        `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetDependsOn() []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailWorkflowRunStepsDeployRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailWorkflowRunStepsDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailWorkflowRunStepsDeployRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailWorkflowRunStepsDeployRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailWorkflowRunStepsDeployRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep struct {
	Typename       *string                                                                        `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                  `json:"action"`
	DependsOn      []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                          `json:"status"`
	SequenceNumber int                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                      `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                     `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                         `json:"executionType,omitempty"`
	ExecutionError *string                                                                        `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetDependsOn() []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailWorkflowRunStepsDestroyRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailWorkflowRunStepsDestroyRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailWorkflowRunStepsDestroyRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetailWorkflowRunStepsJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepDetailWorkflowRunStepsJobRunStep struct {
	Typename       *string                                                                        `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                  `json:"action"`
	DependsOn      []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                          `json:"status"`
	SequenceNumber int                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                      `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                     `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                         `json:"executionType,omitempty"`
	ExecutionError *string                                                                        `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetTypename() *string { return v.Typename }

// GetId returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetDependsOn() []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailWorkflowRunStepsJobRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailWorkflowRunStepsJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailWorkflowRunStepsJobRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailWorkflowRunStepsJobRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailWorkflowRunStepsJobRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailWorkflowRunStepsJobRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailWorkflowRunStepsJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep is implemented by the following types:
// WorkflowRunStepDetailWorkflowRunStepsBuildRunStep
// WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep
// WorkflowRunStepDetailWorkflowRunStepsDeployRunStep
// WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep
// WorkflowRunStepDetailWorkflowRunStepsJobRunStep
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	// GetAction returns the interface-field "action" from its implementation.
	GetAction() GenericWorkflowStepActionType
	// GetDependsOn returns the interface-field "dependsOn" from its implementation.
	GetDependsOn() []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() WorkflowRunStepStatus
	// GetSequenceNumber returns the interface-field "sequenceNumber" from its implementation.
	GetSequenceNumber() int
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() time.Time
	// GetExecutionId returns the interface-field "executionId" from its implementation.
	GetExecutionId() *uuid.UUID
	// GetExecutionType returns the interface-field "executionType" from its implementation.
	GetExecutionType() *WorkflowExecutionType
	// GetExecutionError returns the interface-field "executionError" from its implementation.
	GetExecutionError() *string
}

func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep(b []byte, v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep(v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailWorkflowRunStepsBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailWorkflowRunStepsDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailWorkflowRunStepsDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailWorkflowRunStepsJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep is implemented by the following types:
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(b []byte, v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%T"`, v)
	}
}

// workflowRunStepNestedDetailLogsResponse is returned by workflowRunStepNestedDetailLogs on success.
type WorkflowRunStepNestedDetailLogsResponse struct {
	Team *WorkflowRunStepNestedDetailLogsTeam `json:"team,omitempty"`
}

// GetTeam returns WorkflowRunStepNestedDetailLogsResponse.Team, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsResponse) GetTeam() *WorkflowRunStepNestedDetailLogsTeam {
	return v.Team
}

// WorkflowRunStepNestedDetailLogsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type WorkflowRunStepNestedDetailLogsTeam struct {
	Id      uuid.UUID                                   `json:"id"`
	Project *WorkflowRunStepNestedDetailLogsTeamProject `json:"project,omitempty"`
}

// GetId returns WorkflowRunStepNestedDetailLogsTeam.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns WorkflowRunStepNestedDetailLogsTeam.Project, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeam) GetProject() *WorkflowRunStepNestedDetailLogsTeamProject {
	return v.Project
}

// WorkflowRunStepNestedDetailLogsTeamProject includes the requested fields of the GraphQL type Project.
type WorkflowRunStepNestedDetailLogsTeamProject struct {
	Id       uuid.UUID                                           `json:"id"`
	Workflow *WorkflowRunStepNestedDetailLogsTeamProjectWorkflow `json:"workflow,omitempty"`
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProject) GetId() uuid.UUID { return v.Id }

// GetWorkflow returns WorkflowRunStepNestedDetailLogsTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProject) GetWorkflow() *WorkflowRunStepNestedDetailLogsTeamProjectWorkflow {
	return v.Workflow
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflow struct {
	Id  uuid.UUID                                             `json:"id"`
	Run WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun `json:"run"`
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflow) GetId() uuid.UUID { return v.Id }

// GetRun returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflow.Run, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflow) GetRun() WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun {
	return v.Run
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun struct {
	Id   uuid.UUID                                                 `json:"id"`
	Step WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep `json:"-"`
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetStep returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun.Step, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun) GetStep() WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep {
	return v.Step
}

func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun
		Step json.RawMessage `json:"step"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Step
		src := firstPass.Step
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun.Step: %w", err)
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	Step json.RawMessage `json:"step"`
}

func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun, error) {
	var retval __premarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun

	retval.Id = v.Id
	{

		dst := &retval.Step
		src := v.Step
		var err error
		*dst, err = __marshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRun.Step: %w", err)
		}
	}
	return &retval, nil
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep is implemented by the following types:
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep(b []byte, v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep(v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep struct {
	Typename    *string                                                                            `json:"__typename,omitempty"`
	Id          uuid.UUID                                                                          `json:"id"`
	WorkflowRun *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun `json:"workflowRun,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetWorkflowRun returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep) GetWorkflowRun() *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun {
	return v.WorkflowRun
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun struct {
	Id        uuid.UUID                                                                             `json:"id"`
	Sequence  int                                                                                   `json:"sequence"`
	Status    WorkflowRunStatus                                                                     `json:"status"`
	CreatedAt time.Time                                                                             `json:"createdAt"`
	Step      WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep `json:"-"`
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetId() uuid.UUID {
	return v.Id
}

// GetSequence returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetSequence() int {
	return v.Sequence
}

// GetStatus returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.Status
}

// GetCreatedAt returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetStep returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Step, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetStep() WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep {
	return v.Step
}

func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun
		Step json.RawMessage `json:"step"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Step
		src := firstPass.Step
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Step: %w", err)
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Step json.RawMessage `json:"step"`
}

func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun, error) {
	var retval __premarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun

	retval.Id = v.Id
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Step
		src := v.Step
		var err error
		*dst, err = __marshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Step: %w", err)
		}
	}
	return &retval, nil
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep is implemented by the following types:
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep(b []byte, v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep(v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep struct {
	Typename *string                                                                                              `json:"__typename,omitempty"`
	Id       uuid.UUID                                                                                            `json:"id"`
	Logs     *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs `json:"logs,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetLogs returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep.Logs, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep) GetLogs() *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs {
	return v.Logs
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs includes the requested fields of the GraphQL type Logs.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs struct {
	Id        string                                                                                                               `json:"id"`
	Completed bool                                                                                                                 `json:"completed"`
	Expired   *bool                                                                                                                `json:"expired,omitempty"`
	Entries   []WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry `json:"entries"`
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs) GetId() string {
	return v.Id
}

// GetCompleted returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs.Completed, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs) GetCompleted() bool {
	return v.Completed
}

// GetExpired returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs.Expired, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs) GetExpired() *bool {
	return v.Expired
}

// GetEntries returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs.Entries, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs) GetEntries() []WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry {
	return v.Entries
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry struct {
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Text      string     `json:"text"`
}

// GetTimestamp returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// GetText returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep struct {
	Typename    *string                                                                             `json:"__typename,omitempty"`
	Id          uuid.UUID                                                                           `json:"id"`
	WorkflowRun *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun `json:"workflowRun,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetWorkflowRun returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep) GetWorkflowRun() *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun {
	return v.WorkflowRun
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun struct {
	Id        uuid.UUID                                                                              `json:"id"`
	Sequence  int                                                                                    `json:"sequence"`
	Status    WorkflowRunStatus                                                                      `json:"status"`
	CreatedAt time.Time                                                                              `json:"createdAt"`
	Step      WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep `json:"-"`
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetId() uuid.UUID {
	return v.Id
}

// GetSequence returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetSequence() int {
	return v.Sequence
}

// GetStatus returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.Status
}

// GetCreatedAt returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetStep returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Step, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetStep() WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep {
	return v.Step
}

func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun
		Step json.RawMessage `json:"step"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Step
		src := firstPass.Step
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Step: %w", err)
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Step json.RawMessage `json:"step"`
}

func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun, error) {
	var retval __premarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun

	retval.Id = v.Id
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Step
		src := v.Step
		var err error
		*dst, err = __marshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Step: %w", err)
		}
	}
	return &retval, nil
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep is implemented by the following types:
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep
// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep(b []byte, v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep(v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep struct {
	Typename *string                                                                                               `json:"__typename,omitempty"`
	Id       uuid.UUID                                                                                             `json:"id"`
	Logs     *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs `json:"logs,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetLogs returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep.Logs, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep) GetLogs() *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs {
	return v.Logs
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs includes the requested fields of the GraphQL type Logs.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs struct {
	Id        string                                                                                                                `json:"id"`
	Completed bool                                                                                                                  `json:"completed"`
	Expired   *bool                                                                                                                 `json:"expired,omitempty"`
	Entries   []WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry `json:"entries"`
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs) GetId() string {
	return v.Id
}

// GetCompleted returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs.Completed, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs) GetCompleted() bool {
	return v.Completed
}

// GetExpired returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs.Expired, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs) GetExpired() *bool {
	return v.Expired
}

// GetEntries returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs.Entries, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs) GetEntries() []WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry {
	return v.Entries
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry struct {
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Text      string     `json:"text"`
}

// GetTimestamp returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry) GetTimestamp() *time.Time {
	return v.Timestamp
}

// GetText returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailResponse is returned by workflowRunStepNestedDetail on success.
type WorkflowRunStepNestedDetailResponse struct {
	Team *WorkflowRunStepNestedDetailTeam `json:"team,omitempty"`
}

// GetTeam returns WorkflowRunStepNestedDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailResponse) GetTeam() *WorkflowRunStepNestedDetailTeam {
	return v.Team
}

// WorkflowRunStepNestedDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type WorkflowRunStepNestedDetailTeam struct {
	Id      uuid.UUID                               `json:"id"`
	Project *WorkflowRunStepNestedDetailTeamProject `json:"project,omitempty"`
}

// GetId returns WorkflowRunStepNestedDetailTeam.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns WorkflowRunStepNestedDetailTeam.Project, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeam) GetProject() *WorkflowRunStepNestedDetailTeamProject {
	return v.Project
}

// WorkflowRunStepNestedDetailTeamProject includes the requested fields of the GraphQL type Project.
type WorkflowRunStepNestedDetailTeamProject struct {
	Id       uuid.UUID                                       `json:"id"`
	Workflow *WorkflowRunStepNestedDetailTeamProjectWorkflow `json:"workflow,omitempty"`
}

// GetId returns WorkflowRunStepNestedDetailTeamProject.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProject) GetId() uuid.UUID { return v.Id }

// GetWorkflow returns WorkflowRunStepNestedDetailTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProject) GetWorkflow() *WorkflowRunStepNestedDetailTeamProjectWorkflow {
	return v.Workflow
}

// WorkflowRunStepNestedDetailTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type WorkflowRunStepNestedDetailTeamProjectWorkflow struct {
	Id  uuid.UUID                                         `json:"id"`
	Run WorkflowRunStepNestedDetailTeamProjectWorkflowRun `json:"run"`
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflow) GetId() uuid.UUID { return v.Id }

// GetRun returns WorkflowRunStepNestedDetailTeamProjectWorkflow.Run, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflow) GetRun() WorkflowRunStepNestedDetailTeamProjectWorkflowRun {
	return v.Run
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRun struct {
	Id   uuid.UUID                                             `json:"id"`
	Step WorkflowRunStepNestedDetailTeamProjectWorkflowRunStep `json:"-"`
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetStep returns WorkflowRunStepNestedDetailTeamProjectWorkflowRun.Step, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRun) GetStep() WorkflowRunStepNestedDetailTeamProjectWorkflowRunStep {
	return v.Step
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailTeamProjectWorkflowRun
		Step json.RawMessage `json:"step"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailTeamProjectWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Step
		src := firstPass.Step
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStep(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal WorkflowRunStepNestedDetailTeamProjectWorkflowRun.Step: %w", err)
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	Step json.RawMessage `json:"step"`
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRun) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRun, error) {
	var retval __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRun

	retval.Id = v.Id
	{

		dst := &retval.Step
		src := v.Step
		var err error
		*dst, err = __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStep(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal WorkflowRunStepNestedDetailTeamProjectWorkflowRun.Step: %w", err)
		}
	}
	return &retval, nil
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStep is implemented by the following types:
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStep(b []byte, v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailTeamProjectWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStep(v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailTeamProjectWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep struct {
	Typename    *string                                                                        `json:"__typename,omitempty"`
	Id          uuid.UUID                                                                      `json:"id"`
	WorkflowRun *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun `json:"workflowRun,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetWorkflowRun returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep) GetWorkflowRun() *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun {
	return v.WorkflowRun
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun struct {
	Id         uuid.UUID                                                                                            `json:"id"`
	WorkflowId uuid.UUID                                                                                            `json:"workflowId"`
	Sequence   int                                                                                                  `json:"sequence"`
	Status     WorkflowRunStatus                                                                                    `json:"status"`
	CreatedAt  time.Time                                                                                            `json:"createdAt"`
	Steps      []*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep `json:"-"`
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetId() uuid.UUID {
	return v.Id
}

// GetWorkflowId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.WorkflowId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetWorkflowId() uuid.UUID {
	return v.WorkflowId
}

// GetSequence returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetSequence() int {
	return v.Sequence
}

// GetStatus returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.Status
}

// GetCreatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetSteps returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetSteps() []*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep {
	return v.Steps
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun
		Steps []json.RawMessage `json:"steps"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Steps
		src := firstPass.Steps
		*dst = make(
			[]*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				*dst = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep)
				err = __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep(
					src, *dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Steps: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	WorkflowId uuid.UUID `json:"workflowId"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Steps []json.RawMessage `json:"steps,omitempty"`
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun, error) {
	var retval __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun

	retval.Id = v.Id
	retval.WorkflowId = v.WorkflowId
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Steps
		src := v.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if src != nil {
				var err error
				*dst, err = __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep(
					src)
				if err != nil {
					return nil, fmt.Errorf(
						"unable to marshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Steps: %w", err)
				}
			}
		}
	}
	return &retval, nil
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep struct {
	Typename       *string                                                                                                                     `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                                                   `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                               `json:"action"`
	DependsOn      []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                       `json:"status"`
	SequenceNumber int                                                                                                                         `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                   `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                   `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                                                  `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                                                      `json:"executionType,omitempty"`
	ExecutionError *string                                                                                                                     `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetDependsOn() []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep, error) {
	var retval __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep struct {
	Typename       *string                                                                                                                     `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                                                   `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                               `json:"action"`
	DependsOn      []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                       `json:"status"`
	SequenceNumber int                                                                                                                         `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                   `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                   `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                                                  `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                                                      `json:"executionType,omitempty"`
	ExecutionError *string                                                                                                                     `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetDependsOn() []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep, error) {
	var retval __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep struct {
	Typename       *string                                                                                                                     `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                                                   `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                               `json:"action"`
	DependsOn      []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                       `json:"status"`
	SequenceNumber int                                                                                                                         `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                   `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                   `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                                                  `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                                                      `json:"executionType,omitempty"`
	ExecutionError *string                                                                                                                     `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetDependsOn() []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep, error) {
	var retval __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep struct {
	Typename       *string                                                                                                                     `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                                                   `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                               `json:"action"`
	DependsOn      []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                       `json:"status"`
	SequenceNumber int                                                                                                                         `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                   `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                   `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                                                  `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                                                      `json:"executionType,omitempty"`
	ExecutionError *string                                                                                                                     `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetDependsOn() []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep, error) {
	var retval __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep struct {
	Typename       *string                                                                                                                     `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                                                   `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                               `json:"action"`
	DependsOn      []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                       `json:"status"`
	SequenceNumber int                                                                                                                         `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                   `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                   `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                                                  `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                                                      `json:"executionType,omitempty"`
	ExecutionError *string                                                                                                                     `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetDependsOn() []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep, error) {
	var retval __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep is implemented by the following types:
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	// GetAction returns the interface-field "action" from its implementation.
	GetAction() GenericWorkflowStepActionType
	// GetDependsOn returns the interface-field "dependsOn" from its implementation.
	GetDependsOn() []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() WorkflowRunStepStatus
	// GetSequenceNumber returns the interface-field "sequenceNumber" from its implementation.
	GetSequenceNumber() int
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() time.Time
	// GetExecutionId returns the interface-field "executionId" from its implementation.
	GetExecutionId() *uuid.UUID
	// GetExecutionType returns the interface-field "executionType" from its implementation.
	GetExecutionType() *WorkflowExecutionType
	// GetExecutionError returns the interface-field "executionError" from its implementation.
	GetExecutionError() *string
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep(b []byte, v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep(v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep is implemented by the following types:
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(b []byte, v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep struct {
	Typename    *string                                                                         `json:"__typename,omitempty"`
	Id          uuid.UUID                                                                       `json:"id"`
	WorkflowRun *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun `json:"workflowRun,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetWorkflowRun returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep) GetWorkflowRun() *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun {
	return v.WorkflowRun
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun struct {
	Id         uuid.UUID                                                                                             `json:"id"`
	WorkflowId uuid.UUID                                                                                             `json:"workflowId"`
	Sequence   int                                                                                                   `json:"sequence"`
	Status     WorkflowRunStatus                                                                                     `json:"status"`
	CreatedAt  time.Time                                                                                             `json:"createdAt"`
	Steps      []*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep `json:"-"`
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetId() uuid.UUID {
	return v.Id
}

// GetWorkflowId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.WorkflowId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetWorkflowId() uuid.UUID {
	return v.WorkflowId
}

// GetSequence returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetSequence() int {
	return v.Sequence
}

// GetStatus returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.Status
}

// GetCreatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetSteps returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetSteps() []*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep {
	return v.Steps
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun
		Steps []json.RawMessage `json:"steps"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Steps
		src := firstPass.Steps
		*dst = make(
			[]*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				*dst = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep)
				err = __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep(
					src, *dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Steps: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	WorkflowId uuid.UUID `json:"workflowId"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Steps []json.RawMessage `json:"steps,omitempty"`
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun, error) {
	var retval __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun

	retval.Id = v.Id
	retval.WorkflowId = v.WorkflowId
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Steps
		src := v.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if src != nil {
				var err error
				*dst, err = __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep(
					src)
				if err != nil {
					return nil, fmt.Errorf(
						"unable to marshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Steps: %w", err)
				}
			}
		}
	}
	return &retval, nil
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep struct {
	Typename       *string                                                                                                                      `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                                                    `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                                `json:"action"`
	DependsOn      []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                        `json:"status"`
	SequenceNumber int                                                                                                                          `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                    `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                    `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                                                   `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                                                       `json:"executionType,omitempty"`
	ExecutionError *string                                                                                                                      `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetDependsOn() []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep, error) {
	var retval __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep struct {
	Typename       *string                                                                                                                      `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                                                    `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                                `json:"action"`
	DependsOn      []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                        `json:"status"`
	SequenceNumber int                                                                                                                          `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                    `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                    `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                                                   `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                                                       `json:"executionType,omitempty"`
	ExecutionError *string                                                                                                                      `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetDependsOn() []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep, error) {
	var retval __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep struct {
	Typename       *string                                                                                                                      `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                                                    `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                                `json:"action"`
	DependsOn      []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                        `json:"status"`
	SequenceNumber int                                                                                                                          `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                    `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                    `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                                                   `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                                                       `json:"executionType,omitempty"`
	ExecutionError *string                                                                                                                      `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetDependsOn() []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep, error) {
	var retval __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep struct {
	Typename       *string                                                                                                                      `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                                                    `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                                `json:"action"`
	DependsOn      []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                        `json:"status"`
	SequenceNumber int                                                                                                                          `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                    `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                    `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                                                   `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                                                       `json:"executionType,omitempty"`
	ExecutionError *string                                                                                                                      `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetDependsOn() []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep, error) {
	var retval __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep struct {
	Typename       *string                                                                                                                      `json:"__typename,omitempty"`
	Id             uuid.UUID                                                                                                                    `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                                `json:"action"`
	DependsOn      []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                        `json:"status"`
	SequenceNumber int                                                                                                                          `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                    `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                    `json:"updatedAt"`
	ExecutionId    *uuid.UUID                                                                                                                   `json:"executionId,omitempty"`
	ExecutionType  *WorkflowExecutionType                                                                                                       `json:"executionType,omitempty"`
	ExecutionError *string                                                                                                                      `json:"executionError,omitempty"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetDependsOn() []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetExecutionId() *uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetExecutionType() *WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetExecutionError() *string {
	return v.ExecutionError
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep struct {
	Typename *string `json:"__typename,omitempty"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId *uuid.UUID `json:"executionId,omitempty"`

	ExecutionType *WorkflowExecutionType `json:"executionType,omitempty"`

	ExecutionError *string `json:"executionError,omitempty"`
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep, error) {
	var retval __premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep is implemented by the following types:
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	// GetAction returns the interface-field "action" from its implementation.
	GetAction() GenericWorkflowStepActionType
	// GetDependsOn returns the interface-field "dependsOn" from its implementation.
	GetDependsOn() []WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() WorkflowRunStepStatus
	// GetSequenceNumber returns the interface-field "sequenceNumber" from its implementation.
	GetSequenceNumber() int
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() time.Time
	// GetExecutionId returns the interface-field "executionId" from its implementation.
	GetExecutionId() *uuid.UUID
	// GetExecutionType returns the interface-field "executionType" from its implementation.
	GetExecutionType() *WorkflowExecutionType
	// GetExecutionError returns the interface-field "executionError" from its implementation.
	GetExecutionError() *string
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep(b []byte, v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep(v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep is implemented by the following types:
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) implementsGraphQLInterfaceWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(b []byte, v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep struct {
	Typename *string   `json:"__typename,omitempty"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep) GetTypename() *string {
	return v.Typename
}

// GetId returns WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep) GetId() uuid.UUID {
	return v.Id
}

type WorkflowRunStepStatus string

const (
	WorkflowRunStepStatusPending   WorkflowRunStepStatus = "PENDING"
	WorkflowRunStepStatusRunning   WorkflowRunStepStatus = "RUNNING"
	WorkflowRunStepStatusCompleted WorkflowRunStepStatus = "COMPLETED"
	WorkflowRunStepStatusFailed    WorkflowRunStepStatus = "FAILED"
	WorkflowRunStepStatusError     WorkflowRunStepStatus = "ERROR"
	WorkflowRunStepStatusAborted   WorkflowRunStepStatus = "ABORTED"
)

// workflowRunsResponse is returned by workflowRuns on success.
type WorkflowRunsResponse struct {
	Team *WorkflowRunsTeam `json:"team,omitempty"`
}

// GetTeam returns WorkflowRunsResponse.Team, and is useful for accessing the field via an interface.
func (v *WorkflowRunsResponse) GetTeam() *WorkflowRunsTeam { return v.Team }

// WorkflowRunsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type WorkflowRunsTeam struct {
	Id      uuid.UUID                `json:"id"`
	Project *WorkflowRunsTeamProject `json:"project,omitempty"`
}

// GetId returns WorkflowRunsTeam.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns WorkflowRunsTeam.Project, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeam) GetProject() *WorkflowRunsTeamProject { return v.Project }

// WorkflowRunsTeamProject includes the requested fields of the GraphQL type Project.
type WorkflowRunsTeamProject struct {
	Id       uuid.UUID                        `json:"id"`
	Workflow *WorkflowRunsTeamProjectWorkflow `json:"workflow,omitempty"`
}

// GetId returns WorkflowRunsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeamProject) GetId() uuid.UUID { return v.Id }

// GetWorkflow returns WorkflowRunsTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeamProject) GetWorkflow() *WorkflowRunsTeamProjectWorkflow { return v.Workflow }

// WorkflowRunsTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type WorkflowRunsTeamProjectWorkflow struct {
	Id   uuid.UUID                                                `json:"id"`
	Runs WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnection `json:"runs"`
}

// GetId returns WorkflowRunsTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeamProjectWorkflow) GetId() uuid.UUID { return v.Id }

// GetRuns returns WorkflowRunsTeamProjectWorkflow.Runs, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeamProjectWorkflow) GetRuns() WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnection {
	return v.Runs
}

// WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnection includes the requested fields of the GraphQL type WorkflowRunConnection.
type WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnection struct {
	TotalCount int                                                                        `json:"totalCount"`
	PageInfo   WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionPageInfo           `json:"pageInfo"`
	Nodes      []WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun `json:"nodes"`
}

// GetTotalCount returns WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetPageInfo returns WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnection) GetPageInfo() WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnection) GetNodes() []WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun {
	return v.Nodes
}

// WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun struct {
	WorkflowRunListItem `json:"-"`
}

// GetId returns WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetId() uuid.UUID {
	return v.WorkflowRunListItem.Id
}

// GetSequence returns WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetSequence() int {
	return v.WorkflowRunListItem.Sequence
}

// GetStatus returns WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.WorkflowRunListItem.Status
}

// GetCreatedAt returns WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetCreatedAt() time.Time {
	return v.WorkflowRunListItem.CreatedAt
}

// GetSteps returns WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetSteps() []*WorkflowRunListItemStepsWorkflowRunStep {
	return v.WorkflowRunListItem.Steps
}

func (v *WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Steps []json.RawMessage `json:"steps,omitempty"`
}

func (v *WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) __premarshalJSON() (*__premarshalWorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun, error) {
	var retval __premarshalWorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun

	retval.Id = v.WorkflowRunListItem.Id
	retval.Sequence = v.WorkflowRunListItem.Sequence
	retval.Status = v.WorkflowRunListItem.Status
	retval.CreatedAt = v.WorkflowRunListItem.CreatedAt
	{

		dst := &retval.Steps
		src := v.WorkflowRunListItem.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if src != nil {
				var err error
				*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStep(
					src)
				if err != nil {
					return nil, fmt.Errorf(
						"unable to marshal WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.WorkflowRunListItem.Steps: %w", err)
				}
			}
		}
	}
	return &retval, nil
}

// WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *WorkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

type WorkflowStepActionType string

const (
	WorkflowStepActionTypeOrchestrationBuild           WorkflowStepActionType = "ORCHESTRATION_BUILD"
	WorkflowStepActionTypeOrchestrationClusterPrecheck WorkflowStepActionType = "ORCHESTRATION_CLUSTER_PRECHECK"
	WorkflowStepActionTypeOrchestrationDeploy          WorkflowStepActionType = "ORCHESTRATION_DEPLOY"
	WorkflowStepActionTypeOrchestrationRelease         WorkflowStepActionType = "ORCHESTRATION_RELEASE"
	WorkflowStepActionTypeOrchestrationDestroy         WorkflowStepActionType = "ORCHESTRATION_DESTROY"
)

type WorkflowStepDefinitionInput struct {
	Action         WorkflowStepActionType                   `json:"action"`
	DependsOn      []int                                    `json:"dependsOn"`
	Disabled       *bool                                    `json:"disabled,omitempty"`
	MatchingRule   *WorkflowStepDefinitionMatchingRuleInput `json:"matchingRule,omitempty"`
	SequenceNumber *int                                     `json:"sequenceNumber,omitempty"`
}

// GetAction returns WorkflowStepDefinitionInput.Action, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionInput) GetAction() WorkflowStepActionType { return v.Action }

// GetDependsOn returns WorkflowStepDefinitionInput.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionInput) GetDependsOn() []int { return v.DependsOn }

// GetDisabled returns WorkflowStepDefinitionInput.Disabled, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionInput) GetDisabled() *bool { return v.Disabled }

// GetMatchingRule returns WorkflowStepDefinitionInput.MatchingRule, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionInput) GetMatchingRule() *WorkflowStepDefinitionMatchingRuleInput {
	return v.MatchingRule
}

// GetSequenceNumber returns WorkflowStepDefinitionInput.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionInput) GetSequenceNumber() *int { return v.SequenceNumber }

type WorkflowStepDefinitionMatchingRuleInput struct {
	Label      *string    `json:"label,omitempty"`
	EntityId   *uuid.UUID `json:"entityId,omitempty"`
	BranchName *string    `json:"branchName,omitempty"`
}

// GetLabel returns WorkflowStepDefinitionMatchingRuleInput.Label, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionMatchingRuleInput) GetLabel() *string { return v.Label }

// GetEntityId returns WorkflowStepDefinitionMatchingRuleInput.EntityId, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionMatchingRuleInput) GetEntityId() *uuid.UUID { return v.EntityId }

// GetBranchName returns WorkflowStepDefinitionMatchingRuleInput.BranchName, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionMatchingRuleInput) GetBranchName() *string { return v.BranchName }

// __abortWorkflowRunInput is used internally by genqlient
type __abortWorkflowRunInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __abortWorkflowRunInput.Id, and is useful for accessing the field via an interface.
func (v *__abortWorkflowRunInput) GetId() uuid.UUID { return v.Id }

// __approveWorkflowRunStepInput is used internally by genqlient
type __approveWorkflowRunStepInput struct {
	StepId    uuid.UUID `json:"stepId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetStepId returns __approveWorkflowRunStepInput.StepId, and is useful for accessing the field via an interface.
func (v *__approveWorkflowRunStepInput) GetStepId() uuid.UUID { return v.StepId }

// GetProjectId returns __approveWorkflowRunStepInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__approveWorkflowRunStepInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __blueprintByIdInput is used internally by genqlient
type __blueprintByIdInput struct {
	BlueprintId uuid.UUID `json:"blueprintId"`
}

// GetBlueprintId returns __blueprintByIdInput.BlueprintId, and is useful for accessing the field via an interface.
func (v *__blueprintByIdInput) GetBlueprintId() uuid.UUID { return v.BlueprintId }

// __blueprintInput is used internally by genqlient
type __blueprintInput struct {
	TeamId      uuid.UUID `json:"teamId"`
	BlueprintId uuid.UUID `json:"blueprintId"`
}

// GetTeamId returns __blueprintInput.TeamId, and is useful for accessing the field via an interface.
func (v *__blueprintInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetBlueprintId returns __blueprintInput.BlueprintId, and is useful for accessing the field via an interface.
func (v *__blueprintInput) GetBlueprintId() uuid.UUID { return v.BlueprintId }

// __blueprintRevisionsInput is used internally by genqlient
type __blueprintRevisionsInput struct {
	TeamId      uuid.UUID `json:"teamId"`
	BlueprintId uuid.UUID `json:"blueprintId"`
}

// GetTeamId returns __blueprintRevisionsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__blueprintRevisionsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetBlueprintId returns __blueprintRevisionsInput.BlueprintId, and is useful for accessing the field via an interface.
func (v *__blueprintRevisionsInput) GetBlueprintId() uuid.UUID { return v.BlueprintId }

// __buildArtifactsInput is used internally by genqlient
type __buildArtifactsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	Page      PageInput `json:"page"`
}

// GetTeamId returns __buildArtifactsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__buildArtifactsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __buildArtifactsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__buildArtifactsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetPage returns __buildArtifactsInput.Page, and is useful for accessing the field via an interface.
func (v *__buildArtifactsInput) GetPage() PageInput { return v.Page }

// __buildRunDetailInput is used internally by genqlient
type __buildRunDetailInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	RunId     uuid.UUID `json:"runId"`
}

// GetTeamId returns __buildRunDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__buildRunDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __buildRunDetailInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__buildRunDetailInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetRunId returns __buildRunDetailInput.RunId, and is useful for accessing the field via an interface.
func (v *__buildRunDetailInput) GetRunId() uuid.UUID { return v.RunId }

// __buildRunsInput is used internally by genqlient
type __buildRunsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	Page      PageInput `json:"page"`
}

// GetTeamId returns __buildRunsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__buildRunsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __buildRunsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__buildRunsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetPage returns __buildRunsInput.Page, and is useful for accessing the field via an interface.
func (v *__buildRunsInput) GetPage() PageInput { return v.Page }

// __cloudRevisionsInput is used internally by genqlient
type __cloudRevisionsInput struct {
	TeamId  uuid.UUID `json:"teamId"`
	CloudId uuid.UUID `json:"cloudId"`
}

// GetTeamId returns __cloudRevisionsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__cloudRevisionsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetCloudId returns __cloudRevisionsInput.CloudId, and is useful for accessing the field via an interface.
func (v *__cloudRevisionsInput) GetCloudId() uuid.UUID { return v.CloudId }

// __clusterDetailsInput is used internally by genqlient
type __clusterDetailsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ClusterId uuid.UUID `json:"clusterId"`
}

// GetTeamId returns __clusterDetailsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__clusterDetailsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetClusterId returns __clusterDetailsInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__clusterDetailsInput) GetClusterId() uuid.UUID { return v.ClusterId }

// __clusterRevisionsInput is used internally by genqlient
type __clusterRevisionsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ClusterId uuid.UUID `json:"clusterId"`
}

// GetTeamId returns __clusterRevisionsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__clusterRevisionsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetClusterId returns __clusterRevisionsInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__clusterRevisionsInput) GetClusterId() uuid.UUID { return v.ClusterId }

// __clusterStatusInput is used internally by genqlient
type __clusterStatusInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ClusterId uuid.UUID `json:"clusterId"`
}

// GetTeamId returns __clusterStatusInput.TeamId, and is useful for accessing the field via an interface.
func (v *__clusterStatusInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetClusterId returns __clusterStatusInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__clusterStatusInput) GetClusterId() uuid.UUID { return v.ClusterId }

// __createBuildRunInput is used internally by genqlient
type __createBuildRunInput struct {
	BuildId uuid.UUID `json:"buildId"`
}

// GetBuildId returns __createBuildRunInput.BuildId, and is useful for accessing the field via an interface.
func (v *__createBuildRunInput) GetBuildId() uuid.UUID { return v.BuildId }

// __createDeployRunInput is used internally by genqlient
type __createDeployRunInput struct {
	Input CreateDeployRunInput `json:"input"`
}

// GetInput returns __createDeployRunInput.Input, and is useful for accessing the field via an interface.
func (v *__createDeployRunInput) GetInput() CreateDeployRunInput { return v.Input }

// __createGroupInput is used internally by genqlient
type __createGroupInput struct {
	Input CreateGroupInput `json:"input"`
}

// GetInput returns __createGroupInput.Input, and is useful for accessing the field via an interface.
func (v *__createGroupInput) GetInput() CreateGroupInput { return v.Input }

// __createProjectInput is used internally by genqlient
type __createProjectInput struct {
	Input CreateProjectInput `json:"input"`
}

// GetInput returns __createProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__createProjectInput) GetInput() CreateProjectInput { return v.Input }

// __createSubGroupInput is used internally by genqlient
type __createSubGroupInput struct {
	Input CreateSubGroupInput `json:"input"`
}

// GetInput returns __createSubGroupInput.Input, and is useful for accessing the field via an interface.
func (v *__createSubGroupInput) GetInput() CreateSubGroupInput { return v.Input }

// __createUserPersonalAccessTokenInput is used internally by genqlient
type __createUserPersonalAccessTokenInput struct {
	UserId uuid.UUID `json:"userId"`
	Name   string    `json:"name"`
}

// GetUserId returns __createUserPersonalAccessTokenInput.UserId, and is useful for accessing the field via an interface.
func (v *__createUserPersonalAccessTokenInput) GetUserId() uuid.UUID { return v.UserId }

// GetName returns __createUserPersonalAccessTokenInput.Name, and is useful for accessing the field via an interface.
func (v *__createUserPersonalAccessTokenInput) GetName() string { return v.Name }

// __createWorkflowTriggerInput is used internally by genqlient
type __createWorkflowTriggerInput struct {
	Input CreateTriggerInput `json:"input"`
}

// GetInput returns __createWorkflowTriggerInput.Input, and is useful for accessing the field via an interface.
func (v *__createWorkflowTriggerInput) GetInput() CreateTriggerInput { return v.Input }

// __deleteGroupInput is used internally by genqlient
type __deleteGroupInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteGroupInput) GetId() uuid.UUID { return v.Id }

// __deleteProjectAndResourcesInput is used internally by genqlient
type __deleteProjectAndResourcesInput struct {
	Id              uuid.UUID `json:"id"`
	DeleteOnFailure *bool     `json:"deleteOnFailure,omitempty"`
}

// GetId returns __deleteProjectAndResourcesInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteProjectAndResourcesInput) GetId() uuid.UUID { return v.Id }

// GetDeleteOnFailure returns __deleteProjectAndResourcesInput.DeleteOnFailure, and is useful for accessing the field via an interface.
func (v *__deleteProjectAndResourcesInput) GetDeleteOnFailure() *bool { return v.DeleteOnFailure }

// __deleteProjectInput is used internally by genqlient
type __deleteProjectInput struct {
	Id    uuid.UUID `json:"id"`
	Force *bool     `json:"force,omitempty"`
}

// GetId returns __deleteProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteProjectInput) GetId() uuid.UUID { return v.Id }

// GetForce returns __deleteProjectInput.Force, and is useful for accessing the field via an interface.
func (v *__deleteProjectInput) GetForce() *bool { return v.Force }

// __deleteProjectResourcesInput is used internally by genqlient
type __deleteProjectResourcesInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteProjectResourcesInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteProjectResourcesInput) GetId() uuid.UUID { return v.Id }

// __deleteSubGroupInput is used internally by genqlient
type __deleteSubGroupInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteSubGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteSubGroupInput) GetId() uuid.UUID { return v.Id }

// __deleteUserPersonalAccessTokenInput is used internally by genqlient
type __deleteUserPersonalAccessTokenInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteUserPersonalAccessTokenInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteUserPersonalAccessTokenInput) GetId() uuid.UUID { return v.Id }

// __deleteWorkflowTriggerInput is used internally by genqlient
type __deleteWorkflowTriggerInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteWorkflowTriggerInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteWorkflowTriggerInput) GetId() uuid.UUID { return v.Id }

// __duplicateProjectInput is used internally by genqlient
type __duplicateProjectInput struct {
	Id    uuid.UUID             `json:"id"`
	Input DuplicateProjectInput `json:"input"`
}

// GetId returns __duplicateProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__duplicateProjectInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __duplicateProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__duplicateProjectInput) GetInput() DuplicateProjectInput { return v.Input }

// __ejectClusterComponentInput is used internally by genqlient
type __ejectClusterComponentInput struct {
	ClusterId uuid.UUID                  `json:"clusterId"`
	Input     EjectClusterComponentInput `json:"input"`
}

// GetClusterId returns __ejectClusterComponentInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__ejectClusterComponentInput) GetClusterId() uuid.UUID { return v.ClusterId }

// GetInput returns __ejectClusterComponentInput.Input, and is useful for accessing the field via an interface.
func (v *__ejectClusterComponentInput) GetInput() EjectClusterComponentInput { return v.Input }

// __generateDownloadableLogLinkForWorkflowRunStepInput is used internally by genqlient
type __generateDownloadableLogLinkForWorkflowRunStepInput struct {
	ActionStepId uuid.UUID `json:"actionStepId"`
}

// GetActionStepId returns __generateDownloadableLogLinkForWorkflowRunStepInput.ActionStepId, and is useful for accessing the field via an interface.
func (v *__generateDownloadableLogLinkForWorkflowRunStepInput) GetActionStepId() uuid.UUID {
	return v.ActionStepId
}

// __groupInput is used internally by genqlient
type __groupInput struct {
	TeamId uuid.UUID `json:"teamId"`
	Id     uuid.UUID `json:"id"`
}

// GetTeamId returns __groupInput.TeamId, and is useful for accessing the field via an interface.
func (v *__groupInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetId returns __groupInput.Id, and is useful for accessing the field via an interface.
func (v *__groupInput) GetId() uuid.UUID { return v.Id }

// __groupSubGroupsInput is used internally by genqlient
type __groupSubGroupsInput struct {
	TeamId  uuid.UUID `json:"teamId"`
	GroupId uuid.UUID `json:"groupId"`
}

// GetTeamId returns __groupSubGroupsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__groupSubGroupsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetGroupId returns __groupSubGroupsInput.GroupId, and is useful for accessing the field via an interface.
func (v *__groupSubGroupsInput) GetGroupId() uuid.UUID { return v.GroupId }

// __groupsInput is used internally by genqlient
type __groupsInput struct {
	TeamId uuid.UUID   `json:"teamId"`
	Input  GroupsInput `json:"input"`
}

// GetTeamId returns __groupsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__groupsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetInput returns __groupsInput.Input, and is useful for accessing the field via an interface.
func (v *__groupsInput) GetInput() GroupsInput { return v.Input }

// __groupsWithSubgroupsInput is used internally by genqlient
type __groupsWithSubgroupsInput struct {
	TeamId uuid.UUID `json:"teamId"`
}

// GetTeamId returns __groupsWithSubgroupsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__groupsWithSubgroupsInput) GetTeamId() uuid.UUID { return v.TeamId }

// __insightsCloudsMetricInput is used internally by genqlient
type __insightsCloudsMetricInput struct {
	TeamId uuid.UUID `json:"teamId"`
}

// GetTeamId returns __insightsCloudsMetricInput.TeamId, and is useful for accessing the field via an interface.
func (v *__insightsCloudsMetricInput) GetTeamId() uuid.UUID { return v.TeamId }

// __insightsClustersMetricInput is used internally by genqlient
type __insightsClustersMetricInput struct {
	TeamId uuid.UUID `json:"teamId"`
}

// GetTeamId returns __insightsClustersMetricInput.TeamId, and is useful for accessing the field via an interface.
func (v *__insightsClustersMetricInput) GetTeamId() uuid.UUID { return v.TeamId }

// __jobListInput is used internally by genqlient
type __jobListInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __jobListInput.TeamId, and is useful for accessing the field via an interface.
func (v *__jobListInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __jobListInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__jobListInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __jobRunDetailInput is used internally by genqlient
type __jobRunDetailInput struct {
	Id     uuid.UUID `json:"id"`
	TeamId uuid.UUID `json:"teamId"`
}

// GetId returns __jobRunDetailInput.Id, and is useful for accessing the field via an interface.
func (v *__jobRunDetailInput) GetId() uuid.UUID { return v.Id }

// GetTeamId returns __jobRunDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__jobRunDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// __jobRunListInput is used internally by genqlient
type __jobRunListInput struct {
	Id     uuid.UUID `json:"id"`
	TeamId uuid.UUID `json:"teamId"`
	Page   PageInput `json:"page"`
}

// GetId returns __jobRunListInput.Id, and is useful for accessing the field via an interface.
func (v *__jobRunListInput) GetId() uuid.UUID { return v.Id }

// GetTeamId returns __jobRunListInput.TeamId, and is useful for accessing the field via an interface.
func (v *__jobRunListInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetPage returns __jobRunListInput.Page, and is useful for accessing the field via an interface.
func (v *__jobRunListInput) GetPage() PageInput { return v.Page }

// __jobRunLogsInput is used internally by genqlient
type __jobRunLogsInput struct {
	Id     uuid.UUID `json:"id"`
	TeamId uuid.UUID `json:"teamId"`
}

// GetId returns __jobRunLogsInput.Id, and is useful for accessing the field via an interface.
func (v *__jobRunLogsInput) GetId() uuid.UUID { return v.Id }

// GetTeamId returns __jobRunLogsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__jobRunLogsInput) GetTeamId() uuid.UUID { return v.TeamId }

// __linkProjectInput is used internally by genqlient
type __linkProjectInput struct {
	Input ProjectLinkInput `json:"input"`
}

// GetInput returns __linkProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__linkProjectInput) GetInput() ProjectLinkInput { return v.Input }

// __observabilityConfigInput is used internally by genqlient
type __observabilityConfigInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __observabilityConfigInput.TeamId, and is useful for accessing the field via an interface.
func (v *__observabilityConfigInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __observabilityConfigInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__observabilityConfigInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectAvailableProvidersInput is used internally by genqlient
type __projectAvailableProvidersInput struct {
	TeamId    uuid.UUID       `json:"teamId"`
	ProjectId uuid.UUID       `json:"projectId"`
	LinkType  ProjectLinkType `json:"linkType"`
}

// GetTeamId returns __projectAvailableProvidersInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectAvailableProvidersInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectAvailableProvidersInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectAvailableProvidersInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetLinkType returns __projectAvailableProvidersInput.LinkType, and is useful for accessing the field via an interface.
func (v *__projectAvailableProvidersInput) GetLinkType() ProjectLinkType { return v.LinkType }

// __projectClustersInput is used internally by genqlient
type __projectClustersInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __projectClustersInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectClustersInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectClustersInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectClustersInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectDeployDetailInput is used internally by genqlient
type __projectDeployDetailInput struct {
	TeamId   uuid.UUID `json:"teamId"`
	DeployId uuid.UUID `json:"deployId"`
}

// GetTeamId returns __projectDeployDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectDeployDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetDeployId returns __projectDeployDetailInput.DeployId, and is useful for accessing the field via an interface.
func (v *__projectDeployDetailInput) GetDeployId() uuid.UUID { return v.DeployId }

// __projectDeployRevisionsInput is used internally by genqlient
type __projectDeployRevisionsInput struct {
	TeamId    uuid.UUID  `json:"teamId"`
	ProjectId uuid.UUID  `json:"projectId"`
	Page      *PageInput `json:"page,omitempty"`
}

// GetTeamId returns __projectDeployRevisionsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectDeployRevisionsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectDeployRevisionsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectDeployRevisionsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetPage returns __projectDeployRevisionsInput.Page, and is useful for accessing the field via an interface.
func (v *__projectDeployRevisionsInput) GetPage() *PageInput { return v.Page }

// __projectDeployRunDetailInput is used internally by genqlient
type __projectDeployRunDetailInput struct {
	TeamId      uuid.UUID `json:"teamId"`
	DeployRunId uuid.UUID `json:"deployRunId"`
}

// GetTeamId returns __projectDeployRunDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectDeployRunDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetDeployRunId returns __projectDeployRunDetailInput.DeployRunId, and is useful for accessing the field via an interface.
func (v *__projectDeployRunDetailInput) GetDeployRunId() uuid.UUID { return v.DeployRunId }

// __projectDeploysInput is used internally by genqlient
type __projectDeploysInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __projectDeploysInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectDeploysInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectDeploysInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectDeploysInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectDetailInput is used internally by genqlient
type __projectDetailInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __projectDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectDetailInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectDetailInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectInfoInput is used internally by genqlient
type __projectInfoInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __projectInfoInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectInfoInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectInfoInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectInfoInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectLinkedProjectsInput is used internally by genqlient
type __projectLinkedProjectsInput struct {
	TeamId    uuid.UUID       `json:"teamId"`
	ProjectId uuid.UUID       `json:"projectId"`
	LinkType  ProjectLinkType `json:"linkType"`
}

// GetTeamId returns __projectLinkedProjectsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectLinkedProjectsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectLinkedProjectsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectLinkedProjectsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetLinkType returns __projectLinkedProjectsInput.LinkType, and is useful for accessing the field via an interface.
func (v *__projectLinkedProjectsInput) GetLinkType() ProjectLinkType { return v.LinkType }

// __projectOutputInput is used internally by genqlient
type __projectOutputInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __projectOutputInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectOutputInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectOutputInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectOutputInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectOutputsInput is used internally by genqlient
type __projectOutputsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __projectOutputsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectOutputsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectOutputsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectOutputsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectStatusOnlyInput is used internally by genqlient
type __projectStatusOnlyInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __projectStatusOnlyInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectStatusOnlyInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectStatusOnlyInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectStatusOnlyInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectsCountInput is used internally by genqlient
type __projectsCountInput struct {
	TeamId uuid.UUID `json:"teamId"`
}

// GetTeamId returns __projectsCountInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectsCountInput) GetTeamId() uuid.UUID { return v.TeamId }

// __projectsWithBlueprintInput is used internally by genqlient
type __projectsWithBlueprintInput struct {
	TeamId uuid.UUID `json:"teamId"`
}

// GetTeamId returns __projectsWithBlueprintInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectsWithBlueprintInput) GetTeamId() uuid.UUID { return v.TeamId }

// __projectsWithDeploymentTimesInput is used internally by genqlient
type __projectsWithDeploymentTimesInput struct {
	TeamId uuid.UUID     `json:"teamId"`
	Input  ProjectsInput `json:"input"`
}

// GetTeamId returns __projectsWithDeploymentTimesInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectsWithDeploymentTimesInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetInput returns __projectsWithDeploymentTimesInput.Input, and is useful for accessing the field via an interface.
func (v *__projectsWithDeploymentTimesInput) GetInput() ProjectsInput { return v.Input }

// __projectsWithStatusInput is used internally by genqlient
type __projectsWithStatusInput struct {
	TeamId uuid.UUID     `json:"teamId"`
	Input  ProjectsInput `json:"input"`
}

// GetTeamId returns __projectsWithStatusInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectsWithStatusInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetInput returns __projectsWithStatusInput.Input, and is useful for accessing the field via an interface.
func (v *__projectsWithStatusInput) GetInput() ProjectsInput { return v.Input }

// __resourceLogsInput is used internally by genqlient
type __resourceLogsInput struct {
	TeamId     uuid.UUID `json:"teamId"`
	ResourceId uuid.UUID `json:"resourceId"`
}

// GetTeamId returns __resourceLogsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__resourceLogsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetResourceId returns __resourceLogsInput.ResourceId, and is useful for accessing the field via an interface.
func (v *__resourceLogsInput) GetResourceId() uuid.UUID { return v.ResourceId }

// __resourcesWithLogsInput is used internally by genqlient
type __resourcesWithLogsInput struct {
	TeamId    uuid.UUID                           `json:"teamId"`
	ProjectId uuid.UUID                           `json:"projectId"`
	ClusterId uuid.UUID                           `json:"clusterId"`
	Selector  *ObservabilityResourceSelectorInput `json:"selector,omitempty"`
}

// GetTeamId returns __resourcesWithLogsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__resourcesWithLogsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __resourcesWithLogsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__resourcesWithLogsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetClusterId returns __resourcesWithLogsInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__resourcesWithLogsInput) GetClusterId() uuid.UUID { return v.ClusterId }

// GetSelector returns __resourcesWithLogsInput.Selector, and is useful for accessing the field via an interface.
func (v *__resourcesWithLogsInput) GetSelector() *ObservabilityResourceSelectorInput {
	return v.Selector
}

// __resourcesWithMetricsInput is used internally by genqlient
type __resourcesWithMetricsInput struct {
	TeamId      uuid.UUID                           `json:"teamId"`
	ProjectId   uuid.UUID                           `json:"projectId"`
	ClusterId   uuid.UUID                           `json:"clusterId"`
	MetricTypes []MetricType                        `json:"metricTypes"`
	Selector    *ObservabilityResourceSelectorInput `json:"selector,omitempty"`
}

// GetTeamId returns __resourcesWithMetricsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__resourcesWithMetricsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __resourcesWithMetricsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__resourcesWithMetricsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetClusterId returns __resourcesWithMetricsInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__resourcesWithMetricsInput) GetClusterId() uuid.UUID { return v.ClusterId }

// GetMetricTypes returns __resourcesWithMetricsInput.MetricTypes, and is useful for accessing the field via an interface.
func (v *__resourcesWithMetricsInput) GetMetricTypes() []MetricType { return v.MetricTypes }

// GetSelector returns __resourcesWithMetricsInput.Selector, and is useful for accessing the field via an interface.
func (v *__resourcesWithMetricsInput) GetSelector() *ObservabilityResourceSelectorInput {
	return v.Selector
}

// __subGroupInput is used internally by genqlient
type __subGroupInput struct {
	TeamId  uuid.UUID `json:"teamId"`
	GroupId uuid.UUID `json:"groupId"`
	Id      uuid.UUID `json:"id"`
}

// GetTeamId returns __subGroupInput.TeamId, and is useful for accessing the field via an interface.
func (v *__subGroupInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetGroupId returns __subGroupInput.GroupId, and is useful for accessing the field via an interface.
func (v *__subGroupInput) GetGroupId() uuid.UUID { return v.GroupId }

// GetId returns __subGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__subGroupInput) GetId() uuid.UUID { return v.Id }

// __submitWorkflowRunInput is used internally by genqlient
type __submitWorkflowRunInput struct {
	WorkflowId uuid.UUID                   `json:"workflowId"`
	Definition *WorkflowRunDefinitionInput `json:"definition,omitempty"`
}

// GetWorkflowId returns __submitWorkflowRunInput.WorkflowId, and is useful for accessing the field via an interface.
func (v *__submitWorkflowRunInput) GetWorkflowId() uuid.UUID { return v.WorkflowId }

// GetDefinition returns __submitWorkflowRunInput.Definition, and is useful for accessing the field via an interface.
func (v *__submitWorkflowRunInput) GetDefinition() *WorkflowRunDefinitionInput { return v.Definition }

// __teamInput is used internally by genqlient
type __teamInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __teamInput.Id, and is useful for accessing the field via an interface.
func (v *__teamInput) GetId() uuid.UUID { return v.Id }

// __unlinkProjectInput is used internally by genqlient
type __unlinkProjectInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __unlinkProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__unlinkProjectInput) GetId() uuid.UUID { return v.Id }

// __updateDeployInput is used internally by genqlient
type __updateDeployInput struct {
	Id    uuid.UUID         `json:"id"`
	Input UpdateDeployInput `json:"input"`
}

// GetId returns __updateDeployInput.Id, and is useful for accessing the field via an interface.
func (v *__updateDeployInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __updateDeployInput.Input, and is useful for accessing the field via an interface.
func (v *__updateDeployInput) GetInput() UpdateDeployInput { return v.Input }

// __updateGroupInput is used internally by genqlient
type __updateGroupInput struct {
	Id    uuid.UUID        `json:"id"`
	Input UpdateGroupInput `json:"input"`
}

// GetId returns __updateGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__updateGroupInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __updateGroupInput.Input, and is useful for accessing the field via an interface.
func (v *__updateGroupInput) GetInput() UpdateGroupInput { return v.Input }

// __updateProjectInput is used internally by genqlient
type __updateProjectInput struct {
	Id    uuid.UUID          `json:"id"`
	Input UpdateProjectInput `json:"input"`
}

// GetId returns __updateProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__updateProjectInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __updateProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__updateProjectInput) GetInput() UpdateProjectInput { return v.Input }

// __updateSubGroupInput is used internally by genqlient
type __updateSubGroupInput struct {
	Id    uuid.UUID           `json:"id"`
	Input UpdateSubGroupInput `json:"input"`
}

// GetId returns __updateSubGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__updateSubGroupInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __updateSubGroupInput.Input, and is useful for accessing the field via an interface.
func (v *__updateSubGroupInput) GetInput() UpdateSubGroupInput { return v.Input }

// __updateWorkflowInput is used internally by genqlient
type __updateWorkflowInput struct {
	Id    uuid.UUID           `json:"id"`
	Input UpdateWorkflowInput `json:"input"`
}

// GetId returns __updateWorkflowInput.Id, and is useful for accessing the field via an interface.
func (v *__updateWorkflowInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __updateWorkflowInput.Input, and is useful for accessing the field via an interface.
func (v *__updateWorkflowInput) GetInput() UpdateWorkflowInput { return v.Input }

// __updateWorkflowTriggerInput is used internally by genqlient
type __updateWorkflowTriggerInput struct {
	Id    uuid.UUID          `json:"id"`
	Input UpdateTriggerInput `json:"input"`
}

// GetId returns __updateWorkflowTriggerInput.Id, and is useful for accessing the field via an interface.
func (v *__updateWorkflowTriggerInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __updateWorkflowTriggerInput.Input, and is useful for accessing the field via an interface.
func (v *__updateWorkflowTriggerInput) GetInput() UpdateTriggerInput { return v.Input }

// __userPersonalAccessTokensInput is used internally by genqlient
type __userPersonalAccessTokensInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userPersonalAccessTokensInput.Id, and is useful for accessing the field via an interface.
func (v *__userPersonalAccessTokensInput) GetId() uuid.UUID { return v.Id }

// __workflowDetailInput is used internally by genqlient
type __workflowDetailInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __workflowDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__workflowDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __workflowDetailInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__workflowDetailInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __workflowRunDetailInput is used internally by genqlient
type __workflowRunDetailInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	RunId     uuid.UUID `json:"runId"`
}

// GetTeamId returns __workflowRunDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __workflowRunDetailInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetRunId returns __workflowRunDetailInput.RunId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailInput) GetRunId() uuid.UUID { return v.RunId }

// __workflowRunDetailLogsInput is used internally by genqlient
type __workflowRunDetailLogsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	RunId     uuid.UUID `json:"runId"`
	StepId    uuid.UUID `json:"stepId"`
}

// GetTeamId returns __workflowRunDetailLogsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailLogsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __workflowRunDetailLogsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailLogsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetRunId returns __workflowRunDetailLogsInput.RunId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailLogsInput) GetRunId() uuid.UUID { return v.RunId }

// GetStepId returns __workflowRunDetailLogsInput.StepId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailLogsInput) GetStepId() uuid.UUID { return v.StepId }

// __workflowRunStepNestedDetailInput is used internally by genqlient
type __workflowRunStepNestedDetailInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	RunId     uuid.UUID `json:"runId"`
	StepId    uuid.UUID `json:"stepId"`
}

// GetTeamId returns __workflowRunStepNestedDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __workflowRunStepNestedDetailInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetRunId returns __workflowRunStepNestedDetailInput.RunId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailInput) GetRunId() uuid.UUID { return v.RunId }

// GetStepId returns __workflowRunStepNestedDetailInput.StepId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailInput) GetStepId() uuid.UUID { return v.StepId }

// __workflowRunStepNestedDetailLogsInput is used internally by genqlient
type __workflowRunStepNestedDetailLogsInput struct {
	TeamId       uuid.UUID `json:"teamId"`
	ProjectId    uuid.UUID `json:"projectId"`
	RunId        uuid.UUID `json:"runId"`
	StepId       uuid.UUID `json:"stepId"`
	ActionStepId uuid.UUID `json:"actionStepId"`
}

// GetTeamId returns __workflowRunStepNestedDetailLogsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailLogsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __workflowRunStepNestedDetailLogsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailLogsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetRunId returns __workflowRunStepNestedDetailLogsInput.RunId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailLogsInput) GetRunId() uuid.UUID { return v.RunId }

// GetStepId returns __workflowRunStepNestedDetailLogsInput.StepId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailLogsInput) GetStepId() uuid.UUID { return v.StepId }

// GetActionStepId returns __workflowRunStepNestedDetailLogsInput.ActionStepId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailLogsInput) GetActionStepId() uuid.UUID { return v.ActionStepId }

// __workflowRunsInput is used internally by genqlient
type __workflowRunsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	Page      PageInput `json:"page"`
}

// GetTeamId returns __workflowRunsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__workflowRunsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __workflowRunsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__workflowRunsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetPage returns __workflowRunsInput.Page, and is useful for accessing the field via an interface.
func (v *__workflowRunsInput) GetPage() PageInput { return v.Page }

// The query or mutation executed by abortWorkflowRun.
const abortWorkflowRun_Operation = `
mutation abortWorkflowRun ($id: UUID!) {
	abortWorkflowRun(id: $id)
}
`

func AbortWorkflowRunMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*AbortWorkflowRunResponse, error) {
	req_ := &graphql.Request{
		OpName: "abortWorkflowRun",
		Query:  abortWorkflowRun_Operation,
		Variables: &__abortWorkflowRunInput{
			Id: id,
		},
	}
	var err_ error

	var data_ AbortWorkflowRunResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by approveWorkflowRunStep.
const approveWorkflowRunStep_Operation = `
mutation approveWorkflowRunStep ($stepId: UUID!, $projectId: UUID!) {
	approveWorkflowRunStep(stepId: $stepId, projectId: $projectId)
}
`

func ApproveWorkflowRunStepMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	stepId uuid.UUID,
	projectId uuid.UUID,
) (*ApproveWorkflowRunStepResponse, error) {
	req_ := &graphql.Request{
		OpName: "approveWorkflowRunStep",
		Query:  approveWorkflowRunStep_Operation,
		Variables: &__approveWorkflowRunStepInput{
			StepId:    stepId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ApproveWorkflowRunStepResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by blueprint.
const blueprint_Operation = `
query blueprint ($teamId: UUID!, $blueprintId: UUID!) {
	team(id: $teamId) {
		id
		blueprint(id: $blueprintId) {
			... BlueprintDetail
		}
	}
}
fragment BlueprintDetail on Blueprint {
	id
	type
	isOfficial
	enabled
	configuration {
		... BlueprintConfigurationDetail
	}
}
fragment BlueprintConfigurationDetail on BlueprintConfiguration {
	slug
	displayName
	published
	description
	tags
	logoUrl
	richInputSchema
}
`

func BlueprintQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	blueprintId uuid.UUID,
) (*BlueprintResponse, error) {
	req_ := &graphql.Request{
		OpName: "blueprint",
		Query:  blueprint_Operation,
		Variables: &__blueprintInput{
			TeamId:      teamId,
			BlueprintId: blueprintId,
		},
	}
	var err_ error

	var data_ BlueprintResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by blueprintById.
const blueprintById_Operation = `
query blueprintById ($blueprintId: UUID!) {
	blueprint(id: $blueprintId) {
		... BlueprintDetail
	}
}
fragment BlueprintDetail on Blueprint {
	id
	type
	isOfficial
	enabled
	configuration {
		... BlueprintConfigurationDetail
	}
}
fragment BlueprintConfigurationDetail on BlueprintConfiguration {
	slug
	displayName
	published
	description
	tags
	logoUrl
	richInputSchema
}
`

func BlueprintByIdQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	blueprintId uuid.UUID,
) (*BlueprintByIdResponse, error) {
	req_ := &graphql.Request{
		OpName: "blueprintById",
		Query:  blueprintById_Operation,
		Variables: &__blueprintByIdInput{
			BlueprintId: blueprintId,
		},
	}
	var err_ error

	var data_ BlueprintByIdResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by blueprintRevisions.
const blueprintRevisions_Operation = `
query blueprintRevisions ($teamId: UUID!, $blueprintId: UUID!) {
	team(id: $teamId) {
		id
		blueprint(id: $blueprintId) {
			id
			configurationRevisions {
				nodes {
					... BlueprintConfigurationDetail
					... BlueprintConfigurationRevision
				}
			}
		}
	}
}
fragment BlueprintConfigurationDetail on BlueprintConfiguration {
	slug
	displayName
	published
	description
	tags
	logoUrl
	richInputSchema
}
fragment BlueprintConfigurationRevision on BlueprintConfiguration {
	... RevisionDetailV1
}
fragment RevisionDetailV1 on RevisableEntity {
	revisionData
	revisionMetadata {
		id
		sequenceId
		description
		createdAt
		createdBy {
			id
			login
			name
			avatar
		}
		authorInfo {
			summary
			creatorDeleted
		}
	}
}
`

func BlueprintRevisionsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	blueprintId uuid.UUID,
) (*BlueprintRevisionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "blueprintRevisions",
		Query:  blueprintRevisions_Operation,
		Variables: &__blueprintRevisionsInput{
			TeamId:      teamId,
			BlueprintId: blueprintId,
		},
	}
	var err_ error

	var data_ BlueprintRevisionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by buildArtifacts.
const buildArtifacts_Operation = `
query buildArtifacts ($teamId: UUID!, $projectId: UUID!, $page: PageInput!) {
	team(id: $teamId) {
		project(id: $projectId) {
			build {
				runs(input: {filter:{},page:$page}) {
					totalCount
					pageInfo {
						hasNextPage
					}
					nodes {
						id
						sequence
						artifacts {
							id
							image
							createdAt
						}
					}
				}
			}
		}
	}
}
`

func BuildArtifactsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	page PageInput,
) (*BuildArtifactsResponse, error) {
	req_ := &graphql.Request{
		OpName: "buildArtifacts",
		Query:  buildArtifacts_Operation,
		Variables: &__buildArtifactsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			Page:      page,
		},
	}
	var err_ error

	var data_ BuildArtifactsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by buildRunDetail.
const buildRunDetail_Operation = `
query buildRunDetail ($teamId: UUID!, $projectId: UUID!, $runId: UUID!) {
	team(id: $teamId) {
		project(id: $projectId) {
			build {
				id
				run(id: $runId) {
					... BuildRunDetail
				}
			}
		}
	}
}
fragment BuildRunDetail on BuildRun {
	id
	sequence
	jobRun {
		id
	}
	triggeredBy {
		id
		sequence
	}
	definition {
		id
	}
	artifacts {
		id
		image
		createdAt
	}
}
`

func BuildRunDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	runId uuid.UUID,
) (*BuildRunDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "buildRunDetail",
		Query:  buildRunDetail_Operation,
		Variables: &__buildRunDetailInput{
			TeamId:    teamId,
			ProjectId: projectId,
			RunId:     runId,
		},
	}
	var err_ error

	var data_ BuildRunDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by buildRuns.
const buildRuns_Operation = `
query buildRuns ($teamId: UUID!, $projectId: UUID!, $page: PageInput!) {
	team(id: $teamId) {
		project(id: $projectId) {
			build {
				id
				runs(input: {page:$page,filter:{}}) {
					totalCount
					pageInfo {
						hasNextPage
					}
					nodes {
						... BuildRunListItem
					}
				}
			}
		}
	}
}
fragment BuildRunListItem on BuildRun {
	id
	sequence
	jobRun {
		createdAt
		state
	}
	triggeredBy {
		id
		sequence
	}
}
`

func BuildRunsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	page PageInput,
) (*BuildRunsResponse, error) {
	req_ := &graphql.Request{
		OpName: "buildRuns",
		Query:  buildRuns_Operation,
		Variables: &__buildRunsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			Page:      page,
		},
	}
	var err_ error

	var data_ BuildRunsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by cloudRevisions.
const cloudRevisions_Operation = `
query cloudRevisions ($teamId: UUID!, $cloudId: UUID!) {
	team(id: $teamId) {
		id
		cloudAccount(id: $cloudId) {
			__typename
			... on AWSAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
			... on AzureAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
			... on GCPAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
			... on DOAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
			... on LinodeAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
			... on VultrAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
			... on CoreWeaveAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
		}
	}
}
fragment RevisionDetailV1 on RevisableEntity {
	revisionData
	revisionMetadata {
		id
		sequenceId
		description
		createdAt
		createdBy {
			id
			login
			name
			avatar
		}
		authorInfo {
			summary
			creatorDeleted
		}
	}
}
`

func CloudRevisionsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	cloudId uuid.UUID,
) (*CloudRevisionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "cloudRevisions",
		Query:  cloudRevisions_Operation,
		Variables: &__cloudRevisionsInput{
			TeamId:  teamId,
			CloudId: cloudId,
		},
	}
	var err_ error

	var data_ CloudRevisionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterDetails.
const clusterDetails_Operation = `
query clusterDetails ($teamId: UUID!, $clusterId: UUID!) {
	team(id: $teamId) {
		id
		cluster(id: $clusterId) {
			id
			... ClusterDetailV1
		}
	}
}
fragment ClusterDetailV1 on Cluster {
	id
	displayName
	state
	connected
	cloudProvider
	createdAt
	updatedAt
	updatedAt
	createdAt
}
`

func ClusterDetailsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	clusterId uuid.UUID,
) (*ClusterDetailsResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterDetails",
		Query:  clusterDetails_Operation,
		Variables: &__clusterDetailsInput{
			TeamId:    teamId,
			ClusterId: clusterId,
		},
	}
	var err_ error

	var data_ ClusterDetailsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterRevisions.
const clusterRevisions_Operation = `
query clusterRevisions ($teamId: UUID!, $clusterId: UUID!) {
	team(id: $teamId) {
		id
		cluster(id: $clusterId) {
			id
			configurationRevisions {
				nodes {
					... RevisionDetailV1
				}
			}
		}
	}
}
fragment RevisionDetailV1 on RevisableEntity {
	revisionData
	revisionMetadata {
		id
		sequenceId
		description
		createdAt
		createdBy {
			id
			login
			name
			avatar
		}
		authorInfo {
			summary
			creatorDeleted
		}
	}
}
`

func ClusterRevisionsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	clusterId uuid.UUID,
) (*ClusterRevisionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterRevisions",
		Query:  clusterRevisions_Operation,
		Variables: &__clusterRevisionsInput{
			TeamId:    teamId,
			ClusterId: clusterId,
		},
	}
	var err_ error

	var data_ ClusterRevisionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterStatus.
const clusterStatus_Operation = `
query clusterStatus ($teamId: UUID!, $clusterId: UUID!) {
	team(id: $teamId) {
		id
		cluster(id: $clusterId) {
			id
			status
		}
	}
}
`

func ClusterStatusQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	clusterId uuid.UUID,
) (*ClusterStatusResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterStatus",
		Query:  clusterStatus_Operation,
		Variables: &__clusterStatusInput{
			TeamId:    teamId,
			ClusterId: clusterId,
		},
	}
	var err_ error

	var data_ ClusterStatusResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createBuildRun.
const createBuildRun_Operation = `
mutation createBuildRun ($buildId: UUID!) {
	createBuildRun(input: {buildId:$buildId}) {
		id
	}
}
`

func CreateBuildRunMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	buildId uuid.UUID,
) (*CreateBuildRunResponse, error) {
	req_ := &graphql.Request{
		OpName: "createBuildRun",
		Query:  createBuildRun_Operation,
		Variables: &__createBuildRunInput{
			BuildId: buildId,
		},
	}
	var err_ error

	var data_ CreateBuildRunResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createDeployRun.
const createDeployRun_Operation = `
mutation createDeployRun ($input: CreateDeployRunInput!) {
	createDeployRun(input: $input) {
		id
	}
}
`

func CreateDeployRunMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateDeployRunInput,
) (*CreateDeployRunResponse, error) {
	req_ := &graphql.Request{
		OpName: "createDeployRun",
		Query:  createDeployRun_Operation,
		Variables: &__createDeployRunInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateDeployRunResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createGroup.
const createGroup_Operation = `
mutation createGroup ($input: CreateGroupInput!) {
	createGroup(input: $input) {
		id
		name
		envs {
			name
			value
		}
		owner {
			id
			name
		}
		createdAt
		updatedAt
	}
}
`

func CreateGroupMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateGroupInput,
) (*CreateGroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "createGroup",
		Query:  createGroup_Operation,
		Variables: &__createGroupInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateGroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createProject.
const createProject_Operation = `
mutation createProject ($input: CreateProjectInput!) {
	createProject(input: $input) {
		id
		name
		workflow {
			id
		}
	}
}
`

func CreateProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateProjectInput,
) (*CreateProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "createProject",
		Query:  createProject_Operation,
		Variables: &__createProjectInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createSubGroup.
const createSubGroup_Operation = `
mutation createSubGroup ($input: CreateSubGroupInput!) {
	createSubGroup(input: $input) {
		id
		name
		envs {
			name
			value
		}
		group {
			id
			name
		}
		createdAt
		updatedAt
	}
}
`

func CreateSubGroupMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateSubGroupInput,
) (*CreateSubGroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "createSubGroup",
		Query:  createSubGroup_Operation,
		Variables: &__createSubGroupInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateSubGroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createUserPersonalAccessToken.
const createUserPersonalAccessToken_Operation = `
mutation createUserPersonalAccessToken ($userId: UUID!, $name: String!) {
	createPersonalAccessTokenForUser(userId: $userId, input: {name:$name}) {
		id
		name
		token
		createdAt
	}
}
`

func CreateUserPersonalAccessTokenMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	name string,
) (*CreateUserPersonalAccessTokenResponse, error) {
	req_ := &graphql.Request{
		OpName: "createUserPersonalAccessToken",
		Query:  createUserPersonalAccessToken_Operation,
		Variables: &__createUserPersonalAccessTokenInput{
			UserId: userId,
			Name:   name,
		},
	}
	var err_ error

	var data_ CreateUserPersonalAccessTokenResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createWorkflowTrigger.
const createWorkflowTrigger_Operation = `
mutation createWorkflowTrigger ($input: CreateTriggerInput!) {
	createTrigger(input: $input) {
		id
	}
}
`

func CreateWorkflowTriggerMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateTriggerInput,
) (*CreateWorkflowTriggerResponse, error) {
	req_ := &graphql.Request{
		OpName: "createWorkflowTrigger",
		Query:  createWorkflowTrigger_Operation,
		Variables: &__createWorkflowTriggerInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateWorkflowTriggerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by currentUser.
const currentUser_Operation = `
query currentUser {
	currentUser {
		id
		name
		login
	}
}
`

func CurrentUserQuery(
	ctx_ context.Context,
	client_ graphql.Client,
) (*CurrentUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "currentUser",
		Query:  currentUser_Operation,
	}
	var err_ error

	var data_ CurrentUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteGroup.
const deleteGroup_Operation = `
mutation deleteGroup ($id: UUID!) {
	deleteGroup(id: $id)
}
`

func DeleteGroupMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*DeleteGroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteGroup",
		Query:  deleteGroup_Operation,
		Variables: &__deleteGroupInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DeleteGroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteProject.
const deleteProject_Operation = `
mutation deleteProject ($id: UUID!, $force: Boolean) {
	deleteProject(id: $id, force: $force)
}
`

func DeleteProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	force *bool,
) (*DeleteProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteProject",
		Query:  deleteProject_Operation,
		Variables: &__deleteProjectInput{
			Id:    id,
			Force: force,
		},
	}
	var err_ error

	var data_ DeleteProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteProjectAndResources.
const deleteProjectAndResources_Operation = `
mutation deleteProjectAndResources ($id: UUID!, $deleteOnFailure: Boolean) {
	deleteProjectAndResources(id: $id, deleteOnFailure: $deleteOnFailure)
}
`

func DeleteProjectAndResourcesMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	deleteOnFailure *bool,
) (*DeleteProjectAndResourcesResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteProjectAndResources",
		Query:  deleteProjectAndResources_Operation,
		Variables: &__deleteProjectAndResourcesInput{
			Id:              id,
			DeleteOnFailure: deleteOnFailure,
		},
	}
	var err_ error

	var data_ DeleteProjectAndResourcesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteProjectResources.
const deleteProjectResources_Operation = `
mutation deleteProjectResources ($id: UUID!) {
	deleteProjectResources(id: $id)
}
`

func DeleteProjectResourcesMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*DeleteProjectResourcesResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteProjectResources",
		Query:  deleteProjectResources_Operation,
		Variables: &__deleteProjectResourcesInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DeleteProjectResourcesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteSubGroup.
const deleteSubGroup_Operation = `
mutation deleteSubGroup ($id: UUID!) {
	deleteSubGroup(id: $id)
}
`

func DeleteSubGroupMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*DeleteSubGroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteSubGroup",
		Query:  deleteSubGroup_Operation,
		Variables: &__deleteSubGroupInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DeleteSubGroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteUserPersonalAccessToken.
const deleteUserPersonalAccessToken_Operation = `
mutation deleteUserPersonalAccessToken ($id: UUID!) {
	deletePersonalAccessToken(id: $id)
}
`

func DeleteUserPersonalAccessTokenMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*DeleteUserPersonalAccessTokenResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteUserPersonalAccessToken",
		Query:  deleteUserPersonalAccessToken_Operation,
		Variables: &__deleteUserPersonalAccessTokenInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DeleteUserPersonalAccessTokenResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteWorkflowTrigger.
const deleteWorkflowTrigger_Operation = `
mutation deleteWorkflowTrigger ($id: UUID!) {
	deleteTrigger(id: $id)
}
`

func DeleteWorkflowTriggerMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*DeleteWorkflowTriggerResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteWorkflowTrigger",
		Query:  deleteWorkflowTrigger_Operation,
		Variables: &__deleteWorkflowTriggerInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DeleteWorkflowTriggerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by duplicateProject.
const duplicateProject_Operation = `
mutation duplicateProject ($id: UUID!, $input: DuplicateProjectInput!) {
	duplicateProject(id: $id, input: $input) {
		id
		name
		group {
			id
			name
		}
		subGroup {
			id
			name
		}
	}
}
`

func DuplicateProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input DuplicateProjectInput,
) (*DuplicateProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "duplicateProject",
		Query:  duplicateProject_Operation,
		Variables: &__duplicateProjectInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ DuplicateProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ejectClusterComponent.
const ejectClusterComponent_Operation = `
mutation ejectClusterComponent ($clusterId: UUID!, $input: EjectClusterComponentInput!) {
	ejectClusterComponent(clusterId: $clusterId, input: $input) {
		name
		status
	}
}
`

func EjectClusterComponentMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	clusterId uuid.UUID,
	input EjectClusterComponentInput,
) (*EjectClusterComponentResponse, error) {
	req_ := &graphql.Request{
		OpName: "ejectClusterComponent",
		Query:  ejectClusterComponent_Operation,
		Variables: &__ejectClusterComponentInput{
			ClusterId: clusterId,
			Input:     input,
		},
	}
	var err_ error

	var data_ EjectClusterComponentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by generateDownloadableLogLinkForWorkflowRunStep.
const generateDownloadableLogLinkForWorkflowRunStep_Operation = `
mutation generateDownloadableLogLinkForWorkflowRunStep ($actionStepId: UUID!) {
	generateDownloadableLogLinkForWorkflowRunStep(actionStepId: $actionStepId)
}
`

func GenerateDownloadableLogLinkForWorkflowRunStepMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	actionStepId uuid.UUID,
) (*GenerateDownloadableLogLinkForWorkflowRunStepResponse, error) {
	req_ := &graphql.Request{
		OpName: "generateDownloadableLogLinkForWorkflowRunStep",
		Query:  generateDownloadableLogLinkForWorkflowRunStep_Operation,
		Variables: &__generateDownloadableLogLinkForWorkflowRunStepInput{
			ActionStepId: actionStepId,
		},
	}
	var err_ error

	var data_ GenerateDownloadableLogLinkForWorkflowRunStepResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by group.
const group_Operation = `
query group ($teamId: UUID!, $id: UUID!) {
	team(id: $teamId) {
		groups(input: {page:{first:1},filter:{id:{value:[$id]}}}) {
			nodes {
				id
				name
				envs {
					name
					value
				}
				createdAt
				updatedAt
			}
		}
	}
}
`

func GroupQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	id uuid.UUID,
) (*GroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "group",
		Query:  group_Operation,
		Variables: &__groupInput{
			TeamId: teamId,
			Id:     id,
		},
	}
	var err_ error

	var data_ GroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by groupSubGroups.
const groupSubGroups_Operation = `
query groupSubGroups ($teamId: UUID!, $groupId: UUID!) {
	team(id: $teamId) {
		groups(input: {page:{first:1},filter:{id:{value:[$groupId]}}}) {
			nodes {
				id
				subGroups {
					id
					name
					createdAt
					updatedAt
				}
			}
		}
	}
}
`

func GroupSubGroupsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	groupId uuid.UUID,
) (*GroupSubGroupsResponse, error) {
	req_ := &graphql.Request{
		OpName: "groupSubGroups",
		Query:  groupSubGroups_Operation,
		Variables: &__groupSubGroupsInput{
			TeamId:  teamId,
			GroupId: groupId,
		},
	}
	var err_ error

	var data_ GroupSubGroupsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by groups.
const groups_Operation = `
query groups ($teamId: UUID!, $input: GroupsInput!) {
	team(id: $teamId) {
		groups(input: $input) {
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			nodes {
				id
				name
				createdAt
				updatedAt
			}
		}
	}
}
`

func GroupsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	input GroupsInput,
) (*GroupsResponse, error) {
	req_ := &graphql.Request{
		OpName: "groups",
		Query:  groups_Operation,
		Variables: &__groupsInput{
			TeamId: teamId,
			Input:  input,
		},
	}
	var err_ error

	var data_ GroupsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by groupsWithSubgroups.
const groupsWithSubgroups_Operation = `
query groupsWithSubgroups ($teamId: UUID!) {
	team(id: $teamId) {
		id
		groups {
			nodes {
				id
				name
				subGroups {
					id
					name
				}
			}
		}
	}
}
`

func GroupsWithSubgroupsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
) (*GroupsWithSubgroupsResponse, error) {
	req_ := &graphql.Request{
		OpName: "groupsWithSubgroups",
		Query:  groupsWithSubgroups_Operation,
		Variables: &__groupsWithSubgroupsInput{
			TeamId: teamId,
		},
	}
	var err_ error

	var data_ GroupsWithSubgroupsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by insightsCloudsMetric.
const insightsCloudsMetric_Operation = `
query insightsCloudsMetric ($teamId: UUID!) {
	insights {
		cloud {
			unhealthyClouds(userId: $teamId)
		}
	}
}
`

func InsightsCloudsMetricQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
) (*InsightsCloudsMetricResponse, error) {
	req_ := &graphql.Request{
		OpName: "insightsCloudsMetric",
		Query:  insightsCloudsMetric_Operation,
		Variables: &__insightsCloudsMetricInput{
			TeamId: teamId,
		},
	}
	var err_ error

	var data_ InsightsCloudsMetricResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by insightsClustersMetric.
const insightsClustersMetric_Operation = `
query insightsClustersMetric ($teamId: UUID!) {
	insights {
		cloud {
			unreachableClusters(userId: $teamId)
		}
	}
}
`

func InsightsClustersMetricQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
) (*InsightsClustersMetricResponse, error) {
	req_ := &graphql.Request{
		OpName: "insightsClustersMetric",
		Query:  insightsClustersMetric_Operation,
		Variables: &__insightsClustersMetricInput{
			TeamId: teamId,
		},
	}
	var err_ error

	var data_ InsightsClustersMetricResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by jobList.
const jobList_Operation = `
query jobList ($teamId: UUID!, $projectId: UUID!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			jobs {
				... JobListItem
			}
		}
	}
}
fragment JobListItem on Job {
	id
	definition {
		jobName
	}
	runs(input: {filter:{},page:{first:0}}) {
		totalCount
	}
}
`

func JobListQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*JobListResponse, error) {
	req_ := &graphql.Request{
		OpName: "jobList",
		Query:  jobList_Operation,
		Variables: &__jobListInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ JobListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by jobRunDetail.
const jobRunDetail_Operation = `
query jobRunDetail ($id: UUID!, $teamId: UUID!) {
	team(id: $teamId) {
		id
		jobRun(id: $id) {
			... JobRunDetail
		}
	}
}
fragment JobRunDetail on JobRun {
	... JobRunListItem
	updatedAt
	command
	exitCode
	errorMessage
	definition {
		jobName
	}
}
fragment JobRunListItem on JobRun {
	id
	sequence
	createdAt
	state
}
`

func JobRunDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	teamId uuid.UUID,
) (*JobRunDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "jobRunDetail",
		Query:  jobRunDetail_Operation,
		Variables: &__jobRunDetailInput{
			Id:     id,
			TeamId: teamId,
		},
	}
	var err_ error

	var data_ JobRunDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by jobRunList.
const jobRunList_Operation = `
query jobRunList ($id: UUID!, $teamId: UUID!, $page: PageInput!) {
	team(id: $teamId) {
		id
		job(id: $id) {
			... JobDetailItem
		}
	}
}
fragment JobDetailItem on Job {
	id
	definition {
		jobName
	}
	runs(input: {filter:{},page:$page}) {
		totalCount
		pageInfo {
			hasNextPage
		}
		nodes {
			... JobRunListItem
		}
	}
}
fragment JobRunListItem on JobRun {
	id
	sequence
	createdAt
	state
}
`

func JobRunListQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	teamId uuid.UUID,
	page PageInput,
) (*JobRunListResponse, error) {
	req_ := &graphql.Request{
		OpName: "jobRunList",
		Query:  jobRunList_Operation,
		Variables: &__jobRunListInput{
			Id:     id,
			TeamId: teamId,
			Page:   page,
		},
	}
	var err_ error

	var data_ JobRunListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by jobRunLogs.
const jobRunLogs_Operation = `
query jobRunLogs ($id: UUID!, $teamId: UUID!) {
	team(id: $teamId) {
		id
		jobRun(id: $id) {
			... JobRunLogs
		}
	}
}
fragment JobRunLogs on JobRun {
	id
	logs {
		id
		completed
		expired
		entries {
			timestamp
			text
		}
	}
}
`

func JobRunLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	teamId uuid.UUID,
) (*JobRunLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "jobRunLogs",
		Query:  jobRunLogs_Operation,
		Variables: &__jobRunLogsInput{
			Id:     id,
			TeamId: teamId,
		},
	}
	var err_ error

	var data_ JobRunLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by linkProject.
const linkProject_Operation = `
mutation linkProject ($input: ProjectLinkInput!) {
	linkProject(input: $input) {
		id
	}
}
`

func LinkProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input ProjectLinkInput,
) (*LinkProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "linkProject",
		Query:  linkProject_Operation,
		Variables: &__linkProjectInput{
			Input: input,
		},
	}
	var err_ error

	var data_ LinkProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by observabilityConfig.
const observabilityConfig_Operation = `
query observabilityConfig ($teamId: UUID!, $projectId: UUID!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			observabilityConfig {
				selector {
					type
					namespace
					resourceName
					containerName
					labels {
						name
						value
					}
				}
			}
		}
	}
}
`

func ObservabilityConfigQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ObservabilityConfigResponse, error) {
	req_ := &graphql.Request{
		OpName: "observabilityConfig",
		Query:  observabilityConfig_Operation,
		Variables: &__observabilityConfigInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ObservabilityConfigResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectAvailableProviders.
const projectAvailableProviders_Operation = `
query projectAvailableProviders ($teamId: UUID!, $projectId: UUID!, $linkType: ProjectLinkType!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			availableProviders(type: $linkType) {
				... ProjectWithName
			}
		}
	}
}
fragment ProjectWithName on Project {
	id
	name
}
`

func ProjectAvailableProvidersQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	linkType ProjectLinkType,
) (*ProjectAvailableProvidersResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectAvailableProviders",
		Query:  projectAvailableProviders_Operation,
		Variables: &__projectAvailableProvidersInput{
			TeamId:    teamId,
			ProjectId: projectId,
			LinkType:  linkType,
		},
	}
	var err_ error

	var data_ ProjectAvailableProvidersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectClusters.
const projectClusters_Operation = `
query projectClusters ($teamId: UUID!, $projectId: UUID!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			... ProjectWithClusters
		}
	}
}
fragment ProjectWithClusters on Project {
	id
	clusters {
		... ClusterDetailV1
	}
}
fragment ClusterDetailV1 on Cluster {
	id
	displayName
	state
	connected
	cloudProvider
	createdAt
	updatedAt
	updatedAt
	createdAt
}
`

func ProjectClustersQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ProjectClustersResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectClusters",
		Query:  projectClusters_Operation,
		Variables: &__projectClustersInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ProjectClustersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectDeployDetail.
const projectDeployDetail_Operation = `
query projectDeployDetail ($teamId: UUID!, $deployId: UUID!) {
	team(id: $teamId) {
		id
		deploy(id: $deployId) {
			... ProjectDeployDetail
		}
	}
}
fragment ProjectDeployDetail on Deploy {
	id
	name
	runs {
		totalCount
		nodes {
			... ProjectDeployRunList
		}
	}
}
fragment ProjectDeployRunList on DeployRun {
	id
	sequence
	result {
		resources {
			totalCount
			nodes {
				__typename
				displayName
				externalId
				externalLink
				externalType
				... on ContainerResource {
					logs {
						id
						completed
						expired
						entries {
							text
							timestamp
						}
					}
				}
			}
		}
	}
}
`

func ProjectDeployDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	deployId uuid.UUID,
) (*ProjectDeployDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectDeployDetail",
		Query:  projectDeployDetail_Operation,
		Variables: &__projectDeployDetailInput{
			TeamId:   teamId,
			DeployId: deployId,
		},
	}
	var err_ error

	var data_ ProjectDeployDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectDeployRevisions.
const projectDeployRevisions_Operation = `
query projectDeployRevisions ($teamId: UUID!, $projectId: UUID!, $page: PageInput) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			deploys {
				nodes {
					id
					name
					configurationRevisions(page: $page) {
						totalCount
						pageInfo {
							hasNextPage
						}
						nodes {
							... RevisionDetailV1
						}
					}
				}
			}
		}
	}
}
fragment RevisionDetailV1 on RevisableEntity {
	revisionData
	revisionMetadata {
		id
		sequenceId
		description
		createdAt
		createdBy {
			id
			login
			name
			avatar
		}
		authorInfo {
			summary
			creatorDeleted
		}
	}
}
`

func ProjectDeployRevisionsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	page *PageInput,
) (*ProjectDeployRevisionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectDeployRevisions",
		Query:  projectDeployRevisions_Operation,
		Variables: &__projectDeployRevisionsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			Page:      page,
		},
	}
	var err_ error

	var data_ ProjectDeployRevisionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectDeployRunDetail.
const projectDeployRunDetail_Operation = `
query projectDeployRunDetail ($teamId: UUID!, $deployRunId: UUID!) {
	team(id: $teamId) {
		id
		deployRun(id: $deployRunId) {
			... ProjectDeployRunDetail
		}
	}
}
fragment ProjectDeployRunDetail on DeployRun {
	id
	sequence
	result {
		resources {
			totalCount
			nodes {
				__typename
				displayName
				externalId
			}
		}
	}
}
`

func ProjectDeployRunDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	deployRunId uuid.UUID,
) (*ProjectDeployRunDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectDeployRunDetail",
		Query:  projectDeployRunDetail_Operation,
		Variables: &__projectDeployRunDetailInput{
			TeamId:      teamId,
			DeployRunId: deployRunId,
		},
	}
	var err_ error

	var data_ ProjectDeployRunDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectDeploys.
const projectDeploys_Operation = `
query projectDeploys ($teamId: UUID!, $projectId: UUID!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			deploys {
				nodes {
					... ProjectDeployList
				}
			}
		}
	}
}
fragment ProjectDeployList on Deploy {
	id
	name
	runs(input: {first:1}) {
		totalCount
		nodes {
			id
			sequence
		}
	}
}
`

func ProjectDeploysQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ProjectDeploysResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectDeploys",
		Query:  projectDeploys_Operation,
		Variables: &__projectDeploysInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ProjectDeploysResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectDetail.
const projectDetail_Operation = `
query projectDetail ($teamId: UUID!, $projectId: UUID!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			... ProjectDetail
		}
	}
}
fragment ProjectDetail on Project {
	... ProjectInfo
	deploys {
		nodes {
			... DeployConfigurationDetail
		}
	}
	build {
		id
		definition {
			id
		}
	}
	blueprint {
		... ProjectBlueprintDetail
	}
	group {
		id
		name
	}
	subGroup {
		id
		name
	}
}
fragment ProjectInfo on Project {
	id
	name
	createdAt
	updatedAt
	status
	build {
		id
	}
	deploys {
		totalCount
	}
	workflow {
		id
		runs {
			nodes {
				... WorkflowRunDetail
			}
		}
	}
	jobs {
		id
	}
	blueprint {
		id
		type
	}
}
fragment DeployConfigurationDetail on Deploy {
	id
	name
	branchName
	configuration {
		id
		defaultWorkflowSteps
		requirePlanApproval
		variables {
			... DeployVariableDetail
		}
		kubernetes {
			blueprint {
				source {
					... ProjectSourceDetail
				}
				useKustomize
			}
			target {
				clusterId
				namespace
			}
			generator {
				containerRegistrySource {
					registryId
					registryUrl
					repository
					tag
					digest
				}
				appId
				branchName
				productionBranchName
				envs {
					id
					name
					value
					visible
					sealed
					source {
						type
					}
					createdAt
					updatedAt
				}
				appGeneratorVersion
				cpuRequest
				memoryRequest
				ephemeralStorage
				dedicated
				gpuRequest
				gpuType
				tpuType
				tpuTfVersion
				tpuCores
				replicas
				autoscaling {
					minReplicas
					maxReplicas
					coolDownPeriod
					spec
					triggers {
						type
						spec
					}
					kedaScaledObjectSpec
				}
				ports {
					port
					https
					grpc
					public
					protocol
					loadBalancer
				}
				staticIp
				hostNetwork
				endpoint
				defaultIngressDomain
				volumes {
					size
					mountPath
				}
				secretMounts {
					secretName
					mountPath
					readOnly
				}
				deployStrategy
				preStopSleep
				terminationGracePeriodSeconds
				startupProbe {
					command
					http {
						host
						port
						path
					}
					tcp {
						host
						port
					}
					initialDelaySeconds
					periodSeconds
					successThreshold
					failureThreshold
					timeoutSeconds
				}
				livenessProbe {
					command
					http {
						host
						port
						path
					}
					tcp {
						host
						port
					}
					initialDelaySeconds
					periodSeconds
					successThreshold
					failureThreshold
					timeoutSeconds
				}
				readinessProbe {
					command
					http {
						host
						port
						path
					}
					tcp {
						host
						port
					}
					initialDelaySeconds
					periodSeconds
					successThreshold
					failureThreshold
					timeoutSeconds
				}
				logShipperType
				betterstackToken
				datadogApmEnabled
				datadogHost
				datadogKey
				logDnaKey
				logzToken
				logzUrl
				syslogConfig
				dockerEntrypoint
				dockerCommand
				awsIamRole
				gcpServiceAccount
				serviceAccountName
				annotations
				serviceAnnotations
				nodeSelector
				podSpecPatch
				legacyRepo {
					id
					name
					appId
				}
			}
		}
		helm {
			blueprint {
				source {
					... ProjectSourceDetail
				}
			}
			target {
				clusterId
				namespace
				releaseName
			}
			values
		}
		terraform {
			blueprint {
				source {
					... ProjectSourceDetail
				}
				outputConfiguration {
					automatic {
						disabled
						excluded
						sensitive
					}
					customization
				}
				terraformVersion
			}
			target {
				moduleName
				stateBackend {
					s3Bucket {
						awsAccountId
						region
						bucketName
						key
					}
					gcsBucket {
						gcpAccountId
						location
						bucketName
						prefix
					}
				}
				provider {
					awsAccount {
						id
					}
					gcpAccount {
						id
					}
					doAccount {
						id
					}
					region
				}
			}
		}
		awsSam {
			target {
				awsAccountId
				awsRegion
				stackName
			}
			generator {
				envVars {
					id
					name
					value
					visible
					sealed
					source {
						type
					}
					createdAt
					updatedAt
				}
				runCommand
				serverlessMemory
				serverlessArch
				customDomainHost
				customDomainCertificateArn
				httpPort
				buildImage
			}
		}
		gcpCloudRun {
			target {
				gcpAccountId
				gcpRegion
			}
			generator {
				envVars {
					id
					name
					value
					visible
					sealed
					source {
						type
					}
					createdAt
					updatedAt
				}
				containerMemory
				name
				httpPort
				runCommand
				containerCpu
			}
		}
	}
}
fragment ProjectBlueprintDetail on Blueprint {
	id
	type
	configuration {
		... BlueprintConfigurationDetail
	}
}
fragment WorkflowRunDetail on WorkflowRun {
	... WorkflowRunListItem
	finishedAt
	steps {
		__typename
		... WorkflowRunStepDetail
	}
}
fragment DeployVariableDetail on DeployVariable {
	id
	specId
	name
	value
	valueString
	valueBoolean
	valueInt
	valueFloat
	valueJson
}
fragment ProjectSourceDetail on Source {
	git {
		repository
		ref
		path
		integration {
			githubInstallationId
			githubIntegrationId
			gitlabIntegrationId
		}
	}
	terraformModule {
		source
		version
		integration {
			git {
				githubInstallationId
			}
		}
	}
	helmRepository {
		repositoryUrl
		chart
		version
	}
	containerRegistry {
		registryId
		registryUrl
		repository
		tag
		digest
	}
}
fragment BlueprintConfigurationDetail on BlueprintConfiguration {
	slug
	displayName
	published
	description
	tags
	logoUrl
	richInputSchema
}
fragment WorkflowRunListItem on WorkflowRun {
	id
	sequence
	status
	createdAt
	steps {
		__typename
		id
		action
		dependsOn {
			__typename
			id
		}
		status
		sequenceNumber
		createdAt
		updatedAt
		executionId
		executionType
		... on BuildRunStep {
			outputs {
				id
				image
			}
		}
		... on DeployRunStep {
			workflowRun {
				id
				workflowId
				sequence
				status
				createdAt
				steps {
					__typename
					id
					action
					dependsOn {
						__typename
						id
					}
					status
					sequenceNumber
					createdAt
					updatedAt
					executionId
					executionType
				}
			}
		}
	}
}
fragment WorkflowRunStepDetail on WorkflowRunStep {
	id
	action
	dependsOn {
		__typename
		id
	}
	status
	sequenceNumber
	createdAt
	updatedAt
	executionId
	executionType
	executionError
	... on BuildRunStep {
		outputs {
			id
			image
		}
	}
	... on DeployRunStep {
		workflowRun {
			id
			workflowId
			sequence
			status
			createdAt
			steps {
				__typename
				id
				action
				dependsOn {
					__typename
					id
				}
				status
				sequenceNumber
				createdAt
				updatedAt
				executionId
				executionType
				executionError
			}
		}
	}
	... on ClusterPrecheckStep {
		cluster {
			... ClusterDetailV1
		}
	}
}
fragment ClusterDetailV1 on Cluster {
	id
	displayName
	state
	connected
	cloudProvider
	createdAt
	updatedAt
	updatedAt
	createdAt
}
`

func ProjectDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ProjectDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectDetail",
		Query:  projectDetail_Operation,
		Variables: &__projectDetailInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ProjectDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectInfo.
const projectInfo_Operation = `
query projectInfo ($teamId: UUID!, $projectId: UUID!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			... ProjectInfo
		}
	}
}
fragment ProjectInfo on Project {
	id
	name
	createdAt
	updatedAt
	status
	build {
		id
	}
	deploys {
		totalCount
	}
	workflow {
		id
		runs {
			nodes {
				... WorkflowRunDetail
			}
		}
	}
	jobs {
		id
	}
	blueprint {
		id
		type
	}
}
fragment WorkflowRunDetail on WorkflowRun {
	... WorkflowRunListItem
	finishedAt
	steps {
		__typename
		... WorkflowRunStepDetail
	}
}
fragment WorkflowRunListItem on WorkflowRun {
	id
	sequence
	status
	createdAt
	steps {
		__typename
		id
		action
		dependsOn {
			__typename
			id
		}
		status
		sequenceNumber
		createdAt
		updatedAt
		executionId
		executionType
		... on BuildRunStep {
			outputs {
				id
				image
			}
		}
		... on DeployRunStep {
			workflowRun {
				id
				workflowId
				sequence
				status
				createdAt
				steps {
					__typename
					id
					action
					dependsOn {
						__typename
						id
					}
					status
					sequenceNumber
					createdAt
					updatedAt
					executionId
					executionType
				}
			}
		}
	}
}
fragment WorkflowRunStepDetail on WorkflowRunStep {
	id
	action
	dependsOn {
		__typename
		id
	}
	status
	sequenceNumber
	createdAt
	updatedAt
	executionId
	executionType
	executionError
	... on BuildRunStep {
		outputs {
			id
			image
		}
	}
	... on DeployRunStep {
		workflowRun {
			id
			workflowId
			sequence
			status
			createdAt
			steps {
				__typename
				id
				action
				dependsOn {
					__typename
					id
				}
				status
				sequenceNumber
				createdAt
				updatedAt
				executionId
				executionType
				executionError
			}
		}
	}
	... on ClusterPrecheckStep {
		cluster {
			... ClusterDetailV1
		}
	}
}
fragment ClusterDetailV1 on Cluster {
	id
	displayName
	state
	connected
	cloudProvider
	createdAt
	updatedAt
	updatedAt
	createdAt
}
`

func ProjectInfoQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ProjectInfoResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectInfo",
		Query:  projectInfo_Operation,
		Variables: &__projectInfoInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ProjectInfoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectLinkedProjects.
const projectLinkedProjects_Operation = `
query projectLinkedProjects ($teamId: UUID!, $projectId: UUID!, $linkType: ProjectLinkType!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			linkedProjects(type: $linkType) {
				nodes {
					... ProjectLinkDetail
				}
			}
		}
	}
}
fragment ProjectLinkDetail on ProjectLink {
	id
	project {
		... ProjectWithName
	}
	provider {
		... ProjectWithName
	}
	linkType
	envPrefix
	envs {
		name
		value
	}
}
fragment ProjectWithName on Project {
	id
	name
}
`

func ProjectLinkedProjectsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	linkType ProjectLinkType,
) (*ProjectLinkedProjectsResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectLinkedProjects",
		Query:  projectLinkedProjects_Operation,
		Variables: &__projectLinkedProjectsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			LinkType:  linkType,
		},
	}
	var err_ error

	var data_ ProjectLinkedProjectsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectOutput.
const projectOutput_Operation = `
query projectOutput ($teamId: UUID!, $projectId: UUID!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			... ProjectOutput
		}
	}
}
fragment ProjectOutput on Project {
	output {
		entries {
			... OutputEntryDetail
		}
	}
}
fragment OutputEntryDetail on ProjectOutputEntry {
	displayName
	name
	type
	value
}
`

func ProjectOutputQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ProjectOutputResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectOutput",
		Query:  projectOutput_Operation,
		Variables: &__projectOutputInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ProjectOutputResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectOutputs.
const projectOutputs_Operation = `
query projectOutputs ($teamId: UUID!, $projectId: UUID!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			status
			connector(type: DATABASE_CONNECTION) {
				type
				fields {
					type
					name
					displayName
					value
				}
			}
			workflow {
				id
			}
		}
	}
}
`

func ProjectOutputsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ProjectOutputsResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectOutputs",
		Query:  projectOutputs_Operation,
		Variables: &__projectOutputsInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ProjectOutputsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectStatusOnly.
const projectStatusOnly_Operation = `
query projectStatusOnly ($teamId: UUID!, $projectId: UUID!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			status
		}
	}
}
`

func ProjectStatusOnlyQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ProjectStatusOnlyResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectStatusOnly",
		Query:  projectStatusOnly_Operation,
		Variables: &__projectStatusOnlyInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ProjectStatusOnlyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectsCount.
const projectsCount_Operation = `
query projectsCount ($teamId: UUID!) {
	team(id: $teamId) {
		id
		projects {
			totalCount
		}
	}
}
`

func ProjectsCountQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
) (*ProjectsCountResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectsCount",
		Query:  projectsCount_Operation,
		Variables: &__projectsCountInput{
			TeamId: teamId,
		},
	}
	var err_ error

	var data_ ProjectsCountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectsWithBlueprint.
const projectsWithBlueprint_Operation = `
query projectsWithBlueprint ($teamId: UUID!) {
	team(id: $teamId) {
		id
		projects {
			nodes {
				... ProjectWithBlueprint
			}
		}
	}
}
fragment ProjectWithBlueprint on Project {
	id
	blueprint {
		id
		type
		configuration {
			slug
			logoUrl
		}
	}
}
`

func ProjectsWithBlueprintQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
) (*ProjectsWithBlueprintResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectsWithBlueprint",
		Query:  projectsWithBlueprint_Operation,
		Variables: &__projectsWithBlueprintInput{
			TeamId: teamId,
		},
	}
	var err_ error

	var data_ ProjectsWithBlueprintResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectsWithDeploymentTimes.
const projectsWithDeploymentTimes_Operation = `
query projectsWithDeploymentTimes ($teamId: UUID!, $input: ProjectsInput!) {
	team(id: $teamId) {
		id
		projects(input: $input) {
			nodes {
				... ProjectWithDeploymentTime
			}
		}
	}
}
fragment ProjectWithDeploymentTime on Project {
	id
	deploymentTimestamps {
		lastUpdatedAt
	}
	updatedAt
}
`

func ProjectsWithDeploymentTimesQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	input ProjectsInput,
) (*ProjectsWithDeploymentTimesResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectsWithDeploymentTimes",
		Query:  projectsWithDeploymentTimes_Operation,
		Variables: &__projectsWithDeploymentTimesInput{
			TeamId: teamId,
			Input:  input,
		},
	}
	var err_ error

	var data_ ProjectsWithDeploymentTimesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectsWithStatus.
const projectsWithStatus_Operation = `
query projectsWithStatus ($teamId: UUID!, $input: ProjectsInput!) {
	team(id: $teamId) {
		id
		projects(input: $input) {
			nodes {
				... ProjectWithStatus
			}
		}
	}
}
fragment ProjectWithStatus on Project {
	id
	status
}
`

func ProjectsWithStatusQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	input ProjectsInput,
) (*ProjectsWithStatusResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectsWithStatus",
		Query:  projectsWithStatus_Operation,
		Variables: &__projectsWithStatusInput{
			TeamId: teamId,
			Input:  input,
		},
	}
	var err_ error

	var data_ ProjectsWithStatusResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by resourceLogs.
const resourceLogs_Operation = `
query resourceLogs ($teamId: UUID!, $resourceId: UUID!) {
	team(id: $teamId) {
		id
		resource(id: $resourceId) {
			__typename
			... ResourceLogs
		}
	}
}
fragment ResourceLogs on Resource {
	externalId
	externalType
	externalLink
	displayName
	status
	... on ContainerResource {
		logs {
			id
			completed
			expired
			entries {
				text
				timestamp
			}
		}
	}
}
`

func ResourceLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	resourceId uuid.UUID,
) (*ResourceLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "resourceLogs",
		Query:  resourceLogs_Operation,
		Variables: &__resourceLogsInput{
			TeamId:     teamId,
			ResourceId: resourceId,
		},
	}
	var err_ error

	var data_ ResourceLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by resourcesWithLogs.
const resourcesWithLogs_Operation = `
query resourcesWithLogs ($teamId: UUID!, $projectId: UUID!, $clusterId: UUID!, $selector: ObservabilityResourceSelectorInput) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			resources(clusterId: $clusterId, selector: $selector) {
				... CloudResource
				resources {
					... CloudResource
					resources {
						... CloudResource
					}
				}
				log(clusterId: $clusterId, projectId: $projectId) {
					name
					entries {
						text
						timestamp
					}
				}
			}
		}
	}
}
fragment CloudResource on CloudResource {
	name
	status
	type
	createdAt
	owners {
		name
		type
	}
	events {
		type
		reason
		message
		action
		occurredAt
		firstOccurrenceAt
		lastOccurrenceAt
		count
	}
}
`

func ResourcesWithLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	clusterId uuid.UUID,
	selector *ObservabilityResourceSelectorInput,
) (*ResourcesWithLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "resourcesWithLogs",
		Query:  resourcesWithLogs_Operation,
		Variables: &__resourcesWithLogsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			ClusterId: clusterId,
			Selector:  selector,
		},
	}
	var err_ error

	var data_ ResourcesWithLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by resourcesWithMetrics.
const resourcesWithMetrics_Operation = `
query resourcesWithMetrics ($teamId: UUID!, $projectId: UUID!, $clusterId: UUID!, $metricTypes: [MetricType!]!, $selector: ObservabilityResourceSelectorInput) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			resources(clusterId: $clusterId, selector: $selector) {
				... CloudResource
				resources {
					... CloudResource
					resources {
						... CloudResource
					}
				}
				metric(clusterId: $clusterId, projectId: $projectId, types: $metricTypes) {
					... MetricStreamV1
				}
			}
		}
	}
}
fragment CloudResource on CloudResource {
	name
	status
	type
	createdAt
	owners {
		name
		type
	}
	events {
		type
		reason
		message
		action
		occurredAt
		firstOccurrenceAt
		lastOccurrenceAt
		count
	}
}
fragment MetricStreamV1 on MetricStream {
	type
	query
	annotations {
		type
		direction
		function
		label
		value
	}
	labels {
		label
		value
	}
	entries {
		value
		timestamp
	}
}
`

func ResourcesWithMetricsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	clusterId uuid.UUID,
	metricTypes []MetricType,
	selector *ObservabilityResourceSelectorInput,
) (*ResourcesWithMetricsResponse, error) {
	req_ := &graphql.Request{
		OpName: "resourcesWithMetrics",
		Query:  resourcesWithMetrics_Operation,
		Variables: &__resourcesWithMetricsInput{
			TeamId:      teamId,
			ProjectId:   projectId,
			ClusterId:   clusterId,
			MetricTypes: metricTypes,
			Selector:    selector,
		},
	}
	var err_ error

	var data_ ResourcesWithMetricsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by subGroup.
const subGroup_Operation = `
query subGroup ($teamId: UUID!, $groupId: UUID!, $id: UUID!) {
	team(id: $teamId) {
		groups(input: {page:{first:1},filter:{id:{value:[$groupId]}}}) {
			nodes {
				id
				subGroup(id: $id) {
					id
					name
					envs {
						name
						value
					}
					createdAt
					updatedAt
				}
			}
		}
	}
}
`

func SubGroupQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	groupId uuid.UUID,
	id uuid.UUID,
) (*SubGroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "subGroup",
		Query:  subGroup_Operation,
		Variables: &__subGroupInput{
			TeamId:  teamId,
			GroupId: groupId,
			Id:      id,
		},
	}
	var err_ error

	var data_ SubGroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by submitWorkflowRun.
const submitWorkflowRun_Operation = `
mutation submitWorkflowRun ($workflowId: UUID!, $definition: WorkflowRunDefinitionInput) {
	submitWorkflow(input: {workflowId:$workflowId,definition:$definition}) {
		id
	}
}
`

func SubmitWorkflowRunMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	workflowId uuid.UUID,
	definition *WorkflowRunDefinitionInput,
) (*SubmitWorkflowRunResponse, error) {
	req_ := &graphql.Request{
		OpName: "submitWorkflowRun",
		Query:  submitWorkflowRun_Operation,
		Variables: &__submitWorkflowRunInput{
			WorkflowId: workflowId,
			Definition: definition,
		},
	}
	var err_ error

	var data_ SubmitWorkflowRunResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by team.
const team_Operation = `
query team ($id: UUID!) {
	team(id: $id) {
		id
		name
	}
}
`

func TeamQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*TeamResponse, error) {
	req_ := &graphql.Request{
		OpName: "team",
		Query:  team_Operation,
		Variables: &__teamInput{
			Id: id,
		},
	}
	var err_ error

	var data_ TeamResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by unlinkProject.
const unlinkProject_Operation = `
mutation unlinkProject ($id: UUID!) {
	unlinkProject(id: $id)
}
`

func UnlinkProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*UnlinkProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "unlinkProject",
		Query:  unlinkProject_Operation,
		Variables: &__unlinkProjectInput{
			Id: id,
		},
	}
	var err_ error

	var data_ UnlinkProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateDeploy.
const updateDeploy_Operation = `
mutation updateDeploy ($id: UUID!, $input: UpdateDeployInput!) {
	updateDeploy(id: $id, input: $input) {
		id
	}
}
`

func UpdateDeployMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateDeployInput,
) (*UpdateDeployResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateDeploy",
		Query:  updateDeploy_Operation,
		Variables: &__updateDeployInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateDeployResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateGroup.
const updateGroup_Operation = `
mutation updateGroup ($id: UUID!, $input: UpdateGroupInput!) {
	updateGroup(id: $id, input: $input) {
		id
		name
		envs {
			name
			value
		}
		createdAt
		updatedAt
	}
}
`

func UpdateGroupMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateGroupInput,
) (*UpdateGroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateGroup",
		Query:  updateGroup_Operation,
		Variables: &__updateGroupInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateGroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateProject.
const updateProject_Operation = `
mutation updateProject ($id: UUID!, $input: UpdateProjectInput!) {
	updateProject(id: $id, input: $input) {
		id
		name
	}
}
`

func UpdateProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateProjectInput,
) (*UpdateProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateProject",
		Query:  updateProject_Operation,
		Variables: &__updateProjectInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateSubGroup.
const updateSubGroup_Operation = `
mutation updateSubGroup ($id: UUID!, $input: UpdateSubGroupInput!) {
	updateSubGroup(id: $id, input: $input) {
		id
		name
		envs {
			name
			value
		}
		createdAt
		updatedAt
	}
}
`

func UpdateSubGroupMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateSubGroupInput,
) (*UpdateSubGroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateSubGroup",
		Query:  updateSubGroup_Operation,
		Variables: &__updateSubGroupInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateSubGroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateWorkflow.
const updateWorkflow_Operation = `
mutation updateWorkflow ($id: UUID!, $input: UpdateWorkflowInput!) {
	updateWorkflow(id: $id, input: $input) {
		id
	}
}
`

func UpdateWorkflowMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateWorkflowInput,
) (*UpdateWorkflowResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateWorkflow",
		Query:  updateWorkflow_Operation,
		Variables: &__updateWorkflowInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateWorkflowResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateWorkflowTrigger.
const updateWorkflowTrigger_Operation = `
mutation updateWorkflowTrigger ($id: UUID!, $input: UpdateTriggerInput!) {
	updateTrigger(id: $id, input: $input) {
		id
	}
}
`

func UpdateWorkflowTriggerMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateTriggerInput,
) (*UpdateWorkflowTriggerResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateWorkflowTrigger",
		Query:  updateWorkflowTrigger_Operation,
		Variables: &__updateWorkflowTriggerInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateWorkflowTriggerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userPersonalAccessTokens.
const userPersonalAccessTokens_Operation = `
query userPersonalAccessTokens ($id: UUID!) {
	user(id: $id) {
		id
		personalAccessTokens {
			id
			name
			token
			createdAt
		}
	}
}
`

func UserPersonalAccessTokensQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*UserPersonalAccessTokensResponse, error) {
	req_ := &graphql.Request{
		OpName: "userPersonalAccessTokens",
		Query:  userPersonalAccessTokens_Operation,
		Variables: &__userPersonalAccessTokensInput{
			Id: id,
		},
	}
	var err_ error

	var data_ UserPersonalAccessTokensResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by workflowDetail.
const workflowDetail_Operation = `
query workflowDetail ($teamId: UUID!, $projectId: UUID!) {
	team(id: $teamId) {
		project(id: $projectId) {
			workflow {
				... WorkflowDetail
			}
		}
	}
}
fragment WorkflowDetail on Workflow {
	id
	steps {
		action
		sequenceNumber
		disabled
	}
	triggers {
		totalCount
		nodes {
			id
			action
			events
			configuration {
				event {
					git {
						repoId
						repoBranchName
						repoOwner
						repoName
						githubConnectionId
					}
				}
				action {
					workflowId
				}
			}
		}
	}
}
`

func WorkflowDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*WorkflowDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "workflowDetail",
		Query:  workflowDetail_Operation,
		Variables: &__workflowDetailInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ WorkflowDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by workflowRunDetail.
const workflowRunDetail_Operation = `
query workflowRunDetail ($teamId: UUID!, $projectId: UUID!, $runId: UUID!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			workflow {
				id
				run(id: $runId) {
					... WorkflowRunDetail
				}
			}
		}
	}
}
fragment WorkflowRunDetail on WorkflowRun {
	... WorkflowRunListItem
	finishedAt
	steps {
		__typename
		... WorkflowRunStepDetail
	}
}
fragment WorkflowRunListItem on WorkflowRun {
	id
	sequence
	status
	createdAt
	steps {
		__typename
		id
		action
		dependsOn {
			__typename
			id
		}
		status
		sequenceNumber
		createdAt
		updatedAt
		executionId
		executionType
		... on BuildRunStep {
			outputs {
				id
				image
			}
		}
		... on DeployRunStep {
			workflowRun {
				id
				workflowId
				sequence
				status
				createdAt
				steps {
					__typename
					id
					action
					dependsOn {
						__typename
						id
					}
					status
					sequenceNumber
					createdAt
					updatedAt
					executionId
					executionType
				}
			}
		}
	}
}
fragment WorkflowRunStepDetail on WorkflowRunStep {
	id
	action
	dependsOn {
		__typename
		id
	}
	status
	sequenceNumber
	createdAt
	updatedAt
	executionId
	executionType
	executionError
	... on BuildRunStep {
		outputs {
			id
			image
		}
	}
	... on DeployRunStep {
		workflowRun {
			id
			workflowId
			sequence
			status
			createdAt
			steps {
				__typename
				id
				action
				dependsOn {
					__typename
					id
				}
				status
				sequenceNumber
				createdAt
				updatedAt
				executionId
				executionType
				executionError
			}
		}
	}
	... on ClusterPrecheckStep {
		cluster {
			... ClusterDetailV1
		}
	}
}
fragment ClusterDetailV1 on Cluster {
	id
	displayName
	state
	connected
	cloudProvider
	createdAt
	updatedAt
	updatedAt
	createdAt
}
`

func WorkflowRunDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	runId uuid.UUID,
) (*WorkflowRunDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "workflowRunDetail",
		Query:  workflowRunDetail_Operation,
		Variables: &__workflowRunDetailInput{
			TeamId:    teamId,
			ProjectId: projectId,
			RunId:     runId,
		},
	}
	var err_ error

	var data_ WorkflowRunDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by workflowRunDetailLogs.
const workflowRunDetailLogs_Operation = `
query workflowRunDetailLogs ($teamId: UUID!, $projectId: UUID!, $runId: UUID!, $stepId: UUID!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			workflow {
				id
				run(id: $runId) {
					id
					step(id: $stepId) {
						__typename
						... on JobRunStep {
							logs {
								id
								completed
								expired
								entries {
									timestamp
									text
								}
							}
						}
						... on BuildRunStep {
							logs {
								id
								completed
								expired
								entries {
									timestamp
									text
								}
							}
						}
					}
				}
			}
		}
	}
}
`

func WorkflowRunDetailLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	runId uuid.UUID,
	stepId uuid.UUID,
) (*WorkflowRunDetailLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "workflowRunDetailLogs",
		Query:  workflowRunDetailLogs_Operation,
		Variables: &__workflowRunDetailLogsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			RunId:     runId,
			StepId:    stepId,
		},
	}
	var err_ error

	var data_ WorkflowRunDetailLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by workflowRunStepNestedDetail.
const workflowRunStepNestedDetail_Operation = `
query workflowRunStepNestedDetail ($teamId: UUID!, $projectId: UUID!, $runId: UUID!, $stepId: UUID!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			workflow {
				id
				run(id: $runId) {
					id
					step(id: $stepId) {
						__typename
						id
						... on DeployRunStep {
							workflowRun {
								id
								workflowId
								sequence
								status
								createdAt
								steps {
									__typename
									id
									action
									dependsOn {
										__typename
										id
									}
									status
									sequenceNumber
									createdAt
									updatedAt
									executionId
									executionType
									executionError
								}
							}
						}
						... on DestroyRunStep {
							workflowRun {
								id
								workflowId
								sequence
								status
								createdAt
								steps {
									__typename
									id
									action
									dependsOn {
										__typename
										id
									}
									status
									sequenceNumber
									createdAt
									updatedAt
									executionId
									executionType
									executionError
								}
							}
						}
					}
				}
			}
		}
	}
}
`

func WorkflowRunStepNestedDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	runId uuid.UUID,
	stepId uuid.UUID,
) (*WorkflowRunStepNestedDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "workflowRunStepNestedDetail",
		Query:  workflowRunStepNestedDetail_Operation,
		Variables: &__workflowRunStepNestedDetailInput{
			TeamId:    teamId,
			ProjectId: projectId,
			RunId:     runId,
			StepId:    stepId,
		},
	}
	var err_ error

	var data_ WorkflowRunStepNestedDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by workflowRunStepNestedDetailLogs.
const workflowRunStepNestedDetailLogs_Operation = `
query workflowRunStepNestedDetailLogs ($teamId: UUID!, $projectId: UUID!, $runId: UUID!, $stepId: UUID!, $actionStepId: UUID!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			workflow {
				id
				run(id: $runId) {
					id
					step(id: $stepId) {
						__typename
						id
						... on DeployRunStep {
							workflowRun {
								id
								sequence
								status
								createdAt
								step(id: $actionStepId) {
									__typename
									id
									... on JobRunStep {
										logs {
											id
											completed
											expired
											entries {
												timestamp
												text
											}
										}
									}
								}
							}
						}
						... on DestroyRunStep {
							workflowRun {
								id
								sequence
								status
								createdAt
								step(id: $actionStepId) {
									__typename
									id
									... on JobRunStep {
										logs {
											id
											completed
											expired
											entries {
												timestamp
												text
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
`

func WorkflowRunStepNestedDetailLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	runId uuid.UUID,
	stepId uuid.UUID,
	actionStepId uuid.UUID,
) (*WorkflowRunStepNestedDetailLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "workflowRunStepNestedDetailLogs",
		Query:  workflowRunStepNestedDetailLogs_Operation,
		Variables: &__workflowRunStepNestedDetailLogsInput{
			TeamId:       teamId,
			ProjectId:    projectId,
			RunId:        runId,
			StepId:       stepId,
			ActionStepId: actionStepId,
		},
	}
	var err_ error

	var data_ WorkflowRunStepNestedDetailLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by workflowRuns.
const workflowRuns_Operation = `
query workflowRuns ($teamId: UUID!, $projectId: UUID!, $page: PageInput!) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			workflow {
				id
				runs(input: {page:$page,filter:{}}) {
					totalCount
					pageInfo {
						hasNextPage
					}
					nodes {
						... WorkflowRunListItem
					}
				}
			}
		}
	}
}
fragment WorkflowRunListItem on WorkflowRun {
	id
	sequence
	status
	createdAt
	steps {
		__typename
		id
		action
		dependsOn {
			__typename
			id
		}
		status
		sequenceNumber
		createdAt
		updatedAt
		executionId
		executionType
		... on BuildRunStep {
			outputs {
				id
				image
			}
		}
		... on DeployRunStep {
			workflowRun {
				id
				workflowId
				sequence
				status
				createdAt
				steps {
					__typename
					id
					action
					dependsOn {
						__typename
						id
					}
					status
					sequenceNumber
					createdAt
					updatedAt
					executionId
					executionType
				}
			}
		}
	}
}
`

func WorkflowRunsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	page PageInput,
) (*WorkflowRunsResponse, error) {
	req_ := &graphql.Request{
		OpName: "workflowRuns",
		Query:  workflowRuns_Operation,
		Variables: &__workflowRunsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			Page:      page,
		},
	}
	var err_ error

	var data_ WorkflowRunsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
