// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package v1

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

// abortWorkflowRunResponse is returned by abortWorkflowRun on success.
type AbortWorkflowRunResponse struct {
	AbortWorkflowRun bool `json:"abortWorkflowRun"`
}

// GetAbortWorkflowRun returns AbortWorkflowRunResponse.AbortWorkflowRun, and is useful for accessing the field via an interface.
func (v *AbortWorkflowRunResponse) GetAbortWorkflowRun() bool { return v.AbortWorkflowRun }

type ActionTriggerConfigurationInput struct {
	WorkflowId uuid.UUID `json:"workflowId"`
}

// GetWorkflowId returns ActionTriggerConfigurationInput.WorkflowId, and is useful for accessing the field via an interface.
func (v *ActionTriggerConfigurationInput) GetWorkflowId() uuid.UUID { return v.WorkflowId }

// approveWorkflowRunStepResponse is returned by approveWorkflowRunStep on success.
type ApproveWorkflowRunStepResponse struct {
	ApproveWorkflowRunStep bool `json:"approveWorkflowRunStep"`
}

// GetApproveWorkflowRunStep returns ApproveWorkflowRunStepResponse.ApproveWorkflowRunStep, and is useful for accessing the field via an interface.
func (v *ApproveWorkflowRunStepResponse) GetApproveWorkflowRunStep() bool {
	return v.ApproveWorkflowRunStep
}

type AutoscalingDataInput struct {
	MinReplicas          int                       `json:"minReplicas"`
	MaxReplicas          int                       `json:"maxReplicas"`
	CoolDownPeriod       int                       `json:"coolDownPeriod"`
	Spec                 string                    `json:"spec"`
	Triggers             []AutoscalingTriggerInput `json:"triggers"`
	KedaScaledObjectSpec string                    `json:"kedaScaledObjectSpec"`
}

// GetMinReplicas returns AutoscalingDataInput.MinReplicas, and is useful for accessing the field via an interface.
func (v *AutoscalingDataInput) GetMinReplicas() int { return v.MinReplicas }

// GetMaxReplicas returns AutoscalingDataInput.MaxReplicas, and is useful for accessing the field via an interface.
func (v *AutoscalingDataInput) GetMaxReplicas() int { return v.MaxReplicas }

// GetCoolDownPeriod returns AutoscalingDataInput.CoolDownPeriod, and is useful for accessing the field via an interface.
func (v *AutoscalingDataInput) GetCoolDownPeriod() int { return v.CoolDownPeriod }

// GetSpec returns AutoscalingDataInput.Spec, and is useful for accessing the field via an interface.
func (v *AutoscalingDataInput) GetSpec() string { return v.Spec }

// GetTriggers returns AutoscalingDataInput.Triggers, and is useful for accessing the field via an interface.
func (v *AutoscalingDataInput) GetTriggers() []AutoscalingTriggerInput { return v.Triggers }

// GetKedaScaledObjectSpec returns AutoscalingDataInput.KedaScaledObjectSpec, and is useful for accessing the field via an interface.
func (v *AutoscalingDataInput) GetKedaScaledObjectSpec() string { return v.KedaScaledObjectSpec }

type AutoscalingTriggerInput struct {
	Type string `json:"type"`
	Spec string `json:"spec"`
}

// GetType returns AutoscalingTriggerInput.Type, and is useful for accessing the field via an interface.
func (v *AutoscalingTriggerInput) GetType() string { return v.Type }

// GetSpec returns AutoscalingTriggerInput.Spec, and is useful for accessing the field via an interface.
func (v *AutoscalingTriggerInput) GetSpec() string { return v.Spec }

type AwsSamGeneratorConfigurationInput struct {
	EnvVars                    []EnvVarInput `json:"envVars"`
	RunCommand                 string        `json:"runCommand"`
	ServerlessMemory           int           `json:"serverlessMemory"`
	ServerlessArch             string        `json:"serverlessArch"`
	CustomDomainHost           string        `json:"customDomainHost"`
	CustomDomainCertificateArn string        `json:"customDomainCertificateArn"`
	HttpPort                   string        `json:"httpPort"`
	BuildImage                 string        `json:"buildImage"`
}

// GetEnvVars returns AwsSamGeneratorConfigurationInput.EnvVars, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetEnvVars() []EnvVarInput { return v.EnvVars }

// GetRunCommand returns AwsSamGeneratorConfigurationInput.RunCommand, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetRunCommand() string { return v.RunCommand }

// GetServerlessMemory returns AwsSamGeneratorConfigurationInput.ServerlessMemory, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetServerlessMemory() int { return v.ServerlessMemory }

// GetServerlessArch returns AwsSamGeneratorConfigurationInput.ServerlessArch, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetServerlessArch() string { return v.ServerlessArch }

// GetCustomDomainHost returns AwsSamGeneratorConfigurationInput.CustomDomainHost, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetCustomDomainHost() string { return v.CustomDomainHost }

// GetCustomDomainCertificateArn returns AwsSamGeneratorConfigurationInput.CustomDomainCertificateArn, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetCustomDomainCertificateArn() string {
	return v.CustomDomainCertificateArn
}

// GetHttpPort returns AwsSamGeneratorConfigurationInput.HttpPort, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetHttpPort() string { return v.HttpPort }

// GetBuildImage returns AwsSamGeneratorConfigurationInput.BuildImage, and is useful for accessing the field via an interface.
func (v *AwsSamGeneratorConfigurationInput) GetBuildImage() string { return v.BuildImage }

type AwsSamTargetConfigurationInput struct {
	AwsAccountId uuid.UUID `json:"awsAccountId"`
	AwsRegion    string    `json:"awsRegion"`
	StackName    string    `json:"stackName"`
}

// GetAwsAccountId returns AwsSamTargetConfigurationInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *AwsSamTargetConfigurationInput) GetAwsAccountId() uuid.UUID { return v.AwsAccountId }

// GetAwsRegion returns AwsSamTargetConfigurationInput.AwsRegion, and is useful for accessing the field via an interface.
func (v *AwsSamTargetConfigurationInput) GetAwsRegion() string { return v.AwsRegion }

// GetStackName returns AwsSamTargetConfigurationInput.StackName, and is useful for accessing the field via an interface.
func (v *AwsSamTargetConfigurationInput) GetStackName() string { return v.StackName }

// BlueprintConfigurationDetail includes the GraphQL fields of BlueprintConfiguration requested by the fragment BlueprintConfigurationDetail.
type BlueprintConfigurationDetail struct {
	// An identifier for this blueprint, unique within the owner's namespace.
	Slug string `json:"slug"`
	// A display name for this blueprint.
	DisplayName string `json:"displayName"`
	// Whether this blueprint is currently available to be used by projects. Does not affect existing projects.
	Published bool `json:"published"`
	// A description of the purpose and behavior of this blueprint.
	Description string `json:"description"`
	// Relevant classifications for this blueprint.
	Tags []string `json:"tags"`
	// A url for a logo image.
	LogoUrl string `json:"logoUrl"`
	// A schema for rich input widgets. Used to generate forms which capture the
	// necessary configuration for instantiating a project from this blueprint.
	RichInputSchema string `json:"richInputSchema"`
}

// GetSlug returns BlueprintConfigurationDetail.Slug, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetSlug() string { return v.Slug }

// GetDisplayName returns BlueprintConfigurationDetail.DisplayName, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetDisplayName() string { return v.DisplayName }

// GetPublished returns BlueprintConfigurationDetail.Published, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetPublished() bool { return v.Published }

// GetDescription returns BlueprintConfigurationDetail.Description, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetDescription() string { return v.Description }

// GetTags returns BlueprintConfigurationDetail.Tags, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetTags() []string { return v.Tags }

// GetLogoUrl returns BlueprintConfigurationDetail.LogoUrl, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetLogoUrl() string { return v.LogoUrl }

// GetRichInputSchema returns BlueprintConfigurationDetail.RichInputSchema, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationDetail) GetRichInputSchema() string { return v.RichInputSchema }

// BlueprintConfigurationRevision includes the GraphQL fields of BlueprintConfiguration requested by the fragment BlueprintConfigurationRevision.
type BlueprintConfigurationRevision struct {
	RevisionDetailV1BlueprintConfiguration `json:"-"`
}

// GetRevisionData returns BlueprintConfigurationRevision.RevisionData, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationRevision) GetRevisionData() string {
	return v.RevisionDetailV1BlueprintConfiguration.RevisionData
}

// GetRevisionMetadata returns BlueprintConfigurationRevision.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *BlueprintConfigurationRevision) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1BlueprintConfiguration.RevisionMetadata
}

func (v *BlueprintConfigurationRevision) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BlueprintConfigurationRevision
		graphql.NoUnmarshalJSON
	}
	firstPass.BlueprintConfigurationRevision = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1BlueprintConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBlueprintConfigurationRevision struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *BlueprintConfigurationRevision) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BlueprintConfigurationRevision) __premarshalJSON() (*__premarshalBlueprintConfigurationRevision, error) {
	var retval __premarshalBlueprintConfigurationRevision

	retval.RevisionData = v.RevisionDetailV1BlueprintConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1BlueprintConfiguration.RevisionMetadata
	return &retval, nil
}

// BlueprintDetail includes the GraphQL fields of Blueprint requested by the fragment BlueprintDetail.
type BlueprintDetail struct {
	Id   uuid.UUID     `json:"id"`
	Type BlueprintType `json:"type"`
	// Whether this blueprint is officially supported.
	IsOfficial bool `json:"isOfficial"`
	// Whether this blueprint is enabled for your team. Does not affect existing projects.
	Enabled bool `json:"enabled"`
	// Query the revision history of this blueprint.
	Configuration BlueprintDetailConfigurationBlueprintConfiguration `json:"configuration"`
}

// GetId returns BlueprintDetail.Id, and is useful for accessing the field via an interface.
func (v *BlueprintDetail) GetId() uuid.UUID { return v.Id }

// GetType returns BlueprintDetail.Type, and is useful for accessing the field via an interface.
func (v *BlueprintDetail) GetType() BlueprintType { return v.Type }

// GetIsOfficial returns BlueprintDetail.IsOfficial, and is useful for accessing the field via an interface.
func (v *BlueprintDetail) GetIsOfficial() bool { return v.IsOfficial }

// GetEnabled returns BlueprintDetail.Enabled, and is useful for accessing the field via an interface.
func (v *BlueprintDetail) GetEnabled() bool { return v.Enabled }

// GetConfiguration returns BlueprintDetail.Configuration, and is useful for accessing the field via an interface.
func (v *BlueprintDetail) GetConfiguration() BlueprintDetailConfigurationBlueprintConfiguration {
	return v.Configuration
}

// BlueprintDetailConfigurationBlueprintConfiguration includes the requested fields of the GraphQL type BlueprintConfiguration.
type BlueprintDetailConfigurationBlueprintConfiguration struct {
	BlueprintConfigurationDetail `json:"-"`
}

// GetSlug returns BlueprintDetailConfigurationBlueprintConfiguration.Slug, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetSlug() string {
	return v.BlueprintConfigurationDetail.Slug
}

// GetDisplayName returns BlueprintDetailConfigurationBlueprintConfiguration.DisplayName, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetDisplayName() string {
	return v.BlueprintConfigurationDetail.DisplayName
}

// GetPublished returns BlueprintDetailConfigurationBlueprintConfiguration.Published, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetPublished() bool {
	return v.BlueprintConfigurationDetail.Published
}

// GetDescription returns BlueprintDetailConfigurationBlueprintConfiguration.Description, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetDescription() string {
	return v.BlueprintConfigurationDetail.Description
}

// GetTags returns BlueprintDetailConfigurationBlueprintConfiguration.Tags, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetTags() []string {
	return v.BlueprintConfigurationDetail.Tags
}

// GetLogoUrl returns BlueprintDetailConfigurationBlueprintConfiguration.LogoUrl, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetLogoUrl() string {
	return v.BlueprintConfigurationDetail.LogoUrl
}

// GetRichInputSchema returns BlueprintDetailConfigurationBlueprintConfiguration.RichInputSchema, and is useful for accessing the field via an interface.
func (v *BlueprintDetailConfigurationBlueprintConfiguration) GetRichInputSchema() string {
	return v.BlueprintConfigurationDetail.RichInputSchema
}

func (v *BlueprintDetailConfigurationBlueprintConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BlueprintDetailConfigurationBlueprintConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.BlueprintDetailConfigurationBlueprintConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintConfigurationDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBlueprintDetailConfigurationBlueprintConfiguration struct {
	Slug string `json:"slug"`

	DisplayName string `json:"displayName"`

	Published bool `json:"published"`

	Description string `json:"description"`

	Tags []string `json:"tags"`

	LogoUrl string `json:"logoUrl"`

	RichInputSchema string `json:"richInputSchema"`
}

func (v *BlueprintDetailConfigurationBlueprintConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BlueprintDetailConfigurationBlueprintConfiguration) __premarshalJSON() (*__premarshalBlueprintDetailConfigurationBlueprintConfiguration, error) {
	var retval __premarshalBlueprintDetailConfigurationBlueprintConfiguration

	retval.Slug = v.BlueprintConfigurationDetail.Slug
	retval.DisplayName = v.BlueprintConfigurationDetail.DisplayName
	retval.Published = v.BlueprintConfigurationDetail.Published
	retval.Description = v.BlueprintConfigurationDetail.Description
	retval.Tags = v.BlueprintConfigurationDetail.Tags
	retval.LogoUrl = v.BlueprintConfigurationDetail.LogoUrl
	retval.RichInputSchema = v.BlueprintConfigurationDetail.RichInputSchema
	return &retval, nil
}

type BlueprintDriverWorkflowStepAction string

const (
	BlueprintDriverWorkflowStepActionDriverPlanDestroy BlueprintDriverWorkflowStepAction = "DRIVER_PLAN_DESTROY"
	BlueprintDriverWorkflowStepActionDriverPlan        BlueprintDriverWorkflowStepAction = "DRIVER_PLAN"
	BlueprintDriverWorkflowStepActionDriverApprove     BlueprintDriverWorkflowStepAction = "DRIVER_APPROVE"
	BlueprintDriverWorkflowStepActionDriverApply       BlueprintDriverWorkflowStepAction = "DRIVER_APPLY"
	BlueprintDriverWorkflowStepActionProjectDelete     BlueprintDriverWorkflowStepAction = "PROJECT_DELETE"
)

type BlueprintHelmConfigurationInput struct {
	Source SourceInput `json:"source"`
}

// GetSource returns BlueprintHelmConfigurationInput.Source, and is useful for accessing the field via an interface.
func (v *BlueprintHelmConfigurationInput) GetSource() SourceInput { return v.Source }

type BlueprintManifestConfigurationInput struct {
	Source       SourceInput `json:"source"`
	UseKustomize bool        `json:"useKustomize"`
}

// GetSource returns BlueprintManifestConfigurationInput.Source, and is useful for accessing the field via an interface.
func (v *BlueprintManifestConfigurationInput) GetSource() SourceInput { return v.Source }

// GetUseKustomize returns BlueprintManifestConfigurationInput.UseKustomize, and is useful for accessing the field via an interface.
func (v *BlueprintManifestConfigurationInput) GetUseKustomize() bool { return v.UseKustomize }

// blueprintResponse is returned by blueprint on success.
type BlueprintResponse struct {
	Team blueprintTeam `json:"team"`
}

// GetTeam returns BlueprintResponse.Team, and is useful for accessing the field via an interface.
func (v *BlueprintResponse) GetTeam() blueprintTeam { return v.Team }

// blueprintRevisionsResponse is returned by blueprintRevisions on success.
type BlueprintRevisionsResponse struct {
	Team blueprintRevisionsTeam `json:"team"`
}

// GetTeam returns BlueprintRevisionsResponse.Team, and is useful for accessing the field via an interface.
func (v *BlueprintRevisionsResponse) GetTeam() blueprintRevisionsTeam { return v.Team }

type BlueprintTerraformConfigurationInput struct {
	Source              SourceInput                       `json:"source"`
	OutputConfiguration TerraformOutputConfigurationInput `json:"outputConfiguration"`
	TerraformVersion    string                            `json:"terraformVersion"`
}

// GetSource returns BlueprintTerraformConfigurationInput.Source, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationInput) GetSource() SourceInput { return v.Source }

// GetOutputConfiguration returns BlueprintTerraformConfigurationInput.OutputConfiguration, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationInput) GetOutputConfiguration() TerraformOutputConfigurationInput {
	return v.OutputConfiguration
}

// GetTerraformVersion returns BlueprintTerraformConfigurationInput.TerraformVersion, and is useful for accessing the field via an interface.
func (v *BlueprintTerraformConfigurationInput) GetTerraformVersion() string {
	return v.TerraformVersion
}

type BlueprintType string

const (
	BlueprintTypeTerraform          BlueprintType = "TERRAFORM"
	BlueprintTypeKubernetesManifest BlueprintType = "KUBERNETES_MANIFEST"
	BlueprintTypeHelm               BlueprintType = "HELM"
	BlueprintTypeAwsSam             BlueprintType = "AWS_SAM"
	BlueprintTypeGcpCloudRun        BlueprintType = "GCP_CLOUD_RUN"
	BlueprintTypeZeetKubernetes     BlueprintType = "ZEET_KUBERNETES"
	BlueprintTypeZeetAwsLambda      BlueprintType = "ZEET_AWS_LAMBDA"
	BlueprintTypeZeetGcpCloudRun    BlueprintType = "ZEET_GCP_CLOUD_RUN"
)

type BlueprintVariableInput struct {
	// ID of the corresponding variable spec. Must be present if name is not specified.
	SpecId uuid.UUID `json:"specId"`
	// Name of the corresponding variable spec, or name to use when declaring a variable without referencing a variable spec.
	// Must be present if specId is not specified.
	Name string `json:"name"`
	// The variable value. Always a string value, which will be parsed according to the variableType, determined either
	// by the referenced variableSpec, or the provided variableType
	Value string `json:"value"`
	// Type specification is required when variable is being declared without referencing a variable spec.
	Type BlueprintVariableType `json:"type"`
}

// GetSpecId returns BlueprintVariableInput.SpecId, and is useful for accessing the field via an interface.
func (v *BlueprintVariableInput) GetSpecId() uuid.UUID { return v.SpecId }

// GetName returns BlueprintVariableInput.Name, and is useful for accessing the field via an interface.
func (v *BlueprintVariableInput) GetName() string { return v.Name }

// GetValue returns BlueprintVariableInput.Value, and is useful for accessing the field via an interface.
func (v *BlueprintVariableInput) GetValue() string { return v.Value }

// GetType returns BlueprintVariableInput.Type, and is useful for accessing the field via an interface.
func (v *BlueprintVariableInput) GetType() BlueprintVariableType { return v.Type }

type BlueprintVariableType string

const (
	BlueprintVariableTypeString  BlueprintVariableType = "STRING"
	BlueprintVariableTypeBoolean BlueprintVariableType = "BOOLEAN"
	BlueprintVariableTypeInteger BlueprintVariableType = "INTEGER"
	BlueprintVariableTypeFloat   BlueprintVariableType = "FLOAT"
	BlueprintVariableTypeJson    BlueprintVariableType = "JSON"
)

// buildArtifactsResponse is returned by buildArtifacts on success.
type BuildArtifactsResponse struct {
	Team buildArtifactsTeam `json:"team"`
}

// GetTeam returns BuildArtifactsResponse.Team, and is useful for accessing the field via an interface.
func (v *BuildArtifactsResponse) GetTeam() buildArtifactsTeam { return v.Team }

type BuildDefinitionInput struct {
	BuildAppId       string           `json:"buildAppId"`
	BuildAppName     string           `json:"buildAppName"`
	GitSource        GitSourceInput   `json:"gitSource"`
	BuildClusterId   uuid.UUID        `json:"buildClusterId"`
	Target           BuildTargetInput `json:"target"`
	Type             BuildType        `json:"type"`
	Engine           BuildEngine      `json:"engine"`
	NodeJsVersion    string           `json:"nodeJsVersion"`
	PythonVersion    string           `json:"pythonVersion"`
	GolangVersion    string           `json:"golangVersion"`
	StaticPath       string           `json:"staticPath"`
	DockerfilePath   string           `json:"dockerfilePath"`
	DockerfileText   string           `json:"dockerfileText"`
	WorkingDirectory string           `json:"workingDirectory"`
	BuildCommand     string           `json:"buildCommand"`
	TestCommand      string           `json:"testCommand"`
	RunCommand       string           `json:"runCommand"`
	NoBuildCache     bool             `json:"noBuildCache"`
	AutoRetry        bool             `json:"autoRetry"`
	KanikoFlags      []string         `json:"kanikoFlags"`
}

// GetBuildAppId returns BuildDefinitionInput.BuildAppId, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetBuildAppId() string { return v.BuildAppId }

// GetBuildAppName returns BuildDefinitionInput.BuildAppName, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetBuildAppName() string { return v.BuildAppName }

// GetGitSource returns BuildDefinitionInput.GitSource, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetGitSource() GitSourceInput { return v.GitSource }

// GetBuildClusterId returns BuildDefinitionInput.BuildClusterId, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetBuildClusterId() uuid.UUID { return v.BuildClusterId }

// GetTarget returns BuildDefinitionInput.Target, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetTarget() BuildTargetInput { return v.Target }

// GetType returns BuildDefinitionInput.Type, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetType() BuildType { return v.Type }

// GetEngine returns BuildDefinitionInput.Engine, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetEngine() BuildEngine { return v.Engine }

// GetNodeJsVersion returns BuildDefinitionInput.NodeJsVersion, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetNodeJsVersion() string { return v.NodeJsVersion }

// GetPythonVersion returns BuildDefinitionInput.PythonVersion, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetPythonVersion() string { return v.PythonVersion }

// GetGolangVersion returns BuildDefinitionInput.GolangVersion, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetGolangVersion() string { return v.GolangVersion }

// GetStaticPath returns BuildDefinitionInput.StaticPath, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetStaticPath() string { return v.StaticPath }

// GetDockerfilePath returns BuildDefinitionInput.DockerfilePath, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetDockerfilePath() string { return v.DockerfilePath }

// GetDockerfileText returns BuildDefinitionInput.DockerfileText, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetDockerfileText() string { return v.DockerfileText }

// GetWorkingDirectory returns BuildDefinitionInput.WorkingDirectory, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetWorkingDirectory() string { return v.WorkingDirectory }

// GetBuildCommand returns BuildDefinitionInput.BuildCommand, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetBuildCommand() string { return v.BuildCommand }

// GetTestCommand returns BuildDefinitionInput.TestCommand, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetTestCommand() string { return v.TestCommand }

// GetRunCommand returns BuildDefinitionInput.RunCommand, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetRunCommand() string { return v.RunCommand }

// GetNoBuildCache returns BuildDefinitionInput.NoBuildCache, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetNoBuildCache() bool { return v.NoBuildCache }

// GetAutoRetry returns BuildDefinitionInput.AutoRetry, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetAutoRetry() bool { return v.AutoRetry }

// GetKanikoFlags returns BuildDefinitionInput.KanikoFlags, and is useful for accessing the field via an interface.
func (v *BuildDefinitionInput) GetKanikoFlags() []string { return v.KanikoFlags }

type BuildEngine string

const (
	BuildEngineCodeBuild BuildEngine = "CODE_BUILD"
	BuildEngineKaniko    BuildEngine = "KANIKO"
	BuildEngineExternal  BuildEngine = "EXTERNAL"
)

// BuildRunDetail includes the GraphQL fields of BuildRun requested by the fragment BuildRunDetail.
type BuildRunDetail struct {
	Id          uuid.UUID                               `json:"id"`
	Sequence    int                                     `json:"sequence"`
	JobRun      BuildRunDetailJobRun                    `json:"jobRun"`
	TriggeredBy BuildRunDetailTriggeredByWorkflowRun    `json:"triggeredBy"`
	Definition  BuildRunDetailDefinitionBuildDefinition `json:"definition"`
	Artifacts   []BuildRunDetailArtifactsBuildArtifact  `json:"artifacts"`
}

// GetId returns BuildRunDetail.Id, and is useful for accessing the field via an interface.
func (v *BuildRunDetail) GetId() uuid.UUID { return v.Id }

// GetSequence returns BuildRunDetail.Sequence, and is useful for accessing the field via an interface.
func (v *BuildRunDetail) GetSequence() int { return v.Sequence }

// GetJobRun returns BuildRunDetail.JobRun, and is useful for accessing the field via an interface.
func (v *BuildRunDetail) GetJobRun() BuildRunDetailJobRun { return v.JobRun }

// GetTriggeredBy returns BuildRunDetail.TriggeredBy, and is useful for accessing the field via an interface.
func (v *BuildRunDetail) GetTriggeredBy() BuildRunDetailTriggeredByWorkflowRun { return v.TriggeredBy }

// GetDefinition returns BuildRunDetail.Definition, and is useful for accessing the field via an interface.
func (v *BuildRunDetail) GetDefinition() BuildRunDetailDefinitionBuildDefinition { return v.Definition }

// GetArtifacts returns BuildRunDetail.Artifacts, and is useful for accessing the field via an interface.
func (v *BuildRunDetail) GetArtifacts() []BuildRunDetailArtifactsBuildArtifact { return v.Artifacts }

// BuildRunDetailArtifactsBuildArtifact includes the requested fields of the GraphQL type BuildArtifact.
type BuildRunDetailArtifactsBuildArtifact struct {
	Id        uuid.UUID `json:"id"`
	Image     string    `json:"image"`
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns BuildRunDetailArtifactsBuildArtifact.Id, and is useful for accessing the field via an interface.
func (v *BuildRunDetailArtifactsBuildArtifact) GetId() uuid.UUID { return v.Id }

// GetImage returns BuildRunDetailArtifactsBuildArtifact.Image, and is useful for accessing the field via an interface.
func (v *BuildRunDetailArtifactsBuildArtifact) GetImage() string { return v.Image }

// GetCreatedAt returns BuildRunDetailArtifactsBuildArtifact.CreatedAt, and is useful for accessing the field via an interface.
func (v *BuildRunDetailArtifactsBuildArtifact) GetCreatedAt() time.Time { return v.CreatedAt }

// BuildRunDetailDefinitionBuildDefinition includes the requested fields of the GraphQL type BuildDefinition.
type BuildRunDetailDefinitionBuildDefinition struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns BuildRunDetailDefinitionBuildDefinition.Id, and is useful for accessing the field via an interface.
func (v *BuildRunDetailDefinitionBuildDefinition) GetId() uuid.UUID { return v.Id }

// BuildRunDetailJobRun includes the requested fields of the GraphQL type JobRun.
type BuildRunDetailJobRun struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns BuildRunDetailJobRun.Id, and is useful for accessing the field via an interface.
func (v *BuildRunDetailJobRun) GetId() uuid.UUID { return v.Id }

// buildRunDetailResponse is returned by buildRunDetail on success.
type BuildRunDetailResponse struct {
	Team buildRunDetailTeam `json:"team"`
}

// GetTeam returns BuildRunDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *BuildRunDetailResponse) GetTeam() buildRunDetailTeam { return v.Team }

// BuildRunDetailTriggeredByWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type BuildRunDetailTriggeredByWorkflowRun struct {
	Id       uuid.UUID `json:"id"`
	Sequence int       `json:"sequence"`
}

// GetId returns BuildRunDetailTriggeredByWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTriggeredByWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetSequence returns BuildRunDetailTriggeredByWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *BuildRunDetailTriggeredByWorkflowRun) GetSequence() int { return v.Sequence }

// BuildRunListItem includes the GraphQL fields of BuildRun requested by the fragment BuildRunListItem.
type BuildRunListItem struct {
	Id          uuid.UUID                              `json:"id"`
	Sequence    int                                    `json:"sequence"`
	JobRun      BuildRunListItemJobRun                 `json:"jobRun"`
	TriggeredBy BuildRunListItemTriggeredByWorkflowRun `json:"triggeredBy"`
}

// GetId returns BuildRunListItem.Id, and is useful for accessing the field via an interface.
func (v *BuildRunListItem) GetId() uuid.UUID { return v.Id }

// GetSequence returns BuildRunListItem.Sequence, and is useful for accessing the field via an interface.
func (v *BuildRunListItem) GetSequence() int { return v.Sequence }

// GetJobRun returns BuildRunListItem.JobRun, and is useful for accessing the field via an interface.
func (v *BuildRunListItem) GetJobRun() BuildRunListItemJobRun { return v.JobRun }

// GetTriggeredBy returns BuildRunListItem.TriggeredBy, and is useful for accessing the field via an interface.
func (v *BuildRunListItem) GetTriggeredBy() BuildRunListItemTriggeredByWorkflowRun {
	return v.TriggeredBy
}

// BuildRunListItemJobRun includes the requested fields of the GraphQL type JobRun.
type BuildRunListItemJobRun struct {
	CreatedAt time.Time   `json:"createdAt"`
	State     JobRunState `json:"state"`
}

// GetCreatedAt returns BuildRunListItemJobRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *BuildRunListItemJobRun) GetCreatedAt() time.Time { return v.CreatedAt }

// GetState returns BuildRunListItemJobRun.State, and is useful for accessing the field via an interface.
func (v *BuildRunListItemJobRun) GetState() JobRunState { return v.State }

// BuildRunListItemTriggeredByWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type BuildRunListItemTriggeredByWorkflowRun struct {
	Id       uuid.UUID `json:"id"`
	Sequence int       `json:"sequence"`
}

// GetId returns BuildRunListItemTriggeredByWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *BuildRunListItemTriggeredByWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetSequence returns BuildRunListItemTriggeredByWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *BuildRunListItemTriggeredByWorkflowRun) GetSequence() int { return v.Sequence }

// buildRunsResponse is returned by buildRuns on success.
type BuildRunsResponse struct {
	Team buildRunsTeam `json:"team"`
}

// GetTeam returns BuildRunsResponse.Team, and is useful for accessing the field via an interface.
func (v *BuildRunsResponse) GetTeam() buildRunsTeam { return v.Team }

type BuildTargetInput struct {
	Type                         BuildTargetType             `json:"type"`
	Repository                   string                      `json:"repository"`
	AlternativeImageTagTemplates []string                    `json:"alternativeImageTagTemplates"`
	Integration                  BuildTargetIntegrationInput `json:"integration"`
}

// GetType returns BuildTargetInput.Type, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetType() BuildTargetType { return v.Type }

// GetRepository returns BuildTargetInput.Repository, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetRepository() string { return v.Repository }

// GetAlternativeImageTagTemplates returns BuildTargetInput.AlternativeImageTagTemplates, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetAlternativeImageTagTemplates() []string {
	return v.AlternativeImageTagTemplates
}

// GetIntegration returns BuildTargetInput.Integration, and is useful for accessing the field via an interface.
func (v *BuildTargetInput) GetIntegration() BuildTargetIntegrationInput { return v.Integration }

type BuildTargetIntegrationInput struct {
	RegistryId        uuid.UUID `json:"registryId"`
	RegistryClusterId uuid.UUID `json:"registryClusterId"`
	AwsAccountId      uuid.UUID `json:"awsAccountId"`
	AwsRegion         string    `json:"awsRegion"`
	GcpAccountId      uuid.UUID `json:"gcpAccountId"`
	GcpRegion         string    `json:"gcpRegion"`
}

// GetRegistryId returns BuildTargetIntegrationInput.RegistryId, and is useful for accessing the field via an interface.
func (v *BuildTargetIntegrationInput) GetRegistryId() uuid.UUID { return v.RegistryId }

// GetRegistryClusterId returns BuildTargetIntegrationInput.RegistryClusterId, and is useful for accessing the field via an interface.
func (v *BuildTargetIntegrationInput) GetRegistryClusterId() uuid.UUID { return v.RegistryClusterId }

// GetAwsAccountId returns BuildTargetIntegrationInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *BuildTargetIntegrationInput) GetAwsAccountId() uuid.UUID { return v.AwsAccountId }

// GetAwsRegion returns BuildTargetIntegrationInput.AwsRegion, and is useful for accessing the field via an interface.
func (v *BuildTargetIntegrationInput) GetAwsRegion() string { return v.AwsRegion }

// GetGcpAccountId returns BuildTargetIntegrationInput.GcpAccountId, and is useful for accessing the field via an interface.
func (v *BuildTargetIntegrationInput) GetGcpAccountId() uuid.UUID { return v.GcpAccountId }

// GetGcpRegion returns BuildTargetIntegrationInput.GcpRegion, and is useful for accessing the field via an interface.
func (v *BuildTargetIntegrationInput) GetGcpRegion() string { return v.GcpRegion }

type BuildTargetType string

const (
	BuildTargetTypeNullRegistry            BuildTargetType = "NULL_REGISTRY"
	BuildTargetTypeClusterRegistry         BuildTargetType = "CLUSTER_REGISTRY"
	BuildTargetTypeContainerRegistry       BuildTargetType = "CONTAINER_REGISTRY"
	BuildTargetTypeAwsSamContainerRegistry BuildTargetType = "AWS_SAM_CONTAINER_REGISTRY"
	BuildTargetTypeGcpContainerRegistry    BuildTargetType = "GCP_CONTAINER_REGISTRY"
)

type BuildType string

const (
	BuildTypeDocker        BuildType = "DOCKER"
	BuildTypeBuildpacks    BuildType = "BUILDPACKS"
	BuildTypePython        BuildType = "PYTHON"
	BuildTypePythonDjango  BuildType = "PYTHON_DJANGO"
	BuildTypeNode          BuildType = "NODE"
	BuildTypeNodeStatic    BuildType = "NODE_STATIC"
	BuildTypeNodeNextjs    BuildType = "NODE_NEXTJS"
	BuildTypeUbuntu        BuildType = "UBUNTU"
	BuildTypeElixirPhoenix BuildType = "ELIXIR_PHOENIX"
	BuildTypeGolangModules BuildType = "GOLANG_MODULES"
	BuildTypeHerokuish     BuildType = "HEROKUISH"
)

type CloudProvider string

const (
	CloudProviderAws          CloudProvider = "AWS"
	CloudProviderAzure        CloudProvider = "AZURE"
	CloudProviderCoreweave    CloudProvider = "COREWEAVE"
	CloudProviderDigitalocean CloudProvider = "DIGITALOCEAN"
	CloudProviderGcp          CloudProvider = "GCP"
	CloudProviderLinode       CloudProvider = "LINODE"
	CloudProviderVultr        CloudProvider = "VULTR"
	CloudProviderUnknown      CloudProvider = "UNKNOWN"
	CloudProviderZeet         CloudProvider = "ZEET"
	CloudProviderAlibaba      CloudProvider = "ALIBABA"
	CloudProviderIbm          CloudProvider = "IBM"
	CloudProviderOvh          CloudProvider = "OVH"
	CloudProviderOci          CloudProvider = "OCI"
	CloudProviderScaleway     CloudProvider = "SCALEWAY"
	CloudProviderTencent      CloudProvider = "TENCENT"
)

// CloudResource includes the GraphQL fields of CloudResource requested by the fragment CloudResource.
type CloudResource struct {
	Name      string                             `json:"name"`
	Status    ResourceStatus                     `json:"status"`
	Type      ResourceType                       `json:"type"`
	CreatedAt time.Time                          `json:"createdAt"`
	Owners    []CloudResourceOwnersResourceOwner `json:"owners"`
	Events    []CloudResourceEventsResourceEvent `json:"events"`
}

// GetName returns CloudResource.Name, and is useful for accessing the field via an interface.
func (v *CloudResource) GetName() string { return v.Name }

// GetStatus returns CloudResource.Status, and is useful for accessing the field via an interface.
func (v *CloudResource) GetStatus() ResourceStatus { return v.Status }

// GetType returns CloudResource.Type, and is useful for accessing the field via an interface.
func (v *CloudResource) GetType() ResourceType { return v.Type }

// GetCreatedAt returns CloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *CloudResource) GetCreatedAt() time.Time { return v.CreatedAt }

// GetOwners returns CloudResource.Owners, and is useful for accessing the field via an interface.
func (v *CloudResource) GetOwners() []CloudResourceOwnersResourceOwner { return v.Owners }

// GetEvents returns CloudResource.Events, and is useful for accessing the field via an interface.
func (v *CloudResource) GetEvents() []CloudResourceEventsResourceEvent { return v.Events }

// CloudResourceEventsResourceEvent includes the requested fields of the GraphQL type ResourceEvent.
type CloudResourceEventsResourceEvent struct {
	Type              ResourceEventType `json:"type"`
	Reason            string            `json:"reason"`
	Message           string            `json:"message"`
	Action            string            `json:"action"`
	OccurredAt        time.Time         `json:"occurredAt"`
	FirstOccurrenceAt time.Time         `json:"firstOccurrenceAt"`
	LastOccurrenceAt  time.Time         `json:"lastOccurrenceAt"`
	Count             int               `json:"count"`
}

// GetType returns CloudResourceEventsResourceEvent.Type, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetType() ResourceEventType { return v.Type }

// GetReason returns CloudResourceEventsResourceEvent.Reason, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetReason() string { return v.Reason }

// GetMessage returns CloudResourceEventsResourceEvent.Message, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetMessage() string { return v.Message }

// GetAction returns CloudResourceEventsResourceEvent.Action, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetAction() string { return v.Action }

// GetOccurredAt returns CloudResourceEventsResourceEvent.OccurredAt, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetOccurredAt() time.Time { return v.OccurredAt }

// GetFirstOccurrenceAt returns CloudResourceEventsResourceEvent.FirstOccurrenceAt, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetFirstOccurrenceAt() time.Time {
	return v.FirstOccurrenceAt
}

// GetLastOccurrenceAt returns CloudResourceEventsResourceEvent.LastOccurrenceAt, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetLastOccurrenceAt() time.Time { return v.LastOccurrenceAt }

// GetCount returns CloudResourceEventsResourceEvent.Count, and is useful for accessing the field via an interface.
func (v *CloudResourceEventsResourceEvent) GetCount() int { return v.Count }

// CloudResourceOwnersResourceOwner includes the requested fields of the GraphQL type ResourceOwner.
type CloudResourceOwnersResourceOwner struct {
	Name string       `json:"name"`
	Type ResourceType `json:"type"`
}

// GetName returns CloudResourceOwnersResourceOwner.Name, and is useful for accessing the field via an interface.
func (v *CloudResourceOwnersResourceOwner) GetName() string { return v.Name }

// GetType returns CloudResourceOwnersResourceOwner.Type, and is useful for accessing the field via an interface.
func (v *CloudResourceOwnersResourceOwner) GetType() ResourceType { return v.Type }

// cloudRevisionsResponse is returned by cloudRevisions on success.
type CloudRevisionsResponse struct {
	Team cloudRevisionsTeam `json:"team"`
}

// GetTeam returns CloudRevisionsResponse.Team, and is useful for accessing the field via an interface.
func (v *CloudRevisionsResponse) GetTeam() cloudRevisionsTeam { return v.Team }

type ClusterComponentEjectedStatus string

const (
	ClusterComponentEjectedStatusNotFound ClusterComponentEjectedStatus = "NOT_FOUND"
	ClusterComponentEjectedStatusDetected ClusterComponentEjectedStatus = "DETECTED"
)

type ClusterComponentType string

const (
	ClusterComponentTypeHelm      ClusterComponentType = "HELM"
	ClusterComponentTypeTerraform ClusterComponentType = "TERRAFORM"
)

// ClusterDetailV1 includes the GraphQL fields of Cluster requested by the fragment ClusterDetailV1.
type ClusterDetailV1 struct {
	Id            uuid.UUID     `json:"id"`
	DisplayName   string        `json:"displayName"`
	State         ClusterState  `json:"state"`
	Connected     bool          `json:"connected"`
	CloudProvider CloudProvider `json:"cloudProvider"`
	CreatedAt     time.Time     `json:"createdAt"`
	UpdatedAt     time.Time     `json:"updatedAt"`
}

// GetId returns ClusterDetailV1.Id, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetId() uuid.UUID { return v.Id }

// GetDisplayName returns ClusterDetailV1.DisplayName, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetDisplayName() string { return v.DisplayName }

// GetState returns ClusterDetailV1.State, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetState() ClusterState { return v.State }

// GetConnected returns ClusterDetailV1.Connected, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetConnected() bool { return v.Connected }

// GetCloudProvider returns ClusterDetailV1.CloudProvider, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetCloudProvider() CloudProvider { return v.CloudProvider }

// GetCreatedAt returns ClusterDetailV1.CreatedAt, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns ClusterDetailV1.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ClusterDetailV1) GetUpdatedAt() time.Time { return v.UpdatedAt }

// clusterDetailsResponse is returned by clusterDetails on success.
type ClusterDetailsResponse struct {
	Team clusterDetailsTeam `json:"team"`
}

// GetTeam returns ClusterDetailsResponse.Team, and is useful for accessing the field via an interface.
func (v *ClusterDetailsResponse) GetTeam() clusterDetailsTeam { return v.Team }

// clusterRevisionsResponse is returned by clusterRevisions on success.
type ClusterRevisionsResponse struct {
	Team clusterRevisionsTeam `json:"team"`
}

// GetTeam returns ClusterRevisionsResponse.Team, and is useful for accessing the field via an interface.
func (v *ClusterRevisionsResponse) GetTeam() clusterRevisionsTeam { return v.Team }

type ClusterState string

const (
	ClusterStatePending       ClusterState = "PENDING"
	ClusterStateCreating      ClusterState = "CREATING"
	ClusterStateHealthy       ClusterState = "HEALTHY"
	ClusterStateDeleting      ClusterState = "DELETING"
	ClusterStateError         ClusterState = "ERROR"
	ClusterStateErrorDeleting ClusterState = "ERROR_DELETING"
)

type ClusterStatus string

const (
	ClusterStatusPending       ClusterStatus = "PENDING"
	ClusterStatusCreating      ClusterStatus = "CREATING"
	ClusterStatusHealthy       ClusterStatus = "HEALTHY"
	ClusterStatusDeleting      ClusterStatus = "DELETING"
	ClusterStatusError         ClusterStatus = "ERROR"
	ClusterStatusErrorDeleting ClusterStatus = "ERROR_DELETING"
	ClusterStatusUnreachable   ClusterStatus = "UNREACHABLE"
)

// clusterStatusResponse is returned by clusterStatus on success.
type ClusterStatusResponse struct {
	Team clusterStatusTeam `json:"team"`
}

// GetTeam returns ClusterStatusResponse.Team, and is useful for accessing the field via an interface.
func (v *ClusterStatusResponse) GetTeam() clusterStatusTeam { return v.Team }

type ContainerRegistrySourceInput struct {
	RegistryId  uuid.UUID `json:"registryId"`
	RegistryUrl string    `json:"registryUrl"`
	Repository  string    `json:"repository"`
	Tag         string    `json:"tag"`
}

// GetRegistryId returns ContainerRegistrySourceInput.RegistryId, and is useful for accessing the field via an interface.
func (v *ContainerRegistrySourceInput) GetRegistryId() uuid.UUID { return v.RegistryId }

// GetRegistryUrl returns ContainerRegistrySourceInput.RegistryUrl, and is useful for accessing the field via an interface.
func (v *ContainerRegistrySourceInput) GetRegistryUrl() string { return v.RegistryUrl }

// GetRepository returns ContainerRegistrySourceInput.Repository, and is useful for accessing the field via an interface.
func (v *ContainerRegistrySourceInput) GetRepository() string { return v.Repository }

// GetTag returns ContainerRegistrySourceInput.Tag, and is useful for accessing the field via an interface.
func (v *ContainerRegistrySourceInput) GetTag() string { return v.Tag }

// createBuildRunResponse is returned by createBuildRun on success.
type CreateBuildRunResponse struct {
	CreateBuildRun createBuildRunCreateBuildRun `json:"createBuildRun"`
}

// GetCreateBuildRun returns CreateBuildRunResponse.CreateBuildRun, and is useful for accessing the field via an interface.
func (v *CreateBuildRunResponse) GetCreateBuildRun() createBuildRunCreateBuildRun {
	return v.CreateBuildRun
}

type CreateDeployRunInput struct {
	DeployId uuid.UUID `json:"deployId"`
	IntentId uuid.UUID `json:"intentId"`
}

// GetDeployId returns CreateDeployRunInput.DeployId, and is useful for accessing the field via an interface.
func (v *CreateDeployRunInput) GetDeployId() uuid.UUID { return v.DeployId }

// GetIntentId returns CreateDeployRunInput.IntentId, and is useful for accessing the field via an interface.
func (v *CreateDeployRunInput) GetIntentId() uuid.UUID { return v.IntentId }

// createDeployRunResponse is returned by createDeployRun on success.
type CreateDeployRunResponse struct {
	CreateDeployRun createDeployRunCreateDeployRun `json:"createDeployRun"`
}

// GetCreateDeployRun returns CreateDeployRunResponse.CreateDeployRun, and is useful for accessing the field via an interface.
func (v *CreateDeployRunResponse) GetCreateDeployRun() createDeployRunCreateDeployRun {
	return v.CreateDeployRun
}

type CreateProjectInput struct {
	TeamId       uuid.UUID                      `json:"teamId"`
	GroupId      uuid.UUID                      `json:"groupId"`
	GroupName    string                         `json:"groupName"`
	SubGroupId   uuid.UUID                      `json:"subGroupId"`
	SubGroupName string                         `json:"subGroupName"`
	Name         string                         `json:"name"`
	Enabled      bool                           `json:"enabled"`
	Workflow     WorkflowDefinitionInput        `json:"workflow"`
	Build        BuildDefinitionInput           `json:"build"`
	Jobs         []JobDefinitionInput           `json:"jobs"`
	Deploys      []DeploymentConfigurationInput `json:"deploys"`
	Envs         []EnvVarInput                  `json:"envs"`
	BlueprintId  uuid.UUID                      `json:"blueprintId"`
}

// GetTeamId returns CreateProjectInput.TeamId, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetGroupId returns CreateProjectInput.GroupId, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetGroupId() uuid.UUID { return v.GroupId }

// GetGroupName returns CreateProjectInput.GroupName, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetGroupName() string { return v.GroupName }

// GetSubGroupId returns CreateProjectInput.SubGroupId, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetSubGroupId() uuid.UUID { return v.SubGroupId }

// GetSubGroupName returns CreateProjectInput.SubGroupName, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetSubGroupName() string { return v.SubGroupName }

// GetName returns CreateProjectInput.Name, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetName() string { return v.Name }

// GetEnabled returns CreateProjectInput.Enabled, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetEnabled() bool { return v.Enabled }

// GetWorkflow returns CreateProjectInput.Workflow, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetWorkflow() WorkflowDefinitionInput { return v.Workflow }

// GetBuild returns CreateProjectInput.Build, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetBuild() BuildDefinitionInput { return v.Build }

// GetJobs returns CreateProjectInput.Jobs, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetJobs() []JobDefinitionInput { return v.Jobs }

// GetDeploys returns CreateProjectInput.Deploys, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetDeploys() []DeploymentConfigurationInput { return v.Deploys }

// GetEnvs returns CreateProjectInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetEnvs() []EnvVarInput { return v.Envs }

// GetBlueprintId returns CreateProjectInput.BlueprintId, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetBlueprintId() uuid.UUID { return v.BlueprintId }

// createProjectResponse is returned by createProject on success.
type CreateProjectResponse struct {
	CreateProject createProjectCreateProject `json:"createProject"`
}

// GetCreateProject returns CreateProjectResponse.CreateProject, and is useful for accessing the field via an interface.
func (v *CreateProjectResponse) GetCreateProject() createProjectCreateProject { return v.CreateProject }

type CreateTriggerInput struct {
	Definition TriggerDefinitionInput `json:"definition"`
	ParentId   uuid.UUID              `json:"parentId"`
}

// GetDefinition returns CreateTriggerInput.Definition, and is useful for accessing the field via an interface.
func (v *CreateTriggerInput) GetDefinition() TriggerDefinitionInput { return v.Definition }

// GetParentId returns CreateTriggerInput.ParentId, and is useful for accessing the field via an interface.
func (v *CreateTriggerInput) GetParentId() uuid.UUID { return v.ParentId }

// createUserPersonalAccessTokenResponse is returned by createUserPersonalAccessToken on success.
type CreateUserPersonalAccessTokenResponse struct {
	CreatePersonalAccessTokenForUser createUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken `json:"createPersonalAccessTokenForUser"`
}

// GetCreatePersonalAccessTokenForUser returns CreateUserPersonalAccessTokenResponse.CreatePersonalAccessTokenForUser, and is useful for accessing the field via an interface.
func (v *CreateUserPersonalAccessTokenResponse) GetCreatePersonalAccessTokenForUser() createUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken {
	return v.CreatePersonalAccessTokenForUser
}

// createWorkflowTriggerResponse is returned by createWorkflowTrigger on success.
type CreateWorkflowTriggerResponse struct {
	CreateTrigger createWorkflowTriggerCreateTrigger `json:"createTrigger"`
}

// GetCreateTrigger returns CreateWorkflowTriggerResponse.CreateTrigger, and is useful for accessing the field via an interface.
func (v *CreateWorkflowTriggerResponse) GetCreateTrigger() createWorkflowTriggerCreateTrigger {
	return v.CreateTrigger
}

type CronJobEventTriggerConfigurationInput struct {
	Expression string `json:"expression"`
}

// GetExpression returns CronJobEventTriggerConfigurationInput.Expression, and is useful for accessing the field via an interface.
func (v *CronJobEventTriggerConfigurationInput) GetExpression() string { return v.Expression }

// currentUserResponse is returned by currentUser on success.
type CurrentUserResponse struct {
	CurrentUser currentUserCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns CurrentUserResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *CurrentUserResponse) GetCurrentUser() currentUserCurrentUser { return v.CurrentUser }

// deleteGroupResponse is returned by deleteGroup on success.
type DeleteGroupResponse struct {
	DeleteGroup bool `json:"deleteGroup"`
}

// GetDeleteGroup returns DeleteGroupResponse.DeleteGroup, and is useful for accessing the field via an interface.
func (v *DeleteGroupResponse) GetDeleteGroup() bool { return v.DeleteGroup }

// deleteProjectAndResourcesResponse is returned by deleteProjectAndResources on success.
type DeleteProjectAndResourcesResponse struct {
	DeleteProjectAndResources uuid.UUID `json:"deleteProjectAndResources"`
}

// GetDeleteProjectAndResources returns DeleteProjectAndResourcesResponse.DeleteProjectAndResources, and is useful for accessing the field via an interface.
func (v *DeleteProjectAndResourcesResponse) GetDeleteProjectAndResources() uuid.UUID {
	return v.DeleteProjectAndResources
}

// deleteProjectResourcesResponse is returned by deleteProjectResources on success.
type DeleteProjectResourcesResponse struct {
	DeleteProjectResources uuid.UUID `json:"deleteProjectResources"`
}

// GetDeleteProjectResources returns DeleteProjectResourcesResponse.DeleteProjectResources, and is useful for accessing the field via an interface.
func (v *DeleteProjectResourcesResponse) GetDeleteProjectResources() uuid.UUID {
	return v.DeleteProjectResources
}

// deleteProjectResponse is returned by deleteProject on success.
type DeleteProjectResponse struct {
	DeleteProject bool `json:"deleteProject"`
}

// GetDeleteProject returns DeleteProjectResponse.DeleteProject, and is useful for accessing the field via an interface.
func (v *DeleteProjectResponse) GetDeleteProject() bool { return v.DeleteProject }

// deleteSubGroupResponse is returned by deleteSubGroup on success.
type DeleteSubGroupResponse struct {
	DeleteSubGroup bool `json:"deleteSubGroup"`
}

// GetDeleteSubGroup returns DeleteSubGroupResponse.DeleteSubGroup, and is useful for accessing the field via an interface.
func (v *DeleteSubGroupResponse) GetDeleteSubGroup() bool { return v.DeleteSubGroup }

// deleteUserPersonalAccessTokenResponse is returned by deleteUserPersonalAccessToken on success.
type DeleteUserPersonalAccessTokenResponse struct {
	DeletePersonalAccessToken bool `json:"deletePersonalAccessToken"`
}

// GetDeletePersonalAccessToken returns DeleteUserPersonalAccessTokenResponse.DeletePersonalAccessToken, and is useful for accessing the field via an interface.
func (v *DeleteUserPersonalAccessTokenResponse) GetDeletePersonalAccessToken() bool {
	return v.DeletePersonalAccessToken
}

// deleteWorkflowTriggerResponse is returned by deleteWorkflowTrigger on success.
type DeleteWorkflowTriggerResponse struct {
	DeleteTrigger bool `json:"deleteTrigger"`
}

// GetDeleteTrigger returns DeleteWorkflowTriggerResponse.DeleteTrigger, and is useful for accessing the field via an interface.
func (v *DeleteWorkflowTriggerResponse) GetDeleteTrigger() bool { return v.DeleteTrigger }

// DeployConfigurationDetail includes the GraphQL fields of Deploy requested by the fragment DeployConfigurationDetail.
type DeployConfigurationDetail struct {
	Id         uuid.UUID `json:"id"`
	Name       string    `json:"name"`
	BranchName string    `json:"branchName"`
	// When querying history by revisionId or sequenceId, only the revisionMetadata and revisionData will be available,
	// when querying the current configuration (neither revisionId nor sequenceId is
	// specified), all fields _except_ revisionMetadata and revisionData will be available.
	Configuration DeployConfigurationDetailConfigurationDeploymentConfiguration `json:"configuration"`
}

// GetId returns DeployConfigurationDetail.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetail) GetId() uuid.UUID { return v.Id }

// GetName returns DeployConfigurationDetail.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetail) GetName() string { return v.Name }

// GetBranchName returns DeployConfigurationDetail.BranchName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetail) GetBranchName() string { return v.BranchName }

// GetConfiguration returns DeployConfigurationDetail.Configuration, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetail) GetConfiguration() DeployConfigurationDetailConfigurationDeploymentConfiguration {
	return v.Configuration
}

// DeployConfigurationDetailConfigurationDeploymentConfiguration includes the requested fields of the GraphQL type DeploymentConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfiguration struct {
	Id                   uuid.UUID                                                                                              `json:"id"`
	DefaultWorkflowSteps []BlueprintDriverWorkflowStepAction                                                                    `json:"defaultWorkflowSteps"`
	RequirePlanApproval  bool                                                                                                   `json:"requirePlanApproval"`
	Variables            []DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable                 `json:"variables"`
	Kubernetes           DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes                                `json:"kubernetes"`
	Helm                 DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm `json:"helm"`
	Terraform            DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform                                 `json:"terraform"`
	AwsSam               DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam                                    `json:"awsSam"`
	GcpCloudRun          DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun                               `json:"gcpCloudRun"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfiguration.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetId() uuid.UUID {
	return v.Id
}

// GetDefaultWorkflowSteps returns DeployConfigurationDetailConfigurationDeploymentConfiguration.DefaultWorkflowSteps, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetDefaultWorkflowSteps() []BlueprintDriverWorkflowStepAction {
	return v.DefaultWorkflowSteps
}

// GetRequirePlanApproval returns DeployConfigurationDetailConfigurationDeploymentConfiguration.RequirePlanApproval, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetRequirePlanApproval() bool {
	return v.RequirePlanApproval
}

// GetVariables returns DeployConfigurationDetailConfigurationDeploymentConfiguration.Variables, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetVariables() []DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable {
	return v.Variables
}

// GetKubernetes returns DeployConfigurationDetailConfigurationDeploymentConfiguration.Kubernetes, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetKubernetes() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes {
	return v.Kubernetes
}

// GetHelm returns DeployConfigurationDetailConfigurationDeploymentConfiguration.Helm, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetHelm() DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm {
	return v.Helm
}

// GetTerraform returns DeployConfigurationDetailConfigurationDeploymentConfiguration.Terraform, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetTerraform() DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform {
	return v.Terraform
}

// GetAwsSam returns DeployConfigurationDetailConfigurationDeploymentConfiguration.AwsSam, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetAwsSam() DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam {
	return v.AwsSam
}

// GetGcpCloudRun returns DeployConfigurationDetailConfigurationDeploymentConfiguration.GcpCloudRun, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfiguration) GetGcpCloudRun() DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun {
	return v.GcpCloudRun
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam includes the requested fields of the GraphQL type DeploymentConfigurationAwsSam.
type DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam struct {
	Target    DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration       `json:"target"`
	Generator DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration `json:"generator"`
}

// GetTarget returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam.Target, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam) GetTarget() DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration {
	return v.Target
}

// GetGenerator returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam.Generator, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSam) GetGenerator() DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration {
	return v.Generator
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration includes the requested fields of the GraphQL type AwsSamGeneratorConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration struct {
	EnvVars                    []DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar `json:"envVars"`
	RunCommand                 string                                                                                                                  `json:"runCommand"`
	ServerlessMemory           int                                                                                                                     `json:"serverlessMemory"`
	ServerlessArch             string                                                                                                                  `json:"serverlessArch"`
	CustomDomainHost           string                                                                                                                  `json:"customDomainHost"`
	CustomDomainCertificateArn string                                                                                                                  `json:"customDomainCertificateArn"`
	HttpPort                   string                                                                                                                  `json:"httpPort"`
	BuildImage                 string                                                                                                                  `json:"buildImage"`
}

// GetEnvVars returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.EnvVars, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetEnvVars() []DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar {
	return v.EnvVars
}

// GetRunCommand returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.RunCommand, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetRunCommand() string {
	return v.RunCommand
}

// GetServerlessMemory returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.ServerlessMemory, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetServerlessMemory() int {
	return v.ServerlessMemory
}

// GetServerlessArch returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.ServerlessArch, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetServerlessArch() string {
	return v.ServerlessArch
}

// GetCustomDomainHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.CustomDomainHost, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetCustomDomainHost() string {
	return v.CustomDomainHost
}

// GetCustomDomainCertificateArn returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.CustomDomainCertificateArn, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetCustomDomainCertificateArn() string {
	return v.CustomDomainCertificateArn
}

// GetHttpPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.HttpPort, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetHttpPort() string {
	return v.HttpPort
}

// GetBuildImage returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration.BuildImage, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfiguration) GetBuildImage() string {
	return v.BuildImage
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar includes the requested fields of the GraphQL type EnvVar.
type DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar struct {
	Id        uuid.UUID                                                                                                                   `json:"id"`
	Name      string                                                                                                                      `json:"name"`
	Value     string                                                                                                                      `json:"value"`
	Visible   bool                                                                                                                        `json:"visible"`
	Sealed    bool                                                                                                                        `json:"sealed"`
	Source    DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVarSource `json:"source"`
	CreatedAt time.Time                                                                                                                   `json:"createdAt"`
	UpdatedAt time.Time                                                                                                                   `json:"updatedAt"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetId() uuid.UUID {
	return v.Id
}

// GetName returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetName() string {
	return v.Name
}

// GetValue returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetValue() string {
	return v.Value
}

// GetVisible returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetVisible() bool {
	return v.Visible
}

// GetSealed returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetSealed() bool {
	return v.Sealed
}

// GetSource returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.Source, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetSource() DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVarSource {
	return v.Source
}

// GetCreatedAt returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.CreatedAt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVar) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVarSource includes the requested fields of the GraphQL type EnvVarSource.
type DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVarSource struct {
	Type EnvVarSourceType `json:"type"`
}

// GetType returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVarSource.Type, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamGeneratorAwsSamGeneratorConfigurationEnvVarsEnvVarSource) GetType() EnvVarSourceType {
	return v.Type
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration includes the requested fields of the GraphQL type AwsSamTargetConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration struct {
	AwsAccountId uuid.UUID `json:"awsAccountId"`
	AwsRegion    string    `json:"awsRegion"`
	StackName    string    `json:"stackName"`
}

// GetAwsAccountId returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration.AwsAccountId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration) GetAwsAccountId() uuid.UUID {
	return v.AwsAccountId
}

// GetAwsRegion returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration.AwsRegion, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration) GetAwsRegion() string {
	return v.AwsRegion
}

// GetStackName returns DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration.StackName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationAwsSamTargetAwsSamTargetConfiguration) GetStackName() string {
	return v.StackName
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun includes the requested fields of the GraphQL type DeploymentConfigurationGcpCloudRun.
type DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun struct {
	Target    DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration       `json:"target"`
	Generator DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration `json:"generator"`
}

// GetTarget returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun.Target, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun) GetTarget() DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration {
	return v.Target
}

// GetGenerator returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun.Generator, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRun) GetGenerator() DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration {
	return v.Generator
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration includes the requested fields of the GraphQL type GcpCloudRunGeneratorConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration struct {
	EnvVars         []DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar `json:"envVars"`
	ContainerMemory float64                                                                                                                           `json:"containerMemory"`
	Name            string                                                                                                                            `json:"name"`
	HttpPort        string                                                                                                                            `json:"httpPort"`
	RunCommand      string                                                                                                                            `json:"runCommand"`
	ContainerCpu    float64                                                                                                                           `json:"containerCpu"`
}

// GetEnvVars returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration.EnvVars, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration) GetEnvVars() []DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar {
	return v.EnvVars
}

// GetContainerMemory returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration.ContainerMemory, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration) GetContainerMemory() float64 {
	return v.ContainerMemory
}

// GetName returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration) GetName() string {
	return v.Name
}

// GetHttpPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration.HttpPort, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration) GetHttpPort() string {
	return v.HttpPort
}

// GetRunCommand returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration.RunCommand, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration) GetRunCommand() string {
	return v.RunCommand
}

// GetContainerCpu returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration.ContainerCpu, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfiguration) GetContainerCpu() float64 {
	return v.ContainerCpu
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar includes the requested fields of the GraphQL type EnvVar.
type DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar struct {
	Id        uuid.UUID                                                                                                                             `json:"id"`
	Name      string                                                                                                                                `json:"name"`
	Value     string                                                                                                                                `json:"value"`
	Visible   bool                                                                                                                                  `json:"visible"`
	Sealed    bool                                                                                                                                  `json:"sealed"`
	Source    DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVarSource `json:"source"`
	CreatedAt time.Time                                                                                                                             `json:"createdAt"`
	UpdatedAt time.Time                                                                                                                             `json:"updatedAt"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetId() uuid.UUID {
	return v.Id
}

// GetName returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetName() string {
	return v.Name
}

// GetValue returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetValue() string {
	return v.Value
}

// GetVisible returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetVisible() bool {
	return v.Visible
}

// GetSealed returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetSealed() bool {
	return v.Sealed
}

// GetSource returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.Source, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetSource() DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVarSource {
	return v.Source
}

// GetCreatedAt returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.CreatedAt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVar) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVarSource includes the requested fields of the GraphQL type EnvVarSource.
type DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVarSource struct {
	Type EnvVarSourceType `json:"type"`
}

// GetType returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVarSource.Type, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunGeneratorGcpCloudRunGeneratorConfigurationEnvVarsEnvVarSource) GetType() EnvVarSourceType {
	return v.Type
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration includes the requested fields of the GraphQL type GcpCloudRunTargetConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration struct {
	GcpAccountId uuid.UUID `json:"gcpAccountId"`
	GcpRegion    string    `json:"gcpRegion"`
}

// GetGcpAccountId returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration.GcpAccountId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration) GetGcpAccountId() uuid.UUID {
	return v.GcpAccountId
}

// GetGcpRegion returns DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration.GcpRegion, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationGcpCloudRunTargetGcpCloudRunTargetConfiguration) GetGcpRegion() string {
	return v.GcpRegion
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm includes the requested fields of the GraphQL type DeploymentConfigurationKubernetesHelm.
type DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm struct {
	Blueprint DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfiguration `json:"blueprint"`
	Target    DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration       `json:"target"`
	Values    string                                                                                                                                    `json:"values"`
}

// GetBlueprint returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm.Blueprint, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm) GetBlueprint() DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfiguration {
	return v.Blueprint
}

// GetTarget returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm.Target, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm) GetTarget() DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration {
	return v.Target
}

// GetValues returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm.Values, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelm) GetValues() string {
	return v.Values
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfiguration includes the requested fields of the GraphQL type BlueprintHelmConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfiguration struct {
	Source DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource `json:"source"`
}

// GetSource returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfiguration.Source, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfiguration) GetSource() DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource {
	return v.Source
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource includes the requested fields of the GraphQL type Source.
type DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource struct {
	ProjectSourceDetail `json:"-"`
}

// GetGit returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource.Git, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) GetGit() ProjectSourceDetailGitGitSource {
	return v.ProjectSourceDetail.Git
}

// GetTerraformModule returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource.TerraformModule, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) GetTerraformModule() ProjectSourceDetailTerraformModuleTerraformModuleSource {
	return v.ProjectSourceDetail.TerraformModule
}

// GetHelmRepository returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource.HelmRepository, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) GetHelmRepository() ProjectSourceDetailHelmRepositoryHelmRepositorySource {
	return v.ProjectSourceDetail.HelmRepository
}

// GetContainerRegistry returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) GetContainerRegistry() ProjectSourceDetailContainerRegistryContainerRegistrySource {
	return v.ProjectSourceDetail.ContainerRegistry
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectSourceDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource struct {
	Git ProjectSourceDetailGitGitSource `json:"git"`

	TerraformModule ProjectSourceDetailTerraformModuleTerraformModuleSource `json:"terraformModule"`

	HelmRepository ProjectSourceDetailHelmRepositoryHelmRepositorySource `json:"helmRepository"`

	ContainerRegistry ProjectSourceDetailContainerRegistryContainerRegistrySource `json:"containerRegistry"`
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource) __premarshalJSON() (*__premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource, error) {
	var retval __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmBlueprintBlueprintHelmConfigurationSource

	retval.Git = v.ProjectSourceDetail.Git
	retval.TerraformModule = v.ProjectSourceDetail.TerraformModule
	retval.HelmRepository = v.ProjectSourceDetail.HelmRepository
	retval.ContainerRegistry = v.ProjectSourceDetail.ContainerRegistry
	return &retval, nil
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration includes the requested fields of the GraphQL type HelmTargetConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration struct {
	ClusterId   uuid.UUID `json:"clusterId"`
	Namespace   string    `json:"namespace"`
	ReleaseName string    `json:"releaseName"`
}

// GetClusterId returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration.ClusterId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration) GetClusterId() uuid.UUID {
	return v.ClusterId
}

// GetNamespace returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration.Namespace, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration) GetNamespace() string {
	return v.Namespace
}

// GetReleaseName returns DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration.ReleaseName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationHelmDeploymentConfigurationKubernetesHelmTargetHelmTargetConfiguration) GetReleaseName() string {
	return v.ReleaseName
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes includes the requested fields of the GraphQL type DeploymentConfigurationKubernetes.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes struct {
	Blueprint DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration   `json:"blueprint"`
	Target    DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration         `json:"target"`
	Generator DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration `json:"generator"`
}

// GetBlueprint returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes.Blueprint, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes) GetBlueprint() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration {
	return v.Blueprint
}

// GetTarget returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes.Target, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes) GetTarget() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration {
	return v.Target
}

// GetGenerator returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes.Generator, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetes) GetGenerator() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration {
	return v.Generator
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration includes the requested fields of the GraphQL type BlueprintManifestConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration struct {
	Source       DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource `json:"source"`
	UseKustomize bool                                                                                                                 `json:"useKustomize"`
}

// GetSource returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration.Source, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration) GetSource() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource {
	return v.Source
}

// GetUseKustomize returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration.UseKustomize, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfiguration) GetUseKustomize() bool {
	return v.UseKustomize
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource includes the requested fields of the GraphQL type Source.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource struct {
	ProjectSourceDetail `json:"-"`
}

// GetGit returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource.Git, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) GetGit() ProjectSourceDetailGitGitSource {
	return v.ProjectSourceDetail.Git
}

// GetTerraformModule returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource.TerraformModule, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) GetTerraformModule() ProjectSourceDetailTerraformModuleTerraformModuleSource {
	return v.ProjectSourceDetail.TerraformModule
}

// GetHelmRepository returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource.HelmRepository, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) GetHelmRepository() ProjectSourceDetailHelmRepositoryHelmRepositorySource {
	return v.ProjectSourceDetail.HelmRepository
}

// GetContainerRegistry returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) GetContainerRegistry() ProjectSourceDetailContainerRegistryContainerRegistrySource {
	return v.ProjectSourceDetail.ContainerRegistry
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectSourceDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource struct {
	Git ProjectSourceDetailGitGitSource `json:"git"`

	TerraformModule ProjectSourceDetailTerraformModuleTerraformModuleSource `json:"terraformModule"`

	HelmRepository ProjectSourceDetailHelmRepositoryHelmRepositorySource `json:"helmRepository"`

	ContainerRegistry ProjectSourceDetailContainerRegistryContainerRegistrySource `json:"containerRegistry"`
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource) __premarshalJSON() (*__premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource, error) {
	var retval __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesBlueprintBlueprintManifestConfigurationSource

	retval.Git = v.ProjectSourceDetail.Git
	retval.TerraformModule = v.ProjectSourceDetail.TerraformModule
	retval.HelmRepository = v.ProjectSourceDetail.HelmRepository
	retval.ContainerRegistry = v.ProjectSourceDetail.ContainerRegistry
	return &retval, nil
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration includes the requested fields of the GraphQL type KubernetesGeneratorConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration struct {
	ContainerRegistrySource       DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource       `json:"containerRegistrySource"`
	AppId                         string                                                                                                                                        `json:"appId"`
	BranchName                    string                                                                                                                                        `json:"branchName"`
	ProductionBranchName          string                                                                                                                                        `json:"productionBranchName"`
	Envs                          []DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar                  `json:"envs"`
	AppGeneratorVersion           string                                                                                                                                        `json:"appGeneratorVersion"`
	CpuRequest                    string                                                                                                                                        `json:"cpuRequest"`
	MemoryRequest                 string                                                                                                                                        `json:"memoryRequest"`
	EphemeralStorage              string                                                                                                                                        `json:"ephemeralStorage"`
	Dedicated                     bool                                                                                                                                          `json:"dedicated"`
	GpuRequest                    string                                                                                                                                        `json:"gpuRequest"`
	GpuType                       string                                                                                                                                        `json:"gpuType"`
	TpuType                       string                                                                                                                                        `json:"tpuType"`
	TpuTfVersion                  string                                                                                                                                        `json:"tpuTfVersion"`
	TpuCores                      int                                                                                                                                           `json:"tpuCores"`
	Replicas                      int                                                                                                                                           `json:"replicas"`
	Autoscaling                   DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData    `json:"autoscaling"`
	Ports                         []DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData               `json:"ports"`
	StaticIp                      bool                                                                                                                                          `json:"staticIp"`
	HostNetwork                   bool                                                                                                                                          `json:"hostNetwork"`
	Endpoint                      string                                                                                                                                        `json:"endpoint"`
	DefaultIngressDomain          string                                                                                                                                        `json:"defaultIngressDomain"`
	Volumes                       []DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec           `json:"volumes"`
	SecretMounts                  []DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData `json:"secretMounts"`
	DeployStrategy                DeployStrategy                                                                                                                                `json:"deployStrategy"`
	PreStopSleep                  int                                                                                                                                           `json:"preStopSleep"`
	TerminationGracePeriodSeconds int                                                                                                                                           `json:"terminationGracePeriodSeconds"`
	StartupProbe                  DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData         `json:"startupProbe"`
	LivenessProbe                 DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData        `json:"livenessProbe"`
	ReadinessProbe                DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData       `json:"readinessProbe"`
	LogShipperType                LogShipperType                                                                                                                                `json:"logShipperType"`
	BetterstackToken              string                                                                                                                                        `json:"betterstackToken"`
	DatadogApmEnabled             bool                                                                                                                                          `json:"datadogApmEnabled"`
	DatadogHost                   string                                                                                                                                        `json:"datadogHost"`
	DatadogKey                    string                                                                                                                                        `json:"datadogKey"`
	LogDnaKey                     string                                                                                                                                        `json:"logDnaKey"`
	LogzToken                     string                                                                                                                                        `json:"logzToken"`
	LogzUrl                       string                                                                                                                                        `json:"logzUrl"`
	SyslogConfig                  string                                                                                                                                        `json:"syslogConfig"`
	DockerEntrypoint              []string                                                                                                                                      `json:"dockerEntrypoint"`
	DockerCommand                 []string                                                                                                                                      `json:"dockerCommand"`
	AwsIamRole                    string                                                                                                                                        `json:"awsIamRole"`
	GcpServiceAccount             string                                                                                                                                        `json:"gcpServiceAccount"`
	ServiceAccountName            string                                                                                                                                        `json:"serviceAccountName"`
	Annotations                   map[string]string                                                                                                                             `json:"annotations"`
	ServiceAnnotations            map[string]string                                                                                                                             `json:"serviceAnnotations"`
	NodeSelector                  map[string]string                                                                                                                             `json:"nodeSelector"`
	PodSpecPatch                  string                                                                                                                                        `json:"podSpecPatch"`
	LegacyRepo                    DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo                    `json:"legacyRepo"`
}

// GetContainerRegistrySource returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.ContainerRegistrySource, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetContainerRegistrySource() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource {
	return v.ContainerRegistrySource
}

// GetAppId returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.AppId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetAppId() string {
	return v.AppId
}

// GetBranchName returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.BranchName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetBranchName() string {
	return v.BranchName
}

// GetProductionBranchName returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.ProductionBranchName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetProductionBranchName() string {
	return v.ProductionBranchName
}

// GetEnvs returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Envs, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetEnvs() []DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar {
	return v.Envs
}

// GetAppGeneratorVersion returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.AppGeneratorVersion, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetAppGeneratorVersion() string {
	return v.AppGeneratorVersion
}

// GetCpuRequest returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.CpuRequest, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetCpuRequest() string {
	return v.CpuRequest
}

// GetMemoryRequest returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.MemoryRequest, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetMemoryRequest() string {
	return v.MemoryRequest
}

// GetEphemeralStorage returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetEphemeralStorage() string {
	return v.EphemeralStorage
}

// GetDedicated returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Dedicated, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDedicated() bool {
	return v.Dedicated
}

// GetGpuRequest returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.GpuRequest, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetGpuRequest() string {
	return v.GpuRequest
}

// GetGpuType returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.GpuType, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetGpuType() string {
	return v.GpuType
}

// GetTpuType returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.TpuType, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetTpuType() string {
	return v.TpuType
}

// GetTpuTfVersion returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.TpuTfVersion, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetTpuTfVersion() string {
	return v.TpuTfVersion
}

// GetTpuCores returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.TpuCores, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetTpuCores() int {
	return v.TpuCores
}

// GetReplicas returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Replicas, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetReplicas() int {
	return v.Replicas
}

// GetAutoscaling returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Autoscaling, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetAutoscaling() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData {
	return v.Autoscaling
}

// GetPorts returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Ports, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetPorts() []DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData {
	return v.Ports
}

// GetStaticIp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.StaticIp, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetStaticIp() bool {
	return v.StaticIp
}

// GetHostNetwork returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.HostNetwork, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetHostNetwork() bool {
	return v.HostNetwork
}

// GetEndpoint returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Endpoint, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetEndpoint() string {
	return v.Endpoint
}

// GetDefaultIngressDomain returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDefaultIngressDomain() string {
	return v.DefaultIngressDomain
}

// GetVolumes returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Volumes, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetVolumes() []DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec {
	return v.Volumes
}

// GetSecretMounts returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.SecretMounts, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetSecretMounts() []DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData {
	return v.SecretMounts
}

// GetDeployStrategy returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DeployStrategy, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDeployStrategy() DeployStrategy {
	return v.DeployStrategy
}

// GetPreStopSleep returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.PreStopSleep, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetPreStopSleep() int {
	return v.PreStopSleep
}

// GetTerminationGracePeriodSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetTerminationGracePeriodSeconds() int {
	return v.TerminationGracePeriodSeconds
}

// GetStartupProbe returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.StartupProbe, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetStartupProbe() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData {
	return v.StartupProbe
}

// GetLivenessProbe returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.LivenessProbe, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetLivenessProbe() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData {
	return v.LivenessProbe
}

// GetReadinessProbe returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetReadinessProbe() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData {
	return v.ReadinessProbe
}

// GetLogShipperType returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.LogShipperType, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetLogShipperType() LogShipperType {
	return v.LogShipperType
}

// GetBetterstackToken returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.BetterstackToken, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetBetterstackToken() string {
	return v.BetterstackToken
}

// GetDatadogApmEnabled returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDatadogApmEnabled() bool {
	return v.DatadogApmEnabled
}

// GetDatadogHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DatadogHost, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDatadogHost() string {
	return v.DatadogHost
}

// GetDatadogKey returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DatadogKey, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDatadogKey() string {
	return v.DatadogKey
}

// GetLogDnaKey returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.LogDnaKey, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetLogDnaKey() string {
	return v.LogDnaKey
}

// GetLogzToken returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.LogzToken, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetLogzToken() string {
	return v.LogzToken
}

// GetLogzUrl returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.LogzUrl, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetLogzUrl() string {
	return v.LogzUrl
}

// GetSyslogConfig returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.SyslogConfig, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetSyslogConfig() string {
	return v.SyslogConfig
}

// GetDockerEntrypoint returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DockerEntrypoint, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDockerEntrypoint() []string {
	return v.DockerEntrypoint
}

// GetDockerCommand returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.DockerCommand, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetDockerCommand() []string {
	return v.DockerCommand
}

// GetAwsIamRole returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.AwsIamRole, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetAwsIamRole() string {
	return v.AwsIamRole
}

// GetGcpServiceAccount returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetGcpServiceAccount() string {
	return v.GcpServiceAccount
}

// GetServiceAccountName returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.ServiceAccountName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetServiceAccountName() string {
	return v.ServiceAccountName
}

// GetAnnotations returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.Annotations, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetAnnotations() map[string]string {
	return v.Annotations
}

// GetServiceAnnotations returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.ServiceAnnotations, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetServiceAnnotations() map[string]string {
	return v.ServiceAnnotations
}

// GetNodeSelector returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.NodeSelector, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetNodeSelector() map[string]string {
	return v.NodeSelector
}

// GetPodSpecPatch returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.PodSpecPatch, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetPodSpecPatch() string {
	return v.PodSpecPatch
}

// GetLegacyRepo returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration.LegacyRepo, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfiguration) GetLegacyRepo() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo {
	return v.LegacyRepo
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData includes the requested fields of the GraphQL type AutoscalingData.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData struct {
	MinReplicas          int                                                                                                                                                                    `json:"minReplicas"`
	MaxReplicas          int                                                                                                                                                                    `json:"maxReplicas"`
	CoolDownPeriod       int                                                                                                                                                                    `json:"coolDownPeriod"`
	Spec                 string                                                                                                                                                                 `json:"spec"`
	Triggers             []DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger `json:"triggers"`
	KedaScaledObjectSpec string                                                                                                                                                                 `json:"kedaScaledObjectSpec"`
}

// GetMinReplicas returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData.MinReplicas, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData) GetMinReplicas() int {
	return v.MinReplicas
}

// GetMaxReplicas returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData.MaxReplicas, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData) GetMaxReplicas() int {
	return v.MaxReplicas
}

// GetCoolDownPeriod returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData.CoolDownPeriod, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData) GetCoolDownPeriod() int {
	return v.CoolDownPeriod
}

// GetSpec returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData.Spec, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData) GetSpec() string {
	return v.Spec
}

// GetTriggers returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData.Triggers, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData) GetTriggers() []DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger {
	return v.Triggers
}

// GetKedaScaledObjectSpec returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData.KedaScaledObjectSpec, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingData) GetKedaScaledObjectSpec() string {
	return v.KedaScaledObjectSpec
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger includes the requested fields of the GraphQL type AutoscalingTrigger.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger struct {
	Type string `json:"type"`
	Spec string `json:"spec"`
}

// GetType returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger.Type, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger) GetType() string {
	return v.Type
}

// GetSpec returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger.Spec, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationAutoscalingAutoscalingDataTriggersAutoscalingTrigger) GetSpec() string {
	return v.Spec
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource includes the requested fields of the GraphQL type ContainerRegistrySource.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource struct {
	RegistryId  uuid.UUID `json:"registryId"`
	RegistryUrl string    `json:"registryUrl"`
	Repository  string    `json:"repository"`
	Tag         string    `json:"tag"`
	Digest      string    `json:"digest"`
}

// GetRegistryId returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource.RegistryId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource) GetRegistryId() uuid.UUID {
	return v.RegistryId
}

// GetRegistryUrl returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource.RegistryUrl, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource) GetRegistryUrl() string {
	return v.RegistryUrl
}

// GetRepository returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource.Repository, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource) GetRepository() string {
	return v.Repository
}

// GetTag returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource.Tag, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource) GetTag() string {
	return v.Tag
}

// GetDigest returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource.Digest, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationContainerRegistrySource) GetDigest() string {
	return v.Digest
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar struct {
	Id        uuid.UUID                                                                                                                        `json:"id"`
	Name      string                                                                                                                           `json:"name"`
	Value     string                                                                                                                           `json:"value"`
	Visible   bool                                                                                                                             `json:"visible"`
	Sealed    bool                                                                                                                             `json:"sealed"`
	Source    DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVarSource `json:"source"`
	CreatedAt time.Time                                                                                                                        `json:"createdAt"`
	UpdatedAt time.Time                                                                                                                        `json:"updatedAt"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetId() uuid.UUID {
	return v.Id
}

// GetName returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetName() string {
	return v.Name
}

// GetValue returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetValue() string {
	return v.Value
}

// GetVisible returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.Visible, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetVisible() bool {
	return v.Visible
}

// GetSealed returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.Sealed, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetSealed() bool {
	return v.Sealed
}

// GetSource returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.Source, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetSource() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVarSource {
	return v.Source
}

// GetCreatedAt returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.CreatedAt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVar) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVarSource includes the requested fields of the GraphQL type EnvVarSource.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVarSource struct {
	Type EnvVarSourceType `json:"type"`
}

// GetType returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVarSource.Type, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationEnvsEnvVarSource) GetType() EnvVarSourceType {
	return v.Type
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo includes the requested fields of the GraphQL type LegacyRepo.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo struct {
	Id    string `json:"id"`
	Name  string `json:"name"`
	AppId string `json:"appId"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo) GetId() string {
	return v.Id
}

// GetName returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo) GetName() string {
	return v.Name
}

// GetAppId returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo.AppId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLegacyRepo) GetAppId() string {
	return v.AppId
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData includes the requested fields of the GraphQL type ProbeData.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData struct {
	Command             string                                                                                                                                              `json:"command"`
	Http                DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe `json:"http"`
	Tcp                 DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe   `json:"tcp"`
	InitialDelaySeconds int                                                                                                                                                 `json:"initialDelaySeconds"`
	PeriodSeconds       int                                                                                                                                                 `json:"periodSeconds"`
	SuccessThreshold    int                                                                                                                                                 `json:"successThreshold"`
	FailureThreshold    int                                                                                                                                                 `json:"failureThreshold"`
	TimeoutSeconds      int                                                                                                                                                 `json:"timeoutSeconds"`
}

// GetCommand returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.Command, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetCommand() string {
	return v.Command
}

// GetHttp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.Http, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetHttp() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe {
	return v.Http
}

// GetTcp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.Tcp, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetTcp() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe {
	return v.Tcp
}

// GetInitialDelaySeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetInitialDelaySeconds() int {
	return v.InitialDelaySeconds
}

// GetPeriodSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetPeriodSeconds() int {
	return v.PeriodSeconds
}

// GetSuccessThreshold returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetSuccessThreshold() int {
	return v.SuccessThreshold
}

// GetFailureThreshold returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.FailureThreshold, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetFailureThreshold() int {
	return v.FailureThreshold
}

// GetTimeoutSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeData) GetTimeoutSeconds() int {
	return v.TimeoutSeconds
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe includes the requested fields of the GraphQL type HTTPProbe.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Path string `json:"path"`
}

// GetHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe.Host, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe) GetHost() string {
	return v.Host
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe) GetPort() string {
	return v.Port
}

// GetPath returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe.Path, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataHttpHTTPProbe) GetPath() string {
	return v.Path
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe includes the requested fields of the GraphQL type TCPProbe.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe struct {
	Host string `json:"host"`
	Port string `json:"port"`
}

// GetHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe.Host, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe) GetHost() string {
	return v.Host
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationLivenessProbeProbeDataTcpTCPProbe) GetPort() string {
	return v.Port
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData includes the requested fields of the GraphQL type PortData.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData struct {
	Port         string `json:"port"`
	Https        bool   `json:"https"`
	Grpc         bool   `json:"grpc"`
	Public       bool   `json:"public"`
	Protocol     string `json:"protocol"`
	LoadBalancer bool   `json:"loadBalancer"`
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData) GetPort() string {
	return v.Port
}

// GetHttps returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData.Https, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData) GetHttps() bool {
	return v.Https
}

// GetGrpc returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData.Grpc, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData) GetGrpc() bool {
	return v.Grpc
}

// GetPublic returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData.Public, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData) GetPublic() bool {
	return v.Public
}

// GetProtocol returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData.Protocol, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData) GetProtocol() string {
	return v.Protocol
}

// GetLoadBalancer returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData.LoadBalancer, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationPortsPortData) GetLoadBalancer() bool {
	return v.LoadBalancer
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData includes the requested fields of the GraphQL type ProbeData.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData struct {
	Command             string                                                                                                                                               `json:"command"`
	Http                DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe `json:"http"`
	Tcp                 DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe   `json:"tcp"`
	InitialDelaySeconds int                                                                                                                                                  `json:"initialDelaySeconds"`
	PeriodSeconds       int                                                                                                                                                  `json:"periodSeconds"`
	SuccessThreshold    int                                                                                                                                                  `json:"successThreshold"`
	FailureThreshold    int                                                                                                                                                  `json:"failureThreshold"`
	TimeoutSeconds      int                                                                                                                                                  `json:"timeoutSeconds"`
}

// GetCommand returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.Command, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetCommand() string {
	return v.Command
}

// GetHttp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.Http, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetHttp() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe {
	return v.Http
}

// GetTcp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.Tcp, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetTcp() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe {
	return v.Tcp
}

// GetInitialDelaySeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetInitialDelaySeconds() int {
	return v.InitialDelaySeconds
}

// GetPeriodSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetPeriodSeconds() int {
	return v.PeriodSeconds
}

// GetSuccessThreshold returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetSuccessThreshold() int {
	return v.SuccessThreshold
}

// GetFailureThreshold returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.FailureThreshold, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetFailureThreshold() int {
	return v.FailureThreshold
}

// GetTimeoutSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeData) GetTimeoutSeconds() int {
	return v.TimeoutSeconds
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe includes the requested fields of the GraphQL type HTTPProbe.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Path string `json:"path"`
}

// GetHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe.Host, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe) GetHost() string {
	return v.Host
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe) GetPort() string {
	return v.Port
}

// GetPath returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe.Path, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataHttpHTTPProbe) GetPath() string {
	return v.Path
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe includes the requested fields of the GraphQL type TCPProbe.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe struct {
	Host string `json:"host"`
	Port string `json:"port"`
}

// GetHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe.Host, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe) GetHost() string {
	return v.Host
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationReadinessProbeProbeDataTcpTCPProbe) GetPort() string {
	return v.Port
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData includes the requested fields of the GraphQL type SecretMountData.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData struct {
	SecretName string `json:"secretName"`
	MountPath  string `json:"mountPath"`
	ReadOnly   bool   `json:"readOnly"`
}

// GetSecretName returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData.SecretName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData) GetSecretName() string {
	return v.SecretName
}

// GetMountPath returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData.MountPath, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData) GetMountPath() string {
	return v.MountPath
}

// GetReadOnly returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData.ReadOnly, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationSecretMountsSecretMountData) GetReadOnly() bool {
	return v.ReadOnly
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData includes the requested fields of the GraphQL type ProbeData.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData struct {
	Command             string                                                                                                                                             `json:"command"`
	Http                DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe `json:"http"`
	Tcp                 DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe   `json:"tcp"`
	InitialDelaySeconds int                                                                                                                                                `json:"initialDelaySeconds"`
	PeriodSeconds       int                                                                                                                                                `json:"periodSeconds"`
	SuccessThreshold    int                                                                                                                                                `json:"successThreshold"`
	FailureThreshold    int                                                                                                                                                `json:"failureThreshold"`
	TimeoutSeconds      int                                                                                                                                                `json:"timeoutSeconds"`
}

// GetCommand returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.Command, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetCommand() string {
	return v.Command
}

// GetHttp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.Http, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetHttp() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe {
	return v.Http
}

// GetTcp returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.Tcp, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetTcp() DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe {
	return v.Tcp
}

// GetInitialDelaySeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetInitialDelaySeconds() int {
	return v.InitialDelaySeconds
}

// GetPeriodSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetPeriodSeconds() int {
	return v.PeriodSeconds
}

// GetSuccessThreshold returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetSuccessThreshold() int {
	return v.SuccessThreshold
}

// GetFailureThreshold returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.FailureThreshold, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetFailureThreshold() int {
	return v.FailureThreshold
}

// GetTimeoutSeconds returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeData) GetTimeoutSeconds() int {
	return v.TimeoutSeconds
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe includes the requested fields of the GraphQL type HTTPProbe.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Path string `json:"path"`
}

// GetHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe.Host, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe) GetHost() string {
	return v.Host
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe) GetPort() string {
	return v.Port
}

// GetPath returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe.Path, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataHttpHTTPProbe) GetPath() string {
	return v.Path
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe includes the requested fields of the GraphQL type TCPProbe.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe struct {
	Host string `json:"host"`
	Port string `json:"port"`
}

// GetHost returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe.Host, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe) GetHost() string {
	return v.Host
}

// GetPort returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe.Port, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationStartupProbeProbeDataTcpTCPProbe) GetPort() string {
	return v.Port
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec includes the requested fields of the GraphQL type VolumeSpec.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec struct {
	Size      int    `json:"size"`
	MountPath string `json:"mountPath"`
}

// GetSize returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec.Size, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec) GetSize() int {
	return v.Size
}

// GetMountPath returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec.MountPath, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesGeneratorKubernetesGeneratorConfigurationVolumesVolumeSpec) GetMountPath() string {
	return v.MountPath
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration includes the requested fields of the GraphQL type ManifestTargetConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration struct {
	ClusterId uuid.UUID `json:"clusterId"`
	Namespace string    `json:"namespace"`
}

// GetClusterId returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration.ClusterId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration) GetClusterId() uuid.UUID {
	return v.ClusterId
}

// GetNamespace returns DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration.Namespace, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationKubernetesTargetManifestTargetConfiguration) GetNamespace() string {
	return v.Namespace
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform includes the requested fields of the GraphQL type DeploymentConfigurationTerraform.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform struct {
	Blueprint DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration `json:"blueprint"`
	Target    DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration       `json:"target"`
}

// GetBlueprint returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform.Blueprint, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform) GetBlueprint() DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration {
	return v.Blueprint
}

// GetTarget returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform.Target, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraform) GetTarget() DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration {
	return v.Target
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration includes the requested fields of the GraphQL type BlueprintTerraformConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration struct {
	Source              DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource                                          `json:"source"`
	OutputConfiguration DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration `json:"outputConfiguration"`
	TerraformVersion    string                                                                                                                                                        `json:"terraformVersion"`
}

// GetSource returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration.Source, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration) GetSource() DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource {
	return v.Source
}

// GetOutputConfiguration returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration.OutputConfiguration, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration) GetOutputConfiguration() DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration {
	return v.OutputConfiguration
}

// GetTerraformVersion returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration.TerraformVersion, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfiguration) GetTerraformVersion() string {
	return v.TerraformVersion
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration includes the requested fields of the GraphQL type TerraformOutputConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration struct {
	// Configuration for the automatic output handler. This configuration does not affect output defined via 'customization'.
	Automatic DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration `json:"automatic"`
	// A JSON object using Terraform configuration syntax
	// (https://developer.hashicorp.com/terraform/language/syntax/json), constituting
	// a valid "output" block.
	//
	// Example:
	// ```
	// {
	// "output": {
	// "example": {
	// "value": "${aws_instance.example}"
	// }
	// }
	// }
	// ```
	//
	// This must include the "output" key at the top level.
	//
	// To reference module values, use the expression mapping syntax: https://developer.hashicorp.com/terraform/language/syntax/json#expression-mapping
	Customization string `json:"customization"`
}

// GetAutomatic returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration.Automatic, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration) GetAutomatic() DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration {
	return v.Automatic
}

// GetCustomization returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration.Customization, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfiguration) GetCustomization() string {
	return v.Customization
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration includes the requested fields of the GraphQL type TerraformAutomaticOutputConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration struct {
	// Disable the 'automatic output' handler, which produces a single map named 'outputs' containing all module outputs.
	Disabled bool `json:"disabled"`
	// The keys of any module outputs that should be excluded from the automatic output value. Ignored when 'disabled' is true.
	Excluded []string `json:"excluded"`
	// Mark the automatic output as sensitive. This MUST be 'true' when any sensitive
	// module output is not specified 'excluded' *and* 'disabled' is false.
	Sensitive bool `json:"sensitive"`
}

// GetDisabled returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration.Disabled, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration) GetDisabled() bool {
	return v.Disabled
}

// GetExcluded returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration.Excluded, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration) GetExcluded() []string {
	return v.Excluded
}

// GetSensitive returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration.Sensitive, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationOutputConfigurationTerraformOutputConfigurationAutomaticTerraformAutomaticOutputConfiguration) GetSensitive() bool {
	return v.Sensitive
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource includes the requested fields of the GraphQL type Source.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource struct {
	ProjectSourceDetail `json:"-"`
}

// GetGit returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource.Git, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) GetGit() ProjectSourceDetailGitGitSource {
	return v.ProjectSourceDetail.Git
}

// GetTerraformModule returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource.TerraformModule, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) GetTerraformModule() ProjectSourceDetailTerraformModuleTerraformModuleSource {
	return v.ProjectSourceDetail.TerraformModule
}

// GetHelmRepository returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource.HelmRepository, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) GetHelmRepository() ProjectSourceDetailHelmRepositoryHelmRepositorySource {
	return v.ProjectSourceDetail.HelmRepository
}

// GetContainerRegistry returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) GetContainerRegistry() ProjectSourceDetailContainerRegistryContainerRegistrySource {
	return v.ProjectSourceDetail.ContainerRegistry
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectSourceDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource struct {
	Git ProjectSourceDetailGitGitSource `json:"git"`

	TerraformModule ProjectSourceDetailTerraformModuleTerraformModuleSource `json:"terraformModule"`

	HelmRepository ProjectSourceDetailHelmRepositoryHelmRepositorySource `json:"helmRepository"`

	ContainerRegistry ProjectSourceDetailContainerRegistryContainerRegistrySource `json:"containerRegistry"`
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource) __premarshalJSON() (*__premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource, error) {
	var retval __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationTerraformBlueprintBlueprintTerraformConfigurationSource

	retval.Git = v.ProjectSourceDetail.Git
	retval.TerraformModule = v.ProjectSourceDetail.TerraformModule
	retval.HelmRepository = v.ProjectSourceDetail.HelmRepository
	retval.ContainerRegistry = v.ProjectSourceDetail.ContainerRegistry
	return &retval, nil
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration includes the requested fields of the GraphQL type TerraformTargetConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration struct {
	ModuleName   string                                                                                                                                    `json:"moduleName"`
	StateBackend DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend `json:"stateBackend"`
	Provider     DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider         `json:"provider"`
}

// GetModuleName returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration.ModuleName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration) GetModuleName() string {
	return v.ModuleName
}

// GetStateBackend returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration.StateBackend, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration) GetStateBackend() DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend {
	return v.StateBackend
}

// GetProvider returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration.Provider, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfiguration) GetProvider() DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider {
	return v.Provider
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider includes the requested fields of the GraphQL type TerraformProvider.
// The GraphQL type's documentation follows.
//
// The Zeet-connected cloud account which will be mapped to a terraform provider
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider struct {
	AwsAccount DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderAwsAccountAWSAccount `json:"awsAccount"`
	GcpAccount DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderGcpAccountGCPAccount `json:"gcpAccount"`
	DoAccount  DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderDoAccountDOAccount   `json:"doAccount"`
	// Region name, when applicable
	Region string `json:"region"`
}

// GetAwsAccount returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider.AwsAccount, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider) GetAwsAccount() DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderAwsAccountAWSAccount {
	return v.AwsAccount
}

// GetGcpAccount returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider.GcpAccount, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider) GetGcpAccount() DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderGcpAccountGCPAccount {
	return v.GcpAccount
}

// GetDoAccount returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider.DoAccount, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider) GetDoAccount() DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderDoAccountDOAccount {
	return v.DoAccount
}

// GetRegion returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider.Region, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProvider) GetRegion() string {
	return v.Region
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderAwsAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderAwsAccountAWSAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderAwsAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderAwsAccountAWSAccount) GetId() uuid.UUID {
	return v.Id
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderDoAccountDOAccount includes the requested fields of the GraphQL type DOAccount.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderDoAccountDOAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderDoAccountDOAccount.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderDoAccountDOAccount) GetId() uuid.UUID {
	return v.Id
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderGcpAccountGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderGcpAccountGCPAccount struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderGcpAccountGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationProviderTerraformProviderGcpAccountGCPAccount) GetId() uuid.UUID {
	return v.Id
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend includes the requested fields of the GraphQL type TerraformStateBackend.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend struct {
	S3Bucket  DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration   `json:"s3Bucket"`
	GcsBucket DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration `json:"gcsBucket"`
}

// GetS3Bucket returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend.S3Bucket, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend) GetS3Bucket() DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration {
	return v.S3Bucket
}

// GetGcsBucket returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend.GcsBucket, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackend) GetGcsBucket() DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration {
	return v.GcsBucket
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration includes the requested fields of the GraphQL type GCSBucketConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration struct {
	GcpAccountId uuid.UUID `json:"gcpAccountId"`
	Location     string    `json:"location"`
	BucketName   string    `json:"bucketName"`
	Prefix       string    `json:"prefix"`
}

// GetGcpAccountId returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration.GcpAccountId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration) GetGcpAccountId() uuid.UUID {
	return v.GcpAccountId
}

// GetLocation returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration.Location, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration) GetLocation() string {
	return v.Location
}

// GetBucketName returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration.BucketName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration) GetBucketName() string {
	return v.BucketName
}

// GetPrefix returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration.Prefix, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendGcsBucketGCSBucketConfiguration) GetPrefix() string {
	return v.Prefix
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration includes the requested fields of the GraphQL type S3BucketConfiguration.
type DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration struct {
	AwsAccountId uuid.UUID `json:"awsAccountId"`
	Region       string    `json:"region"`
	BucketName   string    `json:"bucketName"`
	Key          string    `json:"key"`
}

// GetAwsAccountId returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration.AwsAccountId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration) GetAwsAccountId() uuid.UUID {
	return v.AwsAccountId
}

// GetRegion returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration.Region, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration) GetRegion() string {
	return v.Region
}

// GetBucketName returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration.BucketName, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration) GetBucketName() string {
	return v.BucketName
}

// GetKey returns DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration.Key, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationTerraformTargetTerraformTargetConfigurationStateBackendTerraformStateBackendS3BucketS3BucketConfiguration) GetKey() string {
	return v.Key
}

// DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable includes the requested fields of the GraphQL type DeployVariable.
type DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable struct {
	DeployVariableDetail `json:"-"`
}

// GetId returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.Id, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetId() uuid.UUID {
	return v.DeployVariableDetail.Id
}

// GetSpecId returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.SpecId, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetSpecId() uuid.UUID {
	return v.DeployVariableDetail.SpecId
}

// GetName returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.Name, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetName() string {
	return v.DeployVariableDetail.Name
}

// GetValue returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.Value, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetValue() string {
	return v.DeployVariableDetail.Value
}

// GetValueString returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.ValueString, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetValueString() string {
	return v.DeployVariableDetail.ValueString
}

// GetValueBoolean returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.ValueBoolean, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetValueBoolean() bool {
	return v.DeployVariableDetail.ValueBoolean
}

// GetValueInt returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.ValueInt, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetValueInt() int {
	return v.DeployVariableDetail.ValueInt
}

// GetValueFloat returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.ValueFloat, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetValueFloat() float64 {
	return v.DeployVariableDetail.ValueFloat
}

// GetValueJson returns DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable.ValueJson, and is useful for accessing the field via an interface.
func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) GetValueJson() string {
	return v.DeployVariableDetail.ValueJson
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable
		graphql.NoUnmarshalJSON
	}
	firstPass.DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeployVariableDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable struct {
	Id uuid.UUID `json:"id"`

	SpecId uuid.UUID `json:"specId"`

	Name string `json:"name"`

	Value string `json:"value"`

	ValueString string `json:"valueString"`

	ValueBoolean bool `json:"valueBoolean"`

	ValueInt int `json:"valueInt"`

	ValueFloat float64 `json:"valueFloat"`

	ValueJson string `json:"valueJson"`
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable) __premarshalJSON() (*__premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable, error) {
	var retval __premarshalDeployConfigurationDetailConfigurationDeploymentConfigurationVariablesDeployVariable

	retval.Id = v.DeployVariableDetail.Id
	retval.SpecId = v.DeployVariableDetail.SpecId
	retval.Name = v.DeployVariableDetail.Name
	retval.Value = v.DeployVariableDetail.Value
	retval.ValueString = v.DeployVariableDetail.ValueString
	retval.ValueBoolean = v.DeployVariableDetail.ValueBoolean
	retval.ValueInt = v.DeployVariableDetail.ValueInt
	retval.ValueFloat = v.DeployVariableDetail.ValueFloat
	retval.ValueJson = v.DeployVariableDetail.ValueJson
	return &retval, nil
}

type DeployStrategy string

const (
	DeployStrategyRestart DeployStrategy = "RESTART"
	DeployStrategyRolling DeployStrategy = "ROLLING"
)

// DeployVariableDetail includes the GraphQL fields of DeployVariable requested by the fragment DeployVariableDetail.
type DeployVariableDetail struct {
	Id           uuid.UUID `json:"id"`
	SpecId       uuid.UUID `json:"specId"`
	Name         string    `json:"name"`
	Value        string    `json:"value"`
	ValueString  string    `json:"valueString"`
	ValueBoolean bool      `json:"valueBoolean"`
	ValueInt     int       `json:"valueInt"`
	ValueFloat   float64   `json:"valueFloat"`
	ValueJson    string    `json:"valueJson"`
}

// GetId returns DeployVariableDetail.Id, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetId() uuid.UUID { return v.Id }

// GetSpecId returns DeployVariableDetail.SpecId, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetSpecId() uuid.UUID { return v.SpecId }

// GetName returns DeployVariableDetail.Name, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetName() string { return v.Name }

// GetValue returns DeployVariableDetail.Value, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetValue() string { return v.Value }

// GetValueString returns DeployVariableDetail.ValueString, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetValueString() string { return v.ValueString }

// GetValueBoolean returns DeployVariableDetail.ValueBoolean, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetValueBoolean() bool { return v.ValueBoolean }

// GetValueInt returns DeployVariableDetail.ValueInt, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetValueInt() int { return v.ValueInt }

// GetValueFloat returns DeployVariableDetail.ValueFloat, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetValueFloat() float64 { return v.ValueFloat }

// GetValueJson returns DeployVariableDetail.ValueJson, and is useful for accessing the field via an interface.
func (v *DeployVariableDetail) GetValueJson() string { return v.ValueJson }

type DeploymentConfigurationAwsSamInput struct {
	Target    AwsSamTargetConfigurationInput    `json:"target"`
	Generator AwsSamGeneratorConfigurationInput `json:"generator"`
}

// GetTarget returns DeploymentConfigurationAwsSamInput.Target, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationAwsSamInput) GetTarget() AwsSamTargetConfigurationInput {
	return v.Target
}

// GetGenerator returns DeploymentConfigurationAwsSamInput.Generator, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationAwsSamInput) GetGenerator() AwsSamGeneratorConfigurationInput {
	return v.Generator
}

type DeploymentConfigurationGcpCloudRunInput struct {
	Target    GcpCloudRunTargetConfigurationInput    `json:"target"`
	Generator GcpCloudRunGeneratorConfigurationInput `json:"generator"`
}

// GetTarget returns DeploymentConfigurationGcpCloudRunInput.Target, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationGcpCloudRunInput) GetTarget() GcpCloudRunTargetConfigurationInput {
	return v.Target
}

// GetGenerator returns DeploymentConfigurationGcpCloudRunInput.Generator, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationGcpCloudRunInput) GetGenerator() GcpCloudRunGeneratorConfigurationInput {
	return v.Generator
}

type DeploymentConfigurationInput struct {
	DefaultWorkflowSteps []BlueprintDriverWorkflowStepAction        `json:"defaultWorkflowSteps"`
	RequirePlanApproval  bool                                       `json:"requirePlanApproval"`
	Variables            []BlueprintVariableInput                   `json:"variables"`
	Kubernetes           DeploymentConfigurationKubernetesInput     `json:"kubernetes"`
	Helm                 DeploymentConfigurationKubernetesHelmInput `json:"helm"`
	Terraform            DeploymentConfigurationTerraformInput      `json:"terraform"`
	AwsSam               DeploymentConfigurationAwsSamInput         `json:"awsSam"`
	GcpCloudRun          DeploymentConfigurationGcpCloudRunInput    `json:"gcpCloudRun"`
}

// GetDefaultWorkflowSteps returns DeploymentConfigurationInput.DefaultWorkflowSteps, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetDefaultWorkflowSteps() []BlueprintDriverWorkflowStepAction {
	return v.DefaultWorkflowSteps
}

// GetRequirePlanApproval returns DeploymentConfigurationInput.RequirePlanApproval, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetRequirePlanApproval() bool { return v.RequirePlanApproval }

// GetVariables returns DeploymentConfigurationInput.Variables, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetVariables() []BlueprintVariableInput { return v.Variables }

// GetKubernetes returns DeploymentConfigurationInput.Kubernetes, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetKubernetes() DeploymentConfigurationKubernetesInput {
	return v.Kubernetes
}

// GetHelm returns DeploymentConfigurationInput.Helm, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetHelm() DeploymentConfigurationKubernetesHelmInput {
	return v.Helm
}

// GetTerraform returns DeploymentConfigurationInput.Terraform, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetTerraform() DeploymentConfigurationTerraformInput {
	return v.Terraform
}

// GetAwsSam returns DeploymentConfigurationInput.AwsSam, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetAwsSam() DeploymentConfigurationAwsSamInput {
	return v.AwsSam
}

// GetGcpCloudRun returns DeploymentConfigurationInput.GcpCloudRun, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationInput) GetGcpCloudRun() DeploymentConfigurationGcpCloudRunInput {
	return v.GcpCloudRun
}

type DeploymentConfigurationKubernetesHelmInput struct {
	Blueprint BlueprintHelmConfigurationInput `json:"blueprint"`
	Target    HelmTargetConfigurationInput    `json:"target"`
	Values    string                          `json:"values"`
}

// GetBlueprint returns DeploymentConfigurationKubernetesHelmInput.Blueprint, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationKubernetesHelmInput) GetBlueprint() BlueprintHelmConfigurationInput {
	return v.Blueprint
}

// GetTarget returns DeploymentConfigurationKubernetesHelmInput.Target, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationKubernetesHelmInput) GetTarget() HelmTargetConfigurationInput {
	return v.Target
}

// GetValues returns DeploymentConfigurationKubernetesHelmInput.Values, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationKubernetesHelmInput) GetValues() string { return v.Values }

type DeploymentConfigurationKubernetesInput struct {
	Blueprint BlueprintManifestConfigurationInput   `json:"blueprint"`
	Target    ManifestTargetConfigurationInput      `json:"target"`
	Generator KubernetesGeneratorConfigurationInput `json:"generator"`
}

// GetBlueprint returns DeploymentConfigurationKubernetesInput.Blueprint, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationKubernetesInput) GetBlueprint() BlueprintManifestConfigurationInput {
	return v.Blueprint
}

// GetTarget returns DeploymentConfigurationKubernetesInput.Target, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationKubernetesInput) GetTarget() ManifestTargetConfigurationInput {
	return v.Target
}

// GetGenerator returns DeploymentConfigurationKubernetesInput.Generator, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationKubernetesInput) GetGenerator() KubernetesGeneratorConfigurationInput {
	return v.Generator
}

type DeploymentConfigurationTerraformInput struct {
	Blueprint BlueprintTerraformConfigurationInput `json:"blueprint"`
	Target    TerraformTargetConfigurationInput    `json:"target"`
}

// GetBlueprint returns DeploymentConfigurationTerraformInput.Blueprint, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationTerraformInput) GetBlueprint() BlueprintTerraformConfigurationInput {
	return v.Blueprint
}

// GetTarget returns DeploymentConfigurationTerraformInput.Target, and is useful for accessing the field via an interface.
func (v *DeploymentConfigurationTerraformInput) GetTarget() TerraformTargetConfigurationInput {
	return v.Target
}

type DriverWorkflowStepActionType string

const (
	DriverWorkflowStepActionTypeDriverPlanDestroy DriverWorkflowStepActionType = "DRIVER_PLAN_DESTROY"
	DriverWorkflowStepActionTypeDriverPlan        DriverWorkflowStepActionType = "DRIVER_PLAN"
	DriverWorkflowStepActionTypeDriverApprove     DriverWorkflowStepActionType = "DRIVER_APPROVE"
	DriverWorkflowStepActionTypeDriverApply       DriverWorkflowStepActionType = "DRIVER_APPLY"
	DriverWorkflowStepActionTypeProjectDelete     DriverWorkflowStepActionType = "PROJECT_DELETE"
)

type DuplicateProjectInput struct {
	GroupId      uuid.UUID `json:"groupId"`
	GroupName    string    `json:"groupName"`
	SubGroupId   uuid.UUID `json:"subGroupId"`
	SubGroupName string    `json:"subGroupName"`
	Name         string    `json:"name"`
}

// GetGroupId returns DuplicateProjectInput.GroupId, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetGroupId() uuid.UUID { return v.GroupId }

// GetGroupName returns DuplicateProjectInput.GroupName, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetGroupName() string { return v.GroupName }

// GetSubGroupId returns DuplicateProjectInput.SubGroupId, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetSubGroupId() uuid.UUID { return v.SubGroupId }

// GetSubGroupName returns DuplicateProjectInput.SubGroupName, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetSubGroupName() string { return v.SubGroupName }

// GetName returns DuplicateProjectInput.Name, and is useful for accessing the field via an interface.
func (v *DuplicateProjectInput) GetName() string { return v.Name }

// duplicateProjectResponse is returned by duplicateProject on success.
type DuplicateProjectResponse struct {
	DuplicateProject duplicateProjectDuplicateProject `json:"duplicateProject"`
}

// GetDuplicateProject returns DuplicateProjectResponse.DuplicateProject, and is useful for accessing the field via an interface.
func (v *DuplicateProjectResponse) GetDuplicateProject() duplicateProjectDuplicateProject {
	return v.DuplicateProject
}

type EjectClusterComponentInput struct {
	Name         string               `json:"name"`
	Type         ClusterComponentType `json:"type"`
	GroupName    string               `json:"groupName"`
	SubGroupName string               `json:"subGroupName"`
	ProjectName  string               `json:"projectName"`
}

// GetName returns EjectClusterComponentInput.Name, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentInput) GetName() string { return v.Name }

// GetType returns EjectClusterComponentInput.Type, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentInput) GetType() ClusterComponentType { return v.Type }

// GetGroupName returns EjectClusterComponentInput.GroupName, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentInput) GetGroupName() string { return v.GroupName }

// GetSubGroupName returns EjectClusterComponentInput.SubGroupName, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentInput) GetSubGroupName() string { return v.SubGroupName }

// GetProjectName returns EjectClusterComponentInput.ProjectName, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentInput) GetProjectName() string { return v.ProjectName }

// ejectClusterComponentResponse is returned by ejectClusterComponent on success.
type EjectClusterComponentResponse struct {
	EjectClusterComponent ejectClusterComponentEjectClusterComponent `json:"ejectClusterComponent"`
}

// GetEjectClusterComponent returns EjectClusterComponentResponse.EjectClusterComponent, and is useful for accessing the field via an interface.
func (v *EjectClusterComponentResponse) GetEjectClusterComponent() ejectClusterComponentEjectClusterComponent {
	return v.EjectClusterComponent
}

type EnvVarInput struct {
	Name   string `json:"name"`
	Value  string `json:"value"`
	Sealed bool   `json:"sealed"`
}

// GetName returns EnvVarInput.Name, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetName() string { return v.Name }

// GetValue returns EnvVarInput.Value, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetValue() string { return v.Value }

// GetSealed returns EnvVarInput.Sealed, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetSealed() bool { return v.Sealed }

type EnvVarSourceType string

const (
	EnvVarSourceTypeZeet        EnvVarSourceType = "ZEET"
	EnvVarSourceTypeCluster     EnvVarSourceType = "CLUSTER"
	EnvVarSourceTypeGroup       EnvVarSourceType = "GROUP"
	EnvVarSourceTypeSubgroup    EnvVarSourceType = "SUBGROUP"
	EnvVarSourceTypeProject     EnvVarSourceType = "PROJECT"
	EnvVarSourceTypeProjectLink EnvVarSourceType = "PROJECT_LINK"
)

type EventTriggerConfigurationInput struct {
	Git     GitEventTriggerConfigurationInput     `json:"git"`
	CronJob CronJobEventTriggerConfigurationInput `json:"cronJob"`
}

// GetGit returns EventTriggerConfigurationInput.Git, and is useful for accessing the field via an interface.
func (v *EventTriggerConfigurationInput) GetGit() GitEventTriggerConfigurationInput { return v.Git }

// GetCronJob returns EventTriggerConfigurationInput.CronJob, and is useful for accessing the field via an interface.
func (v *EventTriggerConfigurationInput) GetCronJob() CronJobEventTriggerConfigurationInput {
	return v.CronJob
}

type FilterCriterionOperatorType string

const (
	FilterCriterionOperatorTypeEquals    FilterCriterionOperatorType = "EQUALS"
	FilterCriterionOperatorTypeNotEquals FilterCriterionOperatorType = "NOT_EQUALS"
	FilterCriterionOperatorTypeIncludes  FilterCriterionOperatorType = "INCLUDES"
	FilterCriterionOperatorTypeExcludes  FilterCriterionOperatorType = "EXCLUDES"
	FilterCriterionOperatorTypeStarts    FilterCriterionOperatorType = "STARTS"
	FilterCriterionOperatorTypeEnds      FilterCriterionOperatorType = "ENDS"
	FilterCriterionOperatorTypeContains  FilterCriterionOperatorType = "CONTAINS"
)

type GCSBucketBackendInput struct {
	GcpAccountId uuid.UUID `json:"gcpAccountId"`
	BucketName   string    `json:"bucketName"`
	Location     string    `json:"location"`
	Prefix       string    `json:"prefix"`
}

// GetGcpAccountId returns GCSBucketBackendInput.GcpAccountId, and is useful for accessing the field via an interface.
func (v *GCSBucketBackendInput) GetGcpAccountId() uuid.UUID { return v.GcpAccountId }

// GetBucketName returns GCSBucketBackendInput.BucketName, and is useful for accessing the field via an interface.
func (v *GCSBucketBackendInput) GetBucketName() string { return v.BucketName }

// GetLocation returns GCSBucketBackendInput.Location, and is useful for accessing the field via an interface.
func (v *GCSBucketBackendInput) GetLocation() string { return v.Location }

// GetPrefix returns GCSBucketBackendInput.Prefix, and is useful for accessing the field via an interface.
func (v *GCSBucketBackendInput) GetPrefix() string { return v.Prefix }

type GcpCloudRunGeneratorConfigurationInput struct {
	EnvVars         []EnvVarInput `json:"envVars"`
	Name            string        `json:"name"`
	HttpPort        string        `json:"httpPort"`
	ContainerMemory float64       `json:"containerMemory"`
	ContainerCpu    float64       `json:"containerCpu"`
	RunCommand      string        `json:"runCommand"`
}

// GetEnvVars returns GcpCloudRunGeneratorConfigurationInput.EnvVars, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetEnvVars() []EnvVarInput { return v.EnvVars }

// GetName returns GcpCloudRunGeneratorConfigurationInput.Name, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetName() string { return v.Name }

// GetHttpPort returns GcpCloudRunGeneratorConfigurationInput.HttpPort, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetHttpPort() string { return v.HttpPort }

// GetContainerMemory returns GcpCloudRunGeneratorConfigurationInput.ContainerMemory, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetContainerMemory() float64 {
	return v.ContainerMemory
}

// GetContainerCpu returns GcpCloudRunGeneratorConfigurationInput.ContainerCpu, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetContainerCpu() float64 { return v.ContainerCpu }

// GetRunCommand returns GcpCloudRunGeneratorConfigurationInput.RunCommand, and is useful for accessing the field via an interface.
func (v *GcpCloudRunGeneratorConfigurationInput) GetRunCommand() string { return v.RunCommand }

type GcpCloudRunTargetConfigurationInput struct {
	GcpAccountId uuid.UUID `json:"gcpAccountId"`
	GcpRegion    string    `json:"gcpRegion"`
}

// GetGcpAccountId returns GcpCloudRunTargetConfigurationInput.GcpAccountId, and is useful for accessing the field via an interface.
func (v *GcpCloudRunTargetConfigurationInput) GetGcpAccountId() uuid.UUID { return v.GcpAccountId }

// GetGcpRegion returns GcpCloudRunTargetConfigurationInput.GcpRegion, and is useful for accessing the field via an interface.
func (v *GcpCloudRunTargetConfigurationInput) GetGcpRegion() string { return v.GcpRegion }

// generateDownloadableLogLinkForWorkflowRunStepResponse is returned by generateDownloadableLogLinkForWorkflowRunStep on success.
type GenerateDownloadableLogLinkForWorkflowRunStepResponse struct {
	GenerateDownloadableLogLinkForWorkflowRunStep string `json:"generateDownloadableLogLinkForWorkflowRunStep"`
}

// GetGenerateDownloadableLogLinkForWorkflowRunStep returns GenerateDownloadableLogLinkForWorkflowRunStepResponse.GenerateDownloadableLogLinkForWorkflowRunStep, and is useful for accessing the field via an interface.
func (v *GenerateDownloadableLogLinkForWorkflowRunStepResponse) GetGenerateDownloadableLogLinkForWorkflowRunStep() string {
	return v.GenerateDownloadableLogLinkForWorkflowRunStep
}

type GenericWorkflowStepActionType string

const (
	GenericWorkflowStepActionTypeDriverPlanDestroy            GenericWorkflowStepActionType = "DRIVER_PLAN_DESTROY"
	GenericWorkflowStepActionTypeDriverPlan                   GenericWorkflowStepActionType = "DRIVER_PLAN"
	GenericWorkflowStepActionTypeDriverApprove                GenericWorkflowStepActionType = "DRIVER_APPROVE"
	GenericWorkflowStepActionTypeDriverApply                  GenericWorkflowStepActionType = "DRIVER_APPLY"
	GenericWorkflowStepActionTypeProjectDelete                GenericWorkflowStepActionType = "PROJECT_DELETE"
	GenericWorkflowStepActionTypeOrchestrationBuild           GenericWorkflowStepActionType = "ORCHESTRATION_BUILD"
	GenericWorkflowStepActionTypeOrchestrationClusterPrecheck GenericWorkflowStepActionType = "ORCHESTRATION_CLUSTER_PRECHECK"
	GenericWorkflowStepActionTypeOrchestrationDeploy          GenericWorkflowStepActionType = "ORCHESTRATION_DEPLOY"
	GenericWorkflowStepActionTypeOrchestrationRelease         GenericWorkflowStepActionType = "ORCHESTRATION_RELEASE"
	GenericWorkflowStepActionTypeOrchestrationDestroy         GenericWorkflowStepActionType = "ORCHESTRATION_DESTROY"
)

type GitEventTriggerConfigurationInput struct {
	RepoId             string `json:"repoId"`
	RepoBranchName     string `json:"repoBranchName"`
	RepoOwner          string `json:"repoOwner"`
	RepoName           string `json:"repoName"`
	GithubConnectionId int    `json:"githubConnectionId"`
}

// GetRepoId returns GitEventTriggerConfigurationInput.RepoId, and is useful for accessing the field via an interface.
func (v *GitEventTriggerConfigurationInput) GetRepoId() string { return v.RepoId }

// GetRepoBranchName returns GitEventTriggerConfigurationInput.RepoBranchName, and is useful for accessing the field via an interface.
func (v *GitEventTriggerConfigurationInput) GetRepoBranchName() string { return v.RepoBranchName }

// GetRepoOwner returns GitEventTriggerConfigurationInput.RepoOwner, and is useful for accessing the field via an interface.
func (v *GitEventTriggerConfigurationInput) GetRepoOwner() string { return v.RepoOwner }

// GetRepoName returns GitEventTriggerConfigurationInput.RepoName, and is useful for accessing the field via an interface.
func (v *GitEventTriggerConfigurationInput) GetRepoName() string { return v.RepoName }

// GetGithubConnectionId returns GitEventTriggerConfigurationInput.GithubConnectionId, and is useful for accessing the field via an interface.
func (v *GitEventTriggerConfigurationInput) GetGithubConnectionId() int { return v.GithubConnectionId }

type GitSourceInput struct {
	Repository  string                    `json:"repository"`
	Ref         string                    `json:"ref"`
	Path        string                    `json:"path"`
	Integration GitSourceIntegrationInput `json:"integration"`
}

// GetRepository returns GitSourceInput.Repository, and is useful for accessing the field via an interface.
func (v *GitSourceInput) GetRepository() string { return v.Repository }

// GetRef returns GitSourceInput.Ref, and is useful for accessing the field via an interface.
func (v *GitSourceInput) GetRef() string { return v.Ref }

// GetPath returns GitSourceInput.Path, and is useful for accessing the field via an interface.
func (v *GitSourceInput) GetPath() string { return v.Path }

// GetIntegration returns GitSourceInput.Integration, and is useful for accessing the field via an interface.
func (v *GitSourceInput) GetIntegration() GitSourceIntegrationInput { return v.Integration }

type GitSourceIntegrationInput struct {
	GithubInstallationId   int       `json:"githubInstallationId"`
	GithubIntegrationId    uuid.UUID `json:"githubIntegrationId"`
	GitlabIntegrationId    uuid.UUID `json:"gitlabIntegrationId"`
	BitbucketIntegrationId uuid.UUID `json:"bitbucketIntegrationId"`
}

// GetGithubInstallationId returns GitSourceIntegrationInput.GithubInstallationId, and is useful for accessing the field via an interface.
func (v *GitSourceIntegrationInput) GetGithubInstallationId() int { return v.GithubInstallationId }

// GetGithubIntegrationId returns GitSourceIntegrationInput.GithubIntegrationId, and is useful for accessing the field via an interface.
func (v *GitSourceIntegrationInput) GetGithubIntegrationId() uuid.UUID { return v.GithubIntegrationId }

// GetGitlabIntegrationId returns GitSourceIntegrationInput.GitlabIntegrationId, and is useful for accessing the field via an interface.
func (v *GitSourceIntegrationInput) GetGitlabIntegrationId() uuid.UUID { return v.GitlabIntegrationId }

// GetBitbucketIntegrationId returns GitSourceIntegrationInput.BitbucketIntegrationId, and is useful for accessing the field via an interface.
func (v *GitSourceIntegrationInput) GetBitbucketIntegrationId() uuid.UUID {
	return v.BitbucketIntegrationId
}

// groupsWithSubgroupsResponse is returned by groupsWithSubgroups on success.
type GroupsWithSubgroupsResponse struct {
	Team groupsWithSubgroupsTeam `json:"team"`
}

// GetTeam returns GroupsWithSubgroupsResponse.Team, and is useful for accessing the field via an interface.
func (v *GroupsWithSubgroupsResponse) GetTeam() groupsWithSubgroupsTeam { return v.Team }

type HTTPProbeInput struct {
	Host string `json:"host"`
	Port string `json:"port"`
	Path string `json:"path"`
}

// GetHost returns HTTPProbeInput.Host, and is useful for accessing the field via an interface.
func (v *HTTPProbeInput) GetHost() string { return v.Host }

// GetPort returns HTTPProbeInput.Port, and is useful for accessing the field via an interface.
func (v *HTTPProbeInput) GetPort() string { return v.Port }

// GetPath returns HTTPProbeInput.Path, and is useful for accessing the field via an interface.
func (v *HTTPProbeInput) GetPath() string { return v.Path }

type HelmRepositorySourceInput struct {
	RepositoryUrl string `json:"repositoryUrl"`
	Chart         string `json:"chart"`
	Version       string `json:"version"`
}

// GetRepositoryUrl returns HelmRepositorySourceInput.RepositoryUrl, and is useful for accessing the field via an interface.
func (v *HelmRepositorySourceInput) GetRepositoryUrl() string { return v.RepositoryUrl }

// GetChart returns HelmRepositorySourceInput.Chart, and is useful for accessing the field via an interface.
func (v *HelmRepositorySourceInput) GetChart() string { return v.Chart }

// GetVersion returns HelmRepositorySourceInput.Version, and is useful for accessing the field via an interface.
func (v *HelmRepositorySourceInput) GetVersion() string { return v.Version }

type HelmTargetConfigurationInput struct {
	ClusterId   uuid.UUID `json:"clusterId"`
	Namespace   string    `json:"namespace"`
	ReleaseName string    `json:"releaseName"`
}

// GetClusterId returns HelmTargetConfigurationInput.ClusterId, and is useful for accessing the field via an interface.
func (v *HelmTargetConfigurationInput) GetClusterId() uuid.UUID { return v.ClusterId }

// GetNamespace returns HelmTargetConfigurationInput.Namespace, and is useful for accessing the field via an interface.
func (v *HelmTargetConfigurationInput) GetNamespace() string { return v.Namespace }

// GetReleaseName returns HelmTargetConfigurationInput.ReleaseName, and is useful for accessing the field via an interface.
func (v *HelmTargetConfigurationInput) GetReleaseName() string { return v.ReleaseName }

type JobDefinitionInput struct {
	ContainerRegistry    ContainerRegistrySourceInput `json:"containerRegistry"`
	ClusterId            string                       `json:"clusterId"`
	JobName              string                       `json:"jobName"`
	JobNamespace         string                       `json:"jobNamespace"`
	DockerEntrypoint     []string                     `json:"dockerEntrypoint"`
	DockerCommand        []string                     `json:"dockerCommand"`
	EnvVars              []EnvVarInput                `json:"envVars"`
	Parallelism          int                          `json:"parallelism"`
	TimeoutSeconds       int                          `json:"timeoutSeconds"`
	AppGeneratorVersion  string                       `json:"appGeneratorVersion"`
	BranchName           string                       `json:"branchName"`
	ProductionBranchName string                       `json:"productionBranchName"`
	CpuRequest           string                       `json:"cpuRequest"`
	MemoryRequest        string                       `json:"memoryRequest"`
	EphemeralStorage     string                       `json:"ephemeralStorage"`
	Dedicated            bool                         `json:"dedicated"`
	GpuRequest           string                       `json:"gpuRequest"`
	GpuType              string                       `json:"gpuType"`
	TpuType              string                       `json:"tpuType"`
	TpuTfVersion         string                       `json:"tpuTfVersion"`
	TpuCores             int                          `json:"tpuCores"`
	StaticIp             bool                         `json:"staticIp"`
	HostNetwork          bool                         `json:"hostNetwork"`
	Volumes              []VolumeSpecInput            `json:"volumes"`
	SecretMounts         []SecretMountDataInput       `json:"secretMounts"`
	LogShipperType       LogShipperType               `json:"logShipperType"`
	BetterstackToken     string                       `json:"betterstackToken"`
	DatadogApmEnabled    bool                         `json:"datadogApmEnabled"`
	DatadogHost          string                       `json:"datadogHost"`
	DatadogKey           string                       `json:"datadogKey"`
	LogDnaKey            string                       `json:"logDnaKey"`
	LogzToken            string                       `json:"logzToken"`
	LogzUrl              string                       `json:"logzUrl"`
	SyslogConfig         string                       `json:"syslogConfig"`
	AwsIamRole           string                       `json:"awsIamRole"`
	GcpServiceAccount    string                       `json:"gcpServiceAccount"`
	ServiceAccountName   string                       `json:"serviceAccountName"`
	Annotations          map[string]string            `json:"annotations"`
	NodeSelector         map[string]string            `json:"nodeSelector"`
	PodSpecPatch         string                       `json:"podSpecPatch"`
}

// GetContainerRegistry returns JobDefinitionInput.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetContainerRegistry() ContainerRegistrySourceInput {
	return v.ContainerRegistry
}

// GetClusterId returns JobDefinitionInput.ClusterId, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetClusterId() string { return v.ClusterId }

// GetJobName returns JobDefinitionInput.JobName, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetJobName() string { return v.JobName }

// GetJobNamespace returns JobDefinitionInput.JobNamespace, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetJobNamespace() string { return v.JobNamespace }

// GetDockerEntrypoint returns JobDefinitionInput.DockerEntrypoint, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetDockerEntrypoint() []string { return v.DockerEntrypoint }

// GetDockerCommand returns JobDefinitionInput.DockerCommand, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetDockerCommand() []string { return v.DockerCommand }

// GetEnvVars returns JobDefinitionInput.EnvVars, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetEnvVars() []EnvVarInput { return v.EnvVars }

// GetParallelism returns JobDefinitionInput.Parallelism, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetParallelism() int { return v.Parallelism }

// GetTimeoutSeconds returns JobDefinitionInput.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetTimeoutSeconds() int { return v.TimeoutSeconds }

// GetAppGeneratorVersion returns JobDefinitionInput.AppGeneratorVersion, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetAppGeneratorVersion() string { return v.AppGeneratorVersion }

// GetBranchName returns JobDefinitionInput.BranchName, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetBranchName() string { return v.BranchName }

// GetProductionBranchName returns JobDefinitionInput.ProductionBranchName, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetProductionBranchName() string { return v.ProductionBranchName }

// GetCpuRequest returns JobDefinitionInput.CpuRequest, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetCpuRequest() string { return v.CpuRequest }

// GetMemoryRequest returns JobDefinitionInput.MemoryRequest, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetMemoryRequest() string { return v.MemoryRequest }

// GetEphemeralStorage returns JobDefinitionInput.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetEphemeralStorage() string { return v.EphemeralStorage }

// GetDedicated returns JobDefinitionInput.Dedicated, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetDedicated() bool { return v.Dedicated }

// GetGpuRequest returns JobDefinitionInput.GpuRequest, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetGpuRequest() string { return v.GpuRequest }

// GetGpuType returns JobDefinitionInput.GpuType, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetGpuType() string { return v.GpuType }

// GetTpuType returns JobDefinitionInput.TpuType, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetTpuType() string { return v.TpuType }

// GetTpuTfVersion returns JobDefinitionInput.TpuTfVersion, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetTpuTfVersion() string { return v.TpuTfVersion }

// GetTpuCores returns JobDefinitionInput.TpuCores, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetTpuCores() int { return v.TpuCores }

// GetStaticIp returns JobDefinitionInput.StaticIp, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetStaticIp() bool { return v.StaticIp }

// GetHostNetwork returns JobDefinitionInput.HostNetwork, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetHostNetwork() bool { return v.HostNetwork }

// GetVolumes returns JobDefinitionInput.Volumes, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetVolumes() []VolumeSpecInput { return v.Volumes }

// GetSecretMounts returns JobDefinitionInput.SecretMounts, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetSecretMounts() []SecretMountDataInput { return v.SecretMounts }

// GetLogShipperType returns JobDefinitionInput.LogShipperType, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetLogShipperType() LogShipperType { return v.LogShipperType }

// GetBetterstackToken returns JobDefinitionInput.BetterstackToken, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetBetterstackToken() string { return v.BetterstackToken }

// GetDatadogApmEnabled returns JobDefinitionInput.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetDatadogApmEnabled() bool { return v.DatadogApmEnabled }

// GetDatadogHost returns JobDefinitionInput.DatadogHost, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetDatadogHost() string { return v.DatadogHost }

// GetDatadogKey returns JobDefinitionInput.DatadogKey, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetDatadogKey() string { return v.DatadogKey }

// GetLogDnaKey returns JobDefinitionInput.LogDnaKey, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetLogDnaKey() string { return v.LogDnaKey }

// GetLogzToken returns JobDefinitionInput.LogzToken, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetLogzToken() string { return v.LogzToken }

// GetLogzUrl returns JobDefinitionInput.LogzUrl, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetLogzUrl() string { return v.LogzUrl }

// GetSyslogConfig returns JobDefinitionInput.SyslogConfig, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetSyslogConfig() string { return v.SyslogConfig }

// GetAwsIamRole returns JobDefinitionInput.AwsIamRole, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetAwsIamRole() string { return v.AwsIamRole }

// GetGcpServiceAccount returns JobDefinitionInput.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetGcpServiceAccount() string { return v.GcpServiceAccount }

// GetServiceAccountName returns JobDefinitionInput.ServiceAccountName, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetServiceAccountName() string { return v.ServiceAccountName }

// GetAnnotations returns JobDefinitionInput.Annotations, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetAnnotations() map[string]string { return v.Annotations }

// GetNodeSelector returns JobDefinitionInput.NodeSelector, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetNodeSelector() map[string]string { return v.NodeSelector }

// GetPodSpecPatch returns JobDefinitionInput.PodSpecPatch, and is useful for accessing the field via an interface.
func (v *JobDefinitionInput) GetPodSpecPatch() string { return v.PodSpecPatch }

// JobDetailItem includes the GraphQL fields of Job requested by the fragment JobDetailItem.
type JobDetailItem struct {
	Id         uuid.UUID                            `json:"id"`
	Definition JobDetailItemDefinitionJobDefinition `json:"definition"`
	Runs       JobDetailItemRunsJobRunConnection    `json:"runs"`
}

// GetId returns JobDetailItem.Id, and is useful for accessing the field via an interface.
func (v *JobDetailItem) GetId() uuid.UUID { return v.Id }

// GetDefinition returns JobDetailItem.Definition, and is useful for accessing the field via an interface.
func (v *JobDetailItem) GetDefinition() JobDetailItemDefinitionJobDefinition { return v.Definition }

// GetRuns returns JobDetailItem.Runs, and is useful for accessing the field via an interface.
func (v *JobDetailItem) GetRuns() JobDetailItemRunsJobRunConnection { return v.Runs }

// JobDetailItemDefinitionJobDefinition includes the requested fields of the GraphQL type JobDefinition.
type JobDetailItemDefinitionJobDefinition struct {
	JobName string `json:"jobName"`
}

// GetJobName returns JobDetailItemDefinitionJobDefinition.JobName, and is useful for accessing the field via an interface.
func (v *JobDetailItemDefinitionJobDefinition) GetJobName() string { return v.JobName }

// JobDetailItemRunsJobRunConnection includes the requested fields of the GraphQL type JobRunConnection.
type JobDetailItemRunsJobRunConnection struct {
	TotalCount int                                            `json:"totalCount"`
	PageInfo   JobDetailItemRunsJobRunConnectionPageInfo      `json:"pageInfo"`
	Nodes      []JobDetailItemRunsJobRunConnectionNodesJobRun `json:"nodes"`
}

// GetTotalCount returns JobDetailItemRunsJobRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnection) GetTotalCount() int { return v.TotalCount }

// GetPageInfo returns JobDetailItemRunsJobRunConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnection) GetPageInfo() JobDetailItemRunsJobRunConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns JobDetailItemRunsJobRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnection) GetNodes() []JobDetailItemRunsJobRunConnectionNodesJobRun {
	return v.Nodes
}

// JobDetailItemRunsJobRunConnectionNodesJobRun includes the requested fields of the GraphQL type JobRun.
type JobDetailItemRunsJobRunConnectionNodesJobRun struct {
	JobRunListItem `json:"-"`
}

// GetId returns JobDetailItemRunsJobRunConnectionNodesJobRun.Id, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) GetId() uuid.UUID { return v.JobRunListItem.Id }

// GetSequence returns JobDetailItemRunsJobRunConnectionNodesJobRun.Sequence, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) GetSequence() int {
	return v.JobRunListItem.Sequence
}

// GetCreatedAt returns JobDetailItemRunsJobRunConnectionNodesJobRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) GetCreatedAt() time.Time {
	return v.JobRunListItem.CreatedAt
}

// GetState returns JobDetailItemRunsJobRunConnectionNodesJobRun.State, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) GetState() JobRunState {
	return v.JobRunListItem.State
}

func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*JobDetailItemRunsJobRunConnectionNodesJobRun
		graphql.NoUnmarshalJSON
	}
	firstPass.JobDetailItemRunsJobRunConnectionNodesJobRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobRunListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalJobDetailItemRunsJobRunConnectionNodesJobRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	CreatedAt time.Time `json:"createdAt"`

	State JobRunState `json:"state"`
}

func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *JobDetailItemRunsJobRunConnectionNodesJobRun) __premarshalJSON() (*__premarshalJobDetailItemRunsJobRunConnectionNodesJobRun, error) {
	var retval __premarshalJobDetailItemRunsJobRunConnectionNodesJobRun

	retval.Id = v.JobRunListItem.Id
	retval.Sequence = v.JobRunListItem.Sequence
	retval.CreatedAt = v.JobRunListItem.CreatedAt
	retval.State = v.JobRunListItem.State
	return &retval, nil
}

// JobDetailItemRunsJobRunConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type JobDetailItemRunsJobRunConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns JobDetailItemRunsJobRunConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *JobDetailItemRunsJobRunConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// JobListItem includes the GraphQL fields of Job requested by the fragment JobListItem.
type JobListItem struct {
	Id         uuid.UUID                          `json:"id"`
	Definition JobListItemDefinitionJobDefinition `json:"definition"`
	Runs       JobListItemRunsJobRunConnection    `json:"runs"`
}

// GetId returns JobListItem.Id, and is useful for accessing the field via an interface.
func (v *JobListItem) GetId() uuid.UUID { return v.Id }

// GetDefinition returns JobListItem.Definition, and is useful for accessing the field via an interface.
func (v *JobListItem) GetDefinition() JobListItemDefinitionJobDefinition { return v.Definition }

// GetRuns returns JobListItem.Runs, and is useful for accessing the field via an interface.
func (v *JobListItem) GetRuns() JobListItemRunsJobRunConnection { return v.Runs }

// JobListItemDefinitionJobDefinition includes the requested fields of the GraphQL type JobDefinition.
type JobListItemDefinitionJobDefinition struct {
	JobName string `json:"jobName"`
}

// GetJobName returns JobListItemDefinitionJobDefinition.JobName, and is useful for accessing the field via an interface.
func (v *JobListItemDefinitionJobDefinition) GetJobName() string { return v.JobName }

// JobListItemRunsJobRunConnection includes the requested fields of the GraphQL type JobRunConnection.
type JobListItemRunsJobRunConnection struct {
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns JobListItemRunsJobRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *JobListItemRunsJobRunConnection) GetTotalCount() int { return v.TotalCount }

// jobListResponse is returned by jobList on success.
type JobListResponse struct {
	Team jobListTeam `json:"team"`
}

// GetTeam returns JobListResponse.Team, and is useful for accessing the field via an interface.
func (v *JobListResponse) GetTeam() jobListTeam { return v.Team }

// JobRunDetail includes the GraphQL fields of JobRun requested by the fragment JobRunDetail.
type JobRunDetail struct {
	JobRunListItem `json:"-"`
	UpdatedAt      time.Time                           `json:"updatedAt"`
	Command        string                              `json:"command"`
	ExitCode       int                                 `json:"exitCode"`
	ErrorMessage   string                              `json:"errorMessage"`
	Definition     JobRunDetailDefinitionJobDefinition `json:"definition"`
}

// GetUpdatedAt returns JobRunDetail.UpdatedAt, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetCommand returns JobRunDetail.Command, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetCommand() string { return v.Command }

// GetExitCode returns JobRunDetail.ExitCode, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetExitCode() int { return v.ExitCode }

// GetErrorMessage returns JobRunDetail.ErrorMessage, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetErrorMessage() string { return v.ErrorMessage }

// GetDefinition returns JobRunDetail.Definition, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetDefinition() JobRunDetailDefinitionJobDefinition { return v.Definition }

// GetId returns JobRunDetail.Id, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetId() uuid.UUID { return v.JobRunListItem.Id }

// GetSequence returns JobRunDetail.Sequence, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetSequence() int { return v.JobRunListItem.Sequence }

// GetCreatedAt returns JobRunDetail.CreatedAt, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetCreatedAt() time.Time { return v.JobRunListItem.CreatedAt }

// GetState returns JobRunDetail.State, and is useful for accessing the field via an interface.
func (v *JobRunDetail) GetState() JobRunState { return v.JobRunListItem.State }

func (v *JobRunDetail) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*JobRunDetail
		graphql.NoUnmarshalJSON
	}
	firstPass.JobRunDetail = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobRunListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalJobRunDetail struct {
	UpdatedAt time.Time `json:"updatedAt"`

	Command string `json:"command"`

	ExitCode int `json:"exitCode"`

	ErrorMessage string `json:"errorMessage"`

	Definition JobRunDetailDefinitionJobDefinition `json:"definition"`

	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	CreatedAt time.Time `json:"createdAt"`

	State JobRunState `json:"state"`
}

func (v *JobRunDetail) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *JobRunDetail) __premarshalJSON() (*__premarshalJobRunDetail, error) {
	var retval __premarshalJobRunDetail

	retval.UpdatedAt = v.UpdatedAt
	retval.Command = v.Command
	retval.ExitCode = v.ExitCode
	retval.ErrorMessage = v.ErrorMessage
	retval.Definition = v.Definition
	retval.Id = v.JobRunListItem.Id
	retval.Sequence = v.JobRunListItem.Sequence
	retval.CreatedAt = v.JobRunListItem.CreatedAt
	retval.State = v.JobRunListItem.State
	return &retval, nil
}

// JobRunDetailDefinitionJobDefinition includes the requested fields of the GraphQL type JobDefinition.
type JobRunDetailDefinitionJobDefinition struct {
	JobName string `json:"jobName"`
}

// GetJobName returns JobRunDetailDefinitionJobDefinition.JobName, and is useful for accessing the field via an interface.
func (v *JobRunDetailDefinitionJobDefinition) GetJobName() string { return v.JobName }

// jobRunDetailResponse is returned by jobRunDetail on success.
type JobRunDetailResponse struct {
	Team jobRunDetailTeam `json:"team"`
}

// GetTeam returns JobRunDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *JobRunDetailResponse) GetTeam() jobRunDetailTeam { return v.Team }

// JobRunListItem includes the GraphQL fields of JobRun requested by the fragment JobRunListItem.
type JobRunListItem struct {
	Id        uuid.UUID   `json:"id"`
	Sequence  int         `json:"sequence"`
	CreatedAt time.Time   `json:"createdAt"`
	State     JobRunState `json:"state"`
}

// GetId returns JobRunListItem.Id, and is useful for accessing the field via an interface.
func (v *JobRunListItem) GetId() uuid.UUID { return v.Id }

// GetSequence returns JobRunListItem.Sequence, and is useful for accessing the field via an interface.
func (v *JobRunListItem) GetSequence() int { return v.Sequence }

// GetCreatedAt returns JobRunListItem.CreatedAt, and is useful for accessing the field via an interface.
func (v *JobRunListItem) GetCreatedAt() time.Time { return v.CreatedAt }

// GetState returns JobRunListItem.State, and is useful for accessing the field via an interface.
func (v *JobRunListItem) GetState() JobRunState { return v.State }

// jobRunListResponse is returned by jobRunList on success.
type JobRunListResponse struct {
	Team jobRunListTeam `json:"team"`
}

// GetTeam returns JobRunListResponse.Team, and is useful for accessing the field via an interface.
func (v *JobRunListResponse) GetTeam() jobRunListTeam { return v.Team }

// JobRunLogs includes the GraphQL fields of JobRun requested by the fragment JobRunLogs.
type JobRunLogs struct {
	Id   uuid.UUID      `json:"id"`
	Logs JobRunLogsLogs `json:"logs"`
}

// GetId returns JobRunLogs.Id, and is useful for accessing the field via an interface.
func (v *JobRunLogs) GetId() uuid.UUID { return v.Id }

// GetLogs returns JobRunLogs.Logs, and is useful for accessing the field via an interface.
func (v *JobRunLogs) GetLogs() JobRunLogsLogs { return v.Logs }

// JobRunLogsLogs includes the requested fields of the GraphQL type Logs.
type JobRunLogsLogs struct {
	Id        uuid.UUID                       `json:"id"`
	Completed bool                            `json:"completed"`
	Expired   bool                            `json:"expired"`
	Entries   []JobRunLogsLogsEntriesLogEntry `json:"entries"`
}

// GetId returns JobRunLogsLogs.Id, and is useful for accessing the field via an interface.
func (v *JobRunLogsLogs) GetId() uuid.UUID { return v.Id }

// GetCompleted returns JobRunLogsLogs.Completed, and is useful for accessing the field via an interface.
func (v *JobRunLogsLogs) GetCompleted() bool { return v.Completed }

// GetExpired returns JobRunLogsLogs.Expired, and is useful for accessing the field via an interface.
func (v *JobRunLogsLogs) GetExpired() bool { return v.Expired }

// GetEntries returns JobRunLogsLogs.Entries, and is useful for accessing the field via an interface.
func (v *JobRunLogsLogs) GetEntries() []JobRunLogsLogsEntriesLogEntry { return v.Entries }

// JobRunLogsLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type JobRunLogsLogsEntriesLogEntry struct {
	Timestamp time.Time `json:"timestamp"`
	Text      string    `json:"text"`
}

// GetTimestamp returns JobRunLogsLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *JobRunLogsLogsEntriesLogEntry) GetTimestamp() time.Time { return v.Timestamp }

// GetText returns JobRunLogsLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *JobRunLogsLogsEntriesLogEntry) GetText() string { return v.Text }

// jobRunLogsResponse is returned by jobRunLogs on success.
type JobRunLogsResponse struct {
	Team jobRunLogsTeam `json:"team"`
}

// GetTeam returns JobRunLogsResponse.Team, and is useful for accessing the field via an interface.
func (v *JobRunLogsResponse) GetTeam() jobRunLogsTeam { return v.Team }

type JobRunState string

const (
	JobRunStateJobRunStarting        JobRunState = "JOB_RUN_STARTING"
	JobRunStateJobRunRunning         JobRunState = "JOB_RUN_RUNNING"
	JobRunStateJobRunFailed          JobRunState = "JOB_RUN_FAILED"
	JobRunStateJobRunSucceeded       JobRunState = "JOB_RUN_SUCCEEDED"
	JobRunStateJobRunPendingApproval JobRunState = "JOB_RUN_PENDING_APPROVAL"
)

type KubernetesGeneratorConfigurationInput struct {
	ContainerRegistrySource       ContainerRegistrySourceInput `json:"containerRegistrySource"`
	AppId                         string                       `json:"appId"`
	BranchName                    string                       `json:"branchName"`
	ProductionBranchName          string                       `json:"productionBranchName"`
	Envs                          []EnvVarInput                `json:"envs"`
	AppGeneratorVersion           string                       `json:"appGeneratorVersion"`
	CpuRequest                    string                       `json:"cpuRequest"`
	MemoryRequest                 string                       `json:"memoryRequest"`
	EphemeralStorage              string                       `json:"ephemeralStorage"`
	Dedicated                     bool                         `json:"dedicated"`
	GpuRequest                    string                       `json:"gpuRequest"`
	GpuType                       string                       `json:"gpuType"`
	TpuType                       string                       `json:"tpuType"`
	TpuTfVersion                  string                       `json:"tpuTfVersion"`
	TpuCores                      int                          `json:"tpuCores"`
	Replicas                      int                          `json:"replicas"`
	Autoscaling                   AutoscalingDataInput         `json:"autoscaling"`
	Ports                         []PortDataInput              `json:"ports"`
	StaticIp                      bool                         `json:"staticIp"`
	HostNetwork                   bool                         `json:"hostNetwork"`
	Endpoint                      string                       `json:"endpoint"`
	DefaultIngressDomain          string                       `json:"defaultIngressDomain"`
	Volumes                       []VolumeSpecInput            `json:"volumes"`
	SecretMounts                  []SecretMountDataInput       `json:"secretMounts"`
	DeployStrategy                DeployStrategy               `json:"deployStrategy"`
	PreStopSleep                  int                          `json:"preStopSleep"`
	TerminationGracePeriodSeconds int                          `json:"terminationGracePeriodSeconds"`
	StartupProbe                  ProbeDataInput               `json:"startupProbe"`
	LivenessProbe                 ProbeDataInput               `json:"livenessProbe"`
	ReadinessProbe                ProbeDataInput               `json:"readinessProbe"`
	LogShipperType                LogShipperType               `json:"logShipperType"`
	BetterstackToken              string                       `json:"betterstackToken"`
	DatadogApmEnabled             bool                         `json:"datadogApmEnabled"`
	DatadogHost                   string                       `json:"datadogHost"`
	DatadogKey                    string                       `json:"datadogKey"`
	LogDnaKey                     string                       `json:"logDnaKey"`
	LogzToken                     string                       `json:"logzToken"`
	LogzUrl                       string                       `json:"logzUrl"`
	SyslogConfig                  string                       `json:"syslogConfig"`
	DockerEntrypoint              []string                     `json:"dockerEntrypoint"`
	DockerCommand                 []string                     `json:"dockerCommand"`
	AwsIamRole                    string                       `json:"awsIamRole"`
	GcpServiceAccount             string                       `json:"gcpServiceAccount"`
	ServiceAccountName            string                       `json:"serviceAccountName"`
	Annotations                   map[string]string            `json:"annotations"`
	ServiceAnnotations            map[string]string            `json:"serviceAnnotations"`
	NodeSelector                  map[string]string            `json:"nodeSelector"`
	PodSpecPatch                  string                       `json:"podSpecPatch"`
}

// GetContainerRegistrySource returns KubernetesGeneratorConfigurationInput.ContainerRegistrySource, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetContainerRegistrySource() ContainerRegistrySourceInput {
	return v.ContainerRegistrySource
}

// GetAppId returns KubernetesGeneratorConfigurationInput.AppId, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetAppId() string { return v.AppId }

// GetBranchName returns KubernetesGeneratorConfigurationInput.BranchName, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetBranchName() string { return v.BranchName }

// GetProductionBranchName returns KubernetesGeneratorConfigurationInput.ProductionBranchName, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetProductionBranchName() string {
	return v.ProductionBranchName
}

// GetEnvs returns KubernetesGeneratorConfigurationInput.Envs, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetEnvs() []EnvVarInput { return v.Envs }

// GetAppGeneratorVersion returns KubernetesGeneratorConfigurationInput.AppGeneratorVersion, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetAppGeneratorVersion() string {
	return v.AppGeneratorVersion
}

// GetCpuRequest returns KubernetesGeneratorConfigurationInput.CpuRequest, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetCpuRequest() string { return v.CpuRequest }

// GetMemoryRequest returns KubernetesGeneratorConfigurationInput.MemoryRequest, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetMemoryRequest() string { return v.MemoryRequest }

// GetEphemeralStorage returns KubernetesGeneratorConfigurationInput.EphemeralStorage, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetEphemeralStorage() string {
	return v.EphemeralStorage
}

// GetDedicated returns KubernetesGeneratorConfigurationInput.Dedicated, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDedicated() bool { return v.Dedicated }

// GetGpuRequest returns KubernetesGeneratorConfigurationInput.GpuRequest, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetGpuRequest() string { return v.GpuRequest }

// GetGpuType returns KubernetesGeneratorConfigurationInput.GpuType, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetGpuType() string { return v.GpuType }

// GetTpuType returns KubernetesGeneratorConfigurationInput.TpuType, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetTpuType() string { return v.TpuType }

// GetTpuTfVersion returns KubernetesGeneratorConfigurationInput.TpuTfVersion, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetTpuTfVersion() string { return v.TpuTfVersion }

// GetTpuCores returns KubernetesGeneratorConfigurationInput.TpuCores, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetTpuCores() int { return v.TpuCores }

// GetReplicas returns KubernetesGeneratorConfigurationInput.Replicas, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetReplicas() int { return v.Replicas }

// GetAutoscaling returns KubernetesGeneratorConfigurationInput.Autoscaling, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetAutoscaling() AutoscalingDataInput {
	return v.Autoscaling
}

// GetPorts returns KubernetesGeneratorConfigurationInput.Ports, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetPorts() []PortDataInput { return v.Ports }

// GetStaticIp returns KubernetesGeneratorConfigurationInput.StaticIp, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetStaticIp() bool { return v.StaticIp }

// GetHostNetwork returns KubernetesGeneratorConfigurationInput.HostNetwork, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetHostNetwork() bool { return v.HostNetwork }

// GetEndpoint returns KubernetesGeneratorConfigurationInput.Endpoint, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetEndpoint() string { return v.Endpoint }

// GetDefaultIngressDomain returns KubernetesGeneratorConfigurationInput.DefaultIngressDomain, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDefaultIngressDomain() string {
	return v.DefaultIngressDomain
}

// GetVolumes returns KubernetesGeneratorConfigurationInput.Volumes, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetVolumes() []VolumeSpecInput { return v.Volumes }

// GetSecretMounts returns KubernetesGeneratorConfigurationInput.SecretMounts, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetSecretMounts() []SecretMountDataInput {
	return v.SecretMounts
}

// GetDeployStrategy returns KubernetesGeneratorConfigurationInput.DeployStrategy, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDeployStrategy() DeployStrategy {
	return v.DeployStrategy
}

// GetPreStopSleep returns KubernetesGeneratorConfigurationInput.PreStopSleep, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetPreStopSleep() int { return v.PreStopSleep }

// GetTerminationGracePeriodSeconds returns KubernetesGeneratorConfigurationInput.TerminationGracePeriodSeconds, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetTerminationGracePeriodSeconds() int {
	return v.TerminationGracePeriodSeconds
}

// GetStartupProbe returns KubernetesGeneratorConfigurationInput.StartupProbe, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetStartupProbe() ProbeDataInput {
	return v.StartupProbe
}

// GetLivenessProbe returns KubernetesGeneratorConfigurationInput.LivenessProbe, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetLivenessProbe() ProbeDataInput {
	return v.LivenessProbe
}

// GetReadinessProbe returns KubernetesGeneratorConfigurationInput.ReadinessProbe, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetReadinessProbe() ProbeDataInput {
	return v.ReadinessProbe
}

// GetLogShipperType returns KubernetesGeneratorConfigurationInput.LogShipperType, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetLogShipperType() LogShipperType {
	return v.LogShipperType
}

// GetBetterstackToken returns KubernetesGeneratorConfigurationInput.BetterstackToken, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetBetterstackToken() string {
	return v.BetterstackToken
}

// GetDatadogApmEnabled returns KubernetesGeneratorConfigurationInput.DatadogApmEnabled, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDatadogApmEnabled() bool {
	return v.DatadogApmEnabled
}

// GetDatadogHost returns KubernetesGeneratorConfigurationInput.DatadogHost, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDatadogHost() string { return v.DatadogHost }

// GetDatadogKey returns KubernetesGeneratorConfigurationInput.DatadogKey, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDatadogKey() string { return v.DatadogKey }

// GetLogDnaKey returns KubernetesGeneratorConfigurationInput.LogDnaKey, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetLogDnaKey() string { return v.LogDnaKey }

// GetLogzToken returns KubernetesGeneratorConfigurationInput.LogzToken, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetLogzToken() string { return v.LogzToken }

// GetLogzUrl returns KubernetesGeneratorConfigurationInput.LogzUrl, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetLogzUrl() string { return v.LogzUrl }

// GetSyslogConfig returns KubernetesGeneratorConfigurationInput.SyslogConfig, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetSyslogConfig() string { return v.SyslogConfig }

// GetDockerEntrypoint returns KubernetesGeneratorConfigurationInput.DockerEntrypoint, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDockerEntrypoint() []string {
	return v.DockerEntrypoint
}

// GetDockerCommand returns KubernetesGeneratorConfigurationInput.DockerCommand, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetDockerCommand() []string { return v.DockerCommand }

// GetAwsIamRole returns KubernetesGeneratorConfigurationInput.AwsIamRole, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetAwsIamRole() string { return v.AwsIamRole }

// GetGcpServiceAccount returns KubernetesGeneratorConfigurationInput.GcpServiceAccount, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetGcpServiceAccount() string {
	return v.GcpServiceAccount
}

// GetServiceAccountName returns KubernetesGeneratorConfigurationInput.ServiceAccountName, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetServiceAccountName() string {
	return v.ServiceAccountName
}

// GetAnnotations returns KubernetesGeneratorConfigurationInput.Annotations, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetAnnotations() map[string]string {
	return v.Annotations
}

// GetServiceAnnotations returns KubernetesGeneratorConfigurationInput.ServiceAnnotations, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetServiceAnnotations() map[string]string {
	return v.ServiceAnnotations
}

// GetNodeSelector returns KubernetesGeneratorConfigurationInput.NodeSelector, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetNodeSelector() map[string]string {
	return v.NodeSelector
}

// GetPodSpecPatch returns KubernetesGeneratorConfigurationInput.PodSpecPatch, and is useful for accessing the field via an interface.
func (v *KubernetesGeneratorConfigurationInput) GetPodSpecPatch() string { return v.PodSpecPatch }

// linkProjectResponse is returned by linkProject on success.
type LinkProjectResponse struct {
	LinkProject linkProjectLinkProjectProjectLink `json:"linkProject"`
}

// GetLinkProject returns LinkProjectResponse.LinkProject, and is useful for accessing the field via an interface.
func (v *LinkProjectResponse) GetLinkProject() linkProjectLinkProjectProjectLink {
	return v.LinkProject
}

type LogShipperType string

const (
	LogShipperTypeLogzio      LogShipperType = "LOGZIO"
	LogShipperTypeSyslog      LogShipperType = "SYSLOG"
	LogShipperTypeLogdna      LogShipperType = "LOGDNA"
	LogShipperTypeDatadog     LogShipperType = "DATADOG"
	LogShipperTypeBetterstack LogShipperType = "BETTERSTACK"
)

type ManifestTargetConfigurationInput struct {
	ClusterId uuid.UUID `json:"clusterId"`
	Namespace string    `json:"namespace"`
}

// GetClusterId returns ManifestTargetConfigurationInput.ClusterId, and is useful for accessing the field via an interface.
func (v *ManifestTargetConfigurationInput) GetClusterId() uuid.UUID { return v.ClusterId }

// GetNamespace returns ManifestTargetConfigurationInput.Namespace, and is useful for accessing the field via an interface.
func (v *ManifestTargetConfigurationInput) GetNamespace() string { return v.Namespace }

type MetricType string

const (
	MetricTypeQuery              MetricType = "QUERY"
	MetricTypeCpu                MetricType = "CPU"
	MetricTypeMemory             MetricType = "MEMORY"
	MetricTypeNetwork            MetricType = "NETWORK"
	MetricTypeStorage            MetricType = "STORAGE"
	MetricTypeFunctionInvocation MetricType = "FUNCTION_INVOCATION"
	MetricTypeFunctionError      MetricType = "FUNCTION_ERROR"
	MetricTypeFunctionDuration   MetricType = "FUNCTION_DURATION"
	MetricTypeFunctionConcurrent MetricType = "FUNCTION_CONCURRENT"
	MetricTypeRequestCount       MetricType = "REQUEST_COUNT"
	MetricTypeInstanceCount      MetricType = "INSTANCE_COUNT"
	MetricTypeCpuUtilization     MetricType = "CPU_UTILIZATION"
	MetricTypeMemoryUtilization  MetricType = "MEMORY_UTILIZATION"
)

// observabilityConfigResponse is returned by observabilityConfig on success.
type ObservabilityConfigResponse struct {
	Team observabilityConfigTeam `json:"team"`
}

// GetTeam returns ObservabilityConfigResponse.Team, and is useful for accessing the field via an interface.
func (v *ObservabilityConfigResponse) GetTeam() observabilityConfigTeam { return v.Team }

type ObservabilityResourceSelectorInput struct {
	Type          ResourceType                              `json:"type"`
	Namespace     string                                    `json:"namespace"`
	ResourceName  string                                    `json:"resourceName"`
	ContainerName string                                    `json:"containerName"`
	Labels        []ObservabilityResourceSelectorLabelInput `json:"labels"`
}

// GetType returns ObservabilityResourceSelectorInput.Type, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorInput) GetType() ResourceType { return v.Type }

// GetNamespace returns ObservabilityResourceSelectorInput.Namespace, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorInput) GetNamespace() string { return v.Namespace }

// GetResourceName returns ObservabilityResourceSelectorInput.ResourceName, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorInput) GetResourceName() string { return v.ResourceName }

// GetContainerName returns ObservabilityResourceSelectorInput.ContainerName, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorInput) GetContainerName() string { return v.ContainerName }

// GetLabels returns ObservabilityResourceSelectorInput.Labels, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorInput) GetLabels() []ObservabilityResourceSelectorLabelInput {
	return v.Labels
}

type ObservabilityResourceSelectorLabelInput struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns ObservabilityResourceSelectorLabelInput.Name, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorLabelInput) GetName() string { return v.Name }

// GetValue returns ObservabilityResourceSelectorLabelInput.Value, and is useful for accessing the field via an interface.
func (v *ObservabilityResourceSelectorLabelInput) GetValue() string { return v.Value }

type PageInput struct {
	First  int    `json:"first"`
	Last   int    `json:"last"`
	After  string `json:"after"`
	Before string `json:"before"`
}

// GetFirst returns PageInput.First, and is useful for accessing the field via an interface.
func (v *PageInput) GetFirst() int { return v.First }

// GetLast returns PageInput.Last, and is useful for accessing the field via an interface.
func (v *PageInput) GetLast() int { return v.Last }

// GetAfter returns PageInput.After, and is useful for accessing the field via an interface.
func (v *PageInput) GetAfter() string { return v.After }

// GetBefore returns PageInput.Before, and is useful for accessing the field via an interface.
func (v *PageInput) GetBefore() string { return v.Before }

type PortDataInput struct {
	Port         string `json:"port"`
	Https        bool   `json:"https"`
	Grpc         bool   `json:"grpc"`
	Public       bool   `json:"public"`
	Protocol     string `json:"protocol"`
	LoadBalancer bool   `json:"loadBalancer"`
}

// GetPort returns PortDataInput.Port, and is useful for accessing the field via an interface.
func (v *PortDataInput) GetPort() string { return v.Port }

// GetHttps returns PortDataInput.Https, and is useful for accessing the field via an interface.
func (v *PortDataInput) GetHttps() bool { return v.Https }

// GetGrpc returns PortDataInput.Grpc, and is useful for accessing the field via an interface.
func (v *PortDataInput) GetGrpc() bool { return v.Grpc }

// GetPublic returns PortDataInput.Public, and is useful for accessing the field via an interface.
func (v *PortDataInput) GetPublic() bool { return v.Public }

// GetProtocol returns PortDataInput.Protocol, and is useful for accessing the field via an interface.
func (v *PortDataInput) GetProtocol() string { return v.Protocol }

// GetLoadBalancer returns PortDataInput.LoadBalancer, and is useful for accessing the field via an interface.
func (v *PortDataInput) GetLoadBalancer() bool { return v.LoadBalancer }

type ProbeDataInput struct {
	Command             string         `json:"command"`
	Http                HTTPProbeInput `json:"http"`
	Tcp                 TCPProbeInput  `json:"tcp"`
	InitialDelaySeconds int            `json:"initialDelaySeconds"`
	PeriodSeconds       int            `json:"periodSeconds"`
	SuccessThreshold    int            `json:"successThreshold"`
	FailureThreshold    int            `json:"failureThreshold"`
	TimeoutSeconds      int            `json:"timeoutSeconds"`
}

// GetCommand returns ProbeDataInput.Command, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetCommand() string { return v.Command }

// GetHttp returns ProbeDataInput.Http, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetHttp() HTTPProbeInput { return v.Http }

// GetTcp returns ProbeDataInput.Tcp, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetTcp() TCPProbeInput { return v.Tcp }

// GetInitialDelaySeconds returns ProbeDataInput.InitialDelaySeconds, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetInitialDelaySeconds() int { return v.InitialDelaySeconds }

// GetPeriodSeconds returns ProbeDataInput.PeriodSeconds, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetPeriodSeconds() int { return v.PeriodSeconds }

// GetSuccessThreshold returns ProbeDataInput.SuccessThreshold, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetSuccessThreshold() int { return v.SuccessThreshold }

// GetFailureThreshold returns ProbeDataInput.FailureThreshold, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetFailureThreshold() int { return v.FailureThreshold }

// GetTimeoutSeconds returns ProbeDataInput.TimeoutSeconds, and is useful for accessing the field via an interface.
func (v *ProbeDataInput) GetTimeoutSeconds() int { return v.TimeoutSeconds }

// projectAvailableProvidersResponse is returned by projectAvailableProviders on success.
type ProjectAvailableProvidersResponse struct {
	Team projectAvailableProvidersTeam `json:"team"`
}

// GetTeam returns ProjectAvailableProvidersResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectAvailableProvidersResponse) GetTeam() projectAvailableProvidersTeam { return v.Team }

// ProjectBlueprintConfigurationDetailV1 includes the GraphQL fields of BlueprintConfiguration requested by the fragment ProjectBlueprintConfigurationDetailV1.
type ProjectBlueprintConfigurationDetailV1 struct {
	BlueprintConfigurationDetail `json:"-"`
	// Optional 'pre-built' Driver configuration for this blueprint, which can be overridden or extended by projects.
	DriverConfiguration ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration `json:"-"`
}

// GetDriverConfiguration returns ProjectBlueprintConfigurationDetailV1.DriverConfiguration, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1) GetDriverConfiguration() ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration {
	return v.DriverConfiguration
}

// GetSlug returns ProjectBlueprintConfigurationDetailV1.Slug, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1) GetSlug() string {
	return v.BlueprintConfigurationDetail.Slug
}

// GetDisplayName returns ProjectBlueprintConfigurationDetailV1.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1) GetDisplayName() string {
	return v.BlueprintConfigurationDetail.DisplayName
}

// GetPublished returns ProjectBlueprintConfigurationDetailV1.Published, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1) GetPublished() bool {
	return v.BlueprintConfigurationDetail.Published
}

// GetDescription returns ProjectBlueprintConfigurationDetailV1.Description, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1) GetDescription() string {
	return v.BlueprintConfigurationDetail.Description
}

// GetTags returns ProjectBlueprintConfigurationDetailV1.Tags, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1) GetTags() []string {
	return v.BlueprintConfigurationDetail.Tags
}

// GetLogoUrl returns ProjectBlueprintConfigurationDetailV1.LogoUrl, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1) GetLogoUrl() string {
	return v.BlueprintConfigurationDetail.LogoUrl
}

// GetRichInputSchema returns ProjectBlueprintConfigurationDetailV1.RichInputSchema, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1) GetRichInputSchema() string {
	return v.BlueprintConfigurationDetail.RichInputSchema
}

func (v *ProjectBlueprintConfigurationDetailV1) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectBlueprintConfigurationDetailV1
		DriverConfiguration json.RawMessage `json:"driverConfiguration"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectBlueprintConfigurationDetailV1 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintConfigurationDetail)
	if err != nil {
		return err
	}

	{
		dst := &v.DriverConfiguration
		src := firstPass.DriverConfiguration
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ProjectBlueprintConfigurationDetailV1.DriverConfiguration: %w", err)
			}
		}
	}
	return nil
}

type __premarshalProjectBlueprintConfigurationDetailV1 struct {
	DriverConfiguration json.RawMessage `json:"driverConfiguration"`

	Slug string `json:"slug"`

	DisplayName string `json:"displayName"`

	Published bool `json:"published"`

	Description string `json:"description"`

	Tags []string `json:"tags"`

	LogoUrl string `json:"logoUrl"`

	RichInputSchema string `json:"richInputSchema"`
}

func (v *ProjectBlueprintConfigurationDetailV1) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectBlueprintConfigurationDetailV1) __premarshalJSON() (*__premarshalProjectBlueprintConfigurationDetailV1, error) {
	var retval __premarshalProjectBlueprintConfigurationDetailV1

	{

		dst := &retval.DriverConfiguration
		src := v.DriverConfiguration
		var err error
		*dst, err = __marshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ProjectBlueprintConfigurationDetailV1.DriverConfiguration: %w", err)
		}
	}
	retval.Slug = v.BlueprintConfigurationDetail.Slug
	retval.DisplayName = v.BlueprintConfigurationDetail.DisplayName
	retval.Published = v.BlueprintConfigurationDetail.Published
	retval.Description = v.BlueprintConfigurationDetail.Description
	retval.Tags = v.BlueprintConfigurationDetail.Tags
	retval.LogoUrl = v.BlueprintConfigurationDetail.LogoUrl
	retval.RichInputSchema = v.BlueprintConfigurationDetail.RichInputSchema
	return &retval, nil
}

// ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration includes the requested fields of the GraphQL interface BlueprintDriverConfiguration.
//
// ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration is implemented by the following types:
// ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfiguration
// ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfiguration
// ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfiguration
type ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration interface {
	implementsGraphQLInterfaceProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfiguration) implementsGraphQLInterfaceProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration() {
}
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfiguration) implementsGraphQLInterfaceProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration() {
}
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfiguration) implementsGraphQLInterfaceProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration() {
}

func __unmarshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration(b []byte, v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BlueprintHelmConfiguration":
		*v = new(ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfiguration)
		return json.Unmarshal(b, *v)
	case "BlueprintManifestConfiguration":
		*v = new(ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfiguration)
		return json.Unmarshal(b, *v)
	case "BlueprintTerraformConfiguration":
		*v = new(ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfiguration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing BlueprintDriverConfiguration.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration: "%v"`, tn.TypeName)
	}
}

func __marshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration(v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfiguration:
		typename = "BlueprintHelmConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfiguration:
		typename = "BlueprintManifestConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfiguration:
		typename = "BlueprintTerraformConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfiguration
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration: "%T"`, v)
	}
}

// ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfiguration includes the requested fields of the GraphQL type BlueprintHelmConfiguration.
type ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfiguration struct {
	Typename string                                                                                   `json:"__typename"`
	Source   ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource `json:"source"`
}

// GetTypename returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfiguration) GetTypename() string {
	return v.Typename
}

// GetSource returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfiguration.Source, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfiguration) GetSource() ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource {
	return v.Source
}

// ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource includes the requested fields of the GraphQL type Source.
type ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource struct {
	ProjectSourceDetail `json:"-"`
}

// GetGit returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource.Git, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource) GetGit() ProjectSourceDetailGitGitSource {
	return v.ProjectSourceDetail.Git
}

// GetTerraformModule returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource.TerraformModule, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource) GetTerraformModule() ProjectSourceDetailTerraformModuleTerraformModuleSource {
	return v.ProjectSourceDetail.TerraformModule
}

// GetHelmRepository returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource.HelmRepository, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource) GetHelmRepository() ProjectSourceDetailHelmRepositoryHelmRepositorySource {
	return v.ProjectSourceDetail.HelmRepository
}

// GetContainerRegistry returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource) GetContainerRegistry() ProjectSourceDetailContainerRegistryContainerRegistrySource {
	return v.ProjectSourceDetail.ContainerRegistry
}

func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectSourceDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource struct {
	Git ProjectSourceDetailGitGitSource `json:"git"`

	TerraformModule ProjectSourceDetailTerraformModuleTerraformModuleSource `json:"terraformModule"`

	HelmRepository ProjectSourceDetailHelmRepositoryHelmRepositorySource `json:"helmRepository"`

	ContainerRegistry ProjectSourceDetailContainerRegistryContainerRegistrySource `json:"containerRegistry"`
}

func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource) __premarshalJSON() (*__premarshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource, error) {
	var retval __premarshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintHelmConfigurationSource

	retval.Git = v.ProjectSourceDetail.Git
	retval.TerraformModule = v.ProjectSourceDetail.TerraformModule
	retval.HelmRepository = v.ProjectSourceDetail.HelmRepository
	retval.ContainerRegistry = v.ProjectSourceDetail.ContainerRegistry
	return &retval, nil
}

// ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfiguration includes the requested fields of the GraphQL type BlueprintManifestConfiguration.
type ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfiguration struct {
	Typename string                                                                                       `json:"__typename"`
	Source   ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource `json:"source"`
}

// GetTypename returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfiguration) GetTypename() string {
	return v.Typename
}

// GetSource returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfiguration.Source, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfiguration) GetSource() ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource {
	return v.Source
}

// ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource includes the requested fields of the GraphQL type Source.
type ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource struct {
	ProjectSourceDetail `json:"-"`
}

// GetGit returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource.Git, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource) GetGit() ProjectSourceDetailGitGitSource {
	return v.ProjectSourceDetail.Git
}

// GetTerraformModule returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource.TerraformModule, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource) GetTerraformModule() ProjectSourceDetailTerraformModuleTerraformModuleSource {
	return v.ProjectSourceDetail.TerraformModule
}

// GetHelmRepository returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource.HelmRepository, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource) GetHelmRepository() ProjectSourceDetailHelmRepositoryHelmRepositorySource {
	return v.ProjectSourceDetail.HelmRepository
}

// GetContainerRegistry returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource) GetContainerRegistry() ProjectSourceDetailContainerRegistryContainerRegistrySource {
	return v.ProjectSourceDetail.ContainerRegistry
}

func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectSourceDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource struct {
	Git ProjectSourceDetailGitGitSource `json:"git"`

	TerraformModule ProjectSourceDetailTerraformModuleTerraformModuleSource `json:"terraformModule"`

	HelmRepository ProjectSourceDetailHelmRepositoryHelmRepositorySource `json:"helmRepository"`

	ContainerRegistry ProjectSourceDetailContainerRegistryContainerRegistrySource `json:"containerRegistry"`
}

func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource) __premarshalJSON() (*__premarshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource, error) {
	var retval __premarshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintManifestConfigurationSource

	retval.Git = v.ProjectSourceDetail.Git
	retval.TerraformModule = v.ProjectSourceDetail.TerraformModule
	retval.HelmRepository = v.ProjectSourceDetail.HelmRepository
	retval.ContainerRegistry = v.ProjectSourceDetail.ContainerRegistry
	return &retval, nil
}

// ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfiguration includes the requested fields of the GraphQL type BlueprintTerraformConfiguration.
type ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfiguration struct {
	Typename string                                                                                        `json:"__typename"`
	Source   ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource `json:"source"`
}

// GetTypename returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfiguration.Typename, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfiguration) GetTypename() string {
	return v.Typename
}

// GetSource returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfiguration.Source, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfiguration) GetSource() ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource {
	return v.Source
}

// ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource includes the requested fields of the GraphQL type Source.
type ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource struct {
	ProjectSourceDetail `json:"-"`
}

// GetGit returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource.Git, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource) GetGit() ProjectSourceDetailGitGitSource {
	return v.ProjectSourceDetail.Git
}

// GetTerraformModule returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource.TerraformModule, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource) GetTerraformModule() ProjectSourceDetailTerraformModuleTerraformModuleSource {
	return v.ProjectSourceDetail.TerraformModule
}

// GetHelmRepository returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource.HelmRepository, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource) GetHelmRepository() ProjectSourceDetailHelmRepositoryHelmRepositorySource {
	return v.ProjectSourceDetail.HelmRepository
}

// GetContainerRegistry returns ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource) GetContainerRegistry() ProjectSourceDetailContainerRegistryContainerRegistrySource {
	return v.ProjectSourceDetail.ContainerRegistry
}

func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectSourceDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource struct {
	Git ProjectSourceDetailGitGitSource `json:"git"`

	TerraformModule ProjectSourceDetailTerraformModuleTerraformModuleSource `json:"terraformModule"`

	HelmRepository ProjectSourceDetailHelmRepositoryHelmRepositorySource `json:"helmRepository"`

	ContainerRegistry ProjectSourceDetailContainerRegistryContainerRegistrySource `json:"containerRegistry"`
}

func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource) __premarshalJSON() (*__premarshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource, error) {
	var retval __premarshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintTerraformConfigurationSource

	retval.Git = v.ProjectSourceDetail.Git
	retval.TerraformModule = v.ProjectSourceDetail.TerraformModule
	retval.HelmRepository = v.ProjectSourceDetail.HelmRepository
	retval.ContainerRegistry = v.ProjectSourceDetail.ContainerRegistry
	return &retval, nil
}

// projectClustersResponse is returned by projectClusters on success.
type ProjectClustersResponse struct {
	Team projectClustersTeam `json:"team"`
}

// GetTeam returns ProjectClustersResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectClustersResponse) GetTeam() projectClustersTeam { return v.Team }

type ProjectConnectorType string

const (
	ProjectConnectorTypeDatabaseConnection ProjectConnectorType = "DATABASE_CONNECTION"
)

// ProjectDeployDetail includes the GraphQL fields of Deploy requested by the fragment ProjectDeployDetail.
type ProjectDeployDetail struct {
	Id   uuid.UUID                                  `json:"id"`
	Name string                                     `json:"name"`
	Runs ProjectDeployDetailRunsDeployRunConnection `json:"runs"`
}

// GetId returns ProjectDeployDetail.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetail) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectDeployDetail.Name, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetail) GetName() string { return v.Name }

// GetRuns returns ProjectDeployDetail.Runs, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetail) GetRuns() ProjectDeployDetailRunsDeployRunConnection { return v.Runs }

// projectDeployDetailResponse is returned by projectDeployDetail on success.
type ProjectDeployDetailResponse struct {
	Team projectDeployDetailTeam `json:"team"`
}

// GetTeam returns ProjectDeployDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailResponse) GetTeam() projectDeployDetailTeam { return v.Team }

// ProjectDeployDetailRunsDeployRunConnection includes the requested fields of the GraphQL type DeployRunConnection.
type ProjectDeployDetailRunsDeployRunConnection struct {
	TotalCount int                                                        `json:"totalCount"`
	Nodes      []ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun `json:"nodes"`
}

// GetTotalCount returns ProjectDeployDetailRunsDeployRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailRunsDeployRunConnection) GetTotalCount() int { return v.TotalCount }

// GetNodes returns ProjectDeployDetailRunsDeployRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailRunsDeployRunConnection) GetNodes() []ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun {
	return v.Nodes
}

// ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun includes the requested fields of the GraphQL type DeployRun.
type ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun struct {
	ProjectDeployRunList `json:"-"`
}

// GetId returns ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun) GetId() uuid.UUID {
	return v.ProjectDeployRunList.Id
}

// GetSequence returns ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun.Sequence, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun) GetSequence() int {
	return v.ProjectDeployRunList.Sequence
}

// GetResult returns ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun.Result, and is useful for accessing the field via an interface.
func (v *ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun) GetResult() ProjectDeployRunListResultDeploymentResult {
	return v.ProjectDeployRunList.Result
}

func (v *ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectDeployRunList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectDeployDetailRunsDeployRunConnectionNodesDeployRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Result ProjectDeployRunListResultDeploymentResult `json:"result"`
}

func (v *ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDeployDetailRunsDeployRunConnectionNodesDeployRun) __premarshalJSON() (*__premarshalProjectDeployDetailRunsDeployRunConnectionNodesDeployRun, error) {
	var retval __premarshalProjectDeployDetailRunsDeployRunConnectionNodesDeployRun

	retval.Id = v.ProjectDeployRunList.Id
	retval.Sequence = v.ProjectDeployRunList.Sequence
	retval.Result = v.ProjectDeployRunList.Result
	return &retval, nil
}

// ProjectDeployList includes the GraphQL fields of Deploy requested by the fragment ProjectDeployList.
type ProjectDeployList struct {
	Id   uuid.UUID                                `json:"id"`
	Name string                                   `json:"name"`
	Runs ProjectDeployListRunsDeployRunConnection `json:"runs"`
}

// GetId returns ProjectDeployList.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployList) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectDeployList.Name, and is useful for accessing the field via an interface.
func (v *ProjectDeployList) GetName() string { return v.Name }

// GetRuns returns ProjectDeployList.Runs, and is useful for accessing the field via an interface.
func (v *ProjectDeployList) GetRuns() ProjectDeployListRunsDeployRunConnection { return v.Runs }

// ProjectDeployListRunsDeployRunConnection includes the requested fields of the GraphQL type DeployRunConnection.
type ProjectDeployListRunsDeployRunConnection struct {
	TotalCount int                                                      `json:"totalCount"`
	Nodes      []ProjectDeployListRunsDeployRunConnectionNodesDeployRun `json:"nodes"`
}

// GetTotalCount returns ProjectDeployListRunsDeployRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectDeployListRunsDeployRunConnection) GetTotalCount() int { return v.TotalCount }

// GetNodes returns ProjectDeployListRunsDeployRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectDeployListRunsDeployRunConnection) GetNodes() []ProjectDeployListRunsDeployRunConnectionNodesDeployRun {
	return v.Nodes
}

// ProjectDeployListRunsDeployRunConnectionNodesDeployRun includes the requested fields of the GraphQL type DeployRun.
type ProjectDeployListRunsDeployRunConnectionNodesDeployRun struct {
	Id       uuid.UUID `json:"id"`
	Sequence int       `json:"sequence"`
}

// GetId returns ProjectDeployListRunsDeployRunConnectionNodesDeployRun.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployListRunsDeployRunConnectionNodesDeployRun) GetId() uuid.UUID { return v.Id }

// GetSequence returns ProjectDeployListRunsDeployRunConnectionNodesDeployRun.Sequence, and is useful for accessing the field via an interface.
func (v *ProjectDeployListRunsDeployRunConnectionNodesDeployRun) GetSequence() int { return v.Sequence }

// projectDeployRevisionsResponse is returned by projectDeployRevisions on success.
type ProjectDeployRevisionsResponse struct {
	Team projectDeployRevisionsTeam `json:"team"`
}

// GetTeam returns ProjectDeployRevisionsResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectDeployRevisionsResponse) GetTeam() projectDeployRevisionsTeam { return v.Team }

// ProjectDeployRunDetail includes the GraphQL fields of DeployRun requested by the fragment ProjectDeployRunDetail.
type ProjectDeployRunDetail struct {
	Id       uuid.UUID                                    `json:"id"`
	Sequence int                                          `json:"sequence"`
	Result   ProjectDeployRunDetailResultDeploymentResult `json:"result"`
}

// GetId returns ProjectDeployRunDetail.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetail) GetId() uuid.UUID { return v.Id }

// GetSequence returns ProjectDeployRunDetail.Sequence, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetail) GetSequence() int { return v.Sequence }

// GetResult returns ProjectDeployRunDetail.Result, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetail) GetResult() ProjectDeployRunDetailResultDeploymentResult {
	return v.Result
}

// projectDeployRunDetailResponse is returned by projectDeployRunDetail on success.
type ProjectDeployRunDetailResponse struct {
	Team projectDeployRunDetailTeam `json:"team"`
}

// GetTeam returns ProjectDeployRunDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResponse) GetTeam() projectDeployRunDetailTeam { return v.Team }

// ProjectDeployRunDetailResultDeploymentResult includes the requested fields of the GraphQL type DeploymentResult.
type ProjectDeployRunDetailResultDeploymentResult struct {
	Resources ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection `json:"resources"`
}

// GetResources returns ProjectDeployRunDetailResultDeploymentResult.Resources, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResult) GetResources() ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection {
	return v.Resources
}

// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection includes the requested fields of the GraphQL type ResourceConnection.
type ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection struct {
	TotalCount int                                                                                    `json:"totalCount"`
	Nodes      []ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource `json:"-"`
}

// GetTotalCount returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection) GetNodes() []ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource {
	return v.Nodes
}

func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection struct {
	TotalCount int `json:"totalCount"`

	Nodes []json.RawMessage `json:"nodes"`
}

func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection) __premarshalJSON() (*__premarshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection, error) {
	var retval __premarshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection

	retval.TotalCount = v.TotalCount
	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnection.Nodes: %w", err)
			}
		}
	}
	return &retval, nil
}

// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource includes the requested fields of the GraphQL type CertificateResource.
type ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource struct {
	Typename    string `json:"__typename"`
	DisplayName string `json:"displayName"`
	ExternalId  string `json:"externalId"`
}

// GetTypename returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.Typename, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetTypename() string {
	return v.Typename
}

// GetDisplayName returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetDisplayName() string {
	return v.DisplayName
}

// GetExternalId returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetExternalId() string {
	return v.ExternalId
}

// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource includes the requested fields of the GraphQL type ContainerResource.
type ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource struct {
	Typename    string `json:"__typename"`
	DisplayName string `json:"displayName"`
	ExternalId  string `json:"externalId"`
}

// GetTypename returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource.Typename, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetTypename() string {
	return v.Typename
}

// GetDisplayName returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetDisplayName() string {
	return v.DisplayName
}

// GetExternalId returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetExternalId() string {
	return v.ExternalId
}

// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource includes the requested fields of the GraphQL type EndpointResource.
type ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource struct {
	Typename    string `json:"__typename"`
	DisplayName string `json:"displayName"`
	ExternalId  string `json:"externalId"`
}

// GetTypename returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.Typename, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetTypename() string {
	return v.Typename
}

// GetDisplayName returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetDisplayName() string {
	return v.DisplayName
}

// GetExternalId returns ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetExternalId() string {
	return v.ExternalId
}

// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource includes the requested fields of the GraphQL interface Resource.
//
// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource is implemented by the following types:
// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource
// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource
// ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource
type ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource interface {
	implementsGraphQLInterfaceProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetDisplayName returns the interface-field "displayName" from its implementation.
	GetDisplayName() string
	// GetExternalId returns the interface-field "externalId" from its implementation.
	GetExternalId() string
}

func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) implementsGraphQLInterfaceProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource() {
}
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource) implementsGraphQLInterfaceProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource() {
}
func (v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) implementsGraphQLInterfaceProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource() {
}

func __unmarshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource(b []byte, v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CertificateResource":
		*v = new(ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource)
		return json.Unmarshal(b, *v)
	case "ContainerResource":
		*v = new(ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource)
		return json.Unmarshal(b, *v)
	case "EndpointResource":
		*v = new(ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Resource.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource: "%v"`, tn.TypeName)
	}
}

func __marshalProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource(v *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource:
		typename = "CertificateResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesCertificateResource
		}{typename, v}
		return json.Marshal(result)
	case *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource:
		typename = "ContainerResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesContainerResource
		}{typename, v}
		return json.Marshal(result)
	case *ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource:
		typename = "EndpointResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesEndpointResource
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ProjectDeployRunDetailResultDeploymentResultResourcesResourceConnectionNodesResource: "%T"`, v)
	}
}

// ProjectDeployRunList includes the GraphQL fields of DeployRun requested by the fragment ProjectDeployRunList.
type ProjectDeployRunList struct {
	Id       uuid.UUID                                  `json:"id"`
	Sequence int                                        `json:"sequence"`
	Result   ProjectDeployRunListResultDeploymentResult `json:"result"`
}

// GetId returns ProjectDeployRunList.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunList) GetId() uuid.UUID { return v.Id }

// GetSequence returns ProjectDeployRunList.Sequence, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunList) GetSequence() int { return v.Sequence }

// GetResult returns ProjectDeployRunList.Result, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunList) GetResult() ProjectDeployRunListResultDeploymentResult {
	return v.Result
}

// ProjectDeployRunListResultDeploymentResult includes the requested fields of the GraphQL type DeploymentResult.
type ProjectDeployRunListResultDeploymentResult struct {
	Resources ProjectDeployRunListResultDeploymentResultResourcesResourceConnection `json:"resources"`
}

// GetResources returns ProjectDeployRunListResultDeploymentResult.Resources, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResult) GetResources() ProjectDeployRunListResultDeploymentResultResourcesResourceConnection {
	return v.Resources
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnection includes the requested fields of the GraphQL type ResourceConnection.
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnection struct {
	TotalCount int                                                                                  `json:"totalCount"`
	Nodes      []ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource `json:"-"`
}

// GetTotalCount returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnection) GetNodes() []ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource {
	return v.Nodes
}

func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDeployRunListResultDeploymentResultResourcesResourceConnection
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDeployRunListResultDeploymentResultResourcesResourceConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal ProjectDeployRunListResultDeploymentResultResourcesResourceConnection.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalProjectDeployRunListResultDeploymentResultResourcesResourceConnection struct {
	TotalCount int `json:"totalCount"`

	Nodes []json.RawMessage `json:"nodes"`
}

func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnection) __premarshalJSON() (*__premarshalProjectDeployRunListResultDeploymentResultResourcesResourceConnection, error) {
	var retval __premarshalProjectDeployRunListResultDeploymentResultResourcesResourceConnection

	retval.TotalCount = v.TotalCount
	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ProjectDeployRunListResultDeploymentResultResourcesResourceConnection.Nodes: %w", err)
			}
		}
	}
	return &retval, nil
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource includes the requested fields of the GraphQL type CertificateResource.
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource struct {
	Typename     string `json:"__typename"`
	DisplayName  string `json:"displayName"`
	ExternalId   string `json:"externalId"`
	ExternalLink string `json:"externalLink"`
	ExternalType string `json:"externalType"`
}

// GetTypename returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.Typename, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetTypename() string {
	return v.Typename
}

// GetDisplayName returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetDisplayName() string {
	return v.DisplayName
}

// GetExternalId returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetExternalId() string {
	return v.ExternalId
}

// GetExternalLink returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetExternalLink() string {
	return v.ExternalLink
}

// GetExternalType returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) GetExternalType() string {
	return v.ExternalType
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource includes the requested fields of the GraphQL type ContainerResource.
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource struct {
	Typename     string                                                                                          `json:"__typename"`
	DisplayName  string                                                                                          `json:"displayName"`
	ExternalId   string                                                                                          `json:"externalId"`
	ExternalLink string                                                                                          `json:"externalLink"`
	ExternalType string                                                                                          `json:"externalType"`
	Logs         ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs `json:"logs"`
}

// GetTypename returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource.Typename, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetTypename() string {
	return v.Typename
}

// GetDisplayName returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetDisplayName() string {
	return v.DisplayName
}

// GetExternalId returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetExternalId() string {
	return v.ExternalId
}

// GetExternalLink returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetExternalLink() string {
	return v.ExternalLink
}

// GetExternalType returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetExternalType() string {
	return v.ExternalType
}

// GetLogs returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource.Logs, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) GetLogs() ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs {
	return v.Logs
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs includes the requested fields of the GraphQL type Logs.
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs struct {
	Id        uuid.UUID                                                                                                        `json:"id"`
	Completed bool                                                                                                             `json:"completed"`
	Expired   bool                                                                                                             `json:"expired"`
	Entries   []ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry `json:"entries"`
}

// GetId returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs.Id, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs) GetId() uuid.UUID {
	return v.Id
}

// GetCompleted returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs.Completed, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs) GetCompleted() bool {
	return v.Completed
}

// GetExpired returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs.Expired, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs) GetExpired() bool {
	return v.Expired
}

// GetEntries returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs.Entries, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogs) GetEntries() []ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry {
	return v.Entries
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry struct {
	Text      string    `json:"text"`
	Timestamp time.Time `json:"timestamp"`
}

// GetText returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// GetTimestamp returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResourceLogsEntriesLogEntry) GetTimestamp() time.Time {
	return v.Timestamp
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource includes the requested fields of the GraphQL type EndpointResource.
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource struct {
	Typename     string `json:"__typename"`
	DisplayName  string `json:"displayName"`
	ExternalId   string `json:"externalId"`
	ExternalLink string `json:"externalLink"`
	ExternalType string `json:"externalType"`
}

// GetTypename returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.Typename, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetTypename() string {
	return v.Typename
}

// GetDisplayName returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetDisplayName() string {
	return v.DisplayName
}

// GetExternalId returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetExternalId() string {
	return v.ExternalId
}

// GetExternalLink returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetExternalLink() string {
	return v.ExternalLink
}

// GetExternalType returns ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) GetExternalType() string {
	return v.ExternalType
}

// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource includes the requested fields of the GraphQL interface Resource.
//
// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource is implemented by the following types:
// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource
// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource
// ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource
type ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource interface {
	implementsGraphQLInterfaceProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetDisplayName returns the interface-field "displayName" from its implementation.
	GetDisplayName() string
	// GetExternalId returns the interface-field "externalId" from its implementation.
	GetExternalId() string
	// GetExternalLink returns the interface-field "externalLink" from its implementation.
	GetExternalLink() string
	// GetExternalType returns the interface-field "externalType" from its implementation.
	GetExternalType() string
}

func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource) implementsGraphQLInterfaceProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource() {
}
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource) implementsGraphQLInterfaceProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource() {
}
func (v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource) implementsGraphQLInterfaceProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource() {
}

func __unmarshalProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource(b []byte, v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CertificateResource":
		*v = new(ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource)
		return json.Unmarshal(b, *v)
	case "ContainerResource":
		*v = new(ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource)
		return json.Unmarshal(b, *v)
	case "EndpointResource":
		*v = new(ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Resource.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource: "%v"`, tn.TypeName)
	}
}

func __marshalProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource(v *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource:
		typename = "CertificateResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesCertificateResource
		}{typename, v}
		return json.Marshal(result)
	case *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource:
		typename = "ContainerResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesContainerResource
		}{typename, v}
		return json.Marshal(result)
	case *ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource:
		typename = "EndpointResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesEndpointResource
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ProjectDeployRunListResultDeploymentResultResourcesResourceConnectionNodesResource: "%T"`, v)
	}
}

// projectDeploysResponse is returned by projectDeploys on success.
type ProjectDeploysResponse struct {
	Team projectDeploysTeam `json:"team"`
}

// GetTeam returns ProjectDeploysResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectDeploysResponse) GetTeam() projectDeploysTeam { return v.Team }

// ProjectDetail includes the GraphQL fields of Project requested by the fragment ProjectDetail.
type ProjectDetail struct {
	ProjectInfo `json:"-"`
	Deploys     ProjectDetailDeploysDeployConnection `json:"deploys"`
	Build       ProjectDetailBuild                   `json:"build"`
	Blueprint   ProjectDetailBlueprint               `json:"blueprint"`
	Group       ProjectDetailGroup                   `json:"group"`
	SubGroup    ProjectDetailSubGroup                `json:"subGroup"`
}

// GetDeploys returns ProjectDetail.Deploys, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetDeploys() ProjectDetailDeploysDeployConnection { return v.Deploys }

// GetBuild returns ProjectDetail.Build, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetBuild() ProjectDetailBuild { return v.Build }

// GetBlueprint returns ProjectDetail.Blueprint, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetBlueprint() ProjectDetailBlueprint { return v.Blueprint }

// GetGroup returns ProjectDetail.Group, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetGroup() ProjectDetailGroup { return v.Group }

// GetSubGroup returns ProjectDetail.SubGroup, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetSubGroup() ProjectDetailSubGroup { return v.SubGroup }

// GetId returns ProjectDetail.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetId() uuid.UUID { return v.ProjectInfo.Id }

// GetName returns ProjectDetail.Name, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetName() string { return v.ProjectInfo.Name }

// GetCreatedAt returns ProjectDetail.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetCreatedAt() time.Time { return v.ProjectInfo.CreatedAt }

// GetUpdatedAt returns ProjectDetail.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetUpdatedAt() time.Time { return v.ProjectInfo.UpdatedAt }

// GetStatus returns ProjectDetail.Status, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetStatus() ProjectStatus { return v.ProjectInfo.Status }

// GetWorkflow returns ProjectDetail.Workflow, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetWorkflow() ProjectInfoWorkflow { return v.ProjectInfo.Workflow }

// GetJobs returns ProjectDetail.Jobs, and is useful for accessing the field via an interface.
func (v *ProjectDetail) GetJobs() []ProjectInfoJobsJob { return v.ProjectInfo.Jobs }

func (v *ProjectDetail) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDetail
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDetail = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectDetail struct {
	Deploys ProjectDetailDeploysDeployConnection `json:"deploys"`

	Build ProjectDetailBuild `json:"build"`

	Blueprint ProjectDetailBlueprint `json:"blueprint"`

	Group ProjectDetailGroup `json:"group"`

	SubGroup ProjectDetailSubGroup `json:"subGroup"`

	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Status ProjectStatus `json:"status"`

	Workflow ProjectInfoWorkflow `json:"workflow"`

	Jobs []ProjectInfoJobsJob `json:"jobs"`
}

func (v *ProjectDetail) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDetail) __premarshalJSON() (*__premarshalProjectDetail, error) {
	var retval __premarshalProjectDetail

	retval.Deploys = v.Deploys
	retval.Build = v.Build
	retval.Blueprint = v.Blueprint
	retval.Group = v.Group
	retval.SubGroup = v.SubGroup
	retval.Id = v.ProjectInfo.Id
	retval.Name = v.ProjectInfo.Name
	retval.CreatedAt = v.ProjectInfo.CreatedAt
	retval.UpdatedAt = v.ProjectInfo.UpdatedAt
	retval.Status = v.ProjectInfo.Status
	retval.Workflow = v.ProjectInfo.Workflow
	retval.Jobs = v.ProjectInfo.Jobs
	return &retval, nil
}

// ProjectDetailBlueprint includes the requested fields of the GraphQL type Blueprint.
type ProjectDetailBlueprint struct {
	Id uuid.UUID `json:"id"`
	// Query the revision history of this blueprint.
	Configuration ProjectDetailBlueprintConfiguration `json:"configuration"`
}

// GetId returns ProjectDetailBlueprint.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailBlueprint) GetId() uuid.UUID { return v.Id }

// GetConfiguration returns ProjectDetailBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *ProjectDetailBlueprint) GetConfiguration() ProjectDetailBlueprintConfiguration {
	return v.Configuration
}

// ProjectDetailBlueprintConfiguration includes the requested fields of the GraphQL type BlueprintConfiguration.
type ProjectDetailBlueprintConfiguration struct {
	ProjectBlueprintConfigurationDetailV1 `json:"-"`
}

// GetDriverConfiguration returns ProjectDetailBlueprintConfiguration.DriverConfiguration, and is useful for accessing the field via an interface.
func (v *ProjectDetailBlueprintConfiguration) GetDriverConfiguration() ProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration {
	return v.ProjectBlueprintConfigurationDetailV1.DriverConfiguration
}

// GetSlug returns ProjectDetailBlueprintConfiguration.Slug, and is useful for accessing the field via an interface.
func (v *ProjectDetailBlueprintConfiguration) GetSlug() string {
	return v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.Slug
}

// GetDisplayName returns ProjectDetailBlueprintConfiguration.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectDetailBlueprintConfiguration) GetDisplayName() string {
	return v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.DisplayName
}

// GetPublished returns ProjectDetailBlueprintConfiguration.Published, and is useful for accessing the field via an interface.
func (v *ProjectDetailBlueprintConfiguration) GetPublished() bool {
	return v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.Published
}

// GetDescription returns ProjectDetailBlueprintConfiguration.Description, and is useful for accessing the field via an interface.
func (v *ProjectDetailBlueprintConfiguration) GetDescription() string {
	return v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.Description
}

// GetTags returns ProjectDetailBlueprintConfiguration.Tags, and is useful for accessing the field via an interface.
func (v *ProjectDetailBlueprintConfiguration) GetTags() []string {
	return v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.Tags
}

// GetLogoUrl returns ProjectDetailBlueprintConfiguration.LogoUrl, and is useful for accessing the field via an interface.
func (v *ProjectDetailBlueprintConfiguration) GetLogoUrl() string {
	return v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.LogoUrl
}

// GetRichInputSchema returns ProjectDetailBlueprintConfiguration.RichInputSchema, and is useful for accessing the field via an interface.
func (v *ProjectDetailBlueprintConfiguration) GetRichInputSchema() string {
	return v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.RichInputSchema
}

func (v *ProjectDetailBlueprintConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDetailBlueprintConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDetailBlueprintConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectBlueprintConfigurationDetailV1)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectDetailBlueprintConfiguration struct {
	DriverConfiguration json.RawMessage `json:"driverConfiguration"`

	Slug string `json:"slug"`

	DisplayName string `json:"displayName"`

	Published bool `json:"published"`

	Description string `json:"description"`

	Tags []string `json:"tags"`

	LogoUrl string `json:"logoUrl"`

	RichInputSchema string `json:"richInputSchema"`
}

func (v *ProjectDetailBlueprintConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDetailBlueprintConfiguration) __premarshalJSON() (*__premarshalProjectDetailBlueprintConfiguration, error) {
	var retval __premarshalProjectDetailBlueprintConfiguration

	{

		dst := &retval.DriverConfiguration
		src := v.ProjectBlueprintConfigurationDetailV1.DriverConfiguration
		var err error
		*dst, err = __marshalProjectBlueprintConfigurationDetailV1DriverConfigurationBlueprintDriverConfiguration(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ProjectDetailBlueprintConfiguration.ProjectBlueprintConfigurationDetailV1.DriverConfiguration: %w", err)
		}
	}
	retval.Slug = v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.Slug
	retval.DisplayName = v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.DisplayName
	retval.Published = v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.Published
	retval.Description = v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.Description
	retval.Tags = v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.Tags
	retval.LogoUrl = v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.LogoUrl
	retval.RichInputSchema = v.ProjectBlueprintConfigurationDetailV1.BlueprintConfigurationDetail.RichInputSchema
	return &retval, nil
}

// ProjectDetailBuild includes the requested fields of the GraphQL type Build.
type ProjectDetailBuild struct {
	Id         uuid.UUID                    `json:"id"`
	Definition ProjectDetailBuildDefinition `json:"definition"`
}

// GetId returns ProjectDetailBuild.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailBuild) GetId() uuid.UUID { return v.Id }

// GetDefinition returns ProjectDetailBuild.Definition, and is useful for accessing the field via an interface.
func (v *ProjectDetailBuild) GetDefinition() ProjectDetailBuildDefinition { return v.Definition }

// ProjectDetailBuildDefinition includes the requested fields of the GraphQL type BuildDefinition.
type ProjectDetailBuildDefinition struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns ProjectDetailBuildDefinition.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailBuildDefinition) GetId() uuid.UUID { return v.Id }

// ProjectDetailDeploysDeployConnection includes the requested fields of the GraphQL type DeployConnection.
type ProjectDetailDeploysDeployConnection struct {
	Nodes []ProjectDetailDeploysDeployConnectionNodesDeploy `json:"nodes"`
}

// GetNodes returns ProjectDetailDeploysDeployConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectDetailDeploysDeployConnection) GetNodes() []ProjectDetailDeploysDeployConnectionNodesDeploy {
	return v.Nodes
}

// ProjectDetailDeploysDeployConnectionNodesDeploy includes the requested fields of the GraphQL type Deploy.
type ProjectDetailDeploysDeployConnectionNodesDeploy struct {
	DeployConfigurationDetail `json:"-"`
}

// GetId returns ProjectDetailDeploysDeployConnectionNodesDeploy.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) GetId() uuid.UUID {
	return v.DeployConfigurationDetail.Id
}

// GetName returns ProjectDetailDeploysDeployConnectionNodesDeploy.Name, and is useful for accessing the field via an interface.
func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) GetName() string {
	return v.DeployConfigurationDetail.Name
}

// GetBranchName returns ProjectDetailDeploysDeployConnectionNodesDeploy.BranchName, and is useful for accessing the field via an interface.
func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) GetBranchName() string {
	return v.DeployConfigurationDetail.BranchName
}

// GetConfiguration returns ProjectDetailDeploysDeployConnectionNodesDeploy.Configuration, and is useful for accessing the field via an interface.
func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) GetConfiguration() DeployConfigurationDetailConfigurationDeploymentConfiguration {
	return v.DeployConfigurationDetail.Configuration
}

func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectDetailDeploysDeployConnectionNodesDeploy
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectDetailDeploysDeployConnectionNodesDeploy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DeployConfigurationDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectDetailDeploysDeployConnectionNodesDeploy struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	BranchName string `json:"branchName"`

	Configuration DeployConfigurationDetailConfigurationDeploymentConfiguration `json:"configuration"`
}

func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectDetailDeploysDeployConnectionNodesDeploy) __premarshalJSON() (*__premarshalProjectDetailDeploysDeployConnectionNodesDeploy, error) {
	var retval __premarshalProjectDetailDeploysDeployConnectionNodesDeploy

	retval.Id = v.DeployConfigurationDetail.Id
	retval.Name = v.DeployConfigurationDetail.Name
	retval.BranchName = v.DeployConfigurationDetail.BranchName
	retval.Configuration = v.DeployConfigurationDetail.Configuration
	return &retval, nil
}

// ProjectDetailGroup includes the requested fields of the GraphQL type Group.
type ProjectDetailGroup struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectDetailGroup.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailGroup) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectDetailGroup.Name, and is useful for accessing the field via an interface.
func (v *ProjectDetailGroup) GetName() string { return v.Name }

// projectDetailResponse is returned by projectDetail on success.
type ProjectDetailResponse struct {
	Team projectDetailTeam `json:"team"`
}

// GetTeam returns ProjectDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectDetailResponse) GetTeam() projectDetailTeam { return v.Team }

// ProjectDetailSubGroup includes the requested fields of the GraphQL type SubGroup.
type ProjectDetailSubGroup struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectDetailSubGroup.Id, and is useful for accessing the field via an interface.
func (v *ProjectDetailSubGroup) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectDetailSubGroup.Name, and is useful for accessing the field via an interface.
func (v *ProjectDetailSubGroup) GetName() string { return v.Name }

// Available filters for querying Projects. The result set is the intersection of all specified filters.
type ProjectFilter struct {
	// Selects only the Projects having one of these ids.
	Ids []uuid.UUID `json:"ids"`
	// Filter Projects by name, status, groupName and subGroupName
	Status       ProjectStatusCriterion `json:"status"`
	Name         StringCriterion        `json:"name"`
	GroupName    StringCriterion        `json:"groupName"`
	SubGroupName StringCriterion        `json:"subGroupName"`
}

// GetIds returns ProjectFilter.Ids, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetIds() []uuid.UUID { return v.Ids }

// GetStatus returns ProjectFilter.Status, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetStatus() ProjectStatusCriterion { return v.Status }

// GetName returns ProjectFilter.Name, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetName() StringCriterion { return v.Name }

// GetGroupName returns ProjectFilter.GroupName, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetGroupName() StringCriterion { return v.GroupName }

// GetSubGroupName returns ProjectFilter.SubGroupName, and is useful for accessing the field via an interface.
func (v *ProjectFilter) GetSubGroupName() StringCriterion { return v.SubGroupName }

// ProjectInfo includes the GraphQL fields of Project requested by the fragment ProjectInfo.
type ProjectInfo struct {
	Id        uuid.UUID                          `json:"id"`
	Name      string                             `json:"name"`
	CreatedAt time.Time                          `json:"createdAt"`
	UpdatedAt time.Time                          `json:"updatedAt"`
	Status    ProjectStatus                      `json:"status"`
	Build     ProjectInfoBuild                   `json:"build"`
	Deploys   ProjectInfoDeploysDeployConnection `json:"deploys"`
	Workflow  ProjectInfoWorkflow                `json:"workflow"`
	Jobs      []ProjectInfoJobsJob               `json:"jobs"`
	Blueprint ProjectInfoBlueprint               `json:"blueprint"`
}

// GetId returns ProjectInfo.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectInfo.Name, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetName() string { return v.Name }

// GetCreatedAt returns ProjectInfo.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns ProjectInfo.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetStatus returns ProjectInfo.Status, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetStatus() ProjectStatus { return v.Status }

// GetBuild returns ProjectInfo.Build, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetBuild() ProjectInfoBuild { return v.Build }

// GetDeploys returns ProjectInfo.Deploys, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetDeploys() ProjectInfoDeploysDeployConnection { return v.Deploys }

// GetWorkflow returns ProjectInfo.Workflow, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetWorkflow() ProjectInfoWorkflow { return v.Workflow }

// GetJobs returns ProjectInfo.Jobs, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetJobs() []ProjectInfoJobsJob { return v.Jobs }

// GetBlueprint returns ProjectInfo.Blueprint, and is useful for accessing the field via an interface.
func (v *ProjectInfo) GetBlueprint() ProjectInfoBlueprint { return v.Blueprint }

// ProjectInfoBlueprint includes the requested fields of the GraphQL type Blueprint.
type ProjectInfoBlueprint struct {
	Id   uuid.UUID     `json:"id"`
	Type BlueprintType `json:"type"`
}

// GetId returns ProjectInfoBlueprint.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfoBlueprint) GetId() uuid.UUID { return v.Id }

// GetType returns ProjectInfoBlueprint.Type, and is useful for accessing the field via an interface.
func (v *ProjectInfoBlueprint) GetType() BlueprintType { return v.Type }

// ProjectInfoBuild includes the requested fields of the GraphQL type Build.
type ProjectInfoBuild struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns ProjectInfoBuild.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfoBuild) GetId() uuid.UUID { return v.Id }

// ProjectInfoDeploysDeployConnection includes the requested fields of the GraphQL type DeployConnection.
type ProjectInfoDeploysDeployConnection struct {
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns ProjectInfoDeploysDeployConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectInfoDeploysDeployConnection) GetTotalCount() int { return v.TotalCount }

// ProjectInfoJobsJob includes the requested fields of the GraphQL type Job.
type ProjectInfoJobsJob struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns ProjectInfoJobsJob.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfoJobsJob) GetId() uuid.UUID { return v.Id }

// projectInfoResponse is returned by projectInfo on success.
type ProjectInfoResponse struct {
	Team projectInfoTeam `json:"team"`
}

// GetTeam returns ProjectInfoResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectInfoResponse) GetTeam() projectInfoTeam { return v.Team }

// ProjectInfoWorkflow includes the requested fields of the GraphQL type Workflow.
type ProjectInfoWorkflow struct {
	Id   uuid.UUID                                    `json:"id"`
	Runs ProjectInfoWorkflowRunsWorkflowRunConnection `json:"runs"`
}

// GetId returns ProjectInfoWorkflow.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflow) GetId() uuid.UUID { return v.Id }

// GetRuns returns ProjectInfoWorkflow.Runs, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflow) GetRuns() ProjectInfoWorkflowRunsWorkflowRunConnection { return v.Runs }

// ProjectInfoWorkflowRunsWorkflowRunConnection includes the requested fields of the GraphQL type WorkflowRunConnection.
type ProjectInfoWorkflowRunsWorkflowRunConnection struct {
	Nodes []ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun `json:"nodes"`
}

// GetNodes returns ProjectInfoWorkflowRunsWorkflowRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnection) GetNodes() []ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun {
	return v.Nodes
}

// ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun struct {
	WorkflowRunDetail `json:"-"`
}

// GetFinishedAt returns ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.FinishedAt, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetFinishedAt() time.Time {
	return v.WorkflowRunDetail.FinishedAt
}

// GetSteps returns ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetSteps() []WorkflowRunDetailStepsWorkflowRunStep {
	return v.WorkflowRunDetail.Steps
}

// GetId returns ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetId() uuid.UUID {
	return v.WorkflowRunDetail.WorkflowRunListItem.Id
}

// GetSequence returns ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetSequence() int {
	return v.WorkflowRunDetail.WorkflowRunListItem.Sequence
}

// GetStatus returns ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.WorkflowRunDetail.WorkflowRunListItem.Status
}

// GetCreatedAt returns ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetCreatedAt() time.Time {
	return v.WorkflowRunDetail.WorkflowRunListItem.CreatedAt
}

func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun struct {
	FinishedAt time.Time `json:"finishedAt"`

	Steps []json.RawMessage `json:"steps"`

	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) __premarshalJSON() (*__premarshalProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun, error) {
	var retval __premarshalProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun

	retval.FinishedAt = v.WorkflowRunDetail.FinishedAt
	{

		dst := &retval.Steps
		src := v.WorkflowRunDetail.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunDetailStepsWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ProjectInfoWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.WorkflowRunDetail.Steps: %w", err)
			}
		}
	}
	retval.Id = v.WorkflowRunDetail.WorkflowRunListItem.Id
	retval.Sequence = v.WorkflowRunDetail.WorkflowRunListItem.Sequence
	retval.Status = v.WorkflowRunDetail.WorkflowRunListItem.Status
	retval.CreatedAt = v.WorkflowRunDetail.WorkflowRunListItem.CreatedAt
	return &retval, nil
}

// ProjectLinkDetail includes the GraphQL fields of ProjectLink requested by the fragment ProjectLinkDetail.
type ProjectLinkDetail struct {
	Id        uuid.UUID                                `json:"id"`
	Project   ProjectLinkDetailProject                 `json:"project"`
	Provider  ProjectLinkDetailProviderProject         `json:"provider"`
	LinkType  ProjectLinkType                          `json:"linkType"`
	EnvPrefix string                                   `json:"envPrefix"`
	Envs      []ProjectLinkDetailEnvsProjectLinkEnvVar `json:"envs"`
}

// GetId returns ProjectLinkDetail.Id, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetail) GetId() uuid.UUID { return v.Id }

// GetProject returns ProjectLinkDetail.Project, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetail) GetProject() ProjectLinkDetailProject { return v.Project }

// GetProvider returns ProjectLinkDetail.Provider, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetail) GetProvider() ProjectLinkDetailProviderProject { return v.Provider }

// GetLinkType returns ProjectLinkDetail.LinkType, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetail) GetLinkType() ProjectLinkType { return v.LinkType }

// GetEnvPrefix returns ProjectLinkDetail.EnvPrefix, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetail) GetEnvPrefix() string { return v.EnvPrefix }

// GetEnvs returns ProjectLinkDetail.Envs, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetail) GetEnvs() []ProjectLinkDetailEnvsProjectLinkEnvVar { return v.Envs }

// ProjectLinkDetailEnvsProjectLinkEnvVar includes the requested fields of the GraphQL type ProjectLinkEnvVar.
type ProjectLinkDetailEnvsProjectLinkEnvVar struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns ProjectLinkDetailEnvsProjectLinkEnvVar.Name, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetailEnvsProjectLinkEnvVar) GetName() string { return v.Name }

// GetValue returns ProjectLinkDetailEnvsProjectLinkEnvVar.Value, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetailEnvsProjectLinkEnvVar) GetValue() string { return v.Value }

// ProjectLinkDetailProject includes the requested fields of the GraphQL type Project.
type ProjectLinkDetailProject struct {
	ProjectWithName `json:"-"`
}

// GetId returns ProjectLinkDetailProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetailProject) GetId() uuid.UUID { return v.ProjectWithName.Id }

// GetName returns ProjectLinkDetailProject.Name, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetailProject) GetName() string { return v.ProjectWithName.Name }

func (v *ProjectLinkDetailProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectLinkDetailProject
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectLinkDetailProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithName)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectLinkDetailProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *ProjectLinkDetailProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectLinkDetailProject) __premarshalJSON() (*__premarshalProjectLinkDetailProject, error) {
	var retval __premarshalProjectLinkDetailProject

	retval.Id = v.ProjectWithName.Id
	retval.Name = v.ProjectWithName.Name
	return &retval, nil
}

// ProjectLinkDetailProviderProject includes the requested fields of the GraphQL type Project.
type ProjectLinkDetailProviderProject struct {
	ProjectWithName `json:"-"`
}

// GetId returns ProjectLinkDetailProviderProject.Id, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetailProviderProject) GetId() uuid.UUID { return v.ProjectWithName.Id }

// GetName returns ProjectLinkDetailProviderProject.Name, and is useful for accessing the field via an interface.
func (v *ProjectLinkDetailProviderProject) GetName() string { return v.ProjectWithName.Name }

func (v *ProjectLinkDetailProviderProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectLinkDetailProviderProject
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectLinkDetailProviderProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithName)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectLinkDetailProviderProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *ProjectLinkDetailProviderProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectLinkDetailProviderProject) __premarshalJSON() (*__premarshalProjectLinkDetailProviderProject, error) {
	var retval __premarshalProjectLinkDetailProviderProject

	retval.Id = v.ProjectWithName.Id
	retval.Name = v.ProjectWithName.Name
	return &retval, nil
}

type ProjectLinkInput struct {
	ProjectId  uuid.UUID       `json:"projectId"`
	ProviderId uuid.UUID       `json:"providerId"`
	LinkType   ProjectLinkType `json:"linkType"`
	EnvPrefix  string          `json:"envPrefix"`
}

// GetProjectId returns ProjectLinkInput.ProjectId, and is useful for accessing the field via an interface.
func (v *ProjectLinkInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetProviderId returns ProjectLinkInput.ProviderId, and is useful for accessing the field via an interface.
func (v *ProjectLinkInput) GetProviderId() uuid.UUID { return v.ProviderId }

// GetLinkType returns ProjectLinkInput.LinkType, and is useful for accessing the field via an interface.
func (v *ProjectLinkInput) GetLinkType() ProjectLinkType { return v.LinkType }

// GetEnvPrefix returns ProjectLinkInput.EnvPrefix, and is useful for accessing the field via an interface.
func (v *ProjectLinkInput) GetEnvPrefix() string { return v.EnvPrefix }

type ProjectLinkType string

const (
	ProjectLinkTypeUnknown  ProjectLinkType = "UNKNOWN"
	ProjectLinkTypeDatabase ProjectLinkType = "DATABASE"
)

// projectLinkedProjectsResponse is returned by projectLinkedProjects on success.
type ProjectLinkedProjectsResponse struct {
	Team projectLinkedProjectsTeam `json:"team"`
}

// GetTeam returns ProjectLinkedProjectsResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectLinkedProjectsResponse) GetTeam() projectLinkedProjectsTeam { return v.Team }

// projectOutputsResponse is returned by projectOutputs on success.
type ProjectOutputsResponse struct {
	Team projectOutputsTeam `json:"team"`
}

// GetTeam returns ProjectOutputsResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectOutputsResponse) GetTeam() projectOutputsTeam { return v.Team }

// ProjectSourceDetail includes the GraphQL fields of Source requested by the fragment ProjectSourceDetail.
type ProjectSourceDetail struct {
	Git               ProjectSourceDetailGitGitSource                             `json:"git"`
	TerraformModule   ProjectSourceDetailTerraformModuleTerraformModuleSource     `json:"terraformModule"`
	HelmRepository    ProjectSourceDetailHelmRepositoryHelmRepositorySource       `json:"helmRepository"`
	ContainerRegistry ProjectSourceDetailContainerRegistryContainerRegistrySource `json:"containerRegistry"`
}

// GetGit returns ProjectSourceDetail.Git, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetail) GetGit() ProjectSourceDetailGitGitSource { return v.Git }

// GetTerraformModule returns ProjectSourceDetail.TerraformModule, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetail) GetTerraformModule() ProjectSourceDetailTerraformModuleTerraformModuleSource {
	return v.TerraformModule
}

// GetHelmRepository returns ProjectSourceDetail.HelmRepository, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetail) GetHelmRepository() ProjectSourceDetailHelmRepositoryHelmRepositorySource {
	return v.HelmRepository
}

// GetContainerRegistry returns ProjectSourceDetail.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetail) GetContainerRegistry() ProjectSourceDetailContainerRegistryContainerRegistrySource {
	return v.ContainerRegistry
}

// ProjectSourceDetailContainerRegistryContainerRegistrySource includes the requested fields of the GraphQL type ContainerRegistrySource.
type ProjectSourceDetailContainerRegistryContainerRegistrySource struct {
	RegistryId  uuid.UUID `json:"registryId"`
	RegistryUrl string    `json:"registryUrl"`
	Repository  string    `json:"repository"`
	Tag         string    `json:"tag"`
	Digest      string    `json:"digest"`
}

// GetRegistryId returns ProjectSourceDetailContainerRegistryContainerRegistrySource.RegistryId, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailContainerRegistryContainerRegistrySource) GetRegistryId() uuid.UUID {
	return v.RegistryId
}

// GetRegistryUrl returns ProjectSourceDetailContainerRegistryContainerRegistrySource.RegistryUrl, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailContainerRegistryContainerRegistrySource) GetRegistryUrl() string {
	return v.RegistryUrl
}

// GetRepository returns ProjectSourceDetailContainerRegistryContainerRegistrySource.Repository, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailContainerRegistryContainerRegistrySource) GetRepository() string {
	return v.Repository
}

// GetTag returns ProjectSourceDetailContainerRegistryContainerRegistrySource.Tag, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailContainerRegistryContainerRegistrySource) GetTag() string { return v.Tag }

// GetDigest returns ProjectSourceDetailContainerRegistryContainerRegistrySource.Digest, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailContainerRegistryContainerRegistrySource) GetDigest() string {
	return v.Digest
}

// ProjectSourceDetailGitGitSource includes the requested fields of the GraphQL type GitSource.
type ProjectSourceDetailGitGitSource struct {
	Repository  string                                     `json:"repository"`
	Ref         string                                     `json:"ref"`
	Path        string                                     `json:"path"`
	Integration ProjectSourceDetailGitGitSourceIntegration `json:"integration"`
}

// GetRepository returns ProjectSourceDetailGitGitSource.Repository, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSource) GetRepository() string { return v.Repository }

// GetRef returns ProjectSourceDetailGitGitSource.Ref, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSource) GetRef() string { return v.Ref }

// GetPath returns ProjectSourceDetailGitGitSource.Path, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSource) GetPath() string { return v.Path }

// GetIntegration returns ProjectSourceDetailGitGitSource.Integration, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSource) GetIntegration() ProjectSourceDetailGitGitSourceIntegration {
	return v.Integration
}

// ProjectSourceDetailGitGitSourceIntegration includes the requested fields of the GraphQL type GitSourceIntegration.
type ProjectSourceDetailGitGitSourceIntegration struct {
	GithubInstallationId int       `json:"githubInstallationId"`
	GithubIntegrationId  uuid.UUID `json:"githubIntegrationId"`
	GitlabIntegrationId  uuid.UUID `json:"gitlabIntegrationId"`
}

// GetGithubInstallationId returns ProjectSourceDetailGitGitSourceIntegration.GithubInstallationId, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSourceIntegration) GetGithubInstallationId() int {
	return v.GithubInstallationId
}

// GetGithubIntegrationId returns ProjectSourceDetailGitGitSourceIntegration.GithubIntegrationId, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSourceIntegration) GetGithubIntegrationId() uuid.UUID {
	return v.GithubIntegrationId
}

// GetGitlabIntegrationId returns ProjectSourceDetailGitGitSourceIntegration.GitlabIntegrationId, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailGitGitSourceIntegration) GetGitlabIntegrationId() uuid.UUID {
	return v.GitlabIntegrationId
}

// ProjectSourceDetailHelmRepositoryHelmRepositorySource includes the requested fields of the GraphQL type HelmRepositorySource.
type ProjectSourceDetailHelmRepositoryHelmRepositorySource struct {
	RepositoryUrl string `json:"repositoryUrl"`
	Chart         string `json:"chart"`
	Version       string `json:"version"`
}

// GetRepositoryUrl returns ProjectSourceDetailHelmRepositoryHelmRepositorySource.RepositoryUrl, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailHelmRepositoryHelmRepositorySource) GetRepositoryUrl() string {
	return v.RepositoryUrl
}

// GetChart returns ProjectSourceDetailHelmRepositoryHelmRepositorySource.Chart, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailHelmRepositoryHelmRepositorySource) GetChart() string { return v.Chart }

// GetVersion returns ProjectSourceDetailHelmRepositoryHelmRepositorySource.Version, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailHelmRepositoryHelmRepositorySource) GetVersion() string { return v.Version }

// ProjectSourceDetailTerraformModuleTerraformModuleSource includes the requested fields of the GraphQL type TerraformModuleSource.
type ProjectSourceDetailTerraformModuleTerraformModuleSource struct {
	// Any valid Terraform Module source: https://developer.hashicorp.com/terraform/language/modules/sources
	Source string `json:"source"`
	// The version field is only applicable to Terraform Registry sources
	Version string `json:"version"`
	// Configuring an integration provides authentication to retrieve the module from private sources
	Integration ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegration `json:"integration"`
}

// GetSource returns ProjectSourceDetailTerraformModuleTerraformModuleSource.Source, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailTerraformModuleTerraformModuleSource) GetSource() string { return v.Source }

// GetVersion returns ProjectSourceDetailTerraformModuleTerraformModuleSource.Version, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailTerraformModuleTerraformModuleSource) GetVersion() string {
	return v.Version
}

// GetIntegration returns ProjectSourceDetailTerraformModuleTerraformModuleSource.Integration, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailTerraformModuleTerraformModuleSource) GetIntegration() ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegration {
	return v.Integration
}

// ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegration includes the requested fields of the GraphQL type TerraformModuleSourceIntegration.
type ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegration struct {
	Git ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegrationGitGitSourceIntegration `json:"git"`
}

// GetGit returns ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegration.Git, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegration) GetGit() ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegrationGitGitSourceIntegration {
	return v.Git
}

// ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegrationGitGitSourceIntegration includes the requested fields of the GraphQL type GitSourceIntegration.
type ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegrationGitGitSourceIntegration struct {
	GithubInstallationId int `json:"githubInstallationId"`
}

// GetGithubInstallationId returns ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegrationGitGitSourceIntegration.GithubInstallationId, and is useful for accessing the field via an interface.
func (v *ProjectSourceDetailTerraformModuleTerraformModuleSourceIntegrationGitGitSourceIntegration) GetGithubInstallationId() int {
	return v.GithubInstallationId
}

type ProjectStatus string

const (
	ProjectStatusUnknown               ProjectStatus = "UNKNOWN"
	ProjectStatusDraft                 ProjectStatus = "DRAFT"
	ProjectStatusPaused                ProjectStatus = "PAUSED"
	ProjectStatusInactive              ProjectStatus = "INACTIVE"
	ProjectStatusDestroying            ProjectStatus = "DESTROYING"
	ProjectStatusJobRunStarting        ProjectStatus = "JOB_RUN_STARTING"
	ProjectStatusJobRunRunning         ProjectStatus = "JOB_RUN_RUNNING"
	ProjectStatusJobRunFailed          ProjectStatus = "JOB_RUN_FAILED"
	ProjectStatusJobRunSucceeded       ProjectStatus = "JOB_RUN_SUCCEEDED"
	ProjectStatusJobRunCancelled       ProjectStatus = "JOB_RUN_CANCELLED"
	ProjectStatusJobRunPendingApproval ProjectStatus = "JOB_RUN_PENDING_APPROVAL"
	ProjectStatusDeployPending         ProjectStatus = "DEPLOY_PENDING"
	ProjectStatusDeployInProgress      ProjectStatus = "DEPLOY_IN_PROGRESS"
	ProjectStatusDeployFailed          ProjectStatus = "DEPLOY_FAILED"
	ProjectStatusDeploySucceeded       ProjectStatus = "DEPLOY_SUCCEEDED"
	ProjectStatusDeployStopped         ProjectStatus = "DEPLOY_STOPPED"
	ProjectStatusDeployHealthy         ProjectStatus = "DEPLOY_HEALTHY"
	ProjectStatusDeployCrashing        ProjectStatus = "DEPLOY_CRASHING"
	ProjectStatusBuildPending          ProjectStatus = "BUILD_PENDING"
	ProjectStatusBuildInProgress       ProjectStatus = "BUILD_IN_PROGRESS"
	ProjectStatusBuildFailed           ProjectStatus = "BUILD_FAILED"
	ProjectStatusBuildSucceeded        ProjectStatus = "BUILD_SUCCEEDED"
	ProjectStatusBuildAborted          ProjectStatus = "BUILD_ABORTED"
	ProjectStatusContainerPulling      ProjectStatus = "CONTAINER_PULLING"
	ProjectStatusHealthChecking        ProjectStatus = "HEALTH_CHECKING"
	ProjectStatusNodeProvisioning      ProjectStatus = "NODE_PROVISIONING"
	ProjectStatusPendingHealthyCluster ProjectStatus = "PENDING_HEALTHY_CLUSTER"
)

type ProjectStatusCriterion struct {
	Value []string `json:"value"`
}

// GetValue returns ProjectStatusCriterion.Value, and is useful for accessing the field via an interface.
func (v *ProjectStatusCriterion) GetValue() []string { return v.Value }

// projectStatusOnlyResponse is returned by projectStatusOnly on success.
type ProjectStatusOnlyResponse struct {
	Team projectStatusOnlyTeam `json:"team"`
}

// GetTeam returns ProjectStatusOnlyResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectStatusOnlyResponse) GetTeam() projectStatusOnlyTeam { return v.Team }

// ProjectWithBlueprint includes the GraphQL fields of Project requested by the fragment ProjectWithBlueprint.
type ProjectWithBlueprint struct {
	Id        uuid.UUID                     `json:"id"`
	Blueprint ProjectWithBlueprintBlueprint `json:"blueprint"`
}

// GetId returns ProjectWithBlueprint.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprint) GetId() uuid.UUID { return v.Id }

// GetBlueprint returns ProjectWithBlueprint.Blueprint, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprint) GetBlueprint() ProjectWithBlueprintBlueprint { return v.Blueprint }

// ProjectWithBlueprintBlueprint includes the requested fields of the GraphQL type Blueprint.
type ProjectWithBlueprintBlueprint struct {
	Id   uuid.UUID     `json:"id"`
	Type BlueprintType `json:"type"`
	// Query the revision history of this blueprint.
	Configuration ProjectWithBlueprintBlueprintConfiguration `json:"configuration"`
}

// GetId returns ProjectWithBlueprintBlueprint.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprintBlueprint) GetId() uuid.UUID { return v.Id }

// GetType returns ProjectWithBlueprintBlueprint.Type, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprintBlueprint) GetType() BlueprintType { return v.Type }

// GetConfiguration returns ProjectWithBlueprintBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprintBlueprint) GetConfiguration() ProjectWithBlueprintBlueprintConfiguration {
	return v.Configuration
}

// ProjectWithBlueprintBlueprintConfiguration includes the requested fields of the GraphQL type BlueprintConfiguration.
type ProjectWithBlueprintBlueprintConfiguration struct {
	// An identifier for this blueprint, unique within the owner's namespace.
	Slug string `json:"slug"`
	// A url for a logo image.
	LogoUrl string `json:"logoUrl"`
}

// GetSlug returns ProjectWithBlueprintBlueprintConfiguration.Slug, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprintBlueprintConfiguration) GetSlug() string { return v.Slug }

// GetLogoUrl returns ProjectWithBlueprintBlueprintConfiguration.LogoUrl, and is useful for accessing the field via an interface.
func (v *ProjectWithBlueprintBlueprintConfiguration) GetLogoUrl() string { return v.LogoUrl }

// ProjectWithClusters includes the GraphQL fields of Project requested by the fragment ProjectWithClusters.
type ProjectWithClusters struct {
	Id       uuid.UUID                            `json:"id"`
	Clusters []ProjectWithClustersClustersCluster `json:"clusters"`
}

// GetId returns ProjectWithClusters.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithClusters) GetId() uuid.UUID { return v.Id }

// GetClusters returns ProjectWithClusters.Clusters, and is useful for accessing the field via an interface.
func (v *ProjectWithClusters) GetClusters() []ProjectWithClustersClustersCluster { return v.Clusters }

// ProjectWithClustersClustersCluster includes the requested fields of the GraphQL type Cluster.
type ProjectWithClustersClustersCluster struct {
	ClusterDetailV1 `json:"-"`
}

// GetId returns ProjectWithClustersClustersCluster.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetId() uuid.UUID { return v.ClusterDetailV1.Id }

// GetDisplayName returns ProjectWithClustersClustersCluster.DisplayName, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetDisplayName() string {
	return v.ClusterDetailV1.DisplayName
}

// GetState returns ProjectWithClustersClustersCluster.State, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetState() ClusterState { return v.ClusterDetailV1.State }

// GetConnected returns ProjectWithClustersClustersCluster.Connected, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetConnected() bool { return v.ClusterDetailV1.Connected }

// GetCloudProvider returns ProjectWithClustersClustersCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetCloudProvider() CloudProvider {
	return v.ClusterDetailV1.CloudProvider
}

// GetCreatedAt returns ProjectWithClustersClustersCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetCreatedAt() time.Time {
	return v.ClusterDetailV1.CreatedAt
}

// GetUpdatedAt returns ProjectWithClustersClustersCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectWithClustersClustersCluster) GetUpdatedAt() time.Time {
	return v.ClusterDetailV1.UpdatedAt
}

func (v *ProjectWithClustersClustersCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectWithClustersClustersCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectWithClustersClustersCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetailV1)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectWithClustersClustersCluster struct {
	Id uuid.UUID `json:"id"`

	DisplayName string `json:"displayName"`

	State ClusterState `json:"state"`

	Connected bool `json:"connected"`

	CloudProvider CloudProvider `json:"cloudProvider"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *ProjectWithClustersClustersCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectWithClustersClustersCluster) __premarshalJSON() (*__premarshalProjectWithClustersClustersCluster, error) {
	var retval __premarshalProjectWithClustersClustersCluster

	retval.Id = v.ClusterDetailV1.Id
	retval.DisplayName = v.ClusterDetailV1.DisplayName
	retval.State = v.ClusterDetailV1.State
	retval.Connected = v.ClusterDetailV1.Connected
	retval.CloudProvider = v.ClusterDetailV1.CloudProvider
	retval.CreatedAt = v.ClusterDetailV1.CreatedAt
	retval.UpdatedAt = v.ClusterDetailV1.UpdatedAt
	return &retval, nil
}

// ProjectWithDeploymentTime includes the GraphQL fields of Project requested by the fragment ProjectWithDeploymentTime.
type ProjectWithDeploymentTime struct {
	Id                   uuid.UUID                                     `json:"id"`
	DeploymentTimestamps ProjectWithDeploymentTimeDeploymentTimestamps `json:"deploymentTimestamps"`
	UpdatedAt            time.Time                                     `json:"updatedAt"`
}

// GetId returns ProjectWithDeploymentTime.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithDeploymentTime) GetId() uuid.UUID { return v.Id }

// GetDeploymentTimestamps returns ProjectWithDeploymentTime.DeploymentTimestamps, and is useful for accessing the field via an interface.
func (v *ProjectWithDeploymentTime) GetDeploymentTimestamps() ProjectWithDeploymentTimeDeploymentTimestamps {
	return v.DeploymentTimestamps
}

// GetUpdatedAt returns ProjectWithDeploymentTime.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectWithDeploymentTime) GetUpdatedAt() time.Time { return v.UpdatedAt }

// ProjectWithDeploymentTimeDeploymentTimestamps includes the requested fields of the GraphQL type DeploymentTimestamps.
type ProjectWithDeploymentTimeDeploymentTimestamps struct {
	LastUpdatedAt time.Time `json:"lastUpdatedAt"`
}

// GetLastUpdatedAt returns ProjectWithDeploymentTimeDeploymentTimestamps.LastUpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectWithDeploymentTimeDeploymentTimestamps) GetLastUpdatedAt() time.Time {
	return v.LastUpdatedAt
}

// ProjectWithName includes the GraphQL fields of Project requested by the fragment ProjectWithName.
type ProjectWithName struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectWithName.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithName) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectWithName.Name, and is useful for accessing the field via an interface.
func (v *ProjectWithName) GetName() string { return v.Name }

// ProjectWithStatus includes the GraphQL fields of Project requested by the fragment ProjectWithStatus.
type ProjectWithStatus struct {
	Id     uuid.UUID     `json:"id"`
	Status ProjectStatus `json:"status"`
}

// GetId returns ProjectWithStatus.Id, and is useful for accessing the field via an interface.
func (v *ProjectWithStatus) GetId() uuid.UUID { return v.Id }

// GetStatus returns ProjectWithStatus.Status, and is useful for accessing the field via an interface.
func (v *ProjectWithStatus) GetStatus() ProjectStatus { return v.Status }

// projectsCountResponse is returned by projectsCount on success.
type ProjectsCountResponse struct {
	Team projectsCountTeam `json:"team"`
}

// GetTeam returns ProjectsCountResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectsCountResponse) GetTeam() projectsCountTeam { return v.Team }

// Filter a ProjectConnection result set.
type ProjectsInput struct {
	// Sorting is applied before pagination.
	Sort   SortInput     `json:"sort"`
	Page   PageInput     `json:"page"`
	Filter ProjectFilter `json:"filter"`
}

// GetSort returns ProjectsInput.Sort, and is useful for accessing the field via an interface.
func (v *ProjectsInput) GetSort() SortInput { return v.Sort }

// GetPage returns ProjectsInput.Page, and is useful for accessing the field via an interface.
func (v *ProjectsInput) GetPage() PageInput { return v.Page }

// GetFilter returns ProjectsInput.Filter, and is useful for accessing the field via an interface.
func (v *ProjectsInput) GetFilter() ProjectFilter { return v.Filter }

// projectsWithBlueprintResponse is returned by projectsWithBlueprint on success.
type ProjectsWithBlueprintResponse struct {
	Team projectsWithBlueprintTeam `json:"team"`
}

// GetTeam returns ProjectsWithBlueprintResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectsWithBlueprintResponse) GetTeam() projectsWithBlueprintTeam { return v.Team }

// projectsWithDeploymentTimesResponse is returned by projectsWithDeploymentTimes on success.
type ProjectsWithDeploymentTimesResponse struct {
	Team projectsWithDeploymentTimesTeam `json:"team"`
}

// GetTeam returns ProjectsWithDeploymentTimesResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectsWithDeploymentTimesResponse) GetTeam() projectsWithDeploymentTimesTeam {
	return v.Team
}

// projectsWithStatusResponse is returned by projectsWithStatus on success.
type ProjectsWithStatusResponse struct {
	Team projectsWithStatusTeam `json:"team"`
}

// GetTeam returns ProjectsWithStatusResponse.Team, and is useful for accessing the field via an interface.
func (v *ProjectsWithStatusResponse) GetTeam() projectsWithStatusTeam { return v.Team }

type ResourceEventType string

const (
	ResourceEventTypeNormal  ResourceEventType = "NORMAL"
	ResourceEventTypeWarning ResourceEventType = "WARNING"
)

// ResourceLogs includes the GraphQL fields of Resource requested by the fragment ResourceLogs.
//
// ResourceLogs is implemented by the following types:
// ResourceLogsCertificateResource
// ResourceLogsContainerResource
// ResourceLogsEndpointResource
type ResourceLogs interface {
	implementsGraphQLInterfaceResourceLogs()
	// GetExternalId returns the interface-field "externalId" from its implementation.
	GetExternalId() string
	// GetExternalType returns the interface-field "externalType" from its implementation.
	GetExternalType() string
	// GetExternalLink returns the interface-field "externalLink" from its implementation.
	GetExternalLink() string
	// GetDisplayName returns the interface-field "displayName" from its implementation.
	GetDisplayName() string
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() string
}

func (v *ResourceLogsCertificateResource) implementsGraphQLInterfaceResourceLogs() {}
func (v *ResourceLogsContainerResource) implementsGraphQLInterfaceResourceLogs()   {}
func (v *ResourceLogsEndpointResource) implementsGraphQLInterfaceResourceLogs()    {}

func __unmarshalResourceLogs(b []byte, v *ResourceLogs) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CertificateResource":
		*v = new(ResourceLogsCertificateResource)
		return json.Unmarshal(b, *v)
	case "ContainerResource":
		*v = new(ResourceLogsContainerResource)
		return json.Unmarshal(b, *v)
	case "EndpointResource":
		*v = new(ResourceLogsEndpointResource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Resource.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ResourceLogs: "%v"`, tn.TypeName)
	}
}

func __marshalResourceLogs(v *ResourceLogs) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ResourceLogsCertificateResource:
		typename = "CertificateResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ResourceLogsCertificateResource
		}{typename, v}
		return json.Marshal(result)
	case *ResourceLogsContainerResource:
		typename = "ContainerResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ResourceLogsContainerResource
		}{typename, v}
		return json.Marshal(result)
	case *ResourceLogsEndpointResource:
		typename = "EndpointResource"

		result := struct {
			TypeName string `json:"__typename"`
			*ResourceLogsEndpointResource
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ResourceLogs: "%T"`, v)
	}
}

// ResourceLogs includes the GraphQL fields of CertificateResource requested by the fragment ResourceLogs.
type ResourceLogsCertificateResource struct {
	ExternalId   string `json:"externalId"`
	ExternalType string `json:"externalType"`
	ExternalLink string `json:"externalLink"`
	DisplayName  string `json:"displayName"`
	Status       string `json:"status"`
}

// GetExternalId returns ResourceLogsCertificateResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ResourceLogsCertificateResource) GetExternalId() string { return v.ExternalId }

// GetExternalType returns ResourceLogsCertificateResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ResourceLogsCertificateResource) GetExternalType() string { return v.ExternalType }

// GetExternalLink returns ResourceLogsCertificateResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ResourceLogsCertificateResource) GetExternalLink() string { return v.ExternalLink }

// GetDisplayName returns ResourceLogsCertificateResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ResourceLogsCertificateResource) GetDisplayName() string { return v.DisplayName }

// GetStatus returns ResourceLogsCertificateResource.Status, and is useful for accessing the field via an interface.
func (v *ResourceLogsCertificateResource) GetStatus() string { return v.Status }

// ResourceLogs includes the GraphQL fields of ContainerResource requested by the fragment ResourceLogs.
type ResourceLogsContainerResource struct {
	ExternalId   string           `json:"externalId"`
	ExternalType string           `json:"externalType"`
	ExternalLink string           `json:"externalLink"`
	DisplayName  string           `json:"displayName"`
	Status       string           `json:"status"`
	Logs         ResourceLogsLogs `json:"logs"`
}

// GetExternalId returns ResourceLogsContainerResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ResourceLogsContainerResource) GetExternalId() string { return v.ExternalId }

// GetExternalType returns ResourceLogsContainerResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ResourceLogsContainerResource) GetExternalType() string { return v.ExternalType }

// GetExternalLink returns ResourceLogsContainerResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ResourceLogsContainerResource) GetExternalLink() string { return v.ExternalLink }

// GetDisplayName returns ResourceLogsContainerResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ResourceLogsContainerResource) GetDisplayName() string { return v.DisplayName }

// GetStatus returns ResourceLogsContainerResource.Status, and is useful for accessing the field via an interface.
func (v *ResourceLogsContainerResource) GetStatus() string { return v.Status }

// GetLogs returns ResourceLogsContainerResource.Logs, and is useful for accessing the field via an interface.
func (v *ResourceLogsContainerResource) GetLogs() ResourceLogsLogs { return v.Logs }

// ResourceLogs includes the GraphQL fields of EndpointResource requested by the fragment ResourceLogs.
type ResourceLogsEndpointResource struct {
	ExternalId   string `json:"externalId"`
	ExternalType string `json:"externalType"`
	ExternalLink string `json:"externalLink"`
	DisplayName  string `json:"displayName"`
	Status       string `json:"status"`
}

// GetExternalId returns ResourceLogsEndpointResource.ExternalId, and is useful for accessing the field via an interface.
func (v *ResourceLogsEndpointResource) GetExternalId() string { return v.ExternalId }

// GetExternalType returns ResourceLogsEndpointResource.ExternalType, and is useful for accessing the field via an interface.
func (v *ResourceLogsEndpointResource) GetExternalType() string { return v.ExternalType }

// GetExternalLink returns ResourceLogsEndpointResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *ResourceLogsEndpointResource) GetExternalLink() string { return v.ExternalLink }

// GetDisplayName returns ResourceLogsEndpointResource.DisplayName, and is useful for accessing the field via an interface.
func (v *ResourceLogsEndpointResource) GetDisplayName() string { return v.DisplayName }

// GetStatus returns ResourceLogsEndpointResource.Status, and is useful for accessing the field via an interface.
func (v *ResourceLogsEndpointResource) GetStatus() string { return v.Status }

// ResourceLogsLogs includes the requested fields of the GraphQL type Logs.
type ResourceLogsLogs struct {
	Id        uuid.UUID                         `json:"id"`
	Completed bool                              `json:"completed"`
	Expired   bool                              `json:"expired"`
	Entries   []ResourceLogsLogsEntriesLogEntry `json:"entries"`
}

// GetId returns ResourceLogsLogs.Id, and is useful for accessing the field via an interface.
func (v *ResourceLogsLogs) GetId() uuid.UUID { return v.Id }

// GetCompleted returns ResourceLogsLogs.Completed, and is useful for accessing the field via an interface.
func (v *ResourceLogsLogs) GetCompleted() bool { return v.Completed }

// GetExpired returns ResourceLogsLogs.Expired, and is useful for accessing the field via an interface.
func (v *ResourceLogsLogs) GetExpired() bool { return v.Expired }

// GetEntries returns ResourceLogsLogs.Entries, and is useful for accessing the field via an interface.
func (v *ResourceLogsLogs) GetEntries() []ResourceLogsLogsEntriesLogEntry { return v.Entries }

// ResourceLogsLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type ResourceLogsLogsEntriesLogEntry struct {
	Text      string    `json:"text"`
	Timestamp time.Time `json:"timestamp"`
}

// GetText returns ResourceLogsLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *ResourceLogsLogsEntriesLogEntry) GetText() string { return v.Text }

// GetTimestamp returns ResourceLogsLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *ResourceLogsLogsEntriesLogEntry) GetTimestamp() time.Time { return v.Timestamp }

// resourceLogsResponse is returned by resourceLogs on success.
type ResourceLogsResponse struct {
	Team resourceLogsTeam `json:"team"`
}

// GetTeam returns ResourceLogsResponse.Team, and is useful for accessing the field via an interface.
func (v *ResourceLogsResponse) GetTeam() resourceLogsTeam { return v.Team }

// ResourceMetric includes the GraphQL fields of ResourceMetric requested by the fragment ResourceMetric.
type ResourceMetric struct {
	Type    MetricType                         `json:"type"`
	Entries []ResourceMetricEntriesMetricEntry `json:"entries"`
}

// GetType returns ResourceMetric.Type, and is useful for accessing the field via an interface.
func (v *ResourceMetric) GetType() MetricType { return v.Type }

// GetEntries returns ResourceMetric.Entries, and is useful for accessing the field via an interface.
func (v *ResourceMetric) GetEntries() []ResourceMetricEntriesMetricEntry { return v.Entries }

// ResourceMetricEntriesMetricEntry includes the requested fields of the GraphQL type MetricEntry.
type ResourceMetricEntriesMetricEntry struct {
	Value     float64   `json:"value"`
	Timestamp time.Time `json:"timestamp"`
}

// GetValue returns ResourceMetricEntriesMetricEntry.Value, and is useful for accessing the field via an interface.
func (v *ResourceMetricEntriesMetricEntry) GetValue() float64 { return v.Value }

// GetTimestamp returns ResourceMetricEntriesMetricEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *ResourceMetricEntriesMetricEntry) GetTimestamp() time.Time { return v.Timestamp }

type ResourceStatus string

const (
	ResourceStatusUnknown    ResourceStatus = "UNKNOWN"
	ResourceStatusWaiting    ResourceStatus = "WAITING"
	ResourceStatusRunning    ResourceStatus = "RUNNING"
	ResourceStatusPending    ResourceStatus = "PENDING"
	ResourceStatusSucceeded  ResourceStatus = "SUCCEEDED"
	ResourceStatusFailed     ResourceStatus = "FAILED"
	ResourceStatusTerminated ResourceStatus = "TERMINATED"
)

type ResourceType string

const (
	ResourceTypeContainer   ResourceType = "CONTAINER"
	ResourceTypePod         ResourceType = "POD"
	ResourceTypeJob         ResourceType = "JOB"
	ResourceTypeDeployment  ResourceType = "DEPLOYMENT"
	ResourceTypeReplicaset  ResourceType = "REPLICASET"
	ResourceTypeStatefulset ResourceType = "STATEFULSET"
	ResourceTypeDaemonset   ResourceType = "DAEMONSET"
	ResourceTypeService     ResourceType = "SERVICE"
)

// resourcesWithLogsResponse is returned by resourcesWithLogs on success.
type ResourcesWithLogsResponse struct {
	Team resourcesWithLogsTeam `json:"team"`
}

// GetTeam returns ResourcesWithLogsResponse.Team, and is useful for accessing the field via an interface.
func (v *ResourcesWithLogsResponse) GetTeam() resourcesWithLogsTeam { return v.Team }

// resourcesWithMetricsResponse is returned by resourcesWithMetrics on success.
type ResourcesWithMetricsResponse struct {
	Team resourcesWithMetricsTeam `json:"team"`
}

// GetTeam returns ResourcesWithMetricsResponse.Team, and is useful for accessing the field via an interface.
func (v *ResourcesWithMetricsResponse) GetTeam() resourcesWithMetricsTeam { return v.Team }

// RevisionDetailV1 includes the GraphQL fields of RevisableEntity requested by the fragment RevisionDetailV1.
//
// RevisionDetailV1 is implemented by the following types:
// RevisionDetailV1AWSAccountConfiguration
// RevisionDetailV1AzureAccountConfiguration
// RevisionDetailV1BlueprintConfiguration
// RevisionDetailV1ClusterConfiguration
// RevisionDetailV1CoreWeaveAccountConfiguration
// RevisionDetailV1DeploymentConfiguration
// RevisionDetailV1DOAccountConfiguration
// RevisionDetailV1GCPAccountConfiguration
// RevisionDetailV1LinodeAccountConfiguration
// RevisionDetailV1VultrAccountConfiguration
type RevisionDetailV1 interface {
	implementsGraphQLInterfaceRevisionDetailV1()
	// GetRevisionData returns the interface-field "revisionData" from its implementation.
	GetRevisionData() string
	// GetRevisionMetadata returns the interface-field "revisionMetadata" from its implementation.
	GetRevisionMetadata() RevisionDetailV1RevisionMetadata
}

func (v *RevisionDetailV1AWSAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1()   {}
func (v *RevisionDetailV1AzureAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1() {}
func (v *RevisionDetailV1BlueprintConfiguration) implementsGraphQLInterfaceRevisionDetailV1()    {}
func (v *RevisionDetailV1ClusterConfiguration) implementsGraphQLInterfaceRevisionDetailV1()      {}
func (v *RevisionDetailV1CoreWeaveAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1() {
}
func (v *RevisionDetailV1DeploymentConfiguration) implementsGraphQLInterfaceRevisionDetailV1()    {}
func (v *RevisionDetailV1DOAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1()     {}
func (v *RevisionDetailV1GCPAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1()    {}
func (v *RevisionDetailV1LinodeAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1() {}
func (v *RevisionDetailV1VultrAccountConfiguration) implementsGraphQLInterfaceRevisionDetailV1()  {}

func __unmarshalRevisionDetailV1(b []byte, v *RevisionDetailV1) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AWSAccountConfiguration":
		*v = new(RevisionDetailV1AWSAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "AzureAccountConfiguration":
		*v = new(RevisionDetailV1AzureAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "BlueprintConfiguration":
		*v = new(RevisionDetailV1BlueprintConfiguration)
		return json.Unmarshal(b, *v)
	case "ClusterConfiguration":
		*v = new(RevisionDetailV1ClusterConfiguration)
		return json.Unmarshal(b, *v)
	case "CoreWeaveAccountConfiguration":
		*v = new(RevisionDetailV1CoreWeaveAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "DeploymentConfiguration":
		*v = new(RevisionDetailV1DeploymentConfiguration)
		return json.Unmarshal(b, *v)
	case "DOAccountConfiguration":
		*v = new(RevisionDetailV1DOAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "GCPAccountConfiguration":
		*v = new(RevisionDetailV1GCPAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "LinodeAccountConfiguration":
		*v = new(RevisionDetailV1LinodeAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "VultrAccountConfiguration":
		*v = new(RevisionDetailV1VultrAccountConfiguration)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RevisableEntity.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RevisionDetailV1: "%v"`, tn.TypeName)
	}
}

func __marshalRevisionDetailV1(v *RevisionDetailV1) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RevisionDetailV1AWSAccountConfiguration:
		typename = "AWSAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1AWSAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1AzureAccountConfiguration:
		typename = "AzureAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1AzureAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1BlueprintConfiguration:
		typename = "BlueprintConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1BlueprintConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1ClusterConfiguration:
		typename = "ClusterConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1ClusterConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1CoreWeaveAccountConfiguration:
		typename = "CoreWeaveAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1CoreWeaveAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1DeploymentConfiguration:
		typename = "DeploymentConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1DeploymentConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1DOAccountConfiguration:
		typename = "DOAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1DOAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1GCPAccountConfiguration:
		typename = "GCPAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1GCPAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1LinodeAccountConfiguration:
		typename = "LinodeAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1LinodeAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case *RevisionDetailV1VultrAccountConfiguration:
		typename = "VultrAccountConfiguration"

		result := struct {
			TypeName string `json:"__typename"`
			*RevisionDetailV1VultrAccountConfiguration
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RevisionDetailV1: "%T"`, v)
	}
}

// RevisionDetailV1 includes the GraphQL fields of AWSAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1AWSAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1AWSAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1AWSAccountConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1AWSAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1AWSAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of AzureAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1AzureAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1AzureAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1AzureAccountConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1AzureAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1AzureAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of BlueprintConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1BlueprintConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1BlueprintConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1BlueprintConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1BlueprintConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1BlueprintConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of ClusterConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1ClusterConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1ClusterConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1ClusterConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1ClusterConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1ClusterConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of CoreWeaveAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1CoreWeaveAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1CoreWeaveAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1CoreWeaveAccountConfiguration) GetRevisionData() string {
	return v.RevisionData
}

// GetRevisionMetadata returns RevisionDetailV1CoreWeaveAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1CoreWeaveAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of DOAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1DOAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1DOAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1DOAccountConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1DOAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1DOAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of DeploymentConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1DeploymentConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1DeploymentConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1DeploymentConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1DeploymentConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1DeploymentConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of GCPAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1GCPAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1GCPAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1GCPAccountConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1GCPAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1GCPAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1 includes the GraphQL fields of LinodeAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1LinodeAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1LinodeAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1LinodeAccountConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1LinodeAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1LinodeAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

// RevisionDetailV1RevisionMetadata includes the requested fields of the GraphQL type RevisionMetadata.
type RevisionDetailV1RevisionMetadata struct {
	Id          uuid.UUID `json:"id"`
	SequenceId  int       `json:"sequenceId"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
	// The user that authored this revision.
	//
	// If the user has been deleted, this will contain a placeholder User, with the
	// Name field changed to the deleted user's username.
	// When this field represents a deleted user, it SHOULD NOT be used for any API
	// operations expecting a userId, and any attempts will likely fail.
	//
	// To confirm whether this field represents a deleted user, you may additionally
	// consult the `authorInfo.creatorDeleted` flag (see `RevisionAuthorInfo`).
	CreatedBy RevisionDetailV1RevisionMetadataCreatedByUser `json:"createdBy"`
	// A revision may have additional information about how it was initiated.
	AuthorInfo RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo `json:"authorInfo"`
}

// GetId returns RevisionDetailV1RevisionMetadata.Id, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadata) GetId() uuid.UUID { return v.Id }

// GetSequenceId returns RevisionDetailV1RevisionMetadata.SequenceId, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadata) GetSequenceId() int { return v.SequenceId }

// GetDescription returns RevisionDetailV1RevisionMetadata.Description, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadata) GetDescription() string { return v.Description }

// GetCreatedAt returns RevisionDetailV1RevisionMetadata.CreatedAt, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadata) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCreatedBy returns RevisionDetailV1RevisionMetadata.CreatedBy, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadata) GetCreatedBy() RevisionDetailV1RevisionMetadataCreatedByUser {
	return v.CreatedBy
}

// GetAuthorInfo returns RevisionDetailV1RevisionMetadata.AuthorInfo, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadata) GetAuthorInfo() RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo {
	return v.AuthorInfo
}

// RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo includes the requested fields of the GraphQL type RevisionAuthorInfo.
type RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo struct {
	// A short description of how the revision was initiated.
	Summary string `json:"summary"`
	// When true, this indicates the original author's user has since been deleted.
	CreatorDeleted bool `json:"creatorDeleted"`
}

// GetSummary returns RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo.Summary, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo) GetSummary() string {
	return v.Summary
}

// GetCreatorDeleted returns RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo.CreatorDeleted, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadataAuthorInfoRevisionAuthorInfo) GetCreatorDeleted() bool {
	return v.CreatorDeleted
}

// RevisionDetailV1RevisionMetadataCreatedByUser includes the requested fields of the GraphQL type User.
type RevisionDetailV1RevisionMetadataCreatedByUser struct {
	Id     uuid.UUID `json:"id"`
	Login  string    `json:"login"`
	Name   string    `json:"name"`
	Avatar string    `json:"avatar"`
}

// GetId returns RevisionDetailV1RevisionMetadataCreatedByUser.Id, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadataCreatedByUser) GetId() uuid.UUID { return v.Id }

// GetLogin returns RevisionDetailV1RevisionMetadataCreatedByUser.Login, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadataCreatedByUser) GetLogin() string { return v.Login }

// GetName returns RevisionDetailV1RevisionMetadataCreatedByUser.Name, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadataCreatedByUser) GetName() string { return v.Name }

// GetAvatar returns RevisionDetailV1RevisionMetadataCreatedByUser.Avatar, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1RevisionMetadataCreatedByUser) GetAvatar() string { return v.Avatar }

// RevisionDetailV1 includes the GraphQL fields of VultrAccountConfiguration requested by the fragment RevisionDetailV1.
type RevisionDetailV1VultrAccountConfiguration struct {
	RevisionData     string                           `json:"revisionData"`
	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

// GetRevisionData returns RevisionDetailV1VultrAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1VultrAccountConfiguration) GetRevisionData() string { return v.RevisionData }

// GetRevisionMetadata returns RevisionDetailV1VultrAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *RevisionDetailV1VultrAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionMetadata
}

type S3BucketBackendInput struct {
	AwsAccountId uuid.UUID `json:"awsAccountId"`
	BucketName   string    `json:"bucketName"`
	Region       string    `json:"region"`
	Key          string    `json:"key"`
}

// GetAwsAccountId returns S3BucketBackendInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *S3BucketBackendInput) GetAwsAccountId() uuid.UUID { return v.AwsAccountId }

// GetBucketName returns S3BucketBackendInput.BucketName, and is useful for accessing the field via an interface.
func (v *S3BucketBackendInput) GetBucketName() string { return v.BucketName }

// GetRegion returns S3BucketBackendInput.Region, and is useful for accessing the field via an interface.
func (v *S3BucketBackendInput) GetRegion() string { return v.Region }

// GetKey returns S3BucketBackendInput.Key, and is useful for accessing the field via an interface.
func (v *S3BucketBackendInput) GetKey() string { return v.Key }

type SecretMountDataInput struct {
	SecretName string `json:"secretName"`
	MountPath  string `json:"mountPath"`
	ReadOnly   bool   `json:"readOnly"`
}

// GetSecretName returns SecretMountDataInput.SecretName, and is useful for accessing the field via an interface.
func (v *SecretMountDataInput) GetSecretName() string { return v.SecretName }

// GetMountPath returns SecretMountDataInput.MountPath, and is useful for accessing the field via an interface.
func (v *SecretMountDataInput) GetMountPath() string { return v.MountPath }

// GetReadOnly returns SecretMountDataInput.ReadOnly, and is useful for accessing the field via an interface.
func (v *SecretMountDataInput) GetReadOnly() bool { return v.ReadOnly }

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

type SortInput struct {
	Direction SortDirection `json:"direction"`
	Field     string        `json:"field"`
}

// GetDirection returns SortInput.Direction, and is useful for accessing the field via an interface.
func (v *SortInput) GetDirection() SortDirection { return v.Direction }

// GetField returns SortInput.Field, and is useful for accessing the field via an interface.
func (v *SortInput) GetField() string { return v.Field }

type SourceInput struct {
	Git               GitSourceInput               `json:"git"`
	TerraformModule   TerraformModuleSourceInput   `json:"terraformModule"`
	HelmRepository    HelmRepositorySourceInput    `json:"helmRepository"`
	ContainerRegistry ContainerRegistrySourceInput `json:"containerRegistry"`
}

// GetGit returns SourceInput.Git, and is useful for accessing the field via an interface.
func (v *SourceInput) GetGit() GitSourceInput { return v.Git }

// GetTerraformModule returns SourceInput.TerraformModule, and is useful for accessing the field via an interface.
func (v *SourceInput) GetTerraformModule() TerraformModuleSourceInput { return v.TerraformModule }

// GetHelmRepository returns SourceInput.HelmRepository, and is useful for accessing the field via an interface.
func (v *SourceInput) GetHelmRepository() HelmRepositorySourceInput { return v.HelmRepository }

// GetContainerRegistry returns SourceInput.ContainerRegistry, and is useful for accessing the field via an interface.
func (v *SourceInput) GetContainerRegistry() ContainerRegistrySourceInput { return v.ContainerRegistry }

type StringCriterion struct {
	Value    string                      `json:"value"`
	Operator FilterCriterionOperatorType `json:"operator"`
}

// GetValue returns StringCriterion.Value, and is useful for accessing the field via an interface.
func (v *StringCriterion) GetValue() string { return v.Value }

// GetOperator returns StringCriterion.Operator, and is useful for accessing the field via an interface.
func (v *StringCriterion) GetOperator() FilterCriterionOperatorType { return v.Operator }

// submitWorkflowRunResponse is returned by submitWorkflowRun on success.
type SubmitWorkflowRunResponse struct {
	SubmitWorkflow submitWorkflowRunSubmitWorkflowWorkflowRun `json:"submitWorkflow"`
}

// GetSubmitWorkflow returns SubmitWorkflowRunResponse.SubmitWorkflow, and is useful for accessing the field via an interface.
func (v *SubmitWorkflowRunResponse) GetSubmitWorkflow() submitWorkflowRunSubmitWorkflowWorkflowRun {
	return v.SubmitWorkflow
}

type TCPProbeInput struct {
	Host string `json:"host"`
	Port string `json:"port"`
}

// GetHost returns TCPProbeInput.Host, and is useful for accessing the field via an interface.
func (v *TCPProbeInput) GetHost() string { return v.Host }

// GetPort returns TCPProbeInput.Port, and is useful for accessing the field via an interface.
func (v *TCPProbeInput) GetPort() string { return v.Port }

// See TerraformAutomaticOutputConfiguration.
type TerraformAutomaticOutputConfigurationInput struct {
	Disabled  bool     `json:"disabled"`
	Sensitive bool     `json:"sensitive"`
	Excluded  []string `json:"excluded"`
}

// GetDisabled returns TerraformAutomaticOutputConfigurationInput.Disabled, and is useful for accessing the field via an interface.
func (v *TerraformAutomaticOutputConfigurationInput) GetDisabled() bool { return v.Disabled }

// GetSensitive returns TerraformAutomaticOutputConfigurationInput.Sensitive, and is useful for accessing the field via an interface.
func (v *TerraformAutomaticOutputConfigurationInput) GetSensitive() bool { return v.Sensitive }

// GetExcluded returns TerraformAutomaticOutputConfigurationInput.Excluded, and is useful for accessing the field via an interface.
func (v *TerraformAutomaticOutputConfigurationInput) GetExcluded() []string { return v.Excluded }

type TerraformModuleSourceInput struct {
	Source      string                                `json:"source"`
	Version     string                                `json:"version"`
	Integration TerraformModuleSourceIntegrationInput `json:"integration"`
}

// GetSource returns TerraformModuleSourceInput.Source, and is useful for accessing the field via an interface.
func (v *TerraformModuleSourceInput) GetSource() string { return v.Source }

// GetVersion returns TerraformModuleSourceInput.Version, and is useful for accessing the field via an interface.
func (v *TerraformModuleSourceInput) GetVersion() string { return v.Version }

// GetIntegration returns TerraformModuleSourceInput.Integration, and is useful for accessing the field via an interface.
func (v *TerraformModuleSourceInput) GetIntegration() TerraformModuleSourceIntegrationInput {
	return v.Integration
}

type TerraformModuleSourceIntegrationInput struct {
	Git GitSourceIntegrationInput `json:"git"`
}

// GetGit returns TerraformModuleSourceIntegrationInput.Git, and is useful for accessing the field via an interface.
func (v *TerraformModuleSourceIntegrationInput) GetGit() GitSourceIntegrationInput { return v.Git }

// See TerraformOutputConfiguration.
type TerraformOutputConfigurationInput struct {
	Automatic     TerraformAutomaticOutputConfigurationInput `json:"automatic"`
	Customization string                                     `json:"customization"`
}

// GetAutomatic returns TerraformOutputConfigurationInput.Automatic, and is useful for accessing the field via an interface.
func (v *TerraformOutputConfigurationInput) GetAutomatic() TerraformAutomaticOutputConfigurationInput {
	return v.Automatic
}

// GetCustomization returns TerraformOutputConfigurationInput.Customization, and is useful for accessing the field via an interface.
func (v *TerraformOutputConfigurationInput) GetCustomization() string { return v.Customization }

type TerraformProviderInput struct {
	// Zeet ID for a connected AWS Account
	AwsAccountId uuid.UUID `json:"awsAccountId"`
	// Zeet ID for a connected GCP Account
	GcpAccountId uuid.UUID `json:"gcpAccountId"`
	// Zeet ID for a connected DigitalOcean Account
	DoAccountId uuid.UUID `json:"doAccountId"`
	// Region name, when applicable
	Region string `json:"region"`
}

// GetAwsAccountId returns TerraformProviderInput.AwsAccountId, and is useful for accessing the field via an interface.
func (v *TerraformProviderInput) GetAwsAccountId() uuid.UUID { return v.AwsAccountId }

// GetGcpAccountId returns TerraformProviderInput.GcpAccountId, and is useful for accessing the field via an interface.
func (v *TerraformProviderInput) GetGcpAccountId() uuid.UUID { return v.GcpAccountId }

// GetDoAccountId returns TerraformProviderInput.DoAccountId, and is useful for accessing the field via an interface.
func (v *TerraformProviderInput) GetDoAccountId() uuid.UUID { return v.DoAccountId }

// GetRegion returns TerraformProviderInput.Region, and is useful for accessing the field via an interface.
func (v *TerraformProviderInput) GetRegion() string { return v.Region }

type TerraformStateBackendInput struct {
	S3Bucket  S3BucketBackendInput  `json:"s3Bucket"`
	GcsBucket GCSBucketBackendInput `json:"gcsBucket"`
}

// GetS3Bucket returns TerraformStateBackendInput.S3Bucket, and is useful for accessing the field via an interface.
func (v *TerraformStateBackendInput) GetS3Bucket() S3BucketBackendInput { return v.S3Bucket }

// GetGcsBucket returns TerraformStateBackendInput.GcsBucket, and is useful for accessing the field via an interface.
func (v *TerraformStateBackendInput) GetGcsBucket() GCSBucketBackendInput { return v.GcsBucket }

type TerraformTargetConfigurationInput struct {
	StateBackend TerraformStateBackendInput `json:"stateBackend"`
	ModuleName   string                     `json:"moduleName"`
	Provider     TerraformProviderInput     `json:"provider"`
}

// GetStateBackend returns TerraformTargetConfigurationInput.StateBackend, and is useful for accessing the field via an interface.
func (v *TerraformTargetConfigurationInput) GetStateBackend() TerraformStateBackendInput {
	return v.StateBackend
}

// GetModuleName returns TerraformTargetConfigurationInput.ModuleName, and is useful for accessing the field via an interface.
func (v *TerraformTargetConfigurationInput) GetModuleName() string { return v.ModuleName }

// GetProvider returns TerraformTargetConfigurationInput.Provider, and is useful for accessing the field via an interface.
func (v *TerraformTargetConfigurationInput) GetProvider() TerraformProviderInput { return v.Provider }

type TriggerActionType string

const (
	TriggerActionTypeOrchestrationWorkflow TriggerActionType = "ORCHESTRATION_WORKFLOW"
)

type TriggerConfigurationInput struct {
	Event  EventTriggerConfigurationInput  `json:"event"`
	Action ActionTriggerConfigurationInput `json:"action"`
}

// GetEvent returns TriggerConfigurationInput.Event, and is useful for accessing the field via an interface.
func (v *TriggerConfigurationInput) GetEvent() EventTriggerConfigurationInput { return v.Event }

// GetAction returns TriggerConfigurationInput.Action, and is useful for accessing the field via an interface.
func (v *TriggerConfigurationInput) GetAction() ActionTriggerConfigurationInput { return v.Action }

type TriggerDefinitionInput struct {
	Action        TriggerActionType         `json:"action"`
	Events        []TriggerEventType        `json:"events"`
	Configuration TriggerConfigurationInput `json:"configuration"`
}

// GetAction returns TriggerDefinitionInput.Action, and is useful for accessing the field via an interface.
func (v *TriggerDefinitionInput) GetAction() TriggerActionType { return v.Action }

// GetEvents returns TriggerDefinitionInput.Events, and is useful for accessing the field via an interface.
func (v *TriggerDefinitionInput) GetEvents() []TriggerEventType { return v.Events }

// GetConfiguration returns TriggerDefinitionInput.Configuration, and is useful for accessing the field via an interface.
func (v *TriggerDefinitionInput) GetConfiguration() TriggerConfigurationInput { return v.Configuration }

type TriggerEventType string

const (
	TriggerEventTypeManual             TriggerEventType = "MANUAL"
	TriggerEventTypeGitPush            TriggerEventType = "GIT_PUSH"
	TriggerEventTypeGitPrOpened        TriggerEventType = "GIT_PR_OPENED"
	TriggerEventTypeGitPrReviewComment TriggerEventType = "GIT_PR_REVIEW_COMMENT"
	TriggerEventTypeGitReleaseCreated  TriggerEventType = "GIT_RELEASE_CREATED"
	TriggerEventTypeGitReleaseReleased TriggerEventType = "GIT_RELEASE_RELEASED"
	TriggerEventTypeGitIssueOpened     TriggerEventType = "GIT_ISSUE_OPENED"
	TriggerEventTypeCronjob            TriggerEventType = "CRONJOB"
)

// unlinkProjectResponse is returned by unlinkProject on success.
type UnlinkProjectResponse struct {
	UnlinkProject bool `json:"unlinkProject"`
}

// GetUnlinkProject returns UnlinkProjectResponse.UnlinkProject, and is useful for accessing the field via an interface.
func (v *UnlinkProjectResponse) GetUnlinkProject() bool { return v.UnlinkProject }

type UpdateDeployInput struct {
	Configuration DeploymentConfigurationInput `json:"configuration"`
}

// GetConfiguration returns UpdateDeployInput.Configuration, and is useful for accessing the field via an interface.
func (v *UpdateDeployInput) GetConfiguration() DeploymentConfigurationInput { return v.Configuration }

// updateDeployResponse is returned by updateDeploy on success.
type UpdateDeployResponse struct {
	UpdateDeploy updateDeployUpdateDeploy `json:"updateDeploy"`
}

// GetUpdateDeploy returns UpdateDeployResponse.UpdateDeploy, and is useful for accessing the field via an interface.
func (v *UpdateDeployResponse) GetUpdateDeploy() updateDeployUpdateDeploy { return v.UpdateDeploy }

type UpdateProjectInput struct {
	GroupId      uuid.UUID     `json:"groupId"`
	GroupName    string        `json:"groupName"`
	SubGroupId   uuid.UUID     `json:"subGroupId"`
	SubGroupName string        `json:"subGroupName"`
	Name         string        `json:"name"`
	Envs         []EnvVarInput `json:"envs"`
}

// GetGroupId returns UpdateProjectInput.GroupId, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGroupId() uuid.UUID { return v.GroupId }

// GetGroupName returns UpdateProjectInput.GroupName, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetGroupName() string { return v.GroupName }

// GetSubGroupId returns UpdateProjectInput.SubGroupId, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetSubGroupId() uuid.UUID { return v.SubGroupId }

// GetSubGroupName returns UpdateProjectInput.SubGroupName, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetSubGroupName() string { return v.SubGroupName }

// GetName returns UpdateProjectInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetName() string { return v.Name }

// GetEnvs returns UpdateProjectInput.Envs, and is useful for accessing the field via an interface.
func (v *UpdateProjectInput) GetEnvs() []EnvVarInput { return v.Envs }

// updateProjectResponse is returned by updateProject on success.
type UpdateProjectResponse struct {
	UpdateProject updateProjectUpdateProject `json:"updateProject"`
}

// GetUpdateProject returns UpdateProjectResponse.UpdateProject, and is useful for accessing the field via an interface.
func (v *UpdateProjectResponse) GetUpdateProject() updateProjectUpdateProject { return v.UpdateProject }

type UpdateTriggerInput struct {
	TriggerId  uuid.UUID              `json:"triggerId"`
	Definition TriggerDefinitionInput `json:"definition"`
}

// GetTriggerId returns UpdateTriggerInput.TriggerId, and is useful for accessing the field via an interface.
func (v *UpdateTriggerInput) GetTriggerId() uuid.UUID { return v.TriggerId }

// GetDefinition returns UpdateTriggerInput.Definition, and is useful for accessing the field via an interface.
func (v *UpdateTriggerInput) GetDefinition() TriggerDefinitionInput { return v.Definition }

type UpdateWorkflowInput struct {
	Name       string                  `json:"name"`
	Definition WorkflowDefinitionInput `json:"definition"`
}

// GetName returns UpdateWorkflowInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateWorkflowInput) GetName() string { return v.Name }

// GetDefinition returns UpdateWorkflowInput.Definition, and is useful for accessing the field via an interface.
func (v *UpdateWorkflowInput) GetDefinition() WorkflowDefinitionInput { return v.Definition }

// updateWorkflowResponse is returned by updateWorkflow on success.
type UpdateWorkflowResponse struct {
	UpdateWorkflow updateWorkflowUpdateWorkflow `json:"updateWorkflow"`
}

// GetUpdateWorkflow returns UpdateWorkflowResponse.UpdateWorkflow, and is useful for accessing the field via an interface.
func (v *UpdateWorkflowResponse) GetUpdateWorkflow() updateWorkflowUpdateWorkflow {
	return v.UpdateWorkflow
}

// updateWorkflowTriggerResponse is returned by updateWorkflowTrigger on success.
type UpdateWorkflowTriggerResponse struct {
	UpdateTrigger updateWorkflowTriggerUpdateTrigger `json:"updateTrigger"`
}

// GetUpdateTrigger returns UpdateWorkflowTriggerResponse.UpdateTrigger, and is useful for accessing the field via an interface.
func (v *UpdateWorkflowTriggerResponse) GetUpdateTrigger() updateWorkflowTriggerUpdateTrigger {
	return v.UpdateTrigger
}

// userPersonalAccessTokensResponse is returned by userPersonalAccessTokens on success.
type UserPersonalAccessTokensResponse struct {
	User userPersonalAccessTokensUser `json:"user"`
}

// GetUser returns UserPersonalAccessTokensResponse.User, and is useful for accessing the field via an interface.
func (v *UserPersonalAccessTokensResponse) GetUser() userPersonalAccessTokensUser { return v.User }

type VariableType string

const (
	VariableTypeString  VariableType = "STRING"
	VariableTypeBoolean VariableType = "BOOLEAN"
	VariableTypeInteger VariableType = "INTEGER"
	VariableTypeFloat   VariableType = "FLOAT"
)

type VolumeSpecInput struct {
	Size      int    `json:"size"`
	MountPath string `json:"mountPath"`
}

// GetSize returns VolumeSpecInput.Size, and is useful for accessing the field via an interface.
func (v *VolumeSpecInput) GetSize() int { return v.Size }

// GetMountPath returns VolumeSpecInput.MountPath, and is useful for accessing the field via an interface.
func (v *VolumeSpecInput) GetMountPath() string { return v.MountPath }

type WorkflowBranchDefinitionInput struct {
	Name      string `json:"name"`
	CommitSha string `json:"commitSha"`
}

// GetName returns WorkflowBranchDefinitionInput.Name, and is useful for accessing the field via an interface.
func (v *WorkflowBranchDefinitionInput) GetName() string { return v.Name }

// GetCommitSha returns WorkflowBranchDefinitionInput.CommitSha, and is useful for accessing the field via an interface.
func (v *WorkflowBranchDefinitionInput) GetCommitSha() string { return v.CommitSha }

type WorkflowDefinitionInput struct {
	Steps             []WorkflowStepDefinitionInput `json:"steps"`
	Source            SourceInput                   `json:"source"`
	Branch            WorkflowBranchDefinitionInput `json:"branch"`
	WorkflowClusterId uuid.UUID                     `json:"workflowClusterId"`
}

// GetSteps returns WorkflowDefinitionInput.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowDefinitionInput) GetSteps() []WorkflowStepDefinitionInput { return v.Steps }

// GetSource returns WorkflowDefinitionInput.Source, and is useful for accessing the field via an interface.
func (v *WorkflowDefinitionInput) GetSource() SourceInput { return v.Source }

// GetBranch returns WorkflowDefinitionInput.Branch, and is useful for accessing the field via an interface.
func (v *WorkflowDefinitionInput) GetBranch() WorkflowBranchDefinitionInput { return v.Branch }

// GetWorkflowClusterId returns WorkflowDefinitionInput.WorkflowClusterId, and is useful for accessing the field via an interface.
func (v *WorkflowDefinitionInput) GetWorkflowClusterId() uuid.UUID { return v.WorkflowClusterId }

// WorkflowDetail includes the GraphQL fields of Workflow requested by the fragment WorkflowDetail.
type WorkflowDetail struct {
	Id       uuid.UUID                                   `json:"id"`
	Steps    []WorkflowDetailStepsWorkflowStepDefinition `json:"steps"`
	Triggers WorkflowDetailTriggersTriggerConnection     `json:"triggers"`
}

// GetId returns WorkflowDetail.Id, and is useful for accessing the field via an interface.
func (v *WorkflowDetail) GetId() uuid.UUID { return v.Id }

// GetSteps returns WorkflowDetail.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowDetail) GetSteps() []WorkflowDetailStepsWorkflowStepDefinition { return v.Steps }

// GetTriggers returns WorkflowDetail.Triggers, and is useful for accessing the field via an interface.
func (v *WorkflowDetail) GetTriggers() WorkflowDetailTriggersTriggerConnection { return v.Triggers }

// workflowDetailResponse is returned by workflowDetail on success.
type WorkflowDetailResponse struct {
	Team workflowDetailTeam `json:"team"`
}

// GetTeam returns WorkflowDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *WorkflowDetailResponse) GetTeam() workflowDetailTeam { return v.Team }

// WorkflowDetailStepsWorkflowStepDefinition includes the requested fields of the GraphQL type WorkflowStepDefinition.
type WorkflowDetailStepsWorkflowStepDefinition struct {
	Action         WorkflowStepActionType `json:"action"`
	SequenceNumber int                    `json:"sequenceNumber"`
	Disabled       bool                   `json:"disabled"`
}

// GetAction returns WorkflowDetailStepsWorkflowStepDefinition.Action, and is useful for accessing the field via an interface.
func (v *WorkflowDetailStepsWorkflowStepDefinition) GetAction() WorkflowStepActionType {
	return v.Action
}

// GetSequenceNumber returns WorkflowDetailStepsWorkflowStepDefinition.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowDetailStepsWorkflowStepDefinition) GetSequenceNumber() int { return v.SequenceNumber }

// GetDisabled returns WorkflowDetailStepsWorkflowStepDefinition.Disabled, and is useful for accessing the field via an interface.
func (v *WorkflowDetailStepsWorkflowStepDefinition) GetDisabled() bool { return v.Disabled }

// WorkflowDetailTriggersTriggerConnection includes the requested fields of the GraphQL type TriggerConnection.
type WorkflowDetailTriggersTriggerConnection struct {
	TotalCount int                                                   `json:"totalCount"`
	Nodes      []WorkflowDetailTriggersTriggerConnectionNodesTrigger `json:"nodes"`
}

// GetTotalCount returns WorkflowDetailTriggersTriggerConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnection) GetTotalCount() int { return v.TotalCount }

// GetNodes returns WorkflowDetailTriggersTriggerConnection.Nodes, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnection) GetNodes() []WorkflowDetailTriggersTriggerConnectionNodesTrigger {
	return v.Nodes
}

// WorkflowDetailTriggersTriggerConnectionNodesTrigger includes the requested fields of the GraphQL type Trigger.
type WorkflowDetailTriggersTriggerConnectionNodesTrigger struct {
	Id            uuid.UUID                                                        `json:"id"`
	Action        TriggerActionType                                                `json:"action"`
	Events        []TriggerEventType                                               `json:"events"`
	Configuration WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration `json:"configuration"`
}

// GetId returns WorkflowDetailTriggersTriggerConnectionNodesTrigger.Id, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTrigger) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowDetailTriggersTriggerConnectionNodesTrigger.Action, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTrigger) GetAction() TriggerActionType {
	return v.Action
}

// GetEvents returns WorkflowDetailTriggersTriggerConnectionNodesTrigger.Events, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTrigger) GetEvents() []TriggerEventType {
	return v.Events
}

// GetConfiguration returns WorkflowDetailTriggersTriggerConnectionNodesTrigger.Configuration, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTrigger) GetConfiguration() WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration {
	return v.Configuration
}

// WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration includes the requested fields of the GraphQL type TriggerConfiguration.
type WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration struct {
	Event  WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfiguration   `json:"event"`
	Action WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationActionActionTriggerConfiguration `json:"action"`
}

// GetEvent returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration.Event, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration) GetEvent() WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfiguration {
	return v.Event
}

// GetAction returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration.Action, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfiguration) GetAction() WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationActionActionTriggerConfiguration {
	return v.Action
}

// WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationActionActionTriggerConfiguration includes the requested fields of the GraphQL type ActionTriggerConfiguration.
type WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationActionActionTriggerConfiguration struct {
	WorkflowId uuid.UUID `json:"workflowId"`
}

// GetWorkflowId returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationActionActionTriggerConfiguration.WorkflowId, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationActionActionTriggerConfiguration) GetWorkflowId() uuid.UUID {
	return v.WorkflowId
}

// WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfiguration includes the requested fields of the GraphQL type EventTriggerConfiguration.
type WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfiguration struct {
	Git WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration `json:"git"`
}

// GetGit returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfiguration.Git, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfiguration) GetGit() WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration {
	return v.Git
}

// WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration includes the requested fields of the GraphQL type GitEventTriggerConfiguration.
type WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration struct {
	RepoId             string `json:"repoId"`
	RepoBranchName     string `json:"repoBranchName"`
	RepoOwner          string `json:"repoOwner"`
	RepoName           string `json:"repoName"`
	GithubConnectionId int    `json:"githubConnectionId"`
}

// GetRepoId returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration.RepoId, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration) GetRepoId() string {
	return v.RepoId
}

// GetRepoBranchName returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration.RepoBranchName, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration) GetRepoBranchName() string {
	return v.RepoBranchName
}

// GetRepoOwner returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration.RepoOwner, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration) GetRepoOwner() string {
	return v.RepoOwner
}

// GetRepoName returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration.RepoName, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration) GetRepoName() string {
	return v.RepoName
}

// GetGithubConnectionId returns WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration.GithubConnectionId, and is useful for accessing the field via an interface.
func (v *WorkflowDetailTriggersTriggerConnectionNodesTriggerConfigurationEventEventTriggerConfigurationGitGitEventTriggerConfiguration) GetGithubConnectionId() int {
	return v.GithubConnectionId
}

type WorkflowExecutionType string

const (
	WorkflowExecutionTypeBuildRun     WorkflowExecutionType = "BUILD_RUN"
	WorkflowExecutionTypeDeployRun    WorkflowExecutionType = "DEPLOY_RUN"
	WorkflowExecutionTypeDriverAction WorkflowExecutionType = "DRIVER_ACTION"
)

type WorkflowRunDefinitionInput struct {
	Steps  []WorkflowRunStepDefinitionInput `json:"steps"`
	Source SourceInput                      `json:"source"`
	Branch WorkflowBranchDefinitionInput    `json:"branch"`
}

// GetSteps returns WorkflowRunDefinitionInput.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunDefinitionInput) GetSteps() []WorkflowRunStepDefinitionInput { return v.Steps }

// GetSource returns WorkflowRunDefinitionInput.Source, and is useful for accessing the field via an interface.
func (v *WorkflowRunDefinitionInput) GetSource() SourceInput { return v.Source }

// GetBranch returns WorkflowRunDefinitionInput.Branch, and is useful for accessing the field via an interface.
func (v *WorkflowRunDefinitionInput) GetBranch() WorkflowBranchDefinitionInput { return v.Branch }

// WorkflowRunDetail includes the GraphQL fields of WorkflowRun requested by the fragment WorkflowRunDetail.
type WorkflowRunDetail struct {
	WorkflowRunListItem `json:"-"`
	FinishedAt          time.Time                               `json:"finishedAt"`
	Steps               []WorkflowRunDetailStepsWorkflowRunStep `json:"-"`
}

// GetFinishedAt returns WorkflowRunDetail.FinishedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetail) GetFinishedAt() time.Time { return v.FinishedAt }

// GetSteps returns WorkflowRunDetail.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetail) GetSteps() []WorkflowRunDetailStepsWorkflowRunStep { return v.Steps }

// GetId returns WorkflowRunDetail.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetail) GetId() uuid.UUID { return v.WorkflowRunListItem.Id }

// GetSequence returns WorkflowRunDetail.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetail) GetSequence() int { return v.WorkflowRunListItem.Sequence }

// GetStatus returns WorkflowRunDetail.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetail) GetStatus() WorkflowRunStatus { return v.WorkflowRunListItem.Status }

// GetCreatedAt returns WorkflowRunDetail.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetail) GetCreatedAt() time.Time { return v.WorkflowRunListItem.CreatedAt }

func (v *WorkflowRunDetail) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetail
		Steps []json.RawMessage `json:"steps"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetail = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunListItem)
	if err != nil {
		return err
	}

	{
		dst := &v.Steps
		src := firstPass.Steps
		*dst = make(
			[]WorkflowRunDetailStepsWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunDetailStepsWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunDetail.Steps: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunDetail struct {
	FinishedAt time.Time `json:"finishedAt"`

	Steps []json.RawMessage `json:"steps"`

	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *WorkflowRunDetail) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetail) __premarshalJSON() (*__premarshalWorkflowRunDetail, error) {
	var retval __premarshalWorkflowRunDetail

	retval.FinishedAt = v.FinishedAt
	{

		dst := &retval.Steps
		src := v.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunDetailStepsWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunDetail.Steps: %w", err)
			}
		}
	}
	retval.Id = v.WorkflowRunListItem.Id
	retval.Sequence = v.WorkflowRunListItem.Sequence
	retval.Status = v.WorkflowRunListItem.Status
	retval.CreatedAt = v.WorkflowRunListItem.CreatedAt
	return &retval, nil
}

// workflowRunDetailLogsResponse is returned by workflowRunDetailLogs on success.
type WorkflowRunDetailLogsResponse struct {
	Team workflowRunDetailLogsTeam `json:"team"`
}

// GetTeam returns WorkflowRunDetailLogsResponse.Team, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailLogsResponse) GetTeam() workflowRunDetailLogsTeam { return v.Team }

// workflowRunDetailResponse is returned by workflowRunDetail on success.
type WorkflowRunDetailResponse struct {
	Team workflowRunDetailTeam `json:"team"`
}

// GetTeam returns WorkflowRunDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailResponse) GetTeam() workflowRunDetailTeam { return v.Team }

// WorkflowRunDetailStepsBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunDetailStepsBuildRunStep struct {
	Typename                          string `json:"__typename"`
	WorkflowRunStepDetailBuildRunStep `json:"-"`
}

// GetTypename returns WorkflowRunDetailStepsBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunDetailStepsBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetId() uuid.UUID {
	return v.WorkflowRunStepDetailBuildRunStep.Id
}

// GetAction returns WorkflowRunDetailStepsBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.WorkflowRunStepDetailBuildRunStep.Action
}

// GetDependsOn returns WorkflowRunDetailStepsBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.WorkflowRunStepDetailBuildRunStep.DependsOn
}

// GetStatus returns WorkflowRunDetailStepsBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetStatus() WorkflowRunStepStatus {
	return v.WorkflowRunStepDetailBuildRunStep.Status
}

// GetSequenceNumber returns WorkflowRunDetailStepsBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetSequenceNumber() int {
	return v.WorkflowRunStepDetailBuildRunStep.SequenceNumber
}

// GetCreatedAt returns WorkflowRunDetailStepsBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetCreatedAt() time.Time {
	return v.WorkflowRunStepDetailBuildRunStep.CreatedAt
}

// GetUpdatedAt returns WorkflowRunDetailStepsBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetUpdatedAt() time.Time {
	return v.WorkflowRunStepDetailBuildRunStep.UpdatedAt
}

// GetExecutionId returns WorkflowRunDetailStepsBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetExecutionId() uuid.UUID {
	return v.WorkflowRunStepDetailBuildRunStep.ExecutionId
}

// GetExecutionType returns WorkflowRunDetailStepsBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetExecutionType() WorkflowExecutionType {
	return v.WorkflowRunStepDetailBuildRunStep.ExecutionType
}

// GetExecutionError returns WorkflowRunDetailStepsBuildRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetExecutionError() string {
	return v.WorkflowRunStepDetailBuildRunStep.ExecutionError
}

// GetOutputs returns WorkflowRunDetailStepsBuildRunStep.Outputs, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsBuildRunStep) GetOutputs() []WorkflowRunStepDetailOutputsBuildArtifact {
	return v.WorkflowRunStepDetailBuildRunStep.Outputs
}

func (v *WorkflowRunDetailStepsBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetailStepsBuildRunStep
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetailStepsBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunStepDetailBuildRunStep)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunDetailStepsBuildRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`

	Outputs []WorkflowRunStepDetailOutputsBuildArtifact `json:"outputs"`
}

func (v *WorkflowRunDetailStepsBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetailStepsBuildRunStep) __premarshalJSON() (*__premarshalWorkflowRunDetailStepsBuildRunStep, error) {
	var retval __premarshalWorkflowRunDetailStepsBuildRunStep

	retval.Typename = v.Typename
	retval.Id = v.WorkflowRunStepDetailBuildRunStep.Id
	retval.Action = v.WorkflowRunStepDetailBuildRunStep.Action
	{

		dst := &retval.DependsOn
		src := v.WorkflowRunStepDetailBuildRunStep.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunDetailStepsBuildRunStep.WorkflowRunStepDetailBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.WorkflowRunStepDetailBuildRunStep.Status
	retval.SequenceNumber = v.WorkflowRunStepDetailBuildRunStep.SequenceNumber
	retval.CreatedAt = v.WorkflowRunStepDetailBuildRunStep.CreatedAt
	retval.UpdatedAt = v.WorkflowRunStepDetailBuildRunStep.UpdatedAt
	retval.ExecutionId = v.WorkflowRunStepDetailBuildRunStep.ExecutionId
	retval.ExecutionType = v.WorkflowRunStepDetailBuildRunStep.ExecutionType
	retval.ExecutionError = v.WorkflowRunStepDetailBuildRunStep.ExecutionError
	retval.Outputs = v.WorkflowRunStepDetailBuildRunStep.Outputs
	return &retval, nil
}

// WorkflowRunDetailStepsClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunDetailStepsClusterPrecheckStep struct {
	Typename                                 string `json:"__typename"`
	WorkflowRunStepDetailClusterPrecheckStep `json:"-"`
}

// GetTypename returns WorkflowRunDetailStepsClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunDetailStepsClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetId() uuid.UUID {
	return v.WorkflowRunStepDetailClusterPrecheckStep.Id
}

// GetAction returns WorkflowRunDetailStepsClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.WorkflowRunStepDetailClusterPrecheckStep.Action
}

// GetDependsOn returns WorkflowRunDetailStepsClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.WorkflowRunStepDetailClusterPrecheckStep.DependsOn
}

// GetStatus returns WorkflowRunDetailStepsClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetStatus() WorkflowRunStepStatus {
	return v.WorkflowRunStepDetailClusterPrecheckStep.Status
}

// GetSequenceNumber returns WorkflowRunDetailStepsClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetSequenceNumber() int {
	return v.WorkflowRunStepDetailClusterPrecheckStep.SequenceNumber
}

// GetCreatedAt returns WorkflowRunDetailStepsClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetCreatedAt() time.Time {
	return v.WorkflowRunStepDetailClusterPrecheckStep.CreatedAt
}

// GetUpdatedAt returns WorkflowRunDetailStepsClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetUpdatedAt() time.Time {
	return v.WorkflowRunStepDetailClusterPrecheckStep.UpdatedAt
}

// GetExecutionId returns WorkflowRunDetailStepsClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetExecutionId() uuid.UUID {
	return v.WorkflowRunStepDetailClusterPrecheckStep.ExecutionId
}

// GetExecutionType returns WorkflowRunDetailStepsClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetExecutionType() WorkflowExecutionType {
	return v.WorkflowRunStepDetailClusterPrecheckStep.ExecutionType
}

// GetExecutionError returns WorkflowRunDetailStepsClusterPrecheckStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetExecutionError() string {
	return v.WorkflowRunStepDetailClusterPrecheckStep.ExecutionError
}

// GetCluster returns WorkflowRunDetailStepsClusterPrecheckStep.Cluster, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsClusterPrecheckStep) GetCluster() WorkflowRunStepDetailCluster {
	return v.WorkflowRunStepDetailClusterPrecheckStep.Cluster
}

func (v *WorkflowRunDetailStepsClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetailStepsClusterPrecheckStep
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetailStepsClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunStepDetailClusterPrecheckStep)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunDetailStepsClusterPrecheckStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`

	Cluster WorkflowRunStepDetailCluster `json:"cluster"`
}

func (v *WorkflowRunDetailStepsClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetailStepsClusterPrecheckStep) __premarshalJSON() (*__premarshalWorkflowRunDetailStepsClusterPrecheckStep, error) {
	var retval __premarshalWorkflowRunDetailStepsClusterPrecheckStep

	retval.Typename = v.Typename
	retval.Id = v.WorkflowRunStepDetailClusterPrecheckStep.Id
	retval.Action = v.WorkflowRunStepDetailClusterPrecheckStep.Action
	{

		dst := &retval.DependsOn
		src := v.WorkflowRunStepDetailClusterPrecheckStep.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunDetailStepsClusterPrecheckStep.WorkflowRunStepDetailClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.WorkflowRunStepDetailClusterPrecheckStep.Status
	retval.SequenceNumber = v.WorkflowRunStepDetailClusterPrecheckStep.SequenceNumber
	retval.CreatedAt = v.WorkflowRunStepDetailClusterPrecheckStep.CreatedAt
	retval.UpdatedAt = v.WorkflowRunStepDetailClusterPrecheckStep.UpdatedAt
	retval.ExecutionId = v.WorkflowRunStepDetailClusterPrecheckStep.ExecutionId
	retval.ExecutionType = v.WorkflowRunStepDetailClusterPrecheckStep.ExecutionType
	retval.ExecutionError = v.WorkflowRunStepDetailClusterPrecheckStep.ExecutionError
	retval.Cluster = v.WorkflowRunStepDetailClusterPrecheckStep.Cluster
	return &retval, nil
}

// WorkflowRunDetailStepsDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunDetailStepsDeployRunStep struct {
	Typename                           string `json:"__typename"`
	WorkflowRunStepDetailDeployRunStep `json:"-"`
}

// GetTypename returns WorkflowRunDetailStepsDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunDetailStepsDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetId() uuid.UUID {
	return v.WorkflowRunStepDetailDeployRunStep.Id
}

// GetAction returns WorkflowRunDetailStepsDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.WorkflowRunStepDetailDeployRunStep.Action
}

// GetDependsOn returns WorkflowRunDetailStepsDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.WorkflowRunStepDetailDeployRunStep.DependsOn
}

// GetStatus returns WorkflowRunDetailStepsDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetStatus() WorkflowRunStepStatus {
	return v.WorkflowRunStepDetailDeployRunStep.Status
}

// GetSequenceNumber returns WorkflowRunDetailStepsDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetSequenceNumber() int {
	return v.WorkflowRunStepDetailDeployRunStep.SequenceNumber
}

// GetCreatedAt returns WorkflowRunDetailStepsDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetCreatedAt() time.Time {
	return v.WorkflowRunStepDetailDeployRunStep.CreatedAt
}

// GetUpdatedAt returns WorkflowRunDetailStepsDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetUpdatedAt() time.Time {
	return v.WorkflowRunStepDetailDeployRunStep.UpdatedAt
}

// GetExecutionId returns WorkflowRunDetailStepsDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetExecutionId() uuid.UUID {
	return v.WorkflowRunStepDetailDeployRunStep.ExecutionId
}

// GetExecutionType returns WorkflowRunDetailStepsDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetExecutionType() WorkflowExecutionType {
	return v.WorkflowRunStepDetailDeployRunStep.ExecutionType
}

// GetExecutionError returns WorkflowRunDetailStepsDeployRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetExecutionError() string {
	return v.WorkflowRunStepDetailDeployRunStep.ExecutionError
}

// GetWorkflowRun returns WorkflowRunDetailStepsDeployRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDeployRunStep) GetWorkflowRun() WorkflowRunStepDetailWorkflowRun {
	return v.WorkflowRunStepDetailDeployRunStep.WorkflowRun
}

func (v *WorkflowRunDetailStepsDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetailStepsDeployRunStep
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetailStepsDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunStepDetailDeployRunStep)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunDetailStepsDeployRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`

	WorkflowRun WorkflowRunStepDetailWorkflowRun `json:"workflowRun"`
}

func (v *WorkflowRunDetailStepsDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetailStepsDeployRunStep) __premarshalJSON() (*__premarshalWorkflowRunDetailStepsDeployRunStep, error) {
	var retval __premarshalWorkflowRunDetailStepsDeployRunStep

	retval.Typename = v.Typename
	retval.Id = v.WorkflowRunStepDetailDeployRunStep.Id
	retval.Action = v.WorkflowRunStepDetailDeployRunStep.Action
	{

		dst := &retval.DependsOn
		src := v.WorkflowRunStepDetailDeployRunStep.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunDetailStepsDeployRunStep.WorkflowRunStepDetailDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.WorkflowRunStepDetailDeployRunStep.Status
	retval.SequenceNumber = v.WorkflowRunStepDetailDeployRunStep.SequenceNumber
	retval.CreatedAt = v.WorkflowRunStepDetailDeployRunStep.CreatedAt
	retval.UpdatedAt = v.WorkflowRunStepDetailDeployRunStep.UpdatedAt
	retval.ExecutionId = v.WorkflowRunStepDetailDeployRunStep.ExecutionId
	retval.ExecutionType = v.WorkflowRunStepDetailDeployRunStep.ExecutionType
	retval.ExecutionError = v.WorkflowRunStepDetailDeployRunStep.ExecutionError
	retval.WorkflowRun = v.WorkflowRunStepDetailDeployRunStep.WorkflowRun
	return &retval, nil
}

// WorkflowRunDetailStepsDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunDetailStepsDestroyRunStep struct {
	Typename                            string `json:"__typename"`
	WorkflowRunStepDetailDestroyRunStep `json:"-"`
}

// GetTypename returns WorkflowRunDetailStepsDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunDetailStepsDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetId() uuid.UUID {
	return v.WorkflowRunStepDetailDestroyRunStep.Id
}

// GetAction returns WorkflowRunDetailStepsDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.WorkflowRunStepDetailDestroyRunStep.Action
}

// GetDependsOn returns WorkflowRunDetailStepsDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.WorkflowRunStepDetailDestroyRunStep.DependsOn
}

// GetStatus returns WorkflowRunDetailStepsDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetStatus() WorkflowRunStepStatus {
	return v.WorkflowRunStepDetailDestroyRunStep.Status
}

// GetSequenceNumber returns WorkflowRunDetailStepsDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetSequenceNumber() int {
	return v.WorkflowRunStepDetailDestroyRunStep.SequenceNumber
}

// GetCreatedAt returns WorkflowRunDetailStepsDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetCreatedAt() time.Time {
	return v.WorkflowRunStepDetailDestroyRunStep.CreatedAt
}

// GetUpdatedAt returns WorkflowRunDetailStepsDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetUpdatedAt() time.Time {
	return v.WorkflowRunStepDetailDestroyRunStep.UpdatedAt
}

// GetExecutionId returns WorkflowRunDetailStepsDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetExecutionId() uuid.UUID {
	return v.WorkflowRunStepDetailDestroyRunStep.ExecutionId
}

// GetExecutionType returns WorkflowRunDetailStepsDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetExecutionType() WorkflowExecutionType {
	return v.WorkflowRunStepDetailDestroyRunStep.ExecutionType
}

// GetExecutionError returns WorkflowRunDetailStepsDestroyRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsDestroyRunStep) GetExecutionError() string {
	return v.WorkflowRunStepDetailDestroyRunStep.ExecutionError
}

func (v *WorkflowRunDetailStepsDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetailStepsDestroyRunStep
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetailStepsDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunStepDetailDestroyRunStep)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunDetailStepsDestroyRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *WorkflowRunDetailStepsDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetailStepsDestroyRunStep) __premarshalJSON() (*__premarshalWorkflowRunDetailStepsDestroyRunStep, error) {
	var retval __premarshalWorkflowRunDetailStepsDestroyRunStep

	retval.Typename = v.Typename
	retval.Id = v.WorkflowRunStepDetailDestroyRunStep.Id
	retval.Action = v.WorkflowRunStepDetailDestroyRunStep.Action
	{

		dst := &retval.DependsOn
		src := v.WorkflowRunStepDetailDestroyRunStep.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunDetailStepsDestroyRunStep.WorkflowRunStepDetailDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.WorkflowRunStepDetailDestroyRunStep.Status
	retval.SequenceNumber = v.WorkflowRunStepDetailDestroyRunStep.SequenceNumber
	retval.CreatedAt = v.WorkflowRunStepDetailDestroyRunStep.CreatedAt
	retval.UpdatedAt = v.WorkflowRunStepDetailDestroyRunStep.UpdatedAt
	retval.ExecutionId = v.WorkflowRunStepDetailDestroyRunStep.ExecutionId
	retval.ExecutionType = v.WorkflowRunStepDetailDestroyRunStep.ExecutionType
	retval.ExecutionError = v.WorkflowRunStepDetailDestroyRunStep.ExecutionError
	return &retval, nil
}

// WorkflowRunDetailStepsJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunDetailStepsJobRunStep struct {
	Typename                        string `json:"__typename"`
	WorkflowRunStepDetailJobRunStep `json:"-"`
}

// GetTypename returns WorkflowRunDetailStepsJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunDetailStepsJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetId() uuid.UUID {
	return v.WorkflowRunStepDetailJobRunStep.Id
}

// GetAction returns WorkflowRunDetailStepsJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetAction() GenericWorkflowStepActionType {
	return v.WorkflowRunStepDetailJobRunStep.Action
}

// GetDependsOn returns WorkflowRunDetailStepsJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.WorkflowRunStepDetailJobRunStep.DependsOn
}

// GetStatus returns WorkflowRunDetailStepsJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetStatus() WorkflowRunStepStatus {
	return v.WorkflowRunStepDetailJobRunStep.Status
}

// GetSequenceNumber returns WorkflowRunDetailStepsJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetSequenceNumber() int {
	return v.WorkflowRunStepDetailJobRunStep.SequenceNumber
}

// GetCreatedAt returns WorkflowRunDetailStepsJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetCreatedAt() time.Time {
	return v.WorkflowRunStepDetailJobRunStep.CreatedAt
}

// GetUpdatedAt returns WorkflowRunDetailStepsJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetUpdatedAt() time.Time {
	return v.WorkflowRunStepDetailJobRunStep.UpdatedAt
}

// GetExecutionId returns WorkflowRunDetailStepsJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetExecutionId() uuid.UUID {
	return v.WorkflowRunStepDetailJobRunStep.ExecutionId
}

// GetExecutionType returns WorkflowRunDetailStepsJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetExecutionType() WorkflowExecutionType {
	return v.WorkflowRunStepDetailJobRunStep.ExecutionType
}

// GetExecutionError returns WorkflowRunDetailStepsJobRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunDetailStepsJobRunStep) GetExecutionError() string {
	return v.WorkflowRunStepDetailJobRunStep.ExecutionError
}

func (v *WorkflowRunDetailStepsJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunDetailStepsJobRunStep
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunDetailStepsJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunStepDetailJobRunStep)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunDetailStepsJobRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *WorkflowRunDetailStepsJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunDetailStepsJobRunStep) __premarshalJSON() (*__premarshalWorkflowRunDetailStepsJobRunStep, error) {
	var retval __premarshalWorkflowRunDetailStepsJobRunStep

	retval.Typename = v.Typename
	retval.Id = v.WorkflowRunStepDetailJobRunStep.Id
	retval.Action = v.WorkflowRunStepDetailJobRunStep.Action
	{

		dst := &retval.DependsOn
		src := v.WorkflowRunStepDetailJobRunStep.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunDetailStepsJobRunStep.WorkflowRunStepDetailJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.WorkflowRunStepDetailJobRunStep.Status
	retval.SequenceNumber = v.WorkflowRunStepDetailJobRunStep.SequenceNumber
	retval.CreatedAt = v.WorkflowRunStepDetailJobRunStep.CreatedAt
	retval.UpdatedAt = v.WorkflowRunStepDetailJobRunStep.UpdatedAt
	retval.ExecutionId = v.WorkflowRunStepDetailJobRunStep.ExecutionId
	retval.ExecutionType = v.WorkflowRunStepDetailJobRunStep.ExecutionType
	retval.ExecutionError = v.WorkflowRunStepDetailJobRunStep.ExecutionError
	return &retval, nil
}

// WorkflowRunDetailStepsWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunDetailStepsWorkflowRunStep is implemented by the following types:
// WorkflowRunDetailStepsBuildRunStep
// WorkflowRunDetailStepsClusterPrecheckStep
// WorkflowRunDetailStepsDeployRunStep
// WorkflowRunDetailStepsDestroyRunStep
// WorkflowRunDetailStepsJobRunStep
type WorkflowRunDetailStepsWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunDetailStepsWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	WorkflowRunStepDetail
}

func (v *WorkflowRunDetailStepsBuildRunStep) implementsGraphQLInterfaceWorkflowRunDetailStepsWorkflowRunStep() {
}
func (v *WorkflowRunDetailStepsClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunDetailStepsWorkflowRunStep() {
}
func (v *WorkflowRunDetailStepsDeployRunStep) implementsGraphQLInterfaceWorkflowRunDetailStepsWorkflowRunStep() {
}
func (v *WorkflowRunDetailStepsDestroyRunStep) implementsGraphQLInterfaceWorkflowRunDetailStepsWorkflowRunStep() {
}
func (v *WorkflowRunDetailStepsJobRunStep) implementsGraphQLInterfaceWorkflowRunDetailStepsWorkflowRunStep() {
}

func __unmarshalWorkflowRunDetailStepsWorkflowRunStep(b []byte, v *WorkflowRunDetailStepsWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunDetailStepsBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunDetailStepsClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunDetailStepsDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunDetailStepsDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunDetailStepsJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunDetailStepsWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunDetailStepsWorkflowRunStep(v *WorkflowRunDetailStepsWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunDetailStepsBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunDetailStepsBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunDetailStepsClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunDetailStepsClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunDetailStepsDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunDetailStepsDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunDetailStepsDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunDetailStepsDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunDetailStepsJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunDetailStepsJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunDetailStepsWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunListItem includes the GraphQL fields of WorkflowRun requested by the fragment WorkflowRunListItem.
type WorkflowRunListItem struct {
	Id        uuid.UUID                                 `json:"id"`
	Sequence  int                                       `json:"sequence"`
	Status    WorkflowRunStatus                         `json:"status"`
	CreatedAt time.Time                                 `json:"createdAt"`
	Steps     []WorkflowRunListItemStepsWorkflowRunStep `json:"-"`
}

// GetId returns WorkflowRunListItem.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItem) GetId() uuid.UUID { return v.Id }

// GetSequence returns WorkflowRunListItem.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItem) GetSequence() int { return v.Sequence }

// GetStatus returns WorkflowRunListItem.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItem) GetStatus() WorkflowRunStatus { return v.Status }

// GetCreatedAt returns WorkflowRunListItem.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItem) GetCreatedAt() time.Time { return v.CreatedAt }

// GetSteps returns WorkflowRunListItem.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItem) GetSteps() []WorkflowRunListItemStepsWorkflowRunStep { return v.Steps }

func (v *WorkflowRunListItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItem
		Steps []json.RawMessage `json:"steps"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Steps
		src := firstPass.Steps
		*dst = make(
			[]WorkflowRunListItemStepsWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItem.Steps: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItem struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Steps []json.RawMessage `json:"steps"`
}

func (v *WorkflowRunListItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItem) __premarshalJSON() (*__premarshalWorkflowRunListItem, error) {
	var retval __premarshalWorkflowRunListItem

	retval.Id = v.Id
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Steps
		src := v.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItem.Steps: %w", err)
			}
		}
	}
	return &retval, nil
}

// WorkflowRunListItemStepsBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunListItemStepsBuildRunStep struct {
	Typename       string                                                            `json:"__typename"`
	Id             uuid.UUID                                                         `json:"id"`
	Action         GenericWorkflowStepActionType                                     `json:"action"`
	DependsOn      []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                             `json:"status"`
	SequenceNumber int                                                               `json:"sequenceNumber"`
	CreatedAt      time.Time                                                         `json:"createdAt"`
	UpdatedAt      time.Time                                                         `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                         `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                             `json:"executionType"`
	Outputs        []WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact        `json:"outputs"`
}

// GetTypename returns WorkflowRunListItemStepsBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunListItemStepsBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunListItemStepsBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetDependsOn() []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunListItemStepsBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunListItemStepsBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunListItemStepsBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunListItemStepsBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetExecutionId() uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunListItemStepsBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetOutputs returns WorkflowRunListItemStepsBuildRunStep.Outputs, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStep) GetOutputs() []WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact {
	return v.Outputs
}

func (v *WorkflowRunListItemStepsBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsBuildRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsBuildRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsBuildRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	Outputs []WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact `json:"outputs"`
}

func (v *WorkflowRunListItemStepsBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsBuildRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsBuildRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsBuildRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.Outputs = v.Outputs
	return &retval, nil
}

// WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact includes the requested fields of the GraphQL type BuildArtifact.
type WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact struct {
	Id    uuid.UUID `json:"id"`
	Image string    `json:"image"`
}

// GetId returns WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact) GetId() uuid.UUID { return v.Id }

// GetImage returns WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact.Image, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsBuildRunStepOutputsBuildArtifact) GetImage() string { return v.Image }

// WorkflowRunListItemStepsClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunListItemStepsClusterPrecheckStep struct {
	Typename       string                                                            `json:"__typename"`
	Id             uuid.UUID                                                         `json:"id"`
	Action         GenericWorkflowStepActionType                                     `json:"action"`
	DependsOn      []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                             `json:"status"`
	SequenceNumber int                                                               `json:"sequenceNumber"`
	CreatedAt      time.Time                                                         `json:"createdAt"`
	UpdatedAt      time.Time                                                         `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                         `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                             `json:"executionType"`
}

// GetTypename returns WorkflowRunListItemStepsClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunListItemStepsClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunListItemStepsClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetDependsOn() []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunListItemStepsClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunListItemStepsClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunListItemStepsClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunListItemStepsClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunListItemStepsClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsClusterPrecheckStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsClusterPrecheckStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsClusterPrecheckStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsClusterPrecheckStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`
}

func (v *WorkflowRunListItemStepsClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsClusterPrecheckStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsClusterPrecheckStep, error) {
	var retval __premarshalWorkflowRunListItemStepsClusterPrecheckStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunListItemStepsDeployRunStep struct {
	Typename       string                                                            `json:"__typename"`
	Id             uuid.UUID                                                         `json:"id"`
	Action         GenericWorkflowStepActionType                                     `json:"action"`
	DependsOn      []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                             `json:"status"`
	SequenceNumber int                                                               `json:"sequenceNumber"`
	CreatedAt      time.Time                                                         `json:"createdAt"`
	UpdatedAt      time.Time                                                         `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                         `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                             `json:"executionType"`
	WorkflowRun    WorkflowRunListItemStepsDeployRunStepWorkflowRun                  `json:"workflowRun"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunListItemStepsDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunListItemStepsDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetDependsOn() []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunListItemStepsDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunListItemStepsDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunListItemStepsDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetExecutionId() uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunListItemStepsDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetWorkflowRun returns WorkflowRunListItemStepsDeployRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStep) GetWorkflowRun() WorkflowRunListItemStepsDeployRunStepWorkflowRun {
	return v.WorkflowRun
}

func (v *WorkflowRunListItemStepsDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	WorkflowRun WorkflowRunListItemStepsDeployRunStepWorkflowRun `json:"workflowRun"`
}

func (v *WorkflowRunListItemStepsDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.WorkflowRun = v.WorkflowRun
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type WorkflowRunListItemStepsDeployRunStepWorkflowRun struct {
	Id         uuid.UUID                                                              `json:"id"`
	WorkflowId uuid.UUID                                                              `json:"workflowId"`
	Sequence   int                                                                    `json:"sequence"`
	Status     WorkflowRunStatus                                                      `json:"status"`
	CreatedAt  time.Time                                                              `json:"createdAt"`
	Steps      []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep `json:"-"`
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetWorkflowId returns WorkflowRunListItemStepsDeployRunStepWorkflowRun.WorkflowId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) GetWorkflowId() uuid.UUID {
	return v.WorkflowId
}

// GetSequence returns WorkflowRunListItemStepsDeployRunStepWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) GetSequence() int { return v.Sequence }

// GetStatus returns WorkflowRunListItemStepsDeployRunStepWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.Status
}

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetSteps returns WorkflowRunListItemStepsDeployRunStepWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) GetSteps() []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep {
	return v.Steps
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStepWorkflowRun
		Steps []json.RawMessage `json:"steps"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStepWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Steps
		src := firstPass.Steps
		*dst = make(
			[]WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStepWorkflowRun.Steps: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	WorkflowId uuid.UUID `json:"workflowId"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Steps []json.RawMessage `json:"steps"`
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRun) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRun, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRun

	retval.Id = v.Id
	retval.WorkflowId = v.WorkflowId
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Steps
		src := v.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDeployRunStepWorkflowRun.Steps: %w", err)
			}
		}
	}
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep struct {
	Typename       string                                                                                         `json:"__typename"`
	Id             uuid.UUID                                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                                  `json:"action"`
	DependsOn      []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                          `json:"status"`
	SequenceNumber int                                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                                      `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                      `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                          `json:"executionType"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetDependsOn() []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep struct {
	Typename       string                                                                                         `json:"__typename"`
	Id             uuid.UUID                                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                                  `json:"action"`
	DependsOn      []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                          `json:"status"`
	SequenceNumber int                                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                                      `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                      `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                          `json:"executionType"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetDependsOn() []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep struct {
	Typename       string                                                                                         `json:"__typename"`
	Id             uuid.UUID                                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                                  `json:"action"`
	DependsOn      []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                          `json:"status"`
	SequenceNumber int                                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                                      `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                      `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                          `json:"executionType"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetDependsOn() []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep struct {
	Typename       string                                                                                         `json:"__typename"`
	Id             uuid.UUID                                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                                  `json:"action"`
	DependsOn      []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                          `json:"status"`
	SequenceNumber int                                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                                      `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                      `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                          `json:"executionType"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetDependsOn() []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep struct {
	Typename       string                                                                                         `json:"__typename"`
	Id             uuid.UUID                                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                                  `json:"action"`
	DependsOn      []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                          `json:"status"`
	SequenceNumber int                                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                                      `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                      `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                          `json:"executionType"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetDependsOn() []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep is implemented by the following types:
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	// GetAction returns the interface-field "action" from its implementation.
	GetAction() GenericWorkflowStepActionType
	// GetDependsOn returns the interface-field "dependsOn" from its implementation.
	GetDependsOn() []WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() WorkflowRunStepStatus
	// GetSequenceNumber returns the interface-field "sequenceNumber" from its implementation.
	GetSequenceNumber() int
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() time.Time
	// GetExecutionId returns the interface-field "executionId" from its implementation.
	GetExecutionId() uuid.UUID
	// GetExecutionType returns the interface-field "executionType" from its implementation.
	GetExecutionType() WorkflowExecutionType
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}

func __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep(b []byte, v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep(v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep is implemented by the following types:
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
// WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
type WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}

func __unmarshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(b []byte, v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(v *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunListItemStepsDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunListItemStepsDestroyRunStep struct {
	Typename       string                                                            `json:"__typename"`
	Id             uuid.UUID                                                         `json:"id"`
	Action         GenericWorkflowStepActionType                                     `json:"action"`
	DependsOn      []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                             `json:"status"`
	SequenceNumber int                                                               `json:"sequenceNumber"`
	CreatedAt      time.Time                                                         `json:"createdAt"`
	UpdatedAt      time.Time                                                         `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                         `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                             `json:"executionType"`
}

// GetTypename returns WorkflowRunListItemStepsDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunListItemStepsDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunListItemStepsDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetDependsOn() []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunListItemStepsDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunListItemStepsDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunListItemStepsDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunListItemStepsDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetExecutionId() uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunListItemStepsDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsDestroyRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsDestroyRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsDestroyRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsDestroyRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`
}

func (v *WorkflowRunListItemStepsDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsDestroyRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsDestroyRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsDestroyRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunListItemStepsJobRunStep struct {
	Typename       string                                                            `json:"__typename"`
	Id             uuid.UUID                                                         `json:"id"`
	Action         GenericWorkflowStepActionType                                     `json:"action"`
	DependsOn      []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                             `json:"status"`
	SequenceNumber int                                                               `json:"sequenceNumber"`
	CreatedAt      time.Time                                                         `json:"createdAt"`
	UpdatedAt      time.Time                                                         `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                         `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                             `json:"executionType"`
}

// GetTypename returns WorkflowRunListItemStepsJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunListItemStepsJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunListItemStepsJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunListItemStepsJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetDependsOn() []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunListItemStepsJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunListItemStepsJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunListItemStepsJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunListItemStepsJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunListItemStepsJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetExecutionId() uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunListItemStepsJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsJobRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

func (v *WorkflowRunListItemStepsJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunListItemStepsJobRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunListItemStepsJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunListItemStepsJobRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunListItemStepsJobRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`
}

func (v *WorkflowRunListItemStepsJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunListItemStepsJobRunStep) __premarshalJSON() (*__premarshalWorkflowRunListItemStepsJobRunStep, error) {
	var retval __premarshalWorkflowRunListItemStepsJobRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunListItemStepsJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	return &retval, nil
}

// WorkflowRunListItemStepsWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunListItemStepsWorkflowRunStep is implemented by the following types:
// WorkflowRunListItemStepsBuildRunStep
// WorkflowRunListItemStepsClusterPrecheckStep
// WorkflowRunListItemStepsDeployRunStep
// WorkflowRunListItemStepsDestroyRunStep
// WorkflowRunListItemStepsJobRunStep
type WorkflowRunListItemStepsWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	// GetAction returns the interface-field "action" from its implementation.
	GetAction() GenericWorkflowStepActionType
	// GetDependsOn returns the interface-field "dependsOn" from its implementation.
	GetDependsOn() []WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() WorkflowRunStepStatus
	// GetSequenceNumber returns the interface-field "sequenceNumber" from its implementation.
	GetSequenceNumber() int
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() time.Time
	// GetExecutionId returns the interface-field "executionId" from its implementation.
	GetExecutionId() uuid.UUID
	// GetExecutionType returns the interface-field "executionType" from its implementation.
	GetExecutionType() WorkflowExecutionType
}

func (v *WorkflowRunListItemStepsBuildRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDeployRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsDestroyRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsJobRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStep() {
}

func __unmarshalWorkflowRunListItemStepsWorkflowRunStep(b []byte, v *WorkflowRunListItemStepsWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunListItemStepsBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunListItemStepsClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunListItemStepsDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunListItemStepsDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunListItemStepsJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunListItemStepsWorkflowRunStep(v *WorkflowRunListItemStepsWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunListItemStepsBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunListItemStepsJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep is implemented by the following types:
// WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep
// WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep
// WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep
// WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep
// WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep
type WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep) implementsGraphQLInterfaceWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}

func __unmarshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(b []byte, v *WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep(v *WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsWorkflowRunStepDependsOnBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsWorkflowRunStepDependsOnClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsWorkflowRunStepDependsOnDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsWorkflowRunStepDependsOnDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunListItemStepsWorkflowRunStepDependsOnJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunListItemStepsWorkflowRunStepDependsOnWorkflowRunStep: "%T"`, v)
	}
}

type WorkflowRunStatus string

const (
	WorkflowRunStatusPending    WorkflowRunStatus = "PENDING"
	WorkflowRunStatusInProgress WorkflowRunStatus = "IN_PROGRESS"
	WorkflowRunStatusCompleted  WorkflowRunStatus = "COMPLETED"
	WorkflowRunStatusFailed     WorkflowRunStatus = "FAILED"
	WorkflowRunStatusAborted    WorkflowRunStatus = "ABORTED"
)

type WorkflowRunStepDefinitionInput struct {
	Action         WorkflowStepActionType                  `json:"action"`
	DependsOn      []int                                   `json:"dependsOn"`
	Disabled       bool                                    `json:"disabled"`
	MatchingRule   WorkflowStepDefinitionMatchingRuleInput `json:"matchingRule"`
	SequenceNumber int                                     `json:"sequenceNumber"`
	Metadata       WorkflowRunStepDefinitionMetadataInput  `json:"metadata"`
}

// GetAction returns WorkflowRunStepDefinitionInput.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionInput) GetAction() WorkflowStepActionType { return v.Action }

// GetDependsOn returns WorkflowRunStepDefinitionInput.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionInput) GetDependsOn() []int { return v.DependsOn }

// GetDisabled returns WorkflowRunStepDefinitionInput.Disabled, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionInput) GetDisabled() bool { return v.Disabled }

// GetMatchingRule returns WorkflowRunStepDefinitionInput.MatchingRule, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionInput) GetMatchingRule() WorkflowStepDefinitionMatchingRuleInput {
	return v.MatchingRule
}

// GetSequenceNumber returns WorkflowRunStepDefinitionInput.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionInput) GetSequenceNumber() int { return v.SequenceNumber }

// GetMetadata returns WorkflowRunStepDefinitionInput.Metadata, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionInput) GetMetadata() WorkflowRunStepDefinitionMetadataInput {
	return v.Metadata
}

type WorkflowRunStepDefinitionMetadataInput struct {
	DeploySteps []DriverWorkflowStepActionType `json:"deploySteps"`
}

// GetDeploySteps returns WorkflowRunStepDefinitionMetadataInput.DeploySteps, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDefinitionMetadataInput) GetDeploySteps() []DriverWorkflowStepActionType {
	return v.DeploySteps
}

// WorkflowRunStepDetail includes the GraphQL fields of WorkflowRunStep requested by the fragment WorkflowRunStepDetail.
//
// WorkflowRunStepDetail is implemented by the following types:
// WorkflowRunStepDetailBuildRunStep
// WorkflowRunStepDetailClusterPrecheckStep
// WorkflowRunStepDetailDeployRunStep
// WorkflowRunStepDetailDestroyRunStep
// WorkflowRunStepDetailJobRunStep
type WorkflowRunStepDetail interface {
	implementsGraphQLInterfaceWorkflowRunStepDetail()
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	// GetAction returns the interface-field "action" from its implementation.
	GetAction() GenericWorkflowStepActionType
	// GetDependsOn returns the interface-field "dependsOn" from its implementation.
	GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() WorkflowRunStepStatus
	// GetSequenceNumber returns the interface-field "sequenceNumber" from its implementation.
	GetSequenceNumber() int
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() time.Time
	// GetExecutionId returns the interface-field "executionId" from its implementation.
	GetExecutionId() uuid.UUID
	// GetExecutionType returns the interface-field "executionType" from its implementation.
	GetExecutionType() WorkflowExecutionType
	// GetExecutionError returns the interface-field "executionError" from its implementation.
	GetExecutionError() string
}

func (v *WorkflowRunStepDetailBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepDetail() {}
func (v *WorkflowRunStepDetailClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepDetail() {
}
func (v *WorkflowRunStepDetailDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepDetail()  {}
func (v *WorkflowRunStepDetailDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepDetail() {}
func (v *WorkflowRunStepDetailJobRunStep) implementsGraphQLInterfaceWorkflowRunStepDetail()     {}

func __unmarshalWorkflowRunStepDetail(b []byte, v *WorkflowRunStepDetail) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepDetailBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepDetailClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepDetailDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepDetailDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepDetailJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetail: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepDetail(v *WorkflowRunStepDetail) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepDetailBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetail: "%T"`, v)
	}
}

// WorkflowRunStepDetail includes the GraphQL fields of BuildRunStep requested by the fragment WorkflowRunStepDetail.
type WorkflowRunStepDetailBuildRunStep struct {
	Id             uuid.UUID                                       `json:"id"`
	Action         GenericWorkflowStepActionType                   `json:"action"`
	DependsOn      []WorkflowRunStepDetailDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                           `json:"status"`
	SequenceNumber int                                             `json:"sequenceNumber"`
	CreatedAt      time.Time                                       `json:"createdAt"`
	UpdatedAt      time.Time                                       `json:"updatedAt"`
	ExecutionId    uuid.UUID                                       `json:"executionId"`
	ExecutionType  WorkflowExecutionType                           `json:"executionType"`
	ExecutionError string                                          `json:"executionError"`
	Outputs        []WorkflowRunStepDetailOutputsBuildArtifact     `json:"outputs"`
}

// GetId returns WorkflowRunStepDetailBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunStepDetailBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunStepDetailBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunStepDetailBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunStepDetailBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetExecutionId() uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunStepDetailBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailBuildRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetExecutionError() string { return v.ExecutionError }

// GetOutputs returns WorkflowRunStepDetailBuildRunStep.Outputs, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailBuildRunStep) GetOutputs() []WorkflowRunStepDetailOutputsBuildArtifact {
	return v.Outputs
}

func (v *WorkflowRunStepDetailBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailBuildRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailBuildRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailBuildRunStep struct {
	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`

	Outputs []WorkflowRunStepDetailOutputsBuildArtifact `json:"outputs"`
}

func (v *WorkflowRunStepDetailBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailBuildRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailBuildRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailBuildRunStep

	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	retval.Outputs = v.Outputs
	return &retval, nil
}

// WorkflowRunStepDetailCluster includes the requested fields of the GraphQL type Cluster.
type WorkflowRunStepDetailCluster struct {
	ClusterDetailV1 `json:"-"`
}

// GetId returns WorkflowRunStepDetailCluster.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetId() uuid.UUID { return v.ClusterDetailV1.Id }

// GetDisplayName returns WorkflowRunStepDetailCluster.DisplayName, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetDisplayName() string { return v.ClusterDetailV1.DisplayName }

// GetState returns WorkflowRunStepDetailCluster.State, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetState() ClusterState { return v.ClusterDetailV1.State }

// GetConnected returns WorkflowRunStepDetailCluster.Connected, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetConnected() bool { return v.ClusterDetailV1.Connected }

// GetCloudProvider returns WorkflowRunStepDetailCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetCloudProvider() CloudProvider {
	return v.ClusterDetailV1.CloudProvider
}

// GetCreatedAt returns WorkflowRunStepDetailCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetCreatedAt() time.Time { return v.ClusterDetailV1.CreatedAt }

// GetUpdatedAt returns WorkflowRunStepDetailCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailCluster) GetUpdatedAt() time.Time { return v.ClusterDetailV1.UpdatedAt }

func (v *WorkflowRunStepDetailCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetailV1)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalWorkflowRunStepDetailCluster struct {
	Id uuid.UUID `json:"id"`

	DisplayName string `json:"displayName"`

	State ClusterState `json:"state"`

	Connected bool `json:"connected"`

	CloudProvider CloudProvider `json:"cloudProvider"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *WorkflowRunStepDetailCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailCluster) __premarshalJSON() (*__premarshalWorkflowRunStepDetailCluster, error) {
	var retval __premarshalWorkflowRunStepDetailCluster

	retval.Id = v.ClusterDetailV1.Id
	retval.DisplayName = v.ClusterDetailV1.DisplayName
	retval.State = v.ClusterDetailV1.State
	retval.Connected = v.ClusterDetailV1.Connected
	retval.CloudProvider = v.ClusterDetailV1.CloudProvider
	retval.CreatedAt = v.ClusterDetailV1.CreatedAt
	retval.UpdatedAt = v.ClusterDetailV1.UpdatedAt
	return &retval, nil
}

// WorkflowRunStepDetail includes the GraphQL fields of ClusterPrecheckStep requested by the fragment WorkflowRunStepDetail.
type WorkflowRunStepDetailClusterPrecheckStep struct {
	Id             uuid.UUID                                       `json:"id"`
	Action         GenericWorkflowStepActionType                   `json:"action"`
	DependsOn      []WorkflowRunStepDetailDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                           `json:"status"`
	SequenceNumber int                                             `json:"sequenceNumber"`
	CreatedAt      time.Time                                       `json:"createdAt"`
	UpdatedAt      time.Time                                       `json:"updatedAt"`
	ExecutionId    uuid.UUID                                       `json:"executionId"`
	ExecutionType  WorkflowExecutionType                           `json:"executionType"`
	ExecutionError string                                          `json:"executionError"`
	Cluster        WorkflowRunStepDetailCluster                    `json:"cluster"`
}

// GetId returns WorkflowRunStepDetailClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunStepDetailClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunStepDetailClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunStepDetailClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunStepDetailClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetExecutionId() uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunStepDetailClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailClusterPrecheckStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetExecutionError() string {
	return v.ExecutionError
}

// GetCluster returns WorkflowRunStepDetailClusterPrecheckStep.Cluster, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailClusterPrecheckStep) GetCluster() WorkflowRunStepDetailCluster {
	return v.Cluster
}

func (v *WorkflowRunStepDetailClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailClusterPrecheckStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailClusterPrecheckStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailClusterPrecheckStep struct {
	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`

	Cluster WorkflowRunStepDetailCluster `json:"cluster"`
}

func (v *WorkflowRunStepDetailClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailClusterPrecheckStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailClusterPrecheckStep, error) {
	var retval __premarshalWorkflowRunStepDetailClusterPrecheckStep

	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	retval.Cluster = v.Cluster
	return &retval, nil
}

// WorkflowRunStepDetailDependsOnBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepDetailDependsOnBuildRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailDependsOnBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnBuildRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunStepDetailDependsOnBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnBuildRunStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunStepDetailDependsOnClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepDetailDependsOnClusterPrecheckStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailDependsOnClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnClusterPrecheckStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunStepDetailDependsOnClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnClusterPrecheckStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunStepDetailDependsOnDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepDetailDependsOnDeployRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailDependsOnDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnDeployRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunStepDetailDependsOnDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnDeployRunStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunStepDetailDependsOnDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepDetailDependsOnDestroyRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailDependsOnDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnDestroyRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunStepDetailDependsOnDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnDestroyRunStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunStepDetailDependsOnJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepDetailDependsOnJobRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailDependsOnJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnJobRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunStepDetailDependsOnJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDependsOnJobRunStep) GetId() uuid.UUID { return v.Id }

// WorkflowRunStepDetailDependsOnWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepDetailDependsOnWorkflowRunStep is implemented by the following types:
// WorkflowRunStepDetailDependsOnBuildRunStep
// WorkflowRunStepDetailDependsOnClusterPrecheckStep
// WorkflowRunStepDetailDependsOnDeployRunStep
// WorkflowRunStepDetailDependsOnDestroyRunStep
// WorkflowRunStepDetailDependsOnJobRunStep
type WorkflowRunStepDetailDependsOnWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepDetailDependsOnWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunStepDetailDependsOnBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailDependsOnClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepDetailDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailDependsOnDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailDependsOnDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailDependsOnJobRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailDependsOnWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepDetailDependsOnWorkflowRunStep(b []byte, v *WorkflowRunStepDetailDependsOnWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepDetailDependsOnBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepDetailDependsOnClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepDetailDependsOnDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepDetailDependsOnDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepDetailDependsOnJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetailDependsOnWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(v *WorkflowRunStepDetailDependsOnWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepDetailDependsOnBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailDependsOnBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailDependsOnClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailDependsOnClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailDependsOnDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailDependsOnDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailDependsOnDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailDependsOnDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailDependsOnJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailDependsOnJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetailDependsOnWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunStepDetail includes the GraphQL fields of DeployRunStep requested by the fragment WorkflowRunStepDetail.
type WorkflowRunStepDetailDeployRunStep struct {
	Id             uuid.UUID                                       `json:"id"`
	Action         GenericWorkflowStepActionType                   `json:"action"`
	DependsOn      []WorkflowRunStepDetailDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                           `json:"status"`
	SequenceNumber int                                             `json:"sequenceNumber"`
	CreatedAt      time.Time                                       `json:"createdAt"`
	UpdatedAt      time.Time                                       `json:"updatedAt"`
	ExecutionId    uuid.UUID                                       `json:"executionId"`
	ExecutionType  WorkflowExecutionType                           `json:"executionType"`
	ExecutionError string                                          `json:"executionError"`
	WorkflowRun    WorkflowRunStepDetailWorkflowRun                `json:"workflowRun"`
}

// GetId returns WorkflowRunStepDetailDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunStepDetailDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunStepDetailDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunStepDetailDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunStepDetailDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetExecutionId() uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunStepDetailDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailDeployRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetExecutionError() string { return v.ExecutionError }

// GetWorkflowRun returns WorkflowRunStepDetailDeployRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDeployRunStep) GetWorkflowRun() WorkflowRunStepDetailWorkflowRun {
	return v.WorkflowRun
}

func (v *WorkflowRunStepDetailDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailDeployRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailDeployRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailDeployRunStep struct {
	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`

	WorkflowRun WorkflowRunStepDetailWorkflowRun `json:"workflowRun"`
}

func (v *WorkflowRunStepDetailDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailDeployRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailDeployRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailDeployRunStep

	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	retval.WorkflowRun = v.WorkflowRun
	return &retval, nil
}

// WorkflowRunStepDetail includes the GraphQL fields of DestroyRunStep requested by the fragment WorkflowRunStepDetail.
type WorkflowRunStepDetailDestroyRunStep struct {
	Id             uuid.UUID                                       `json:"id"`
	Action         GenericWorkflowStepActionType                   `json:"action"`
	DependsOn      []WorkflowRunStepDetailDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                           `json:"status"`
	SequenceNumber int                                             `json:"sequenceNumber"`
	CreatedAt      time.Time                                       `json:"createdAt"`
	UpdatedAt      time.Time                                       `json:"updatedAt"`
	ExecutionId    uuid.UUID                                       `json:"executionId"`
	ExecutionType  WorkflowExecutionType                           `json:"executionType"`
	ExecutionError string                                          `json:"executionError"`
}

// GetId returns WorkflowRunStepDetailDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunStepDetailDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunStepDetailDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunStepDetailDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunStepDetailDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetExecutionId() uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunStepDetailDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailDestroyRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailDestroyRunStep) GetExecutionError() string { return v.ExecutionError }

func (v *WorkflowRunStepDetailDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailDestroyRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailDestroyRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailDestroyRunStep struct {
	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *WorkflowRunStepDetailDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailDestroyRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailDestroyRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailDestroyRunStep

	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetail includes the GraphQL fields of JobRunStep requested by the fragment WorkflowRunStepDetail.
type WorkflowRunStepDetailJobRunStep struct {
	Id             uuid.UUID                                       `json:"id"`
	Action         GenericWorkflowStepActionType                   `json:"action"`
	DependsOn      []WorkflowRunStepDetailDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                           `json:"status"`
	SequenceNumber int                                             `json:"sequenceNumber"`
	CreatedAt      time.Time                                       `json:"createdAt"`
	UpdatedAt      time.Time                                       `json:"updatedAt"`
	ExecutionId    uuid.UUID                                       `json:"executionId"`
	ExecutionType  WorkflowExecutionType                           `json:"executionType"`
	ExecutionError string                                          `json:"executionError"`
}

// GetId returns WorkflowRunStepDetailJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetAction() GenericWorkflowStepActionType { return v.Action }

// GetDependsOn returns WorkflowRunStepDetailJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetDependsOn() []WorkflowRunStepDetailDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetStatus() WorkflowRunStepStatus { return v.Status }

// GetSequenceNumber returns WorkflowRunStepDetailJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetSequenceNumber() int { return v.SequenceNumber }

// GetCreatedAt returns WorkflowRunStepDetailJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns WorkflowRunStepDetailJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetExecutionId returns WorkflowRunStepDetailJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetExecutionId() uuid.UUID { return v.ExecutionId }

// GetExecutionType returns WorkflowRunStepDetailJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailJobRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailJobRunStep) GetExecutionError() string { return v.ExecutionError }

func (v *WorkflowRunStepDetailJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailJobRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailJobRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailJobRunStep struct {
	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *WorkflowRunStepDetailJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailJobRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailJobRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailJobRunStep

	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetailOutputsBuildArtifact includes the requested fields of the GraphQL type BuildArtifact.
type WorkflowRunStepDetailOutputsBuildArtifact struct {
	Id    uuid.UUID `json:"id"`
	Image string    `json:"image"`
}

// GetId returns WorkflowRunStepDetailOutputsBuildArtifact.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailOutputsBuildArtifact) GetId() uuid.UUID { return v.Id }

// GetImage returns WorkflowRunStepDetailOutputsBuildArtifact.Image, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailOutputsBuildArtifact) GetImage() string { return v.Image }

// WorkflowRunStepDetailWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type WorkflowRunStepDetailWorkflowRun struct {
	Id         uuid.UUID                                              `json:"id"`
	WorkflowId uuid.UUID                                              `json:"workflowId"`
	Sequence   int                                                    `json:"sequence"`
	Status     WorkflowRunStatus                                      `json:"status"`
	CreatedAt  time.Time                                              `json:"createdAt"`
	Steps      []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep `json:"-"`
}

// GetId returns WorkflowRunStepDetailWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetWorkflowId returns WorkflowRunStepDetailWorkflowRun.WorkflowId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRun) GetWorkflowId() uuid.UUID { return v.WorkflowId }

// GetSequence returns WorkflowRunStepDetailWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRun) GetSequence() int { return v.Sequence }

// GetStatus returns WorkflowRunStepDetailWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRun) GetStatus() WorkflowRunStatus { return v.Status }

// GetCreatedAt returns WorkflowRunStepDetailWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRun) GetCreatedAt() time.Time { return v.CreatedAt }

// GetSteps returns WorkflowRunStepDetailWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRun) GetSteps() []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep {
	return v.Steps
}

func (v *WorkflowRunStepDetailWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailWorkflowRun
		Steps []json.RawMessage `json:"steps"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Steps
		src := firstPass.Steps
		*dst = make(
			[]WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailWorkflowRun.Steps: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	WorkflowId uuid.UUID `json:"workflowId"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Steps []json.RawMessage `json:"steps"`
}

func (v *WorkflowRunStepDetailWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailWorkflowRun) __premarshalJSON() (*__premarshalWorkflowRunStepDetailWorkflowRun, error) {
	var retval __premarshalWorkflowRunStepDetailWorkflowRun

	retval.Id = v.Id
	retval.WorkflowId = v.WorkflowId
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Steps
		src := v.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailWorkflowRun.Steps: %w", err)
			}
		}
	}
	return &retval, nil
}

// WorkflowRunStepDetailWorkflowRunStepsBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepDetailWorkflowRunStepsBuildRunStep struct {
	Typename       string                                                                         `json:"__typename"`
	Id             uuid.UUID                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                  `json:"action"`
	DependsOn      []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                          `json:"status"`
	SequenceNumber int                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                      `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                      `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                          `json:"executionType"`
	ExecutionError string                                                                         `json:"executionError"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetDependsOn() []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailWorkflowRunStepsBuildRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailWorkflowRunStepsBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailWorkflowRunStepsBuildRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailWorkflowRunStepsBuildRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailWorkflowRunStepsBuildRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep struct {
	Typename       string                                                                         `json:"__typename"`
	Id             uuid.UUID                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                  `json:"action"`
	DependsOn      []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                          `json:"status"`
	SequenceNumber int                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                      `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                      `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                          `json:"executionType"`
	ExecutionError string                                                                         `json:"executionError"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetDependsOn() []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep, error) {
	var retval __premarshalWorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetailWorkflowRunStepsDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepDetailWorkflowRunStepsDeployRunStep struct {
	Typename       string                                                                         `json:"__typename"`
	Id             uuid.UUID                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                  `json:"action"`
	DependsOn      []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                          `json:"status"`
	SequenceNumber int                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                      `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                      `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                          `json:"executionType"`
	ExecutionError string                                                                         `json:"executionError"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetDependsOn() []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailWorkflowRunStepsDeployRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailWorkflowRunStepsDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailWorkflowRunStepsDeployRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailWorkflowRunStepsDeployRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailWorkflowRunStepsDeployRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep struct {
	Typename       string                                                                         `json:"__typename"`
	Id             uuid.UUID                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                  `json:"action"`
	DependsOn      []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                          `json:"status"`
	SequenceNumber int                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                      `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                      `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                          `json:"executionType"`
	ExecutionError string                                                                         `json:"executionError"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetDependsOn() []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailWorkflowRunStepsDestroyRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailWorkflowRunStepsDestroyRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailWorkflowRunStepsDestroyRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetailWorkflowRunStepsJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepDetailWorkflowRunStepsJobRunStep struct {
	Typename       string                                                                         `json:"__typename"`
	Id             uuid.UUID                                                                      `json:"id"`
	Action         GenericWorkflowStepActionType                                                  `json:"action"`
	DependsOn      []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                          `json:"status"`
	SequenceNumber int                                                                            `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                      `json:"createdAt"`
	UpdatedAt      time.Time                                                                      `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                      `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                          `json:"executionType"`
	ExecutionError string                                                                         `json:"executionError"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetTypename() string { return v.Typename }

// GetId returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetId() uuid.UUID { return v.Id }

// GetAction returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetDependsOn() []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns WorkflowRunStepDetailWorkflowRunStepsJobRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*WorkflowRunStepDetailWorkflowRunStepsJobRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.WorkflowRunStepDetailWorkflowRunStepsJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal WorkflowRunStepDetailWorkflowRunStepsJobRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalWorkflowRunStepDetailWorkflowRunStepsJobRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) __premarshalJSON() (*__premarshalWorkflowRunStepDetailWorkflowRunStepsJobRunStep, error) {
	var retval __premarshalWorkflowRunStepDetailWorkflowRunStepsJobRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal WorkflowRunStepDetailWorkflowRunStepsJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep is implemented by the following types:
// WorkflowRunStepDetailWorkflowRunStepsBuildRunStep
// WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep
// WorkflowRunStepDetailWorkflowRunStepsDeployRunStep
// WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep
// WorkflowRunStepDetailWorkflowRunStepsJobRunStep
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	// GetAction returns the interface-field "action" from its implementation.
	GetAction() GenericWorkflowStepActionType
	// GetDependsOn returns the interface-field "dependsOn" from its implementation.
	GetDependsOn() []WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() WorkflowRunStepStatus
	// GetSequenceNumber returns the interface-field "sequenceNumber" from its implementation.
	GetSequenceNumber() int
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() time.Time
	// GetExecutionId returns the interface-field "executionId" from its implementation.
	GetExecutionId() uuid.UUID
	// GetExecutionType returns the interface-field "executionType" from its implementation.
	GetExecutionType() WorkflowExecutionType
	// GetExecutionError returns the interface-field "executionError" from its implementation.
	GetExecutionError() string
}

func (v *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsJobRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep(b []byte, v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep(v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepDetailWorkflowRunStepsBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailWorkflowRunStepsBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailWorkflowRunStepsClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailWorkflowRunStepsDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailWorkflowRunStepsDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalWorkflowRunStepDetailWorkflowRunStepsJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStep: "%T"`, v)
	}
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep is implemented by the following types:
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
// WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
type WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep interface {
	implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) implementsGraphQLInterfaceWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}

func __unmarshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(b []byte, v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalWorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(v *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for WorkflowRunStepDetailWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%T"`, v)
	}
}

// workflowRunStepNestedDetailLogsResponse is returned by workflowRunStepNestedDetailLogs on success.
type WorkflowRunStepNestedDetailLogsResponse struct {
	Team workflowRunStepNestedDetailLogsTeam `json:"team"`
}

// GetTeam returns WorkflowRunStepNestedDetailLogsResponse.Team, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailLogsResponse) GetTeam() workflowRunStepNestedDetailLogsTeam {
	return v.Team
}

// workflowRunStepNestedDetailResponse is returned by workflowRunStepNestedDetail on success.
type WorkflowRunStepNestedDetailResponse struct {
	Team workflowRunStepNestedDetailTeam `json:"team"`
}

// GetTeam returns WorkflowRunStepNestedDetailResponse.Team, and is useful for accessing the field via an interface.
func (v *WorkflowRunStepNestedDetailResponse) GetTeam() workflowRunStepNestedDetailTeam {
	return v.Team
}

type WorkflowRunStepStatus string

const (
	WorkflowRunStepStatusPending   WorkflowRunStepStatus = "PENDING"
	WorkflowRunStepStatusRunning   WorkflowRunStepStatus = "RUNNING"
	WorkflowRunStepStatusCompleted WorkflowRunStepStatus = "COMPLETED"
	WorkflowRunStepStatusFailed    WorkflowRunStepStatus = "FAILED"
	WorkflowRunStepStatusError     WorkflowRunStepStatus = "ERROR"
	WorkflowRunStepStatusAborted   WorkflowRunStepStatus = "ABORTED"
)

// workflowRunsResponse is returned by workflowRuns on success.
type WorkflowRunsResponse struct {
	Team workflowRunsTeam `json:"team"`
}

// GetTeam returns WorkflowRunsResponse.Team, and is useful for accessing the field via an interface.
func (v *WorkflowRunsResponse) GetTeam() workflowRunsTeam { return v.Team }

type WorkflowStepActionType string

const (
	WorkflowStepActionTypeOrchestrationBuild           WorkflowStepActionType = "ORCHESTRATION_BUILD"
	WorkflowStepActionTypeOrchestrationClusterPrecheck WorkflowStepActionType = "ORCHESTRATION_CLUSTER_PRECHECK"
	WorkflowStepActionTypeOrchestrationDeploy          WorkflowStepActionType = "ORCHESTRATION_DEPLOY"
	WorkflowStepActionTypeOrchestrationRelease         WorkflowStepActionType = "ORCHESTRATION_RELEASE"
	WorkflowStepActionTypeOrchestrationDestroy         WorkflowStepActionType = "ORCHESTRATION_DESTROY"
)

type WorkflowStepDefinitionInput struct {
	Action         WorkflowStepActionType                  `json:"action"`
	DependsOn      []int                                   `json:"dependsOn"`
	Disabled       bool                                    `json:"disabled"`
	MatchingRule   WorkflowStepDefinitionMatchingRuleInput `json:"matchingRule"`
	SequenceNumber int                                     `json:"sequenceNumber"`
}

// GetAction returns WorkflowStepDefinitionInput.Action, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionInput) GetAction() WorkflowStepActionType { return v.Action }

// GetDependsOn returns WorkflowStepDefinitionInput.DependsOn, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionInput) GetDependsOn() []int { return v.DependsOn }

// GetDisabled returns WorkflowStepDefinitionInput.Disabled, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionInput) GetDisabled() bool { return v.Disabled }

// GetMatchingRule returns WorkflowStepDefinitionInput.MatchingRule, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionInput) GetMatchingRule() WorkflowStepDefinitionMatchingRuleInput {
	return v.MatchingRule
}

// GetSequenceNumber returns WorkflowStepDefinitionInput.SequenceNumber, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionInput) GetSequenceNumber() int { return v.SequenceNumber }

type WorkflowStepDefinitionMatchingRuleInput struct {
	Label      string    `json:"label"`
	EntityId   uuid.UUID `json:"entityId"`
	BranchName string    `json:"branchName"`
}

// GetLabel returns WorkflowStepDefinitionMatchingRuleInput.Label, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionMatchingRuleInput) GetLabel() string { return v.Label }

// GetEntityId returns WorkflowStepDefinitionMatchingRuleInput.EntityId, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionMatchingRuleInput) GetEntityId() uuid.UUID { return v.EntityId }

// GetBranchName returns WorkflowStepDefinitionMatchingRuleInput.BranchName, and is useful for accessing the field via an interface.
func (v *WorkflowStepDefinitionMatchingRuleInput) GetBranchName() string { return v.BranchName }

// __abortWorkflowRunInput is used internally by genqlient
type __abortWorkflowRunInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __abortWorkflowRunInput.Id, and is useful for accessing the field via an interface.
func (v *__abortWorkflowRunInput) GetId() uuid.UUID { return v.Id }

// __approveWorkflowRunStepInput is used internally by genqlient
type __approveWorkflowRunStepInput struct {
	StepId    uuid.UUID `json:"stepId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetStepId returns __approveWorkflowRunStepInput.StepId, and is useful for accessing the field via an interface.
func (v *__approveWorkflowRunStepInput) GetStepId() uuid.UUID { return v.StepId }

// GetProjectId returns __approveWorkflowRunStepInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__approveWorkflowRunStepInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __blueprintInput is used internally by genqlient
type __blueprintInput struct {
	TeamId      uuid.UUID `json:"teamId"`
	BlueprintId uuid.UUID `json:"blueprintId"`
}

// GetTeamId returns __blueprintInput.TeamId, and is useful for accessing the field via an interface.
func (v *__blueprintInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetBlueprintId returns __blueprintInput.BlueprintId, and is useful for accessing the field via an interface.
func (v *__blueprintInput) GetBlueprintId() uuid.UUID { return v.BlueprintId }

// __blueprintRevisionsInput is used internally by genqlient
type __blueprintRevisionsInput struct {
	TeamId      uuid.UUID `json:"teamId"`
	BlueprintId uuid.UUID `json:"blueprintId"`
}

// GetTeamId returns __blueprintRevisionsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__blueprintRevisionsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetBlueprintId returns __blueprintRevisionsInput.BlueprintId, and is useful for accessing the field via an interface.
func (v *__blueprintRevisionsInput) GetBlueprintId() uuid.UUID { return v.BlueprintId }

// __buildArtifactsInput is used internally by genqlient
type __buildArtifactsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	Page      PageInput `json:"page"`
}

// GetTeamId returns __buildArtifactsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__buildArtifactsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __buildArtifactsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__buildArtifactsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetPage returns __buildArtifactsInput.Page, and is useful for accessing the field via an interface.
func (v *__buildArtifactsInput) GetPage() PageInput { return v.Page }

// __buildRunDetailInput is used internally by genqlient
type __buildRunDetailInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	RunId     uuid.UUID `json:"runId"`
}

// GetTeamId returns __buildRunDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__buildRunDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __buildRunDetailInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__buildRunDetailInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetRunId returns __buildRunDetailInput.RunId, and is useful for accessing the field via an interface.
func (v *__buildRunDetailInput) GetRunId() uuid.UUID { return v.RunId }

// __buildRunsInput is used internally by genqlient
type __buildRunsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	Page      PageInput `json:"page"`
}

// GetTeamId returns __buildRunsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__buildRunsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __buildRunsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__buildRunsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetPage returns __buildRunsInput.Page, and is useful for accessing the field via an interface.
func (v *__buildRunsInput) GetPage() PageInput { return v.Page }

// __cloudRevisionsInput is used internally by genqlient
type __cloudRevisionsInput struct {
	TeamId  uuid.UUID `json:"teamId"`
	CloudId uuid.UUID `json:"cloudId"`
}

// GetTeamId returns __cloudRevisionsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__cloudRevisionsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetCloudId returns __cloudRevisionsInput.CloudId, and is useful for accessing the field via an interface.
func (v *__cloudRevisionsInput) GetCloudId() uuid.UUID { return v.CloudId }

// __clusterDetailsInput is used internally by genqlient
type __clusterDetailsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ClusterId uuid.UUID `json:"clusterId"`
}

// GetTeamId returns __clusterDetailsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__clusterDetailsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetClusterId returns __clusterDetailsInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__clusterDetailsInput) GetClusterId() uuid.UUID { return v.ClusterId }

// __clusterRevisionsInput is used internally by genqlient
type __clusterRevisionsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ClusterId uuid.UUID `json:"clusterId"`
}

// GetTeamId returns __clusterRevisionsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__clusterRevisionsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetClusterId returns __clusterRevisionsInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__clusterRevisionsInput) GetClusterId() uuid.UUID { return v.ClusterId }

// __clusterStatusInput is used internally by genqlient
type __clusterStatusInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ClusterId uuid.UUID `json:"clusterId"`
}

// GetTeamId returns __clusterStatusInput.TeamId, and is useful for accessing the field via an interface.
func (v *__clusterStatusInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetClusterId returns __clusterStatusInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__clusterStatusInput) GetClusterId() uuid.UUID { return v.ClusterId }

// __createBuildRunInput is used internally by genqlient
type __createBuildRunInput struct {
	BuildId uuid.UUID `json:"buildId"`
}

// GetBuildId returns __createBuildRunInput.BuildId, and is useful for accessing the field via an interface.
func (v *__createBuildRunInput) GetBuildId() uuid.UUID { return v.BuildId }

// __createDeployRunInput is used internally by genqlient
type __createDeployRunInput struct {
	Input CreateDeployRunInput `json:"input"`
}

// GetInput returns __createDeployRunInput.Input, and is useful for accessing the field via an interface.
func (v *__createDeployRunInput) GetInput() CreateDeployRunInput { return v.Input }

// __createProjectInput is used internally by genqlient
type __createProjectInput struct {
	Input CreateProjectInput `json:"input"`
}

// GetInput returns __createProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__createProjectInput) GetInput() CreateProjectInput { return v.Input }

// __createUserPersonalAccessTokenInput is used internally by genqlient
type __createUserPersonalAccessTokenInput struct {
	UserId uuid.UUID `json:"userId"`
	Name   string    `json:"name"`
}

// GetUserId returns __createUserPersonalAccessTokenInput.UserId, and is useful for accessing the field via an interface.
func (v *__createUserPersonalAccessTokenInput) GetUserId() uuid.UUID { return v.UserId }

// GetName returns __createUserPersonalAccessTokenInput.Name, and is useful for accessing the field via an interface.
func (v *__createUserPersonalAccessTokenInput) GetName() string { return v.Name }

// __createWorkflowTriggerInput is used internally by genqlient
type __createWorkflowTriggerInput struct {
	Input CreateTriggerInput `json:"input"`
}

// GetInput returns __createWorkflowTriggerInput.Input, and is useful for accessing the field via an interface.
func (v *__createWorkflowTriggerInput) GetInput() CreateTriggerInput { return v.Input }

// __deleteGroupInput is used internally by genqlient
type __deleteGroupInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteGroupInput) GetId() uuid.UUID { return v.Id }

// __deleteProjectAndResourcesInput is used internally by genqlient
type __deleteProjectAndResourcesInput struct {
	Id              uuid.UUID `json:"id"`
	DeleteOnFailure bool      `json:"deleteOnFailure"`
}

// GetId returns __deleteProjectAndResourcesInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteProjectAndResourcesInput) GetId() uuid.UUID { return v.Id }

// GetDeleteOnFailure returns __deleteProjectAndResourcesInput.DeleteOnFailure, and is useful for accessing the field via an interface.
func (v *__deleteProjectAndResourcesInput) GetDeleteOnFailure() bool { return v.DeleteOnFailure }

// __deleteProjectInput is used internally by genqlient
type __deleteProjectInput struct {
	Id    uuid.UUID `json:"id"`
	Force bool      `json:"force"`
}

// GetId returns __deleteProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteProjectInput) GetId() uuid.UUID { return v.Id }

// GetForce returns __deleteProjectInput.Force, and is useful for accessing the field via an interface.
func (v *__deleteProjectInput) GetForce() bool { return v.Force }

// __deleteProjectResourcesInput is used internally by genqlient
type __deleteProjectResourcesInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteProjectResourcesInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteProjectResourcesInput) GetId() uuid.UUID { return v.Id }

// __deleteSubGroupInput is used internally by genqlient
type __deleteSubGroupInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteSubGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteSubGroupInput) GetId() uuid.UUID { return v.Id }

// __deleteUserPersonalAccessTokenInput is used internally by genqlient
type __deleteUserPersonalAccessTokenInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteUserPersonalAccessTokenInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteUserPersonalAccessTokenInput) GetId() uuid.UUID { return v.Id }

// __deleteWorkflowTriggerInput is used internally by genqlient
type __deleteWorkflowTriggerInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteWorkflowTriggerInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteWorkflowTriggerInput) GetId() uuid.UUID { return v.Id }

// __duplicateProjectInput is used internally by genqlient
type __duplicateProjectInput struct {
	Id    uuid.UUID             `json:"id"`
	Input DuplicateProjectInput `json:"input"`
}

// GetId returns __duplicateProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__duplicateProjectInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __duplicateProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__duplicateProjectInput) GetInput() DuplicateProjectInput { return v.Input }

// __ejectClusterComponentInput is used internally by genqlient
type __ejectClusterComponentInput struct {
	ClusterId uuid.UUID                  `json:"clusterId"`
	Input     EjectClusterComponentInput `json:"input"`
}

// GetClusterId returns __ejectClusterComponentInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__ejectClusterComponentInput) GetClusterId() uuid.UUID { return v.ClusterId }

// GetInput returns __ejectClusterComponentInput.Input, and is useful for accessing the field via an interface.
func (v *__ejectClusterComponentInput) GetInput() EjectClusterComponentInput { return v.Input }

// __generateDownloadableLogLinkForWorkflowRunStepInput is used internally by genqlient
type __generateDownloadableLogLinkForWorkflowRunStepInput struct {
	ActionStepId uuid.UUID `json:"actionStepId"`
}

// GetActionStepId returns __generateDownloadableLogLinkForWorkflowRunStepInput.ActionStepId, and is useful for accessing the field via an interface.
func (v *__generateDownloadableLogLinkForWorkflowRunStepInput) GetActionStepId() uuid.UUID {
	return v.ActionStepId
}

// __groupsWithSubgroupsInput is used internally by genqlient
type __groupsWithSubgroupsInput struct {
	TeamId uuid.UUID `json:"teamId"`
}

// GetTeamId returns __groupsWithSubgroupsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__groupsWithSubgroupsInput) GetTeamId() uuid.UUID { return v.TeamId }

// __jobListInput is used internally by genqlient
type __jobListInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __jobListInput.TeamId, and is useful for accessing the field via an interface.
func (v *__jobListInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __jobListInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__jobListInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __jobRunDetailInput is used internally by genqlient
type __jobRunDetailInput struct {
	Id     uuid.UUID `json:"id"`
	TeamId uuid.UUID `json:"teamId"`
}

// GetId returns __jobRunDetailInput.Id, and is useful for accessing the field via an interface.
func (v *__jobRunDetailInput) GetId() uuid.UUID { return v.Id }

// GetTeamId returns __jobRunDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__jobRunDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// __jobRunListInput is used internally by genqlient
type __jobRunListInput struct {
	Id     uuid.UUID `json:"id"`
	TeamId uuid.UUID `json:"teamId"`
	Page   PageInput `json:"page"`
}

// GetId returns __jobRunListInput.Id, and is useful for accessing the field via an interface.
func (v *__jobRunListInput) GetId() uuid.UUID { return v.Id }

// GetTeamId returns __jobRunListInput.TeamId, and is useful for accessing the field via an interface.
func (v *__jobRunListInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetPage returns __jobRunListInput.Page, and is useful for accessing the field via an interface.
func (v *__jobRunListInput) GetPage() PageInput { return v.Page }

// __jobRunLogsInput is used internally by genqlient
type __jobRunLogsInput struct {
	Id     uuid.UUID `json:"id"`
	TeamId uuid.UUID `json:"teamId"`
}

// GetId returns __jobRunLogsInput.Id, and is useful for accessing the field via an interface.
func (v *__jobRunLogsInput) GetId() uuid.UUID { return v.Id }

// GetTeamId returns __jobRunLogsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__jobRunLogsInput) GetTeamId() uuid.UUID { return v.TeamId }

// __linkProjectInput is used internally by genqlient
type __linkProjectInput struct {
	Input ProjectLinkInput `json:"input"`
}

// GetInput returns __linkProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__linkProjectInput) GetInput() ProjectLinkInput { return v.Input }

// __observabilityConfigInput is used internally by genqlient
type __observabilityConfigInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __observabilityConfigInput.TeamId, and is useful for accessing the field via an interface.
func (v *__observabilityConfigInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __observabilityConfigInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__observabilityConfigInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectAvailableProvidersInput is used internally by genqlient
type __projectAvailableProvidersInput struct {
	TeamId    uuid.UUID       `json:"teamId"`
	ProjectId uuid.UUID       `json:"projectId"`
	LinkType  ProjectLinkType `json:"linkType"`
}

// GetTeamId returns __projectAvailableProvidersInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectAvailableProvidersInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectAvailableProvidersInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectAvailableProvidersInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetLinkType returns __projectAvailableProvidersInput.LinkType, and is useful for accessing the field via an interface.
func (v *__projectAvailableProvidersInput) GetLinkType() ProjectLinkType { return v.LinkType }

// __projectClustersInput is used internally by genqlient
type __projectClustersInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __projectClustersInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectClustersInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectClustersInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectClustersInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectDeployDetailInput is used internally by genqlient
type __projectDeployDetailInput struct {
	TeamId   uuid.UUID `json:"teamId"`
	DeployId uuid.UUID `json:"deployId"`
}

// GetTeamId returns __projectDeployDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectDeployDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetDeployId returns __projectDeployDetailInput.DeployId, and is useful for accessing the field via an interface.
func (v *__projectDeployDetailInput) GetDeployId() uuid.UUID { return v.DeployId }

// __projectDeployRevisionsInput is used internally by genqlient
type __projectDeployRevisionsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	Page      PageInput `json:"page"`
}

// GetTeamId returns __projectDeployRevisionsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectDeployRevisionsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectDeployRevisionsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectDeployRevisionsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetPage returns __projectDeployRevisionsInput.Page, and is useful for accessing the field via an interface.
func (v *__projectDeployRevisionsInput) GetPage() PageInput { return v.Page }

// __projectDeployRunDetailInput is used internally by genqlient
type __projectDeployRunDetailInput struct {
	TeamId      uuid.UUID `json:"teamId"`
	DeployRunId uuid.UUID `json:"deployRunId"`
}

// GetTeamId returns __projectDeployRunDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectDeployRunDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetDeployRunId returns __projectDeployRunDetailInput.DeployRunId, and is useful for accessing the field via an interface.
func (v *__projectDeployRunDetailInput) GetDeployRunId() uuid.UUID { return v.DeployRunId }

// __projectDeploysInput is used internally by genqlient
type __projectDeploysInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __projectDeploysInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectDeploysInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectDeploysInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectDeploysInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectDetailInput is used internally by genqlient
type __projectDetailInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __projectDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectDetailInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectDetailInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectInfoInput is used internally by genqlient
type __projectInfoInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __projectInfoInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectInfoInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectInfoInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectInfoInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectLinkedProjectsInput is used internally by genqlient
type __projectLinkedProjectsInput struct {
	TeamId    uuid.UUID       `json:"teamId"`
	ProjectId uuid.UUID       `json:"projectId"`
	LinkType  ProjectLinkType `json:"linkType"`
}

// GetTeamId returns __projectLinkedProjectsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectLinkedProjectsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectLinkedProjectsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectLinkedProjectsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetLinkType returns __projectLinkedProjectsInput.LinkType, and is useful for accessing the field via an interface.
func (v *__projectLinkedProjectsInput) GetLinkType() ProjectLinkType { return v.LinkType }

// __projectOutputsInput is used internally by genqlient
type __projectOutputsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __projectOutputsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectOutputsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectOutputsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectOutputsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectStatusOnlyInput is used internally by genqlient
type __projectStatusOnlyInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __projectStatusOnlyInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectStatusOnlyInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __projectStatusOnlyInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__projectStatusOnlyInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __projectsCountInput is used internally by genqlient
type __projectsCountInput struct {
	TeamId uuid.UUID `json:"teamId"`
}

// GetTeamId returns __projectsCountInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectsCountInput) GetTeamId() uuid.UUID { return v.TeamId }

// __projectsWithBlueprintInput is used internally by genqlient
type __projectsWithBlueprintInput struct {
	TeamId uuid.UUID `json:"teamId"`
}

// GetTeamId returns __projectsWithBlueprintInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectsWithBlueprintInput) GetTeamId() uuid.UUID { return v.TeamId }

// __projectsWithDeploymentTimesInput is used internally by genqlient
type __projectsWithDeploymentTimesInput struct {
	TeamId uuid.UUID     `json:"teamId"`
	Input  ProjectsInput `json:"input"`
}

// GetTeamId returns __projectsWithDeploymentTimesInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectsWithDeploymentTimesInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetInput returns __projectsWithDeploymentTimesInput.Input, and is useful for accessing the field via an interface.
func (v *__projectsWithDeploymentTimesInput) GetInput() ProjectsInput { return v.Input }

// __projectsWithStatusInput is used internally by genqlient
type __projectsWithStatusInput struct {
	TeamId uuid.UUID     `json:"teamId"`
	Input  ProjectsInput `json:"input"`
}

// GetTeamId returns __projectsWithStatusInput.TeamId, and is useful for accessing the field via an interface.
func (v *__projectsWithStatusInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetInput returns __projectsWithStatusInput.Input, and is useful for accessing the field via an interface.
func (v *__projectsWithStatusInput) GetInput() ProjectsInput { return v.Input }

// __resourceLogsInput is used internally by genqlient
type __resourceLogsInput struct {
	TeamId     uuid.UUID `json:"teamId"`
	ResourceId uuid.UUID `json:"resourceId"`
}

// GetTeamId returns __resourceLogsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__resourceLogsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetResourceId returns __resourceLogsInput.ResourceId, and is useful for accessing the field via an interface.
func (v *__resourceLogsInput) GetResourceId() uuid.UUID { return v.ResourceId }

// __resourcesWithLogsInput is used internally by genqlient
type __resourcesWithLogsInput struct {
	TeamId    uuid.UUID                          `json:"teamId"`
	ProjectId uuid.UUID                          `json:"projectId"`
	ClusterId uuid.UUID                          `json:"clusterId"`
	Selector  ObservabilityResourceSelectorInput `json:"selector"`
}

// GetTeamId returns __resourcesWithLogsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__resourcesWithLogsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __resourcesWithLogsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__resourcesWithLogsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetClusterId returns __resourcesWithLogsInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__resourcesWithLogsInput) GetClusterId() uuid.UUID { return v.ClusterId }

// GetSelector returns __resourcesWithLogsInput.Selector, and is useful for accessing the field via an interface.
func (v *__resourcesWithLogsInput) GetSelector() ObservabilityResourceSelectorInput {
	return v.Selector
}

// __resourcesWithMetricsInput is used internally by genqlient
type __resourcesWithMetricsInput struct {
	TeamId      uuid.UUID                          `json:"teamId"`
	ProjectId   uuid.UUID                          `json:"projectId"`
	ClusterId   uuid.UUID                          `json:"clusterId"`
	MetricTypes []MetricType                       `json:"metricTypes"`
	Selector    ObservabilityResourceSelectorInput `json:"selector"`
}

// GetTeamId returns __resourcesWithMetricsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__resourcesWithMetricsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __resourcesWithMetricsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__resourcesWithMetricsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetClusterId returns __resourcesWithMetricsInput.ClusterId, and is useful for accessing the field via an interface.
func (v *__resourcesWithMetricsInput) GetClusterId() uuid.UUID { return v.ClusterId }

// GetMetricTypes returns __resourcesWithMetricsInput.MetricTypes, and is useful for accessing the field via an interface.
func (v *__resourcesWithMetricsInput) GetMetricTypes() []MetricType { return v.MetricTypes }

// GetSelector returns __resourcesWithMetricsInput.Selector, and is useful for accessing the field via an interface.
func (v *__resourcesWithMetricsInput) GetSelector() ObservabilityResourceSelectorInput {
	return v.Selector
}

// __submitWorkflowRunInput is used internally by genqlient
type __submitWorkflowRunInput struct {
	WorkflowId uuid.UUID                  `json:"workflowId"`
	Definition WorkflowRunDefinitionInput `json:"definition"`
}

// GetWorkflowId returns __submitWorkflowRunInput.WorkflowId, and is useful for accessing the field via an interface.
func (v *__submitWorkflowRunInput) GetWorkflowId() uuid.UUID { return v.WorkflowId }

// GetDefinition returns __submitWorkflowRunInput.Definition, and is useful for accessing the field via an interface.
func (v *__submitWorkflowRunInput) GetDefinition() WorkflowRunDefinitionInput { return v.Definition }

// __unlinkProjectInput is used internally by genqlient
type __unlinkProjectInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __unlinkProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__unlinkProjectInput) GetId() uuid.UUID { return v.Id }

// __updateDeployInput is used internally by genqlient
type __updateDeployInput struct {
	Id    uuid.UUID         `json:"id"`
	Input UpdateDeployInput `json:"input"`
}

// GetId returns __updateDeployInput.Id, and is useful for accessing the field via an interface.
func (v *__updateDeployInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __updateDeployInput.Input, and is useful for accessing the field via an interface.
func (v *__updateDeployInput) GetInput() UpdateDeployInput { return v.Input }

// __updateProjectInput is used internally by genqlient
type __updateProjectInput struct {
	Id    uuid.UUID          `json:"id"`
	Input UpdateProjectInput `json:"input"`
}

// GetId returns __updateProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__updateProjectInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __updateProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__updateProjectInput) GetInput() UpdateProjectInput { return v.Input }

// __updateWorkflowInput is used internally by genqlient
type __updateWorkflowInput struct {
	Id    uuid.UUID           `json:"id"`
	Input UpdateWorkflowInput `json:"input"`
}

// GetId returns __updateWorkflowInput.Id, and is useful for accessing the field via an interface.
func (v *__updateWorkflowInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __updateWorkflowInput.Input, and is useful for accessing the field via an interface.
func (v *__updateWorkflowInput) GetInput() UpdateWorkflowInput { return v.Input }

// __updateWorkflowTriggerInput is used internally by genqlient
type __updateWorkflowTriggerInput struct {
	Id    uuid.UUID          `json:"id"`
	Input UpdateTriggerInput `json:"input"`
}

// GetId returns __updateWorkflowTriggerInput.Id, and is useful for accessing the field via an interface.
func (v *__updateWorkflowTriggerInput) GetId() uuid.UUID { return v.Id }

// GetInput returns __updateWorkflowTriggerInput.Input, and is useful for accessing the field via an interface.
func (v *__updateWorkflowTriggerInput) GetInput() UpdateTriggerInput { return v.Input }

// __userPersonalAccessTokensInput is used internally by genqlient
type __userPersonalAccessTokensInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __userPersonalAccessTokensInput.Id, and is useful for accessing the field via an interface.
func (v *__userPersonalAccessTokensInput) GetId() uuid.UUID { return v.Id }

// __workflowDetailInput is used internally by genqlient
type __workflowDetailInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetTeamId returns __workflowDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__workflowDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __workflowDetailInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__workflowDetailInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __workflowRunDetailInput is used internally by genqlient
type __workflowRunDetailInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	RunId     uuid.UUID `json:"runId"`
}

// GetTeamId returns __workflowRunDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __workflowRunDetailInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetRunId returns __workflowRunDetailInput.RunId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailInput) GetRunId() uuid.UUID { return v.RunId }

// __workflowRunDetailLogsInput is used internally by genqlient
type __workflowRunDetailLogsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	RunId     uuid.UUID `json:"runId"`
	StepId    uuid.UUID `json:"stepId"`
}

// GetTeamId returns __workflowRunDetailLogsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailLogsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __workflowRunDetailLogsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailLogsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetRunId returns __workflowRunDetailLogsInput.RunId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailLogsInput) GetRunId() uuid.UUID { return v.RunId }

// GetStepId returns __workflowRunDetailLogsInput.StepId, and is useful for accessing the field via an interface.
func (v *__workflowRunDetailLogsInput) GetStepId() uuid.UUID { return v.StepId }

// __workflowRunStepNestedDetailInput is used internally by genqlient
type __workflowRunStepNestedDetailInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	RunId     uuid.UUID `json:"runId"`
	StepId    uuid.UUID `json:"stepId"`
}

// GetTeamId returns __workflowRunStepNestedDetailInput.TeamId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __workflowRunStepNestedDetailInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetRunId returns __workflowRunStepNestedDetailInput.RunId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailInput) GetRunId() uuid.UUID { return v.RunId }

// GetStepId returns __workflowRunStepNestedDetailInput.StepId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailInput) GetStepId() uuid.UUID { return v.StepId }

// __workflowRunStepNestedDetailLogsInput is used internally by genqlient
type __workflowRunStepNestedDetailLogsInput struct {
	TeamId       uuid.UUID `json:"teamId"`
	ProjectId    uuid.UUID `json:"projectId"`
	RunId        uuid.UUID `json:"runId"`
	StepId       uuid.UUID `json:"stepId"`
	ActionStepId uuid.UUID `json:"actionStepId"`
}

// GetTeamId returns __workflowRunStepNestedDetailLogsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailLogsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __workflowRunStepNestedDetailLogsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailLogsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetRunId returns __workflowRunStepNestedDetailLogsInput.RunId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailLogsInput) GetRunId() uuid.UUID { return v.RunId }

// GetStepId returns __workflowRunStepNestedDetailLogsInput.StepId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailLogsInput) GetStepId() uuid.UUID { return v.StepId }

// GetActionStepId returns __workflowRunStepNestedDetailLogsInput.ActionStepId, and is useful for accessing the field via an interface.
func (v *__workflowRunStepNestedDetailLogsInput) GetActionStepId() uuid.UUID { return v.ActionStepId }

// __workflowRunsInput is used internally by genqlient
type __workflowRunsInput struct {
	TeamId    uuid.UUID `json:"teamId"`
	ProjectId uuid.UUID `json:"projectId"`
	Page      PageInput `json:"page"`
}

// GetTeamId returns __workflowRunsInput.TeamId, and is useful for accessing the field via an interface.
func (v *__workflowRunsInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetProjectId returns __workflowRunsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__workflowRunsInput) GetProjectId() uuid.UUID { return v.ProjectId }

// GetPage returns __workflowRunsInput.Page, and is useful for accessing the field via an interface.
func (v *__workflowRunsInput) GetPage() PageInput { return v.Page }

// blueprintRevisionsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type blueprintRevisionsTeam struct {
	Id        uuid.UUID                       `json:"id"`
	Blueprint blueprintRevisionsTeamBlueprint `json:"blueprint"`
}

// GetId returns blueprintRevisionsTeam.Id, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeam) GetId() uuid.UUID { return v.Id }

// GetBlueprint returns blueprintRevisionsTeam.Blueprint, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeam) GetBlueprint() blueprintRevisionsTeamBlueprint { return v.Blueprint }

// blueprintRevisionsTeamBlueprint includes the requested fields of the GraphQL type Blueprint.
type blueprintRevisionsTeamBlueprint struct {
	Id                     uuid.UUID                                                                             `json:"id"`
	ConfigurationRevisions blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnection `json:"configurationRevisions"`
}

// GetId returns blueprintRevisionsTeamBlueprint.Id, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeamBlueprint) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns blueprintRevisionsTeamBlueprint.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeamBlueprint) GetConfigurationRevisions() blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnection {
	return v.ConfigurationRevisions
}

// blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnection includes the requested fields of the GraphQL type BlueprintConfigurationConnection.
type blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnection struct {
	Nodes []blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration `json:"nodes"`
}

// GetNodes returns blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnection) GetNodes() []blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration {
	return v.Nodes
}

// blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration includes the requested fields of the GraphQL type BlueprintConfiguration.
type blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration struct {
	BlueprintConfigurationDetail   `json:"-"`
	BlueprintConfigurationRevision `json:"-"`
}

// GetSlug returns blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.Slug, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetSlug() string {
	return v.BlueprintConfigurationDetail.Slug
}

// GetDisplayName returns blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.DisplayName, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetDisplayName() string {
	return v.BlueprintConfigurationDetail.DisplayName
}

// GetPublished returns blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.Published, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetPublished() bool {
	return v.BlueprintConfigurationDetail.Published
}

// GetDescription returns blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.Description, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetDescription() string {
	return v.BlueprintConfigurationDetail.Description
}

// GetTags returns blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.Tags, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetTags() []string {
	return v.BlueprintConfigurationDetail.Tags
}

// GetLogoUrl returns blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.LogoUrl, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetLogoUrl() string {
	return v.BlueprintConfigurationDetail.LogoUrl
}

// GetRichInputSchema returns blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.RichInputSchema, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetRichInputSchema() string {
	return v.BlueprintConfigurationDetail.RichInputSchema
}

// GetRevisionData returns blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetRevisionData() string {
	return v.BlueprintConfigurationRevision.RevisionDetailV1BlueprintConfiguration.RevisionData
}

// GetRevisionMetadata returns blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.BlueprintConfigurationRevision.RevisionDetailV1BlueprintConfiguration.RevisionMetadata
}

func (v *blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintConfigurationDetail)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.BlueprintConfigurationRevision)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalblueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration struct {
	Slug string `json:"slug"`

	DisplayName string `json:"displayName"`

	Published bool `json:"published"`

	Description string `json:"description"`

	Tags []string `json:"tags"`

	LogoUrl string `json:"logoUrl"`

	RichInputSchema string `json:"richInputSchema"`

	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *blueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration) __premarshalJSON() (*__premarshalblueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration, error) {
	var retval __premarshalblueprintRevisionsTeamBlueprintConfigurationRevisionsBlueprintConfigurationConnectionNodesBlueprintConfiguration

	retval.Slug = v.BlueprintConfigurationDetail.Slug
	retval.DisplayName = v.BlueprintConfigurationDetail.DisplayName
	retval.Published = v.BlueprintConfigurationDetail.Published
	retval.Description = v.BlueprintConfigurationDetail.Description
	retval.Tags = v.BlueprintConfigurationDetail.Tags
	retval.LogoUrl = v.BlueprintConfigurationDetail.LogoUrl
	retval.RichInputSchema = v.BlueprintConfigurationDetail.RichInputSchema
	retval.RevisionData = v.BlueprintConfigurationRevision.RevisionDetailV1BlueprintConfiguration.RevisionData
	retval.RevisionMetadata = v.BlueprintConfigurationRevision.RevisionDetailV1BlueprintConfiguration.RevisionMetadata
	return &retval, nil
}

// blueprintTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type blueprintTeam struct {
	Id        uuid.UUID              `json:"id"`
	Blueprint blueprintTeamBlueprint `json:"blueprint"`
}

// GetId returns blueprintTeam.Id, and is useful for accessing the field via an interface.
func (v *blueprintTeam) GetId() uuid.UUID { return v.Id }

// GetBlueprint returns blueprintTeam.Blueprint, and is useful for accessing the field via an interface.
func (v *blueprintTeam) GetBlueprint() blueprintTeamBlueprint { return v.Blueprint }

// blueprintTeamBlueprint includes the requested fields of the GraphQL type Blueprint.
type blueprintTeamBlueprint struct {
	BlueprintDetail `json:"-"`
}

// GetId returns blueprintTeamBlueprint.Id, and is useful for accessing the field via an interface.
func (v *blueprintTeamBlueprint) GetId() uuid.UUID { return v.BlueprintDetail.Id }

// GetType returns blueprintTeamBlueprint.Type, and is useful for accessing the field via an interface.
func (v *blueprintTeamBlueprint) GetType() BlueprintType { return v.BlueprintDetail.Type }

// GetIsOfficial returns blueprintTeamBlueprint.IsOfficial, and is useful for accessing the field via an interface.
func (v *blueprintTeamBlueprint) GetIsOfficial() bool { return v.BlueprintDetail.IsOfficial }

// GetEnabled returns blueprintTeamBlueprint.Enabled, and is useful for accessing the field via an interface.
func (v *blueprintTeamBlueprint) GetEnabled() bool { return v.BlueprintDetail.Enabled }

// GetConfiguration returns blueprintTeamBlueprint.Configuration, and is useful for accessing the field via an interface.
func (v *blueprintTeamBlueprint) GetConfiguration() BlueprintDetailConfigurationBlueprintConfiguration {
	return v.BlueprintDetail.Configuration
}

func (v *blueprintTeamBlueprint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*blueprintTeamBlueprint
		graphql.NoUnmarshalJSON
	}
	firstPass.blueprintTeamBlueprint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalblueprintTeamBlueprint struct {
	Id uuid.UUID `json:"id"`

	Type BlueprintType `json:"type"`

	IsOfficial bool `json:"isOfficial"`

	Enabled bool `json:"enabled"`

	Configuration BlueprintDetailConfigurationBlueprintConfiguration `json:"configuration"`
}

func (v *blueprintTeamBlueprint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *blueprintTeamBlueprint) __premarshalJSON() (*__premarshalblueprintTeamBlueprint, error) {
	var retval __premarshalblueprintTeamBlueprint

	retval.Id = v.BlueprintDetail.Id
	retval.Type = v.BlueprintDetail.Type
	retval.IsOfficial = v.BlueprintDetail.IsOfficial
	retval.Enabled = v.BlueprintDetail.Enabled
	retval.Configuration = v.BlueprintDetail.Configuration
	return &retval, nil
}

// buildArtifactsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type buildArtifactsTeam struct {
	Project buildArtifactsTeamProject `json:"project"`
}

// GetProject returns buildArtifactsTeam.Project, and is useful for accessing the field via an interface.
func (v *buildArtifactsTeam) GetProject() buildArtifactsTeamProject { return v.Project }

// buildArtifactsTeamProject includes the requested fields of the GraphQL type Project.
type buildArtifactsTeamProject struct {
	Build buildArtifactsTeamProjectBuild `json:"build"`
}

// GetBuild returns buildArtifactsTeamProject.Build, and is useful for accessing the field via an interface.
func (v *buildArtifactsTeamProject) GetBuild() buildArtifactsTeamProjectBuild { return v.Build }

// buildArtifactsTeamProjectBuild includes the requested fields of the GraphQL type Build.
type buildArtifactsTeamProjectBuild struct {
	Runs buildArtifactsTeamProjectBuildRunsBuildRunConnection `json:"runs"`
}

// GetRuns returns buildArtifactsTeamProjectBuild.Runs, and is useful for accessing the field via an interface.
func (v *buildArtifactsTeamProjectBuild) GetRuns() buildArtifactsTeamProjectBuildRunsBuildRunConnection {
	return v.Runs
}

// buildArtifactsTeamProjectBuildRunsBuildRunConnection includes the requested fields of the GraphQL type BuildRunConnection.
type buildArtifactsTeamProjectBuildRunsBuildRunConnection struct {
	TotalCount int                                                                 `json:"totalCount"`
	PageInfo   buildArtifactsTeamProjectBuildRunsBuildRunConnectionPageInfo        `json:"pageInfo"`
	Nodes      []buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun `json:"nodes"`
}

// GetTotalCount returns buildArtifactsTeamProjectBuildRunsBuildRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *buildArtifactsTeamProjectBuildRunsBuildRunConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetPageInfo returns buildArtifactsTeamProjectBuildRunsBuildRunConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *buildArtifactsTeamProjectBuildRunsBuildRunConnection) GetPageInfo() buildArtifactsTeamProjectBuildRunsBuildRunConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns buildArtifactsTeamProjectBuildRunsBuildRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *buildArtifactsTeamProjectBuildRunsBuildRunConnection) GetNodes() []buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun {
	return v.Nodes
}

// buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun includes the requested fields of the GraphQL type BuildRun.
type buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun struct {
	Id        uuid.UUID                                                                                 `json:"id"`
	Sequence  int                                                                                       `json:"sequence"`
	Artifacts []buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact `json:"artifacts"`
}

// GetId returns buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.Id, and is useful for accessing the field via an interface.
func (v *buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetId() uuid.UUID {
	return v.Id
}

// GetSequence returns buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.Sequence, and is useful for accessing the field via an interface.
func (v *buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetSequence() int {
	return v.Sequence
}

// GetArtifacts returns buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.Artifacts, and is useful for accessing the field via an interface.
func (v *buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetArtifacts() []buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact {
	return v.Artifacts
}

// buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact includes the requested fields of the GraphQL type BuildArtifact.
type buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact struct {
	Id        uuid.UUID `json:"id"`
	Image     string    `json:"image"`
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact.Id, and is useful for accessing the field via an interface.
func (v *buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact) GetId() uuid.UUID {
	return v.Id
}

// GetImage returns buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact.Image, and is useful for accessing the field via an interface.
func (v *buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact) GetImage() string {
	return v.Image
}

// GetCreatedAt returns buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact.CreatedAt, and is useful for accessing the field via an interface.
func (v *buildArtifactsTeamProjectBuildRunsBuildRunConnectionNodesBuildRunArtifactsBuildArtifact) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// buildArtifactsTeamProjectBuildRunsBuildRunConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type buildArtifactsTeamProjectBuildRunsBuildRunConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns buildArtifactsTeamProjectBuildRunsBuildRunConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *buildArtifactsTeamProjectBuildRunsBuildRunConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// buildRunDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type buildRunDetailTeam struct {
	Project buildRunDetailTeamProject `json:"project"`
}

// GetProject returns buildRunDetailTeam.Project, and is useful for accessing the field via an interface.
func (v *buildRunDetailTeam) GetProject() buildRunDetailTeamProject { return v.Project }

// buildRunDetailTeamProject includes the requested fields of the GraphQL type Project.
type buildRunDetailTeamProject struct {
	Build buildRunDetailTeamProjectBuild `json:"build"`
}

// GetBuild returns buildRunDetailTeamProject.Build, and is useful for accessing the field via an interface.
func (v *buildRunDetailTeamProject) GetBuild() buildRunDetailTeamProjectBuild { return v.Build }

// buildRunDetailTeamProjectBuild includes the requested fields of the GraphQL type Build.
type buildRunDetailTeamProjectBuild struct {
	Id  uuid.UUID                         `json:"id"`
	Run buildRunDetailTeamProjectBuildRun `json:"run"`
}

// GetId returns buildRunDetailTeamProjectBuild.Id, and is useful for accessing the field via an interface.
func (v *buildRunDetailTeamProjectBuild) GetId() uuid.UUID { return v.Id }

// GetRun returns buildRunDetailTeamProjectBuild.Run, and is useful for accessing the field via an interface.
func (v *buildRunDetailTeamProjectBuild) GetRun() buildRunDetailTeamProjectBuildRun { return v.Run }

// buildRunDetailTeamProjectBuildRun includes the requested fields of the GraphQL type BuildRun.
type buildRunDetailTeamProjectBuildRun struct {
	BuildRunDetail `json:"-"`
}

// GetId returns buildRunDetailTeamProjectBuildRun.Id, and is useful for accessing the field via an interface.
func (v *buildRunDetailTeamProjectBuildRun) GetId() uuid.UUID { return v.BuildRunDetail.Id }

// GetSequence returns buildRunDetailTeamProjectBuildRun.Sequence, and is useful for accessing the field via an interface.
func (v *buildRunDetailTeamProjectBuildRun) GetSequence() int { return v.BuildRunDetail.Sequence }

// GetJobRun returns buildRunDetailTeamProjectBuildRun.JobRun, and is useful for accessing the field via an interface.
func (v *buildRunDetailTeamProjectBuildRun) GetJobRun() BuildRunDetailJobRun {
	return v.BuildRunDetail.JobRun
}

// GetTriggeredBy returns buildRunDetailTeamProjectBuildRun.TriggeredBy, and is useful for accessing the field via an interface.
func (v *buildRunDetailTeamProjectBuildRun) GetTriggeredBy() BuildRunDetailTriggeredByWorkflowRun {
	return v.BuildRunDetail.TriggeredBy
}

// GetDefinition returns buildRunDetailTeamProjectBuildRun.Definition, and is useful for accessing the field via an interface.
func (v *buildRunDetailTeamProjectBuildRun) GetDefinition() BuildRunDetailDefinitionBuildDefinition {
	return v.BuildRunDetail.Definition
}

// GetArtifacts returns buildRunDetailTeamProjectBuildRun.Artifacts, and is useful for accessing the field via an interface.
func (v *buildRunDetailTeamProjectBuildRun) GetArtifacts() []BuildRunDetailArtifactsBuildArtifact {
	return v.BuildRunDetail.Artifacts
}

func (v *buildRunDetailTeamProjectBuildRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*buildRunDetailTeamProjectBuildRun
		graphql.NoUnmarshalJSON
	}
	firstPass.buildRunDetailTeamProjectBuildRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BuildRunDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalbuildRunDetailTeamProjectBuildRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	JobRun BuildRunDetailJobRun `json:"jobRun"`

	TriggeredBy BuildRunDetailTriggeredByWorkflowRun `json:"triggeredBy"`

	Definition BuildRunDetailDefinitionBuildDefinition `json:"definition"`

	Artifacts []BuildRunDetailArtifactsBuildArtifact `json:"artifacts"`
}

func (v *buildRunDetailTeamProjectBuildRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *buildRunDetailTeamProjectBuildRun) __premarshalJSON() (*__premarshalbuildRunDetailTeamProjectBuildRun, error) {
	var retval __premarshalbuildRunDetailTeamProjectBuildRun

	retval.Id = v.BuildRunDetail.Id
	retval.Sequence = v.BuildRunDetail.Sequence
	retval.JobRun = v.BuildRunDetail.JobRun
	retval.TriggeredBy = v.BuildRunDetail.TriggeredBy
	retval.Definition = v.BuildRunDetail.Definition
	retval.Artifacts = v.BuildRunDetail.Artifacts
	return &retval, nil
}

// buildRunsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type buildRunsTeam struct {
	Project buildRunsTeamProject `json:"project"`
}

// GetProject returns buildRunsTeam.Project, and is useful for accessing the field via an interface.
func (v *buildRunsTeam) GetProject() buildRunsTeamProject { return v.Project }

// buildRunsTeamProject includes the requested fields of the GraphQL type Project.
type buildRunsTeamProject struct {
	Build buildRunsTeamProjectBuild `json:"build"`
}

// GetBuild returns buildRunsTeamProject.Build, and is useful for accessing the field via an interface.
func (v *buildRunsTeamProject) GetBuild() buildRunsTeamProjectBuild { return v.Build }

// buildRunsTeamProjectBuild includes the requested fields of the GraphQL type Build.
type buildRunsTeamProjectBuild struct {
	Id   uuid.UUID                                       `json:"id"`
	Runs buildRunsTeamProjectBuildRunsBuildRunConnection `json:"runs"`
}

// GetId returns buildRunsTeamProjectBuild.Id, and is useful for accessing the field via an interface.
func (v *buildRunsTeamProjectBuild) GetId() uuid.UUID { return v.Id }

// GetRuns returns buildRunsTeamProjectBuild.Runs, and is useful for accessing the field via an interface.
func (v *buildRunsTeamProjectBuild) GetRuns() buildRunsTeamProjectBuildRunsBuildRunConnection {
	return v.Runs
}

// buildRunsTeamProjectBuildRunsBuildRunConnection includes the requested fields of the GraphQL type BuildRunConnection.
type buildRunsTeamProjectBuildRunsBuildRunConnection struct {
	TotalCount int                                                            `json:"totalCount"`
	PageInfo   buildRunsTeamProjectBuildRunsBuildRunConnectionPageInfo        `json:"pageInfo"`
	Nodes      []buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun `json:"nodes"`
}

// GetTotalCount returns buildRunsTeamProjectBuildRunsBuildRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *buildRunsTeamProjectBuildRunsBuildRunConnection) GetTotalCount() int { return v.TotalCount }

// GetPageInfo returns buildRunsTeamProjectBuildRunsBuildRunConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *buildRunsTeamProjectBuildRunsBuildRunConnection) GetPageInfo() buildRunsTeamProjectBuildRunsBuildRunConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns buildRunsTeamProjectBuildRunsBuildRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *buildRunsTeamProjectBuildRunsBuildRunConnection) GetNodes() []buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun {
	return v.Nodes
}

// buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun includes the requested fields of the GraphQL type BuildRun.
type buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun struct {
	BuildRunListItem `json:"-"`
}

// GetId returns buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.Id, and is useful for accessing the field via an interface.
func (v *buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetId() uuid.UUID {
	return v.BuildRunListItem.Id
}

// GetSequence returns buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.Sequence, and is useful for accessing the field via an interface.
func (v *buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetSequence() int {
	return v.BuildRunListItem.Sequence
}

// GetJobRun returns buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.JobRun, and is useful for accessing the field via an interface.
func (v *buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetJobRun() BuildRunListItemJobRun {
	return v.BuildRunListItem.JobRun
}

// GetTriggeredBy returns buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun.TriggeredBy, and is useful for accessing the field via an interface.
func (v *buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) GetTriggeredBy() BuildRunListItemTriggeredByWorkflowRun {
	return v.BuildRunListItem.TriggeredBy
}

func (v *buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun
		graphql.NoUnmarshalJSON
	}
	firstPass.buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BuildRunListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalbuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	JobRun BuildRunListItemJobRun `json:"jobRun"`

	TriggeredBy BuildRunListItemTriggeredByWorkflowRun `json:"triggeredBy"`
}

func (v *buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *buildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun) __premarshalJSON() (*__premarshalbuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun, error) {
	var retval __premarshalbuildRunsTeamProjectBuildRunsBuildRunConnectionNodesBuildRun

	retval.Id = v.BuildRunListItem.Id
	retval.Sequence = v.BuildRunListItem.Sequence
	retval.JobRun = v.BuildRunListItem.JobRun
	retval.TriggeredBy = v.BuildRunListItem.TriggeredBy
	return &retval, nil
}

// buildRunsTeamProjectBuildRunsBuildRunConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type buildRunsTeamProjectBuildRunsBuildRunConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns buildRunsTeamProjectBuildRunsBuildRunConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *buildRunsTeamProjectBuildRunsBuildRunConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// cloudRevisionsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type cloudRevisionsTeam struct {
	Id           uuid.UUID                      `json:"id"`
	CloudAccount cloudRevisionsTeamCloudAccount `json:"-"`
}

// GetId returns cloudRevisionsTeam.Id, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeam) GetId() uuid.UUID { return v.Id }

// GetCloudAccount returns cloudRevisionsTeam.CloudAccount, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeam) GetCloudAccount() cloudRevisionsTeamCloudAccount { return v.CloudAccount }

func (v *cloudRevisionsTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudRevisionsTeam
		CloudAccount json.RawMessage `json:"cloudAccount"`
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudRevisionsTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CloudAccount
		src := firstPass.CloudAccount
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalcloudRevisionsTeamCloudAccount(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal cloudRevisionsTeam.CloudAccount: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcloudRevisionsTeam struct {
	Id uuid.UUID `json:"id"`

	CloudAccount json.RawMessage `json:"cloudAccount"`
}

func (v *cloudRevisionsTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudRevisionsTeam) __premarshalJSON() (*__premarshalcloudRevisionsTeam, error) {
	var retval __premarshalcloudRevisionsTeam

	retval.Id = v.Id
	{

		dst := &retval.CloudAccount
		src := v.CloudAccount
		var err error
		*dst, err = __marshalcloudRevisionsTeamCloudAccount(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal cloudRevisionsTeam.CloudAccount: %w", err)
		}
	}
	return &retval, nil
}

// cloudRevisionsTeamCloudAccount includes the requested fields of the GraphQL interface CloudAccount.
//
// cloudRevisionsTeamCloudAccount is implemented by the following types:
// cloudRevisionsTeamCloudAccountAWSAccount
// cloudRevisionsTeamCloudAccountAzureAccount
// cloudRevisionsTeamCloudAccountCoreWeaveAccount
// cloudRevisionsTeamCloudAccountDOAccount
// cloudRevisionsTeamCloudAccountGCPAccount
// cloudRevisionsTeamCloudAccountLinodeAccount
// cloudRevisionsTeamCloudAccountVultrAccount
type cloudRevisionsTeamCloudAccount interface {
	implementsGraphQLInterfacecloudRevisionsTeamCloudAccount()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *cloudRevisionsTeamCloudAccountAWSAccount) implementsGraphQLInterfacecloudRevisionsTeamCloudAccount() {
}
func (v *cloudRevisionsTeamCloudAccountAzureAccount) implementsGraphQLInterfacecloudRevisionsTeamCloudAccount() {
}
func (v *cloudRevisionsTeamCloudAccountCoreWeaveAccount) implementsGraphQLInterfacecloudRevisionsTeamCloudAccount() {
}
func (v *cloudRevisionsTeamCloudAccountDOAccount) implementsGraphQLInterfacecloudRevisionsTeamCloudAccount() {
}
func (v *cloudRevisionsTeamCloudAccountGCPAccount) implementsGraphQLInterfacecloudRevisionsTeamCloudAccount() {
}
func (v *cloudRevisionsTeamCloudAccountLinodeAccount) implementsGraphQLInterfacecloudRevisionsTeamCloudAccount() {
}
func (v *cloudRevisionsTeamCloudAccountVultrAccount) implementsGraphQLInterfacecloudRevisionsTeamCloudAccount() {
}

func __unmarshalcloudRevisionsTeamCloudAccount(b []byte, v *cloudRevisionsTeamCloudAccount) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AWSAccount":
		*v = new(cloudRevisionsTeamCloudAccountAWSAccount)
		return json.Unmarshal(b, *v)
	case "AzureAccount":
		*v = new(cloudRevisionsTeamCloudAccountAzureAccount)
		return json.Unmarshal(b, *v)
	case "CoreWeaveAccount":
		*v = new(cloudRevisionsTeamCloudAccountCoreWeaveAccount)
		return json.Unmarshal(b, *v)
	case "DOAccount":
		*v = new(cloudRevisionsTeamCloudAccountDOAccount)
		return json.Unmarshal(b, *v)
	case "GCPAccount":
		*v = new(cloudRevisionsTeamCloudAccountGCPAccount)
		return json.Unmarshal(b, *v)
	case "LinodeAccount":
		*v = new(cloudRevisionsTeamCloudAccountLinodeAccount)
		return json.Unmarshal(b, *v)
	case "VultrAccount":
		*v = new(cloudRevisionsTeamCloudAccountVultrAccount)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CloudAccount.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for cloudRevisionsTeamCloudAccount: "%v"`, tn.TypeName)
	}
}

func __marshalcloudRevisionsTeamCloudAccount(v *cloudRevisionsTeamCloudAccount) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *cloudRevisionsTeamCloudAccountAWSAccount:
		typename = "AWSAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*cloudRevisionsTeamCloudAccountAWSAccount
		}{typename, v}
		return json.Marshal(result)
	case *cloudRevisionsTeamCloudAccountAzureAccount:
		typename = "AzureAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*cloudRevisionsTeamCloudAccountAzureAccount
		}{typename, v}
		return json.Marshal(result)
	case *cloudRevisionsTeamCloudAccountCoreWeaveAccount:
		typename = "CoreWeaveAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*cloudRevisionsTeamCloudAccountCoreWeaveAccount
		}{typename, v}
		return json.Marshal(result)
	case *cloudRevisionsTeamCloudAccountDOAccount:
		typename = "DOAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*cloudRevisionsTeamCloudAccountDOAccount
		}{typename, v}
		return json.Marshal(result)
	case *cloudRevisionsTeamCloudAccountGCPAccount:
		typename = "GCPAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*cloudRevisionsTeamCloudAccountGCPAccount
		}{typename, v}
		return json.Marshal(result)
	case *cloudRevisionsTeamCloudAccountLinodeAccount:
		typename = "LinodeAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*cloudRevisionsTeamCloudAccountLinodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *cloudRevisionsTeamCloudAccountVultrAccount:
		typename = "VultrAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*cloudRevisionsTeamCloudAccountVultrAccount
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for cloudRevisionsTeamCloudAccount: "%T"`, v)
	}
}

// cloudRevisionsTeamCloudAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type cloudRevisionsTeamCloudAccountAWSAccount struct {
	Typename               string                                                                                          `json:"__typename"`
	Id                     uuid.UUID                                                                                       `json:"id"`
	ConfigurationRevisions cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns cloudRevisionsTeamCloudAccountAWSAccount.Typename, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountAWSAccount) GetTypename() string { return v.Typename }

// GetId returns cloudRevisionsTeamCloudAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountAWSAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns cloudRevisionsTeamCloudAccountAWSAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountAWSAccount) GetConfigurationRevisions() cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnection includes the requested fields of the GraphQL type AWSAccountConfigurationConnection.
type cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnection struct {
	Nodes []cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration `json:"nodes"`
}

// GetNodes returns cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnection) GetNodes() []cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration {
	return v.Nodes
}

// cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration includes the requested fields of the GraphQL type AWSAccountConfiguration.
type cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration struct {
	RevisionDetailV1AWSAccountConfiguration `json:"-"`
}

// GetRevisionData returns cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1AWSAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1AWSAccountConfiguration.RevisionMetadata
}

func (v *cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1AWSAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration) __premarshalJSON() (*__premarshalcloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration, error) {
	var retval __premarshalcloudRevisionsTeamCloudAccountAWSAccountConfigurationRevisionsAWSAccountConfigurationConnectionNodesAWSAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1AWSAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1AWSAccountConfiguration.RevisionMetadata
	return &retval, nil
}

// cloudRevisionsTeamCloudAccountAzureAccount includes the requested fields of the GraphQL type AzureAccount.
type cloudRevisionsTeamCloudAccountAzureAccount struct {
	Typename               string                                                                                              `json:"__typename"`
	Id                     uuid.UUID                                                                                           `json:"id"`
	ConfigurationRevisions cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns cloudRevisionsTeamCloudAccountAzureAccount.Typename, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountAzureAccount) GetTypename() string { return v.Typename }

// GetId returns cloudRevisionsTeamCloudAccountAzureAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountAzureAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns cloudRevisionsTeamCloudAccountAzureAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountAzureAccount) GetConfigurationRevisions() cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnection includes the requested fields of the GraphQL type AzureAccountConfigurationConnection.
type cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnection struct {
	Nodes []cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration `json:"nodes"`
}

// GetNodes returns cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnection) GetNodes() []cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration {
	return v.Nodes
}

// cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration includes the requested fields of the GraphQL type AzureAccountConfiguration.
type cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration struct {
	RevisionDetailV1AzureAccountConfiguration `json:"-"`
}

// GetRevisionData returns cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1AzureAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1AzureAccountConfiguration.RevisionMetadata
}

func (v *cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1AzureAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration) __premarshalJSON() (*__premarshalcloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration, error) {
	var retval __premarshalcloudRevisionsTeamCloudAccountAzureAccountConfigurationRevisionsAzureAccountConfigurationConnectionNodesAzureAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1AzureAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1AzureAccountConfiguration.RevisionMetadata
	return &retval, nil
}

// cloudRevisionsTeamCloudAccountCoreWeaveAccount includes the requested fields of the GraphQL type CoreWeaveAccount.
type cloudRevisionsTeamCloudAccountCoreWeaveAccount struct {
	Typename               string                                                                                                      `json:"__typename"`
	Id                     uuid.UUID                                                                                                   `json:"id"`
	ConfigurationRevisions cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns cloudRevisionsTeamCloudAccountCoreWeaveAccount.Typename, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountCoreWeaveAccount) GetTypename() string { return v.Typename }

// GetId returns cloudRevisionsTeamCloudAccountCoreWeaveAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountCoreWeaveAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns cloudRevisionsTeamCloudAccountCoreWeaveAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountCoreWeaveAccount) GetConfigurationRevisions() cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnection includes the requested fields of the GraphQL type CoreWeaveAccountConfigurationConnection.
type cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnection struct {
	Nodes []cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration `json:"nodes"`
}

// GetNodes returns cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnection) GetNodes() []cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration {
	return v.Nodes
}

// cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration includes the requested fields of the GraphQL type CoreWeaveAccountConfiguration.
type cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration struct {
	RevisionDetailV1CoreWeaveAccountConfiguration `json:"-"`
}

// GetRevisionData returns cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1CoreWeaveAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1CoreWeaveAccountConfiguration.RevisionMetadata
}

func (v *cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1CoreWeaveAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration) __premarshalJSON() (*__premarshalcloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration, error) {
	var retval __premarshalcloudRevisionsTeamCloudAccountCoreWeaveAccountConfigurationRevisionsCoreWeaveAccountConfigurationConnectionNodesCoreWeaveAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1CoreWeaveAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1CoreWeaveAccountConfiguration.RevisionMetadata
	return &retval, nil
}

// cloudRevisionsTeamCloudAccountDOAccount includes the requested fields of the GraphQL type DOAccount.
type cloudRevisionsTeamCloudAccountDOAccount struct {
	Typename               string                                                                                        `json:"__typename"`
	Id                     uuid.UUID                                                                                     `json:"id"`
	ConfigurationRevisions cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns cloudRevisionsTeamCloudAccountDOAccount.Typename, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountDOAccount) GetTypename() string { return v.Typename }

// GetId returns cloudRevisionsTeamCloudAccountDOAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountDOAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns cloudRevisionsTeamCloudAccountDOAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountDOAccount) GetConfigurationRevisions() cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnection includes the requested fields of the GraphQL type DOAccountConfigurationConnection.
type cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnection struct {
	Nodes []cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration `json:"nodes"`
}

// GetNodes returns cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnection) GetNodes() []cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration {
	return v.Nodes
}

// cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration includes the requested fields of the GraphQL type DOAccountConfiguration.
type cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration struct {
	RevisionDetailV1DOAccountConfiguration `json:"-"`
}

// GetRevisionData returns cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1DOAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1DOAccountConfiguration.RevisionMetadata
}

func (v *cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1DOAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration) __premarshalJSON() (*__premarshalcloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration, error) {
	var retval __premarshalcloudRevisionsTeamCloudAccountDOAccountConfigurationRevisionsDOAccountConfigurationConnectionNodesDOAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1DOAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1DOAccountConfiguration.RevisionMetadata
	return &retval, nil
}

// cloudRevisionsTeamCloudAccountGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type cloudRevisionsTeamCloudAccountGCPAccount struct {
	Typename               string                                                                                          `json:"__typename"`
	Id                     uuid.UUID                                                                                       `json:"id"`
	ConfigurationRevisions cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns cloudRevisionsTeamCloudAccountGCPAccount.Typename, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountGCPAccount) GetTypename() string { return v.Typename }

// GetId returns cloudRevisionsTeamCloudAccountGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountGCPAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns cloudRevisionsTeamCloudAccountGCPAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountGCPAccount) GetConfigurationRevisions() cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnection includes the requested fields of the GraphQL type GCPAccountConfigurationConnection.
type cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnection struct {
	Nodes []cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration `json:"nodes"`
}

// GetNodes returns cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnection) GetNodes() []cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration {
	return v.Nodes
}

// cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration includes the requested fields of the GraphQL type GCPAccountConfiguration.
type cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration struct {
	RevisionDetailV1GCPAccountConfiguration `json:"-"`
}

// GetRevisionData returns cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1GCPAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1GCPAccountConfiguration.RevisionMetadata
}

func (v *cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1GCPAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration) __premarshalJSON() (*__premarshalcloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration, error) {
	var retval __premarshalcloudRevisionsTeamCloudAccountGCPAccountConfigurationRevisionsGCPAccountConfigurationConnectionNodesGCPAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1GCPAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1GCPAccountConfiguration.RevisionMetadata
	return &retval, nil
}

// cloudRevisionsTeamCloudAccountLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type cloudRevisionsTeamCloudAccountLinodeAccount struct {
	Typename               string                                                                                                `json:"__typename"`
	Id                     uuid.UUID                                                                                             `json:"id"`
	ConfigurationRevisions cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns cloudRevisionsTeamCloudAccountLinodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountLinodeAccount) GetTypename() string { return v.Typename }

// GetId returns cloudRevisionsTeamCloudAccountLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountLinodeAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns cloudRevisionsTeamCloudAccountLinodeAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountLinodeAccount) GetConfigurationRevisions() cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnection includes the requested fields of the GraphQL type LinodeAccountConfigurationConnection.
type cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnection struct {
	Nodes []cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration `json:"nodes"`
}

// GetNodes returns cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnection) GetNodes() []cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration {
	return v.Nodes
}

// cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration includes the requested fields of the GraphQL type LinodeAccountConfiguration.
type cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration struct {
	RevisionDetailV1LinodeAccountConfiguration `json:"-"`
}

// GetRevisionData returns cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1LinodeAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1LinodeAccountConfiguration.RevisionMetadata
}

func (v *cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1LinodeAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration) __premarshalJSON() (*__premarshalcloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration, error) {
	var retval __premarshalcloudRevisionsTeamCloudAccountLinodeAccountConfigurationRevisionsLinodeAccountConfigurationConnectionNodesLinodeAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1LinodeAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1LinodeAccountConfiguration.RevisionMetadata
	return &retval, nil
}

// cloudRevisionsTeamCloudAccountVultrAccount includes the requested fields of the GraphQL type VultrAccount.
type cloudRevisionsTeamCloudAccountVultrAccount struct {
	Typename               string                                                                                              `json:"__typename"`
	Id                     uuid.UUID                                                                                           `json:"id"`
	ConfigurationRevisions cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnection `json:"configurationRevisions"`
}

// GetTypename returns cloudRevisionsTeamCloudAccountVultrAccount.Typename, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountVultrAccount) GetTypename() string { return v.Typename }

// GetId returns cloudRevisionsTeamCloudAccountVultrAccount.Id, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountVultrAccount) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns cloudRevisionsTeamCloudAccountVultrAccount.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountVultrAccount) GetConfigurationRevisions() cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnection {
	return v.ConfigurationRevisions
}

// cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnection includes the requested fields of the GraphQL type VultrAccountConfigurationConnection.
type cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnection struct {
	Nodes []cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration `json:"nodes"`
}

// GetNodes returns cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnection) GetNodes() []cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration {
	return v.Nodes
}

// cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration includes the requested fields of the GraphQL type VultrAccountConfiguration.
type cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration struct {
	RevisionDetailV1VultrAccountConfiguration `json:"-"`
}

// GetRevisionData returns cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1VultrAccountConfiguration.RevisionData
}

// GetRevisionMetadata returns cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1VultrAccountConfiguration.RevisionMetadata
}

func (v *cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1VultrAccountConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *cloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration) __premarshalJSON() (*__premarshalcloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration, error) {
	var retval __premarshalcloudRevisionsTeamCloudAccountVultrAccountConfigurationRevisionsVultrAccountConfigurationConnectionNodesVultrAccountConfiguration

	retval.RevisionData = v.RevisionDetailV1VultrAccountConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1VultrAccountConfiguration.RevisionMetadata
	return &retval, nil
}

// clusterDetailsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type clusterDetailsTeam struct {
	Id      uuid.UUID                 `json:"id"`
	Cluster clusterDetailsTeamCluster `json:"cluster"`
}

// GetId returns clusterDetailsTeam.Id, and is useful for accessing the field via an interface.
func (v *clusterDetailsTeam) GetId() uuid.UUID { return v.Id }

// GetCluster returns clusterDetailsTeam.Cluster, and is useful for accessing the field via an interface.
func (v *clusterDetailsTeam) GetCluster() clusterDetailsTeamCluster { return v.Cluster }

// clusterDetailsTeamCluster includes the requested fields of the GraphQL type Cluster.
type clusterDetailsTeamCluster struct {
	Id              uuid.UUID `json:"id"`
	ClusterDetailV1 `json:"-"`
}

// GetId returns clusterDetailsTeamCluster.Id, and is useful for accessing the field via an interface.
func (v *clusterDetailsTeamCluster) GetId() uuid.UUID { return v.Id }

// GetDisplayName returns clusterDetailsTeamCluster.DisplayName, and is useful for accessing the field via an interface.
func (v *clusterDetailsTeamCluster) GetDisplayName() string { return v.ClusterDetailV1.DisplayName }

// GetState returns clusterDetailsTeamCluster.State, and is useful for accessing the field via an interface.
func (v *clusterDetailsTeamCluster) GetState() ClusterState { return v.ClusterDetailV1.State }

// GetConnected returns clusterDetailsTeamCluster.Connected, and is useful for accessing the field via an interface.
func (v *clusterDetailsTeamCluster) GetConnected() bool { return v.ClusterDetailV1.Connected }

// GetCloudProvider returns clusterDetailsTeamCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *clusterDetailsTeamCluster) GetCloudProvider() CloudProvider {
	return v.ClusterDetailV1.CloudProvider
}

// GetCreatedAt returns clusterDetailsTeamCluster.CreatedAt, and is useful for accessing the field via an interface.
func (v *clusterDetailsTeamCluster) GetCreatedAt() time.Time { return v.ClusterDetailV1.CreatedAt }

// GetUpdatedAt returns clusterDetailsTeamCluster.UpdatedAt, and is useful for accessing the field via an interface.
func (v *clusterDetailsTeamCluster) GetUpdatedAt() time.Time { return v.ClusterDetailV1.UpdatedAt }

func (v *clusterDetailsTeamCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*clusterDetailsTeamCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.clusterDetailsTeamCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ClusterDetailV1)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalclusterDetailsTeamCluster struct {
	Id uuid.UUID `json:"id"`

	DisplayName string `json:"displayName"`

	State ClusterState `json:"state"`

	Connected bool `json:"connected"`

	CloudProvider CloudProvider `json:"cloudProvider"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *clusterDetailsTeamCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *clusterDetailsTeamCluster) __premarshalJSON() (*__premarshalclusterDetailsTeamCluster, error) {
	var retval __premarshalclusterDetailsTeamCluster

	retval.Id = v.Id
	retval.DisplayName = v.ClusterDetailV1.DisplayName
	retval.State = v.ClusterDetailV1.State
	retval.Connected = v.ClusterDetailV1.Connected
	retval.CloudProvider = v.ClusterDetailV1.CloudProvider
	retval.CreatedAt = v.ClusterDetailV1.CreatedAt
	retval.UpdatedAt = v.ClusterDetailV1.UpdatedAt
	return &retval, nil
}

// clusterRevisionsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type clusterRevisionsTeam struct {
	Id      uuid.UUID                   `json:"id"`
	Cluster clusterRevisionsTeamCluster `json:"cluster"`
}

// GetId returns clusterRevisionsTeam.Id, and is useful for accessing the field via an interface.
func (v *clusterRevisionsTeam) GetId() uuid.UUID { return v.Id }

// GetCluster returns clusterRevisionsTeam.Cluster, and is useful for accessing the field via an interface.
func (v *clusterRevisionsTeam) GetCluster() clusterRevisionsTeamCluster { return v.Cluster }

// clusterRevisionsTeamCluster includes the requested fields of the GraphQL type Cluster.
type clusterRevisionsTeamCluster struct {
	Id                     uuid.UUID                                                                       `json:"id"`
	ConfigurationRevisions clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnection `json:"configurationRevisions"`
}

// GetId returns clusterRevisionsTeamCluster.Id, and is useful for accessing the field via an interface.
func (v *clusterRevisionsTeamCluster) GetId() uuid.UUID { return v.Id }

// GetConfigurationRevisions returns clusterRevisionsTeamCluster.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *clusterRevisionsTeamCluster) GetConfigurationRevisions() clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnection {
	return v.ConfigurationRevisions
}

// clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnection includes the requested fields of the GraphQL type ClusterConfigurationConnection.
type clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnection struct {
	Nodes []clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration `json:"nodes"`
}

// GetNodes returns clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnection) GetNodes() []clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration {
	return v.Nodes
}

// clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration includes the requested fields of the GraphQL type ClusterConfiguration.
type clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration struct {
	RevisionDetailV1ClusterConfiguration `json:"-"`
}

// GetRevisionData returns clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1ClusterConfiguration.RevisionData
}

// GetRevisionMetadata returns clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1ClusterConfiguration.RevisionMetadata
}

func (v *clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1ClusterConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalclusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *clusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration) __premarshalJSON() (*__premarshalclusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration, error) {
	var retval __premarshalclusterRevisionsTeamClusterConfigurationRevisionsClusterConfigurationConnectionNodesClusterConfiguration

	retval.RevisionData = v.RevisionDetailV1ClusterConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1ClusterConfiguration.RevisionMetadata
	return &retval, nil
}

// clusterStatusTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type clusterStatusTeam struct {
	Id      uuid.UUID                `json:"id"`
	Cluster clusterStatusTeamCluster `json:"cluster"`
}

// GetId returns clusterStatusTeam.Id, and is useful for accessing the field via an interface.
func (v *clusterStatusTeam) GetId() uuid.UUID { return v.Id }

// GetCluster returns clusterStatusTeam.Cluster, and is useful for accessing the field via an interface.
func (v *clusterStatusTeam) GetCluster() clusterStatusTeamCluster { return v.Cluster }

// clusterStatusTeamCluster includes the requested fields of the GraphQL type Cluster.
type clusterStatusTeamCluster struct {
	Id     uuid.UUID     `json:"id"`
	Status ClusterStatus `json:"status"`
}

// GetId returns clusterStatusTeamCluster.Id, and is useful for accessing the field via an interface.
func (v *clusterStatusTeamCluster) GetId() uuid.UUID { return v.Id }

// GetStatus returns clusterStatusTeamCluster.Status, and is useful for accessing the field via an interface.
func (v *clusterStatusTeamCluster) GetStatus() ClusterStatus { return v.Status }

// createBuildRunCreateBuildRun includes the requested fields of the GraphQL type BuildRun.
type createBuildRunCreateBuildRun struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns createBuildRunCreateBuildRun.Id, and is useful for accessing the field via an interface.
func (v *createBuildRunCreateBuildRun) GetId() uuid.UUID { return v.Id }

// createDeployRunCreateDeployRun includes the requested fields of the GraphQL type DeployRun.
type createDeployRunCreateDeployRun struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns createDeployRunCreateDeployRun.Id, and is useful for accessing the field via an interface.
func (v *createDeployRunCreateDeployRun) GetId() uuid.UUID { return v.Id }

// createProjectCreateProject includes the requested fields of the GraphQL type Project.
type createProjectCreateProject struct {
	Id       uuid.UUID                          `json:"id"`
	Name     string                             `json:"name"`
	Workflow createProjectCreateProjectWorkflow `json:"workflow"`
}

// GetId returns createProjectCreateProject.Id, and is useful for accessing the field via an interface.
func (v *createProjectCreateProject) GetId() uuid.UUID { return v.Id }

// GetName returns createProjectCreateProject.Name, and is useful for accessing the field via an interface.
func (v *createProjectCreateProject) GetName() string { return v.Name }

// GetWorkflow returns createProjectCreateProject.Workflow, and is useful for accessing the field via an interface.
func (v *createProjectCreateProject) GetWorkflow() createProjectCreateProjectWorkflow {
	return v.Workflow
}

// createProjectCreateProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type createProjectCreateProjectWorkflow struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns createProjectCreateProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *createProjectCreateProjectWorkflow) GetId() uuid.UUID { return v.Id }

// createUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken includes the requested fields of the GraphQL type PersonalAccessToken.
type createUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken struct {
	Id        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Token     string    `json:"token"`
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns createUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken.Id, and is useful for accessing the field via an interface.
func (v *createUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken) GetId() uuid.UUID {
	return v.Id
}

// GetName returns createUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken.Name, and is useful for accessing the field via an interface.
func (v *createUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken) GetName() string {
	return v.Name
}

// GetToken returns createUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken.Token, and is useful for accessing the field via an interface.
func (v *createUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken) GetToken() string {
	return v.Token
}

// GetCreatedAt returns createUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken.CreatedAt, and is useful for accessing the field via an interface.
func (v *createUserPersonalAccessTokenCreatePersonalAccessTokenForUserPersonalAccessToken) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// createWorkflowTriggerCreateTrigger includes the requested fields of the GraphQL type Trigger.
type createWorkflowTriggerCreateTrigger struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns createWorkflowTriggerCreateTrigger.Id, and is useful for accessing the field via an interface.
func (v *createWorkflowTriggerCreateTrigger) GetId() uuid.UUID { return v.Id }

// currentUserCurrentUser includes the requested fields of the GraphQL type User.
type currentUserCurrentUser struct {
	Id    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Login string    `json:"login"`
}

// GetId returns currentUserCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetId() uuid.UUID { return v.Id }

// GetName returns currentUserCurrentUser.Name, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetName() string { return v.Name }

// GetLogin returns currentUserCurrentUser.Login, and is useful for accessing the field via an interface.
func (v *currentUserCurrentUser) GetLogin() string { return v.Login }

// duplicateProjectDuplicateProject includes the requested fields of the GraphQL type Project.
type duplicateProjectDuplicateProject struct {
	Id       uuid.UUID                                `json:"id"`
	Name     string                                   `json:"name"`
	Group    duplicateProjectDuplicateProjectGroup    `json:"group"`
	SubGroup duplicateProjectDuplicateProjectSubGroup `json:"subGroup"`
}

// GetId returns duplicateProjectDuplicateProject.Id, and is useful for accessing the field via an interface.
func (v *duplicateProjectDuplicateProject) GetId() uuid.UUID { return v.Id }

// GetName returns duplicateProjectDuplicateProject.Name, and is useful for accessing the field via an interface.
func (v *duplicateProjectDuplicateProject) GetName() string { return v.Name }

// GetGroup returns duplicateProjectDuplicateProject.Group, and is useful for accessing the field via an interface.
func (v *duplicateProjectDuplicateProject) GetGroup() duplicateProjectDuplicateProjectGroup {
	return v.Group
}

// GetSubGroup returns duplicateProjectDuplicateProject.SubGroup, and is useful for accessing the field via an interface.
func (v *duplicateProjectDuplicateProject) GetSubGroup() duplicateProjectDuplicateProjectSubGroup {
	return v.SubGroup
}

// duplicateProjectDuplicateProjectGroup includes the requested fields of the GraphQL type Group.
type duplicateProjectDuplicateProjectGroup struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns duplicateProjectDuplicateProjectGroup.Id, and is useful for accessing the field via an interface.
func (v *duplicateProjectDuplicateProjectGroup) GetId() uuid.UUID { return v.Id }

// GetName returns duplicateProjectDuplicateProjectGroup.Name, and is useful for accessing the field via an interface.
func (v *duplicateProjectDuplicateProjectGroup) GetName() string { return v.Name }

// duplicateProjectDuplicateProjectSubGroup includes the requested fields of the GraphQL type SubGroup.
type duplicateProjectDuplicateProjectSubGroup struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns duplicateProjectDuplicateProjectSubGroup.Id, and is useful for accessing the field via an interface.
func (v *duplicateProjectDuplicateProjectSubGroup) GetId() uuid.UUID { return v.Id }

// GetName returns duplicateProjectDuplicateProjectSubGroup.Name, and is useful for accessing the field via an interface.
func (v *duplicateProjectDuplicateProjectSubGroup) GetName() string { return v.Name }

// ejectClusterComponentEjectClusterComponent includes the requested fields of the GraphQL type ClusterComponent.
type ejectClusterComponentEjectClusterComponent struct {
	Name   string                        `json:"name"`
	Status ClusterComponentEjectedStatus `json:"status"`
}

// GetName returns ejectClusterComponentEjectClusterComponent.Name, and is useful for accessing the field via an interface.
func (v *ejectClusterComponentEjectClusterComponent) GetName() string { return v.Name }

// GetStatus returns ejectClusterComponentEjectClusterComponent.Status, and is useful for accessing the field via an interface.
func (v *ejectClusterComponentEjectClusterComponent) GetStatus() ClusterComponentEjectedStatus {
	return v.Status
}

// groupsWithSubgroupsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type groupsWithSubgroupsTeam struct {
	Id     uuid.UUID                                    `json:"id"`
	Groups groupsWithSubgroupsTeamGroupsGroupConnection `json:"groups"`
}

// GetId returns groupsWithSubgroupsTeam.Id, and is useful for accessing the field via an interface.
func (v *groupsWithSubgroupsTeam) GetId() uuid.UUID { return v.Id }

// GetGroups returns groupsWithSubgroupsTeam.Groups, and is useful for accessing the field via an interface.
func (v *groupsWithSubgroupsTeam) GetGroups() groupsWithSubgroupsTeamGroupsGroupConnection {
	return v.Groups
}

// groupsWithSubgroupsTeamGroupsGroupConnection includes the requested fields of the GraphQL type GroupConnection.
type groupsWithSubgroupsTeamGroupsGroupConnection struct {
	Nodes []groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup `json:"nodes"`
}

// GetNodes returns groupsWithSubgroupsTeamGroupsGroupConnection.Nodes, and is useful for accessing the field via an interface.
func (v *groupsWithSubgroupsTeamGroupsGroupConnection) GetNodes() []groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup {
	return v.Nodes
}

// groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup includes the requested fields of the GraphQL type Group.
type groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup struct {
	Id        uuid.UUID                                                                 `json:"id"`
	Name      string                                                                    `json:"name"`
	SubGroups []groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup `json:"subGroups"`
}

// GetId returns groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup.Id, and is useful for accessing the field via an interface.
func (v *groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup) GetId() uuid.UUID { return v.Id }

// GetName returns groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup.Name, and is useful for accessing the field via an interface.
func (v *groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup) GetName() string { return v.Name }

// GetSubGroups returns groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup.SubGroups, and is useful for accessing the field via an interface.
func (v *groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroup) GetSubGroups() []groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup {
	return v.SubGroups
}

// groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup includes the requested fields of the GraphQL type SubGroup.
type groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup.Id, and is useful for accessing the field via an interface.
func (v *groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup) GetId() uuid.UUID {
	return v.Id
}

// GetName returns groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup.Name, and is useful for accessing the field via an interface.
func (v *groupsWithSubgroupsTeamGroupsGroupConnectionNodesGroupSubGroupsSubGroup) GetName() string {
	return v.Name
}

// jobListTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type jobListTeam struct {
	Id      uuid.UUID          `json:"id"`
	Project jobListTeamProject `json:"project"`
}

// GetId returns jobListTeam.Id, and is useful for accessing the field via an interface.
func (v *jobListTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns jobListTeam.Project, and is useful for accessing the field via an interface.
func (v *jobListTeam) GetProject() jobListTeamProject { return v.Project }

// jobListTeamProject includes the requested fields of the GraphQL type Project.
type jobListTeamProject struct {
	Jobs []jobListTeamProjectJobsJob `json:"jobs"`
}

// GetJobs returns jobListTeamProject.Jobs, and is useful for accessing the field via an interface.
func (v *jobListTeamProject) GetJobs() []jobListTeamProjectJobsJob { return v.Jobs }

// jobListTeamProjectJobsJob includes the requested fields of the GraphQL type Job.
type jobListTeamProjectJobsJob struct {
	JobListItem `json:"-"`
}

// GetId returns jobListTeamProjectJobsJob.Id, and is useful for accessing the field via an interface.
func (v *jobListTeamProjectJobsJob) GetId() uuid.UUID { return v.JobListItem.Id }

// GetDefinition returns jobListTeamProjectJobsJob.Definition, and is useful for accessing the field via an interface.
func (v *jobListTeamProjectJobsJob) GetDefinition() JobListItemDefinitionJobDefinition {
	return v.JobListItem.Definition
}

// GetRuns returns jobListTeamProjectJobsJob.Runs, and is useful for accessing the field via an interface.
func (v *jobListTeamProjectJobsJob) GetRuns() JobListItemRunsJobRunConnection {
	return v.JobListItem.Runs
}

func (v *jobListTeamProjectJobsJob) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*jobListTeamProjectJobsJob
		graphql.NoUnmarshalJSON
	}
	firstPass.jobListTeamProjectJobsJob = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaljobListTeamProjectJobsJob struct {
	Id uuid.UUID `json:"id"`

	Definition JobListItemDefinitionJobDefinition `json:"definition"`

	Runs JobListItemRunsJobRunConnection `json:"runs"`
}

func (v *jobListTeamProjectJobsJob) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *jobListTeamProjectJobsJob) __premarshalJSON() (*__premarshaljobListTeamProjectJobsJob, error) {
	var retval __premarshaljobListTeamProjectJobsJob

	retval.Id = v.JobListItem.Id
	retval.Definition = v.JobListItem.Definition
	retval.Runs = v.JobListItem.Runs
	return &retval, nil
}

// jobRunDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type jobRunDetailTeam struct {
	Id     uuid.UUID              `json:"id"`
	JobRun jobRunDetailTeamJobRun `json:"jobRun"`
}

// GetId returns jobRunDetailTeam.Id, and is useful for accessing the field via an interface.
func (v *jobRunDetailTeam) GetId() uuid.UUID { return v.Id }

// GetJobRun returns jobRunDetailTeam.JobRun, and is useful for accessing the field via an interface.
func (v *jobRunDetailTeam) GetJobRun() jobRunDetailTeamJobRun { return v.JobRun }

// jobRunDetailTeamJobRun includes the requested fields of the GraphQL type JobRun.
type jobRunDetailTeamJobRun struct {
	JobRunDetail `json:"-"`
}

// GetUpdatedAt returns jobRunDetailTeamJobRun.UpdatedAt, and is useful for accessing the field via an interface.
func (v *jobRunDetailTeamJobRun) GetUpdatedAt() time.Time { return v.JobRunDetail.UpdatedAt }

// GetCommand returns jobRunDetailTeamJobRun.Command, and is useful for accessing the field via an interface.
func (v *jobRunDetailTeamJobRun) GetCommand() string { return v.JobRunDetail.Command }

// GetExitCode returns jobRunDetailTeamJobRun.ExitCode, and is useful for accessing the field via an interface.
func (v *jobRunDetailTeamJobRun) GetExitCode() int { return v.JobRunDetail.ExitCode }

// GetErrorMessage returns jobRunDetailTeamJobRun.ErrorMessage, and is useful for accessing the field via an interface.
func (v *jobRunDetailTeamJobRun) GetErrorMessage() string { return v.JobRunDetail.ErrorMessage }

// GetDefinition returns jobRunDetailTeamJobRun.Definition, and is useful for accessing the field via an interface.
func (v *jobRunDetailTeamJobRun) GetDefinition() JobRunDetailDefinitionJobDefinition {
	return v.JobRunDetail.Definition
}

// GetId returns jobRunDetailTeamJobRun.Id, and is useful for accessing the field via an interface.
func (v *jobRunDetailTeamJobRun) GetId() uuid.UUID { return v.JobRunDetail.JobRunListItem.Id }

// GetSequence returns jobRunDetailTeamJobRun.Sequence, and is useful for accessing the field via an interface.
func (v *jobRunDetailTeamJobRun) GetSequence() int { return v.JobRunDetail.JobRunListItem.Sequence }

// GetCreatedAt returns jobRunDetailTeamJobRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *jobRunDetailTeamJobRun) GetCreatedAt() time.Time {
	return v.JobRunDetail.JobRunListItem.CreatedAt
}

// GetState returns jobRunDetailTeamJobRun.State, and is useful for accessing the field via an interface.
func (v *jobRunDetailTeamJobRun) GetState() JobRunState { return v.JobRunDetail.JobRunListItem.State }

func (v *jobRunDetailTeamJobRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*jobRunDetailTeamJobRun
		graphql.NoUnmarshalJSON
	}
	firstPass.jobRunDetailTeamJobRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobRunDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaljobRunDetailTeamJobRun struct {
	UpdatedAt time.Time `json:"updatedAt"`

	Command string `json:"command"`

	ExitCode int `json:"exitCode"`

	ErrorMessage string `json:"errorMessage"`

	Definition JobRunDetailDefinitionJobDefinition `json:"definition"`

	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	CreatedAt time.Time `json:"createdAt"`

	State JobRunState `json:"state"`
}

func (v *jobRunDetailTeamJobRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *jobRunDetailTeamJobRun) __premarshalJSON() (*__premarshaljobRunDetailTeamJobRun, error) {
	var retval __premarshaljobRunDetailTeamJobRun

	retval.UpdatedAt = v.JobRunDetail.UpdatedAt
	retval.Command = v.JobRunDetail.Command
	retval.ExitCode = v.JobRunDetail.ExitCode
	retval.ErrorMessage = v.JobRunDetail.ErrorMessage
	retval.Definition = v.JobRunDetail.Definition
	retval.Id = v.JobRunDetail.JobRunListItem.Id
	retval.Sequence = v.JobRunDetail.JobRunListItem.Sequence
	retval.CreatedAt = v.JobRunDetail.JobRunListItem.CreatedAt
	retval.State = v.JobRunDetail.JobRunListItem.State
	return &retval, nil
}

// jobRunListTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type jobRunListTeam struct {
	Id  uuid.UUID         `json:"id"`
	Job jobRunListTeamJob `json:"job"`
}

// GetId returns jobRunListTeam.Id, and is useful for accessing the field via an interface.
func (v *jobRunListTeam) GetId() uuid.UUID { return v.Id }

// GetJob returns jobRunListTeam.Job, and is useful for accessing the field via an interface.
func (v *jobRunListTeam) GetJob() jobRunListTeamJob { return v.Job }

// jobRunListTeamJob includes the requested fields of the GraphQL type Job.
type jobRunListTeamJob struct {
	JobDetailItem `json:"-"`
}

// GetId returns jobRunListTeamJob.Id, and is useful for accessing the field via an interface.
func (v *jobRunListTeamJob) GetId() uuid.UUID { return v.JobDetailItem.Id }

// GetDefinition returns jobRunListTeamJob.Definition, and is useful for accessing the field via an interface.
func (v *jobRunListTeamJob) GetDefinition() JobDetailItemDefinitionJobDefinition {
	return v.JobDetailItem.Definition
}

// GetRuns returns jobRunListTeamJob.Runs, and is useful for accessing the field via an interface.
func (v *jobRunListTeamJob) GetRuns() JobDetailItemRunsJobRunConnection { return v.JobDetailItem.Runs }

func (v *jobRunListTeamJob) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*jobRunListTeamJob
		graphql.NoUnmarshalJSON
	}
	firstPass.jobRunListTeamJob = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobDetailItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaljobRunListTeamJob struct {
	Id uuid.UUID `json:"id"`

	Definition JobDetailItemDefinitionJobDefinition `json:"definition"`

	Runs JobDetailItemRunsJobRunConnection `json:"runs"`
}

func (v *jobRunListTeamJob) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *jobRunListTeamJob) __premarshalJSON() (*__premarshaljobRunListTeamJob, error) {
	var retval __premarshaljobRunListTeamJob

	retval.Id = v.JobDetailItem.Id
	retval.Definition = v.JobDetailItem.Definition
	retval.Runs = v.JobDetailItem.Runs
	return &retval, nil
}

// jobRunLogsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type jobRunLogsTeam struct {
	Id     uuid.UUID            `json:"id"`
	JobRun jobRunLogsTeamJobRun `json:"jobRun"`
}

// GetId returns jobRunLogsTeam.Id, and is useful for accessing the field via an interface.
func (v *jobRunLogsTeam) GetId() uuid.UUID { return v.Id }

// GetJobRun returns jobRunLogsTeam.JobRun, and is useful for accessing the field via an interface.
func (v *jobRunLogsTeam) GetJobRun() jobRunLogsTeamJobRun { return v.JobRun }

// jobRunLogsTeamJobRun includes the requested fields of the GraphQL type JobRun.
type jobRunLogsTeamJobRun struct {
	JobRunLogs `json:"-"`
}

// GetId returns jobRunLogsTeamJobRun.Id, and is useful for accessing the field via an interface.
func (v *jobRunLogsTeamJobRun) GetId() uuid.UUID { return v.JobRunLogs.Id }

// GetLogs returns jobRunLogsTeamJobRun.Logs, and is useful for accessing the field via an interface.
func (v *jobRunLogsTeamJobRun) GetLogs() JobRunLogsLogs { return v.JobRunLogs.Logs }

func (v *jobRunLogsTeamJobRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*jobRunLogsTeamJobRun
		graphql.NoUnmarshalJSON
	}
	firstPass.jobRunLogsTeamJobRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobRunLogs)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaljobRunLogsTeamJobRun struct {
	Id uuid.UUID `json:"id"`

	Logs JobRunLogsLogs `json:"logs"`
}

func (v *jobRunLogsTeamJobRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *jobRunLogsTeamJobRun) __premarshalJSON() (*__premarshaljobRunLogsTeamJobRun, error) {
	var retval __premarshaljobRunLogsTeamJobRun

	retval.Id = v.JobRunLogs.Id
	retval.Logs = v.JobRunLogs.Logs
	return &retval, nil
}

// linkProjectLinkProjectProjectLink includes the requested fields of the GraphQL type ProjectLink.
type linkProjectLinkProjectProjectLink struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns linkProjectLinkProjectProjectLink.Id, and is useful for accessing the field via an interface.
func (v *linkProjectLinkProjectProjectLink) GetId() uuid.UUID { return v.Id }

// observabilityConfigTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type observabilityConfigTeam struct {
	Id      uuid.UUID                      `json:"id"`
	Project observabilityConfigTeamProject `json:"project"`
}

// GetId returns observabilityConfigTeam.Id, and is useful for accessing the field via an interface.
func (v *observabilityConfigTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns observabilityConfigTeam.Project, and is useful for accessing the field via an interface.
func (v *observabilityConfigTeam) GetProject() observabilityConfigTeamProject { return v.Project }

// observabilityConfigTeamProject includes the requested fields of the GraphQL type Project.
type observabilityConfigTeamProject struct {
	Id                  uuid.UUID                                         `json:"id"`
	ObservabilityConfig observabilityConfigTeamProjectObservabilityConfig `json:"observabilityConfig"`
}

// GetId returns observabilityConfigTeamProject.Id, and is useful for accessing the field via an interface.
func (v *observabilityConfigTeamProject) GetId() uuid.UUID { return v.Id }

// GetObservabilityConfig returns observabilityConfigTeamProject.ObservabilityConfig, and is useful for accessing the field via an interface.
func (v *observabilityConfigTeamProject) GetObservabilityConfig() observabilityConfigTeamProjectObservabilityConfig {
	return v.ObservabilityConfig
}

// observabilityConfigTeamProjectObservabilityConfig includes the requested fields of the GraphQL type ObservabilityConfig.
type observabilityConfigTeamProjectObservabilityConfig struct {
	Selector observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector `json:"selector"`
}

// GetSelector returns observabilityConfigTeamProjectObservabilityConfig.Selector, and is useful for accessing the field via an interface.
func (v *observabilityConfigTeamProjectObservabilityConfig) GetSelector() observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector {
	return v.Selector
}

// observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector includes the requested fields of the GraphQL type ObservabilityResourceSelector.
type observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector struct {
	Namespace     string                                                                                                                           `json:"namespace"`
	ResourceName  string                                                                                                                           `json:"resourceName"`
	ContainerName string                                                                                                                           `json:"containerName"`
	Labels        []observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel `json:"labels"`
}

// GetNamespace returns observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector.Namespace, and is useful for accessing the field via an interface.
func (v *observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector) GetNamespace() string {
	return v.Namespace
}

// GetResourceName returns observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector.ResourceName, and is useful for accessing the field via an interface.
func (v *observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector) GetResourceName() string {
	return v.ResourceName
}

// GetContainerName returns observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector.ContainerName, and is useful for accessing the field via an interface.
func (v *observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector) GetContainerName() string {
	return v.ContainerName
}

// GetLabels returns observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector.Labels, and is useful for accessing the field via an interface.
func (v *observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelector) GetLabels() []observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel {
	return v.Labels
}

// observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel includes the requested fields of the GraphQL type ObservabilityResourceSelectorLabel.
type observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel.Name, and is useful for accessing the field via an interface.
func (v *observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel) GetName() string {
	return v.Name
}

// GetValue returns observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel.Value, and is useful for accessing the field via an interface.
func (v *observabilityConfigTeamProjectObservabilityConfigSelectorObservabilityResourceSelectorLabelsObservabilityResourceSelectorLabel) GetValue() string {
	return v.Value
}

// projectAvailableProvidersTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectAvailableProvidersTeam struct {
	Id      uuid.UUID                            `json:"id"`
	Project projectAvailableProvidersTeamProject `json:"project"`
}

// GetId returns projectAvailableProvidersTeam.Id, and is useful for accessing the field via an interface.
func (v *projectAvailableProvidersTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns projectAvailableProvidersTeam.Project, and is useful for accessing the field via an interface.
func (v *projectAvailableProvidersTeam) GetProject() projectAvailableProvidersTeamProject {
	return v.Project
}

// projectAvailableProvidersTeamProject includes the requested fields of the GraphQL type Project.
type projectAvailableProvidersTeamProject struct {
	Id                 uuid.UUID                                                       `json:"id"`
	AvailableProviders []projectAvailableProvidersTeamProjectAvailableProvidersProject `json:"availableProviders"`
}

// GetId returns projectAvailableProvidersTeamProject.Id, and is useful for accessing the field via an interface.
func (v *projectAvailableProvidersTeamProject) GetId() uuid.UUID { return v.Id }

// GetAvailableProviders returns projectAvailableProvidersTeamProject.AvailableProviders, and is useful for accessing the field via an interface.
func (v *projectAvailableProvidersTeamProject) GetAvailableProviders() []projectAvailableProvidersTeamProjectAvailableProvidersProject {
	return v.AvailableProviders
}

// projectAvailableProvidersTeamProjectAvailableProvidersProject includes the requested fields of the GraphQL type Project.
type projectAvailableProvidersTeamProjectAvailableProvidersProject struct {
	ProjectWithName `json:"-"`
}

// GetId returns projectAvailableProvidersTeamProjectAvailableProvidersProject.Id, and is useful for accessing the field via an interface.
func (v *projectAvailableProvidersTeamProjectAvailableProvidersProject) GetId() uuid.UUID {
	return v.ProjectWithName.Id
}

// GetName returns projectAvailableProvidersTeamProjectAvailableProvidersProject.Name, and is useful for accessing the field via an interface.
func (v *projectAvailableProvidersTeamProjectAvailableProvidersProject) GetName() string {
	return v.ProjectWithName.Name
}

func (v *projectAvailableProvidersTeamProjectAvailableProvidersProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectAvailableProvidersTeamProjectAvailableProvidersProject
		graphql.NoUnmarshalJSON
	}
	firstPass.projectAvailableProvidersTeamProjectAvailableProvidersProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithName)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectAvailableProvidersTeamProjectAvailableProvidersProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`
}

func (v *projectAvailableProvidersTeamProjectAvailableProvidersProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectAvailableProvidersTeamProjectAvailableProvidersProject) __premarshalJSON() (*__premarshalprojectAvailableProvidersTeamProjectAvailableProvidersProject, error) {
	var retval __premarshalprojectAvailableProvidersTeamProjectAvailableProvidersProject

	retval.Id = v.ProjectWithName.Id
	retval.Name = v.ProjectWithName.Name
	return &retval, nil
}

// projectClustersTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectClustersTeam struct {
	Id      uuid.UUID                  `json:"id"`
	Project projectClustersTeamProject `json:"project"`
}

// GetId returns projectClustersTeam.Id, and is useful for accessing the field via an interface.
func (v *projectClustersTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns projectClustersTeam.Project, and is useful for accessing the field via an interface.
func (v *projectClustersTeam) GetProject() projectClustersTeamProject { return v.Project }

// projectClustersTeamProject includes the requested fields of the GraphQL type Project.
type projectClustersTeamProject struct {
	ProjectWithClusters `json:"-"`
}

// GetId returns projectClustersTeamProject.Id, and is useful for accessing the field via an interface.
func (v *projectClustersTeamProject) GetId() uuid.UUID { return v.ProjectWithClusters.Id }

// GetClusters returns projectClustersTeamProject.Clusters, and is useful for accessing the field via an interface.
func (v *projectClustersTeamProject) GetClusters() []ProjectWithClustersClustersCluster {
	return v.ProjectWithClusters.Clusters
}

func (v *projectClustersTeamProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectClustersTeamProject
		graphql.NoUnmarshalJSON
	}
	firstPass.projectClustersTeamProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithClusters)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectClustersTeamProject struct {
	Id uuid.UUID `json:"id"`

	Clusters []ProjectWithClustersClustersCluster `json:"clusters"`
}

func (v *projectClustersTeamProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectClustersTeamProject) __premarshalJSON() (*__premarshalprojectClustersTeamProject, error) {
	var retval __premarshalprojectClustersTeamProject

	retval.Id = v.ProjectWithClusters.Id
	retval.Clusters = v.ProjectWithClusters.Clusters
	return &retval, nil
}

// projectDeployDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectDeployDetailTeam struct {
	Id     uuid.UUID                     `json:"id"`
	Deploy projectDeployDetailTeamDeploy `json:"deploy"`
}

// GetId returns projectDeployDetailTeam.Id, and is useful for accessing the field via an interface.
func (v *projectDeployDetailTeam) GetId() uuid.UUID { return v.Id }

// GetDeploy returns projectDeployDetailTeam.Deploy, and is useful for accessing the field via an interface.
func (v *projectDeployDetailTeam) GetDeploy() projectDeployDetailTeamDeploy { return v.Deploy }

// projectDeployDetailTeamDeploy includes the requested fields of the GraphQL type Deploy.
type projectDeployDetailTeamDeploy struct {
	ProjectDeployDetail `json:"-"`
}

// GetId returns projectDeployDetailTeamDeploy.Id, and is useful for accessing the field via an interface.
func (v *projectDeployDetailTeamDeploy) GetId() uuid.UUID { return v.ProjectDeployDetail.Id }

// GetName returns projectDeployDetailTeamDeploy.Name, and is useful for accessing the field via an interface.
func (v *projectDeployDetailTeamDeploy) GetName() string { return v.ProjectDeployDetail.Name }

// GetRuns returns projectDeployDetailTeamDeploy.Runs, and is useful for accessing the field via an interface.
func (v *projectDeployDetailTeamDeploy) GetRuns() ProjectDeployDetailRunsDeployRunConnection {
	return v.ProjectDeployDetail.Runs
}

func (v *projectDeployDetailTeamDeploy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectDeployDetailTeamDeploy
		graphql.NoUnmarshalJSON
	}
	firstPass.projectDeployDetailTeamDeploy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectDeployDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectDeployDetailTeamDeploy struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Runs ProjectDeployDetailRunsDeployRunConnection `json:"runs"`
}

func (v *projectDeployDetailTeamDeploy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectDeployDetailTeamDeploy) __premarshalJSON() (*__premarshalprojectDeployDetailTeamDeploy, error) {
	var retval __premarshalprojectDeployDetailTeamDeploy

	retval.Id = v.ProjectDeployDetail.Id
	retval.Name = v.ProjectDeployDetail.Name
	retval.Runs = v.ProjectDeployDetail.Runs
	return &retval, nil
}

// projectDeployRevisionsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectDeployRevisionsTeam struct {
	Id      uuid.UUID                         `json:"id"`
	Project projectDeployRevisionsTeamProject `json:"project"`
}

// GetId returns projectDeployRevisionsTeam.Id, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns projectDeployRevisionsTeam.Project, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeam) GetProject() projectDeployRevisionsTeamProject { return v.Project }

// projectDeployRevisionsTeamProject includes the requested fields of the GraphQL type Project.
type projectDeployRevisionsTeamProject struct {
	Id      uuid.UUID                                                `json:"id"`
	Deploys projectDeployRevisionsTeamProjectDeploysDeployConnection `json:"deploys"`
}

// GetId returns projectDeployRevisionsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeamProject) GetId() uuid.UUID { return v.Id }

// GetDeploys returns projectDeployRevisionsTeamProject.Deploys, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeamProject) GetDeploys() projectDeployRevisionsTeamProjectDeploysDeployConnection {
	return v.Deploys
}

// projectDeployRevisionsTeamProjectDeploysDeployConnection includes the requested fields of the GraphQL type DeployConnection.
type projectDeployRevisionsTeamProjectDeploysDeployConnection struct {
	Nodes []projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy `json:"nodes"`
}

// GetNodes returns projectDeployRevisionsTeamProjectDeploysDeployConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeamProjectDeploysDeployConnection) GetNodes() []projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy {
	return v.Nodes
}

// projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy includes the requested fields of the GraphQL type Deploy.
type projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
	// Only the revisionMetadata and revisionData will be available.
	ConfigurationRevisions projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection `json:"configurationRevisions"`
}

// GetId returns projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy.Id, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy) GetId() uuid.UUID {
	return v.Id
}

// GetName returns projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy.Name, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy) GetName() string {
	return v.Name
}

// GetConfigurationRevisions returns projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy.ConfigurationRevisions, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeploy) GetConfigurationRevisions() projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection {
	return v.ConfigurationRevisions
}

// projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection includes the requested fields of the GraphQL type DeploymentConfigurationConnection.
type projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection struct {
	TotalCount int                                                                                                                                                      `json:"totalCount"`
	PageInfo   projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionPageInfo                       `json:"pageInfo"`
	Nodes      []projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration `json:"nodes"`
}

// GetTotalCount returns projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetPageInfo returns projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection) GetPageInfo() projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnection) GetNodes() []projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration {
	return v.Nodes
}

// projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration includes the requested fields of the GraphQL type DeploymentConfiguration.
type projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration struct {
	RevisionDetailV1DeploymentConfiguration `json:"-"`
}

// GetRevisionData returns projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration.RevisionData, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration) GetRevisionData() string {
	return v.RevisionDetailV1DeploymentConfiguration.RevisionData
}

// GetRevisionMetadata returns projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration.RevisionMetadata, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration) GetRevisionMetadata() RevisionDetailV1RevisionMetadata {
	return v.RevisionDetailV1DeploymentConfiguration.RevisionMetadata
}

func (v *projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RevisionDetailV1DeploymentConfiguration)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration struct {
	RevisionData string `json:"revisionData"`

	RevisionMetadata RevisionDetailV1RevisionMetadata `json:"revisionMetadata"`
}

func (v *projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration) __premarshalJSON() (*__premarshalprojectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration, error) {
	var retval __premarshalprojectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionNodesDeploymentConfiguration

	retval.RevisionData = v.RevisionDetailV1DeploymentConfiguration.RevisionData
	retval.RevisionMetadata = v.RevisionDetailV1DeploymentConfiguration.RevisionMetadata
	return &retval, nil
}

// projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *projectDeployRevisionsTeamProjectDeploysDeployConnectionNodesDeployConfigurationRevisionsDeploymentConfigurationConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// projectDeployRunDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectDeployRunDetailTeam struct {
	Id        uuid.UUID                           `json:"id"`
	DeployRun projectDeployRunDetailTeamDeployRun `json:"deployRun"`
}

// GetId returns projectDeployRunDetailTeam.Id, and is useful for accessing the field via an interface.
func (v *projectDeployRunDetailTeam) GetId() uuid.UUID { return v.Id }

// GetDeployRun returns projectDeployRunDetailTeam.DeployRun, and is useful for accessing the field via an interface.
func (v *projectDeployRunDetailTeam) GetDeployRun() projectDeployRunDetailTeamDeployRun {
	return v.DeployRun
}

// projectDeployRunDetailTeamDeployRun includes the requested fields of the GraphQL type DeployRun.
type projectDeployRunDetailTeamDeployRun struct {
	ProjectDeployRunDetail `json:"-"`
}

// GetId returns projectDeployRunDetailTeamDeployRun.Id, and is useful for accessing the field via an interface.
func (v *projectDeployRunDetailTeamDeployRun) GetId() uuid.UUID { return v.ProjectDeployRunDetail.Id }

// GetSequence returns projectDeployRunDetailTeamDeployRun.Sequence, and is useful for accessing the field via an interface.
func (v *projectDeployRunDetailTeamDeployRun) GetSequence() int {
	return v.ProjectDeployRunDetail.Sequence
}

// GetResult returns projectDeployRunDetailTeamDeployRun.Result, and is useful for accessing the field via an interface.
func (v *projectDeployRunDetailTeamDeployRun) GetResult() ProjectDeployRunDetailResultDeploymentResult {
	return v.ProjectDeployRunDetail.Result
}

func (v *projectDeployRunDetailTeamDeployRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectDeployRunDetailTeamDeployRun
		graphql.NoUnmarshalJSON
	}
	firstPass.projectDeployRunDetailTeamDeployRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectDeployRunDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectDeployRunDetailTeamDeployRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Result ProjectDeployRunDetailResultDeploymentResult `json:"result"`
}

func (v *projectDeployRunDetailTeamDeployRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectDeployRunDetailTeamDeployRun) __premarshalJSON() (*__premarshalprojectDeployRunDetailTeamDeployRun, error) {
	var retval __premarshalprojectDeployRunDetailTeamDeployRun

	retval.Id = v.ProjectDeployRunDetail.Id
	retval.Sequence = v.ProjectDeployRunDetail.Sequence
	retval.Result = v.ProjectDeployRunDetail.Result
	return &retval, nil
}

// projectDeploysTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectDeploysTeam struct {
	Id      uuid.UUID                 `json:"id"`
	Project projectDeploysTeamProject `json:"project"`
}

// GetId returns projectDeploysTeam.Id, and is useful for accessing the field via an interface.
func (v *projectDeploysTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns projectDeploysTeam.Project, and is useful for accessing the field via an interface.
func (v *projectDeploysTeam) GetProject() projectDeploysTeamProject { return v.Project }

// projectDeploysTeamProject includes the requested fields of the GraphQL type Project.
type projectDeploysTeamProject struct {
	Id      uuid.UUID                                        `json:"id"`
	Deploys projectDeploysTeamProjectDeploysDeployConnection `json:"deploys"`
}

// GetId returns projectDeploysTeamProject.Id, and is useful for accessing the field via an interface.
func (v *projectDeploysTeamProject) GetId() uuid.UUID { return v.Id }

// GetDeploys returns projectDeploysTeamProject.Deploys, and is useful for accessing the field via an interface.
func (v *projectDeploysTeamProject) GetDeploys() projectDeploysTeamProjectDeploysDeployConnection {
	return v.Deploys
}

// projectDeploysTeamProjectDeploysDeployConnection includes the requested fields of the GraphQL type DeployConnection.
type projectDeploysTeamProjectDeploysDeployConnection struct {
	Nodes []projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy `json:"nodes"`
}

// GetNodes returns projectDeploysTeamProjectDeploysDeployConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectDeploysTeamProjectDeploysDeployConnection) GetNodes() []projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy {
	return v.Nodes
}

// projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy includes the requested fields of the GraphQL type Deploy.
type projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy struct {
	ProjectDeployList `json:"-"`
}

// GetId returns projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy.Id, and is useful for accessing the field via an interface.
func (v *projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy) GetId() uuid.UUID {
	return v.ProjectDeployList.Id
}

// GetName returns projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy.Name, and is useful for accessing the field via an interface.
func (v *projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy) GetName() string {
	return v.ProjectDeployList.Name
}

// GetRuns returns projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy.Runs, and is useful for accessing the field via an interface.
func (v *projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy) GetRuns() ProjectDeployListRunsDeployRunConnection {
	return v.ProjectDeployList.Runs
}

func (v *projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy
		graphql.NoUnmarshalJSON
	}
	firstPass.projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectDeployList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectDeploysTeamProjectDeploysDeployConnectionNodesDeploy struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Runs ProjectDeployListRunsDeployRunConnection `json:"runs"`
}

func (v *projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectDeploysTeamProjectDeploysDeployConnectionNodesDeploy) __premarshalJSON() (*__premarshalprojectDeploysTeamProjectDeploysDeployConnectionNodesDeploy, error) {
	var retval __premarshalprojectDeploysTeamProjectDeploysDeployConnectionNodesDeploy

	retval.Id = v.ProjectDeployList.Id
	retval.Name = v.ProjectDeployList.Name
	retval.Runs = v.ProjectDeployList.Runs
	return &retval, nil
}

// projectDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectDetailTeam struct {
	Id      uuid.UUID                `json:"id"`
	Project projectDetailTeamProject `json:"project"`
}

// GetId returns projectDetailTeam.Id, and is useful for accessing the field via an interface.
func (v *projectDetailTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns projectDetailTeam.Project, and is useful for accessing the field via an interface.
func (v *projectDetailTeam) GetProject() projectDetailTeamProject { return v.Project }

// projectDetailTeamProject includes the requested fields of the GraphQL type Project.
type projectDetailTeamProject struct {
	ProjectDetail `json:"-"`
}

// GetDeploys returns projectDetailTeamProject.Deploys, and is useful for accessing the field via an interface.
func (v *projectDetailTeamProject) GetDeploys() ProjectDetailDeploysDeployConnection {
	return v.ProjectDetail.Deploys
}

// GetBuild returns projectDetailTeamProject.Build, and is useful for accessing the field via an interface.
func (v *projectDetailTeamProject) GetBuild() ProjectDetailBuild { return v.ProjectDetail.Build }

// GetBlueprint returns projectDetailTeamProject.Blueprint, and is useful for accessing the field via an interface.
func (v *projectDetailTeamProject) GetBlueprint() ProjectDetailBlueprint {
	return v.ProjectDetail.Blueprint
}

// GetGroup returns projectDetailTeamProject.Group, and is useful for accessing the field via an interface.
func (v *projectDetailTeamProject) GetGroup() ProjectDetailGroup { return v.ProjectDetail.Group }

// GetSubGroup returns projectDetailTeamProject.SubGroup, and is useful for accessing the field via an interface.
func (v *projectDetailTeamProject) GetSubGroup() ProjectDetailSubGroup {
	return v.ProjectDetail.SubGroup
}

// GetId returns projectDetailTeamProject.Id, and is useful for accessing the field via an interface.
func (v *projectDetailTeamProject) GetId() uuid.UUID { return v.ProjectDetail.ProjectInfo.Id }

// GetName returns projectDetailTeamProject.Name, and is useful for accessing the field via an interface.
func (v *projectDetailTeamProject) GetName() string { return v.ProjectDetail.ProjectInfo.Name }

// GetCreatedAt returns projectDetailTeamProject.CreatedAt, and is useful for accessing the field via an interface.
func (v *projectDetailTeamProject) GetCreatedAt() time.Time {
	return v.ProjectDetail.ProjectInfo.CreatedAt
}

// GetUpdatedAt returns projectDetailTeamProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *projectDetailTeamProject) GetUpdatedAt() time.Time {
	return v.ProjectDetail.ProjectInfo.UpdatedAt
}

// GetStatus returns projectDetailTeamProject.Status, and is useful for accessing the field via an interface.
func (v *projectDetailTeamProject) GetStatus() ProjectStatus {
	return v.ProjectDetail.ProjectInfo.Status
}

// GetWorkflow returns projectDetailTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *projectDetailTeamProject) GetWorkflow() ProjectInfoWorkflow {
	return v.ProjectDetail.ProjectInfo.Workflow
}

// GetJobs returns projectDetailTeamProject.Jobs, and is useful for accessing the field via an interface.
func (v *projectDetailTeamProject) GetJobs() []ProjectInfoJobsJob {
	return v.ProjectDetail.ProjectInfo.Jobs
}

func (v *projectDetailTeamProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectDetailTeamProject
		graphql.NoUnmarshalJSON
	}
	firstPass.projectDetailTeamProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectDetailTeamProject struct {
	Deploys ProjectDetailDeploysDeployConnection `json:"deploys"`

	Build ProjectDetailBuild `json:"build"`

	Blueprint ProjectDetailBlueprint `json:"blueprint"`

	Group ProjectDetailGroup `json:"group"`

	SubGroup ProjectDetailSubGroup `json:"subGroup"`

	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Status ProjectStatus `json:"status"`

	Workflow ProjectInfoWorkflow `json:"workflow"`

	Jobs []ProjectInfoJobsJob `json:"jobs"`
}

func (v *projectDetailTeamProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectDetailTeamProject) __premarshalJSON() (*__premarshalprojectDetailTeamProject, error) {
	var retval __premarshalprojectDetailTeamProject

	retval.Deploys = v.ProjectDetail.Deploys
	retval.Build = v.ProjectDetail.Build
	retval.Blueprint = v.ProjectDetail.Blueprint
	retval.Group = v.ProjectDetail.Group
	retval.SubGroup = v.ProjectDetail.SubGroup
	retval.Id = v.ProjectDetail.ProjectInfo.Id
	retval.Name = v.ProjectDetail.ProjectInfo.Name
	retval.CreatedAt = v.ProjectDetail.ProjectInfo.CreatedAt
	retval.UpdatedAt = v.ProjectDetail.ProjectInfo.UpdatedAt
	retval.Status = v.ProjectDetail.ProjectInfo.Status
	retval.Workflow = v.ProjectDetail.ProjectInfo.Workflow
	retval.Jobs = v.ProjectDetail.ProjectInfo.Jobs
	return &retval, nil
}

// projectInfoTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectInfoTeam struct {
	Id      uuid.UUID              `json:"id"`
	Project projectInfoTeamProject `json:"project"`
}

// GetId returns projectInfoTeam.Id, and is useful for accessing the field via an interface.
func (v *projectInfoTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns projectInfoTeam.Project, and is useful for accessing the field via an interface.
func (v *projectInfoTeam) GetProject() projectInfoTeamProject { return v.Project }

// projectInfoTeamProject includes the requested fields of the GraphQL type Project.
type projectInfoTeamProject struct {
	ProjectInfo `json:"-"`
}

// GetId returns projectInfoTeamProject.Id, and is useful for accessing the field via an interface.
func (v *projectInfoTeamProject) GetId() uuid.UUID { return v.ProjectInfo.Id }

// GetName returns projectInfoTeamProject.Name, and is useful for accessing the field via an interface.
func (v *projectInfoTeamProject) GetName() string { return v.ProjectInfo.Name }

// GetCreatedAt returns projectInfoTeamProject.CreatedAt, and is useful for accessing the field via an interface.
func (v *projectInfoTeamProject) GetCreatedAt() time.Time { return v.ProjectInfo.CreatedAt }

// GetUpdatedAt returns projectInfoTeamProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *projectInfoTeamProject) GetUpdatedAt() time.Time { return v.ProjectInfo.UpdatedAt }

// GetStatus returns projectInfoTeamProject.Status, and is useful for accessing the field via an interface.
func (v *projectInfoTeamProject) GetStatus() ProjectStatus { return v.ProjectInfo.Status }

// GetBuild returns projectInfoTeamProject.Build, and is useful for accessing the field via an interface.
func (v *projectInfoTeamProject) GetBuild() ProjectInfoBuild { return v.ProjectInfo.Build }

// GetDeploys returns projectInfoTeamProject.Deploys, and is useful for accessing the field via an interface.
func (v *projectInfoTeamProject) GetDeploys() ProjectInfoDeploysDeployConnection {
	return v.ProjectInfo.Deploys
}

// GetWorkflow returns projectInfoTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *projectInfoTeamProject) GetWorkflow() ProjectInfoWorkflow { return v.ProjectInfo.Workflow }

// GetJobs returns projectInfoTeamProject.Jobs, and is useful for accessing the field via an interface.
func (v *projectInfoTeamProject) GetJobs() []ProjectInfoJobsJob { return v.ProjectInfo.Jobs }

// GetBlueprint returns projectInfoTeamProject.Blueprint, and is useful for accessing the field via an interface.
func (v *projectInfoTeamProject) GetBlueprint() ProjectInfoBlueprint { return v.ProjectInfo.Blueprint }

func (v *projectInfoTeamProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectInfoTeamProject
		graphql.NoUnmarshalJSON
	}
	firstPass.projectInfoTeamProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectInfoTeamProject struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Status ProjectStatus `json:"status"`

	Build ProjectInfoBuild `json:"build"`

	Deploys ProjectInfoDeploysDeployConnection `json:"deploys"`

	Workflow ProjectInfoWorkflow `json:"workflow"`

	Jobs []ProjectInfoJobsJob `json:"jobs"`

	Blueprint ProjectInfoBlueprint `json:"blueprint"`
}

func (v *projectInfoTeamProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectInfoTeamProject) __premarshalJSON() (*__premarshalprojectInfoTeamProject, error) {
	var retval __premarshalprojectInfoTeamProject

	retval.Id = v.ProjectInfo.Id
	retval.Name = v.ProjectInfo.Name
	retval.CreatedAt = v.ProjectInfo.CreatedAt
	retval.UpdatedAt = v.ProjectInfo.UpdatedAt
	retval.Status = v.ProjectInfo.Status
	retval.Build = v.ProjectInfo.Build
	retval.Deploys = v.ProjectInfo.Deploys
	retval.Workflow = v.ProjectInfo.Workflow
	retval.Jobs = v.ProjectInfo.Jobs
	retval.Blueprint = v.ProjectInfo.Blueprint
	return &retval, nil
}

// projectLinkedProjectsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectLinkedProjectsTeam struct {
	Id      uuid.UUID                        `json:"id"`
	Project projectLinkedProjectsTeamProject `json:"project"`
}

// GetId returns projectLinkedProjectsTeam.Id, and is useful for accessing the field via an interface.
func (v *projectLinkedProjectsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns projectLinkedProjectsTeam.Project, and is useful for accessing the field via an interface.
func (v *projectLinkedProjectsTeam) GetProject() projectLinkedProjectsTeamProject { return v.Project }

// projectLinkedProjectsTeamProject includes the requested fields of the GraphQL type Project.
type projectLinkedProjectsTeamProject struct {
	Id             uuid.UUID                                                           `json:"id"`
	LinkedProjects projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnection `json:"linkedProjects"`
}

// GetId returns projectLinkedProjectsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *projectLinkedProjectsTeamProject) GetId() uuid.UUID { return v.Id }

// GetLinkedProjects returns projectLinkedProjectsTeamProject.LinkedProjects, and is useful for accessing the field via an interface.
func (v *projectLinkedProjectsTeamProject) GetLinkedProjects() projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnection {
	return v.LinkedProjects
}

// projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnection includes the requested fields of the GraphQL type ProjectLinkConnection.
type projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnection struct {
	Nodes []projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink `json:"nodes"`
}

// GetNodes returns projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnection) GetNodes() []projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink {
	return v.Nodes
}

// projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink includes the requested fields of the GraphQL type ProjectLink.
type projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink struct {
	ProjectLinkDetail `json:"-"`
}

// GetId returns projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink.Id, and is useful for accessing the field via an interface.
func (v *projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) GetId() uuid.UUID {
	return v.ProjectLinkDetail.Id
}

// GetProject returns projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink.Project, and is useful for accessing the field via an interface.
func (v *projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) GetProject() ProjectLinkDetailProject {
	return v.ProjectLinkDetail.Project
}

// GetProvider returns projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink.Provider, and is useful for accessing the field via an interface.
func (v *projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) GetProvider() ProjectLinkDetailProviderProject {
	return v.ProjectLinkDetail.Provider
}

// GetLinkType returns projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink.LinkType, and is useful for accessing the field via an interface.
func (v *projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) GetLinkType() ProjectLinkType {
	return v.ProjectLinkDetail.LinkType
}

// GetEnvPrefix returns projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink.EnvPrefix, and is useful for accessing the field via an interface.
func (v *projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) GetEnvPrefix() string {
	return v.ProjectLinkDetail.EnvPrefix
}

// GetEnvs returns projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink.Envs, and is useful for accessing the field via an interface.
func (v *projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) GetEnvs() []ProjectLinkDetailEnvsProjectLinkEnvVar {
	return v.ProjectLinkDetail.Envs
}

func (v *projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink
		graphql.NoUnmarshalJSON
	}
	firstPass.projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectLinkDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink struct {
	Id uuid.UUID `json:"id"`

	Project ProjectLinkDetailProject `json:"project"`

	Provider ProjectLinkDetailProviderProject `json:"provider"`

	LinkType ProjectLinkType `json:"linkType"`

	EnvPrefix string `json:"envPrefix"`

	Envs []ProjectLinkDetailEnvsProjectLinkEnvVar `json:"envs"`
}

func (v *projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink) __premarshalJSON() (*__premarshalprojectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink, error) {
	var retval __premarshalprojectLinkedProjectsTeamProjectLinkedProjectsProjectLinkConnectionNodesProjectLink

	retval.Id = v.ProjectLinkDetail.Id
	retval.Project = v.ProjectLinkDetail.Project
	retval.Provider = v.ProjectLinkDetail.Provider
	retval.LinkType = v.ProjectLinkDetail.LinkType
	retval.EnvPrefix = v.ProjectLinkDetail.EnvPrefix
	retval.Envs = v.ProjectLinkDetail.Envs
	return &retval, nil
}

// projectOutputsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectOutputsTeam struct {
	Id      uuid.UUID                 `json:"id"`
	Project projectOutputsTeamProject `json:"project"`
}

// GetId returns projectOutputsTeam.Id, and is useful for accessing the field via an interface.
func (v *projectOutputsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns projectOutputsTeam.Project, and is useful for accessing the field via an interface.
func (v *projectOutputsTeam) GetProject() projectOutputsTeamProject { return v.Project }

// projectOutputsTeamProject includes the requested fields of the GraphQL type Project.
type projectOutputsTeamProject struct {
	Id        uuid.UUID                          `json:"id"`
	Status    ProjectStatus                      `json:"status"`
	Connector projectOutputsTeamProjectConnector `json:"connector"`
	Workflow  projectOutputsTeamProjectWorkflow  `json:"workflow"`
}

// GetId returns projectOutputsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *projectOutputsTeamProject) GetId() uuid.UUID { return v.Id }

// GetStatus returns projectOutputsTeamProject.Status, and is useful for accessing the field via an interface.
func (v *projectOutputsTeamProject) GetStatus() ProjectStatus { return v.Status }

// GetConnector returns projectOutputsTeamProject.Connector, and is useful for accessing the field via an interface.
func (v *projectOutputsTeamProject) GetConnector() projectOutputsTeamProjectConnector {
	return v.Connector
}

// GetWorkflow returns projectOutputsTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *projectOutputsTeamProject) GetWorkflow() projectOutputsTeamProjectWorkflow {
	return v.Workflow
}

// projectOutputsTeamProjectConnector includes the requested fields of the GraphQL type ProjectConnector.
type projectOutputsTeamProjectConnector struct {
	Type   ProjectConnectorType                                            `json:"type"`
	Fields []projectOutputsTeamProjectConnectorFieldsProjectConnectorField `json:"fields"`
}

// GetType returns projectOutputsTeamProjectConnector.Type, and is useful for accessing the field via an interface.
func (v *projectOutputsTeamProjectConnector) GetType() ProjectConnectorType { return v.Type }

// GetFields returns projectOutputsTeamProjectConnector.Fields, and is useful for accessing the field via an interface.
func (v *projectOutputsTeamProjectConnector) GetFields() []projectOutputsTeamProjectConnectorFieldsProjectConnectorField {
	return v.Fields
}

// projectOutputsTeamProjectConnectorFieldsProjectConnectorField includes the requested fields of the GraphQL type ProjectConnectorField.
type projectOutputsTeamProjectConnectorFieldsProjectConnectorField struct {
	Type        VariableType `json:"type"`
	Name        string       `json:"name"`
	DisplayName string       `json:"displayName"`
	Value       string       `json:"value"`
}

// GetType returns projectOutputsTeamProjectConnectorFieldsProjectConnectorField.Type, and is useful for accessing the field via an interface.
func (v *projectOutputsTeamProjectConnectorFieldsProjectConnectorField) GetType() VariableType {
	return v.Type
}

// GetName returns projectOutputsTeamProjectConnectorFieldsProjectConnectorField.Name, and is useful for accessing the field via an interface.
func (v *projectOutputsTeamProjectConnectorFieldsProjectConnectorField) GetName() string {
	return v.Name
}

// GetDisplayName returns projectOutputsTeamProjectConnectorFieldsProjectConnectorField.DisplayName, and is useful for accessing the field via an interface.
func (v *projectOutputsTeamProjectConnectorFieldsProjectConnectorField) GetDisplayName() string {
	return v.DisplayName
}

// GetValue returns projectOutputsTeamProjectConnectorFieldsProjectConnectorField.Value, and is useful for accessing the field via an interface.
func (v *projectOutputsTeamProjectConnectorFieldsProjectConnectorField) GetValue() string {
	return v.Value
}

// projectOutputsTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type projectOutputsTeamProjectWorkflow struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns projectOutputsTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *projectOutputsTeamProjectWorkflow) GetId() uuid.UUID { return v.Id }

// projectStatusOnlyTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectStatusOnlyTeam struct {
	Id      uuid.UUID                    `json:"id"`
	Project projectStatusOnlyTeamProject `json:"project"`
}

// GetId returns projectStatusOnlyTeam.Id, and is useful for accessing the field via an interface.
func (v *projectStatusOnlyTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns projectStatusOnlyTeam.Project, and is useful for accessing the field via an interface.
func (v *projectStatusOnlyTeam) GetProject() projectStatusOnlyTeamProject { return v.Project }

// projectStatusOnlyTeamProject includes the requested fields of the GraphQL type Project.
type projectStatusOnlyTeamProject struct {
	Id     uuid.UUID     `json:"id"`
	Status ProjectStatus `json:"status"`
}

// GetId returns projectStatusOnlyTeamProject.Id, and is useful for accessing the field via an interface.
func (v *projectStatusOnlyTeamProject) GetId() uuid.UUID { return v.Id }

// GetStatus returns projectStatusOnlyTeamProject.Status, and is useful for accessing the field via an interface.
func (v *projectStatusOnlyTeamProject) GetStatus() ProjectStatus { return v.Status }

// projectsCountTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectsCountTeam struct {
	Id       uuid.UUID                                  `json:"id"`
	Projects projectsCountTeamProjectsProjectConnection `json:"projects"`
}

// GetId returns projectsCountTeam.Id, and is useful for accessing the field via an interface.
func (v *projectsCountTeam) GetId() uuid.UUID { return v.Id }

// GetProjects returns projectsCountTeam.Projects, and is useful for accessing the field via an interface.
func (v *projectsCountTeam) GetProjects() projectsCountTeamProjectsProjectConnection {
	return v.Projects
}

// projectsCountTeamProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type projectsCountTeamProjectsProjectConnection struct {
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns projectsCountTeamProjectsProjectConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *projectsCountTeamProjectsProjectConnection) GetTotalCount() int { return v.TotalCount }

// projectsWithBlueprintTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectsWithBlueprintTeam struct {
	Id       uuid.UUID                                          `json:"id"`
	Projects projectsWithBlueprintTeamProjectsProjectConnection `json:"projects"`
}

// GetId returns projectsWithBlueprintTeam.Id, and is useful for accessing the field via an interface.
func (v *projectsWithBlueprintTeam) GetId() uuid.UUID { return v.Id }

// GetProjects returns projectsWithBlueprintTeam.Projects, and is useful for accessing the field via an interface.
func (v *projectsWithBlueprintTeam) GetProjects() projectsWithBlueprintTeamProjectsProjectConnection {
	return v.Projects
}

// projectsWithBlueprintTeamProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type projectsWithBlueprintTeamProjectsProjectConnection struct {
	Nodes []projectsWithBlueprintTeamProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetNodes returns projectsWithBlueprintTeamProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectsWithBlueprintTeamProjectsProjectConnection) GetNodes() []projectsWithBlueprintTeamProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// projectsWithBlueprintTeamProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type projectsWithBlueprintTeamProjectsProjectConnectionNodesProject struct {
	ProjectWithBlueprint `json:"-"`
}

// GetId returns projectsWithBlueprintTeamProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *projectsWithBlueprintTeamProjectsProjectConnectionNodesProject) GetId() uuid.UUID {
	return v.ProjectWithBlueprint.Id
}

// GetBlueprint returns projectsWithBlueprintTeamProjectsProjectConnectionNodesProject.Blueprint, and is useful for accessing the field via an interface.
func (v *projectsWithBlueprintTeamProjectsProjectConnectionNodesProject) GetBlueprint() ProjectWithBlueprintBlueprint {
	return v.ProjectWithBlueprint.Blueprint
}

func (v *projectsWithBlueprintTeamProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectsWithBlueprintTeamProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.projectsWithBlueprintTeamProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithBlueprint)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectsWithBlueprintTeamProjectsProjectConnectionNodesProject struct {
	Id uuid.UUID `json:"id"`

	Blueprint ProjectWithBlueprintBlueprint `json:"blueprint"`
}

func (v *projectsWithBlueprintTeamProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectsWithBlueprintTeamProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalprojectsWithBlueprintTeamProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalprojectsWithBlueprintTeamProjectsProjectConnectionNodesProject

	retval.Id = v.ProjectWithBlueprint.Id
	retval.Blueprint = v.ProjectWithBlueprint.Blueprint
	return &retval, nil
}

// projectsWithDeploymentTimesTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectsWithDeploymentTimesTeam struct {
	Id       uuid.UUID                                                `json:"id"`
	Projects projectsWithDeploymentTimesTeamProjectsProjectConnection `json:"projects"`
}

// GetId returns projectsWithDeploymentTimesTeam.Id, and is useful for accessing the field via an interface.
func (v *projectsWithDeploymentTimesTeam) GetId() uuid.UUID { return v.Id }

// GetProjects returns projectsWithDeploymentTimesTeam.Projects, and is useful for accessing the field via an interface.
func (v *projectsWithDeploymentTimesTeam) GetProjects() projectsWithDeploymentTimesTeamProjectsProjectConnection {
	return v.Projects
}

// projectsWithDeploymentTimesTeamProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type projectsWithDeploymentTimesTeamProjectsProjectConnection struct {
	Nodes []projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetNodes returns projectsWithDeploymentTimesTeamProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectsWithDeploymentTimesTeamProjectsProjectConnection) GetNodes() []projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject struct {
	ProjectWithDeploymentTime `json:"-"`
}

// GetId returns projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject) GetId() uuid.UUID {
	return v.ProjectWithDeploymentTime.Id
}

// GetDeploymentTimestamps returns projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject.DeploymentTimestamps, and is useful for accessing the field via an interface.
func (v *projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject) GetDeploymentTimestamps() ProjectWithDeploymentTimeDeploymentTimestamps {
	return v.ProjectWithDeploymentTime.DeploymentTimestamps
}

// GetUpdatedAt returns projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject) GetUpdatedAt() time.Time {
	return v.ProjectWithDeploymentTime.UpdatedAt
}

func (v *projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithDeploymentTime)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject struct {
	Id uuid.UUID `json:"id"`

	DeploymentTimestamps ProjectWithDeploymentTimeDeploymentTimestamps `json:"deploymentTimestamps"`

	UpdatedAt time.Time `json:"updatedAt"`
}

func (v *projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalprojectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalprojectsWithDeploymentTimesTeamProjectsProjectConnectionNodesProject

	retval.Id = v.ProjectWithDeploymentTime.Id
	retval.DeploymentTimestamps = v.ProjectWithDeploymentTime.DeploymentTimestamps
	retval.UpdatedAt = v.ProjectWithDeploymentTime.UpdatedAt
	return &retval, nil
}

// projectsWithStatusTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type projectsWithStatusTeam struct {
	Id       uuid.UUID                                       `json:"id"`
	Projects projectsWithStatusTeamProjectsProjectConnection `json:"projects"`
}

// GetId returns projectsWithStatusTeam.Id, and is useful for accessing the field via an interface.
func (v *projectsWithStatusTeam) GetId() uuid.UUID { return v.Id }

// GetProjects returns projectsWithStatusTeam.Projects, and is useful for accessing the field via an interface.
func (v *projectsWithStatusTeam) GetProjects() projectsWithStatusTeamProjectsProjectConnection {
	return v.Projects
}

// projectsWithStatusTeamProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type projectsWithStatusTeamProjectsProjectConnection struct {
	Nodes []projectsWithStatusTeamProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetNodes returns projectsWithStatusTeamProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *projectsWithStatusTeamProjectsProjectConnection) GetNodes() []projectsWithStatusTeamProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// projectsWithStatusTeamProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type projectsWithStatusTeamProjectsProjectConnectionNodesProject struct {
	ProjectWithStatus `json:"-"`
}

// GetId returns projectsWithStatusTeamProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *projectsWithStatusTeamProjectsProjectConnectionNodesProject) GetId() uuid.UUID {
	return v.ProjectWithStatus.Id
}

// GetStatus returns projectsWithStatusTeamProjectsProjectConnectionNodesProject.Status, and is useful for accessing the field via an interface.
func (v *projectsWithStatusTeamProjectsProjectConnectionNodesProject) GetStatus() ProjectStatus {
	return v.ProjectWithStatus.Status
}

func (v *projectsWithStatusTeamProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*projectsWithStatusTeamProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.projectsWithStatusTeamProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectWithStatus)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalprojectsWithStatusTeamProjectsProjectConnectionNodesProject struct {
	Id uuid.UUID `json:"id"`

	Status ProjectStatus `json:"status"`
}

func (v *projectsWithStatusTeamProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *projectsWithStatusTeamProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalprojectsWithStatusTeamProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalprojectsWithStatusTeamProjectsProjectConnectionNodesProject

	retval.Id = v.ProjectWithStatus.Id
	retval.Status = v.ProjectWithStatus.Status
	return &retval, nil
}

// resourceLogsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type resourceLogsTeam struct {
	Id       uuid.UUID                `json:"id"`
	Resource resourceLogsTeamResource `json:"-"`
}

// GetId returns resourceLogsTeam.Id, and is useful for accessing the field via an interface.
func (v *resourceLogsTeam) GetId() uuid.UUID { return v.Id }

// GetResource returns resourceLogsTeam.Resource, and is useful for accessing the field via an interface.
func (v *resourceLogsTeam) GetResource() resourceLogsTeamResource { return v.Resource }

func (v *resourceLogsTeam) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*resourceLogsTeam
		Resource json.RawMessage `json:"resource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.resourceLogsTeam = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Resource
		src := firstPass.Resource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalresourceLogsTeamResource(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal resourceLogsTeam.Resource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalresourceLogsTeam struct {
	Id uuid.UUID `json:"id"`

	Resource json.RawMessage `json:"resource"`
}

func (v *resourceLogsTeam) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *resourceLogsTeam) __premarshalJSON() (*__premarshalresourceLogsTeam, error) {
	var retval __premarshalresourceLogsTeam

	retval.Id = v.Id
	{

		dst := &retval.Resource
		src := v.Resource
		var err error
		*dst, err = __marshalresourceLogsTeamResource(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal resourceLogsTeam.Resource: %w", err)
		}
	}
	return &retval, nil
}

// resourceLogsTeamResource includes the requested fields of the GraphQL interface Resource.
//
// resourceLogsTeamResource is implemented by the following types:
// resourceLogsTeamResourceCertificateResource
// resourceLogsTeamResourceContainerResource
// resourceLogsTeamResourceEndpointResource
type resourceLogsTeamResource interface {
	implementsGraphQLInterfaceresourceLogsTeamResource()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	ResourceLogs
}

func (v *resourceLogsTeamResourceCertificateResource) implementsGraphQLInterfaceresourceLogsTeamResource() {
}
func (v *resourceLogsTeamResourceContainerResource) implementsGraphQLInterfaceresourceLogsTeamResource() {
}
func (v *resourceLogsTeamResourceEndpointResource) implementsGraphQLInterfaceresourceLogsTeamResource() {
}

func __unmarshalresourceLogsTeamResource(b []byte, v *resourceLogsTeamResource) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CertificateResource":
		*v = new(resourceLogsTeamResourceCertificateResource)
		return json.Unmarshal(b, *v)
	case "ContainerResource":
		*v = new(resourceLogsTeamResourceContainerResource)
		return json.Unmarshal(b, *v)
	case "EndpointResource":
		*v = new(resourceLogsTeamResourceEndpointResource)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Resource.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for resourceLogsTeamResource: "%v"`, tn.TypeName)
	}
}

func __marshalresourceLogsTeamResource(v *resourceLogsTeamResource) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *resourceLogsTeamResourceCertificateResource:
		typename = "CertificateResource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalresourceLogsTeamResourceCertificateResource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *resourceLogsTeamResourceContainerResource:
		typename = "ContainerResource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalresourceLogsTeamResourceContainerResource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *resourceLogsTeamResourceEndpointResource:
		typename = "EndpointResource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalresourceLogsTeamResourceEndpointResource
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for resourceLogsTeamResource: "%T"`, v)
	}
}

// resourceLogsTeamResourceCertificateResource includes the requested fields of the GraphQL type CertificateResource.
type resourceLogsTeamResourceCertificateResource struct {
	Typename                        string `json:"__typename"`
	ResourceLogsCertificateResource `json:"-"`
}

// GetTypename returns resourceLogsTeamResourceCertificateResource.Typename, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceCertificateResource) GetTypename() string { return v.Typename }

// GetExternalId returns resourceLogsTeamResourceCertificateResource.ExternalId, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceCertificateResource) GetExternalId() string {
	return v.ResourceLogsCertificateResource.ExternalId
}

// GetExternalType returns resourceLogsTeamResourceCertificateResource.ExternalType, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceCertificateResource) GetExternalType() string {
	return v.ResourceLogsCertificateResource.ExternalType
}

// GetExternalLink returns resourceLogsTeamResourceCertificateResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceCertificateResource) GetExternalLink() string {
	return v.ResourceLogsCertificateResource.ExternalLink
}

// GetDisplayName returns resourceLogsTeamResourceCertificateResource.DisplayName, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceCertificateResource) GetDisplayName() string {
	return v.ResourceLogsCertificateResource.DisplayName
}

// GetStatus returns resourceLogsTeamResourceCertificateResource.Status, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceCertificateResource) GetStatus() string {
	return v.ResourceLogsCertificateResource.Status
}

func (v *resourceLogsTeamResourceCertificateResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*resourceLogsTeamResourceCertificateResource
		graphql.NoUnmarshalJSON
	}
	firstPass.resourceLogsTeamResourceCertificateResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ResourceLogsCertificateResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalresourceLogsTeamResourceCertificateResource struct {
	Typename string `json:"__typename"`

	ExternalId string `json:"externalId"`

	ExternalType string `json:"externalType"`

	ExternalLink string `json:"externalLink"`

	DisplayName string `json:"displayName"`

	Status string `json:"status"`
}

func (v *resourceLogsTeamResourceCertificateResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *resourceLogsTeamResourceCertificateResource) __premarshalJSON() (*__premarshalresourceLogsTeamResourceCertificateResource, error) {
	var retval __premarshalresourceLogsTeamResourceCertificateResource

	retval.Typename = v.Typename
	retval.ExternalId = v.ResourceLogsCertificateResource.ExternalId
	retval.ExternalType = v.ResourceLogsCertificateResource.ExternalType
	retval.ExternalLink = v.ResourceLogsCertificateResource.ExternalLink
	retval.DisplayName = v.ResourceLogsCertificateResource.DisplayName
	retval.Status = v.ResourceLogsCertificateResource.Status
	return &retval, nil
}

// resourceLogsTeamResourceContainerResource includes the requested fields of the GraphQL type ContainerResource.
type resourceLogsTeamResourceContainerResource struct {
	Typename                      string `json:"__typename"`
	ResourceLogsContainerResource `json:"-"`
}

// GetTypename returns resourceLogsTeamResourceContainerResource.Typename, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceContainerResource) GetTypename() string { return v.Typename }

// GetExternalId returns resourceLogsTeamResourceContainerResource.ExternalId, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceContainerResource) GetExternalId() string {
	return v.ResourceLogsContainerResource.ExternalId
}

// GetExternalType returns resourceLogsTeamResourceContainerResource.ExternalType, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceContainerResource) GetExternalType() string {
	return v.ResourceLogsContainerResource.ExternalType
}

// GetExternalLink returns resourceLogsTeamResourceContainerResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceContainerResource) GetExternalLink() string {
	return v.ResourceLogsContainerResource.ExternalLink
}

// GetDisplayName returns resourceLogsTeamResourceContainerResource.DisplayName, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceContainerResource) GetDisplayName() string {
	return v.ResourceLogsContainerResource.DisplayName
}

// GetStatus returns resourceLogsTeamResourceContainerResource.Status, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceContainerResource) GetStatus() string {
	return v.ResourceLogsContainerResource.Status
}

// GetLogs returns resourceLogsTeamResourceContainerResource.Logs, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceContainerResource) GetLogs() ResourceLogsLogs {
	return v.ResourceLogsContainerResource.Logs
}

func (v *resourceLogsTeamResourceContainerResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*resourceLogsTeamResourceContainerResource
		graphql.NoUnmarshalJSON
	}
	firstPass.resourceLogsTeamResourceContainerResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ResourceLogsContainerResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalresourceLogsTeamResourceContainerResource struct {
	Typename string `json:"__typename"`

	ExternalId string `json:"externalId"`

	ExternalType string `json:"externalType"`

	ExternalLink string `json:"externalLink"`

	DisplayName string `json:"displayName"`

	Status string `json:"status"`

	Logs ResourceLogsLogs `json:"logs"`
}

func (v *resourceLogsTeamResourceContainerResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *resourceLogsTeamResourceContainerResource) __premarshalJSON() (*__premarshalresourceLogsTeamResourceContainerResource, error) {
	var retval __premarshalresourceLogsTeamResourceContainerResource

	retval.Typename = v.Typename
	retval.ExternalId = v.ResourceLogsContainerResource.ExternalId
	retval.ExternalType = v.ResourceLogsContainerResource.ExternalType
	retval.ExternalLink = v.ResourceLogsContainerResource.ExternalLink
	retval.DisplayName = v.ResourceLogsContainerResource.DisplayName
	retval.Status = v.ResourceLogsContainerResource.Status
	retval.Logs = v.ResourceLogsContainerResource.Logs
	return &retval, nil
}

// resourceLogsTeamResourceEndpointResource includes the requested fields of the GraphQL type EndpointResource.
type resourceLogsTeamResourceEndpointResource struct {
	Typename                     string `json:"__typename"`
	ResourceLogsEndpointResource `json:"-"`
}

// GetTypename returns resourceLogsTeamResourceEndpointResource.Typename, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceEndpointResource) GetTypename() string { return v.Typename }

// GetExternalId returns resourceLogsTeamResourceEndpointResource.ExternalId, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceEndpointResource) GetExternalId() string {
	return v.ResourceLogsEndpointResource.ExternalId
}

// GetExternalType returns resourceLogsTeamResourceEndpointResource.ExternalType, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceEndpointResource) GetExternalType() string {
	return v.ResourceLogsEndpointResource.ExternalType
}

// GetExternalLink returns resourceLogsTeamResourceEndpointResource.ExternalLink, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceEndpointResource) GetExternalLink() string {
	return v.ResourceLogsEndpointResource.ExternalLink
}

// GetDisplayName returns resourceLogsTeamResourceEndpointResource.DisplayName, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceEndpointResource) GetDisplayName() string {
	return v.ResourceLogsEndpointResource.DisplayName
}

// GetStatus returns resourceLogsTeamResourceEndpointResource.Status, and is useful for accessing the field via an interface.
func (v *resourceLogsTeamResourceEndpointResource) GetStatus() string {
	return v.ResourceLogsEndpointResource.Status
}

func (v *resourceLogsTeamResourceEndpointResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*resourceLogsTeamResourceEndpointResource
		graphql.NoUnmarshalJSON
	}
	firstPass.resourceLogsTeamResourceEndpointResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ResourceLogsEndpointResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalresourceLogsTeamResourceEndpointResource struct {
	Typename string `json:"__typename"`

	ExternalId string `json:"externalId"`

	ExternalType string `json:"externalType"`

	ExternalLink string `json:"externalLink"`

	DisplayName string `json:"displayName"`

	Status string `json:"status"`
}

func (v *resourceLogsTeamResourceEndpointResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *resourceLogsTeamResourceEndpointResource) __premarshalJSON() (*__premarshalresourceLogsTeamResourceEndpointResource, error) {
	var retval __premarshalresourceLogsTeamResourceEndpointResource

	retval.Typename = v.Typename
	retval.ExternalId = v.ResourceLogsEndpointResource.ExternalId
	retval.ExternalType = v.ResourceLogsEndpointResource.ExternalType
	retval.ExternalLink = v.ResourceLogsEndpointResource.ExternalLink
	retval.DisplayName = v.ResourceLogsEndpointResource.DisplayName
	retval.Status = v.ResourceLogsEndpointResource.Status
	return &retval, nil
}

// resourcesWithLogsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type resourcesWithLogsTeam struct {
	Id      uuid.UUID                    `json:"id"`
	Project resourcesWithLogsTeamProject `json:"project"`
}

// GetId returns resourcesWithLogsTeam.Id, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns resourcesWithLogsTeam.Project, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeam) GetProject() resourcesWithLogsTeamProject { return v.Project }

// resourcesWithLogsTeamProject includes the requested fields of the GraphQL type Project.
type resourcesWithLogsTeamProject struct {
	Id        uuid.UUID                                            `json:"id"`
	Resources []resourcesWithLogsTeamProjectResourcesCloudResource `json:"resources"`
}

// GetId returns resourcesWithLogsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProject) GetId() uuid.UUID { return v.Id }

// GetResources returns resourcesWithLogsTeamProject.Resources, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProject) GetResources() []resourcesWithLogsTeamProjectResourcesCloudResource {
	return v.Resources
}

// resourcesWithLogsTeamProjectResourcesCloudResource includes the requested fields of the GraphQL type CloudResource.
type resourcesWithLogsTeamProjectResourcesCloudResource struct {
	CloudResource `json:"-"`
	Resources     []resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource `json:"resources"`
	Log           []resourcesWithLogsTeamProjectResourcesCloudResourceLog                    `json:"log"`
}

// GetResources returns resourcesWithLogsTeamProjectResourcesCloudResource.Resources, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResource) GetResources() []resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource {
	return v.Resources
}

// GetLog returns resourcesWithLogsTeamProjectResourcesCloudResource.Log, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResource) GetLog() []resourcesWithLogsTeamProjectResourcesCloudResourceLog {
	return v.Log
}

// GetName returns resourcesWithLogsTeamProjectResourcesCloudResource.Name, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResource) GetName() string {
	return v.CloudResource.Name
}

// GetStatus returns resourcesWithLogsTeamProjectResourcesCloudResource.Status, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResource) GetStatus() ResourceStatus {
	return v.CloudResource.Status
}

// GetType returns resourcesWithLogsTeamProjectResourcesCloudResource.Type, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResource) GetType() ResourceType {
	return v.CloudResource.Type
}

// GetCreatedAt returns resourcesWithLogsTeamProjectResourcesCloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResource) GetCreatedAt() time.Time {
	return v.CloudResource.CreatedAt
}

// GetOwners returns resourcesWithLogsTeamProjectResourcesCloudResource.Owners, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResource) GetOwners() []CloudResourceOwnersResourceOwner {
	return v.CloudResource.Owners
}

// GetEvents returns resourcesWithLogsTeamProjectResourcesCloudResource.Events, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResource) GetEvents() []CloudResourceEventsResourceEvent {
	return v.CloudResource.Events
}

func (v *resourcesWithLogsTeamProjectResourcesCloudResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*resourcesWithLogsTeamProjectResourcesCloudResource
		graphql.NoUnmarshalJSON
	}
	firstPass.resourcesWithLogsTeamProjectResourcesCloudResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalresourcesWithLogsTeamProjectResourcesCloudResource struct {
	Resources []resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource `json:"resources"`

	Log []resourcesWithLogsTeamProjectResourcesCloudResourceLog `json:"log"`

	Name string `json:"name"`

	Status ResourceStatus `json:"status"`

	Type ResourceType `json:"type"`

	CreatedAt time.Time `json:"createdAt"`

	Owners []CloudResourceOwnersResourceOwner `json:"owners"`

	Events []CloudResourceEventsResourceEvent `json:"events"`
}

func (v *resourcesWithLogsTeamProjectResourcesCloudResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *resourcesWithLogsTeamProjectResourcesCloudResource) __premarshalJSON() (*__premarshalresourcesWithLogsTeamProjectResourcesCloudResource, error) {
	var retval __premarshalresourcesWithLogsTeamProjectResourcesCloudResource

	retval.Resources = v.Resources
	retval.Log = v.Log
	retval.Name = v.CloudResource.Name
	retval.Status = v.CloudResource.Status
	retval.Type = v.CloudResource.Type
	retval.CreatedAt = v.CloudResource.CreatedAt
	retval.Owners = v.CloudResource.Owners
	retval.Events = v.CloudResource.Events
	return &retval, nil
}

// resourcesWithLogsTeamProjectResourcesCloudResourceLog includes the requested fields of the GraphQL type Log.
type resourcesWithLogsTeamProjectResourcesCloudResourceLog struct {
	Name    string                                                                 `json:"name"`
	Entries []resourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry `json:"entries"`
}

// GetName returns resourcesWithLogsTeamProjectResourcesCloudResourceLog.Name, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceLog) GetName() string { return v.Name }

// GetEntries returns resourcesWithLogsTeamProjectResourcesCloudResourceLog.Entries, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceLog) GetEntries() []resourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry {
	return v.Entries
}

// resourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type resourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry struct {
	Text      string    `json:"text"`
	Timestamp time.Time `json:"timestamp"`
}

// GetText returns resourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry) GetText() string {
	return v.Text
}

// GetTimestamp returns resourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceLogEntriesLogEntry) GetTimestamp() time.Time {
	return v.Timestamp
}

// resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource includes the requested fields of the GraphQL type CloudResource.
type resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource struct {
	CloudResource `json:"-"`
	Resources     []resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource `json:"resources"`
}

// GetResources returns resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.Resources, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetResources() []resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource {
	return v.Resources
}

// GetName returns resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.Name, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetName() string {
	return v.CloudResource.Name
}

// GetStatus returns resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.Status, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetStatus() ResourceStatus {
	return v.CloudResource.Status
}

// GetType returns resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.Type, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetType() ResourceType {
	return v.CloudResource.Type
}

// GetCreatedAt returns resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetCreatedAt() time.Time {
	return v.CloudResource.CreatedAt
}

// GetOwners returns resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.Owners, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetOwners() []CloudResourceOwnersResourceOwner {
	return v.CloudResource.Owners
}

// GetEvents returns resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource.Events, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) GetEvents() []CloudResourceEventsResourceEvent {
	return v.CloudResource.Events
}

func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource
		graphql.NoUnmarshalJSON
	}
	firstPass.resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalresourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource struct {
	Resources []resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource `json:"resources"`

	Name string `json:"name"`

	Status ResourceStatus `json:"status"`

	Type ResourceType `json:"type"`

	CreatedAt time.Time `json:"createdAt"`

	Owners []CloudResourceOwnersResourceOwner `json:"owners"`

	Events []CloudResourceEventsResourceEvent `json:"events"`
}

func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource) __premarshalJSON() (*__premarshalresourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource, error) {
	var retval __premarshalresourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResource

	retval.Resources = v.Resources
	retval.Name = v.CloudResource.Name
	retval.Status = v.CloudResource.Status
	retval.Type = v.CloudResource.Type
	retval.CreatedAt = v.CloudResource.CreatedAt
	retval.Owners = v.CloudResource.Owners
	retval.Events = v.CloudResource.Events
	return &retval, nil
}

// resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource includes the requested fields of the GraphQL type CloudResource.
type resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource struct {
	CloudResource `json:"-"`
}

// GetName returns resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Name, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetName() string {
	return v.CloudResource.Name
}

// GetStatus returns resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Status, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetStatus() ResourceStatus {
	return v.CloudResource.Status
}

// GetType returns resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Type, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetType() ResourceType {
	return v.CloudResource.Type
}

// GetCreatedAt returns resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetCreatedAt() time.Time {
	return v.CloudResource.CreatedAt
}

// GetOwners returns resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Owners, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetOwners() []CloudResourceOwnersResourceOwner {
	return v.CloudResource.Owners
}

// GetEvents returns resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Events, and is useful for accessing the field via an interface.
func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetEvents() []CloudResourceEventsResourceEvent {
	return v.CloudResource.Events
}

func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource
		graphql.NoUnmarshalJSON
	}
	firstPass.resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalresourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource struct {
	Name string `json:"name"`

	Status ResourceStatus `json:"status"`

	Type ResourceType `json:"type"`

	CreatedAt time.Time `json:"createdAt"`

	Owners []CloudResourceOwnersResourceOwner `json:"owners"`

	Events []CloudResourceEventsResourceEvent `json:"events"`
}

func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *resourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) __premarshalJSON() (*__premarshalresourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource, error) {
	var retval __premarshalresourcesWithLogsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource

	retval.Name = v.CloudResource.Name
	retval.Status = v.CloudResource.Status
	retval.Type = v.CloudResource.Type
	retval.CreatedAt = v.CloudResource.CreatedAt
	retval.Owners = v.CloudResource.Owners
	retval.Events = v.CloudResource.Events
	return &retval, nil
}

// resourcesWithMetricsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type resourcesWithMetricsTeam struct {
	Id      uuid.UUID                       `json:"id"`
	Project resourcesWithMetricsTeamProject `json:"project"`
}

// GetId returns resourcesWithMetricsTeam.Id, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns resourcesWithMetricsTeam.Project, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeam) GetProject() resourcesWithMetricsTeamProject { return v.Project }

// resourcesWithMetricsTeamProject includes the requested fields of the GraphQL type Project.
type resourcesWithMetricsTeamProject struct {
	Id        uuid.UUID                                               `json:"id"`
	Resources []resourcesWithMetricsTeamProjectResourcesCloudResource `json:"resources"`
}

// GetId returns resourcesWithMetricsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProject) GetId() uuid.UUID { return v.Id }

// GetResources returns resourcesWithMetricsTeamProject.Resources, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProject) GetResources() []resourcesWithMetricsTeamProjectResourcesCloudResource {
	return v.Resources
}

// resourcesWithMetricsTeamProjectResourcesCloudResource includes the requested fields of the GraphQL type CloudResource.
type resourcesWithMetricsTeamProjectResourcesCloudResource struct {
	CloudResource `json:"-"`
	Resources     []resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource `json:"resources"`
	Metric        []resourcesWithMetricsTeamProjectResourcesCloudResourceMetric                 `json:"metric"`
}

// GetResources returns resourcesWithMetricsTeamProjectResourcesCloudResource.Resources, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResource) GetResources() []resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource {
	return v.Resources
}

// GetMetric returns resourcesWithMetricsTeamProjectResourcesCloudResource.Metric, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResource) GetMetric() []resourcesWithMetricsTeamProjectResourcesCloudResourceMetric {
	return v.Metric
}

// GetName returns resourcesWithMetricsTeamProjectResourcesCloudResource.Name, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResource) GetName() string {
	return v.CloudResource.Name
}

// GetStatus returns resourcesWithMetricsTeamProjectResourcesCloudResource.Status, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResource) GetStatus() ResourceStatus {
	return v.CloudResource.Status
}

// GetType returns resourcesWithMetricsTeamProjectResourcesCloudResource.Type, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResource) GetType() ResourceType {
	return v.CloudResource.Type
}

// GetCreatedAt returns resourcesWithMetricsTeamProjectResourcesCloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResource) GetCreatedAt() time.Time {
	return v.CloudResource.CreatedAt
}

// GetOwners returns resourcesWithMetricsTeamProjectResourcesCloudResource.Owners, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResource) GetOwners() []CloudResourceOwnersResourceOwner {
	return v.CloudResource.Owners
}

// GetEvents returns resourcesWithMetricsTeamProjectResourcesCloudResource.Events, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResource) GetEvents() []CloudResourceEventsResourceEvent {
	return v.CloudResource.Events
}

func (v *resourcesWithMetricsTeamProjectResourcesCloudResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*resourcesWithMetricsTeamProjectResourcesCloudResource
		graphql.NoUnmarshalJSON
	}
	firstPass.resourcesWithMetricsTeamProjectResourcesCloudResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalresourcesWithMetricsTeamProjectResourcesCloudResource struct {
	Resources []resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource `json:"resources"`

	Metric []resourcesWithMetricsTeamProjectResourcesCloudResourceMetric `json:"metric"`

	Name string `json:"name"`

	Status ResourceStatus `json:"status"`

	Type ResourceType `json:"type"`

	CreatedAt time.Time `json:"createdAt"`

	Owners []CloudResourceOwnersResourceOwner `json:"owners"`

	Events []CloudResourceEventsResourceEvent `json:"events"`
}

func (v *resourcesWithMetricsTeamProjectResourcesCloudResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *resourcesWithMetricsTeamProjectResourcesCloudResource) __premarshalJSON() (*__premarshalresourcesWithMetricsTeamProjectResourcesCloudResource, error) {
	var retval __premarshalresourcesWithMetricsTeamProjectResourcesCloudResource

	retval.Resources = v.Resources
	retval.Metric = v.Metric
	retval.Name = v.CloudResource.Name
	retval.Status = v.CloudResource.Status
	retval.Type = v.CloudResource.Type
	retval.CreatedAt = v.CloudResource.CreatedAt
	retval.Owners = v.CloudResource.Owners
	retval.Events = v.CloudResource.Events
	return &retval, nil
}

// resourcesWithMetricsTeamProjectResourcesCloudResourceMetric includes the requested fields of the GraphQL type ResourceMetric.
type resourcesWithMetricsTeamProjectResourcesCloudResourceMetric struct {
	ResourceMetric `json:"-"`
}

// GetType returns resourcesWithMetricsTeamProjectResourcesCloudResourceMetric.Type, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceMetric) GetType() MetricType {
	return v.ResourceMetric.Type
}

// GetEntries returns resourcesWithMetricsTeamProjectResourcesCloudResourceMetric.Entries, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceMetric) GetEntries() []ResourceMetricEntriesMetricEntry {
	return v.ResourceMetric.Entries
}

func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*resourcesWithMetricsTeamProjectResourcesCloudResourceMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.resourcesWithMetricsTeamProjectResourcesCloudResourceMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ResourceMetric)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalresourcesWithMetricsTeamProjectResourcesCloudResourceMetric struct {
	Type MetricType `json:"type"`

	Entries []ResourceMetricEntriesMetricEntry `json:"entries"`
}

func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceMetric) __premarshalJSON() (*__premarshalresourcesWithMetricsTeamProjectResourcesCloudResourceMetric, error) {
	var retval __premarshalresourcesWithMetricsTeamProjectResourcesCloudResourceMetric

	retval.Type = v.ResourceMetric.Type
	retval.Entries = v.ResourceMetric.Entries
	return &retval, nil
}

// resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource includes the requested fields of the GraphQL type CloudResource.
type resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource struct {
	CloudResource `json:"-"`
	Resources     []resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource `json:"resources"`
}

// GetResources returns resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.Resources, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetResources() []resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource {
	return v.Resources
}

// GetName returns resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.Name, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetName() string {
	return v.CloudResource.Name
}

// GetStatus returns resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.Status, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetStatus() ResourceStatus {
	return v.CloudResource.Status
}

// GetType returns resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.Type, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetType() ResourceType {
	return v.CloudResource.Type
}

// GetCreatedAt returns resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetCreatedAt() time.Time {
	return v.CloudResource.CreatedAt
}

// GetOwners returns resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.Owners, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetOwners() []CloudResourceOwnersResourceOwner {
	return v.CloudResource.Owners
}

// GetEvents returns resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource.Events, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) GetEvents() []CloudResourceEventsResourceEvent {
	return v.CloudResource.Events
}

func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource
		graphql.NoUnmarshalJSON
	}
	firstPass.resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalresourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource struct {
	Resources []resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource `json:"resources"`

	Name string `json:"name"`

	Status ResourceStatus `json:"status"`

	Type ResourceType `json:"type"`

	CreatedAt time.Time `json:"createdAt"`

	Owners []CloudResourceOwnersResourceOwner `json:"owners"`

	Events []CloudResourceEventsResourceEvent `json:"events"`
}

func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource) __premarshalJSON() (*__premarshalresourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource, error) {
	var retval __premarshalresourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResource

	retval.Resources = v.Resources
	retval.Name = v.CloudResource.Name
	retval.Status = v.CloudResource.Status
	retval.Type = v.CloudResource.Type
	retval.CreatedAt = v.CloudResource.CreatedAt
	retval.Owners = v.CloudResource.Owners
	retval.Events = v.CloudResource.Events
	return &retval, nil
}

// resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource includes the requested fields of the GraphQL type CloudResource.
type resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource struct {
	CloudResource `json:"-"`
}

// GetName returns resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Name, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetName() string {
	return v.CloudResource.Name
}

// GetStatus returns resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Status, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetStatus() ResourceStatus {
	return v.CloudResource.Status
}

// GetType returns resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Type, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetType() ResourceType {
	return v.CloudResource.Type
}

// GetCreatedAt returns resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.CreatedAt, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetCreatedAt() time.Time {
	return v.CloudResource.CreatedAt
}

// GetOwners returns resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Owners, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetOwners() []CloudResourceOwnersResourceOwner {
	return v.CloudResource.Owners
}

// GetEvents returns resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource.Events, and is useful for accessing the field via an interface.
func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) GetEvents() []CloudResourceEventsResourceEvent {
	return v.CloudResource.Events
}

func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource
		graphql.NoUnmarshalJSON
	}
	firstPass.resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudResource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalresourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource struct {
	Name string `json:"name"`

	Status ResourceStatus `json:"status"`

	Type ResourceType `json:"type"`

	CreatedAt time.Time `json:"createdAt"`

	Owners []CloudResourceOwnersResourceOwner `json:"owners"`

	Events []CloudResourceEventsResourceEvent `json:"events"`
}

func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *resourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource) __premarshalJSON() (*__premarshalresourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource, error) {
	var retval __premarshalresourcesWithMetricsTeamProjectResourcesCloudResourceResourcesCloudResourceResourcesCloudResource

	retval.Name = v.CloudResource.Name
	retval.Status = v.CloudResource.Status
	retval.Type = v.CloudResource.Type
	retval.CreatedAt = v.CloudResource.CreatedAt
	retval.Owners = v.CloudResource.Owners
	retval.Events = v.CloudResource.Events
	return &retval, nil
}

// submitWorkflowRunSubmitWorkflowWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type submitWorkflowRunSubmitWorkflowWorkflowRun struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns submitWorkflowRunSubmitWorkflowWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *submitWorkflowRunSubmitWorkflowWorkflowRun) GetId() uuid.UUID { return v.Id }

// updateDeployUpdateDeploy includes the requested fields of the GraphQL type Deploy.
type updateDeployUpdateDeploy struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns updateDeployUpdateDeploy.Id, and is useful for accessing the field via an interface.
func (v *updateDeployUpdateDeploy) GetId() uuid.UUID { return v.Id }

// updateProjectUpdateProject includes the requested fields of the GraphQL type Project.
type updateProjectUpdateProject struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns updateProjectUpdateProject.Id, and is useful for accessing the field via an interface.
func (v *updateProjectUpdateProject) GetId() uuid.UUID { return v.Id }

// GetName returns updateProjectUpdateProject.Name, and is useful for accessing the field via an interface.
func (v *updateProjectUpdateProject) GetName() string { return v.Name }

// updateWorkflowTriggerUpdateTrigger includes the requested fields of the GraphQL type Trigger.
type updateWorkflowTriggerUpdateTrigger struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns updateWorkflowTriggerUpdateTrigger.Id, and is useful for accessing the field via an interface.
func (v *updateWorkflowTriggerUpdateTrigger) GetId() uuid.UUID { return v.Id }

// updateWorkflowUpdateWorkflow includes the requested fields of the GraphQL type Workflow.
type updateWorkflowUpdateWorkflow struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns updateWorkflowUpdateWorkflow.Id, and is useful for accessing the field via an interface.
func (v *updateWorkflowUpdateWorkflow) GetId() uuid.UUID { return v.Id }

// userPersonalAccessTokensUser includes the requested fields of the GraphQL type User.
type userPersonalAccessTokensUser struct {
	Id                   uuid.UUID                                                             `json:"id"`
	PersonalAccessTokens []userPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken `json:"personalAccessTokens"`
}

// GetId returns userPersonalAccessTokensUser.Id, and is useful for accessing the field via an interface.
func (v *userPersonalAccessTokensUser) GetId() uuid.UUID { return v.Id }

// GetPersonalAccessTokens returns userPersonalAccessTokensUser.PersonalAccessTokens, and is useful for accessing the field via an interface.
func (v *userPersonalAccessTokensUser) GetPersonalAccessTokens() []userPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken {
	return v.PersonalAccessTokens
}

// userPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken includes the requested fields of the GraphQL type PersonalAccessToken.
type userPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken struct {
	Id        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Token     string    `json:"token"`
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns userPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken.Id, and is useful for accessing the field via an interface.
func (v *userPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken) GetId() uuid.UUID {
	return v.Id
}

// GetName returns userPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken.Name, and is useful for accessing the field via an interface.
func (v *userPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken) GetName() string {
	return v.Name
}

// GetToken returns userPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken.Token, and is useful for accessing the field via an interface.
func (v *userPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken) GetToken() string {
	return v.Token
}

// GetCreatedAt returns userPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken.CreatedAt, and is useful for accessing the field via an interface.
func (v *userPersonalAccessTokensUserPersonalAccessTokensPersonalAccessToken) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// workflowDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type workflowDetailTeam struct {
	Project workflowDetailTeamProject `json:"project"`
}

// GetProject returns workflowDetailTeam.Project, and is useful for accessing the field via an interface.
func (v *workflowDetailTeam) GetProject() workflowDetailTeamProject { return v.Project }

// workflowDetailTeamProject includes the requested fields of the GraphQL type Project.
type workflowDetailTeamProject struct {
	Workflow workflowDetailTeamProjectWorkflow `json:"workflow"`
}

// GetWorkflow returns workflowDetailTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *workflowDetailTeamProject) GetWorkflow() workflowDetailTeamProjectWorkflow {
	return v.Workflow
}

// workflowDetailTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type workflowDetailTeamProjectWorkflow struct {
	WorkflowDetail `json:"-"`
}

// GetId returns workflowDetailTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *workflowDetailTeamProjectWorkflow) GetId() uuid.UUID { return v.WorkflowDetail.Id }

// GetSteps returns workflowDetailTeamProjectWorkflow.Steps, and is useful for accessing the field via an interface.
func (v *workflowDetailTeamProjectWorkflow) GetSteps() []WorkflowDetailStepsWorkflowStepDefinition {
	return v.WorkflowDetail.Steps
}

// GetTriggers returns workflowDetailTeamProjectWorkflow.Triggers, and is useful for accessing the field via an interface.
func (v *workflowDetailTeamProjectWorkflow) GetTriggers() WorkflowDetailTriggersTriggerConnection {
	return v.WorkflowDetail.Triggers
}

func (v *workflowDetailTeamProjectWorkflow) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowDetailTeamProjectWorkflow
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowDetailTeamProjectWorkflow = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalworkflowDetailTeamProjectWorkflow struct {
	Id uuid.UUID `json:"id"`

	Steps []WorkflowDetailStepsWorkflowStepDefinition `json:"steps"`

	Triggers WorkflowDetailTriggersTriggerConnection `json:"triggers"`
}

func (v *workflowDetailTeamProjectWorkflow) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowDetailTeamProjectWorkflow) __premarshalJSON() (*__premarshalworkflowDetailTeamProjectWorkflow, error) {
	var retval __premarshalworkflowDetailTeamProjectWorkflow

	retval.Id = v.WorkflowDetail.Id
	retval.Steps = v.WorkflowDetail.Steps
	retval.Triggers = v.WorkflowDetail.Triggers
	return &retval, nil
}

// workflowRunDetailLogsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type workflowRunDetailLogsTeam struct {
	Id      uuid.UUID                        `json:"id"`
	Project workflowRunDetailLogsTeamProject `json:"project"`
}

// GetId returns workflowRunDetailLogsTeam.Id, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns workflowRunDetailLogsTeam.Project, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeam) GetProject() workflowRunDetailLogsTeamProject { return v.Project }

// workflowRunDetailLogsTeamProject includes the requested fields of the GraphQL type Project.
type workflowRunDetailLogsTeamProject struct {
	Id       uuid.UUID                                `json:"id"`
	Workflow workflowRunDetailLogsTeamProjectWorkflow `json:"workflow"`
}

// GetId returns workflowRunDetailLogsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProject) GetId() uuid.UUID { return v.Id }

// GetWorkflow returns workflowRunDetailLogsTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProject) GetWorkflow() workflowRunDetailLogsTeamProjectWorkflow {
	return v.Workflow
}

// workflowRunDetailLogsTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type workflowRunDetailLogsTeamProjectWorkflow struct {
	Id  uuid.UUID                                   `json:"id"`
	Run workflowRunDetailLogsTeamProjectWorkflowRun `json:"run"`
}

// GetId returns workflowRunDetailLogsTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflow) GetId() uuid.UUID { return v.Id }

// GetRun returns workflowRunDetailLogsTeamProjectWorkflow.Run, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflow) GetRun() workflowRunDetailLogsTeamProjectWorkflowRun {
	return v.Run
}

// workflowRunDetailLogsTeamProjectWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type workflowRunDetailLogsTeamProjectWorkflowRun struct {
	Id   uuid.UUID                                       `json:"id"`
	Step workflowRunDetailLogsTeamProjectWorkflowRunStep `json:"-"`
}

// GetId returns workflowRunDetailLogsTeamProjectWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetStep returns workflowRunDetailLogsTeamProjectWorkflowRun.Step, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRun) GetStep() workflowRunDetailLogsTeamProjectWorkflowRunStep {
	return v.Step
}

func (v *workflowRunDetailLogsTeamProjectWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunDetailLogsTeamProjectWorkflowRun
		Step json.RawMessage `json:"step"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunDetailLogsTeamProjectWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Step
		src := firstPass.Step
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalworkflowRunDetailLogsTeamProjectWorkflowRunStep(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal workflowRunDetailLogsTeamProjectWorkflowRun.Step: %w", err)
			}
		}
	}
	return nil
}

type __premarshalworkflowRunDetailLogsTeamProjectWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	Step json.RawMessage `json:"step"`
}

func (v *workflowRunDetailLogsTeamProjectWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunDetailLogsTeamProjectWorkflowRun) __premarshalJSON() (*__premarshalworkflowRunDetailLogsTeamProjectWorkflowRun, error) {
	var retval __premarshalworkflowRunDetailLogsTeamProjectWorkflowRun

	retval.Id = v.Id
	{

		dst := &retval.Step
		src := v.Step
		var err error
		*dst, err = __marshalworkflowRunDetailLogsTeamProjectWorkflowRunStep(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal workflowRunDetailLogsTeamProjectWorkflowRun.Step: %w", err)
		}
	}
	return &retval, nil
}

// workflowRunDetailLogsTeamProjectWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// workflowRunDetailLogsTeamProjectWorkflowRunStep is implemented by the following types:
// workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep
// workflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep
// workflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep
// workflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep
// workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep
type workflowRunDetailLogsTeamProjectWorkflowRunStep interface {
	implementsGraphQLInterfaceworkflowRunDetailLogsTeamProjectWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep) implementsGraphQLInterfaceworkflowRunDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep) implementsGraphQLInterfaceworkflowRunDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep) implementsGraphQLInterfaceworkflowRunDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep) implementsGraphQLInterfaceworkflowRunDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep) implementsGraphQLInterfaceworkflowRunDetailLogsTeamProjectWorkflowRunStep() {
}

func __unmarshalworkflowRunDetailLogsTeamProjectWorkflowRunStep(b []byte, v *workflowRunDetailLogsTeamProjectWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(workflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(workflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(workflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for workflowRunDetailLogsTeamProjectWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalworkflowRunDetailLogsTeamProjectWorkflowRunStep(v *workflowRunDetailLogsTeamProjectWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for workflowRunDetailLogsTeamProjectWorkflowRunStep: "%T"`, v)
	}
}

// workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep struct {
	Typename string                                                          `json:"__typename"`
	Logs     workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs `json:"logs"`
}

// GetTypename returns workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep) GetTypename() string {
	return v.Typename
}

// GetLogs returns workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep.Logs, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStep) GetLogs() workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs {
	return v.Logs
}

// workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs includes the requested fields of the GraphQL type Logs.
type workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs struct {
	Id        uuid.UUID                                                                        `json:"id"`
	Completed bool                                                                             `json:"completed"`
	Expired   bool                                                                             `json:"expired"`
	Entries   []workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry `json:"entries"`
}

// GetId returns workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs.Id, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs) GetId() uuid.UUID {
	return v.Id
}

// GetCompleted returns workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs.Completed, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs) GetCompleted() bool {
	return v.Completed
}

// GetExpired returns workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs.Expired, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs) GetExpired() bool {
	return v.Expired
}

// GetEntries returns workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs.Entries, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogs) GetEntries() []workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry {
	return v.Entries
}

// workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry struct {
	Timestamp time.Time `json:"timestamp"`
	Text      string    `json:"text"`
}

// GetTimestamp returns workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetText returns workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepBuildRunStepLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// workflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type workflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep struct {
	Typename string `json:"__typename"`
}

// GetTypename returns workflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// workflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type workflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep struct {
	Typename string `json:"__typename"`
}

// GetTypename returns workflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepDeployRunStep) GetTypename() string {
	return v.Typename
}

// workflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type workflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep struct {
	Typename string `json:"__typename"`
}

// GetTypename returns workflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepDestroyRunStep) GetTypename() string {
	return v.Typename
}

// workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep struct {
	Typename string                                                        `json:"__typename"`
	Logs     workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs `json:"logs"`
}

// GetTypename returns workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep) GetTypename() string {
	return v.Typename
}

// GetLogs returns workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep.Logs, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStep) GetLogs() workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs {
	return v.Logs
}

// workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs includes the requested fields of the GraphQL type Logs.
type workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs struct {
	Id        uuid.UUID                                                                      `json:"id"`
	Completed bool                                                                           `json:"completed"`
	Expired   bool                                                                           `json:"expired"`
	Entries   []workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry `json:"entries"`
}

// GetId returns workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs.Id, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs) GetId() uuid.UUID {
	return v.Id
}

// GetCompleted returns workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs.Completed, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs) GetCompleted() bool {
	return v.Completed
}

// GetExpired returns workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs.Expired, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs) GetExpired() bool {
	return v.Expired
}

// GetEntries returns workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs.Entries, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogs) GetEntries() []workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry {
	return v.Entries
}

// workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry struct {
	Timestamp time.Time `json:"timestamp"`
	Text      string    `json:"text"`
}

// GetTimestamp returns workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetText returns workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *workflowRunDetailLogsTeamProjectWorkflowRunStepJobRunStepLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// workflowRunDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type workflowRunDetailTeam struct {
	Id      uuid.UUID                    `json:"id"`
	Project workflowRunDetailTeamProject `json:"project"`
}

// GetId returns workflowRunDetailTeam.Id, and is useful for accessing the field via an interface.
func (v *workflowRunDetailTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns workflowRunDetailTeam.Project, and is useful for accessing the field via an interface.
func (v *workflowRunDetailTeam) GetProject() workflowRunDetailTeamProject { return v.Project }

// workflowRunDetailTeamProject includes the requested fields of the GraphQL type Project.
type workflowRunDetailTeamProject struct {
	Id       uuid.UUID                            `json:"id"`
	Workflow workflowRunDetailTeamProjectWorkflow `json:"workflow"`
}

// GetId returns workflowRunDetailTeamProject.Id, and is useful for accessing the field via an interface.
func (v *workflowRunDetailTeamProject) GetId() uuid.UUID { return v.Id }

// GetWorkflow returns workflowRunDetailTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *workflowRunDetailTeamProject) GetWorkflow() workflowRunDetailTeamProjectWorkflow {
	return v.Workflow
}

// workflowRunDetailTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type workflowRunDetailTeamProjectWorkflow struct {
	Id  uuid.UUID                               `json:"id"`
	Run workflowRunDetailTeamProjectWorkflowRun `json:"run"`
}

// GetId returns workflowRunDetailTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *workflowRunDetailTeamProjectWorkflow) GetId() uuid.UUID { return v.Id }

// GetRun returns workflowRunDetailTeamProjectWorkflow.Run, and is useful for accessing the field via an interface.
func (v *workflowRunDetailTeamProjectWorkflow) GetRun() workflowRunDetailTeamProjectWorkflowRun {
	return v.Run
}

// workflowRunDetailTeamProjectWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type workflowRunDetailTeamProjectWorkflowRun struct {
	WorkflowRunDetail `json:"-"`
}

// GetFinishedAt returns workflowRunDetailTeamProjectWorkflowRun.FinishedAt, and is useful for accessing the field via an interface.
func (v *workflowRunDetailTeamProjectWorkflowRun) GetFinishedAt() time.Time {
	return v.WorkflowRunDetail.FinishedAt
}

// GetSteps returns workflowRunDetailTeamProjectWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *workflowRunDetailTeamProjectWorkflowRun) GetSteps() []WorkflowRunDetailStepsWorkflowRunStep {
	return v.WorkflowRunDetail.Steps
}

// GetId returns workflowRunDetailTeamProjectWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *workflowRunDetailTeamProjectWorkflowRun) GetId() uuid.UUID {
	return v.WorkflowRunDetail.WorkflowRunListItem.Id
}

// GetSequence returns workflowRunDetailTeamProjectWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *workflowRunDetailTeamProjectWorkflowRun) GetSequence() int {
	return v.WorkflowRunDetail.WorkflowRunListItem.Sequence
}

// GetStatus returns workflowRunDetailTeamProjectWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *workflowRunDetailTeamProjectWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.WorkflowRunDetail.WorkflowRunListItem.Status
}

// GetCreatedAt returns workflowRunDetailTeamProjectWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunDetailTeamProjectWorkflowRun) GetCreatedAt() time.Time {
	return v.WorkflowRunDetail.WorkflowRunListItem.CreatedAt
}

func (v *workflowRunDetailTeamProjectWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunDetailTeamProjectWorkflowRun
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunDetailTeamProjectWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunDetail)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalworkflowRunDetailTeamProjectWorkflowRun struct {
	FinishedAt time.Time `json:"finishedAt"`

	Steps []json.RawMessage `json:"steps"`

	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *workflowRunDetailTeamProjectWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunDetailTeamProjectWorkflowRun) __premarshalJSON() (*__premarshalworkflowRunDetailTeamProjectWorkflowRun, error) {
	var retval __premarshalworkflowRunDetailTeamProjectWorkflowRun

	retval.FinishedAt = v.WorkflowRunDetail.FinishedAt
	{

		dst := &retval.Steps
		src := v.WorkflowRunDetail.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunDetailStepsWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunDetailTeamProjectWorkflowRun.WorkflowRunDetail.Steps: %w", err)
			}
		}
	}
	retval.Id = v.WorkflowRunDetail.WorkflowRunListItem.Id
	retval.Sequence = v.WorkflowRunDetail.WorkflowRunListItem.Sequence
	retval.Status = v.WorkflowRunDetail.WorkflowRunListItem.Status
	retval.CreatedAt = v.WorkflowRunDetail.WorkflowRunListItem.CreatedAt
	return &retval, nil
}

// workflowRunStepNestedDetailLogsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type workflowRunStepNestedDetailLogsTeam struct {
	Id      uuid.UUID                                  `json:"id"`
	Project workflowRunStepNestedDetailLogsTeamProject `json:"project"`
}

// GetId returns workflowRunStepNestedDetailLogsTeam.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns workflowRunStepNestedDetailLogsTeam.Project, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeam) GetProject() workflowRunStepNestedDetailLogsTeamProject {
	return v.Project
}

// workflowRunStepNestedDetailLogsTeamProject includes the requested fields of the GraphQL type Project.
type workflowRunStepNestedDetailLogsTeamProject struct {
	Id       uuid.UUID                                          `json:"id"`
	Workflow workflowRunStepNestedDetailLogsTeamProjectWorkflow `json:"workflow"`
}

// GetId returns workflowRunStepNestedDetailLogsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProject) GetId() uuid.UUID { return v.Id }

// GetWorkflow returns workflowRunStepNestedDetailLogsTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProject) GetWorkflow() workflowRunStepNestedDetailLogsTeamProjectWorkflow {
	return v.Workflow
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type workflowRunStepNestedDetailLogsTeamProjectWorkflow struct {
	Id  uuid.UUID                                             `json:"id"`
	Run workflowRunStepNestedDetailLogsTeamProjectWorkflowRun `json:"run"`
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflow) GetId() uuid.UUID { return v.Id }

// GetRun returns workflowRunStepNestedDetailLogsTeamProjectWorkflow.Run, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflow) GetRun() workflowRunStepNestedDetailLogsTeamProjectWorkflowRun {
	return v.Run
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRun struct {
	Id   uuid.UUID                                                 `json:"id"`
	Step workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep `json:"-"`
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetStep returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRun.Step, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRun) GetStep() workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep {
	return v.Step
}

func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailLogsTeamProjectWorkflowRun
		Step json.RawMessage `json:"step"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailLogsTeamProjectWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Step
		src := firstPass.Step
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal workflowRunStepNestedDetailLogsTeamProjectWorkflowRun.Step: %w", err)
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	Step json.RawMessage `json:"step"`
}

func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRun) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRun, error) {
	var retval __premarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRun

	retval.Id = v.Id
	{

		dst := &retval.Step
		src := v.Step
		var err error
		*dst, err = __marshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal workflowRunStepNestedDetailLogsTeamProjectWorkflowRun.Step: %w", err)
		}
	}
	return &retval, nil
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep is implemented by the following types:
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep interface {
	implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep() {
}

func __unmarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep(b []byte, v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep(v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStep: "%T"`, v)
	}
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep struct {
	Typename    string                                                                            `json:"__typename"`
	Id          uuid.UUID                                                                         `json:"id"`
	WorkflowRun workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun `json:"workflowRun"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetWorkflowRun returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStep) GetWorkflowRun() workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun {
	return v.WorkflowRun
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun struct {
	Id        uuid.UUID                                                                             `json:"id"`
	Sequence  int                                                                                   `json:"sequence"`
	Status    WorkflowRunStatus                                                                     `json:"status"`
	CreatedAt time.Time                                                                             `json:"createdAt"`
	Step      workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep `json:"-"`
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetId() uuid.UUID {
	return v.Id
}

// GetSequence returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetSequence() int {
	return v.Sequence
}

// GetStatus returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.Status
}

// GetCreatedAt returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetStep returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Step, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetStep() workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep {
	return v.Step
}

func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun
		Step json.RawMessage `json:"step"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Step
		src := firstPass.Step
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Step: %w", err)
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Step json.RawMessage `json:"step"`
}

func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun, error) {
	var retval __premarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun

	retval.Id = v.Id
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Step
		src := v.Step
		var err error
		*dst, err = __marshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Step: %w", err)
		}
	}
	return &retval, nil
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep is implemented by the following types:
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep interface {
	implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep() {
}

func __unmarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep(b []byte, v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep(v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStep: "%T"`, v)
	}
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep struct {
	Typename string                                                                                              `json:"__typename"`
	Id       uuid.UUID                                                                                           `json:"id"`
	Logs     workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs `json:"logs"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetLogs returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep.Logs, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStep) GetLogs() workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs {
	return v.Logs
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs includes the requested fields of the GraphQL type Logs.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs struct {
	Id        uuid.UUID                                                                                                            `json:"id"`
	Completed bool                                                                                                                 `json:"completed"`
	Expired   bool                                                                                                                 `json:"expired"`
	Entries   []workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry `json:"entries"`
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs) GetId() uuid.UUID {
	return v.Id
}

// GetCompleted returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs.Completed, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs) GetCompleted() bool {
	return v.Completed
}

// GetExpired returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs.Expired, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs) GetExpired() bool {
	return v.Expired
}

// GetEntries returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs.Entries, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogs) GetEntries() []workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry {
	return v.Entries
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry struct {
	Timestamp time.Time `json:"timestamp"`
	Text      string    `json:"text"`
}

// GetTimestamp returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetText returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep struct {
	Typename    string                                                                             `json:"__typename"`
	Id          uuid.UUID                                                                          `json:"id"`
	WorkflowRun workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun `json:"workflowRun"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetWorkflowRun returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStep) GetWorkflowRun() workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun {
	return v.WorkflowRun
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun struct {
	Id        uuid.UUID                                                                              `json:"id"`
	Sequence  int                                                                                    `json:"sequence"`
	Status    WorkflowRunStatus                                                                      `json:"status"`
	CreatedAt time.Time                                                                              `json:"createdAt"`
	Step      workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep `json:"-"`
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetId() uuid.UUID {
	return v.Id
}

// GetSequence returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetSequence() int {
	return v.Sequence
}

// GetStatus returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.Status
}

// GetCreatedAt returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetStep returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Step, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetStep() workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep {
	return v.Step
}

func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun
		Step json.RawMessage `json:"step"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Step
		src := firstPass.Step
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Step: %w", err)
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Step json.RawMessage `json:"step"`
}

func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun, error) {
	var retval __premarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun

	retval.Id = v.Id
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Step
		src := v.Step
		var err error
		*dst, err = __marshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Step: %w", err)
		}
	}
	return &retval, nil
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep is implemented by the following types:
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep
// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep interface {
	implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep() {
}

func __unmarshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep(b []byte, v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalworkflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep(v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStep: "%T"`, v)
	}
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep struct {
	Typename string                                                                                               `json:"__typename"`
	Id       uuid.UUID                                                                                            `json:"id"`
	Logs     workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs `json:"logs"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetLogs returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep.Logs, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStep) GetLogs() workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs {
	return v.Logs
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs includes the requested fields of the GraphQL type Logs.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs struct {
	Id        uuid.UUID                                                                                                             `json:"id"`
	Completed bool                                                                                                                  `json:"completed"`
	Expired   bool                                                                                                                  `json:"expired"`
	Entries   []workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry `json:"entries"`
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs) GetId() uuid.UUID {
	return v.Id
}

// GetCompleted returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs.Completed, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs) GetCompleted() bool {
	return v.Completed
}

// GetExpired returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs.Expired, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs) GetExpired() bool {
	return v.Expired
}

// GetEntries returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs.Entries, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogs) GetEntries() []workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry {
	return v.Entries
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry struct {
	Timestamp time.Time `json:"timestamp"`
	Text      string    `json:"text"`
}

// GetTimestamp returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetText returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepJobRunStepLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailLogsTeamProjectWorkflowRunStepJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type workflowRunStepNestedDetailTeam struct {
	Id      uuid.UUID                              `json:"id"`
	Project workflowRunStepNestedDetailTeamProject `json:"project"`
}

// GetId returns workflowRunStepNestedDetailTeam.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns workflowRunStepNestedDetailTeam.Project, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeam) GetProject() workflowRunStepNestedDetailTeamProject {
	return v.Project
}

// workflowRunStepNestedDetailTeamProject includes the requested fields of the GraphQL type Project.
type workflowRunStepNestedDetailTeamProject struct {
	Id       uuid.UUID                                      `json:"id"`
	Workflow workflowRunStepNestedDetailTeamProjectWorkflow `json:"workflow"`
}

// GetId returns workflowRunStepNestedDetailTeamProject.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProject) GetId() uuid.UUID { return v.Id }

// GetWorkflow returns workflowRunStepNestedDetailTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProject) GetWorkflow() workflowRunStepNestedDetailTeamProjectWorkflow {
	return v.Workflow
}

// workflowRunStepNestedDetailTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type workflowRunStepNestedDetailTeamProjectWorkflow struct {
	Id  uuid.UUID                                         `json:"id"`
	Run workflowRunStepNestedDetailTeamProjectWorkflowRun `json:"run"`
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflow) GetId() uuid.UUID { return v.Id }

// GetRun returns workflowRunStepNestedDetailTeamProjectWorkflow.Run, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflow) GetRun() workflowRunStepNestedDetailTeamProjectWorkflowRun {
	return v.Run
}

// workflowRunStepNestedDetailTeamProjectWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type workflowRunStepNestedDetailTeamProjectWorkflowRun struct {
	Id   uuid.UUID                                             `json:"id"`
	Step workflowRunStepNestedDetailTeamProjectWorkflowRunStep `json:"-"`
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRun) GetId() uuid.UUID { return v.Id }

// GetStep returns workflowRunStepNestedDetailTeamProjectWorkflowRun.Step, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRun) GetStep() workflowRunStepNestedDetailTeamProjectWorkflowRunStep {
	return v.Step
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailTeamProjectWorkflowRun
		Step json.RawMessage `json:"step"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailTeamProjectWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Step
		src := firstPass.Step
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStep(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal workflowRunStepNestedDetailTeamProjectWorkflowRun.Step: %w", err)
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	Step json.RawMessage `json:"step"`
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRun) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRun, error) {
	var retval __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRun

	retval.Id = v.Id
	{

		dst := &retval.Step
		src := v.Step
		var err error
		*dst, err = __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStep(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal workflowRunStepNestedDetailTeamProjectWorkflowRun.Step: %w", err)
		}
	}
	return &retval, nil
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// workflowRunStepNestedDetailTeamProjectWorkflowRunStep is implemented by the following types:
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep
type workflowRunStepNestedDetailTeamProjectWorkflowRunStep interface {
	implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStep() {
}

func __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStep(b []byte, v *workflowRunStepNestedDetailTeamProjectWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailTeamProjectWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStep(v *workflowRunStepNestedDetailTeamProjectWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailTeamProjectWorkflowRunStep: "%T"`, v)
	}
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep struct {
	Typename    string                                                                        `json:"__typename"`
	Id          uuid.UUID                                                                     `json:"id"`
	WorkflowRun workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun `json:"workflowRun"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetWorkflowRun returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStep) GetWorkflowRun() workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun {
	return v.WorkflowRun
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun struct {
	Id         uuid.UUID                                                                                           `json:"id"`
	WorkflowId uuid.UUID                                                                                           `json:"workflowId"`
	Sequence   int                                                                                                 `json:"sequence"`
	Status     WorkflowRunStatus                                                                                   `json:"status"`
	CreatedAt  time.Time                                                                                           `json:"createdAt"`
	Steps      []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep `json:"-"`
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetId() uuid.UUID {
	return v.Id
}

// GetWorkflowId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.WorkflowId, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetWorkflowId() uuid.UUID {
	return v.WorkflowId
}

// GetSequence returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetSequence() int {
	return v.Sequence
}

// GetStatus returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.Status
}

// GetCreatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetSteps returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) GetSteps() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep {
	return v.Steps
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun
		Steps []json.RawMessage `json:"steps"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Steps
		src := firstPass.Steps
		*dst = make(
			[]workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Steps: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	WorkflowId uuid.UUID `json:"workflowId"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Steps []json.RawMessage `json:"steps"`
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun, error) {
	var retval __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun

	retval.Id = v.Id
	retval.WorkflowId = v.WorkflowId
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Steps
		src := v.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRun.Steps: %w", err)
			}
		}
	}
	return &retval, nil
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep struct {
	Typename       string                                                                                                                      `json:"__typename"`
	Id             uuid.UUID                                                                                                                   `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                               `json:"action"`
	DependsOn      []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                       `json:"status"`
	SequenceNumber int                                                                                                                         `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                   `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                   `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                                                   `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                                                       `json:"executionType"`
	ExecutionError string                                                                                                                      `json:"executionError"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetDependsOn() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep, error) {
	var retval __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep struct {
	Typename       string                                                                                                                      `json:"__typename"`
	Id             uuid.UUID                                                                                                                   `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                               `json:"action"`
	DependsOn      []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                       `json:"status"`
	SequenceNumber int                                                                                                                         `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                   `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                   `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                                                   `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                                                       `json:"executionType"`
	ExecutionError string                                                                                                                      `json:"executionError"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetDependsOn() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep, error) {
	var retval __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep struct {
	Typename       string                                                                                                                      `json:"__typename"`
	Id             uuid.UUID                                                                                                                   `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                               `json:"action"`
	DependsOn      []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                       `json:"status"`
	SequenceNumber int                                                                                                                         `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                   `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                   `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                                                   `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                                                       `json:"executionType"`
	ExecutionError string                                                                                                                      `json:"executionError"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetDependsOn() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep, error) {
	var retval __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep struct {
	Typename       string                                                                                                                      `json:"__typename"`
	Id             uuid.UUID                                                                                                                   `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                               `json:"action"`
	DependsOn      []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                       `json:"status"`
	SequenceNumber int                                                                                                                         `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                   `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                   `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                                                   `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                                                       `json:"executionType"`
	ExecutionError string                                                                                                                      `json:"executionError"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetDependsOn() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep, error) {
	var retval __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep struct {
	Typename       string                                                                                                                      `json:"__typename"`
	Id             uuid.UUID                                                                                                                   `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                               `json:"action"`
	DependsOn      []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                       `json:"status"`
	SequenceNumber int                                                                                                                         `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                   `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                   `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                                                   `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                                                       `json:"executionType"`
	ExecutionError string                                                                                                                      `json:"executionError"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetDependsOn() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep, error) {
	var retval __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep is implemented by the following types:
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep interface {
	implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	// GetAction returns the interface-field "action" from its implementation.
	GetAction() GenericWorkflowStepActionType
	// GetDependsOn returns the interface-field "dependsOn" from its implementation.
	GetDependsOn() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() WorkflowRunStepStatus
	// GetSequenceNumber returns the interface-field "sequenceNumber" from its implementation.
	GetSequenceNumber() int
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() time.Time
	// GetExecutionId returns the interface-field "executionId" from its implementation.
	GetExecutionId() uuid.UUID
	// GetExecutionType returns the interface-field "executionType" from its implementation.
	GetExecutionType() WorkflowExecutionType
	// GetExecutionError returns the interface-field "executionError" from its implementation.
	GetExecutionError() string
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep() {
}

func __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep(b []byte, v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep(v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStep: "%T"`, v)
	}
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep is implemented by the following types:
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep interface {
	implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}

func __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(b []byte, v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailTeamProjectWorkflowRunStepDeployRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%T"`, v)
	}
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep struct {
	Typename    string                                                                         `json:"__typename"`
	Id          uuid.UUID                                                                      `json:"id"`
	WorkflowRun workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun `json:"workflowRun"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetWorkflowRun returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep.WorkflowRun, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStep) GetWorkflowRun() workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun {
	return v.WorkflowRun
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun struct {
	Id         uuid.UUID                                                                                            `json:"id"`
	WorkflowId uuid.UUID                                                                                            `json:"workflowId"`
	Sequence   int                                                                                                  `json:"sequence"`
	Status     WorkflowRunStatus                                                                                    `json:"status"`
	CreatedAt  time.Time                                                                                            `json:"createdAt"`
	Steps      []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep `json:"-"`
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetId() uuid.UUID {
	return v.Id
}

// GetWorkflowId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.WorkflowId, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetWorkflowId() uuid.UUID {
	return v.WorkflowId
}

// GetSequence returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetSequence() int {
	return v.Sequence
}

// GetStatus returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.Status
}

// GetCreatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetSteps returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) GetSteps() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep {
	return v.Steps
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun
		Steps []json.RawMessage `json:"steps"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Steps
		src := firstPass.Steps
		*dst = make(
			[]workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Steps: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	WorkflowId uuid.UUID `json:"workflowId"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Steps []json.RawMessage `json:"steps"`
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun, error) {
	var retval __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun

	retval.Id = v.Id
	retval.WorkflowId = v.WorkflowId
	retval.Sequence = v.Sequence
	retval.Status = v.Status
	retval.CreatedAt = v.CreatedAt
	{

		dst := &retval.Steps
		src := v.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRun.Steps: %w", err)
			}
		}
	}
	return &retval, nil
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep struct {
	Typename       string                                                                                                                       `json:"__typename"`
	Id             uuid.UUID                                                                                                                    `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                                `json:"action"`
	DependsOn      []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                        `json:"status"`
	SequenceNumber int                                                                                                                          `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                    `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                    `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                                                    `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                                                        `json:"executionType"`
	ExecutionError string                                                                                                                       `json:"executionError"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.Action, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetDependsOn() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep, error) {
	var retval __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep struct {
	Typename       string                                                                                                                       `json:"__typename"`
	Id             uuid.UUID                                                                                                                    `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                                `json:"action"`
	DependsOn      []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                        `json:"status"`
	SequenceNumber int                                                                                                                          `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                    `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                    `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                                                    `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                                                        `json:"executionType"`
	ExecutionError string                                                                                                                       `json:"executionError"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.Action, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetDependsOn() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep, error) {
	var retval __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep struct {
	Typename       string                                                                                                                       `json:"__typename"`
	Id             uuid.UUID                                                                                                                    `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                                `json:"action"`
	DependsOn      []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                        `json:"status"`
	SequenceNumber int                                                                                                                          `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                    `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                    `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                                                    `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                                                        `json:"executionType"`
	ExecutionError string                                                                                                                       `json:"executionError"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.Action, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetDependsOn() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep, error) {
	var retval __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep struct {
	Typename       string                                                                                                                       `json:"__typename"`
	Id             uuid.UUID                                                                                                                    `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                                `json:"action"`
	DependsOn      []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                        `json:"status"`
	SequenceNumber int                                                                                                                          `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                    `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                    `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                                                    `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                                                        `json:"executionType"`
	ExecutionError string                                                                                                                       `json:"executionError"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.Action, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetDependsOn() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep, error) {
	var retval __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep struct {
	Typename       string                                                                                                                       `json:"__typename"`
	Id             uuid.UUID                                                                                                                    `json:"id"`
	Action         GenericWorkflowStepActionType                                                                                                `json:"action"`
	DependsOn      []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep `json:"-"`
	Status         WorkflowRunStepStatus                                                                                                        `json:"status"`
	SequenceNumber int                                                                                                                          `json:"sequenceNumber"`
	CreatedAt      time.Time                                                                                                                    `json:"createdAt"`
	UpdatedAt      time.Time                                                                                                                    `json:"updatedAt"`
	ExecutionId    uuid.UUID                                                                                                                    `json:"executionId"`
	ExecutionType  WorkflowExecutionType                                                                                                        `json:"executionType"`
	ExecutionError string                                                                                                                       `json:"executionError"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// GetAction returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.Action, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetAction() GenericWorkflowStepActionType {
	return v.Action
}

// GetDependsOn returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.DependsOn, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetDependsOn() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep {
	return v.DependsOn
}

// GetStatus returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.Status, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetStatus() WorkflowRunStepStatus {
	return v.Status
}

// GetSequenceNumber returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.SequenceNumber, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetSequenceNumber() int {
	return v.SequenceNumber
}

// GetCreatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetUpdatedAt returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.UpdatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetExecutionId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.ExecutionId, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetExecutionId() uuid.UUID {
	return v.ExecutionId
}

// GetExecutionType returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.ExecutionType, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetExecutionType() WorkflowExecutionType {
	return v.ExecutionType
}

// GetExecutionError returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.ExecutionError, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) GetExecutionError() string {
	return v.ExecutionError
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep
		DependsOn []json.RawMessage `json:"dependsOn"`
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DependsOn
		src := firstPass.DependsOn
		*dst = make(
			[]workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.DependsOn: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep struct {
	Typename string `json:"__typename"`

	Id uuid.UUID `json:"id"`

	Action GenericWorkflowStepActionType `json:"action"`

	DependsOn []json.RawMessage `json:"dependsOn"`

	Status WorkflowRunStepStatus `json:"status"`

	SequenceNumber int `json:"sequenceNumber"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	ExecutionId uuid.UUID `json:"executionId"`

	ExecutionType WorkflowExecutionType `json:"executionType"`

	ExecutionError string `json:"executionError"`
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) __premarshalJSON() (*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep, error) {
	var retval __premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Action = v.Action
	{

		dst := &retval.DependsOn
		src := v.DependsOn
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep.DependsOn: %w", err)
			}
		}
	}
	retval.Status = v.Status
	retval.SequenceNumber = v.SequenceNumber
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	retval.ExecutionId = v.ExecutionId
	retval.ExecutionType = v.ExecutionType
	retval.ExecutionError = v.ExecutionError
	return &retval, nil
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep is implemented by the following types:
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep interface {
	implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
	// GetAction returns the interface-field "action" from its implementation.
	GetAction() GenericWorkflowStepActionType
	// GetDependsOn returns the interface-field "dependsOn" from its implementation.
	GetDependsOn() []workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep
	// GetStatus returns the interface-field "status" from its implementation.
	GetStatus() WorkflowRunStepStatus
	// GetSequenceNumber returns the interface-field "sequenceNumber" from its implementation.
	GetSequenceNumber() int
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() time.Time
	// GetExecutionId returns the interface-field "executionId" from its implementation.
	GetExecutionId() uuid.UUID
	// GetExecutionType returns the interface-field "executionType" from its implementation.
	GetExecutionType() WorkflowExecutionType
	// GetExecutionError returns the interface-field "executionError" from its implementation.
	GetExecutionError() string
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep() {
}

func __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep(b []byte, v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep(v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep:
		typename = "BuildRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsBuildRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsClusterPrecheckStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep:
		typename = "DeployRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDeployRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep:
		typename = "DestroyRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsDestroyRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep:
		typename = "JobRunStep"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsJobRunStep
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStep: "%T"`, v)
	}
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep includes the requested fields of the GraphQL type BuildRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep includes the requested fields of the GraphQL type ClusterPrecheckStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep includes the requested fields of the GraphQL type DeployRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep includes the requested fields of the GraphQL type DestroyRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep includes the requested fields of the GraphQL interface WorkflowRunStep.
//
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep is implemented by the following types:
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
// workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep interface {
	implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() uuid.UUID
}

func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep) implementsGraphQLInterfaceworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep() {
}

func __unmarshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(b []byte, v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BuildRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep)
		return json.Unmarshal(b, *v)
	case "ClusterPrecheckStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep)
		return json.Unmarshal(b, *v)
	case "DeployRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep)
		return json.Unmarshal(b, *v)
	case "DestroyRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep)
		return json.Unmarshal(b, *v)
	case "JobRunStep":
		*v = new(workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkflowRunStep.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%v"`, tn.TypeName)
	}
}

func __marshalworkflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep(v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep:
		typename = "BuildRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnBuildRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep:
		typename = "ClusterPrecheckStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnClusterPrecheckStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep:
		typename = "DeployRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDeployRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep:
		typename = "DestroyRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnDestroyRunStep
		}{typename, v}
		return json.Marshal(result)
	case *workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep:
		typename = "JobRunStep"

		result := struct {
			TypeName string `json:"__typename"`
			*workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnJobRunStep
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for workflowRunStepNestedDetailTeamProjectWorkflowRunStepDestroyRunStepWorkflowRunStepsWorkflowRunStepDependsOnWorkflowRunStep: "%T"`, v)
	}
}

// workflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep includes the requested fields of the GraphQL type JobRunStep.
type workflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep struct {
	Typename string    `json:"__typename"`
	Id       uuid.UUID `json:"id"`
}

// GetTypename returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep.Typename, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep) GetTypename() string {
	return v.Typename
}

// GetId returns workflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep.Id, and is useful for accessing the field via an interface.
func (v *workflowRunStepNestedDetailTeamProjectWorkflowRunStepJobRunStep) GetId() uuid.UUID {
	return v.Id
}

// workflowRunsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A Zeet Team is used as a permission boundary, and as the owner of projects, clusters, and other resources.
// Groups can grant access to multiple teams.
//
// Teams can also have sub-teams or a parent team.
// A member of parent team will have equal access to all sub-teams.
// Being a member of sub-team does not confer access to the parent team.
type workflowRunsTeam struct {
	Id      uuid.UUID               `json:"id"`
	Project workflowRunsTeamProject `json:"project"`
}

// GetId returns workflowRunsTeam.Id, and is useful for accessing the field via an interface.
func (v *workflowRunsTeam) GetId() uuid.UUID { return v.Id }

// GetProject returns workflowRunsTeam.Project, and is useful for accessing the field via an interface.
func (v *workflowRunsTeam) GetProject() workflowRunsTeamProject { return v.Project }

// workflowRunsTeamProject includes the requested fields of the GraphQL type Project.
type workflowRunsTeamProject struct {
	Id       uuid.UUID                       `json:"id"`
	Workflow workflowRunsTeamProjectWorkflow `json:"workflow"`
}

// GetId returns workflowRunsTeamProject.Id, and is useful for accessing the field via an interface.
func (v *workflowRunsTeamProject) GetId() uuid.UUID { return v.Id }

// GetWorkflow returns workflowRunsTeamProject.Workflow, and is useful for accessing the field via an interface.
func (v *workflowRunsTeamProject) GetWorkflow() workflowRunsTeamProjectWorkflow { return v.Workflow }

// workflowRunsTeamProjectWorkflow includes the requested fields of the GraphQL type Workflow.
type workflowRunsTeamProjectWorkflow struct {
	Id   uuid.UUID                                                `json:"id"`
	Runs workflowRunsTeamProjectWorkflowRunsWorkflowRunConnection `json:"runs"`
}

// GetId returns workflowRunsTeamProjectWorkflow.Id, and is useful for accessing the field via an interface.
func (v *workflowRunsTeamProjectWorkflow) GetId() uuid.UUID { return v.Id }

// GetRuns returns workflowRunsTeamProjectWorkflow.Runs, and is useful for accessing the field via an interface.
func (v *workflowRunsTeamProjectWorkflow) GetRuns() workflowRunsTeamProjectWorkflowRunsWorkflowRunConnection {
	return v.Runs
}

// workflowRunsTeamProjectWorkflowRunsWorkflowRunConnection includes the requested fields of the GraphQL type WorkflowRunConnection.
type workflowRunsTeamProjectWorkflowRunsWorkflowRunConnection struct {
	TotalCount int                                                                        `json:"totalCount"`
	PageInfo   workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionPageInfo           `json:"pageInfo"`
	Nodes      []workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun `json:"nodes"`
}

// GetTotalCount returns workflowRunsTeamProjectWorkflowRunsWorkflowRunConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *workflowRunsTeamProjectWorkflowRunsWorkflowRunConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetPageInfo returns workflowRunsTeamProjectWorkflowRunsWorkflowRunConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *workflowRunsTeamProjectWorkflowRunsWorkflowRunConnection) GetPageInfo() workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns workflowRunsTeamProjectWorkflowRunsWorkflowRunConnection.Nodes, and is useful for accessing the field via an interface.
func (v *workflowRunsTeamProjectWorkflowRunsWorkflowRunConnection) GetNodes() []workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun {
	return v.Nodes
}

// workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun includes the requested fields of the GraphQL type WorkflowRun.
type workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun struct {
	WorkflowRunListItem `json:"-"`
}

// GetId returns workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Id, and is useful for accessing the field via an interface.
func (v *workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetId() uuid.UUID {
	return v.WorkflowRunListItem.Id
}

// GetSequence returns workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Sequence, and is useful for accessing the field via an interface.
func (v *workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetSequence() int {
	return v.WorkflowRunListItem.Sequence
}

// GetStatus returns workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Status, and is useful for accessing the field via an interface.
func (v *workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetStatus() WorkflowRunStatus {
	return v.WorkflowRunListItem.Status
}

// GetCreatedAt returns workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.CreatedAt, and is useful for accessing the field via an interface.
func (v *workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetCreatedAt() time.Time {
	return v.WorkflowRunListItem.CreatedAt
}

// GetSteps returns workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.Steps, and is useful for accessing the field via an interface.
func (v *workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) GetSteps() []WorkflowRunListItemStepsWorkflowRunStep {
	return v.WorkflowRunListItem.Steps
}

func (v *workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun
		graphql.NoUnmarshalJSON
	}
	firstPass.workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.WorkflowRunListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalworkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun struct {
	Id uuid.UUID `json:"id"`

	Sequence int `json:"sequence"`

	Status WorkflowRunStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	Steps []json.RawMessage `json:"steps"`
}

func (v *workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun) __premarshalJSON() (*__premarshalworkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun, error) {
	var retval __premarshalworkflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun

	retval.Id = v.WorkflowRunListItem.Id
	retval.Sequence = v.WorkflowRunListItem.Sequence
	retval.Status = v.WorkflowRunListItem.Status
	retval.CreatedAt = v.WorkflowRunListItem.CreatedAt
	{

		dst := &retval.Steps
		src := v.WorkflowRunListItem.Steps
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalWorkflowRunListItemStepsWorkflowRunStep(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionNodesWorkflowRun.WorkflowRunListItem.Steps: %w", err)
			}
		}
	}
	return &retval, nil
}

// workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *workflowRunsTeamProjectWorkflowRunsWorkflowRunConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// The query or mutation executed by abortWorkflowRun.
const abortWorkflowRun_Operation = `
mutation abortWorkflowRun ($id: UUID!) @api(name: v1) {
	abortWorkflowRun(id: $id)
}
`

func AbortWorkflowRunMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*AbortWorkflowRunResponse, error) {
	req_ := &graphql.Request{
		OpName: "abortWorkflowRun",
		Query:  abortWorkflowRun_Operation,
		Variables: &__abortWorkflowRunInput{
			Id: id,
		},
	}
	var err_ error

	var data_ AbortWorkflowRunResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by approveWorkflowRunStep.
const approveWorkflowRunStep_Operation = `
mutation approveWorkflowRunStep ($stepId: UUID!, $projectId: UUID!) @api(name: v1) {
	approveWorkflowRunStep(stepId: $stepId, projectId: $projectId)
}
`

func ApproveWorkflowRunStepMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	stepId uuid.UUID,
	projectId uuid.UUID,
) (*ApproveWorkflowRunStepResponse, error) {
	req_ := &graphql.Request{
		OpName: "approveWorkflowRunStep",
		Query:  approveWorkflowRunStep_Operation,
		Variables: &__approveWorkflowRunStepInput{
			StepId:    stepId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ApproveWorkflowRunStepResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by blueprint.
const blueprint_Operation = `
query blueprint ($teamId: UUID!, $blueprintId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		blueprint(id: $blueprintId) {
			... BlueprintDetail
		}
	}
}
fragment BlueprintDetail on Blueprint {
	id
	type
	isOfficial
	enabled
	configuration {
		... BlueprintConfigurationDetail
	}
}
fragment BlueprintConfigurationDetail on BlueprintConfiguration {
	slug
	displayName
	published
	description
	tags
	logoUrl
	richInputSchema
}
`

func BlueprintQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	blueprintId uuid.UUID,
) (*BlueprintResponse, error) {
	req_ := &graphql.Request{
		OpName: "blueprint",
		Query:  blueprint_Operation,
		Variables: &__blueprintInput{
			TeamId:      teamId,
			BlueprintId: blueprintId,
		},
	}
	var err_ error

	var data_ BlueprintResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by blueprintRevisions.
const blueprintRevisions_Operation = `
query blueprintRevisions ($teamId: UUID!, $blueprintId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		blueprint(id: $blueprintId) {
			id
			configurationRevisions {
				nodes {
					... BlueprintConfigurationDetail
					... BlueprintConfigurationRevision
				}
			}
		}
	}
}
fragment BlueprintConfigurationDetail on BlueprintConfiguration {
	slug
	displayName
	published
	description
	tags
	logoUrl
	richInputSchema
}
fragment BlueprintConfigurationRevision on BlueprintConfiguration {
	... RevisionDetailV1
}
fragment RevisionDetailV1 on RevisableEntity {
	revisionData
	revisionMetadata {
		id
		sequenceId
		description
		createdAt
		createdBy {
			id
			login
			name
			avatar
		}
		authorInfo {
			summary
			creatorDeleted
		}
	}
}
`

func BlueprintRevisionsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	blueprintId uuid.UUID,
) (*BlueprintRevisionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "blueprintRevisions",
		Query:  blueprintRevisions_Operation,
		Variables: &__blueprintRevisionsInput{
			TeamId:      teamId,
			BlueprintId: blueprintId,
		},
	}
	var err_ error

	var data_ BlueprintRevisionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by buildArtifacts.
const buildArtifacts_Operation = `
query buildArtifacts ($teamId: UUID!, $projectId: UUID!, $page: PageInput!) @api(name: v1) {
	team(id: $teamId) {
		project(id: $projectId) {
			build {
				runs(input: {filter:{},page:$page}) {
					totalCount
					pageInfo {
						hasNextPage
					}
					nodes {
						id
						sequence
						artifacts {
							id
							image
							createdAt
						}
					}
				}
			}
		}
	}
}
`

func BuildArtifactsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	page PageInput,
) (*BuildArtifactsResponse, error) {
	req_ := &graphql.Request{
		OpName: "buildArtifacts",
		Query:  buildArtifacts_Operation,
		Variables: &__buildArtifactsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			Page:      page,
		},
	}
	var err_ error

	var data_ BuildArtifactsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by buildRunDetail.
const buildRunDetail_Operation = `
query buildRunDetail ($teamId: UUID!, $projectId: UUID!, $runId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		project(id: $projectId) {
			build {
				id
				run(id: $runId) {
					... BuildRunDetail
				}
			}
		}
	}
}
fragment BuildRunDetail on BuildRun {
	id
	sequence
	jobRun {
		id
	}
	triggeredBy {
		id
		sequence
	}
	definition {
		id
	}
	artifacts {
		id
		image
		createdAt
	}
}
`

func BuildRunDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	runId uuid.UUID,
) (*BuildRunDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "buildRunDetail",
		Query:  buildRunDetail_Operation,
		Variables: &__buildRunDetailInput{
			TeamId:    teamId,
			ProjectId: projectId,
			RunId:     runId,
		},
	}
	var err_ error

	var data_ BuildRunDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by buildRuns.
const buildRuns_Operation = `
query buildRuns ($teamId: UUID!, $projectId: UUID!, $page: PageInput!) @api(name: v1) {
	team(id: $teamId) {
		project(id: $projectId) {
			build {
				id
				runs(input: {page:$page,filter:{}}) {
					totalCount
					pageInfo {
						hasNextPage
					}
					nodes {
						... BuildRunListItem
					}
				}
			}
		}
	}
}
fragment BuildRunListItem on BuildRun {
	id
	sequence
	jobRun {
		createdAt
		state
	}
	triggeredBy {
		id
		sequence
	}
}
`

func BuildRunsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	page PageInput,
) (*BuildRunsResponse, error) {
	req_ := &graphql.Request{
		OpName: "buildRuns",
		Query:  buildRuns_Operation,
		Variables: &__buildRunsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			Page:      page,
		},
	}
	var err_ error

	var data_ BuildRunsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by cloudRevisions.
const cloudRevisions_Operation = `
query cloudRevisions ($teamId: UUID!, $cloudId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		cloudAccount(id: $cloudId) {
			__typename
			... on AWSAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
			... on AzureAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
			... on GCPAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
			... on DOAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
			... on LinodeAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
			... on VultrAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
			... on CoreWeaveAccount {
				id
				configurationRevisions {
					nodes {
						... RevisionDetailV1
					}
				}
			}
		}
	}
}
fragment RevisionDetailV1 on RevisableEntity {
	revisionData
	revisionMetadata {
		id
		sequenceId
		description
		createdAt
		createdBy {
			id
			login
			name
			avatar
		}
		authorInfo {
			summary
			creatorDeleted
		}
	}
}
`

func CloudRevisionsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	cloudId uuid.UUID,
) (*CloudRevisionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "cloudRevisions",
		Query:  cloudRevisions_Operation,
		Variables: &__cloudRevisionsInput{
			TeamId:  teamId,
			CloudId: cloudId,
		},
	}
	var err_ error

	var data_ CloudRevisionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterDetails.
const clusterDetails_Operation = `
query clusterDetails ($teamId: UUID!, $clusterId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		cluster(id: $clusterId) {
			id
			... ClusterDetailV1
		}
	}
}
fragment ClusterDetailV1 on Cluster {
	id
	displayName
	state
	connected
	cloudProvider
	createdAt
	updatedAt
	updatedAt
	createdAt
}
`

func ClusterDetailsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	clusterId uuid.UUID,
) (*ClusterDetailsResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterDetails",
		Query:  clusterDetails_Operation,
		Variables: &__clusterDetailsInput{
			TeamId:    teamId,
			ClusterId: clusterId,
		},
	}
	var err_ error

	var data_ ClusterDetailsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterRevisions.
const clusterRevisions_Operation = `
query clusterRevisions ($teamId: UUID!, $clusterId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		cluster(id: $clusterId) {
			id
			configurationRevisions {
				nodes {
					... RevisionDetailV1
				}
			}
		}
	}
}
fragment RevisionDetailV1 on RevisableEntity {
	revisionData
	revisionMetadata {
		id
		sequenceId
		description
		createdAt
		createdBy {
			id
			login
			name
			avatar
		}
		authorInfo {
			summary
			creatorDeleted
		}
	}
}
`

func ClusterRevisionsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	clusterId uuid.UUID,
) (*ClusterRevisionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterRevisions",
		Query:  clusterRevisions_Operation,
		Variables: &__clusterRevisionsInput{
			TeamId:    teamId,
			ClusterId: clusterId,
		},
	}
	var err_ error

	var data_ ClusterRevisionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by clusterStatus.
const clusterStatus_Operation = `
query clusterStatus ($teamId: UUID!, $clusterId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		cluster(id: $clusterId) {
			id
			status
		}
	}
}
`

func ClusterStatusQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	clusterId uuid.UUID,
) (*ClusterStatusResponse, error) {
	req_ := &graphql.Request{
		OpName: "clusterStatus",
		Query:  clusterStatus_Operation,
		Variables: &__clusterStatusInput{
			TeamId:    teamId,
			ClusterId: clusterId,
		},
	}
	var err_ error

	var data_ ClusterStatusResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createBuildRun.
const createBuildRun_Operation = `
mutation createBuildRun ($buildId: UUID!) @api(name: v1) {
	createBuildRun(input: {buildId:$buildId}) {
		id
	}
}
`

func CreateBuildRunMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	buildId uuid.UUID,
) (*CreateBuildRunResponse, error) {
	req_ := &graphql.Request{
		OpName: "createBuildRun",
		Query:  createBuildRun_Operation,
		Variables: &__createBuildRunInput{
			BuildId: buildId,
		},
	}
	var err_ error

	var data_ CreateBuildRunResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createDeployRun.
const createDeployRun_Operation = `
mutation createDeployRun ($input: CreateDeployRunInput!) @api(name: v1) {
	createDeployRun(input: $input) {
		id
	}
}
`

func CreateDeployRunMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateDeployRunInput,
) (*CreateDeployRunResponse, error) {
	req_ := &graphql.Request{
		OpName: "createDeployRun",
		Query:  createDeployRun_Operation,
		Variables: &__createDeployRunInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateDeployRunResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createProject.
const createProject_Operation = `
mutation createProject ($input: CreateProjectInput!) @api(name: v1) {
	createProject(input: $input) {
		id
		name
		workflow {
			id
		}
	}
}
`

func CreateProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateProjectInput,
) (*CreateProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "createProject",
		Query:  createProject_Operation,
		Variables: &__createProjectInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createUserPersonalAccessToken.
const createUserPersonalAccessToken_Operation = `
mutation createUserPersonalAccessToken ($userId: UUID!, $name: String!) @api(name: v1) {
	createPersonalAccessTokenForUser(userId: $userId, input: {name:$name}) {
		id
		name
		token
		createdAt
	}
}
`

func CreateUserPersonalAccessTokenMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	userId uuid.UUID,
	name string,
) (*CreateUserPersonalAccessTokenResponse, error) {
	req_ := &graphql.Request{
		OpName: "createUserPersonalAccessToken",
		Query:  createUserPersonalAccessToken_Operation,
		Variables: &__createUserPersonalAccessTokenInput{
			UserId: userId,
			Name:   name,
		},
	}
	var err_ error

	var data_ CreateUserPersonalAccessTokenResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createWorkflowTrigger.
const createWorkflowTrigger_Operation = `
mutation createWorkflowTrigger ($input: CreateTriggerInput!) @api(name: v1) {
	createTrigger(input: $input) {
		id
	}
}
`

func CreateWorkflowTriggerMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateTriggerInput,
) (*CreateWorkflowTriggerResponse, error) {
	req_ := &graphql.Request{
		OpName: "createWorkflowTrigger",
		Query:  createWorkflowTrigger_Operation,
		Variables: &__createWorkflowTriggerInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateWorkflowTriggerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by currentUser.
const currentUser_Operation = `
query currentUser {
	currentUser {
		id
		name
		login
	}
}
`

func CurrentUserQuery(
	ctx_ context.Context,
	client_ graphql.Client,
) (*CurrentUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "currentUser",
		Query:  currentUser_Operation,
	}
	var err_ error

	var data_ CurrentUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteGroup.
const deleteGroup_Operation = `
mutation deleteGroup ($id: UUID!) @api(name: v1) {
	deleteGroup(id: $id)
}
`

func DeleteGroupMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*DeleteGroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteGroup",
		Query:  deleteGroup_Operation,
		Variables: &__deleteGroupInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DeleteGroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteProject.
const deleteProject_Operation = `
mutation deleteProject ($id: UUID!, $force: Boolean) @api(name: v1) {
	deleteProject(id: $id, force: $force)
}
`

func DeleteProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	force bool,
) (*DeleteProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteProject",
		Query:  deleteProject_Operation,
		Variables: &__deleteProjectInput{
			Id:    id,
			Force: force,
		},
	}
	var err_ error

	var data_ DeleteProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteProjectAndResources.
const deleteProjectAndResources_Operation = `
mutation deleteProjectAndResources ($id: UUID!, $deleteOnFailure: Boolean) @api(name: v1) {
	deleteProjectAndResources(id: $id, deleteOnFailure: $deleteOnFailure)
}
`

func DeleteProjectAndResourcesMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	deleteOnFailure bool,
) (*DeleteProjectAndResourcesResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteProjectAndResources",
		Query:  deleteProjectAndResources_Operation,
		Variables: &__deleteProjectAndResourcesInput{
			Id:              id,
			DeleteOnFailure: deleteOnFailure,
		},
	}
	var err_ error

	var data_ DeleteProjectAndResourcesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteProjectResources.
const deleteProjectResources_Operation = `
mutation deleteProjectResources ($id: UUID!) @api(name: v1) {
	deleteProjectResources(id: $id)
}
`

func DeleteProjectResourcesMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*DeleteProjectResourcesResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteProjectResources",
		Query:  deleteProjectResources_Operation,
		Variables: &__deleteProjectResourcesInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DeleteProjectResourcesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteSubGroup.
const deleteSubGroup_Operation = `
mutation deleteSubGroup ($id: UUID!) @api(name: v1) {
	deleteSubGroup(id: $id)
}
`

func DeleteSubGroupMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*DeleteSubGroupResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteSubGroup",
		Query:  deleteSubGroup_Operation,
		Variables: &__deleteSubGroupInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DeleteSubGroupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteUserPersonalAccessToken.
const deleteUserPersonalAccessToken_Operation = `
mutation deleteUserPersonalAccessToken ($id: UUID!) @api(name: v1) {
	deletePersonalAccessToken(id: $id)
}
`

func DeleteUserPersonalAccessTokenMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*DeleteUserPersonalAccessTokenResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteUserPersonalAccessToken",
		Query:  deleteUserPersonalAccessToken_Operation,
		Variables: &__deleteUserPersonalAccessTokenInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DeleteUserPersonalAccessTokenResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteWorkflowTrigger.
const deleteWorkflowTrigger_Operation = `
mutation deleteWorkflowTrigger ($id: UUID!) @api(name: v1) {
	deleteTrigger(id: $id)
}
`

func DeleteWorkflowTriggerMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*DeleteWorkflowTriggerResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteWorkflowTrigger",
		Query:  deleteWorkflowTrigger_Operation,
		Variables: &__deleteWorkflowTriggerInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DeleteWorkflowTriggerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by duplicateProject.
const duplicateProject_Operation = `
mutation duplicateProject ($id: UUID!, $input: DuplicateProjectInput!) @api(name: v1) {
	duplicateProject(id: $id, input: $input) {
		id
		name
		group {
			id
			name
		}
		subGroup {
			id
			name
		}
	}
}
`

func DuplicateProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input DuplicateProjectInput,
) (*DuplicateProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "duplicateProject",
		Query:  duplicateProject_Operation,
		Variables: &__duplicateProjectInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ DuplicateProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ejectClusterComponent.
const ejectClusterComponent_Operation = `
mutation ejectClusterComponent ($clusterId: UUID!, $input: EjectClusterComponentInput!) @api(name: v1) {
	ejectClusterComponent(clusterId: $clusterId, input: $input) {
		name
		status
	}
}
`

func EjectClusterComponentMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	clusterId uuid.UUID,
	input EjectClusterComponentInput,
) (*EjectClusterComponentResponse, error) {
	req_ := &graphql.Request{
		OpName: "ejectClusterComponent",
		Query:  ejectClusterComponent_Operation,
		Variables: &__ejectClusterComponentInput{
			ClusterId: clusterId,
			Input:     input,
		},
	}
	var err_ error

	var data_ EjectClusterComponentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by generateDownloadableLogLinkForWorkflowRunStep.
const generateDownloadableLogLinkForWorkflowRunStep_Operation = `
mutation generateDownloadableLogLinkForWorkflowRunStep ($actionStepId: UUID!) @api(name: v1) {
	generateDownloadableLogLinkForWorkflowRunStep(actionStepId: $actionStepId)
}
`

func GenerateDownloadableLogLinkForWorkflowRunStepMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	actionStepId uuid.UUID,
) (*GenerateDownloadableLogLinkForWorkflowRunStepResponse, error) {
	req_ := &graphql.Request{
		OpName: "generateDownloadableLogLinkForWorkflowRunStep",
		Query:  generateDownloadableLogLinkForWorkflowRunStep_Operation,
		Variables: &__generateDownloadableLogLinkForWorkflowRunStepInput{
			ActionStepId: actionStepId,
		},
	}
	var err_ error

	var data_ GenerateDownloadableLogLinkForWorkflowRunStepResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by groupsWithSubgroups.
const groupsWithSubgroups_Operation = `
query groupsWithSubgroups ($teamId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		groups {
			nodes {
				id
				name
				subGroups {
					id
					name
				}
			}
		}
	}
}
`

func GroupsWithSubgroupsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
) (*GroupsWithSubgroupsResponse, error) {
	req_ := &graphql.Request{
		OpName: "groupsWithSubgroups",
		Query:  groupsWithSubgroups_Operation,
		Variables: &__groupsWithSubgroupsInput{
			TeamId: teamId,
		},
	}
	var err_ error

	var data_ GroupsWithSubgroupsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by jobList.
const jobList_Operation = `
query jobList ($teamId: UUID!, $projectId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			jobs {
				... JobListItem
			}
		}
	}
}
fragment JobListItem on Job {
	id
	definition {
		jobName
	}
	runs(input: {filter:{},page:{first:0}}) {
		totalCount
	}
}
`

func JobListQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*JobListResponse, error) {
	req_ := &graphql.Request{
		OpName: "jobList",
		Query:  jobList_Operation,
		Variables: &__jobListInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ JobListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by jobRunDetail.
const jobRunDetail_Operation = `
query jobRunDetail ($id: UUID!, $teamId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		jobRun(id: $id) {
			... JobRunDetail
		}
	}
}
fragment JobRunDetail on JobRun {
	... JobRunListItem
	updatedAt
	command
	exitCode
	errorMessage
	definition {
		jobName
	}
}
fragment JobRunListItem on JobRun {
	id
	sequence
	createdAt
	state
}
`

func JobRunDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	teamId uuid.UUID,
) (*JobRunDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "jobRunDetail",
		Query:  jobRunDetail_Operation,
		Variables: &__jobRunDetailInput{
			Id:     id,
			TeamId: teamId,
		},
	}
	var err_ error

	var data_ JobRunDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by jobRunList.
const jobRunList_Operation = `
query jobRunList ($id: UUID!, $teamId: UUID!, $page: PageInput!) @api(name: v1) {
	team(id: $teamId) {
		id
		job(id: $id) {
			... JobDetailItem
		}
	}
}
fragment JobDetailItem on Job {
	id
	definition {
		jobName
	}
	runs(input: {filter:{},page:$page}) {
		totalCount
		pageInfo {
			hasNextPage
		}
		nodes {
			... JobRunListItem
		}
	}
}
fragment JobRunListItem on JobRun {
	id
	sequence
	createdAt
	state
}
`

func JobRunListQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	teamId uuid.UUID,
	page PageInput,
) (*JobRunListResponse, error) {
	req_ := &graphql.Request{
		OpName: "jobRunList",
		Query:  jobRunList_Operation,
		Variables: &__jobRunListInput{
			Id:     id,
			TeamId: teamId,
			Page:   page,
		},
	}
	var err_ error

	var data_ JobRunListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by jobRunLogs.
const jobRunLogs_Operation = `
query jobRunLogs ($id: UUID!, $teamId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		jobRun(id: $id) {
			... JobRunLogs
		}
	}
}
fragment JobRunLogs on JobRun {
	id
	logs {
		id
		completed
		expired
		entries {
			timestamp
			text
		}
	}
}
`

func JobRunLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	teamId uuid.UUID,
) (*JobRunLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "jobRunLogs",
		Query:  jobRunLogs_Operation,
		Variables: &__jobRunLogsInput{
			Id:     id,
			TeamId: teamId,
		},
	}
	var err_ error

	var data_ JobRunLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by linkProject.
const linkProject_Operation = `
mutation linkProject ($input: ProjectLinkInput!) @api(name: v1) {
	linkProject(input: $input) {
		id
	}
}
`

func LinkProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	input ProjectLinkInput,
) (*LinkProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "linkProject",
		Query:  linkProject_Operation,
		Variables: &__linkProjectInput{
			Input: input,
		},
	}
	var err_ error

	var data_ LinkProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by observabilityConfig.
const observabilityConfig_Operation = `
query observabilityConfig ($teamId: UUID!, $projectId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			observabilityConfig {
				selector {
					namespace
					resourceName
					containerName
					labels {
						name
						value
					}
				}
			}
		}
	}
}
`

func ObservabilityConfigQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ObservabilityConfigResponse, error) {
	req_ := &graphql.Request{
		OpName: "observabilityConfig",
		Query:  observabilityConfig_Operation,
		Variables: &__observabilityConfigInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ObservabilityConfigResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectAvailableProviders.
const projectAvailableProviders_Operation = `
query projectAvailableProviders ($teamId: UUID!, $projectId: UUID!, $linkType: ProjectLinkType!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			availableProviders(type: $linkType) {
				... ProjectWithName
			}
		}
	}
}
fragment ProjectWithName on Project {
	id
	name
}
`

func ProjectAvailableProvidersQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	linkType ProjectLinkType,
) (*ProjectAvailableProvidersResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectAvailableProviders",
		Query:  projectAvailableProviders_Operation,
		Variables: &__projectAvailableProvidersInput{
			TeamId:    teamId,
			ProjectId: projectId,
			LinkType:  linkType,
		},
	}
	var err_ error

	var data_ ProjectAvailableProvidersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectClusters.
const projectClusters_Operation = `
query projectClusters ($teamId: UUID!, $projectId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			... ProjectWithClusters
		}
	}
}
fragment ProjectWithClusters on Project {
	id
	clusters {
		... ClusterDetailV1
	}
}
fragment ClusterDetailV1 on Cluster {
	id
	displayName
	state
	connected
	cloudProvider
	createdAt
	updatedAt
	updatedAt
	createdAt
}
`

func ProjectClustersQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ProjectClustersResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectClusters",
		Query:  projectClusters_Operation,
		Variables: &__projectClustersInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ProjectClustersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectDeployDetail.
const projectDeployDetail_Operation = `
query projectDeployDetail ($teamId: UUID!, $deployId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		deploy(id: $deployId) {
			... ProjectDeployDetail
		}
	}
}
fragment ProjectDeployDetail on Deploy {
	id
	name
	runs {
		totalCount
		nodes {
			... ProjectDeployRunList
		}
	}
}
fragment ProjectDeployRunList on DeployRun {
	id
	sequence
	result {
		resources {
			totalCount
			nodes {
				__typename
				displayName
				externalId
				externalLink
				externalType
				... on ContainerResource {
					logs {
						id
						completed
						expired
						entries {
							text
							timestamp
						}
					}
				}
			}
		}
	}
}
`

func ProjectDeployDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	deployId uuid.UUID,
) (*ProjectDeployDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectDeployDetail",
		Query:  projectDeployDetail_Operation,
		Variables: &__projectDeployDetailInput{
			TeamId:   teamId,
			DeployId: deployId,
		},
	}
	var err_ error

	var data_ ProjectDeployDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectDeployRevisions.
const projectDeployRevisions_Operation = `
query projectDeployRevisions ($teamId: UUID!, $projectId: UUID!, $page: PageInput) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			deploys {
				nodes {
					id
					name
					configurationRevisions(page: $page) {
						totalCount
						pageInfo {
							hasNextPage
						}
						nodes {
							... RevisionDetailV1
						}
					}
				}
			}
		}
	}
}
fragment RevisionDetailV1 on RevisableEntity {
	revisionData
	revisionMetadata {
		id
		sequenceId
		description
		createdAt
		createdBy {
			id
			login
			name
			avatar
		}
		authorInfo {
			summary
			creatorDeleted
		}
	}
}
`

func ProjectDeployRevisionsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	page PageInput,
) (*ProjectDeployRevisionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectDeployRevisions",
		Query:  projectDeployRevisions_Operation,
		Variables: &__projectDeployRevisionsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			Page:      page,
		},
	}
	var err_ error

	var data_ ProjectDeployRevisionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectDeployRunDetail.
const projectDeployRunDetail_Operation = `
query projectDeployRunDetail ($teamId: UUID!, $deployRunId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		deployRun(id: $deployRunId) {
			... ProjectDeployRunDetail
		}
	}
}
fragment ProjectDeployRunDetail on DeployRun {
	id
	sequence
	result {
		resources {
			totalCount
			nodes {
				__typename
				displayName
				externalId
			}
		}
	}
}
`

func ProjectDeployRunDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	deployRunId uuid.UUID,
) (*ProjectDeployRunDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectDeployRunDetail",
		Query:  projectDeployRunDetail_Operation,
		Variables: &__projectDeployRunDetailInput{
			TeamId:      teamId,
			DeployRunId: deployRunId,
		},
	}
	var err_ error

	var data_ ProjectDeployRunDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectDeploys.
const projectDeploys_Operation = `
query projectDeploys ($teamId: UUID!, $projectId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			deploys {
				nodes {
					... ProjectDeployList
				}
			}
		}
	}
}
fragment ProjectDeployList on Deploy {
	id
	name
	runs(input: {first:1}) {
		totalCount
		nodes {
			id
			sequence
		}
	}
}
`

func ProjectDeploysQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ProjectDeploysResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectDeploys",
		Query:  projectDeploys_Operation,
		Variables: &__projectDeploysInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ProjectDeploysResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectDetail.
const projectDetail_Operation = `
query projectDetail ($teamId: UUID!, $projectId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			... ProjectDetail
		}
	}
}
fragment ProjectDetail on Project {
	... ProjectInfo
	deploys {
		nodes {
			... DeployConfigurationDetail
		}
	}
	build {
		id
		definition {
			id
		}
	}
	blueprint {
		id
		configuration {
			... ProjectBlueprintConfigurationDetailV1
		}
	}
	group {
		id
		name
	}
	subGroup {
		id
		name
	}
}
fragment ProjectInfo on Project {
	id
	name
	createdAt
	updatedAt
	status
	build {
		id
	}
	deploys {
		totalCount
	}
	workflow {
		id
		runs {
			nodes {
				... WorkflowRunDetail
			}
		}
	}
	jobs {
		id
	}
	blueprint {
		id
		type
	}
}
fragment DeployConfigurationDetail on Deploy {
	id
	name
	branchName
	configuration {
		id
		defaultWorkflowSteps
		requirePlanApproval
		variables {
			... DeployVariableDetail
		}
		kubernetes {
			blueprint {
				source {
					... ProjectSourceDetail
				}
				useKustomize
			}
			target {
				clusterId
				namespace
			}
			generator {
				containerRegistrySource {
					registryId
					registryUrl
					repository
					tag
					digest
				}
				appId
				branchName
				productionBranchName
				envs {
					id
					name
					value
					visible
					sealed
					source {
						type
					}
					createdAt
					updatedAt
				}
				appGeneratorVersion
				cpuRequest
				memoryRequest
				ephemeralStorage
				dedicated
				gpuRequest
				gpuType
				tpuType
				tpuTfVersion
				tpuCores
				replicas
				autoscaling {
					minReplicas
					maxReplicas
					coolDownPeriod
					spec
					triggers {
						type
						spec
					}
					kedaScaledObjectSpec
				}
				ports {
					port
					https
					grpc
					public
					protocol
					loadBalancer
				}
				staticIp
				hostNetwork
				endpoint
				defaultIngressDomain
				volumes {
					size
					mountPath
				}
				secretMounts {
					secretName
					mountPath
					readOnly
				}
				deployStrategy
				preStopSleep
				terminationGracePeriodSeconds
				startupProbe {
					command
					http {
						host
						port
						path
					}
					tcp {
						host
						port
					}
					initialDelaySeconds
					periodSeconds
					successThreshold
					failureThreshold
					timeoutSeconds
				}
				livenessProbe {
					command
					http {
						host
						port
						path
					}
					tcp {
						host
						port
					}
					initialDelaySeconds
					periodSeconds
					successThreshold
					failureThreshold
					timeoutSeconds
				}
				readinessProbe {
					command
					http {
						host
						port
						path
					}
					tcp {
						host
						port
					}
					initialDelaySeconds
					periodSeconds
					successThreshold
					failureThreshold
					timeoutSeconds
				}
				logShipperType
				betterstackToken
				datadogApmEnabled
				datadogHost
				datadogKey
				logDnaKey
				logzToken
				logzUrl
				syslogConfig
				dockerEntrypoint
				dockerCommand
				awsIamRole
				gcpServiceAccount
				serviceAccountName
				annotations
				serviceAnnotations
				nodeSelector
				podSpecPatch
				legacyRepo {
					id
					name
					appId
				}
			}
		}
		helm {
			blueprint {
				source {
					... ProjectSourceDetail
				}
			}
			target {
				clusterId
				namespace
				releaseName
			}
			values
		}
		terraform {
			blueprint {
				source {
					... ProjectSourceDetail
				}
				outputConfiguration {
					automatic {
						disabled
						excluded
						sensitive
					}
					customization
				}
				terraformVersion
			}
			target {
				moduleName
				stateBackend {
					s3Bucket {
						awsAccountId
						region
						bucketName
						key
					}
					gcsBucket {
						gcpAccountId
						location
						bucketName
						prefix
					}
				}
				provider {
					awsAccount {
						id
					}
					gcpAccount {
						id
					}
					doAccount {
						id
					}
					region
				}
			}
		}
		awsSam {
			target {
				awsAccountId
				awsRegion
				stackName
			}
			generator {
				envVars {
					id
					name
					value
					visible
					sealed
					source {
						type
					}
					createdAt
					updatedAt
				}
				runCommand
				serverlessMemory
				serverlessArch
				customDomainHost
				customDomainCertificateArn
				httpPort
				buildImage
			}
		}
		gcpCloudRun {
			target {
				gcpAccountId
				gcpRegion
			}
			generator {
				envVars {
					id
					name
					value
					visible
					sealed
					source {
						type
					}
					createdAt
					updatedAt
				}
				containerMemory
				name
				httpPort
				runCommand
				containerCpu
			}
		}
	}
}
fragment ProjectBlueprintConfigurationDetailV1 on BlueprintConfiguration {
	... BlueprintConfigurationDetail
	driverConfiguration {
		__typename
		... on BlueprintTerraformConfiguration {
			source {
				... ProjectSourceDetail
			}
		}
		... on BlueprintHelmConfiguration {
			source {
				... ProjectSourceDetail
			}
		}
		... on BlueprintManifestConfiguration {
			source {
				... ProjectSourceDetail
			}
		}
	}
}
fragment WorkflowRunDetail on WorkflowRun {
	... WorkflowRunListItem
	finishedAt
	steps {
		__typename
		... WorkflowRunStepDetail
	}
}
fragment DeployVariableDetail on DeployVariable {
	id
	specId
	name
	value
	valueString
	valueBoolean
	valueInt
	valueFloat
	valueJson
}
fragment ProjectSourceDetail on Source {
	git {
		repository
		ref
		path
		integration {
			githubInstallationId
			githubIntegrationId
			gitlabIntegrationId
		}
	}
	terraformModule {
		source
		version
		integration {
			git {
				githubInstallationId
			}
		}
	}
	helmRepository {
		repositoryUrl
		chart
		version
	}
	containerRegistry {
		registryId
		registryUrl
		repository
		tag
		digest
	}
}
fragment BlueprintConfigurationDetail on BlueprintConfiguration {
	slug
	displayName
	published
	description
	tags
	logoUrl
	richInputSchema
}
fragment WorkflowRunListItem on WorkflowRun {
	id
	sequence
	status
	createdAt
	steps {
		__typename
		id
		action
		dependsOn {
			__typename
			id
		}
		status
		sequenceNumber
		createdAt
		updatedAt
		executionId
		executionType
		... on BuildRunStep {
			outputs {
				id
				image
			}
		}
		... on DeployRunStep {
			workflowRun {
				id
				workflowId
				sequence
				status
				createdAt
				steps {
					__typename
					id
					action
					dependsOn {
						__typename
						id
					}
					status
					sequenceNumber
					createdAt
					updatedAt
					executionId
					executionType
				}
			}
		}
	}
}
fragment WorkflowRunStepDetail on WorkflowRunStep {
	id
	action
	dependsOn {
		__typename
		id
	}
	status
	sequenceNumber
	createdAt
	updatedAt
	executionId
	executionType
	executionError
	... on BuildRunStep {
		outputs {
			id
			image
		}
	}
	... on DeployRunStep {
		workflowRun {
			id
			workflowId
			sequence
			status
			createdAt
			steps {
				__typename
				id
				action
				dependsOn {
					__typename
					id
				}
				status
				sequenceNumber
				createdAt
				updatedAt
				executionId
				executionType
				executionError
			}
		}
	}
	... on ClusterPrecheckStep {
		cluster {
			... ClusterDetailV1
		}
	}
}
fragment ClusterDetailV1 on Cluster {
	id
	displayName
	state
	connected
	cloudProvider
	createdAt
	updatedAt
	updatedAt
	createdAt
}
`

func ProjectDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ProjectDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectDetail",
		Query:  projectDetail_Operation,
		Variables: &__projectDetailInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ProjectDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectInfo.
const projectInfo_Operation = `
query projectInfo ($teamId: UUID!, $projectId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			... ProjectInfo
		}
	}
}
fragment ProjectInfo on Project {
	id
	name
	createdAt
	updatedAt
	status
	build {
		id
	}
	deploys {
		totalCount
	}
	workflow {
		id
		runs {
			nodes {
				... WorkflowRunDetail
			}
		}
	}
	jobs {
		id
	}
	blueprint {
		id
		type
	}
}
fragment WorkflowRunDetail on WorkflowRun {
	... WorkflowRunListItem
	finishedAt
	steps {
		__typename
		... WorkflowRunStepDetail
	}
}
fragment WorkflowRunListItem on WorkflowRun {
	id
	sequence
	status
	createdAt
	steps {
		__typename
		id
		action
		dependsOn {
			__typename
			id
		}
		status
		sequenceNumber
		createdAt
		updatedAt
		executionId
		executionType
		... on BuildRunStep {
			outputs {
				id
				image
			}
		}
		... on DeployRunStep {
			workflowRun {
				id
				workflowId
				sequence
				status
				createdAt
				steps {
					__typename
					id
					action
					dependsOn {
						__typename
						id
					}
					status
					sequenceNumber
					createdAt
					updatedAt
					executionId
					executionType
				}
			}
		}
	}
}
fragment WorkflowRunStepDetail on WorkflowRunStep {
	id
	action
	dependsOn {
		__typename
		id
	}
	status
	sequenceNumber
	createdAt
	updatedAt
	executionId
	executionType
	executionError
	... on BuildRunStep {
		outputs {
			id
			image
		}
	}
	... on DeployRunStep {
		workflowRun {
			id
			workflowId
			sequence
			status
			createdAt
			steps {
				__typename
				id
				action
				dependsOn {
					__typename
					id
				}
				status
				sequenceNumber
				createdAt
				updatedAt
				executionId
				executionType
				executionError
			}
		}
	}
	... on ClusterPrecheckStep {
		cluster {
			... ClusterDetailV1
		}
	}
}
fragment ClusterDetailV1 on Cluster {
	id
	displayName
	state
	connected
	cloudProvider
	createdAt
	updatedAt
	updatedAt
	createdAt
}
`

func ProjectInfoQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ProjectInfoResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectInfo",
		Query:  projectInfo_Operation,
		Variables: &__projectInfoInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ProjectInfoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectLinkedProjects.
const projectLinkedProjects_Operation = `
query projectLinkedProjects ($teamId: UUID!, $projectId: UUID!, $linkType: ProjectLinkType!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			linkedProjects(type: $linkType) {
				nodes {
					... ProjectLinkDetail
				}
			}
		}
	}
}
fragment ProjectLinkDetail on ProjectLink {
	id
	project {
		... ProjectWithName
	}
	provider {
		... ProjectWithName
	}
	linkType
	envPrefix
	envs {
		name
		value
	}
}
fragment ProjectWithName on Project {
	id
	name
}
`

func ProjectLinkedProjectsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	linkType ProjectLinkType,
) (*ProjectLinkedProjectsResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectLinkedProjects",
		Query:  projectLinkedProjects_Operation,
		Variables: &__projectLinkedProjectsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			LinkType:  linkType,
		},
	}
	var err_ error

	var data_ ProjectLinkedProjectsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectOutputs.
const projectOutputs_Operation = `
query projectOutputs ($teamId: UUID!, $projectId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			status
			connector(type: DATABASE_CONNECTION) {
				type
				fields {
					type
					name
					displayName
					value
				}
			}
			workflow {
				id
			}
		}
	}
}
`

func ProjectOutputsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ProjectOutputsResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectOutputs",
		Query:  projectOutputs_Operation,
		Variables: &__projectOutputsInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ProjectOutputsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectStatusOnly.
const projectStatusOnly_Operation = `
query projectStatusOnly ($teamId: UUID!, $projectId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			status
		}
	}
}
`

func ProjectStatusOnlyQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*ProjectStatusOnlyResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectStatusOnly",
		Query:  projectStatusOnly_Operation,
		Variables: &__projectStatusOnlyInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ ProjectStatusOnlyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectsCount.
const projectsCount_Operation = `
query projectsCount ($teamId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		projects {
			totalCount
		}
	}
}
`

func ProjectsCountQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
) (*ProjectsCountResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectsCount",
		Query:  projectsCount_Operation,
		Variables: &__projectsCountInput{
			TeamId: teamId,
		},
	}
	var err_ error

	var data_ ProjectsCountResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectsWithBlueprint.
const projectsWithBlueprint_Operation = `
query projectsWithBlueprint ($teamId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		projects {
			nodes {
				... ProjectWithBlueprint
			}
		}
	}
}
fragment ProjectWithBlueprint on Project {
	id
	blueprint {
		id
		type
		configuration {
			slug
			logoUrl
		}
	}
}
`

func ProjectsWithBlueprintQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
) (*ProjectsWithBlueprintResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectsWithBlueprint",
		Query:  projectsWithBlueprint_Operation,
		Variables: &__projectsWithBlueprintInput{
			TeamId: teamId,
		},
	}
	var err_ error

	var data_ ProjectsWithBlueprintResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectsWithDeploymentTimes.
const projectsWithDeploymentTimes_Operation = `
query projectsWithDeploymentTimes ($teamId: UUID!, $input: ProjectsInput!) @api(name: v1) {
	team(id: $teamId) {
		id
		projects(input: $input) {
			nodes {
				... ProjectWithDeploymentTime
			}
		}
	}
}
fragment ProjectWithDeploymentTime on Project {
	id
	deploymentTimestamps {
		lastUpdatedAt
	}
	updatedAt
}
`

func ProjectsWithDeploymentTimesQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	input ProjectsInput,
) (*ProjectsWithDeploymentTimesResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectsWithDeploymentTimes",
		Query:  projectsWithDeploymentTimes_Operation,
		Variables: &__projectsWithDeploymentTimesInput{
			TeamId: teamId,
			Input:  input,
		},
	}
	var err_ error

	var data_ ProjectsWithDeploymentTimesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by projectsWithStatus.
const projectsWithStatus_Operation = `
query projectsWithStatus ($teamId: UUID!, $input: ProjectsInput!) @api(name: v1) {
	team(id: $teamId) {
		id
		projects(input: $input) {
			nodes {
				... ProjectWithStatus
			}
		}
	}
}
fragment ProjectWithStatus on Project {
	id
	status
}
`

func ProjectsWithStatusQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	input ProjectsInput,
) (*ProjectsWithStatusResponse, error) {
	req_ := &graphql.Request{
		OpName: "projectsWithStatus",
		Query:  projectsWithStatus_Operation,
		Variables: &__projectsWithStatusInput{
			TeamId: teamId,
			Input:  input,
		},
	}
	var err_ error

	var data_ ProjectsWithStatusResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by resourceLogs.
const resourceLogs_Operation = `
query resourceLogs ($teamId: UUID!, $resourceId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		resource(id: $resourceId) {
			__typename
			... ResourceLogs
		}
	}
}
fragment ResourceLogs on Resource {
	externalId
	externalType
	externalLink
	displayName
	status
	... on ContainerResource {
		logs {
			id
			completed
			expired
			entries {
				text
				timestamp
			}
		}
	}
}
`

func ResourceLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	resourceId uuid.UUID,
) (*ResourceLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "resourceLogs",
		Query:  resourceLogs_Operation,
		Variables: &__resourceLogsInput{
			TeamId:     teamId,
			ResourceId: resourceId,
		},
	}
	var err_ error

	var data_ ResourceLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by resourcesWithLogs.
const resourcesWithLogs_Operation = `
query resourcesWithLogs ($teamId: UUID!, $projectId: UUID!, $clusterId: UUID!, $selector: ObservabilityResourceSelectorInput) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			resources(clusterId: $clusterId, selector: $selector) {
				... CloudResource
				resources {
					... CloudResource
					resources {
						... CloudResource
					}
				}
				log(clusterId: $clusterId, projectId: $projectId) {
					name
					entries {
						text
						timestamp
					}
				}
			}
		}
	}
}
fragment CloudResource on CloudResource {
	name
	status
	type
	createdAt
	owners {
		name
		type
	}
	events {
		type
		reason
		message
		action
		occurredAt
		firstOccurrenceAt
		lastOccurrenceAt
		count
	}
}
`

func ResourcesWithLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	clusterId uuid.UUID,
	selector ObservabilityResourceSelectorInput,
) (*ResourcesWithLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "resourcesWithLogs",
		Query:  resourcesWithLogs_Operation,
		Variables: &__resourcesWithLogsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			ClusterId: clusterId,
			Selector:  selector,
		},
	}
	var err_ error

	var data_ ResourcesWithLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by resourcesWithMetrics.
const resourcesWithMetrics_Operation = `
query resourcesWithMetrics ($teamId: UUID!, $projectId: UUID!, $clusterId: UUID!, $metricTypes: [MetricType!]!, $selector: ObservabilityResourceSelectorInput) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			resources(clusterId: $clusterId, selector: $selector) {
				... CloudResource
				resources {
					... CloudResource
					resources {
						... CloudResource
					}
				}
				metric(clusterId: $clusterId, projectId: $projectId, types: $metricTypes) {
					... ResourceMetric
				}
			}
		}
	}
}
fragment CloudResource on CloudResource {
	name
	status
	type
	createdAt
	owners {
		name
		type
	}
	events {
		type
		reason
		message
		action
		occurredAt
		firstOccurrenceAt
		lastOccurrenceAt
		count
	}
}
fragment ResourceMetric on ResourceMetric {
	type
	entries {
		value
		timestamp
	}
}
`

func ResourcesWithMetricsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	clusterId uuid.UUID,
	metricTypes []MetricType,
	selector ObservabilityResourceSelectorInput,
) (*ResourcesWithMetricsResponse, error) {
	req_ := &graphql.Request{
		OpName: "resourcesWithMetrics",
		Query:  resourcesWithMetrics_Operation,
		Variables: &__resourcesWithMetricsInput{
			TeamId:      teamId,
			ProjectId:   projectId,
			ClusterId:   clusterId,
			MetricTypes: metricTypes,
			Selector:    selector,
		},
	}
	var err_ error

	var data_ ResourcesWithMetricsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by submitWorkflowRun.
const submitWorkflowRun_Operation = `
mutation submitWorkflowRun ($workflowId: UUID!, $definition: WorkflowRunDefinitionInput) @api(name: v1) {
	submitWorkflow(input: {workflowId:$workflowId,definition:$definition}) {
		id
	}
}
`

func SubmitWorkflowRunMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	workflowId uuid.UUID,
	definition WorkflowRunDefinitionInput,
) (*SubmitWorkflowRunResponse, error) {
	req_ := &graphql.Request{
		OpName: "submitWorkflowRun",
		Query:  submitWorkflowRun_Operation,
		Variables: &__submitWorkflowRunInput{
			WorkflowId: workflowId,
			Definition: definition,
		},
	}
	var err_ error

	var data_ SubmitWorkflowRunResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by unlinkProject.
const unlinkProject_Operation = `
mutation unlinkProject ($id: UUID!) @api(name: v1) {
	unlinkProject(id: $id)
}
`

func UnlinkProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*UnlinkProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "unlinkProject",
		Query:  unlinkProject_Operation,
		Variables: &__unlinkProjectInput{
			Id: id,
		},
	}
	var err_ error

	var data_ UnlinkProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateDeploy.
const updateDeploy_Operation = `
mutation updateDeploy ($id: UUID!, $input: UpdateDeployInput!) @api(name: v1) {
	updateDeploy(id: $id, input: $input) {
		id
	}
}
`

func UpdateDeployMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateDeployInput,
) (*UpdateDeployResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateDeploy",
		Query:  updateDeploy_Operation,
		Variables: &__updateDeployInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateDeployResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateProject.
const updateProject_Operation = `
mutation updateProject ($id: UUID!, $input: UpdateProjectInput!) @api(name: v1) {
	updateProject(id: $id, input: $input) {
		id
		name
	}
}
`

func UpdateProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateProjectInput,
) (*UpdateProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateProject",
		Query:  updateProject_Operation,
		Variables: &__updateProjectInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateWorkflow.
const updateWorkflow_Operation = `
mutation updateWorkflow ($id: UUID!, $input: UpdateWorkflowInput!) @api(name: v1) {
	updateWorkflow(id: $id, input: $input) {
		id
	}
}
`

func UpdateWorkflowMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateWorkflowInput,
) (*UpdateWorkflowResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateWorkflow",
		Query:  updateWorkflow_Operation,
		Variables: &__updateWorkflowInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateWorkflowResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateWorkflowTrigger.
const updateWorkflowTrigger_Operation = `
mutation updateWorkflowTrigger ($id: UUID!, $input: UpdateTriggerInput!) @api(name: v1) {
	updateTrigger(id: $id, input: $input) {
		id
	}
}
`

func UpdateWorkflowTriggerMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	input UpdateTriggerInput,
) (*UpdateWorkflowTriggerResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateWorkflowTrigger",
		Query:  updateWorkflowTrigger_Operation,
		Variables: &__updateWorkflowTriggerInput{
			Id:    id,
			Input: input,
		},
	}
	var err_ error

	var data_ UpdateWorkflowTriggerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by userPersonalAccessTokens.
const userPersonalAccessTokens_Operation = `
query userPersonalAccessTokens ($id: UUID!) @api(name: v1) {
	user(id: $id) {
		id
		personalAccessTokens {
			id
			name
			token
			createdAt
		}
	}
}
`

func UserPersonalAccessTokensQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*UserPersonalAccessTokensResponse, error) {
	req_ := &graphql.Request{
		OpName: "userPersonalAccessTokens",
		Query:  userPersonalAccessTokens_Operation,
		Variables: &__userPersonalAccessTokensInput{
			Id: id,
		},
	}
	var err_ error

	var data_ UserPersonalAccessTokensResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by workflowDetail.
const workflowDetail_Operation = `
query workflowDetail ($teamId: UUID!, $projectId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		project(id: $projectId) {
			workflow {
				... WorkflowDetail
			}
		}
	}
}
fragment WorkflowDetail on Workflow {
	id
	steps {
		action
		sequenceNumber
		disabled
	}
	triggers {
		totalCount
		nodes {
			id
			action
			events
			configuration {
				event {
					git {
						repoId
						repoBranchName
						repoOwner
						repoName
						githubConnectionId
					}
				}
				action {
					workflowId
				}
			}
		}
	}
}
`

func WorkflowDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
) (*WorkflowDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "workflowDetail",
		Query:  workflowDetail_Operation,
		Variables: &__workflowDetailInput{
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ WorkflowDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by workflowRunDetail.
const workflowRunDetail_Operation = `
query workflowRunDetail ($teamId: UUID!, $projectId: UUID!, $runId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			workflow {
				id
				run(id: $runId) {
					... WorkflowRunDetail
				}
			}
		}
	}
}
fragment WorkflowRunDetail on WorkflowRun {
	... WorkflowRunListItem
	finishedAt
	steps {
		__typename
		... WorkflowRunStepDetail
	}
}
fragment WorkflowRunListItem on WorkflowRun {
	id
	sequence
	status
	createdAt
	steps {
		__typename
		id
		action
		dependsOn {
			__typename
			id
		}
		status
		sequenceNumber
		createdAt
		updatedAt
		executionId
		executionType
		... on BuildRunStep {
			outputs {
				id
				image
			}
		}
		... on DeployRunStep {
			workflowRun {
				id
				workflowId
				sequence
				status
				createdAt
				steps {
					__typename
					id
					action
					dependsOn {
						__typename
						id
					}
					status
					sequenceNumber
					createdAt
					updatedAt
					executionId
					executionType
				}
			}
		}
	}
}
fragment WorkflowRunStepDetail on WorkflowRunStep {
	id
	action
	dependsOn {
		__typename
		id
	}
	status
	sequenceNumber
	createdAt
	updatedAt
	executionId
	executionType
	executionError
	... on BuildRunStep {
		outputs {
			id
			image
		}
	}
	... on DeployRunStep {
		workflowRun {
			id
			workflowId
			sequence
			status
			createdAt
			steps {
				__typename
				id
				action
				dependsOn {
					__typename
					id
				}
				status
				sequenceNumber
				createdAt
				updatedAt
				executionId
				executionType
				executionError
			}
		}
	}
	... on ClusterPrecheckStep {
		cluster {
			... ClusterDetailV1
		}
	}
}
fragment ClusterDetailV1 on Cluster {
	id
	displayName
	state
	connected
	cloudProvider
	createdAt
	updatedAt
	updatedAt
	createdAt
}
`

func WorkflowRunDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	runId uuid.UUID,
) (*WorkflowRunDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "workflowRunDetail",
		Query:  workflowRunDetail_Operation,
		Variables: &__workflowRunDetailInput{
			TeamId:    teamId,
			ProjectId: projectId,
			RunId:     runId,
		},
	}
	var err_ error

	var data_ WorkflowRunDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by workflowRunDetailLogs.
const workflowRunDetailLogs_Operation = `
query workflowRunDetailLogs ($teamId: UUID!, $projectId: UUID!, $runId: UUID!, $stepId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			workflow {
				id
				run(id: $runId) {
					id
					step(id: $stepId) {
						__typename
						... on JobRunStep {
							logs {
								id
								completed
								expired
								entries {
									timestamp
									text
								}
							}
						}
						... on BuildRunStep {
							logs {
								id
								completed
								expired
								entries {
									timestamp
									text
								}
							}
						}
					}
				}
			}
		}
	}
}
`

func WorkflowRunDetailLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	runId uuid.UUID,
	stepId uuid.UUID,
) (*WorkflowRunDetailLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "workflowRunDetailLogs",
		Query:  workflowRunDetailLogs_Operation,
		Variables: &__workflowRunDetailLogsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			RunId:     runId,
			StepId:    stepId,
		},
	}
	var err_ error

	var data_ WorkflowRunDetailLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by workflowRunStepNestedDetail.
const workflowRunStepNestedDetail_Operation = `
query workflowRunStepNestedDetail ($teamId: UUID!, $projectId: UUID!, $runId: UUID!, $stepId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			workflow {
				id
				run(id: $runId) {
					id
					step(id: $stepId) {
						__typename
						id
						... on DeployRunStep {
							workflowRun {
								id
								workflowId
								sequence
								status
								createdAt
								steps {
									__typename
									id
									action
									dependsOn {
										__typename
										id
									}
									status
									sequenceNumber
									createdAt
									updatedAt
									executionId
									executionType
									executionError
								}
							}
						}
						... on DestroyRunStep {
							workflowRun {
								id
								workflowId
								sequence
								status
								createdAt
								steps {
									__typename
									id
									action
									dependsOn {
										__typename
										id
									}
									status
									sequenceNumber
									createdAt
									updatedAt
									executionId
									executionType
									executionError
								}
							}
						}
					}
				}
			}
		}
	}
}
`

func WorkflowRunStepNestedDetailQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	runId uuid.UUID,
	stepId uuid.UUID,
) (*WorkflowRunStepNestedDetailResponse, error) {
	req_ := &graphql.Request{
		OpName: "workflowRunStepNestedDetail",
		Query:  workflowRunStepNestedDetail_Operation,
		Variables: &__workflowRunStepNestedDetailInput{
			TeamId:    teamId,
			ProjectId: projectId,
			RunId:     runId,
			StepId:    stepId,
		},
	}
	var err_ error

	var data_ WorkflowRunStepNestedDetailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by workflowRunStepNestedDetailLogs.
const workflowRunStepNestedDetailLogs_Operation = `
query workflowRunStepNestedDetailLogs ($teamId: UUID!, $projectId: UUID!, $runId: UUID!, $stepId: UUID!, $actionStepId: UUID!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			workflow {
				id
				run(id: $runId) {
					id
					step(id: $stepId) {
						__typename
						id
						... on DeployRunStep {
							workflowRun {
								id
								sequence
								status
								createdAt
								step(id: $actionStepId) {
									__typename
									id
									... on JobRunStep {
										logs {
											id
											completed
											expired
											entries {
												timestamp
												text
											}
										}
									}
								}
							}
						}
						... on DestroyRunStep {
							workflowRun {
								id
								sequence
								status
								createdAt
								step(id: $actionStepId) {
									__typename
									id
									... on JobRunStep {
										logs {
											id
											completed
											expired
											entries {
												timestamp
												text
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
`

func WorkflowRunStepNestedDetailLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	runId uuid.UUID,
	stepId uuid.UUID,
	actionStepId uuid.UUID,
) (*WorkflowRunStepNestedDetailLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "workflowRunStepNestedDetailLogs",
		Query:  workflowRunStepNestedDetailLogs_Operation,
		Variables: &__workflowRunStepNestedDetailLogsInput{
			TeamId:       teamId,
			ProjectId:    projectId,
			RunId:        runId,
			StepId:       stepId,
			ActionStepId: actionStepId,
		},
	}
	var err_ error

	var data_ WorkflowRunStepNestedDetailLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by workflowRuns.
const workflowRuns_Operation = `
query workflowRuns ($teamId: UUID!, $projectId: UUID!, $page: PageInput!) @api(name: v1) {
	team(id: $teamId) {
		id
		project(id: $projectId) {
			id
			workflow {
				id
				runs(input: {page:$page,filter:{}}) {
					totalCount
					pageInfo {
						hasNextPage
					}
					nodes {
						... WorkflowRunListItem
					}
				}
			}
		}
	}
}
fragment WorkflowRunListItem on WorkflowRun {
	id
	sequence
	status
	createdAt
	steps {
		__typename
		id
		action
		dependsOn {
			__typename
			id
		}
		status
		sequenceNumber
		createdAt
		updatedAt
		executionId
		executionType
		... on BuildRunStep {
			outputs {
				id
				image
			}
		}
		... on DeployRunStep {
			workflowRun {
				id
				workflowId
				sequence
				status
				createdAt
				steps {
					__typename
					id
					action
					dependsOn {
						__typename
						id
					}
					status
					sequenceNumber
					createdAt
					updatedAt
					executionId
					executionType
				}
			}
		}
	}
}
`

func WorkflowRunsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	teamId uuid.UUID,
	projectId uuid.UUID,
	page PageInput,
) (*WorkflowRunsResponse, error) {
	req_ := &graphql.Request{
		OpName: "workflowRuns",
		Query:  workflowRuns_Operation,
		Variables: &__workflowRunsInput{
			TeamId:    teamId,
			ProjectId: projectId,
			Page:      page,
		},
	}
	var err_ error

	var data_ WorkflowRunsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
