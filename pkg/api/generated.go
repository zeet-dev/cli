// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

type AdapterStatusCriterion struct {
	Value []*string `json:"value,omitempty"`
}

// GetValue returns AdapterStatusCriterion.Value, and is useful for accessing the field via an interface.
func (v *AdapterStatusCriterion) GetValue() []*string { return v.Value }

// BlueprintConnection includes the requested fields of the GraphQL type BlueprintConnection.
type BlueprintConnection struct {
	TotalCount int                                 `json:"totalCount"`
	PageInfo   PageInfo                            `json:"pageInfo"`
	Nodes      []BlueprintConnectionNodesBlueprint `json:"nodes,omitempty"`
}

// GetTotalCount returns BlueprintConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *BlueprintConnection) GetTotalCount() int { return v.TotalCount }

// GetPageInfo returns BlueprintConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *BlueprintConnection) GetPageInfo() PageInfo { return v.PageInfo }

// GetNodes returns BlueprintConnection.Nodes, and is useful for accessing the field via an interface.
func (v *BlueprintConnection) GetNodes() []BlueprintConnectionNodesBlueprint { return v.Nodes }

// BlueprintConnectionNodesBlueprint includes the requested fields of the GraphQL type Blueprint.
type BlueprintConnectionNodesBlueprint struct {
	BlueprintSummary `json:"-"`
}

// GetId returns BlueprintConnectionNodesBlueprint.Id, and is useful for accessing the field via an interface.
func (v *BlueprintConnectionNodesBlueprint) GetId() uuid.UUID { return v.BlueprintSummary.Id }

// GetSlug returns BlueprintConnectionNodesBlueprint.Slug, and is useful for accessing the field via an interface.
func (v *BlueprintConnectionNodesBlueprint) GetSlug() string { return v.BlueprintSummary.Slug }

// GetDisplayName returns BlueprintConnectionNodesBlueprint.DisplayName, and is useful for accessing the field via an interface.
func (v *BlueprintConnectionNodesBlueprint) GetDisplayName() string {
	return v.BlueprintSummary.DisplayName
}

// GetDescription returns BlueprintConnectionNodesBlueprint.Description, and is useful for accessing the field via an interface.
func (v *BlueprintConnectionNodesBlueprint) GetDescription() string {
	return v.BlueprintSummary.Description
}

// GetType returns BlueprintConnectionNodesBlueprint.Type, and is useful for accessing the field via an interface.
func (v *BlueprintConnectionNodesBlueprint) GetType() BlueprintType { return v.BlueprintSummary.Type }

// GetProjectCount returns BlueprintConnectionNodesBlueprint.ProjectCount, and is useful for accessing the field via an interface.
func (v *BlueprintConnectionNodesBlueprint) GetProjectCount() int {
	return v.BlueprintSummary.ProjectCount
}

// GetRichInputSchema returns BlueprintConnectionNodesBlueprint.RichInputSchema, and is useful for accessing the field via an interface.
func (v *BlueprintConnectionNodesBlueprint) GetRichInputSchema() string {
	return v.BlueprintSummary.RichInputSchema
}

// GetTags returns BlueprintConnectionNodesBlueprint.Tags, and is useful for accessing the field via an interface.
func (v *BlueprintConnectionNodesBlueprint) GetTags() []string { return v.BlueprintSummary.Tags }

func (v *BlueprintConnectionNodesBlueprint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*BlueprintConnectionNodesBlueprint
		graphql.NoUnmarshalJSON
	}
	firstPass.BlueprintConnectionNodesBlueprint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintSummary)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalBlueprintConnectionNodesBlueprint struct {
	Id uuid.UUID `json:"id"`

	Slug string `json:"slug"`

	DisplayName string `json:"displayName"`

	Description string `json:"description"`

	Type BlueprintType `json:"type"`

	ProjectCount int `json:"projectCount"`

	RichInputSchema string `json:"richInputSchema"`

	Tags []string `json:"tags,omitempty"`
}

func (v *BlueprintConnectionNodesBlueprint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *BlueprintConnectionNodesBlueprint) __premarshalJSON() (*__premarshalBlueprintConnectionNodesBlueprint, error) {
	var retval __premarshalBlueprintConnectionNodesBlueprint

	retval.Id = v.BlueprintSummary.Id
	retval.Slug = v.BlueprintSummary.Slug
	retval.DisplayName = v.BlueprintSummary.DisplayName
	retval.Description = v.BlueprintSummary.Description
	retval.Type = v.BlueprintSummary.Type
	retval.ProjectCount = v.BlueprintSummary.ProjectCount
	retval.RichInputSchema = v.BlueprintSummary.RichInputSchema
	retval.Tags = v.BlueprintSummary.Tags
	return &retval, nil
}

type BlueprintDriverAction string

const (
	BlueprintDriverActionPlanDestroy BlueprintDriverAction = "PLAN_DESTROY"
	BlueprintDriverActionPlan        BlueprintDriverAction = "PLAN"
	BlueprintDriverActionApprove     BlueprintDriverAction = "APPROVE"
	BlueprintDriverActionApply       BlueprintDriverAction = "APPLY"
)

type BlueprintMetadataFilter struct {
	Name *StringCriterion `json:"name,omitempty"`
}

// GetName returns BlueprintMetadataFilter.Name, and is useful for accessing the field via an interface.
func (v *BlueprintMetadataFilter) GetName() *StringCriterion { return v.Name }

// BlueprintSummary includes the GraphQL fields of Blueprint requested by the fragment BlueprintSummary.
type BlueprintSummary struct {
	Id              uuid.UUID     `json:"id"`
	Slug            string        `json:"slug"`
	DisplayName     string        `json:"displayName"`
	Description     string        `json:"description"`
	Type            BlueprintType `json:"type"`
	ProjectCount    int           `json:"projectCount"`
	RichInputSchema string        `json:"richInputSchema"`
	Tags            []string      `json:"tags,omitempty"`
}

// GetId returns BlueprintSummary.Id, and is useful for accessing the field via an interface.
func (v *BlueprintSummary) GetId() uuid.UUID { return v.Id }

// GetSlug returns BlueprintSummary.Slug, and is useful for accessing the field via an interface.
func (v *BlueprintSummary) GetSlug() string { return v.Slug }

// GetDisplayName returns BlueprintSummary.DisplayName, and is useful for accessing the field via an interface.
func (v *BlueprintSummary) GetDisplayName() string { return v.DisplayName }

// GetDescription returns BlueprintSummary.Description, and is useful for accessing the field via an interface.
func (v *BlueprintSummary) GetDescription() string { return v.Description }

// GetType returns BlueprintSummary.Type, and is useful for accessing the field via an interface.
func (v *BlueprintSummary) GetType() BlueprintType { return v.Type }

// GetProjectCount returns BlueprintSummary.ProjectCount, and is useful for accessing the field via an interface.
func (v *BlueprintSummary) GetProjectCount() int { return v.ProjectCount }

// GetRichInputSchema returns BlueprintSummary.RichInputSchema, and is useful for accessing the field via an interface.
func (v *BlueprintSummary) GetRichInputSchema() string { return v.RichInputSchema }

// GetTags returns BlueprintSummary.Tags, and is useful for accessing the field via an interface.
func (v *BlueprintSummary) GetTags() []string { return v.Tags }

type BlueprintType string

const (
	BlueprintTypeTerraform          BlueprintType = "TERRAFORM"
	BlueprintTypeKubernetesManifest BlueprintType = "KUBERNETES_MANIFEST"
	BlueprintTypeHelm               BlueprintType = "HELM"
	BlueprintTypeZeetKubernetes     BlueprintType = "ZEET_KUBERNETES"
	BlueprintTypeZeetAwsLambda      BlueprintType = "ZEET_AWS_LAMBDA"
	BlueprintTypeZeetGcpCloudRun    BlueprintType = "ZEET_GCP_CLOUD_RUN"
)

type BooleanCriterion struct {
	Value *bool `json:"value,omitempty"`
}

// GetValue returns BooleanCriterion.Value, and is useful for accessing the field via an interface.
func (v *BooleanCriterion) GetValue() *bool { return v.Value }

// BuildRepoBuildRepo includes the requested fields of the GraphQL type Repo.
type BuildRepoBuildRepo struct {
	Deployments []BuildRepoBuildRepoDeploymentsDeployment `json:"deployments,omitempty"`
}

// GetDeployments returns BuildRepoBuildRepo.Deployments, and is useful for accessing the field via an interface.
func (v *BuildRepoBuildRepo) GetDeployments() []BuildRepoBuildRepoDeploymentsDeployment {
	return v.Deployments
}

// BuildRepoBuildRepoDeploymentsDeployment includes the requested fields of the GraphQL type Deployment.
type BuildRepoBuildRepoDeploymentsDeployment struct {
	Id              string           `json:"id"`
	Status          DeploymentStatus `json:"status"`
	Branch          string           `json:"branch"`
	Endpoints       []string         `json:"endpoints,omitempty"`
	PrivateEndpoint string           `json:"privateEndpoint"`
}

// GetId returns BuildRepoBuildRepoDeploymentsDeployment.Id, and is useful for accessing the field via an interface.
func (v *BuildRepoBuildRepoDeploymentsDeployment) GetId() string { return v.Id }

// GetStatus returns BuildRepoBuildRepoDeploymentsDeployment.Status, and is useful for accessing the field via an interface.
func (v *BuildRepoBuildRepoDeploymentsDeployment) GetStatus() DeploymentStatus { return v.Status }

// GetBranch returns BuildRepoBuildRepoDeploymentsDeployment.Branch, and is useful for accessing the field via an interface.
func (v *BuildRepoBuildRepoDeploymentsDeployment) GetBranch() string { return v.Branch }

// GetEndpoints returns BuildRepoBuildRepoDeploymentsDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *BuildRepoBuildRepoDeploymentsDeployment) GetEndpoints() []string { return v.Endpoints }

// GetPrivateEndpoint returns BuildRepoBuildRepoDeploymentsDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *BuildRepoBuildRepoDeploymentsDeployment) GetPrivateEndpoint() string {
	return v.PrivateEndpoint
}

// BuildRepoDefaultBranchBuildRepo includes the requested fields of the GraphQL type Repo.
type BuildRepoDefaultBranchBuildRepo struct {
	Deployments []BuildRepoDefaultBranchBuildRepoDeploymentsDeployment `json:"deployments,omitempty"`
}

// GetDeployments returns BuildRepoDefaultBranchBuildRepo.Deployments, and is useful for accessing the field via an interface.
func (v *BuildRepoDefaultBranchBuildRepo) GetDeployments() []BuildRepoDefaultBranchBuildRepoDeploymentsDeployment {
	return v.Deployments
}

// BuildRepoDefaultBranchBuildRepoDeploymentsDeployment includes the requested fields of the GraphQL type Deployment.
type BuildRepoDefaultBranchBuildRepoDeploymentsDeployment struct {
	Id              string           `json:"id"`
	Status          DeploymentStatus `json:"status"`
	Branch          string           `json:"branch"`
	Endpoints       []string         `json:"endpoints,omitempty"`
	PrivateEndpoint string           `json:"privateEndpoint"`
}

// GetId returns BuildRepoDefaultBranchBuildRepoDeploymentsDeployment.Id, and is useful for accessing the field via an interface.
func (v *BuildRepoDefaultBranchBuildRepoDeploymentsDeployment) GetId() string { return v.Id }

// GetStatus returns BuildRepoDefaultBranchBuildRepoDeploymentsDeployment.Status, and is useful for accessing the field via an interface.
func (v *BuildRepoDefaultBranchBuildRepoDeploymentsDeployment) GetStatus() DeploymentStatus {
	return v.Status
}

// GetBranch returns BuildRepoDefaultBranchBuildRepoDeploymentsDeployment.Branch, and is useful for accessing the field via an interface.
func (v *BuildRepoDefaultBranchBuildRepoDeploymentsDeployment) GetBranch() string { return v.Branch }

// GetEndpoints returns BuildRepoDefaultBranchBuildRepoDeploymentsDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *BuildRepoDefaultBranchBuildRepoDeploymentsDeployment) GetEndpoints() []string {
	return v.Endpoints
}

// GetPrivateEndpoint returns BuildRepoDefaultBranchBuildRepoDeploymentsDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *BuildRepoDefaultBranchBuildRepoDeploymentsDeployment) GetPrivateEndpoint() string {
	return v.PrivateEndpoint
}

// buildRepoDefaultBranchResponse is returned by buildRepoDefaultBranch on success.
type BuildRepoDefaultBranchResponse struct {
	BuildRepo BuildRepoDefaultBranchBuildRepo `json:"buildRepo"`
}

// GetBuildRepo returns BuildRepoDefaultBranchResponse.BuildRepo, and is useful for accessing the field via an interface.
func (v *BuildRepoDefaultBranchResponse) GetBuildRepo() BuildRepoDefaultBranchBuildRepo {
	return v.BuildRepo
}

// buildRepoResponse is returned by buildRepo on success.
type BuildRepoResponse struct {
	BuildRepo BuildRepoBuildRepo `json:"buildRepo"`
}

// GetBuildRepo returns BuildRepoResponse.BuildRepo, and is useful for accessing the field via an interface.
func (v *BuildRepoResponse) GetBuildRepo() BuildRepoBuildRepo { return v.BuildRepo }

type CloudProvider string

const (
	CloudProviderUnknown   CloudProvider = "UNKNOWN"
	CloudProviderZeet      CloudProvider = "ZEET"
	CloudProviderAws       CloudProvider = "AWS"
	CloudProviderAzure     CloudProvider = "AZURE"
	CloudProviderGcp       CloudProvider = "GCP"
	CloudProviderAlibaba   CloudProvider = "ALIBABA"
	CloudProviderOci       CloudProvider = "OCI"
	CloudProviderIbm       CloudProvider = "IBM"
	CloudProviderTencent   CloudProvider = "TENCENT"
	CloudProviderDo        CloudProvider = "DO"
	CloudProviderCoreweave CloudProvider = "COREWEAVE"
	CloudProviderOvh       CloudProvider = "OVH"
	CloudProviderLinode    CloudProvider = "LINODE"
	CloudProviderVultr     CloudProvider = "VULTR"
	CloudProviderScaleway  CloudProvider = "SCALEWAY"
)

type ClusterProvider string

const (
	ClusterProviderGeneric   ClusterProvider = "GENERIC"
	ClusterProviderEks       ClusterProvider = "EKS"
	ClusterProviderGke       ClusterProvider = "GKE"
	ClusterProviderDoks      ClusterProvider = "DOKS"
	ClusterProviderCoreweave ClusterProvider = "COREWEAVE"
	ClusterProviderLke       ClusterProvider = "LKE"
	ClusterProviderVke       ClusterProvider = "VKE"
)

// deleteBlueprintResponse is returned by deleteBlueprint on success.
type DeleteBlueprintResponse struct {
	DeleteBlueprint bool `json:"deleteBlueprint"`
}

// GetDeleteBlueprint returns DeleteBlueprintResponse.DeleteBlueprint, and is useful for accessing the field via an interface.
func (v *DeleteBlueprintResponse) GetDeleteBlueprint() bool { return v.DeleteBlueprint }

// deleteResponse is returned by delete on success.
type DeleteResponse struct {
	DeleteRepo bool `json:"deleteRepo"`
}

// GetDeleteRepo returns DeleteResponse.DeleteRepo, and is useful for accessing the field via an interface.
func (v *DeleteResponse) GetDeleteRepo() bool { return v.DeleteRepo }

// DeployRepoBranchDeployRepoBranchRepo includes the requested fields of the GraphQL type Repo.
type DeployRepoBranchDeployRepoBranchRepo struct {
	Deployments []DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment `json:"deployments,omitempty"`
}

// GetDeployments returns DeployRepoBranchDeployRepoBranchRepo.Deployments, and is useful for accessing the field via an interface.
func (v *DeployRepoBranchDeployRepoBranchRepo) GetDeployments() []DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment {
	return v.Deployments
}

// DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment includes the requested fields of the GraphQL type Deployment.
type DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment struct {
	Id              string           `json:"id"`
	Status          DeploymentStatus `json:"status"`
	Branch          string           `json:"branch"`
	Endpoints       []string         `json:"endpoints,omitempty"`
	PrivateEndpoint string           `json:"privateEndpoint"`
}

// GetId returns DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment.Id, and is useful for accessing the field via an interface.
func (v *DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment) GetId() string { return v.Id }

// GetStatus returns DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment.Status, and is useful for accessing the field via an interface.
func (v *DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment) GetStatus() DeploymentStatus {
	return v.Status
}

// GetBranch returns DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment.Branch, and is useful for accessing the field via an interface.
func (v *DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment) GetBranch() string {
	return v.Branch
}

// GetEndpoints returns DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment) GetEndpoints() []string {
	return v.Endpoints
}

// GetPrivateEndpoint returns DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *DeployRepoBranchDeployRepoBranchRepoDeploymentsDeployment) GetPrivateEndpoint() string {
	return v.PrivateEndpoint
}

// deployRepoBranchResponse is returned by deployRepoBranch on success.
type DeployRepoBranchResponse struct {
	DeployRepoBranch DeployRepoBranchDeployRepoBranchRepo `json:"deployRepoBranch"`
}

// GetDeployRepoBranch returns DeployRepoBranchResponse.DeployRepoBranch, and is useful for accessing the field via an interface.
func (v *DeployRepoBranchResponse) GetDeployRepoBranch() DeployRepoBranchDeployRepoBranchRepo {
	return v.DeployRepoBranch
}

type DeployableDriverActionExecutionFilter struct {
	Ids         *MultiEntityCriterion      `json:"ids,omitempty"`
	ActionTypes *DriverActionTypeCriterion `json:"actionTypes,omitempty"`
	ResourceIds *MultiEntityCriterion      `json:"resourceIds,omitempty"`
}

// GetIds returns DeployableDriverActionExecutionFilter.Ids, and is useful for accessing the field via an interface.
func (v *DeployableDriverActionExecutionFilter) GetIds() *MultiEntityCriterion { return v.Ids }

// GetActionTypes returns DeployableDriverActionExecutionFilter.ActionTypes, and is useful for accessing the field via an interface.
func (v *DeployableDriverActionExecutionFilter) GetActionTypes() *DriverActionTypeCriterion {
	return v.ActionTypes
}

// GetResourceIds returns DeployableDriverActionExecutionFilter.ResourceIds, and is useful for accessing the field via an interface.
func (v *DeployableDriverActionExecutionFilter) GetResourceIds() *MultiEntityCriterion {
	return v.ResourceIds
}

type DeploymentStatus string

const (
	DeploymentStatusBuildPending      DeploymentStatus = "BUILD_PENDING"
	DeploymentStatusBuildInProgress   DeploymentStatus = "BUILD_IN_PROGRESS"
	DeploymentStatusBuildFailed       DeploymentStatus = "BUILD_FAILED"
	DeploymentStatusBuildSucceeded    DeploymentStatus = "BUILD_SUCCEEDED"
	DeploymentStatusDeployPending     DeploymentStatus = "DEPLOY_PENDING"
	DeploymentStatusDeployInProgress  DeploymentStatus = "DEPLOY_IN_PROGRESS"
	DeploymentStatusReleaseInProgress DeploymentStatus = "RELEASE_IN_PROGRESS"
	DeploymentStatusDeployFailed      DeploymentStatus = "DEPLOY_FAILED"
	DeploymentStatusDeploySucceeded   DeploymentStatus = "DEPLOY_SUCCEEDED"
	DeploymentStatusBuildAborted      DeploymentStatus = "BUILD_ABORTED"
	DeploymentStatusDeployStopped     DeploymentStatus = "DEPLOY_STOPPED"
	DeploymentStatusDeployHealhty     DeploymentStatus = "DEPLOY_HEALHTY"
	DeploymentStatusDeployCrashing    DeploymentStatus = "DEPLOY_CRASHING"
)

type DriverActionTypeCriterion struct {
	Value    []*BlueprintDriverAction     `json:"value,omitempty"`
	Operator *FilterCriterionOperatorType `json:"operator,omitempty"`
}

// GetValue returns DriverActionTypeCriterion.Value, and is useful for accessing the field via an interface.
func (v *DriverActionTypeCriterion) GetValue() []*BlueprintDriverAction { return v.Value }

// GetOperator returns DriverActionTypeCriterion.Operator, and is useful for accessing the field via an interface.
func (v *DriverActionTypeCriterion) GetOperator() *FilterCriterionOperatorType { return v.Operator }

type EnvVarInput struct {
	Name   string `json:"name"`
	Value  string `json:"value"`
	Sealed bool   `json:"sealed"`
}

// GetName returns EnvVarInput.Name, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetName() string { return v.Name }

// GetValue returns EnvVarInput.Value, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetValue() string { return v.Value }

// GetSealed returns EnvVarInput.Sealed, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetSealed() bool { return v.Sealed }

type FilterCriterion struct {
	UserFilter                            *UserFilter                            `json:"userFilter,omitempty"`
	ResourceFilter                        *ResourceFilter                        `json:"resourceFilter,omitempty"`
	RepoFilter                            *RepoFilter                            `json:"repoFilter,omitempty"`
	DeployableDriverActionExecutionFilter *DeployableDriverActionExecutionFilter `json:"deployableDriverActionExecutionFilter,omitempty"`
	ResourceAdapterFilter                 *ResourceAdapterFilter                 `json:"resourceAdapterFilter,omitempty"`
	BlueprintMetadataFilter               *BlueprintMetadataFilter               `json:"blueprintMetadataFilter,omitempty"`
}

// GetUserFilter returns FilterCriterion.UserFilter, and is useful for accessing the field via an interface.
func (v *FilterCriterion) GetUserFilter() *UserFilter { return v.UserFilter }

// GetResourceFilter returns FilterCriterion.ResourceFilter, and is useful for accessing the field via an interface.
func (v *FilterCriterion) GetResourceFilter() *ResourceFilter { return v.ResourceFilter }

// GetRepoFilter returns FilterCriterion.RepoFilter, and is useful for accessing the field via an interface.
func (v *FilterCriterion) GetRepoFilter() *RepoFilter { return v.RepoFilter }

// GetDeployableDriverActionExecutionFilter returns FilterCriterion.DeployableDriverActionExecutionFilter, and is useful for accessing the field via an interface.
func (v *FilterCriterion) GetDeployableDriverActionExecutionFilter() *DeployableDriverActionExecutionFilter {
	return v.DeployableDriverActionExecutionFilter
}

// GetResourceAdapterFilter returns FilterCriterion.ResourceAdapterFilter, and is useful for accessing the field via an interface.
func (v *FilterCriterion) GetResourceAdapterFilter() *ResourceAdapterFilter {
	return v.ResourceAdapterFilter
}

// GetBlueprintMetadataFilter returns FilterCriterion.BlueprintMetadataFilter, and is useful for accessing the field via an interface.
func (v *FilterCriterion) GetBlueprintMetadataFilter() *BlueprintMetadataFilter {
	return v.BlueprintMetadataFilter
}

type FilterCriterionOperatorType string

const (
	FilterCriterionOperatorTypeEquals    FilterCriterionOperatorType = "EQUALS"
	FilterCriterionOperatorTypeNotEquals FilterCriterionOperatorType = "NOT_EQUALS"
	FilterCriterionOperatorTypeIncludes  FilterCriterionOperatorType = "INCLUDES"
	FilterCriterionOperatorTypeExcludes  FilterCriterionOperatorType = "EXCLUDES"
	FilterCriterionOperatorTypeStarts    FilterCriterionOperatorType = "STARTS"
	FilterCriterionOperatorTypeEnds      FilterCriterionOperatorType = "ENDS"
	FilterCriterionOperatorTypeContains  FilterCriterionOperatorType = "CONTAINS"
)

type FilterExpression struct {
	Operator *FilterExpressionOperator `json:"operator,omitempty"`
	Filters  []*FilterNode             `json:"filters,omitempty"`
}

// GetOperator returns FilterExpression.Operator, and is useful for accessing the field via an interface.
func (v *FilterExpression) GetOperator() *FilterExpressionOperator { return v.Operator }

// GetFilters returns FilterExpression.Filters, and is useful for accessing the field via an interface.
func (v *FilterExpression) GetFilters() []*FilterNode { return v.Filters }

type FilterExpressionOperator string

const (
	FilterExpressionOperatorAnd FilterExpressionOperator = "AND"
	FilterExpressionOperatorOr  FilterExpressionOperator = "OR"
	FilterExpressionOperatorNot FilterExpressionOperator = "NOT"
)

type FilterInput struct {
	Sort   *SortInput  `json:"sort,omitempty"`
	Page   *PageInput  `json:"page,omitempty"`
	Filter *FilterNode `json:"filter,omitempty"`
}

// GetSort returns FilterInput.Sort, and is useful for accessing the field via an interface.
func (v *FilterInput) GetSort() *SortInput { return v.Sort }

// GetPage returns FilterInput.Page, and is useful for accessing the field via an interface.
func (v *FilterInput) GetPage() *PageInput { return v.Page }

// GetFilter returns FilterInput.Filter, and is useful for accessing the field via an interface.
func (v *FilterInput) GetFilter() *FilterNode { return v.Filter }

type FilterNode struct {
	Expression *FilterExpression `json:"expression,omitempty"`
	Criterion  *FilterCriterion  `json:"criterion,omitempty"`
}

// GetExpression returns FilterNode.Expression, and is useful for accessing the field via an interface.
func (v *FilterNode) GetExpression() *FilterExpression { return v.Expression }

// GetCriterion returns FilterNode.Criterion, and is useful for accessing the field via an interface.
func (v *FilterNode) GetCriterion() *FilterCriterion { return v.Criterion }

// getBlueprintResponse is returned by getBlueprint on success.
type GetBlueprintResponse struct {
	User GetBlueprintUser `json:"user"`
}

// GetUser returns GetBlueprintResponse.User, and is useful for accessing the field via an interface.
func (v *GetBlueprintResponse) GetUser() GetBlueprintUser { return v.User }

// GetBlueprintUser includes the requested fields of the GraphQL type User.
type GetBlueprintUser struct {
	Blueprint GetBlueprintUserBlueprint `json:"blueprint"`
}

// GetBlueprint returns GetBlueprintUser.Blueprint, and is useful for accessing the field via an interface.
func (v *GetBlueprintUser) GetBlueprint() GetBlueprintUserBlueprint { return v.Blueprint }

// GetBlueprintUserBlueprint includes the requested fields of the GraphQL type Blueprint.
type GetBlueprintUserBlueprint struct {
	BlueprintSummary `json:"-"`
}

// GetId returns GetBlueprintUserBlueprint.Id, and is useful for accessing the field via an interface.
func (v *GetBlueprintUserBlueprint) GetId() uuid.UUID { return v.BlueprintSummary.Id }

// GetSlug returns GetBlueprintUserBlueprint.Slug, and is useful for accessing the field via an interface.
func (v *GetBlueprintUserBlueprint) GetSlug() string { return v.BlueprintSummary.Slug }

// GetDisplayName returns GetBlueprintUserBlueprint.DisplayName, and is useful for accessing the field via an interface.
func (v *GetBlueprintUserBlueprint) GetDisplayName() string { return v.BlueprintSummary.DisplayName }

// GetDescription returns GetBlueprintUserBlueprint.Description, and is useful for accessing the field via an interface.
func (v *GetBlueprintUserBlueprint) GetDescription() string { return v.BlueprintSummary.Description }

// GetType returns GetBlueprintUserBlueprint.Type, and is useful for accessing the field via an interface.
func (v *GetBlueprintUserBlueprint) GetType() BlueprintType { return v.BlueprintSummary.Type }

// GetProjectCount returns GetBlueprintUserBlueprint.ProjectCount, and is useful for accessing the field via an interface.
func (v *GetBlueprintUserBlueprint) GetProjectCount() int { return v.BlueprintSummary.ProjectCount }

// GetRichInputSchema returns GetBlueprintUserBlueprint.RichInputSchema, and is useful for accessing the field via an interface.
func (v *GetBlueprintUserBlueprint) GetRichInputSchema() string {
	return v.BlueprintSummary.RichInputSchema
}

// GetTags returns GetBlueprintUserBlueprint.Tags, and is useful for accessing the field via an interface.
func (v *GetBlueprintUserBlueprint) GetTags() []string { return v.BlueprintSummary.Tags }

func (v *GetBlueprintUserBlueprint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetBlueprintUserBlueprint
		graphql.NoUnmarshalJSON
	}
	firstPass.GetBlueprintUserBlueprint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.BlueprintSummary)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetBlueprintUserBlueprint struct {
	Id uuid.UUID `json:"id"`

	Slug string `json:"slug"`

	DisplayName string `json:"displayName"`

	Description string `json:"description"`

	Type BlueprintType `json:"type"`

	ProjectCount int `json:"projectCount"`

	RichInputSchema string `json:"richInputSchema"`

	Tags []string `json:"tags,omitempty"`
}

func (v *GetBlueprintUserBlueprint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetBlueprintUserBlueprint) __premarshalJSON() (*__premarshalGetBlueprintUserBlueprint, error) {
	var retval __premarshalGetBlueprintUserBlueprint

	retval.Id = v.BlueprintSummary.Id
	retval.Slug = v.BlueprintSummary.Slug
	retval.DisplayName = v.BlueprintSummary.DisplayName
	retval.Description = v.BlueprintSummary.Description
	retval.Type = v.BlueprintSummary.Type
	retval.ProjectCount = v.BlueprintSummary.ProjectCount
	retval.RichInputSchema = v.BlueprintSummary.RichInputSchema
	retval.Tags = v.BlueprintSummary.Tags
	return &retval, nil
}

// getBlueprintsResponse is returned by getBlueprints on success.
type GetBlueprintsResponse struct {
	User GetBlueprintsUser `json:"user"`
}

// GetUser returns GetBlueprintsResponse.User, and is useful for accessing the field via an interface.
func (v *GetBlueprintsResponse) GetUser() GetBlueprintsUser { return v.User }

// GetBlueprintsUser includes the requested fields of the GraphQL type User.
type GetBlueprintsUser struct {
	Blueprints BlueprintConnection `json:"blueprints"`
}

// GetBlueprints returns GetBlueprintsUser.Blueprints, and is useful for accessing the field via an interface.
func (v *GetBlueprintsUser) GetBlueprints() BlueprintConnection { return v.Blueprints }

// GetBuildLogsCurrentUser includes the requested fields of the GraphQL type User.
type GetBuildLogsCurrentUser struct {
	Deployment GetBuildLogsCurrentUserDeployment `json:"deployment"`
}

// GetDeployment returns GetBuildLogsCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *GetBuildLogsCurrentUser) GetDeployment() GetBuildLogsCurrentUserDeployment {
	return v.Deployment
}

// GetBuildLogsCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type GetBuildLogsCurrentUserDeployment struct {
	Build GetBuildLogsCurrentUserDeploymentBuild `json:"build"`
}

// GetBuild returns GetBuildLogsCurrentUserDeployment.Build, and is useful for accessing the field via an interface.
func (v *GetBuildLogsCurrentUserDeployment) GetBuild() GetBuildLogsCurrentUserDeploymentBuild {
	return v.Build
}

// GetBuildLogsCurrentUserDeploymentBuild includes the requested fields of the GraphQL type Build.
type GetBuildLogsCurrentUserDeploymentBuild struct {
	Logs GetBuildLogsCurrentUserDeploymentBuildLogs `json:"logs"`
}

// GetLogs returns GetBuildLogsCurrentUserDeploymentBuild.Logs, and is useful for accessing the field via an interface.
func (v *GetBuildLogsCurrentUserDeploymentBuild) GetLogs() GetBuildLogsCurrentUserDeploymentBuildLogs {
	return v.Logs
}

// GetBuildLogsCurrentUserDeploymentBuildLogs includes the requested fields of the GraphQL type Logs.
type GetBuildLogsCurrentUserDeploymentBuildLogs struct {
	Entries []GetBuildLogsCurrentUserDeploymentBuildLogsEntriesLogEntry `json:"entries,omitempty"`
}

// GetEntries returns GetBuildLogsCurrentUserDeploymentBuildLogs.Entries, and is useful for accessing the field via an interface.
func (v *GetBuildLogsCurrentUserDeploymentBuildLogs) GetEntries() []GetBuildLogsCurrentUserDeploymentBuildLogsEntriesLogEntry {
	return v.Entries
}

// GetBuildLogsCurrentUserDeploymentBuildLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type GetBuildLogsCurrentUserDeploymentBuildLogsEntriesLogEntry struct {
	Text      string    `json:"text"`
	Timestamp time.Time `json:"timestamp"`
}

// GetText returns GetBuildLogsCurrentUserDeploymentBuildLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *GetBuildLogsCurrentUserDeploymentBuildLogsEntriesLogEntry) GetText() string { return v.Text }

// GetTimestamp returns GetBuildLogsCurrentUserDeploymentBuildLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *GetBuildLogsCurrentUserDeploymentBuildLogsEntriesLogEntry) GetTimestamp() time.Time {
	return v.Timestamp
}

// getBuildLogsResponse is returned by getBuildLogs on success.
type GetBuildLogsResponse struct {
	CurrentUser GetBuildLogsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns GetBuildLogsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *GetBuildLogsResponse) GetCurrentUser() GetBuildLogsCurrentUser { return v.CurrentUser }

// GetCloudAWSCurrentUser includes the requested fields of the GraphQL type User.
type GetCloudAWSCurrentUser struct {
	AwsAccount GetCloudAWSCurrentUserAwsAccountAWSAccount `json:"awsAccount"`
}

// GetAwsAccount returns GetCloudAWSCurrentUser.AwsAccount, and is useful for accessing the field via an interface.
func (v *GetCloudAWSCurrentUser) GetAwsAccount() GetCloudAWSCurrentUserAwsAccountAWSAccount {
	return v.AwsAccount
}

// GetCloudAWSCurrentUserAwsAccountAWSAccount includes the requested fields of the GraphQL type AWSAccount.
type GetCloudAWSCurrentUserAwsAccountAWSAccount struct {
	Id         uuid.UUID `json:"id"`
	RoleARN    string    `json:"roleARN"`
	ExternalID string    `json:"externalID"`
}

// GetId returns GetCloudAWSCurrentUserAwsAccountAWSAccount.Id, and is useful for accessing the field via an interface.
func (v *GetCloudAWSCurrentUserAwsAccountAWSAccount) GetId() uuid.UUID { return v.Id }

// GetRoleARN returns GetCloudAWSCurrentUserAwsAccountAWSAccount.RoleARN, and is useful for accessing the field via an interface.
func (v *GetCloudAWSCurrentUserAwsAccountAWSAccount) GetRoleARN() string { return v.RoleARN }

// GetExternalID returns GetCloudAWSCurrentUserAwsAccountAWSAccount.ExternalID, and is useful for accessing the field via an interface.
func (v *GetCloudAWSCurrentUserAwsAccountAWSAccount) GetExternalID() string { return v.ExternalID }

// GetCloudAWSResponse is returned by GetCloudAWS on success.
type GetCloudAWSResponse struct {
	CurrentUser GetCloudAWSCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns GetCloudAWSResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *GetCloudAWSResponse) GetCurrentUser() GetCloudAWSCurrentUser { return v.CurrentUser }

// GetCloudDigitalOceanCurrentUser includes the requested fields of the GraphQL type User.
type GetCloudDigitalOceanCurrentUser struct {
	DoAccount GetCloudDigitalOceanCurrentUserDoAccountDOAccount `json:"doAccount"`
}

// GetDoAccount returns GetCloudDigitalOceanCurrentUser.DoAccount, and is useful for accessing the field via an interface.
func (v *GetCloudDigitalOceanCurrentUser) GetDoAccount() GetCloudDigitalOceanCurrentUserDoAccountDOAccount {
	return v.DoAccount
}

// GetCloudDigitalOceanCurrentUserDoAccountDOAccount includes the requested fields of the GraphQL type DOAccount.
type GetCloudDigitalOceanCurrentUserDoAccountDOAccount struct {
	Id          uuid.UUID `json:"id"`
	AccessToken string    `json:"accessToken"`
}

// GetId returns GetCloudDigitalOceanCurrentUserDoAccountDOAccount.Id, and is useful for accessing the field via an interface.
func (v *GetCloudDigitalOceanCurrentUserDoAccountDOAccount) GetId() uuid.UUID { return v.Id }

// GetAccessToken returns GetCloudDigitalOceanCurrentUserDoAccountDOAccount.AccessToken, and is useful for accessing the field via an interface.
func (v *GetCloudDigitalOceanCurrentUserDoAccountDOAccount) GetAccessToken() string {
	return v.AccessToken
}

// GetCloudDigitalOceanResponse is returned by GetCloudDigitalOcean on success.
type GetCloudDigitalOceanResponse struct {
	CurrentUser GetCloudDigitalOceanCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns GetCloudDigitalOceanResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *GetCloudDigitalOceanResponse) GetCurrentUser() GetCloudDigitalOceanCurrentUser {
	return v.CurrentUser
}

// GetCloudGCPCurrentUser includes the requested fields of the GraphQL type User.
type GetCloudGCPCurrentUser struct {
	GcpAccount GetCloudGCPCurrentUserGcpAccountGCPAccount `json:"gcpAccount"`
}

// GetGcpAccount returns GetCloudGCPCurrentUser.GcpAccount, and is useful for accessing the field via an interface.
func (v *GetCloudGCPCurrentUser) GetGcpAccount() GetCloudGCPCurrentUserGcpAccountGCPAccount {
	return v.GcpAccount
}

// GetCloudGCPCurrentUserGcpAccountGCPAccount includes the requested fields of the GraphQL type GCPAccount.
type GetCloudGCPCurrentUserGcpAccountGCPAccount struct {
	Id          uuid.UUID `json:"id"`
	ProjectID   string    `json:"projectID"`
	Credentials string    `json:"credentials"`
}

// GetId returns GetCloudGCPCurrentUserGcpAccountGCPAccount.Id, and is useful for accessing the field via an interface.
func (v *GetCloudGCPCurrentUserGcpAccountGCPAccount) GetId() uuid.UUID { return v.Id }

// GetProjectID returns GetCloudGCPCurrentUserGcpAccountGCPAccount.ProjectID, and is useful for accessing the field via an interface.
func (v *GetCloudGCPCurrentUserGcpAccountGCPAccount) GetProjectID() string { return v.ProjectID }

// GetCredentials returns GetCloudGCPCurrentUserGcpAccountGCPAccount.Credentials, and is useful for accessing the field via an interface.
func (v *GetCloudGCPCurrentUserGcpAccountGCPAccount) GetCredentials() string { return v.Credentials }

// GetCloudGCPResponse is returned by GetCloudGCP on success.
type GetCloudGCPResponse struct {
	CurrentUser GetCloudGCPCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns GetCloudGCPResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *GetCloudGCPResponse) GetCurrentUser() GetCloudGCPCurrentUser { return v.CurrentUser }

// GetCloudLinodeCurrentUser includes the requested fields of the GraphQL type User.
type GetCloudLinodeCurrentUser struct {
	LinodeAccount GetCloudLinodeCurrentUserLinodeAccount `json:"linodeAccount"`
}

// GetLinodeAccount returns GetCloudLinodeCurrentUser.LinodeAccount, and is useful for accessing the field via an interface.
func (v *GetCloudLinodeCurrentUser) GetLinodeAccount() GetCloudLinodeCurrentUserLinodeAccount {
	return v.LinodeAccount
}

// GetCloudLinodeCurrentUserLinodeAccount includes the requested fields of the GraphQL type LinodeAccount.
type GetCloudLinodeCurrentUserLinodeAccount struct {
	Id          uuid.UUID `json:"id"`
	AccessToken string    `json:"accessToken"`
}

// GetId returns GetCloudLinodeCurrentUserLinodeAccount.Id, and is useful for accessing the field via an interface.
func (v *GetCloudLinodeCurrentUserLinodeAccount) GetId() uuid.UUID { return v.Id }

// GetAccessToken returns GetCloudLinodeCurrentUserLinodeAccount.AccessToken, and is useful for accessing the field via an interface.
func (v *GetCloudLinodeCurrentUserLinodeAccount) GetAccessToken() string { return v.AccessToken }

// GetCloudLinodeResponse is returned by GetCloudLinode on success.
type GetCloudLinodeResponse struct {
	CurrentUser GetCloudLinodeCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns GetCloudLinodeResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *GetCloudLinodeResponse) GetCurrentUser() GetCloudLinodeCurrentUser { return v.CurrentUser }

// GetClusterKubeconfigCurrentUser includes the requested fields of the GraphQL type User.
type GetClusterKubeconfigCurrentUser struct {
	Cluster GetClusterKubeconfigCurrentUserCluster `json:"cluster"`
}

// GetCluster returns GetClusterKubeconfigCurrentUser.Cluster, and is useful for accessing the field via an interface.
func (v *GetClusterKubeconfigCurrentUser) GetCluster() GetClusterKubeconfigCurrentUserCluster {
	return v.Cluster
}

// GetClusterKubeconfigCurrentUserCluster includes the requested fields of the GraphQL type Cluster.
type GetClusterKubeconfigCurrentUserCluster struct {
	Id         uuid.UUID `json:"id"`
	Name       string    `json:"name"`
	Kubeconfig string    `json:"kubeconfig"`
}

// GetId returns GetClusterKubeconfigCurrentUserCluster.Id, and is useful for accessing the field via an interface.
func (v *GetClusterKubeconfigCurrentUserCluster) GetId() uuid.UUID { return v.Id }

// GetName returns GetClusterKubeconfigCurrentUserCluster.Name, and is useful for accessing the field via an interface.
func (v *GetClusterKubeconfigCurrentUserCluster) GetName() string { return v.Name }

// GetKubeconfig returns GetClusterKubeconfigCurrentUserCluster.Kubeconfig, and is useful for accessing the field via an interface.
func (v *GetClusterKubeconfigCurrentUserCluster) GetKubeconfig() string { return v.Kubeconfig }

// getClusterKubeconfigResponse is returned by getClusterKubeconfig on success.
type GetClusterKubeconfigResponse struct {
	CurrentUser GetClusterKubeconfigCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns GetClusterKubeconfigResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *GetClusterKubeconfigResponse) GetCurrentUser() GetClusterKubeconfigCurrentUser {
	return v.CurrentUser
}

// GetCurrentUserCurrentUser includes the requested fields of the GraphQL type User.
type GetCurrentUserCurrentUser struct {
	Id    string `json:"id"`
	Login string `json:"login"`
}

// GetId returns GetCurrentUserCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *GetCurrentUserCurrentUser) GetId() string { return v.Id }

// GetLogin returns GetCurrentUserCurrentUser.Login, and is useful for accessing the field via an interface.
func (v *GetCurrentUserCurrentUser) GetLogin() string { return v.Login }

// getCurrentUserResponse is returned by getCurrentUser on success.
type GetCurrentUserResponse struct {
	CurrentUser GetCurrentUserCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns GetCurrentUserResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *GetCurrentUserResponse) GetCurrentUser() GetCurrentUserCurrentUser { return v.CurrentUser }

// GetDeploymentInfoCurrentUser includes the requested fields of the GraphQL type User.
type GetDeploymentInfoCurrentUser struct {
	Deployment GetDeploymentInfoCurrentUserDeployment `json:"deployment"`
}

// GetDeployment returns GetDeploymentInfoCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *GetDeploymentInfoCurrentUser) GetDeployment() GetDeploymentInfoCurrentUserDeployment {
	return v.Deployment
}

// GetDeploymentInfoCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type GetDeploymentInfoCurrentUserDeployment struct {
	Id              string           `json:"id"`
	Status          DeploymentStatus `json:"status"`
	Endpoints       []string         `json:"endpoints,omitempty"`
	PrivateEndpoint string           `json:"privateEndpoint"`
	ErrorMessage    string           `json:"errorMessage"`
}

// GetId returns GetDeploymentInfoCurrentUserDeployment.Id, and is useful for accessing the field via an interface.
func (v *GetDeploymentInfoCurrentUserDeployment) GetId() string { return v.Id }

// GetStatus returns GetDeploymentInfoCurrentUserDeployment.Status, and is useful for accessing the field via an interface.
func (v *GetDeploymentInfoCurrentUserDeployment) GetStatus() DeploymentStatus { return v.Status }

// GetEndpoints returns GetDeploymentInfoCurrentUserDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *GetDeploymentInfoCurrentUserDeployment) GetEndpoints() []string { return v.Endpoints }

// GetPrivateEndpoint returns GetDeploymentInfoCurrentUserDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *GetDeploymentInfoCurrentUserDeployment) GetPrivateEndpoint() string {
	return v.PrivateEndpoint
}

// GetErrorMessage returns GetDeploymentInfoCurrentUserDeployment.ErrorMessage, and is useful for accessing the field via an interface.
func (v *GetDeploymentInfoCurrentUserDeployment) GetErrorMessage() string { return v.ErrorMessage }

// getDeploymentInfoResponse is returned by getDeploymentInfo on success.
type GetDeploymentInfoResponse struct {
	CurrentUser GetDeploymentInfoCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns GetDeploymentInfoResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *GetDeploymentInfoResponse) GetCurrentUser() GetDeploymentInfoCurrentUser {
	return v.CurrentUser
}

// GetDeploymentLogsCurrentUser includes the requested fields of the GraphQL type User.
type GetDeploymentLogsCurrentUser struct {
	Deployment GetDeploymentLogsCurrentUserDeployment `json:"deployment"`
}

// GetDeployment returns GetDeploymentLogsCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *GetDeploymentLogsCurrentUser) GetDeployment() GetDeploymentLogsCurrentUserDeployment {
	return v.Deployment
}

// GetDeploymentLogsCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type GetDeploymentLogsCurrentUserDeployment struct {
	DeployStep GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStep `json:"deployStep"`
}

// GetDeployStep returns GetDeploymentLogsCurrentUserDeployment.DeployStep, and is useful for accessing the field via an interface.
func (v *GetDeploymentLogsCurrentUserDeployment) GetDeployStep() GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStep {
	return v.DeployStep
}

// GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStep includes the requested fields of the GraphQL type PipelineStep.
type GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStep struct {
	Logs GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogs `json:"logs"`
}

// GetLogs returns GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStep.Logs, and is useful for accessing the field via an interface.
func (v *GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStep) GetLogs() GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogs {
	return v.Logs
}

// GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogs includes the requested fields of the GraphQL type Logs.
type GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogs struct {
	Entries []GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogsEntriesLogEntry `json:"entries,omitempty"`
}

// GetEntries returns GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogs.Entries, and is useful for accessing the field via an interface.
func (v *GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogs) GetEntries() []GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogsEntriesLogEntry {
	return v.Entries
}

// GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogsEntriesLogEntry struct {
	Text      string    `json:"text"`
	Timestamp time.Time `json:"timestamp"`
}

// GetText returns GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogsEntriesLogEntry) GetText() string {
	return v.Text
}

// GetTimestamp returns GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *GetDeploymentLogsCurrentUserDeploymentDeployStepPipelineStepLogsEntriesLogEntry) GetTimestamp() time.Time {
	return v.Timestamp
}

// getDeploymentLogsResponse is returned by getDeploymentLogs on success.
type GetDeploymentLogsResponse struct {
	CurrentUser GetDeploymentLogsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns GetDeploymentLogsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *GetDeploymentLogsResponse) GetCurrentUser() GetDeploymentLogsCurrentUser {
	return v.CurrentUser
}

// GetDeploymentReplicaStatusCurrentUser includes the requested fields of the GraphQL type User.
type GetDeploymentReplicaStatusCurrentUser struct {
	Deployment GetDeploymentReplicaStatusCurrentUserDeployment `json:"deployment"`
}

// GetDeployment returns GetDeploymentReplicaStatusCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *GetDeploymentReplicaStatusCurrentUser) GetDeployment() GetDeploymentReplicaStatusCurrentUserDeployment {
	return v.Deployment
}

// GetDeploymentReplicaStatusCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type GetDeploymentReplicaStatusCurrentUserDeployment struct {
	DeployStatus GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus `json:"deployStatus"`
}

// GetDeployStatus returns GetDeploymentReplicaStatusCurrentUserDeployment.DeployStatus, and is useful for accessing the field via an interface.
func (v *GetDeploymentReplicaStatusCurrentUserDeployment) GetDeployStatus() GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus {
	return v.DeployStatus
}

// GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus includes the requested fields of the GraphQL type DeployStatus.
type GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus struct {
	Replicas        int    `json:"replicas"`
	ReadyReplicas   int    `json:"readyReplicas"`
	RunningReplicas int    `json:"runningReplicas"`
	State           string `json:"state"`
	ErrorMessage    string `json:"errorMessage"`
}

// GetReplicas returns GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus.Replicas, and is useful for accessing the field via an interface.
func (v *GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus) GetReplicas() int {
	return v.Replicas
}

// GetReadyReplicas returns GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus.ReadyReplicas, and is useful for accessing the field via an interface.
func (v *GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus) GetReadyReplicas() int {
	return v.ReadyReplicas
}

// GetRunningReplicas returns GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus.RunningReplicas, and is useful for accessing the field via an interface.
func (v *GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus) GetRunningReplicas() int {
	return v.RunningReplicas
}

// GetState returns GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus.State, and is useful for accessing the field via an interface.
func (v *GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus) GetState() string {
	return v.State
}

// GetErrorMessage returns GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus.ErrorMessage, and is useful for accessing the field via an interface.
func (v *GetDeploymentReplicaStatusCurrentUserDeploymentDeployStatus) GetErrorMessage() string {
	return v.ErrorMessage
}

// getDeploymentReplicaStatusResponse is returned by getDeploymentReplicaStatus on success.
type GetDeploymentReplicaStatusResponse struct {
	CurrentUser GetDeploymentReplicaStatusCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns GetDeploymentReplicaStatusResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *GetDeploymentReplicaStatusResponse) GetCurrentUser() GetDeploymentReplicaStatusCurrentUser {
	return v.CurrentUser
}

// GetEnvVarsCurrentUser includes the requested fields of the GraphQL type User.
type GetEnvVarsCurrentUser struct {
	Repo GetEnvVarsCurrentUserRepo `json:"repo"`
}

// GetRepo returns GetEnvVarsCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *GetEnvVarsCurrentUser) GetRepo() GetEnvVarsCurrentUserRepo { return v.Repo }

// GetEnvVarsCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type GetEnvVarsCurrentUserRepo struct {
	Envs []GetEnvVarsCurrentUserRepoEnvsEnvVar `json:"envs,omitempty"`
}

// GetEnvs returns GetEnvVarsCurrentUserRepo.Envs, and is useful for accessing the field via an interface.
func (v *GetEnvVarsCurrentUserRepo) GetEnvs() []GetEnvVarsCurrentUserRepoEnvsEnvVar { return v.Envs }

// GetEnvVarsCurrentUserRepoEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type GetEnvVarsCurrentUserRepoEnvsEnvVar struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns GetEnvVarsCurrentUserRepoEnvsEnvVar.Name, and is useful for accessing the field via an interface.
func (v *GetEnvVarsCurrentUserRepoEnvsEnvVar) GetName() string { return v.Name }

// GetValue returns GetEnvVarsCurrentUserRepoEnvsEnvVar.Value, and is useful for accessing the field via an interface.
func (v *GetEnvVarsCurrentUserRepoEnvsEnvVar) GetValue() string { return v.Value }

// getEnvVarsResponse is returned by getEnvVars on success.
type GetEnvVarsResponse struct {
	CurrentUser GetEnvVarsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns GetEnvVarsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *GetEnvVarsResponse) GetCurrentUser() GetEnvVarsCurrentUser { return v.CurrentUser }

// GetJobLogsRepo includes the requested fields of the GraphQL type Repo.
type GetJobLogsRepo struct {
	JobRun GetJobLogsRepoJobRun `json:"jobRun"`
}

// GetJobRun returns GetJobLogsRepo.JobRun, and is useful for accessing the field via an interface.
func (v *GetJobLogsRepo) GetJobRun() GetJobLogsRepoJobRun { return v.JobRun }

// GetJobLogsRepoJobRun includes the requested fields of the GraphQL type JobRun.
type GetJobLogsRepoJobRun struct {
	Logs GetJobLogsRepoJobRunLogs `json:"logs"`
}

// GetLogs returns GetJobLogsRepoJobRun.Logs, and is useful for accessing the field via an interface.
func (v *GetJobLogsRepoJobRun) GetLogs() GetJobLogsRepoJobRunLogs { return v.Logs }

// GetJobLogsRepoJobRunLogs includes the requested fields of the GraphQL type Logs.
type GetJobLogsRepoJobRunLogs struct {
	Entries []GetJobLogsRepoJobRunLogsEntriesLogEntry `json:"entries,omitempty"`
}

// GetEntries returns GetJobLogsRepoJobRunLogs.Entries, and is useful for accessing the field via an interface.
func (v *GetJobLogsRepoJobRunLogs) GetEntries() []GetJobLogsRepoJobRunLogsEntriesLogEntry {
	return v.Entries
}

// GetJobLogsRepoJobRunLogsEntriesLogEntry includes the requested fields of the GraphQL type LogEntry.
type GetJobLogsRepoJobRunLogsEntriesLogEntry struct {
	Text      string    `json:"text"`
	Timestamp time.Time `json:"timestamp"`
}

// GetText returns GetJobLogsRepoJobRunLogsEntriesLogEntry.Text, and is useful for accessing the field via an interface.
func (v *GetJobLogsRepoJobRunLogsEntriesLogEntry) GetText() string { return v.Text }

// GetTimestamp returns GetJobLogsRepoJobRunLogsEntriesLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *GetJobLogsRepoJobRunLogsEntriesLogEntry) GetTimestamp() time.Time { return v.Timestamp }

// getJobLogsResponse is returned by getJobLogs on success.
type GetJobLogsResponse struct {
	Repo GetJobLogsRepo `json:"repo"`
}

// GetRepo returns GetJobLogsResponse.Repo, and is useful for accessing the field via an interface.
func (v *GetJobLogsResponse) GetRepo() GetJobLogsRepo { return v.Repo }

// GetJobRepo includes the requested fields of the GraphQL type Repo.
type GetJobRepo struct {
	JobRun GetJobRepoJobRun `json:"jobRun"`
}

// GetJobRun returns GetJobRepo.JobRun, and is useful for accessing the field via an interface.
func (v *GetJobRepo) GetJobRun() GetJobRepoJobRun { return v.JobRun }

// GetJobRepoJobRun includes the requested fields of the GraphQL type JobRun.
type GetJobRepoJobRun struct {
	Id    uuid.UUID   `json:"id"`
	State JobRunState `json:"state"`
}

// GetId returns GetJobRepoJobRun.Id, and is useful for accessing the field via an interface.
func (v *GetJobRepoJobRun) GetId() uuid.UUID { return v.Id }

// GetState returns GetJobRepoJobRun.State, and is useful for accessing the field via an interface.
func (v *GetJobRepoJobRun) GetState() JobRunState { return v.State }

// getJobResponse is returned by getJob on success.
type GetJobResponse struct {
	Repo GetJobRepo `json:"repo"`
}

// GetRepo returns GetJobResponse.Repo, and is useful for accessing the field via an interface.
func (v *GetJobResponse) GetRepo() GetJobRepo { return v.Repo }

// GetLatestDeploymentRepo includes the requested fields of the GraphQL type Repo.
type GetLatestDeploymentRepo struct {
	Branch GetLatestDeploymentRepoBranchRepoBranchV2 `json:"branch"`
}

// GetBranch returns GetLatestDeploymentRepo.Branch, and is useful for accessing the field via an interface.
func (v *GetLatestDeploymentRepo) GetBranch() GetLatestDeploymentRepoBranchRepoBranchV2 {
	return v.Branch
}

// GetLatestDeploymentRepoBranchRepoBranchV2 includes the requested fields of the GraphQL type RepoBranchV2.
type GetLatestDeploymentRepoBranchRepoBranchV2 struct {
	LatestDeployment GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment `json:"latestDeployment"`
}

// GetLatestDeployment returns GetLatestDeploymentRepoBranchRepoBranchV2.LatestDeployment, and is useful for accessing the field via an interface.
func (v *GetLatestDeploymentRepoBranchRepoBranchV2) GetLatestDeployment() GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment {
	return v.LatestDeployment
}

// GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment includes the requested fields of the GraphQL type Deployment.
type GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment struct {
	Id              string           `json:"id"`
	Status          DeploymentStatus `json:"status"`
	Branch          string           `json:"branch"`
	Endpoints       []string         `json:"endpoints,omitempty"`
	PrivateEndpoint string           `json:"privateEndpoint"`
}

// GetId returns GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment.Id, and is useful for accessing the field via an interface.
func (v *GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment) GetId() string { return v.Id }

// GetStatus returns GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment.Status, and is useful for accessing the field via an interface.
func (v *GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment) GetStatus() DeploymentStatus {
	return v.Status
}

// GetBranch returns GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment.Branch, and is useful for accessing the field via an interface.
func (v *GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment) GetBranch() string {
	return v.Branch
}

// GetEndpoints returns GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment) GetEndpoints() []string {
	return v.Endpoints
}

// GetPrivateEndpoint returns GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *GetLatestDeploymentRepoBranchRepoBranchV2LatestDeployment) GetPrivateEndpoint() string {
	return v.PrivateEndpoint
}

// getLatestDeploymentResponse is returned by getLatestDeployment on success.
type GetLatestDeploymentResponse struct {
	Repo GetLatestDeploymentRepo `json:"repo"`
}

// GetRepo returns GetLatestDeploymentResponse.Repo, and is useful for accessing the field via an interface.
func (v *GetLatestDeploymentResponse) GetRepo() GetLatestDeploymentRepo { return v.Repo }

// GetProductionBranchCurrentUser includes the requested fields of the GraphQL type User.
type GetProductionBranchCurrentUser struct {
	Repo GetProductionBranchCurrentUserRepo `json:"repo"`
}

// GetRepo returns GetProductionBranchCurrentUser.Repo, and is useful for accessing the field via an interface.
func (v *GetProductionBranchCurrentUser) GetRepo() GetProductionBranchCurrentUserRepo { return v.Repo }

// GetProductionBranchCurrentUserRepo includes the requested fields of the GraphQL type Repo.
type GetProductionBranchCurrentUserRepo struct {
	// - v0.RepoID
	Id                 string                                                           `json:"id"`
	ProductionBranchV2 GetProductionBranchCurrentUserRepoProductionBranchV2RepoBranchV2 `json:"productionBranchV2"`
}

// GetId returns GetProductionBranchCurrentUserRepo.Id, and is useful for accessing the field via an interface.
func (v *GetProductionBranchCurrentUserRepo) GetId() string { return v.Id }

// GetProductionBranchV2 returns GetProductionBranchCurrentUserRepo.ProductionBranchV2, and is useful for accessing the field via an interface.
func (v *GetProductionBranchCurrentUserRepo) GetProductionBranchV2() GetProductionBranchCurrentUserRepoProductionBranchV2RepoBranchV2 {
	return v.ProductionBranchV2
}

// GetProductionBranchCurrentUserRepoProductionBranchV2RepoBranchV2 includes the requested fields of the GraphQL type RepoBranchV2.
type GetProductionBranchCurrentUserRepoProductionBranchV2RepoBranchV2 struct {
	Name string `json:"name"`
}

// GetName returns GetProductionBranchCurrentUserRepoProductionBranchV2RepoBranchV2.Name, and is useful for accessing the field via an interface.
func (v *GetProductionBranchCurrentUserRepoProductionBranchV2RepoBranchV2) GetName() string {
	return v.Name
}

// getProductionBranchResponse is returned by getProductionBranch on success.
type GetProductionBranchResponse struct {
	CurrentUser GetProductionBranchCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns GetProductionBranchResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *GetProductionBranchResponse) GetCurrentUser() GetProductionBranchCurrentUser {
	return v.CurrentUser
}

// GetProductionDeploymentRepo includes the requested fields of the GraphQL type Repo.
type GetProductionDeploymentRepo struct {
	ProductionDeployment GetProductionDeploymentRepoProductionDeployment `json:"productionDeployment"`
}

// GetProductionDeployment returns GetProductionDeploymentRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *GetProductionDeploymentRepo) GetProductionDeployment() GetProductionDeploymentRepoProductionDeployment {
	return v.ProductionDeployment
}

// GetProductionDeploymentRepoProductionDeployment includes the requested fields of the GraphQL type Deployment.
type GetProductionDeploymentRepoProductionDeployment struct {
	Id              string           `json:"id"`
	Status          DeploymentStatus `json:"status"`
	Endpoints       []string         `json:"endpoints,omitempty"`
	PrivateEndpoint string           `json:"privateEndpoint"`
}

// GetId returns GetProductionDeploymentRepoProductionDeployment.Id, and is useful for accessing the field via an interface.
func (v *GetProductionDeploymentRepoProductionDeployment) GetId() string { return v.Id }

// GetStatus returns GetProductionDeploymentRepoProductionDeployment.Status, and is useful for accessing the field via an interface.
func (v *GetProductionDeploymentRepoProductionDeployment) GetStatus() DeploymentStatus {
	return v.Status
}

// GetEndpoints returns GetProductionDeploymentRepoProductionDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *GetProductionDeploymentRepoProductionDeployment) GetEndpoints() []string { return v.Endpoints }

// GetPrivateEndpoint returns GetProductionDeploymentRepoProductionDeployment.PrivateEndpoint, and is useful for accessing the field via an interface.
func (v *GetProductionDeploymentRepoProductionDeployment) GetPrivateEndpoint() string {
	return v.PrivateEndpoint
}

// getProductionDeploymentResponse is returned by getProductionDeployment on success.
type GetProductionDeploymentResponse struct {
	Repo GetProductionDeploymentRepo `json:"repo"`
}

// GetRepo returns GetProductionDeploymentResponse.Repo, and is useful for accessing the field via an interface.
func (v *GetProductionDeploymentResponse) GetRepo() GetProductionDeploymentRepo { return v.Repo }

// GetProjectByPathRepo includes the requested fields of the GraphQL type Repo.
type GetProjectByPathRepo struct {
	// - v0.RepoID
	Id string `json:"id"`
}

// GetId returns GetProjectByPathRepo.Id, and is useful for accessing the field via an interface.
func (v *GetProjectByPathRepo) GetId() string { return v.Id }

// getProjectByPathResponse is returned by getProjectByPath on success.
type GetProjectByPathResponse struct {
	Repo GetProjectByPathRepo `json:"repo"`
}

// GetRepo returns GetProjectByPathResponse.Repo, and is useful for accessing the field via an interface.
func (v *GetProjectByPathResponse) GetRepo() GetProjectByPathRepo { return v.Repo }

// GetProjectPathRepo includes the requested fields of the GraphQL type Repo.
type GetProjectPathRepo struct {
	FullPath string `json:"fullPath"`
}

// GetFullPath returns GetProjectPathRepo.FullPath, and is useful for accessing the field via an interface.
func (v *GetProjectPathRepo) GetFullPath() string { return v.FullPath }

// getProjectPathResponse is returned by getProjectPath on success.
type GetProjectPathResponse struct {
	Repo GetProjectPathRepo `json:"repo"`
}

// GetRepo returns GetProjectPathResponse.Repo, and is useful for accessing the field via an interface.
func (v *GetProjectPathResponse) GetRepo() GetProjectPathRepo { return v.Repo }

// getProjectV3sResponse is returned by getProjectV3s on success.
type GetProjectV3sResponse struct {
	User *GetProjectV3sUser `json:"user,omitempty"`
}

// GetUser returns GetProjectV3sResponse.User, and is useful for accessing the field via an interface.
func (v *GetProjectV3sResponse) GetUser() *GetProjectV3sUser { return v.User }

// GetProjectV3sUser includes the requested fields of the GraphQL type User.
type GetProjectV3sUser struct {
	ProjectV3Adapters *ProjectV3AdapterConnection `json:"projectV3Adapters,omitempty"`
}

// GetProjectV3Adapters returns GetProjectV3sUser.ProjectV3Adapters, and is useful for accessing the field via an interface.
func (v *GetProjectV3sUser) GetProjectV3Adapters() *ProjectV3AdapterConnection {
	return v.ProjectV3Adapters
}

// GetRepoRepo includes the requested fields of the GraphQL type Repo.
type GetRepoRepo struct {
	// - v0.RepoID
	Id string `json:"id"`
}

// GetId returns GetRepoRepo.Id, and is useful for accessing the field via an interface.
func (v *GetRepoRepo) GetId() string { return v.Id }

// getRepoResponse is returned by getRepo on success.
type GetRepoResponse struct {
	Repo GetRepoRepo `json:"repo"`
}

// GetRepo returns GetRepoResponse.Repo, and is useful for accessing the field via an interface.
func (v *GetRepoResponse) GetRepo() GetRepoRepo { return v.Repo }

// GetRuntimeLogsCurrentUser includes the requested fields of the GraphQL type User.
type GetRuntimeLogsCurrentUser struct {
	Deployment GetRuntimeLogsCurrentUserDeployment `json:"deployment"`
}

// GetDeployment returns GetRuntimeLogsCurrentUser.Deployment, and is useful for accessing the field via an interface.
func (v *GetRuntimeLogsCurrentUser) GetDeployment() GetRuntimeLogsCurrentUserDeployment {
	return v.Deployment
}

// GetRuntimeLogsCurrentUserDeployment includes the requested fields of the GraphQL type Deployment.
type GetRuntimeLogsCurrentUserDeployment struct {
	Logs []GetRuntimeLogsCurrentUserDeploymentLogsLogEntry `json:"logs,omitempty"`
}

// GetLogs returns GetRuntimeLogsCurrentUserDeployment.Logs, and is useful for accessing the field via an interface.
func (v *GetRuntimeLogsCurrentUserDeployment) GetLogs() []GetRuntimeLogsCurrentUserDeploymentLogsLogEntry {
	return v.Logs
}

// GetRuntimeLogsCurrentUserDeploymentLogsLogEntry includes the requested fields of the GraphQL type LogEntry.
type GetRuntimeLogsCurrentUserDeploymentLogsLogEntry struct {
	Text      string    `json:"text"`
	Timestamp time.Time `json:"timestamp"`
}

// GetText returns GetRuntimeLogsCurrentUserDeploymentLogsLogEntry.Text, and is useful for accessing the field via an interface.
func (v *GetRuntimeLogsCurrentUserDeploymentLogsLogEntry) GetText() string { return v.Text }

// GetTimestamp returns GetRuntimeLogsCurrentUserDeploymentLogsLogEntry.Timestamp, and is useful for accessing the field via an interface.
func (v *GetRuntimeLogsCurrentUserDeploymentLogsLogEntry) GetTimestamp() time.Time {
	return v.Timestamp
}

// getRuntimeLogsResponse is returned by getRuntimeLogs on success.
type GetRuntimeLogsResponse struct {
	CurrentUser GetRuntimeLogsCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns GetRuntimeLogsResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *GetRuntimeLogsResponse) GetCurrentUser() GetRuntimeLogsCurrentUser { return v.CurrentUser }

type JobRunState string

const (
	JobRunStateJobRunStarting        JobRunState = "JOB_RUN_STARTING"
	JobRunStateJobRunRunning         JobRunState = "JOB_RUN_RUNNING"
	JobRunStateJobRunFailed          JobRunState = "JOB_RUN_FAILED"
	JobRunStateJobRunSucceeded       JobRunState = "JOB_RUN_SUCCEEDED"
	JobRunStateJobRunPendingApproval JobRunState = "JOB_RUN_PENDING_APPROVAL"
	JobRunStateJobRunPendingBuild    JobRunState = "JOB_RUN_PENDING_BUILD"
)

// ListClustersCurrentUser includes the requested fields of the GraphQL type User.
type ListClustersCurrentUser struct {
	Clusters []ListClustersCurrentUserClustersCluster `json:"clusters,omitempty"`
}

// GetClusters returns ListClustersCurrentUser.Clusters, and is useful for accessing the field via an interface.
func (v *ListClustersCurrentUser) GetClusters() []ListClustersCurrentUserClustersCluster {
	return v.Clusters
}

// ListClustersCurrentUserClustersCluster includes the requested fields of the GraphQL type Cluster.
type ListClustersCurrentUserClustersCluster struct {
	Id              uuid.UUID       `json:"id"`
	Name            string          `json:"name"`
	CloudProvider   CloudProvider   `json:"cloudProvider"`
	ClusterProvider ClusterProvider `json:"clusterProvider"`
	Region          string          `json:"region"`
	Connected       bool            `json:"connected"`
}

// GetId returns ListClustersCurrentUserClustersCluster.Id, and is useful for accessing the field via an interface.
func (v *ListClustersCurrentUserClustersCluster) GetId() uuid.UUID { return v.Id }

// GetName returns ListClustersCurrentUserClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *ListClustersCurrentUserClustersCluster) GetName() string { return v.Name }

// GetCloudProvider returns ListClustersCurrentUserClustersCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *ListClustersCurrentUserClustersCluster) GetCloudProvider() CloudProvider {
	return v.CloudProvider
}

// GetClusterProvider returns ListClustersCurrentUserClustersCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *ListClustersCurrentUserClustersCluster) GetClusterProvider() ClusterProvider {
	return v.ClusterProvider
}

// GetRegion returns ListClustersCurrentUserClustersCluster.Region, and is useful for accessing the field via an interface.
func (v *ListClustersCurrentUserClustersCluster) GetRegion() string { return v.Region }

// GetConnected returns ListClustersCurrentUserClustersCluster.Connected, and is useful for accessing the field via an interface.
func (v *ListClustersCurrentUserClustersCluster) GetConnected() bool { return v.Connected }

// listClustersForTeamResponse is returned by listClustersForTeam on success.
type ListClustersForTeamResponse struct {
	Team ListClustersForTeamTeam `json:"team"`
}

// GetTeam returns ListClustersForTeamResponse.Team, and is useful for accessing the field via an interface.
func (v *ListClustersForTeamResponse) GetTeam() ListClustersForTeamTeam { return v.Team }

// ListClustersForTeamTeam includes the requested fields of the GraphQL type Team.
type ListClustersForTeamTeam struct {
	User ListClustersForTeamTeamUser `json:"user"`
}

// GetUser returns ListClustersForTeamTeam.User, and is useful for accessing the field via an interface.
func (v *ListClustersForTeamTeam) GetUser() ListClustersForTeamTeamUser { return v.User }

// ListClustersForTeamTeamUser includes the requested fields of the GraphQL type User.
type ListClustersForTeamTeamUser struct {
	Clusters []ListClustersForTeamTeamUserClustersCluster `json:"clusters,omitempty"`
}

// GetClusters returns ListClustersForTeamTeamUser.Clusters, and is useful for accessing the field via an interface.
func (v *ListClustersForTeamTeamUser) GetClusters() []ListClustersForTeamTeamUserClustersCluster {
	return v.Clusters
}

// ListClustersForTeamTeamUserClustersCluster includes the requested fields of the GraphQL type Cluster.
type ListClustersForTeamTeamUserClustersCluster struct {
	Id              uuid.UUID       `json:"id"`
	Name            string          `json:"name"`
	CloudProvider   CloudProvider   `json:"cloudProvider"`
	ClusterProvider ClusterProvider `json:"clusterProvider"`
	Region          string          `json:"region"`
	Connected       bool            `json:"connected"`
}

// GetId returns ListClustersForTeamTeamUserClustersCluster.Id, and is useful for accessing the field via an interface.
func (v *ListClustersForTeamTeamUserClustersCluster) GetId() uuid.UUID { return v.Id }

// GetName returns ListClustersForTeamTeamUserClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *ListClustersForTeamTeamUserClustersCluster) GetName() string { return v.Name }

// GetCloudProvider returns ListClustersForTeamTeamUserClustersCluster.CloudProvider, and is useful for accessing the field via an interface.
func (v *ListClustersForTeamTeamUserClustersCluster) GetCloudProvider() CloudProvider {
	return v.CloudProvider
}

// GetClusterProvider returns ListClustersForTeamTeamUserClustersCluster.ClusterProvider, and is useful for accessing the field via an interface.
func (v *ListClustersForTeamTeamUserClustersCluster) GetClusterProvider() ClusterProvider {
	return v.ClusterProvider
}

// GetRegion returns ListClustersForTeamTeamUserClustersCluster.Region, and is useful for accessing the field via an interface.
func (v *ListClustersForTeamTeamUserClustersCluster) GetRegion() string { return v.Region }

// GetConnected returns ListClustersForTeamTeamUserClustersCluster.Connected, and is useful for accessing the field via an interface.
func (v *ListClustersForTeamTeamUserClustersCluster) GetConnected() bool { return v.Connected }

// listClustersResponse is returned by listClusters on success.
type ListClustersResponse struct {
	CurrentUser ListClustersCurrentUser `json:"currentUser"`
}

// GetCurrentUser returns ListClustersResponse.CurrentUser, and is useful for accessing the field via an interface.
func (v *ListClustersResponse) GetCurrentUser() ListClustersCurrentUser { return v.CurrentUser }

type MultiEntityCriterion struct {
	Value []*uuid.UUID `json:"value,omitempty"`
}

// GetValue returns MultiEntityCriterion.Value, and is useful for accessing the field via an interface.
func (v *MultiEntityCriterion) GetValue() []*uuid.UUID { return v.Value }

// PageInfo includes the requested fields of the GraphQL type PageInfo.
type PageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns PageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *PageInfo) GetStartCursor() string { return v.StartCursor }

// GetEndCursor returns PageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *PageInfo) GetEndCursor() string { return v.EndCursor }

// GetHasNextPage returns PageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetHasPreviousPage returns PageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *PageInfo) GetHasPreviousPage() bool { return v.HasPreviousPage }

type PageInput struct {
	First  int     `json:"first"`
	Last   *int    `json:"last,omitempty"`
	After  string  `json:"after"`
	Before *string `json:"before,omitempty"`
	Filter *string `json:"filter,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// GetFirst returns PageInput.First, and is useful for accessing the field via an interface.
func (v *PageInput) GetFirst() int { return v.First }

// GetLast returns PageInput.Last, and is useful for accessing the field via an interface.
func (v *PageInput) GetLast() *int { return v.Last }

// GetAfter returns PageInput.After, and is useful for accessing the field via an interface.
func (v *PageInput) GetAfter() string { return v.After }

// GetBefore returns PageInput.Before, and is useful for accessing the field via an interface.
func (v *PageInput) GetBefore() *string { return v.Before }

// GetFilter returns PageInput.Filter, and is useful for accessing the field via an interface.
func (v *PageInput) GetFilter() *string { return v.Filter }

// GetSort returns PageInput.Sort, and is useful for accessing the field via an interface.
func (v *PageInput) GetSort() *string { return v.Sort }

// ProjectV3AdapterConnection includes the requested fields of the GraphQL type ProjectV3AdapterConnection.
type ProjectV3AdapterConnection struct {
	TotalCount *int                                               `json:"totalCount,omitempty"`
	PageInfo   *PageInfo                                          `json:"pageInfo,omitempty"`
	Nodes      []*ProjectV3AdapterConnectionNodesProjectV3Adapter `json:"nodes,omitempty"`
}

// GetTotalCount returns ProjectV3AdapterConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnection) GetTotalCount() *int { return v.TotalCount }

// GetPageInfo returns ProjectV3AdapterConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnection) GetPageInfo() *PageInfo { return v.PageInfo }

// GetNodes returns ProjectV3AdapterConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnection) GetNodes() []*ProjectV3AdapterConnectionNodesProjectV3Adapter {
	return v.Nodes
}

// ProjectV3AdapterConnectionNodesProjectV3Adapter includes the requested fields of the GraphQL type ProjectV3Adapter.
type ProjectV3AdapterConnectionNodesProjectV3Adapter struct {
	ProjectV3AdapterSummary `json:"-"`
}

// GetId returns ProjectV3AdapterConnectionNodesProjectV3Adapter.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionNodesProjectV3Adapter) GetId() uuid.UUID {
	return v.ProjectV3AdapterSummary.Id
}

// GetName returns ProjectV3AdapterConnectionNodesProjectV3Adapter.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionNodesProjectV3Adapter) GetName() string {
	return v.ProjectV3AdapterSummary.Name
}

// GetProjectV3 returns ProjectV3AdapterConnectionNodesProjectV3Adapter.ProjectV3, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionNodesProjectV3Adapter) GetProjectV3() ProjectV3AdapterSummaryProjectV3 {
	return v.ProjectV3AdapterSummary.ProjectV3
}

// GetRepo returns ProjectV3AdapterConnectionNodesProjectV3Adapter.Repo, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterConnectionNodesProjectV3Adapter) GetRepo() ProjectV3AdapterSummaryRepo {
	return v.ProjectV3AdapterSummary.Repo
}

func (v *ProjectV3AdapterConnectionNodesProjectV3Adapter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ProjectV3AdapterConnectionNodesProjectV3Adapter
		graphql.NoUnmarshalJSON
	}
	firstPass.ProjectV3AdapterConnectionNodesProjectV3Adapter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectV3AdapterSummary)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalProjectV3AdapterConnectionNodesProjectV3Adapter struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	ProjectV3 ProjectV3AdapterSummaryProjectV3 `json:"projectV3"`

	Repo ProjectV3AdapterSummaryRepo `json:"repo"`
}

func (v *ProjectV3AdapterConnectionNodesProjectV3Adapter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ProjectV3AdapterConnectionNodesProjectV3Adapter) __premarshalJSON() (*__premarshalProjectV3AdapterConnectionNodesProjectV3Adapter, error) {
	var retval __premarshalProjectV3AdapterConnectionNodesProjectV3Adapter

	retval.Id = v.ProjectV3AdapterSummary.Id
	retval.Name = v.ProjectV3AdapterSummary.Name
	retval.ProjectV3 = v.ProjectV3AdapterSummary.ProjectV3
	retval.Repo = v.ProjectV3AdapterSummary.Repo
	return &retval, nil
}

// ProjectV3AdapterSummary includes the GraphQL fields of ProjectV3Adapter requested by the fragment ProjectV3AdapterSummary.
type ProjectV3AdapterSummary struct {
	// - v0.ProjectAdapterID or v1.ProjectID
	Id        uuid.UUID                        `json:"id"`
	Name      string                           `json:"name"`
	ProjectV3 ProjectV3AdapterSummaryProjectV3 `json:"projectV3"`
	Repo      ProjectV3AdapterSummaryRepo      `json:"repo"`
}

// GetId returns ProjectV3AdapterSummary.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterSummary) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectV3AdapterSummary.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterSummary) GetName() string { return v.Name }

// GetProjectV3 returns ProjectV3AdapterSummary.ProjectV3, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterSummary) GetProjectV3() ProjectV3AdapterSummaryProjectV3 { return v.ProjectV3 }

// GetRepo returns ProjectV3AdapterSummary.Repo, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterSummary) GetRepo() ProjectV3AdapterSummaryRepo { return v.Repo }

// ProjectV3AdapterSummaryProjectV3 includes the requested fields of the GraphQL type ProjectV3.
type ProjectV3AdapterSummaryProjectV3 struct {
	// - v0.ProjectV3ID
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns ProjectV3AdapterSummaryProjectV3.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterSummaryProjectV3) GetId() uuid.UUID { return v.Id }

// GetName returns ProjectV3AdapterSummaryProjectV3.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterSummaryProjectV3) GetName() string { return v.Name }

// ProjectV3AdapterSummaryRepo includes the requested fields of the GraphQL type Repo.
type ProjectV3AdapterSummaryRepo struct {
	// - v0.RepoID
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns ProjectV3AdapterSummaryRepo.Id, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterSummaryRepo) GetId() string { return v.Id }

// GetName returns ProjectV3AdapterSummaryRepo.Name, and is useful for accessing the field via an interface.
func (v *ProjectV3AdapterSummaryRepo) GetName() string { return v.Name }

type RepoFilter struct {
	Status *RepoStatusCriterion `json:"status,omitempty"`
}

// GetStatus returns RepoFilter.Status, and is useful for accessing the field via an interface.
func (v *RepoFilter) GetStatus() *RepoStatusCriterion { return v.Status }

type RepoStatusCriterion struct {
	Value    *string                      `json:"value,omitempty"`
	Operator *FilterCriterionOperatorType `json:"operator,omitempty"`
}

// GetValue returns RepoStatusCriterion.Value, and is useful for accessing the field via an interface.
func (v *RepoStatusCriterion) GetValue() *string { return v.Value }

// GetOperator returns RepoStatusCriterion.Operator, and is useful for accessing the field via an interface.
func (v *RepoStatusCriterion) GetOperator() *FilterCriterionOperatorType { return v.Operator }

type ResourceAdapterFilter struct {
	Ids             *MultiEntityCriterion   `json:"ids,omitempty"`
	RepoIds         *MultiEntityCriterion   `json:"repoIds,omitempty"`
	ResourceIds     *MultiEntityCriterion   `json:"resourceIds,omitempty"`
	DeployableIds   *MultiEntityCriterion   `json:"deployableIds,omitempty"`
	Name            *StringCriterion        `json:"name,omitempty"`
	Status          *AdapterStatusCriterion `json:"status,omitempty"`
	ProjectName     *StringCriterion        `json:"projectName,omitempty"`
	EnvironmentName *StringCriterion        `json:"environmentName,omitempty"`
	// Active=true or Paused=false
	Active *BooleanCriterion `json:"active,omitempty"`
}

// GetIds returns ResourceAdapterFilter.Ids, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetIds() *MultiEntityCriterion { return v.Ids }

// GetRepoIds returns ResourceAdapterFilter.RepoIds, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetRepoIds() *MultiEntityCriterion { return v.RepoIds }

// GetResourceIds returns ResourceAdapterFilter.ResourceIds, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetResourceIds() *MultiEntityCriterion { return v.ResourceIds }

// GetDeployableIds returns ResourceAdapterFilter.DeployableIds, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetDeployableIds() *MultiEntityCriterion { return v.DeployableIds }

// GetName returns ResourceAdapterFilter.Name, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetName() *StringCriterion { return v.Name }

// GetStatus returns ResourceAdapterFilter.Status, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetStatus() *AdapterStatusCriterion { return v.Status }

// GetProjectName returns ResourceAdapterFilter.ProjectName, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetProjectName() *StringCriterion { return v.ProjectName }

// GetEnvironmentName returns ResourceAdapterFilter.EnvironmentName, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetEnvironmentName() *StringCriterion { return v.EnvironmentName }

// GetActive returns ResourceAdapterFilter.Active, and is useful for accessing the field via an interface.
func (v *ResourceAdapterFilter) GetActive() *BooleanCriterion { return v.Active }

type ResourceFilter struct {
	Ids           *MultiEntityCriterion `json:"ids,omitempty"`
	DeployableIds *MultiEntityCriterion `json:"deployableIds,omitempty"`
	UserIds       *MultiEntityCriterion `json:"userIds,omitempty"`
}

// GetIds returns ResourceFilter.Ids, and is useful for accessing the field via an interface.
func (v *ResourceFilter) GetIds() *MultiEntityCriterion { return v.Ids }

// GetDeployableIds returns ResourceFilter.DeployableIds, and is useful for accessing the field via an interface.
func (v *ResourceFilter) GetDeployableIds() *MultiEntityCriterion { return v.DeployableIds }

// GetUserIds returns ResourceFilter.UserIds, and is useful for accessing the field via an interface.
func (v *ResourceFilter) GetUserIds() *MultiEntityCriterion { return v.UserIds }

// runJobResponse is returned by runJob on success.
type RunJobResponse struct {
	RunJob RunJobRunJobJobRun `json:"runJob"`
}

// GetRunJob returns RunJobResponse.RunJob, and is useful for accessing the field via an interface.
func (v *RunJobResponse) GetRunJob() RunJobRunJobJobRun { return v.RunJob }

// RunJobRunJobJobRun includes the requested fields of the GraphQL type JobRun.
type RunJobRunJobJobRun struct {
	State JobRunState `json:"state"`
	Id    uuid.UUID   `json:"id"`
}

// GetState returns RunJobRunJobJobRun.State, and is useful for accessing the field via an interface.
func (v *RunJobRunJobJobRun) GetState() JobRunState { return v.State }

// GetId returns RunJobRunJobJobRun.Id, and is useful for accessing the field via an interface.
func (v *RunJobRunJobJobRun) GetId() uuid.UUID { return v.Id }

// setEnvVarsResponse is returned by setEnvVars on success.
type SetEnvVarsResponse struct {
	SetRepoEnvs SetEnvVarsSetRepoEnvsRepo `json:"setRepoEnvs"`
}

// GetSetRepoEnvs returns SetEnvVarsResponse.SetRepoEnvs, and is useful for accessing the field via an interface.
func (v *SetEnvVarsResponse) GetSetRepoEnvs() SetEnvVarsSetRepoEnvsRepo { return v.SetRepoEnvs }

// SetEnvVarsSetRepoEnvsRepo includes the requested fields of the GraphQL type Repo.
type SetEnvVarsSetRepoEnvsRepo struct {
	Envs []SetEnvVarsSetRepoEnvsRepoEnvsEnvVar `json:"envs,omitempty"`
}

// GetEnvs returns SetEnvVarsSetRepoEnvsRepo.Envs, and is useful for accessing the field via an interface.
func (v *SetEnvVarsSetRepoEnvsRepo) GetEnvs() []SetEnvVarsSetRepoEnvsRepoEnvsEnvVar { return v.Envs }

// SetEnvVarsSetRepoEnvsRepoEnvsEnvVar includes the requested fields of the GraphQL type EnvVar.
type SetEnvVarsSetRepoEnvsRepoEnvsEnvVar struct {
	Id string `json:"id"`
}

// GetId returns SetEnvVarsSetRepoEnvsRepoEnvsEnvVar.Id, and is useful for accessing the field via an interface.
func (v *SetEnvVarsSetRepoEnvsRepoEnvsEnvVar) GetId() string { return v.Id }

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

type SortInput struct {
	Direction *SortDirection `json:"direction,omitempty"`
	Field     *string        `json:"field,omitempty"`
}

// GetDirection returns SortInput.Direction, and is useful for accessing the field via an interface.
func (v *SortInput) GetDirection() *SortDirection { return v.Direction }

// GetField returns SortInput.Field, and is useful for accessing the field via an interface.
func (v *SortInput) GetField() *string { return v.Field }

type StringCriterion struct {
	Value    *string                      `json:"value,omitempty"`
	Operator *FilterCriterionOperatorType `json:"operator,omitempty"`
}

// GetValue returns StringCriterion.Value, and is useful for accessing the field via an interface.
func (v *StringCriterion) GetValue() *string { return v.Value }

// GetOperator returns StringCriterion.Operator, and is useful for accessing the field via an interface.
func (v *StringCriterion) GetOperator() *FilterCriterionOperatorType { return v.Operator }

// updateBranchResponse is returned by updateBranch on success.
type UpdateBranchResponse struct {
	UpdateBranch UpdateBranchUpdateBranchRepoBranchV2 `json:"updateBranch"`
}

// GetUpdateBranch returns UpdateBranchResponse.UpdateBranch, and is useful for accessing the field via an interface.
func (v *UpdateBranchResponse) GetUpdateBranch() UpdateBranchUpdateBranchRepoBranchV2 {
	return v.UpdateBranch
}

// UpdateBranchUpdateBranchRepoBranchV2 includes the requested fields of the GraphQL type RepoBranchV2.
type UpdateBranchUpdateBranchRepoBranchV2 struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns UpdateBranchUpdateBranchRepoBranchV2.Id, and is useful for accessing the field via an interface.
func (v *UpdateBranchUpdateBranchRepoBranchV2) GetId() uuid.UUID { return v.Id }

// updateClusterResponse is returned by updateCluster on success.
type UpdateClusterResponse struct {
	UpdateCluster UpdateClusterUpdateCluster `json:"updateCluster"`
}

// GetUpdateCluster returns UpdateClusterResponse.UpdateCluster, and is useful for accessing the field via an interface.
func (v *UpdateClusterResponse) GetUpdateCluster() UpdateClusterUpdateCluster { return v.UpdateCluster }

// UpdateClusterUpdateCluster includes the requested fields of the GraphQL type Cluster.
type UpdateClusterUpdateCluster struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns UpdateClusterUpdateCluster.Id, and is useful for accessing the field via an interface.
func (v *UpdateClusterUpdateCluster) GetId() uuid.UUID { return v.Id }

// updateProjectResponse is returned by updateProject on success.
type UpdateProjectResponse struct {
	UpdateProject UpdateProjectUpdateProjectRepo `json:"updateProject"`
}

// GetUpdateProject returns UpdateProjectResponse.UpdateProject, and is useful for accessing the field via an interface.
func (v *UpdateProjectResponse) GetUpdateProject() UpdateProjectUpdateProjectRepo {
	return v.UpdateProject
}

// UpdateProjectUpdateProjectRepo includes the requested fields of the GraphQL type Repo.
type UpdateProjectUpdateProjectRepo struct {
	// - v0.RepoID
	Id string `json:"id"`
}

// GetId returns UpdateProjectUpdateProjectRepo.Id, and is useful for accessing the field via an interface.
func (v *UpdateProjectUpdateProjectRepo) GetId() string { return v.Id }

type UserFilter struct {
	Ids *MultiEntityCriterion `json:"ids,omitempty"`
}

// GetIds returns UserFilter.Ids, and is useful for accessing the field via an interface.
func (v *UserFilter) GetIds() *MultiEntityCriterion { return v.Ids }

// __GetCloudAWSInput is used internally by genqlient
type __GetCloudAWSInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __GetCloudAWSInput.Id, and is useful for accessing the field via an interface.
func (v *__GetCloudAWSInput) GetId() uuid.UUID { return v.Id }

// __GetCloudDigitalOceanInput is used internally by genqlient
type __GetCloudDigitalOceanInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __GetCloudDigitalOceanInput.Id, and is useful for accessing the field via an interface.
func (v *__GetCloudDigitalOceanInput) GetId() uuid.UUID { return v.Id }

// __GetCloudGCPInput is used internally by genqlient
type __GetCloudGCPInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __GetCloudGCPInput.Id, and is useful for accessing the field via an interface.
func (v *__GetCloudGCPInput) GetId() uuid.UUID { return v.Id }

// __GetCloudLinodeInput is used internally by genqlient
type __GetCloudLinodeInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __GetCloudLinodeInput.Id, and is useful for accessing the field via an interface.
func (v *__GetCloudLinodeInput) GetId() uuid.UUID { return v.Id }

// __buildRepoDefaultBranchInput is used internally by genqlient
type __buildRepoDefaultBranchInput struct {
	Id      string `json:"id"`
	NoCache bool   `json:"noCache"`
}

// GetId returns __buildRepoDefaultBranchInput.Id, and is useful for accessing the field via an interface.
func (v *__buildRepoDefaultBranchInput) GetId() string { return v.Id }

// GetNoCache returns __buildRepoDefaultBranchInput.NoCache, and is useful for accessing the field via an interface.
func (v *__buildRepoDefaultBranchInput) GetNoCache() bool { return v.NoCache }

// __buildRepoInput is used internally by genqlient
type __buildRepoInput struct {
	Id      string `json:"id"`
	Branch  string `json:"branch"`
	NoCache bool   `json:"noCache"`
}

// GetId returns __buildRepoInput.Id, and is useful for accessing the field via an interface.
func (v *__buildRepoInput) GetId() string { return v.Id }

// GetBranch returns __buildRepoInput.Branch, and is useful for accessing the field via an interface.
func (v *__buildRepoInput) GetBranch() string { return v.Branch }

// GetNoCache returns __buildRepoInput.NoCache, and is useful for accessing the field via an interface.
func (v *__buildRepoInput) GetNoCache() bool { return v.NoCache }

// __deleteBlueprintInput is used internally by genqlient
type __deleteBlueprintInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteBlueprintInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteBlueprintInput) GetId() uuid.UUID { return v.Id }

// __deleteInput is used internally by genqlient
type __deleteInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteInput) GetId() string { return v.Id }

// __deployRepoBranchInput is used internally by genqlient
type __deployRepoBranchInput struct {
	Branch    string    `json:"branch"`
	ProjectId uuid.UUID `json:"projectId"`
}

// GetBranch returns __deployRepoBranchInput.Branch, and is useful for accessing the field via an interface.
func (v *__deployRepoBranchInput) GetBranch() string { return v.Branch }

// GetProjectId returns __deployRepoBranchInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__deployRepoBranchInput) GetProjectId() uuid.UUID { return v.ProjectId }

// __getBlueprintInput is used internally by genqlient
type __getBlueprintInput struct {
	UserID      string    `json:"userID"`
	BlueprintID uuid.UUID `json:"blueprintID"`
}

// GetUserID returns __getBlueprintInput.UserID, and is useful for accessing the field via an interface.
func (v *__getBlueprintInput) GetUserID() string { return v.UserID }

// GetBlueprintID returns __getBlueprintInput.BlueprintID, and is useful for accessing the field via an interface.
func (v *__getBlueprintInput) GetBlueprintID() uuid.UUID { return v.BlueprintID }

// __getBlueprintsInput is used internally by genqlient
type __getBlueprintsInput struct {
	UserId    string    `json:"userId"`
	PageInput PageInput `json:"pageInput"`
}

// GetUserId returns __getBlueprintsInput.UserId, and is useful for accessing the field via an interface.
func (v *__getBlueprintsInput) GetUserId() string { return v.UserId }

// GetPageInput returns __getBlueprintsInput.PageInput, and is useful for accessing the field via an interface.
func (v *__getBlueprintsInput) GetPageInput() PageInput { return v.PageInput }

// __getBuildLogsInput is used internally by genqlient
type __getBuildLogsInput struct {
	Id string `json:"id"`
}

// GetId returns __getBuildLogsInput.Id, and is useful for accessing the field via an interface.
func (v *__getBuildLogsInput) GetId() string { return v.Id }

// __getClusterKubeconfigInput is used internally by genqlient
type __getClusterKubeconfigInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __getClusterKubeconfigInput.Id, and is useful for accessing the field via an interface.
func (v *__getClusterKubeconfigInput) GetId() uuid.UUID { return v.Id }

// __getDeploymentInfoInput is used internally by genqlient
type __getDeploymentInfoInput struct {
	Id string `json:"id"`
}

// GetId returns __getDeploymentInfoInput.Id, and is useful for accessing the field via an interface.
func (v *__getDeploymentInfoInput) GetId() string { return v.Id }

// __getDeploymentLogsInput is used internally by genqlient
type __getDeploymentLogsInput struct {
	Id string `json:"id"`
}

// GetId returns __getDeploymentLogsInput.Id, and is useful for accessing the field via an interface.
func (v *__getDeploymentLogsInput) GetId() string { return v.Id }

// __getDeploymentReplicaStatusInput is used internally by genqlient
type __getDeploymentReplicaStatusInput struct {
	Id string `json:"id"`
}

// GetId returns __getDeploymentReplicaStatusInput.Id, and is useful for accessing the field via an interface.
func (v *__getDeploymentReplicaStatusInput) GetId() string { return v.Id }

// __getEnvVarsInput is used internally by genqlient
type __getEnvVarsInput struct {
	Id string `json:"id"`
}

// GetId returns __getEnvVarsInput.Id, and is useful for accessing the field via an interface.
func (v *__getEnvVarsInput) GetId() string { return v.Id }

// __getJobInput is used internally by genqlient
type __getJobInput struct {
	ProjectID uuid.UUID `json:"projectID"`
	JobID     uuid.UUID `json:"jobID"`
}

// GetProjectID returns __getJobInput.ProjectID, and is useful for accessing the field via an interface.
func (v *__getJobInput) GetProjectID() uuid.UUID { return v.ProjectID }

// GetJobID returns __getJobInput.JobID, and is useful for accessing the field via an interface.
func (v *__getJobInput) GetJobID() uuid.UUID { return v.JobID }

// __getJobLogsInput is used internally by genqlient
type __getJobLogsInput struct {
	RepoID uuid.UUID `json:"repoID"`
	JobID  uuid.UUID `json:"jobID"`
}

// GetRepoID returns __getJobLogsInput.RepoID, and is useful for accessing the field via an interface.
func (v *__getJobLogsInput) GetRepoID() uuid.UUID { return v.RepoID }

// GetJobID returns __getJobLogsInput.JobID, and is useful for accessing the field via an interface.
func (v *__getJobLogsInput) GetJobID() uuid.UUID { return v.JobID }

// __getLatestDeploymentInput is used internally by genqlient
type __getLatestDeploymentInput struct {
	Project string `json:"project"`
	Branch  string `json:"branch"`
}

// GetProject returns __getLatestDeploymentInput.Project, and is useful for accessing the field via an interface.
func (v *__getLatestDeploymentInput) GetProject() string { return v.Project }

// GetBranch returns __getLatestDeploymentInput.Branch, and is useful for accessing the field via an interface.
func (v *__getLatestDeploymentInput) GetBranch() string { return v.Branch }

// __getProductionBranchInput is used internally by genqlient
type __getProductionBranchInput struct {
	RepoId string `json:"repoId"`
}

// GetRepoId returns __getProductionBranchInput.RepoId, and is useful for accessing the field via an interface.
func (v *__getProductionBranchInput) GetRepoId() string { return v.RepoId }

// __getProductionDeploymentInput is used internally by genqlient
type __getProductionDeploymentInput struct {
	Project string `json:"project"`
}

// GetProject returns __getProductionDeploymentInput.Project, and is useful for accessing the field via an interface.
func (v *__getProductionDeploymentInput) GetProject() string { return v.Project }

// __getProjectByPathInput is used internally by genqlient
type __getProjectByPathInput struct {
	Path string `json:"path"`
}

// GetPath returns __getProjectByPathInput.Path, and is useful for accessing the field via an interface.
func (v *__getProjectByPathInput) GetPath() string { return v.Path }

// __getProjectPathInput is used internally by genqlient
type __getProjectPathInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __getProjectPathInput.Id, and is useful for accessing the field via an interface.
func (v *__getProjectPathInput) GetId() uuid.UUID { return v.Id }

// __getProjectV3sInput is used internally by genqlient
type __getProjectV3sInput struct {
	UserId *string      `json:"userId,omitempty"`
	Filter *FilterInput `json:"filter,omitempty"`
}

// GetUserId returns __getProjectV3sInput.UserId, and is useful for accessing the field via an interface.
func (v *__getProjectV3sInput) GetUserId() *string { return v.UserId }

// GetFilter returns __getProjectV3sInput.Filter, and is useful for accessing the field via an interface.
func (v *__getProjectV3sInput) GetFilter() *FilterInput { return v.Filter }

// __getRepoInput is used internally by genqlient
type __getRepoInput struct {
	Path string `json:"path"`
}

// GetPath returns __getRepoInput.Path, and is useful for accessing the field via an interface.
func (v *__getRepoInput) GetPath() string { return v.Path }

// __getRuntimeLogsInput is used internally by genqlient
type __getRuntimeLogsInput struct {
	Id string `json:"id"`
}

// GetId returns __getRuntimeLogsInput.Id, and is useful for accessing the field via an interface.
func (v *__getRuntimeLogsInput) GetId() string { return v.Id }

// __listClustersForTeamInput is used internally by genqlient
type __listClustersForTeamInput struct {
	Path string `json:"path"`
}

// GetPath returns __listClustersForTeamInput.Path, and is useful for accessing the field via an interface.
func (v *__listClustersForTeamInput) GetPath() string { return v.Path }

// __runJobInput is used internally by genqlient
type __runJobInput struct {
	Id      uuid.UUID `json:"id"`
	Command string    `json:"command"`
	Build   bool      `json:"build"`
}

// GetId returns __runJobInput.Id, and is useful for accessing the field via an interface.
func (v *__runJobInput) GetId() uuid.UUID { return v.Id }

// GetCommand returns __runJobInput.Command, and is useful for accessing the field via an interface.
func (v *__runJobInput) GetCommand() string { return v.Command }

// GetBuild returns __runJobInput.Build, and is useful for accessing the field via an interface.
func (v *__runJobInput) GetBuild() bool { return v.Build }

// __setEnvVarsInput is used internally by genqlient
type __setEnvVarsInput struct {
	Id   string        `json:"id"`
	Envs []EnvVarInput `json:"envs,omitempty"`
}

// GetId returns __setEnvVarsInput.Id, and is useful for accessing the field via an interface.
func (v *__setEnvVarsInput) GetId() string { return v.Id }

// GetEnvs returns __setEnvVarsInput.Envs, and is useful for accessing the field via an interface.
func (v *__setEnvVarsInput) GetEnvs() []EnvVarInput { return v.Envs }

// __updateBranchInput is used internally by genqlient
type __updateBranchInput struct {
	Image      string    `json:"image"`
	Deploy     bool      `json:"deploy"`
	ProjectID  uuid.UUID `json:"projectID"`
	BranchName string    `json:"branchName"`
}

// GetImage returns __updateBranchInput.Image, and is useful for accessing the field via an interface.
func (v *__updateBranchInput) GetImage() string { return v.Image }

// GetDeploy returns __updateBranchInput.Deploy, and is useful for accessing the field via an interface.
func (v *__updateBranchInput) GetDeploy() bool { return v.Deploy }

// GetProjectID returns __updateBranchInput.ProjectID, and is useful for accessing the field via an interface.
func (v *__updateBranchInput) GetProjectID() uuid.UUID { return v.ProjectID }

// GetBranchName returns __updateBranchInput.BranchName, and is useful for accessing the field via an interface.
func (v *__updateBranchInput) GetBranchName() string { return v.BranchName }

// __updateClusterInput is used internally by genqlient
type __updateClusterInput struct {
	Id   uuid.UUID `json:"id"`
	File string    `json:"file"`
}

// GetId returns __updateClusterInput.Id, and is useful for accessing the field via an interface.
func (v *__updateClusterInput) GetId() uuid.UUID { return v.Id }

// GetFile returns __updateClusterInput.File, and is useful for accessing the field via an interface.
func (v *__updateClusterInput) GetFile() string { return v.File }

// __updateProjectInput is used internally by genqlient
type __updateProjectInput struct {
	ProjectID string `json:"projectID"`
	Image     string `json:"image"`
}

// GetProjectID returns __updateProjectInput.ProjectID, and is useful for accessing the field via an interface.
func (v *__updateProjectInput) GetProjectID() string { return v.ProjectID }

// GetImage returns __updateProjectInput.Image, and is useful for accessing the field via an interface.
func (v *__updateProjectInput) GetImage() string { return v.Image }

// The query or mutation executed by GetCloudAWS.
const GetCloudAWS_Operation = `
query GetCloudAWS ($id: UUID!) {
	currentUser {
		awsAccount(id: $id) {
			id
			roleARN
			externalID
		}
	}
}
`

func GetCloudAWSQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*GetCloudAWSResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetCloudAWS",
		Query:  GetCloudAWS_Operation,
		Variables: &__GetCloudAWSInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetCloudAWSResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetCloudDigitalOcean.
const GetCloudDigitalOcean_Operation = `
query GetCloudDigitalOcean ($id: UUID!) {
	currentUser {
		doAccount(id: $id) {
			id
			accessToken
		}
	}
}
`

func GetCloudDigitalOceanQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*GetCloudDigitalOceanResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetCloudDigitalOcean",
		Query:  GetCloudDigitalOcean_Operation,
		Variables: &__GetCloudDigitalOceanInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetCloudDigitalOceanResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetCloudGCP.
const GetCloudGCP_Operation = `
query GetCloudGCP ($id: UUID!) {
	currentUser {
		gcpAccount(id: $id) {
			id
			projectID
			credentials
		}
	}
}
`

func GetCloudGCPQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*GetCloudGCPResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetCloudGCP",
		Query:  GetCloudGCP_Operation,
		Variables: &__GetCloudGCPInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetCloudGCPResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetCloudLinode.
const GetCloudLinode_Operation = `
query GetCloudLinode ($id: UUID!) {
	currentUser {
		linodeAccount(id: $id) {
			id
			accessToken
		}
	}
}
`

func GetCloudLinodeQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*GetCloudLinodeResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetCloudLinode",
		Query:  GetCloudLinode_Operation,
		Variables: &__GetCloudLinodeInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetCloudLinodeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by buildRepo.
const buildRepo_Operation = `
mutation buildRepo ($id: ID!, $branch: String, $noCache: Boolean) {
	buildRepo(id: $id, branch: $branch, noCache: $noCache) {
		deployments {
			id
			status
			branch
			endpoints
			privateEndpoint
		}
	}
}
`

func BuildRepoMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	branch string,
	noCache bool,
) (*BuildRepoResponse, error) {
	req_ := &graphql.Request{
		OpName: "buildRepo",
		Query:  buildRepo_Operation,
		Variables: &__buildRepoInput{
			Id:      id,
			Branch:  branch,
			NoCache: noCache,
		},
	}
	var err_ error

	var data_ BuildRepoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by buildRepoDefaultBranch.
const buildRepoDefaultBranch_Operation = `
mutation buildRepoDefaultBranch ($id: ID!, $noCache: Boolean) {
	buildRepo(id: $id, noCache: $noCache) {
		deployments {
			id
			status
			branch
			endpoints
			privateEndpoint
		}
	}
}
`

func BuildRepoDefaultBranchMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	noCache bool,
) (*BuildRepoDefaultBranchResponse, error) {
	req_ := &graphql.Request{
		OpName: "buildRepoDefaultBranch",
		Query:  buildRepoDefaultBranch_Operation,
		Variables: &__buildRepoDefaultBranchInput{
			Id:      id,
			NoCache: noCache,
		},
	}
	var err_ error

	var data_ BuildRepoDefaultBranchResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by delete.
const delete_Operation = `
mutation delete ($id: ID!) {
	deleteRepo(id: $id)
}
`

func DeleteMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*DeleteResponse, error) {
	req_ := &graphql.Request{
		OpName: "delete",
		Query:  delete_Operation,
		Variables: &__deleteInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DeleteResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deleteBlueprint.
const deleteBlueprint_Operation = `
mutation deleteBlueprint ($id: UUID!) {
	deleteBlueprint(id: $id)
}
`

func DeleteBlueprintMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*DeleteBlueprintResponse, error) {
	req_ := &graphql.Request{
		OpName: "deleteBlueprint",
		Query:  deleteBlueprint_Operation,
		Variables: &__deleteBlueprintInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DeleteBlueprintResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by deployRepoBranch.
const deployRepoBranch_Operation = `
mutation deployRepoBranch ($branch: String!, $projectId: UUID!) {
	deployRepoBranch(input: {id:$projectId,branch:$branch}) {
		deployments {
			id
			status
			branch
			endpoints
			privateEndpoint
		}
	}
}
`

func DeployRepoBranchMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	branch string,
	projectId uuid.UUID,
) (*DeployRepoBranchResponse, error) {
	req_ := &graphql.Request{
		OpName: "deployRepoBranch",
		Query:  deployRepoBranch_Operation,
		Variables: &__deployRepoBranchInput{
			Branch:    branch,
			ProjectId: projectId,
		},
	}
	var err_ error

	var data_ DeployRepoBranchResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getBlueprint.
const getBlueprint_Operation = `
query getBlueprint ($userID: ID!, $blueprintID: UUID!) {
	user(id: $userID) {
		blueprint(id: $blueprintID) {
			... BlueprintSummary
		}
	}
}
fragment BlueprintSummary on Blueprint {
	id
	slug
	displayName
	description
	type
	projectCount
	richInputSchema
	tags
}
`

func GetBlueprintQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userID string,
	blueprintID uuid.UUID,
) (*GetBlueprintResponse, error) {
	req_ := &graphql.Request{
		OpName: "getBlueprint",
		Query:  getBlueprint_Operation,
		Variables: &__getBlueprintInput{
			UserID:      userID,
			BlueprintID: blueprintID,
		},
	}
	var err_ error

	var data_ GetBlueprintResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getBlueprints.
const getBlueprints_Operation = `
query getBlueprints ($userId: ID!, $pageInput: PageInput!) {
	user(id: $userId) {
		blueprints(page: $pageInput) {
			totalCount
			pageInfo {
				startCursor
				endCursor
				hasNextPage
				hasPreviousPage
			}
			nodes {
				... BlueprintSummary
			}
		}
	}
}
fragment BlueprintSummary on Blueprint {
	id
	slug
	displayName
	description
	type
	projectCount
	richInputSchema
	tags
}
`

func GetBlueprintsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userId string,
	pageInput PageInput,
) (*GetBlueprintsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getBlueprints",
		Query:  getBlueprints_Operation,
		Variables: &__getBlueprintsInput{
			UserId:    userId,
			PageInput: pageInput,
		},
	}
	var err_ error

	var data_ GetBlueprintsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getBuildLogs.
const getBuildLogs_Operation = `
query getBuildLogs ($id: ID!) {
	currentUser {
		deployment(id: $id) {
			build {
				logs {
					entries {
						text
						timestamp
					}
				}
			}
		}
	}
}
`

func GetBuildLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetBuildLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getBuildLogs",
		Query:  getBuildLogs_Operation,
		Variables: &__getBuildLogsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetBuildLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getClusterKubeconfig.
const getClusterKubeconfig_Operation = `
query getClusterKubeconfig ($id: UUID!) {
	currentUser {
		cluster(id: $id) {
			id
			name
			kubeconfig
		}
	}
}
`

func GetClusterKubeconfigQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*GetClusterKubeconfigResponse, error) {
	req_ := &graphql.Request{
		OpName: "getClusterKubeconfig",
		Query:  getClusterKubeconfig_Operation,
		Variables: &__getClusterKubeconfigInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetClusterKubeconfigResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getCurrentUser.
const getCurrentUser_Operation = `
query getCurrentUser {
	currentUser {
		id
		login
	}
}
`

func GetCurrentUserQuery(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetCurrentUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "getCurrentUser",
		Query:  getCurrentUser_Operation,
	}
	var err_ error

	var data_ GetCurrentUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getDeploymentInfo.
const getDeploymentInfo_Operation = `
query getDeploymentInfo ($id: ID!) {
	currentUser {
		deployment(id: $id) {
			id
			status
			endpoints
			privateEndpoint
			errorMessage
		}
	}
}
`

func GetDeploymentInfoQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetDeploymentInfoResponse, error) {
	req_ := &graphql.Request{
		OpName: "getDeploymentInfo",
		Query:  getDeploymentInfo_Operation,
		Variables: &__getDeploymentInfoInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetDeploymentInfoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getDeploymentLogs.
const getDeploymentLogs_Operation = `
query getDeploymentLogs ($id: ID!) {
	currentUser {
		deployment(id: $id) {
			deployStep {
				logs {
					entries {
						text
						timestamp
					}
				}
			}
		}
	}
}
`

func GetDeploymentLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetDeploymentLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getDeploymentLogs",
		Query:  getDeploymentLogs_Operation,
		Variables: &__getDeploymentLogsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetDeploymentLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getDeploymentReplicaStatus.
const getDeploymentReplicaStatus_Operation = `
query getDeploymentReplicaStatus ($id: ID!) {
	currentUser {
		deployment(id: $id) {
			deployStatus {
				replicas
				readyReplicas
				runningReplicas
				state
				errorMessage
			}
		}
	}
}
`

func GetDeploymentReplicaStatusQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetDeploymentReplicaStatusResponse, error) {
	req_ := &graphql.Request{
		OpName: "getDeploymentReplicaStatus",
		Query:  getDeploymentReplicaStatus_Operation,
		Variables: &__getDeploymentReplicaStatusInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetDeploymentReplicaStatusResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getEnvVars.
const getEnvVars_Operation = `
query getEnvVars ($id: ID!) {
	currentUser {
		repo(id: $id) {
			envs {
				name
				value
			}
		}
	}
}
`

func GetEnvVarsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetEnvVarsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getEnvVars",
		Query:  getEnvVars_Operation,
		Variables: &__getEnvVarsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetEnvVarsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getJob.
const getJob_Operation = `
query getJob ($projectID: UUID!, $jobID: UUID!) {
	repo(id: $projectID) {
		jobRun(id: $jobID) {
			id
			state
		}
	}
}
`

func GetJobQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	projectID uuid.UUID,
	jobID uuid.UUID,
) (*GetJobResponse, error) {
	req_ := &graphql.Request{
		OpName: "getJob",
		Query:  getJob_Operation,
		Variables: &__getJobInput{
			ProjectID: projectID,
			JobID:     jobID,
		},
	}
	var err_ error

	var data_ GetJobResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getJobLogs.
const getJobLogs_Operation = `
query getJobLogs ($repoID: UUID!, $jobID: UUID!) {
	repo(id: $repoID) {
		jobRun(id: $jobID) {
			logs {
				entries {
					text
					timestamp
				}
			}
		}
	}
}
`

func GetJobLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	repoID uuid.UUID,
	jobID uuid.UUID,
) (*GetJobLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getJobLogs",
		Query:  getJobLogs_Operation,
		Variables: &__getJobLogsInput{
			RepoID: repoID,
			JobID:  jobID,
		},
	}
	var err_ error

	var data_ GetJobLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getLatestDeployment.
const getLatestDeployment_Operation = `
query getLatestDeployment ($project: String, $branch: String) {
	repo(path: $project) {
		branch(name: $branch) {
			latestDeployment {
				id
				status
				branch
				endpoints
				privateEndpoint
			}
		}
	}
}
`

func GetLatestDeploymentQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	project string,
	branch string,
) (*GetLatestDeploymentResponse, error) {
	req_ := &graphql.Request{
		OpName: "getLatestDeployment",
		Query:  getLatestDeployment_Operation,
		Variables: &__getLatestDeploymentInput{
			Project: project,
			Branch:  branch,
		},
	}
	var err_ error

	var data_ GetLatestDeploymentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProductionBranch.
const getProductionBranch_Operation = `
query getProductionBranch ($repoId: ID!) {
	currentUser {
		repo(id: $repoId) {
			id
			productionBranchV2 {
				name
			}
		}
	}
}
`

func GetProductionBranchQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	repoId string,
) (*GetProductionBranchResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProductionBranch",
		Query:  getProductionBranch_Operation,
		Variables: &__getProductionBranchInput{
			RepoId: repoId,
		},
	}
	var err_ error

	var data_ GetProductionBranchResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProductionDeployment.
const getProductionDeployment_Operation = `
query getProductionDeployment ($project: String!) {
	repo(path: $project) {
		productionDeployment {
			id
			status
			endpoints
			privateEndpoint
		}
	}
}
`

func GetProductionDeploymentQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	project string,
) (*GetProductionDeploymentResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProductionDeployment",
		Query:  getProductionDeployment_Operation,
		Variables: &__getProductionDeploymentInput{
			Project: project,
		},
	}
	var err_ error

	var data_ GetProductionDeploymentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectByPath.
const getProjectByPath_Operation = `
query getProjectByPath ($path: String) {
	repo(path: $path) {
		id
	}
}
`

func GetProjectByPathQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
) (*GetProjectByPathResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectByPath",
		Query:  getProjectByPath_Operation,
		Variables: &__getProjectByPathInput{
			Path: path,
		},
	}
	var err_ error

	var data_ GetProjectByPathResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectPath.
const getProjectPath_Operation = `
query getProjectPath ($id: UUID!) {
	repo(id: $id) {
		fullPath
	}
}
`

func GetProjectPathQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*GetProjectPathResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectPath",
		Query:  getProjectPath_Operation,
		Variables: &__getProjectPathInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetProjectPathResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectV3s.
const getProjectV3s_Operation = `
query getProjectV3s ($userId: ID!, $filter: FilterInput!) {
	user(id: $userId) {
		projectV3Adapters(filter: $filter) {
			totalCount
			pageInfo {
				startCursor
				endCursor
				hasNextPage
				hasPreviousPage
			}
			nodes {
				... ProjectV3AdapterSummary
			}
		}
	}
}
fragment ProjectV3AdapterSummary on ProjectV3Adapter {
	id
	name
	projectV3 {
		id
		name
	}
	repo {
		id
		name
	}
}
`

func GetProjectV3sQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	userId *string,
	filter *FilterInput,
) (*GetProjectV3sResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectV3s",
		Query:  getProjectV3s_Operation,
		Variables: &__getProjectV3sInput{
			UserId: userId,
			Filter: filter,
		},
	}
	var err_ error

	var data_ GetProjectV3sResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getRepo.
const getRepo_Operation = `
query getRepo ($path: String!) {
	repo(path: $path) {
		id
	}
}
`

func GetRepoQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
) (*GetRepoResponse, error) {
	req_ := &graphql.Request{
		OpName: "getRepo",
		Query:  getRepo_Operation,
		Variables: &__getRepoInput{
			Path: path,
		},
	}
	var err_ error

	var data_ GetRepoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getRuntimeLogs.
const getRuntimeLogs_Operation = `
query getRuntimeLogs ($id: ID!) {
	currentUser {
		deployment(id: $id) {
			logs {
				text
				timestamp
			}
		}
	}
}
`

func GetRuntimeLogsQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetRuntimeLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getRuntimeLogs",
		Query:  getRuntimeLogs_Operation,
		Variables: &__getRuntimeLogsInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetRuntimeLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by listClusters.
const listClusters_Operation = `
query listClusters {
	currentUser {
		clusters {
			id
			name
			cloudProvider
			clusterProvider
			region
			connected
		}
	}
}
`

func ListClustersQuery(
	ctx_ context.Context,
	client_ graphql.Client,
) (*ListClustersResponse, error) {
	req_ := &graphql.Request{
		OpName: "listClusters",
		Query:  listClusters_Operation,
	}
	var err_ error

	var data_ ListClustersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by listClustersForTeam.
const listClustersForTeam_Operation = `
query listClustersForTeam ($path: String) {
	team(path: $path) {
		user {
			clusters {
				id
				name
				cloudProvider
				clusterProvider
				region
				connected
			}
		}
	}
}
`

func ListClustersForTeamQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	path string,
) (*ListClustersForTeamResponse, error) {
	req_ := &graphql.Request{
		OpName: "listClustersForTeam",
		Query:  listClustersForTeam_Operation,
		Variables: &__listClustersForTeamInput{
			Path: path,
		},
	}
	var err_ error

	var data_ ListClustersForTeamResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by runJob.
const runJob_Operation = `
mutation runJob ($id: UUID!, $command: String!, $build: Boolean!) {
	runJob(input: {id:$id,runCommand:$command,build:$build}) {
		state
		id
	}
}
`

func RunJobMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	command string,
	build bool,
) (*RunJobResponse, error) {
	req_ := &graphql.Request{
		OpName: "runJob",
		Query:  runJob_Operation,
		Variables: &__runJobInput{
			Id:      id,
			Command: command,
			Build:   build,
		},
	}
	var err_ error

	var data_ RunJobResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by setEnvVars.
const setEnvVars_Operation = `
mutation setEnvVars ($id: ID!, $envs: [EnvVarInput!]!) {
	setRepoEnvs(input: {id:$id,envs:$envs}) {
		envs {
			id
		}
	}
}
`

func SetEnvVarsMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	envs []EnvVarInput,
) (*SetEnvVarsResponse, error) {
	req_ := &graphql.Request{
		OpName: "setEnvVars",
		Query:  setEnvVars_Operation,
		Variables: &__setEnvVarsInput{
			Id:   id,
			Envs: envs,
		},
	}
	var err_ error

	var data_ SetEnvVarsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateBranch.
const updateBranch_Operation = `
mutation updateBranch ($image: String!, $deploy: Boolean, $projectID: UUID!, $branchName: String!) {
	updateBranch(input: {image:$image,deploy:$deploy,repoID:$projectID,name:$branchName}) {
		id
	}
}
`

func UpdateBranchMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	image string,
	deploy bool,
	projectID uuid.UUID,
	branchName string,
) (*UpdateBranchResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateBranch",
		Query:  updateBranch_Operation,
		Variables: &__updateBranchInput{
			Image:      image,
			Deploy:     deploy,
			ProjectID:  projectID,
			BranchName: branchName,
		},
	}
	var err_ error

	var data_ UpdateBranchResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateCluster.
const updateCluster_Operation = `
mutation updateCluster ($id: UUID!, $file: Upload!) {
	updateCluster(input: {id:$id,kubeconfig:$file}) {
		id
	}
}
`

func UpdateClusterMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	file string,
) (*UpdateClusterResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateCluster",
		Query:  updateCluster_Operation,
		Variables: &__updateClusterInput{
			Id:   id,
			File: file,
		},
	}
	var err_ error

	var data_ UpdateClusterResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateProject.
const updateProject_Operation = `
mutation updateProject ($projectID: ID!, $image: String!) {
	updateProject(input: {id:$projectID,dockerImage:$image}) {
		id
	}
}
`

func UpdateProjectMutation(
	ctx_ context.Context,
	client_ graphql.Client,
	projectID string,
	image string,
) (*UpdateProjectResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateProject",
		Query:  updateProject_Operation,
		Variables: &__updateProjectInput{
			ProjectID: projectID,
			Image:     image,
		},
	}
	var err_ error

	var data_ UpdateProjectResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
